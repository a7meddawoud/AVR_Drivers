
medo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006ce6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000066  00800060  00006ce6  00006d7a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000040  008000c6  008000c6  00006de0  2**0
                  ALLOC
  3 .stab         00007da0  00000000  00000000  00006de0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002f78  00000000  00000000  0000eb80  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00011af8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00011c38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00011da8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000139f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000148dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0001568c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000157ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00015a79  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00016247  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 14 0f 	jmp	0x1e28	; 0x1e28 <__vector_1>
       8:	0c 94 47 0f 	jmp	0x1e8e	; 0x1e8e <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 7f 0a 	jmp	0x14fe	; 0x14fe <__vector_6>
      1c:	0c 94 e6 09 	jmp	0x13cc	; 0x13cc <__vector_7>
      20:	0c 94 19 0a 	jmp	0x1432	; 0x1432 <__vector_8>
      24:	0c 94 4c 0a 	jmp	0x1498	; 0x1498 <__vector_9>
      28:	0c 94 38 0b 	jmp	0x1670	; 0x1670 <__vector_10>
      2c:	0c 94 6b 0b 	jmp	0x16d6	; 0x16d6 <__vector_11>
      30:	0c 94 31 0c 	jmp	0x1862	; 0x1862 <__vector_12>
      34:	0c 94 eb 06 	jmp	0xdd6	; 0xdd6 <__vector_13>
      38:	0c 94 1e 07 	jmp	0xe3c	; 0xe3c <__vector_14>
      3c:	0c 94 51 07 	jmp	0xea2	; 0xea2 <__vector_15>
      40:	0c 94 24 14 	jmp	0x2848	; 0x2848 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 5d 0d 	jmp	0x1aba	; 0x1aba <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ee       	ldi	r30, 0xE6	; 230
      68:	fc e6       	ldi	r31, 0x6C	; 108
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3c       	cpi	r26, 0xC6	; 198
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 ec       	ldi	r26, 0xC6	; 198
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 30       	cpi	r26, 0x06	; 6
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 45 35 	call	0x6a8a	; 0x6a8a <main>
      8a:	0c 94 71 36 	jmp	0x6ce2	; 0x6ce2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 3a 36 	jmp	0x6c74	; 0x6c74 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 ea       	ldi	r26, 0xA5	; 165
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 56 36 	jmp	0x6cac	; 0x6cac <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 46 36 	jmp	0x6c8c	; 0x6c8c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 62 36 	jmp	0x6cc4	; 0x6cc4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 46 36 	jmp	0x6c8c	; 0x6c8c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 62 36 	jmp	0x6cc4	; 0x6cc4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 3a 36 	jmp	0x6c74	; 0x6c74 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	85 ea       	ldi	r24, 0xA5	; 165
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 56 36 	jmp	0x6cac	; 0x6cac <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 46 36 	jmp	0x6c8c	; 0x6c8c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 62 36 	jmp	0x6cc4	; 0x6cc4 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 46 36 	jmp	0x6c8c	; 0x6c8c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 62 36 	jmp	0x6cc4	; 0x6cc4 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 46 36 	jmp	0x6c8c	; 0x6c8c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 62 36 	jmp	0x6cc4	; 0x6cc4 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 4a 36 	jmp	0x6c94	; 0x6c94 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 66 36 	jmp	0x6ccc	; 0x6ccc <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <OS_vInit>:
 */
#include "OS.h"

tasks a[3];
volatile u32 OS_Counter=0;
void OS_vInit(){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	Timer1_vInit();
     b4e:	0e 94 84 07 	call	0xf08	; 0xf08 <Timer1_vInit>
	EXTI_vEnableGIE();
     b52:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <EXTI_vEnableGIE>
	Timer1_vCompareChannelAInterruptEnable();
     b56:	0e 94 a0 08 	call	0x1140	; 0x1140 <Timer1_vCompareChannelAInterruptEnable>
}
     b5a:	cf 91       	pop	r28
     b5c:	df 91       	pop	r29
     b5e:	08 95       	ret

00000b60 <OS_AddTask>:
void OS_AddTask(u8 Loc_preuorty,u32 Loc_preucuty, void(*ptrr)(void)){
     b60:	df 93       	push	r29
     b62:	cf 93       	push	r28
     b64:	cd b7       	in	r28, 0x3d	; 61
     b66:	de b7       	in	r29, 0x3e	; 62
     b68:	27 97       	sbiw	r28, 0x07	; 7
     b6a:	0f b6       	in	r0, 0x3f	; 63
     b6c:	f8 94       	cli
     b6e:	de bf       	out	0x3e, r29	; 62
     b70:	0f be       	out	0x3f, r0	; 63
     b72:	cd bf       	out	0x3d, r28	; 61
     b74:	89 83       	std	Y+1, r24	; 0x01
     b76:	4a 83       	std	Y+2, r20	; 0x02
     b78:	5b 83       	std	Y+3, r21	; 0x03
     b7a:	6c 83       	std	Y+4, r22	; 0x04
     b7c:	7d 83       	std	Y+5, r23	; 0x05
     b7e:	3f 83       	std	Y+7, r19	; 0x07
     b80:	2e 83       	std	Y+6, r18	; 0x06
	a[Loc_preuorty].preucuty=Loc_preucuty;
     b82:	89 81       	ldd	r24, Y+1	; 0x01
     b84:	28 2f       	mov	r18, r24
     b86:	30 e0       	ldi	r19, 0x00	; 0
     b88:	c9 01       	movw	r24, r18
     b8a:	88 0f       	add	r24, r24
     b8c:	99 1f       	adc	r25, r25
     b8e:	82 0f       	add	r24, r18
     b90:	93 1f       	adc	r25, r19
     b92:	01 96       	adiw	r24, 0x01	; 1
     b94:	88 0f       	add	r24, r24
     b96:	99 1f       	adc	r25, r25
     b98:	fc 01       	movw	r30, r24
     b9a:	e3 51       	subi	r30, 0x13	; 19
     b9c:	ff 4f       	sbci	r31, 0xFF	; 255
     b9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ba0:	9b 81       	ldd	r25, Y+3	; 0x03
     ba2:	ac 81       	ldd	r26, Y+4	; 0x04
     ba4:	bd 81       	ldd	r27, Y+5	; 0x05
     ba6:	80 83       	st	Z, r24
     ba8:	91 83       	std	Z+1, r25	; 0x01
     baa:	a2 83       	std	Z+2, r26	; 0x02
     bac:	b3 83       	std	Z+3, r27	; 0x03
	a[Loc_preuorty].ptr=ptrr;
     bae:	89 81       	ldd	r24, Y+1	; 0x01
     bb0:	28 2f       	mov	r18, r24
     bb2:	30 e0       	ldi	r19, 0x00	; 0
     bb4:	4e 81       	ldd	r20, Y+6	; 0x06
     bb6:	5f 81       	ldd	r21, Y+7	; 0x07
     bb8:	c9 01       	movw	r24, r18
     bba:	88 0f       	add	r24, r24
     bbc:	99 1f       	adc	r25, r25
     bbe:	82 0f       	add	r24, r18
     bc0:	93 1f       	adc	r25, r19
     bc2:	88 0f       	add	r24, r24
     bc4:	99 1f       	adc	r25, r25
     bc6:	fc 01       	movw	r30, r24
     bc8:	e3 51       	subi	r30, 0x13	; 19
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	51 83       	std	Z+1, r21	; 0x01
     bce:	40 83       	st	Z, r20
}
     bd0:	27 96       	adiw	r28, 0x07	; 7
     bd2:	0f b6       	in	r0, 0x3f	; 63
     bd4:	f8 94       	cli
     bd6:	de bf       	out	0x3e, r29	; 62
     bd8:	0f be       	out	0x3f, r0	; 63
     bda:	cd bf       	out	0x3d, r28	; 61
     bdc:	cf 91       	pop	r28
     bde:	df 91       	pop	r29
     be0:	08 95       	ret

00000be2 <OS_Scheduler>:
void OS_Scheduler(){
     be2:	ef 92       	push	r14
     be4:	ff 92       	push	r15
     be6:	0f 93       	push	r16
     be8:	1f 93       	push	r17
     bea:	df 93       	push	r29
     bec:	cf 93       	push	r28
     bee:	0f 92       	push	r0
     bf0:	cd b7       	in	r28, 0x3d	; 61
     bf2:	de b7       	in	r29, 0x3e	; 62
	u8 i=0;
     bf4:	19 82       	std	Y+1, r1	; 0x01
	OS_Counter++;
     bf6:	80 91 c6 00 	lds	r24, 0x00C6
     bfa:	90 91 c7 00 	lds	r25, 0x00C7
     bfe:	a0 91 c8 00 	lds	r26, 0x00C8
     c02:	b0 91 c9 00 	lds	r27, 0x00C9
     c06:	01 96       	adiw	r24, 0x01	; 1
     c08:	a1 1d       	adc	r26, r1
     c0a:	b1 1d       	adc	r27, r1
     c0c:	80 93 c6 00 	sts	0x00C6, r24
     c10:	90 93 c7 00 	sts	0x00C7, r25
     c14:	a0 93 c8 00 	sts	0x00C8, r26
     c18:	b0 93 c9 00 	sts	0x00C9, r27
	for(i=0;i<3;i++){
     c1c:	19 82       	std	Y+1, r1	; 0x01
     c1e:	38 c0       	rjmp	.+112    	; 0xc90 <OS_Scheduler+0xae>

		if((OS_Counter % a[i].preucuty)==0){
     c20:	e0 90 c6 00 	lds	r14, 0x00C6
     c24:	f0 90 c7 00 	lds	r15, 0x00C7
     c28:	00 91 c8 00 	lds	r16, 0x00C8
     c2c:	10 91 c9 00 	lds	r17, 0x00C9
     c30:	89 81       	ldd	r24, Y+1	; 0x01
     c32:	28 2f       	mov	r18, r24
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	c9 01       	movw	r24, r18
     c38:	88 0f       	add	r24, r24
     c3a:	99 1f       	adc	r25, r25
     c3c:	82 0f       	add	r24, r18
     c3e:	93 1f       	adc	r25, r19
     c40:	01 96       	adiw	r24, 0x01	; 1
     c42:	88 0f       	add	r24, r24
     c44:	99 1f       	adc	r25, r25
     c46:	fc 01       	movw	r30, r24
     c48:	e3 51       	subi	r30, 0x13	; 19
     c4a:	ff 4f       	sbci	r31, 0xFF	; 255
     c4c:	20 81       	ld	r18, Z
     c4e:	31 81       	ldd	r19, Z+1	; 0x01
     c50:	42 81       	ldd	r20, Z+2	; 0x02
     c52:	53 81       	ldd	r21, Z+3	; 0x03
     c54:	c8 01       	movw	r24, r16
     c56:	b7 01       	movw	r22, r14
     c58:	0e 94 fd 35 	call	0x6bfa	; 0x6bfa <__udivmodsi4>
     c5c:	dc 01       	movw	r26, r24
     c5e:	cb 01       	movw	r24, r22
     c60:	00 97       	sbiw	r24, 0x00	; 0
     c62:	a1 05       	cpc	r26, r1
     c64:	b1 05       	cpc	r27, r1
     c66:	89 f4       	brne	.+34     	; 0xc8a <OS_Scheduler+0xa8>

			a[i].ptr();
     c68:	89 81       	ldd	r24, Y+1	; 0x01
     c6a:	28 2f       	mov	r18, r24
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	c9 01       	movw	r24, r18
     c70:	88 0f       	add	r24, r24
     c72:	99 1f       	adc	r25, r25
     c74:	82 0f       	add	r24, r18
     c76:	93 1f       	adc	r25, r19
     c78:	88 0f       	add	r24, r24
     c7a:	99 1f       	adc	r25, r25
     c7c:	fc 01       	movw	r30, r24
     c7e:	e3 51       	subi	r30, 0x13	; 19
     c80:	ff 4f       	sbci	r31, 0xFF	; 255
     c82:	01 90       	ld	r0, Z+
     c84:	f0 81       	ld	r31, Z
     c86:	e0 2d       	mov	r30, r0
     c88:	09 95       	icall
	a[Loc_preuorty].ptr=ptrr;
}
void OS_Scheduler(){
	u8 i=0;
	OS_Counter++;
	for(i=0;i<3;i++){
     c8a:	89 81       	ldd	r24, Y+1	; 0x01
     c8c:	8f 5f       	subi	r24, 0xFF	; 255
     c8e:	89 83       	std	Y+1, r24	; 0x01
     c90:	89 81       	ldd	r24, Y+1	; 0x01
     c92:	83 30       	cpi	r24, 0x03	; 3
     c94:	28 f2       	brcs	.-118    	; 0xc20 <OS_Scheduler+0x3e>
		if((OS_Counter % a[i].preucuty)==0){

			a[i].ptr();
		}
	}
}
     c96:	0f 90       	pop	r0
     c98:	cf 91       	pop	r28
     c9a:	df 91       	pop	r29
     c9c:	1f 91       	pop	r17
     c9e:	0f 91       	pop	r16
     ca0:	ff 90       	pop	r15
     ca2:	ef 90       	pop	r14
     ca4:	08 95       	ret

00000ca6 <OS_StartScheduler>:
void OS_StartScheduler(){
     ca6:	df 93       	push	r29
     ca8:	cf 93       	push	r28
     caa:	cd b7       	in	r28, 0x3d	; 61
     cac:	de b7       	in	r29, 0x3e	; 62
	Timer1_vChannelACopmareRegister(62500);
     cae:	84 e2       	ldi	r24, 0x24	; 36
     cb0:	94 ef       	ldi	r25, 0xF4	; 244
     cb2:	0e 94 60 09 	call	0x12c0	; 0x12c0 <Timer1_vChannelACopmareRegister>
	Timer1_vChannelACompareCallBack(OS_Scheduler);
     cb6:	81 ef       	ldi	r24, 0xF1	; 241
     cb8:	95 e0       	ldi	r25, 0x05	; 5
     cba:	0e 94 a4 09 	call	0x1348	; 0x1348 <Timer1_vChannelACompareCallBack>
}
     cbe:	cf 91       	pop	r28
     cc0:	df 91       	pop	r29
     cc2:	08 95       	ret

00000cc4 <UART_vInit>:
*
* \Sync\Async      : Synchronous
* \Parameters (in) : None
* \Parameters (out): None
*******************************************************************************/
void UART_vInit(){
     cc4:	df 93       	push	r29
     cc6:	cf 93       	push	r28
     cc8:	cd b7       	in	r28, 0x3d	; 61
     cca:	de b7       	in	r29, 0x3e	; 62

	SET_BIT(UCSRB,7);
	SET_BIT(UCSRB,6);
	SET_BIT(UCSRB,5);
#elif UARTMode==UARTPolling
	UBRRL=BaudRateRegisters;
     ccc:	e9 e2       	ldi	r30, 0x29	; 41
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	87 e6       	ldi	r24, 0x67	; 103
     cd2:	80 83       	st	Z, r24
	SET_BIT(UCSRB,3);
     cd4:	aa e2       	ldi	r26, 0x2A	; 42
     cd6:	b0 e0       	ldi	r27, 0x00	; 0
     cd8:	ea e2       	ldi	r30, 0x2A	; 42
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	80 81       	ld	r24, Z
     cde:	88 60       	ori	r24, 0x08	; 8
     ce0:	8c 93       	st	X, r24
	SET_BIT(UCSRB,4);
     ce2:	aa e2       	ldi	r26, 0x2A	; 42
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	ea e2       	ldi	r30, 0x2A	; 42
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	80 61       	ori	r24, 0x10	; 16
     cee:	8c 93       	st	X, r24
	UCSRC=0b10000110;
     cf0:	e0 e4       	ldi	r30, 0x40	; 64
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	86 e8       	ldi	r24, 0x86	; 134
     cf6:	80 83       	st	Z, r24
#endif
}
     cf8:	cf 91       	pop	r28
     cfa:	df 91       	pop	r29
     cfc:	08 95       	ret

00000cfe <UART_vSendChar>:
*
* \Sync\Async      : Asynchronous
* \Parameters (in) : Loc_SendChar	Data wanted to send
* \Parameters (out): None
*******************************************************************************/
void UART_vSendChar(u8 Loc_SendChar){
     cfe:	df 93       	push	r29
     d00:	cf 93       	push	r28
     d02:	0f 92       	push	r0
     d04:	cd b7       	in	r28, 0x3d	; 61
     d06:	de b7       	in	r29, 0x3e	; 62
     d08:	89 83       	std	Y+1, r24	; 0x01
	while(!(GET_BIT(UCSRA,6)));
     d0a:	ea e2       	ldi	r30, 0x2A	; 42
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	80 81       	ld	r24, Z
     d10:	82 95       	swap	r24
     d12:	86 95       	lsr	r24
     d14:	86 95       	lsr	r24
     d16:	83 70       	andi	r24, 0x03	; 3
     d18:	88 2f       	mov	r24, r24
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	81 70       	andi	r24, 0x01	; 1
     d1e:	90 70       	andi	r25, 0x00	; 0
     d20:	00 97       	sbiw	r24, 0x00	; 0
     d22:	99 f3       	breq	.-26     	; 0xd0a <UART_vSendChar+0xc>
	UDR=Loc_SendChar;
     d24:	ec e2       	ldi	r30, 0x2C	; 44
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	89 81       	ldd	r24, Y+1	; 0x01
     d2a:	80 83       	st	Z, r24
}
     d2c:	0f 90       	pop	r0
     d2e:	cf 91       	pop	r28
     d30:	df 91       	pop	r29
     d32:	08 95       	ret

00000d34 <UART_u8ReceiveChar>:
*
* \Sync\Async      : Asynchronous
* \Parameters (in) : None
* \Parameters (out): received data
*******************************************************************************/
u8 UART_u8ReceiveChar(){
     d34:	df 93       	push	r29
     d36:	cf 93       	push	r28
     d38:	cd b7       	in	r28, 0x3d	; 61
     d3a:	de b7       	in	r29, 0x3e	; 62
	while(!(GET_BIT(UCSRA,7)));
     d3c:	ea e2       	ldi	r30, 0x2A	; 42
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	80 81       	ld	r24, Z
     d42:	88 23       	and	r24, r24
     d44:	dc f7       	brge	.-10     	; 0xd3c <UART_u8ReceiveChar+0x8>
	return UDR;
     d46:	ec e2       	ldi	r30, 0x2C	; 44
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	80 81       	ld	r24, Z
}
     d4c:	cf 91       	pop	r28
     d4e:	df 91       	pop	r29
     d50:	08 95       	ret

00000d52 <UART_RXCompleteCallBack>:
*
* \Sync\Async      : Asynchronous
* \Parameters (in) : void(*ptr1)(void)
* \Parameters (out): None
*******************************************************************************/
void UART_RXCompleteCallBack(void(*ptr1)(void)){
     d52:	df 93       	push	r29
     d54:	cf 93       	push	r28
     d56:	00 d0       	rcall	.+0      	; 0xd58 <UART_RXCompleteCallBack+0x6>
     d58:	cd b7       	in	r28, 0x3d	; 61
     d5a:	de b7       	in	r29, 0x3e	; 62
     d5c:	9a 83       	std	Y+2, r25	; 0x02
     d5e:	89 83       	std	Y+1, r24	; 0x01
	if(ptr1!='\0'){
     d60:	89 81       	ldd	r24, Y+1	; 0x01
     d62:	9a 81       	ldd	r25, Y+2	; 0x02
     d64:	00 97       	sbiw	r24, 0x00	; 0
     d66:	31 f0       	breq	.+12     	; 0xd74 <UART_RXCompleteCallBack+0x22>
		Uptr1=ptr1;
     d68:	89 81       	ldd	r24, Y+1	; 0x01
     d6a:	9a 81       	ldd	r25, Y+2	; 0x02
     d6c:	90 93 cb 00 	sts	0x00CB, r25
     d70:	80 93 ca 00 	sts	0x00CA, r24
	}
}
     d74:	0f 90       	pop	r0
     d76:	0f 90       	pop	r0
     d78:	cf 91       	pop	r28
     d7a:	df 91       	pop	r29
     d7c:	08 95       	ret

00000d7e <UART_TXCompleteCallBack>:
*
* \Sync\Async      : Asynchronous
* \Parameters (in) : void(*ptr1)(void)
* \Parameters (out): None
*******************************************************************************/
void UART_TXCompleteCallBack(void(*ptr2)(void)){
     d7e:	df 93       	push	r29
     d80:	cf 93       	push	r28
     d82:	00 d0       	rcall	.+0      	; 0xd84 <UART_TXCompleteCallBack+0x6>
     d84:	cd b7       	in	r28, 0x3d	; 61
     d86:	de b7       	in	r29, 0x3e	; 62
     d88:	9a 83       	std	Y+2, r25	; 0x02
     d8a:	89 83       	std	Y+1, r24	; 0x01
	if(ptr2!='\0'){
     d8c:	89 81       	ldd	r24, Y+1	; 0x01
     d8e:	9a 81       	ldd	r25, Y+2	; 0x02
     d90:	00 97       	sbiw	r24, 0x00	; 0
     d92:	31 f0       	breq	.+12     	; 0xda0 <UART_TXCompleteCallBack+0x22>
		Uptr2=ptr2;
     d94:	89 81       	ldd	r24, Y+1	; 0x01
     d96:	9a 81       	ldd	r25, Y+2	; 0x02
     d98:	90 93 cd 00 	sts	0x00CD, r25
     d9c:	80 93 cc 00 	sts	0x00CC, r24
	}
}
     da0:	0f 90       	pop	r0
     da2:	0f 90       	pop	r0
     da4:	cf 91       	pop	r28
     da6:	df 91       	pop	r29
     da8:	08 95       	ret

00000daa <UAART_DataRegisterEmptyCallBack>:
*
* \Sync\Async      : Asynchronous
* \Parameters (in) : void(*ptr1)(void)
* \Parameters (out): None
*******************************************************************************/
void UAART_DataRegisterEmptyCallBack(void(*ptr3)(void)){
     daa:	df 93       	push	r29
     dac:	cf 93       	push	r28
     dae:	00 d0       	rcall	.+0      	; 0xdb0 <UAART_DataRegisterEmptyCallBack+0x6>
     db0:	cd b7       	in	r28, 0x3d	; 61
     db2:	de b7       	in	r29, 0x3e	; 62
     db4:	9a 83       	std	Y+2, r25	; 0x02
     db6:	89 83       	std	Y+1, r24	; 0x01
	if(ptr3!='\0'){
     db8:	89 81       	ldd	r24, Y+1	; 0x01
     dba:	9a 81       	ldd	r25, Y+2	; 0x02
     dbc:	00 97       	sbiw	r24, 0x00	; 0
     dbe:	31 f0       	breq	.+12     	; 0xdcc <UAART_DataRegisterEmptyCallBack+0x22>
		Uptr3=ptr3;
     dc0:	89 81       	ldd	r24, Y+1	; 0x01
     dc2:	9a 81       	ldd	r25, Y+2	; 0x02
     dc4:	90 93 cf 00 	sts	0x00CF, r25
     dc8:	80 93 ce 00 	sts	0x00CE, r24
	}
}
     dcc:	0f 90       	pop	r0
     dce:	0f 90       	pop	r0
     dd0:	cf 91       	pop	r28
     dd2:	df 91       	pop	r29
     dd4:	08 95       	ret

00000dd6 <__vector_13>:
/**********************************************************************************************************************
 *  Interrupts Service Routine
 *********************************************************************************************************************/
ISR(USART_RXC_vect){
     dd6:	1f 92       	push	r1
     dd8:	0f 92       	push	r0
     dda:	0f b6       	in	r0, 0x3f	; 63
     ddc:	0f 92       	push	r0
     dde:	11 24       	eor	r1, r1
     de0:	2f 93       	push	r18
     de2:	3f 93       	push	r19
     de4:	4f 93       	push	r20
     de6:	5f 93       	push	r21
     de8:	6f 93       	push	r22
     dea:	7f 93       	push	r23
     dec:	8f 93       	push	r24
     dee:	9f 93       	push	r25
     df0:	af 93       	push	r26
     df2:	bf 93       	push	r27
     df4:	ef 93       	push	r30
     df6:	ff 93       	push	r31
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	cd b7       	in	r28, 0x3d	; 61
     dfe:	de b7       	in	r29, 0x3e	; 62
	if(Uptr1!='\0'){
     e00:	80 91 ca 00 	lds	r24, 0x00CA
     e04:	90 91 cb 00 	lds	r25, 0x00CB
     e08:	00 97       	sbiw	r24, 0x00	; 0
     e0a:	29 f0       	breq	.+10     	; 0xe16 <__vector_13+0x40>
		Uptr1();
     e0c:	e0 91 ca 00 	lds	r30, 0x00CA
     e10:	f0 91 cb 00 	lds	r31, 0x00CB
     e14:	09 95       	icall
	}
}
     e16:	cf 91       	pop	r28
     e18:	df 91       	pop	r29
     e1a:	ff 91       	pop	r31
     e1c:	ef 91       	pop	r30
     e1e:	bf 91       	pop	r27
     e20:	af 91       	pop	r26
     e22:	9f 91       	pop	r25
     e24:	8f 91       	pop	r24
     e26:	7f 91       	pop	r23
     e28:	6f 91       	pop	r22
     e2a:	5f 91       	pop	r21
     e2c:	4f 91       	pop	r20
     e2e:	3f 91       	pop	r19
     e30:	2f 91       	pop	r18
     e32:	0f 90       	pop	r0
     e34:	0f be       	out	0x3f, r0	; 63
     e36:	0f 90       	pop	r0
     e38:	1f 90       	pop	r1
     e3a:	18 95       	reti

00000e3c <__vector_14>:
ISR(USART_UDRE_vect){
     e3c:	1f 92       	push	r1
     e3e:	0f 92       	push	r0
     e40:	0f b6       	in	r0, 0x3f	; 63
     e42:	0f 92       	push	r0
     e44:	11 24       	eor	r1, r1
     e46:	2f 93       	push	r18
     e48:	3f 93       	push	r19
     e4a:	4f 93       	push	r20
     e4c:	5f 93       	push	r21
     e4e:	6f 93       	push	r22
     e50:	7f 93       	push	r23
     e52:	8f 93       	push	r24
     e54:	9f 93       	push	r25
     e56:	af 93       	push	r26
     e58:	bf 93       	push	r27
     e5a:	ef 93       	push	r30
     e5c:	ff 93       	push	r31
     e5e:	df 93       	push	r29
     e60:	cf 93       	push	r28
     e62:	cd b7       	in	r28, 0x3d	; 61
     e64:	de b7       	in	r29, 0x3e	; 62
	if(Uptr2!='\0'){
     e66:	80 91 cc 00 	lds	r24, 0x00CC
     e6a:	90 91 cd 00 	lds	r25, 0x00CD
     e6e:	00 97       	sbiw	r24, 0x00	; 0
     e70:	29 f0       	breq	.+10     	; 0xe7c <__vector_14+0x40>
		Uptr2();
     e72:	e0 91 cc 00 	lds	r30, 0x00CC
     e76:	f0 91 cd 00 	lds	r31, 0x00CD
     e7a:	09 95       	icall
	}
}
     e7c:	cf 91       	pop	r28
     e7e:	df 91       	pop	r29
     e80:	ff 91       	pop	r31
     e82:	ef 91       	pop	r30
     e84:	bf 91       	pop	r27
     e86:	af 91       	pop	r26
     e88:	9f 91       	pop	r25
     e8a:	8f 91       	pop	r24
     e8c:	7f 91       	pop	r23
     e8e:	6f 91       	pop	r22
     e90:	5f 91       	pop	r21
     e92:	4f 91       	pop	r20
     e94:	3f 91       	pop	r19
     e96:	2f 91       	pop	r18
     e98:	0f 90       	pop	r0
     e9a:	0f be       	out	0x3f, r0	; 63
     e9c:	0f 90       	pop	r0
     e9e:	1f 90       	pop	r1
     ea0:	18 95       	reti

00000ea2 <__vector_15>:
ISR(USART_TXC_vect){
     ea2:	1f 92       	push	r1
     ea4:	0f 92       	push	r0
     ea6:	0f b6       	in	r0, 0x3f	; 63
     ea8:	0f 92       	push	r0
     eaa:	11 24       	eor	r1, r1
     eac:	2f 93       	push	r18
     eae:	3f 93       	push	r19
     eb0:	4f 93       	push	r20
     eb2:	5f 93       	push	r21
     eb4:	6f 93       	push	r22
     eb6:	7f 93       	push	r23
     eb8:	8f 93       	push	r24
     eba:	9f 93       	push	r25
     ebc:	af 93       	push	r26
     ebe:	bf 93       	push	r27
     ec0:	ef 93       	push	r30
     ec2:	ff 93       	push	r31
     ec4:	df 93       	push	r29
     ec6:	cf 93       	push	r28
     ec8:	cd b7       	in	r28, 0x3d	; 61
     eca:	de b7       	in	r29, 0x3e	; 62
	if(Uptr3!='\0'){
     ecc:	80 91 ce 00 	lds	r24, 0x00CE
     ed0:	90 91 cf 00 	lds	r25, 0x00CF
     ed4:	00 97       	sbiw	r24, 0x00	; 0
     ed6:	29 f0       	breq	.+10     	; 0xee2 <__vector_15+0x40>
		Uptr3();
     ed8:	e0 91 ce 00 	lds	r30, 0x00CE
     edc:	f0 91 cf 00 	lds	r31, 0x00CF
     ee0:	09 95       	icall
	}
}
     ee2:	cf 91       	pop	r28
     ee4:	df 91       	pop	r29
     ee6:	ff 91       	pop	r31
     ee8:	ef 91       	pop	r30
     eea:	bf 91       	pop	r27
     eec:	af 91       	pop	r26
     eee:	9f 91       	pop	r25
     ef0:	8f 91       	pop	r24
     ef2:	7f 91       	pop	r23
     ef4:	6f 91       	pop	r22
     ef6:	5f 91       	pop	r21
     ef8:	4f 91       	pop	r20
     efa:	3f 91       	pop	r19
     efc:	2f 91       	pop	r18
     efe:	0f 90       	pop	r0
     f00:	0f be       	out	0x3f, r0	; 63
     f02:	0f 90       	pop	r0
     f04:	1f 90       	pop	r1
     f06:	18 95       	reti

00000f08 <Timer1_vInit>:
u16 T1TimeOn;
u8 T1OnCounts;
u16 T1TimeTotal;
u8 T1TotalCounts;

void Timer1_vInit(){
     f08:	df 93       	push	r29
     f0a:	cf 93       	push	r28
     f0c:	cd b7       	in	r28, 0x3d	; 61
     f0e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(DDRD,5); // Set Channel A Pin as OutPut
     f10:	a1 e3       	ldi	r26, 0x31	; 49
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	e1 e3       	ldi	r30, 0x31	; 49
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	80 62       	ori	r24, 0x20	; 32
     f1c:	8c 93       	st	X, r24
	SET_BIT(DDRD,4); // Set Channel B Pin as OutPut
     f1e:	a1 e3       	ldi	r26, 0x31	; 49
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	e1 e3       	ldi	r30, 0x31	; 49
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	80 61       	ori	r24, 0x10	; 16
     f2a:	8c 93       	st	X, r24
#if Timer1_Mode==T1OverflowMode
	TCCR1A=0b00000000;
	TCCR1B=0b00000000|Timer1Prescaler;
#elif Timer1_Mode==T1CTCMode
	TCCR1A=0b00001100;
     f2c:	ef e4       	ldi	r30, 0x4F	; 79
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	8c e0       	ldi	r24, 0x0C	; 12
     f32:	80 83       	st	Z, r24
	TCCR1B=0b00001000|Timer1Prescaler;
     f34:	ee e4       	ldi	r30, 0x4E	; 78
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	8b e0       	ldi	r24, 0x0B	; 11
     f3a:	80 83       	st	Z, r24
	Timer1_vOverflowCallBack(Timer1_vOverflowCounter);
	Timer1_vIputCaptureCallBack(Timer1_vInputCaptureCal);
	CLR_BIT(DDRD,6); // Make Pin6 PortD Input
	SET_BIT(TCCR1B,6);  // Capture At rising Edge
#endif
}
     f3c:	cf 91       	pop	r28
     f3e:	df 91       	pop	r29
     f40:	08 95       	ret

00000f42 <Timer1_vIputCaptureUnit>:
void Timer1_vIputCaptureUnit(u32* duty,u32* Frequency){
     f42:	ef 92       	push	r14
     f44:	ff 92       	push	r15
     f46:	0f 93       	push	r16
     f48:	1f 93       	push	r17
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	00 d0       	rcall	.+0      	; 0xf50 <Timer1_vIputCaptureUnit+0xe>
     f50:	00 d0       	rcall	.+0      	; 0xf52 <Timer1_vIputCaptureUnit+0x10>
     f52:	cd b7       	in	r28, 0x3d	; 61
     f54:	de b7       	in	r29, 0x3e	; 62
     f56:	9a 83       	std	Y+2, r25	; 0x02
     f58:	89 83       	std	Y+1, r24	; 0x01
     f5a:	7c 83       	std	Y+4, r23	; 0x04
     f5c:	6b 83       	std	Y+3, r22	; 0x03
	if(T1Flag==3){
     f5e:	80 91 d8 00 	lds	r24, 0x00D8
     f62:	83 30       	cpi	r24, 0x03	; 3
     f64:	09 f0       	breq	.+2      	; 0xf68 <Timer1_vIputCaptureUnit+0x26>
     f66:	6f c0       	rjmp	.+222    	; 0x1046 <Timer1_vIputCaptureUnit+0x104>
		*duty=(u32)(((T1TimeOn+(T1OnCounts*65536))*100)/(T1TimeTotal)+(T1TotalCounts*65536));
     f68:	80 91 00 01 	lds	r24, 0x0100
     f6c:	90 91 01 01 	lds	r25, 0x0101
     f70:	9c 01       	movw	r18, r24
     f72:	40 e0       	ldi	r20, 0x00	; 0
     f74:	50 e0       	ldi	r21, 0x00	; 0
     f76:	80 91 04 01 	lds	r24, 0x0104
     f7a:	88 2f       	mov	r24, r24
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	a0 e0       	ldi	r26, 0x00	; 0
     f80:	b0 e0       	ldi	r27, 0x00	; 0
     f82:	dc 01       	movw	r26, r24
     f84:	99 27       	eor	r25, r25
     f86:	88 27       	eor	r24, r24
     f88:	82 0f       	add	r24, r18
     f8a:	93 1f       	adc	r25, r19
     f8c:	a4 1f       	adc	r26, r20
     f8e:	b5 1f       	adc	r27, r21
     f90:	24 e6       	ldi	r18, 0x64	; 100
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	40 e0       	ldi	r20, 0x00	; 0
     f96:	50 e0       	ldi	r21, 0x00	; 0
     f98:	bc 01       	movw	r22, r24
     f9a:	cd 01       	movw	r24, r26
     f9c:	0e 94 ab 35 	call	0x6b56	; 0x6b56 <__mulsi3>
     fa0:	7b 01       	movw	r14, r22
     fa2:	8c 01       	movw	r16, r24
     fa4:	80 91 02 01 	lds	r24, 0x0102
     fa8:	90 91 03 01 	lds	r25, 0x0103
     fac:	9c 01       	movw	r18, r24
     fae:	40 e0       	ldi	r20, 0x00	; 0
     fb0:	50 e0       	ldi	r21, 0x00	; 0
     fb2:	c8 01       	movw	r24, r16
     fb4:	b7 01       	movw	r22, r14
     fb6:	0e 94 1f 36 	call	0x6c3e	; 0x6c3e <__divmodsi4>
     fba:	da 01       	movw	r26, r20
     fbc:	c9 01       	movw	r24, r18
     fbe:	9c 01       	movw	r18, r24
     fc0:	ad 01       	movw	r20, r26
     fc2:	80 91 ff 00 	lds	r24, 0x00FF
     fc6:	88 2f       	mov	r24, r24
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	a0 e0       	ldi	r26, 0x00	; 0
     fcc:	b0 e0       	ldi	r27, 0x00	; 0
     fce:	dc 01       	movw	r26, r24
     fd0:	99 27       	eor	r25, r25
     fd2:	88 27       	eor	r24, r24
     fd4:	82 0f       	add	r24, r18
     fd6:	93 1f       	adc	r25, r19
     fd8:	a4 1f       	adc	r26, r20
     fda:	b5 1f       	adc	r27, r21
     fdc:	e9 81       	ldd	r30, Y+1	; 0x01
     fde:	fa 81       	ldd	r31, Y+2	; 0x02
     fe0:	80 83       	st	Z, r24
     fe2:	91 83       	std	Z+1, r25	; 0x01
     fe4:	a2 83       	std	Z+2, r26	; 0x02
     fe6:	b3 83       	std	Z+3, r27	; 0x03
		*Frequency=(u32)(T1SystemFrequency/((T1TimeTotal+(T1TotalCounts*65536))*T1InputCalcPrescaler));
     fe8:	80 91 02 01 	lds	r24, 0x0102
     fec:	90 91 03 01 	lds	r25, 0x0103
     ff0:	9c 01       	movw	r18, r24
     ff2:	40 e0       	ldi	r20, 0x00	; 0
     ff4:	50 e0       	ldi	r21, 0x00	; 0
     ff6:	80 91 ff 00 	lds	r24, 0x00FF
     ffa:	88 2f       	mov	r24, r24
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	a0 e0       	ldi	r26, 0x00	; 0
    1000:	b0 e0       	ldi	r27, 0x00	; 0
    1002:	dc 01       	movw	r26, r24
    1004:	99 27       	eor	r25, r25
    1006:	88 27       	eor	r24, r24
    1008:	82 0f       	add	r24, r18
    100a:	93 1f       	adc	r25, r19
    100c:	a4 1f       	adc	r26, r20
    100e:	b5 1f       	adc	r27, r21
    1010:	9c 01       	movw	r18, r24
    1012:	ad 01       	movw	r20, r26
    1014:	01 2e       	mov	r0, r17
    1016:	1a e0       	ldi	r17, 0x0A	; 10
    1018:	22 0f       	add	r18, r18
    101a:	33 1f       	adc	r19, r19
    101c:	44 1f       	adc	r20, r20
    101e:	55 1f       	adc	r21, r21
    1020:	1a 95       	dec	r17
    1022:	d1 f7       	brne	.-12     	; 0x1018 <Timer1_vIputCaptureUnit+0xd6>
    1024:	10 2d       	mov	r17, r0
    1026:	80 e0       	ldi	r24, 0x00	; 0
    1028:	94 e2       	ldi	r25, 0x24	; 36
    102a:	a4 ef       	ldi	r26, 0xF4	; 244
    102c:	b0 e0       	ldi	r27, 0x00	; 0
    102e:	bc 01       	movw	r22, r24
    1030:	cd 01       	movw	r24, r26
    1032:	0e 94 1f 36 	call	0x6c3e	; 0x6c3e <__divmodsi4>
    1036:	da 01       	movw	r26, r20
    1038:	c9 01       	movw	r24, r18
    103a:	eb 81       	ldd	r30, Y+3	; 0x03
    103c:	fc 81       	ldd	r31, Y+4	; 0x04
    103e:	80 83       	st	Z, r24
    1040:	91 83       	std	Z+1, r25	; 0x01
    1042:	a2 83       	std	Z+2, r26	; 0x02
    1044:	b3 83       	std	Z+3, r27	; 0x03
	}
}
    1046:	0f 90       	pop	r0
    1048:	0f 90       	pop	r0
    104a:	0f 90       	pop	r0
    104c:	0f 90       	pop	r0
    104e:	cf 91       	pop	r28
    1050:	df 91       	pop	r29
    1052:	1f 91       	pop	r17
    1054:	0f 91       	pop	r16
    1056:	ff 90       	pop	r15
    1058:	ef 90       	pop	r14
    105a:	08 95       	ret

0000105c <Timer1_vOverflowCounter>:
void Timer1_vOverflowCounter(){
    105c:	df 93       	push	r29
    105e:	cf 93       	push	r28
    1060:	cd b7       	in	r28, 0x3d	; 61
    1062:	de b7       	in	r29, 0x3e	; 62
	T1Counter++;
    1064:	80 91 05 01 	lds	r24, 0x0105
    1068:	8f 5f       	subi	r24, 0xFF	; 255
    106a:	80 93 05 01 	sts	0x0105, r24
}
    106e:	cf 91       	pop	r28
    1070:	df 91       	pop	r29
    1072:	08 95       	ret

00001074 <Timer1_vInputCaptureCal>:
void Timer1_vInputCaptureCal(){
    1074:	df 93       	push	r29
    1076:	cf 93       	push	r28
    1078:	cd b7       	in	r28, 0x3d	; 61
    107a:	de b7       	in	r29, 0x3e	; 62
	if(T1Flag==0){
    107c:	80 91 d8 00 	lds	r24, 0x00D8
    1080:	88 23       	and	r24, r24
    1082:	f9 f4       	brne	.+62     	; 0x10c2 <Timer1_vInputCaptureCal+0x4e>
		Timer1_vPreLoadResgister(0);
    1084:	80 e0       	ldi	r24, 0x00	; 0
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	0e 94 32 09 	call	0x1264	; 0x1264 <Timer1_vPreLoadResgister>
		T1TimeOn=0;
    108c:	10 92 01 01 	sts	0x0101, r1
    1090:	10 92 00 01 	sts	0x0100, r1
		T1OnCounts=0;
    1094:	10 92 04 01 	sts	0x0104, r1
		T1TimeTotal=0;
    1098:	10 92 03 01 	sts	0x0103, r1
    109c:	10 92 02 01 	sts	0x0102, r1
		T1TotalCounts=0;
    10a0:	10 92 ff 00 	sts	0x00FF, r1
		T1Counter=0;
    10a4:	10 92 05 01 	sts	0x0105, r1
		CLR_BIT(TCCR1B,6);
    10a8:	ae e4       	ldi	r26, 0x4E	; 78
    10aa:	b0 e0       	ldi	r27, 0x00	; 0
    10ac:	ee e4       	ldi	r30, 0x4E	; 78
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	80 81       	ld	r24, Z
    10b2:	8f 7b       	andi	r24, 0xBF	; 191
    10b4:	8c 93       	st	X, r24
		T1Flag++;
    10b6:	80 91 d8 00 	lds	r24, 0x00D8
    10ba:	8f 5f       	subi	r24, 0xFF	; 255
    10bc:	80 93 d8 00 	sts	0x00D8, r24
    10c0:	2e c0       	rjmp	.+92     	; 0x111e <Timer1_vInputCaptureCal+0xaa>
	}
	else if(T1Flag==1){
    10c2:	80 91 d8 00 	lds	r24, 0x00D8
    10c6:	81 30       	cpi	r24, 0x01	; 1
    10c8:	b9 f4       	brne	.+46     	; 0x10f8 <Timer1_vInputCaptureCal+0x84>
		T1TimeOn=Timer1_vReadTCNT1();
    10ca:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <Timer1_vReadTCNT1>
    10ce:	90 93 01 01 	sts	0x0101, r25
    10d2:	80 93 00 01 	sts	0x0100, r24
		T1OnCounts=T1Counter;
    10d6:	80 91 05 01 	lds	r24, 0x0105
    10da:	80 93 04 01 	sts	0x0104, r24
		SET_BIT(TCCR1B,6);
    10de:	ae e4       	ldi	r26, 0x4E	; 78
    10e0:	b0 e0       	ldi	r27, 0x00	; 0
    10e2:	ee e4       	ldi	r30, 0x4E	; 78
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	80 81       	ld	r24, Z
    10e8:	80 64       	ori	r24, 0x40	; 64
    10ea:	8c 93       	st	X, r24
		T1Flag++;
    10ec:	80 91 d8 00 	lds	r24, 0x00D8
    10f0:	8f 5f       	subi	r24, 0xFF	; 255
    10f2:	80 93 d8 00 	sts	0x00D8, r24
    10f6:	13 c0       	rjmp	.+38     	; 0x111e <Timer1_vInputCaptureCal+0xaa>
	}
	else if(T1Flag==2){
    10f8:	80 91 d8 00 	lds	r24, 0x00D8
    10fc:	82 30       	cpi	r24, 0x02	; 2
    10fe:	79 f4       	brne	.+30     	; 0x111e <Timer1_vInputCaptureCal+0xaa>
		T1TimeTotal=Timer1_vReadTCNT1();
    1100:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <Timer1_vReadTCNT1>
    1104:	90 93 03 01 	sts	0x0103, r25
    1108:	80 93 02 01 	sts	0x0102, r24
		T1TotalCounts=T1Counter;
    110c:	80 91 05 01 	lds	r24, 0x0105
    1110:	80 93 ff 00 	sts	0x00FF, r24
		T1Flag++;
    1114:	80 91 d8 00 	lds	r24, 0x00D8
    1118:	8f 5f       	subi	r24, 0xFF	; 255
    111a:	80 93 d8 00 	sts	0x00D8, r24
	}
}
    111e:	cf 91       	pop	r28
    1120:	df 91       	pop	r29
    1122:	08 95       	ret

00001124 <Timer1_vIputCaptureInterruptEnable>:
void Timer1_vIputCaptureInterruptEnable(){
    1124:	df 93       	push	r29
    1126:	cf 93       	push	r28
    1128:	cd b7       	in	r28, 0x3d	; 61
    112a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,5);
    112c:	a9 e5       	ldi	r26, 0x59	; 89
    112e:	b0 e0       	ldi	r27, 0x00	; 0
    1130:	e9 e5       	ldi	r30, 0x59	; 89
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	80 62       	ori	r24, 0x20	; 32
    1138:	8c 93       	st	X, r24
}
    113a:	cf 91       	pop	r28
    113c:	df 91       	pop	r29
    113e:	08 95       	ret

00001140 <Timer1_vCompareChannelAInterruptEnable>:
void Timer1_vCompareChannelAInterruptEnable(){
    1140:	df 93       	push	r29
    1142:	cf 93       	push	r28
    1144:	cd b7       	in	r28, 0x3d	; 61
    1146:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,4);
    1148:	a9 e5       	ldi	r26, 0x59	; 89
    114a:	b0 e0       	ldi	r27, 0x00	; 0
    114c:	e9 e5       	ldi	r30, 0x59	; 89
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	80 61       	ori	r24, 0x10	; 16
    1154:	8c 93       	st	X, r24
}
    1156:	cf 91       	pop	r28
    1158:	df 91       	pop	r29
    115a:	08 95       	ret

0000115c <Timer1_vCompareChannelBInterruptEnable>:
void Timer1_vCompareChannelBInterruptEnable(){
    115c:	df 93       	push	r29
    115e:	cf 93       	push	r28
    1160:	cd b7       	in	r28, 0x3d	; 61
    1162:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,3);
    1164:	a9 e5       	ldi	r26, 0x59	; 89
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	e9 e5       	ldi	r30, 0x59	; 89
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	88 60       	ori	r24, 0x08	; 8
    1170:	8c 93       	st	X, r24
}
    1172:	cf 91       	pop	r28
    1174:	df 91       	pop	r29
    1176:	08 95       	ret

00001178 <Timer1_vOverflowInterruptEnable>:
void Timer1_vOverflowInterruptEnable(){
    1178:	df 93       	push	r29
    117a:	cf 93       	push	r28
    117c:	cd b7       	in	r28, 0x3d	; 61
    117e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,2);
    1180:	a9 e5       	ldi	r26, 0x59	; 89
    1182:	b0 e0       	ldi	r27, 0x00	; 0
    1184:	e9 e5       	ldi	r30, 0x59	; 89
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	80 81       	ld	r24, Z
    118a:	84 60       	ori	r24, 0x04	; 4
    118c:	8c 93       	st	X, r24
}
    118e:	cf 91       	pop	r28
    1190:	df 91       	pop	r29
    1192:	08 95       	ret

00001194 <Timer1_vReadCompareChannelAFlag>:
u8 Timer1_vReadCompareChannelAFlag(){
    1194:	df 93       	push	r29
    1196:	cf 93       	push	r28
    1198:	cd b7       	in	r28, 0x3d	; 61
    119a:	de b7       	in	r29, 0x3e	; 62
	return GET_BIT(TIFR,4);
    119c:	e8 e5       	ldi	r30, 0x58	; 88
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	82 95       	swap	r24
    11a4:	8f 70       	andi	r24, 0x0F	; 15
    11a6:	81 70       	andi	r24, 0x01	; 1
}
    11a8:	cf 91       	pop	r28
    11aa:	df 91       	pop	r29
    11ac:	08 95       	ret

000011ae <Timer1_vReadCompareChannelBFlag>:
u8 Timer1_vReadCompareChannelBFlag(){
    11ae:	df 93       	push	r29
    11b0:	cf 93       	push	r28
    11b2:	cd b7       	in	r28, 0x3d	; 61
    11b4:	de b7       	in	r29, 0x3e	; 62
	return GET_BIT(TIFR,3);
    11b6:	e8 e5       	ldi	r30, 0x58	; 88
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	86 95       	lsr	r24
    11be:	86 95       	lsr	r24
    11c0:	86 95       	lsr	r24
    11c2:	81 70       	andi	r24, 0x01	; 1
}
    11c4:	cf 91       	pop	r28
    11c6:	df 91       	pop	r29
    11c8:	08 95       	ret

000011ca <Timer1_vReadOverflowFlag>:
u8 Timer1_vReadOverflowFlag(){
    11ca:	df 93       	push	r29
    11cc:	cf 93       	push	r28
    11ce:	cd b7       	in	r28, 0x3d	; 61
    11d0:	de b7       	in	r29, 0x3e	; 62
	return GET_BIT(TIFR,2);
    11d2:	e8 e5       	ldi	r30, 0x58	; 88
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	80 81       	ld	r24, Z
    11d8:	86 95       	lsr	r24
    11da:	86 95       	lsr	r24
    11dc:	81 70       	andi	r24, 0x01	; 1
}
    11de:	cf 91       	pop	r28
    11e0:	df 91       	pop	r29
    11e2:	08 95       	ret

000011e4 <Timer1_vReadTCNT1>:
u16 Timer1_vReadTCNT1(){
    11e4:	df 93       	push	r29
    11e6:	cf 93       	push	r28
    11e8:	00 d0       	rcall	.+0      	; 0x11ea <Timer1_vReadTCNT1+0x6>
    11ea:	cd b7       	in	r28, 0x3d	; 61
    11ec:	de b7       	in	r29, 0x3e	; 62
	u16 Read;
	Read=(((u16)TCNT1H)<<8);
    11ee:	ed e4       	ldi	r30, 0x4D	; 77
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	80 81       	ld	r24, Z
    11f4:	88 2f       	mov	r24, r24
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	98 2f       	mov	r25, r24
    11fa:	88 27       	eor	r24, r24
    11fc:	9a 83       	std	Y+2, r25	; 0x02
    11fe:	89 83       	std	Y+1, r24	; 0x01
	Read=Read|((u16)TCNT1L);
    1200:	ec e4       	ldi	r30, 0x4C	; 76
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	80 81       	ld	r24, Z
    1206:	28 2f       	mov	r18, r24
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	89 81       	ldd	r24, Y+1	; 0x01
    120c:	9a 81       	ldd	r25, Y+2	; 0x02
    120e:	82 2b       	or	r24, r18
    1210:	93 2b       	or	r25, r19
    1212:	9a 83       	std	Y+2, r25	; 0x02
    1214:	89 83       	std	Y+1, r24	; 0x01
	return Read;
    1216:	89 81       	ldd	r24, Y+1	; 0x01
    1218:	9a 81       	ldd	r25, Y+2	; 0x02
}
    121a:	0f 90       	pop	r0
    121c:	0f 90       	pop	r0
    121e:	cf 91       	pop	r28
    1220:	df 91       	pop	r29
    1222:	08 95       	ret

00001224 <Timer1_vReadInputCaptureRegister>:
u16 Timer1_vReadInputCaptureRegister(){
    1224:	df 93       	push	r29
    1226:	cf 93       	push	r28
    1228:	00 d0       	rcall	.+0      	; 0x122a <Timer1_vReadInputCaptureRegister+0x6>
    122a:	cd b7       	in	r28, 0x3d	; 61
    122c:	de b7       	in	r29, 0x3e	; 62
	u16 Read;
	Read=(((u16)ICR1H)<<8);
    122e:	e7 e4       	ldi	r30, 0x47	; 71
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	80 81       	ld	r24, Z
    1234:	88 2f       	mov	r24, r24
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	98 2f       	mov	r25, r24
    123a:	88 27       	eor	r24, r24
    123c:	9a 83       	std	Y+2, r25	; 0x02
    123e:	89 83       	std	Y+1, r24	; 0x01
	Read=Read|((u16)ICR1L);
    1240:	e6 e4       	ldi	r30, 0x46	; 70
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	28 2f       	mov	r18, r24
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	89 81       	ldd	r24, Y+1	; 0x01
    124c:	9a 81       	ldd	r25, Y+2	; 0x02
    124e:	82 2b       	or	r24, r18
    1250:	93 2b       	or	r25, r19
    1252:	9a 83       	std	Y+2, r25	; 0x02
    1254:	89 83       	std	Y+1, r24	; 0x01
	return Read;
    1256:	89 81       	ldd	r24, Y+1	; 0x01
    1258:	9a 81       	ldd	r25, Y+2	; 0x02
}
    125a:	0f 90       	pop	r0
    125c:	0f 90       	pop	r0
    125e:	cf 91       	pop	r28
    1260:	df 91       	pop	r29
    1262:	08 95       	ret

00001264 <Timer1_vPreLoadResgister>:

void Timer1_vPreLoadResgister(u16 Loc_val){
    1264:	df 93       	push	r29
    1266:	cf 93       	push	r28
    1268:	00 d0       	rcall	.+0      	; 0x126a <Timer1_vPreLoadResgister+0x6>
    126a:	cd b7       	in	r28, 0x3d	; 61
    126c:	de b7       	in	r29, 0x3e	; 62
    126e:	9a 83       	std	Y+2, r25	; 0x02
    1270:	89 83       	std	Y+1, r24	; 0x01
	TCNT1H=(Loc_val>>8);
    1272:	ed e4       	ldi	r30, 0x4D	; 77
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	89 81       	ldd	r24, Y+1	; 0x01
    1278:	9a 81       	ldd	r25, Y+2	; 0x02
    127a:	89 2f       	mov	r24, r25
    127c:	99 27       	eor	r25, r25
    127e:	80 83       	st	Z, r24
	TCNT1L=Loc_val;
    1280:	ec e4       	ldi	r30, 0x4C	; 76
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	89 81       	ldd	r24, Y+1	; 0x01
    1286:	80 83       	st	Z, r24
}
    1288:	0f 90       	pop	r0
    128a:	0f 90       	pop	r0
    128c:	cf 91       	pop	r28
    128e:	df 91       	pop	r29
    1290:	08 95       	ret

00001292 <Timer1_vWriteICR1>:
void Timer1_vWriteICR1(u16 Loc_val){
    1292:	df 93       	push	r29
    1294:	cf 93       	push	r28
    1296:	00 d0       	rcall	.+0      	; 0x1298 <Timer1_vWriteICR1+0x6>
    1298:	cd b7       	in	r28, 0x3d	; 61
    129a:	de b7       	in	r29, 0x3e	; 62
    129c:	9a 83       	std	Y+2, r25	; 0x02
    129e:	89 83       	std	Y+1, r24	; 0x01
	ICR1H=(Loc_val>>8);
    12a0:	e7 e4       	ldi	r30, 0x47	; 71
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	89 81       	ldd	r24, Y+1	; 0x01
    12a6:	9a 81       	ldd	r25, Y+2	; 0x02
    12a8:	89 2f       	mov	r24, r25
    12aa:	99 27       	eor	r25, r25
    12ac:	80 83       	st	Z, r24
	ICR1L=Loc_val;
    12ae:	e6 e4       	ldi	r30, 0x46	; 70
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	89 81       	ldd	r24, Y+1	; 0x01
    12b4:	80 83       	st	Z, r24
}
    12b6:	0f 90       	pop	r0
    12b8:	0f 90       	pop	r0
    12ba:	cf 91       	pop	r28
    12bc:	df 91       	pop	r29
    12be:	08 95       	ret

000012c0 <Timer1_vChannelACopmareRegister>:
void Timer1_vChannelACopmareRegister(u16 Loc_val){
    12c0:	df 93       	push	r29
    12c2:	cf 93       	push	r28
    12c4:	00 d0       	rcall	.+0      	; 0x12c6 <Timer1_vChannelACopmareRegister+0x6>
    12c6:	cd b7       	in	r28, 0x3d	; 61
    12c8:	de b7       	in	r29, 0x3e	; 62
    12ca:	9a 83       	std	Y+2, r25	; 0x02
    12cc:	89 83       	std	Y+1, r24	; 0x01
	OCR1AH=(Loc_val>>8);
    12ce:	eb e4       	ldi	r30, 0x4B	; 75
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	89 81       	ldd	r24, Y+1	; 0x01
    12d4:	9a 81       	ldd	r25, Y+2	; 0x02
    12d6:	89 2f       	mov	r24, r25
    12d8:	99 27       	eor	r25, r25
    12da:	80 83       	st	Z, r24
	OCR1AL=Loc_val;
    12dc:	ea e4       	ldi	r30, 0x4A	; 74
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	89 81       	ldd	r24, Y+1	; 0x01
    12e2:	80 83       	st	Z, r24
}
    12e4:	0f 90       	pop	r0
    12e6:	0f 90       	pop	r0
    12e8:	cf 91       	pop	r28
    12ea:	df 91       	pop	r29
    12ec:	08 95       	ret

000012ee <Timer1_vChannelBCopmareRegister>:
void Timer1_vChannelBCopmareRegister(u16 Loc_val){
    12ee:	df 93       	push	r29
    12f0:	cf 93       	push	r28
    12f2:	00 d0       	rcall	.+0      	; 0x12f4 <Timer1_vChannelBCopmareRegister+0x6>
    12f4:	cd b7       	in	r28, 0x3d	; 61
    12f6:	de b7       	in	r29, 0x3e	; 62
    12f8:	9a 83       	std	Y+2, r25	; 0x02
    12fa:	89 83       	std	Y+1, r24	; 0x01
	OCR1BH=(Loc_val>>8);
    12fc:	e9 e4       	ldi	r30, 0x49	; 73
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	89 81       	ldd	r24, Y+1	; 0x01
    1302:	9a 81       	ldd	r25, Y+2	; 0x02
    1304:	89 2f       	mov	r24, r25
    1306:	99 27       	eor	r25, r25
    1308:	80 83       	st	Z, r24
	OCR1BL=Loc_val;
    130a:	e8 e4       	ldi	r30, 0x48	; 72
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	89 81       	ldd	r24, Y+1	; 0x01
    1310:	80 83       	st	Z, r24
}
    1312:	0f 90       	pop	r0
    1314:	0f 90       	pop	r0
    1316:	cf 91       	pop	r28
    1318:	df 91       	pop	r29
    131a:	08 95       	ret

0000131c <Timer1_vOverflowCallBack>:
void Timer1_vOverflowCallBack(void(*ptr1)(void)){
    131c:	df 93       	push	r29
    131e:	cf 93       	push	r28
    1320:	00 d0       	rcall	.+0      	; 0x1322 <Timer1_vOverflowCallBack+0x6>
    1322:	cd b7       	in	r28, 0x3d	; 61
    1324:	de b7       	in	r29, 0x3e	; 62
    1326:	9a 83       	std	Y+2, r25	; 0x02
    1328:	89 83       	std	Y+1, r24	; 0x01
	if(ptr1!='\0'){
    132a:	89 81       	ldd	r24, Y+1	; 0x01
    132c:	9a 81       	ldd	r25, Y+2	; 0x02
    132e:	00 97       	sbiw	r24, 0x00	; 0
    1330:	31 f0       	breq	.+12     	; 0x133e <Timer1_vOverflowCallBack+0x22>
		T1Ptr1=ptr1;
    1332:	89 81       	ldd	r24, Y+1	; 0x01
    1334:	9a 81       	ldd	r25, Y+2	; 0x02
    1336:	90 93 d1 00 	sts	0x00D1, r25
    133a:	80 93 d0 00 	sts	0x00D0, r24
	}
}
    133e:	0f 90       	pop	r0
    1340:	0f 90       	pop	r0
    1342:	cf 91       	pop	r28
    1344:	df 91       	pop	r29
    1346:	08 95       	ret

00001348 <Timer1_vChannelACompareCallBack>:
void Timer1_vChannelACompareCallBack(void(*ptr2)(void)){
    1348:	df 93       	push	r29
    134a:	cf 93       	push	r28
    134c:	00 d0       	rcall	.+0      	; 0x134e <Timer1_vChannelACompareCallBack+0x6>
    134e:	cd b7       	in	r28, 0x3d	; 61
    1350:	de b7       	in	r29, 0x3e	; 62
    1352:	9a 83       	std	Y+2, r25	; 0x02
    1354:	89 83       	std	Y+1, r24	; 0x01
	if(ptr2!='\0'){
    1356:	89 81       	ldd	r24, Y+1	; 0x01
    1358:	9a 81       	ldd	r25, Y+2	; 0x02
    135a:	00 97       	sbiw	r24, 0x00	; 0
    135c:	31 f0       	breq	.+12     	; 0x136a <Timer1_vChannelACompareCallBack+0x22>
		T1Ptr2=ptr2;
    135e:	89 81       	ldd	r24, Y+1	; 0x01
    1360:	9a 81       	ldd	r25, Y+2	; 0x02
    1362:	90 93 d3 00 	sts	0x00D3, r25
    1366:	80 93 d2 00 	sts	0x00D2, r24
	}
}
    136a:	0f 90       	pop	r0
    136c:	0f 90       	pop	r0
    136e:	cf 91       	pop	r28
    1370:	df 91       	pop	r29
    1372:	08 95       	ret

00001374 <Timer1_vChannelBCompareCallBack>:
void Timer1_vChannelBCompareCallBack(void(*ptr3)(void)){
    1374:	df 93       	push	r29
    1376:	cf 93       	push	r28
    1378:	00 d0       	rcall	.+0      	; 0x137a <Timer1_vChannelBCompareCallBack+0x6>
    137a:	cd b7       	in	r28, 0x3d	; 61
    137c:	de b7       	in	r29, 0x3e	; 62
    137e:	9a 83       	std	Y+2, r25	; 0x02
    1380:	89 83       	std	Y+1, r24	; 0x01
	if(ptr3!='\0'){
    1382:	89 81       	ldd	r24, Y+1	; 0x01
    1384:	9a 81       	ldd	r25, Y+2	; 0x02
    1386:	00 97       	sbiw	r24, 0x00	; 0
    1388:	31 f0       	breq	.+12     	; 0x1396 <Timer1_vChannelBCompareCallBack+0x22>
		T1Ptr3=ptr3;
    138a:	89 81       	ldd	r24, Y+1	; 0x01
    138c:	9a 81       	ldd	r25, Y+2	; 0x02
    138e:	90 93 d5 00 	sts	0x00D5, r25
    1392:	80 93 d4 00 	sts	0x00D4, r24
	}
}
    1396:	0f 90       	pop	r0
    1398:	0f 90       	pop	r0
    139a:	cf 91       	pop	r28
    139c:	df 91       	pop	r29
    139e:	08 95       	ret

000013a0 <Timer1_vIputCaptureCallBack>:
void Timer1_vIputCaptureCallBack(void(*ptr4)(void)){
    13a0:	df 93       	push	r29
    13a2:	cf 93       	push	r28
    13a4:	00 d0       	rcall	.+0      	; 0x13a6 <Timer1_vIputCaptureCallBack+0x6>
    13a6:	cd b7       	in	r28, 0x3d	; 61
    13a8:	de b7       	in	r29, 0x3e	; 62
    13aa:	9a 83       	std	Y+2, r25	; 0x02
    13ac:	89 83       	std	Y+1, r24	; 0x01
	if(ptr4!='\0'){
    13ae:	89 81       	ldd	r24, Y+1	; 0x01
    13b0:	9a 81       	ldd	r25, Y+2	; 0x02
    13b2:	00 97       	sbiw	r24, 0x00	; 0
    13b4:	31 f0       	breq	.+12     	; 0x13c2 <Timer1_vIputCaptureCallBack+0x22>
		T1Ptr4=ptr4;
    13b6:	89 81       	ldd	r24, Y+1	; 0x01
    13b8:	9a 81       	ldd	r25, Y+2	; 0x02
    13ba:	90 93 d7 00 	sts	0x00D7, r25
    13be:	80 93 d6 00 	sts	0x00D6, r24
	}
}
    13c2:	0f 90       	pop	r0
    13c4:	0f 90       	pop	r0
    13c6:	cf 91       	pop	r28
    13c8:	df 91       	pop	r29
    13ca:	08 95       	ret

000013cc <__vector_7>:
ISR(TIMER1_COMPA_vect){
    13cc:	1f 92       	push	r1
    13ce:	0f 92       	push	r0
    13d0:	0f b6       	in	r0, 0x3f	; 63
    13d2:	0f 92       	push	r0
    13d4:	11 24       	eor	r1, r1
    13d6:	2f 93       	push	r18
    13d8:	3f 93       	push	r19
    13da:	4f 93       	push	r20
    13dc:	5f 93       	push	r21
    13de:	6f 93       	push	r22
    13e0:	7f 93       	push	r23
    13e2:	8f 93       	push	r24
    13e4:	9f 93       	push	r25
    13e6:	af 93       	push	r26
    13e8:	bf 93       	push	r27
    13ea:	ef 93       	push	r30
    13ec:	ff 93       	push	r31
    13ee:	df 93       	push	r29
    13f0:	cf 93       	push	r28
    13f2:	cd b7       	in	r28, 0x3d	; 61
    13f4:	de b7       	in	r29, 0x3e	; 62
	if(T1Ptr2!='\0'){
    13f6:	80 91 d2 00 	lds	r24, 0x00D2
    13fa:	90 91 d3 00 	lds	r25, 0x00D3
    13fe:	00 97       	sbiw	r24, 0x00	; 0
    1400:	29 f0       	breq	.+10     	; 0x140c <__vector_7+0x40>
		T1Ptr2();
    1402:	e0 91 d2 00 	lds	r30, 0x00D2
    1406:	f0 91 d3 00 	lds	r31, 0x00D3
    140a:	09 95       	icall
	}
}
    140c:	cf 91       	pop	r28
    140e:	df 91       	pop	r29
    1410:	ff 91       	pop	r31
    1412:	ef 91       	pop	r30
    1414:	bf 91       	pop	r27
    1416:	af 91       	pop	r26
    1418:	9f 91       	pop	r25
    141a:	8f 91       	pop	r24
    141c:	7f 91       	pop	r23
    141e:	6f 91       	pop	r22
    1420:	5f 91       	pop	r21
    1422:	4f 91       	pop	r20
    1424:	3f 91       	pop	r19
    1426:	2f 91       	pop	r18
    1428:	0f 90       	pop	r0
    142a:	0f be       	out	0x3f, r0	; 63
    142c:	0f 90       	pop	r0
    142e:	1f 90       	pop	r1
    1430:	18 95       	reti

00001432 <__vector_8>:
ISR(TIMER1_COMPB_vect){
    1432:	1f 92       	push	r1
    1434:	0f 92       	push	r0
    1436:	0f b6       	in	r0, 0x3f	; 63
    1438:	0f 92       	push	r0
    143a:	11 24       	eor	r1, r1
    143c:	2f 93       	push	r18
    143e:	3f 93       	push	r19
    1440:	4f 93       	push	r20
    1442:	5f 93       	push	r21
    1444:	6f 93       	push	r22
    1446:	7f 93       	push	r23
    1448:	8f 93       	push	r24
    144a:	9f 93       	push	r25
    144c:	af 93       	push	r26
    144e:	bf 93       	push	r27
    1450:	ef 93       	push	r30
    1452:	ff 93       	push	r31
    1454:	df 93       	push	r29
    1456:	cf 93       	push	r28
    1458:	cd b7       	in	r28, 0x3d	; 61
    145a:	de b7       	in	r29, 0x3e	; 62
	if(T1Ptr3!='\0'){
    145c:	80 91 d4 00 	lds	r24, 0x00D4
    1460:	90 91 d5 00 	lds	r25, 0x00D5
    1464:	00 97       	sbiw	r24, 0x00	; 0
    1466:	29 f0       	breq	.+10     	; 0x1472 <__vector_8+0x40>
		T1Ptr3();
    1468:	e0 91 d4 00 	lds	r30, 0x00D4
    146c:	f0 91 d5 00 	lds	r31, 0x00D5
    1470:	09 95       	icall
	}
}
    1472:	cf 91       	pop	r28
    1474:	df 91       	pop	r29
    1476:	ff 91       	pop	r31
    1478:	ef 91       	pop	r30
    147a:	bf 91       	pop	r27
    147c:	af 91       	pop	r26
    147e:	9f 91       	pop	r25
    1480:	8f 91       	pop	r24
    1482:	7f 91       	pop	r23
    1484:	6f 91       	pop	r22
    1486:	5f 91       	pop	r21
    1488:	4f 91       	pop	r20
    148a:	3f 91       	pop	r19
    148c:	2f 91       	pop	r18
    148e:	0f 90       	pop	r0
    1490:	0f be       	out	0x3f, r0	; 63
    1492:	0f 90       	pop	r0
    1494:	1f 90       	pop	r1
    1496:	18 95       	reti

00001498 <__vector_9>:
ISR(TIMER1_OVF_vect){
    1498:	1f 92       	push	r1
    149a:	0f 92       	push	r0
    149c:	0f b6       	in	r0, 0x3f	; 63
    149e:	0f 92       	push	r0
    14a0:	11 24       	eor	r1, r1
    14a2:	2f 93       	push	r18
    14a4:	3f 93       	push	r19
    14a6:	4f 93       	push	r20
    14a8:	5f 93       	push	r21
    14aa:	6f 93       	push	r22
    14ac:	7f 93       	push	r23
    14ae:	8f 93       	push	r24
    14b0:	9f 93       	push	r25
    14b2:	af 93       	push	r26
    14b4:	bf 93       	push	r27
    14b6:	ef 93       	push	r30
    14b8:	ff 93       	push	r31
    14ba:	df 93       	push	r29
    14bc:	cf 93       	push	r28
    14be:	cd b7       	in	r28, 0x3d	; 61
    14c0:	de b7       	in	r29, 0x3e	; 62
	if(T1Ptr1!='\0'){
    14c2:	80 91 d0 00 	lds	r24, 0x00D0
    14c6:	90 91 d1 00 	lds	r25, 0x00D1
    14ca:	00 97       	sbiw	r24, 0x00	; 0
    14cc:	29 f0       	breq	.+10     	; 0x14d8 <__vector_9+0x40>
		T1Ptr1();
    14ce:	e0 91 d0 00 	lds	r30, 0x00D0
    14d2:	f0 91 d1 00 	lds	r31, 0x00D1
    14d6:	09 95       	icall
	}
}
    14d8:	cf 91       	pop	r28
    14da:	df 91       	pop	r29
    14dc:	ff 91       	pop	r31
    14de:	ef 91       	pop	r30
    14e0:	bf 91       	pop	r27
    14e2:	af 91       	pop	r26
    14e4:	9f 91       	pop	r25
    14e6:	8f 91       	pop	r24
    14e8:	7f 91       	pop	r23
    14ea:	6f 91       	pop	r22
    14ec:	5f 91       	pop	r21
    14ee:	4f 91       	pop	r20
    14f0:	3f 91       	pop	r19
    14f2:	2f 91       	pop	r18
    14f4:	0f 90       	pop	r0
    14f6:	0f be       	out	0x3f, r0	; 63
    14f8:	0f 90       	pop	r0
    14fa:	1f 90       	pop	r1
    14fc:	18 95       	reti

000014fe <__vector_6>:
ISR(TIMER1_CAPT_vect){
    14fe:	1f 92       	push	r1
    1500:	0f 92       	push	r0
    1502:	0f b6       	in	r0, 0x3f	; 63
    1504:	0f 92       	push	r0
    1506:	11 24       	eor	r1, r1
    1508:	2f 93       	push	r18
    150a:	3f 93       	push	r19
    150c:	4f 93       	push	r20
    150e:	5f 93       	push	r21
    1510:	6f 93       	push	r22
    1512:	7f 93       	push	r23
    1514:	8f 93       	push	r24
    1516:	9f 93       	push	r25
    1518:	af 93       	push	r26
    151a:	bf 93       	push	r27
    151c:	ef 93       	push	r30
    151e:	ff 93       	push	r31
    1520:	df 93       	push	r29
    1522:	cf 93       	push	r28
    1524:	cd b7       	in	r28, 0x3d	; 61
    1526:	de b7       	in	r29, 0x3e	; 62
	if(T1Ptr4!='\0'){
    1528:	80 91 d6 00 	lds	r24, 0x00D6
    152c:	90 91 d7 00 	lds	r25, 0x00D7
    1530:	00 97       	sbiw	r24, 0x00	; 0
    1532:	29 f0       	breq	.+10     	; 0x153e <__vector_6+0x40>
		T1Ptr4();
    1534:	e0 91 d6 00 	lds	r30, 0x00D6
    1538:	f0 91 d7 00 	lds	r31, 0x00D7
    153c:	09 95       	icall
	}
}
    153e:	cf 91       	pop	r28
    1540:	df 91       	pop	r29
    1542:	ff 91       	pop	r31
    1544:	ef 91       	pop	r30
    1546:	bf 91       	pop	r27
    1548:	af 91       	pop	r26
    154a:	9f 91       	pop	r25
    154c:	8f 91       	pop	r24
    154e:	7f 91       	pop	r23
    1550:	6f 91       	pop	r22
    1552:	5f 91       	pop	r21
    1554:	4f 91       	pop	r20
    1556:	3f 91       	pop	r19
    1558:	2f 91       	pop	r18
    155a:	0f 90       	pop	r0
    155c:	0f be       	out	0x3f, r0	; 63
    155e:	0f 90       	pop	r0
    1560:	1f 90       	pop	r1
    1562:	18 95       	reti

00001564 <Timer0_vInit>:
 *      Author: a7med
 */
#include "Timer0.h"
void(*Tptr1)(void)='\0';
void(*Tptr2)(void)='\0';
void Timer0_vInit(){
    1564:	df 93       	push	r29
    1566:	cf 93       	push	r28
    1568:	cd b7       	in	r28, 0x3d	; 61
    156a:	de b7       	in	r29, 0x3e	; 62
#if Timer0_Mode==T0NormalMode
	TCCR0= 0x00|Timer0Prescaler;

#elif Timer0_Mode==T0CTCMode
	TCCR0=0x08|Timer0Prescaler;
    156c:	e3 e5       	ldi	r30, 0x53	; 83
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	8d e0       	ldi	r24, 0x0D	; 13
    1572:	80 83       	st	Z, r24
#elif Timer0_Mode==T0PWMFastMode
	TCCR0= 0x44|Timer0Prescaler;
#elif Timer0_Mode==T0PWMPhaseCorrectMode
	TCCR0= 0x40|Timer0Prescaler;
#endif
}
    1574:	cf 91       	pop	r28
    1576:	df 91       	pop	r29
    1578:	08 95       	ret

0000157a <Timer0_vEnableCompareInterrupt>:
void Timer0_vEnableCompareInterrupt(){
    157a:	df 93       	push	r29
    157c:	cf 93       	push	r28
    157e:	cd b7       	in	r28, 0x3d	; 61
    1580:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,1);
    1582:	a9 e5       	ldi	r26, 0x59	; 89
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	e9 e5       	ldi	r30, 0x59	; 89
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	82 60       	ori	r24, 0x02	; 2
    158e:	8c 93       	st	X, r24
}
    1590:	cf 91       	pop	r28
    1592:	df 91       	pop	r29
    1594:	08 95       	ret

00001596 <Timer0_vEnableOverflowInterrupt>:
void Timer0_vEnableOverflowInterrupt(){
    1596:	df 93       	push	r29
    1598:	cf 93       	push	r28
    159a:	cd b7       	in	r28, 0x3d	; 61
    159c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,0);
    159e:	a9 e5       	ldi	r26, 0x59	; 89
    15a0:	b0 e0       	ldi	r27, 0x00	; 0
    15a2:	e9 e5       	ldi	r30, 0x59	; 89
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	80 81       	ld	r24, Z
    15a8:	81 60       	ori	r24, 0x01	; 1
    15aa:	8c 93       	st	X, r24
}
    15ac:	cf 91       	pop	r28
    15ae:	df 91       	pop	r29
    15b0:	08 95       	ret

000015b2 <Timer0_u8ReadCompareFlag>:
u8 Timer0_u8ReadCompareFlag(){
    15b2:	df 93       	push	r29
    15b4:	cf 93       	push	r28
    15b6:	cd b7       	in	r28, 0x3d	; 61
    15b8:	de b7       	in	r29, 0x3e	; 62
	return GET_BIT(TIFR,1);
    15ba:	e8 e5       	ldi	r30, 0x58	; 88
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	80 81       	ld	r24, Z
    15c0:	86 95       	lsr	r24
    15c2:	81 70       	andi	r24, 0x01	; 1
}
    15c4:	cf 91       	pop	r28
    15c6:	df 91       	pop	r29
    15c8:	08 95       	ret

000015ca <Timer0_u8ReadOverflowFlag>:
u8 Timer0_u8ReadOverflowFlag(){
    15ca:	df 93       	push	r29
    15cc:	cf 93       	push	r28
    15ce:	cd b7       	in	r28, 0x3d	; 61
    15d0:	de b7       	in	r29, 0x3e	; 62
	return GET_BIT(TIFR,0);
    15d2:	e8 e5       	ldi	r30, 0x58	; 88
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	80 81       	ld	r24, Z
    15d8:	81 70       	andi	r24, 0x01	; 1
}
    15da:	cf 91       	pop	r28
    15dc:	df 91       	pop	r29
    15de:	08 95       	ret

000015e0 <Timer0_vCounterRegister>:
void Timer0_vCounterRegister(u8 Loc_u8CounterVal){
    15e0:	df 93       	push	r29
    15e2:	cf 93       	push	r28
    15e4:	0f 92       	push	r0
    15e6:	cd b7       	in	r28, 0x3d	; 61
    15e8:	de b7       	in	r29, 0x3e	; 62
    15ea:	89 83       	std	Y+1, r24	; 0x01
	TCNT0= Loc_u8CounterVal;
    15ec:	e2 e5       	ldi	r30, 0x52	; 82
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	89 81       	ldd	r24, Y+1	; 0x01
    15f2:	80 83       	st	Z, r24
}
    15f4:	0f 90       	pop	r0
    15f6:	cf 91       	pop	r28
    15f8:	df 91       	pop	r29
    15fa:	08 95       	ret

000015fc <Timer0_vCompareRegister>:
void Timer0_vCompareRegister(u8 Loc_u8CompareVal){
    15fc:	df 93       	push	r29
    15fe:	cf 93       	push	r28
    1600:	0f 92       	push	r0
    1602:	cd b7       	in	r28, 0x3d	; 61
    1604:	de b7       	in	r29, 0x3e	; 62
    1606:	89 83       	std	Y+1, r24	; 0x01
	OCR0=Loc_u8CompareVal;
    1608:	ec e5       	ldi	r30, 0x5C	; 92
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	89 81       	ldd	r24, Y+1	; 0x01
    160e:	80 83       	st	Z, r24
}
    1610:	0f 90       	pop	r0
    1612:	cf 91       	pop	r28
    1614:	df 91       	pop	r29
    1616:	08 95       	ret

00001618 <Timer0_vCompareCallBack>:
void Timer0_vCompareCallBack(void(*ptr)(void)){
    1618:	df 93       	push	r29
    161a:	cf 93       	push	r28
    161c:	00 d0       	rcall	.+0      	; 0x161e <Timer0_vCompareCallBack+0x6>
    161e:	cd b7       	in	r28, 0x3d	; 61
    1620:	de b7       	in	r29, 0x3e	; 62
    1622:	9a 83       	std	Y+2, r25	; 0x02
    1624:	89 83       	std	Y+1, r24	; 0x01
	if(ptr!='\0'){
    1626:	89 81       	ldd	r24, Y+1	; 0x01
    1628:	9a 81       	ldd	r25, Y+2	; 0x02
    162a:	00 97       	sbiw	r24, 0x00	; 0
    162c:	31 f0       	breq	.+12     	; 0x163a <Timer0_vCompareCallBack+0x22>
		Tptr1=ptr;
    162e:	89 81       	ldd	r24, Y+1	; 0x01
    1630:	9a 81       	ldd	r25, Y+2	; 0x02
    1632:	90 93 da 00 	sts	0x00DA, r25
    1636:	80 93 d9 00 	sts	0x00D9, r24
	}
}
    163a:	0f 90       	pop	r0
    163c:	0f 90       	pop	r0
    163e:	cf 91       	pop	r28
    1640:	df 91       	pop	r29
    1642:	08 95       	ret

00001644 <Timer0_vOverflowCallBack>:
void Timer0_vOverflowCallBack(void(*ptr)(void)){
    1644:	df 93       	push	r29
    1646:	cf 93       	push	r28
    1648:	00 d0       	rcall	.+0      	; 0x164a <Timer0_vOverflowCallBack+0x6>
    164a:	cd b7       	in	r28, 0x3d	; 61
    164c:	de b7       	in	r29, 0x3e	; 62
    164e:	9a 83       	std	Y+2, r25	; 0x02
    1650:	89 83       	std	Y+1, r24	; 0x01
	if(ptr!='\0'){
    1652:	89 81       	ldd	r24, Y+1	; 0x01
    1654:	9a 81       	ldd	r25, Y+2	; 0x02
    1656:	00 97       	sbiw	r24, 0x00	; 0
    1658:	31 f0       	breq	.+12     	; 0x1666 <Timer0_vOverflowCallBack+0x22>
		Tptr2=ptr;
    165a:	89 81       	ldd	r24, Y+1	; 0x01
    165c:	9a 81       	ldd	r25, Y+2	; 0x02
    165e:	90 93 dc 00 	sts	0x00DC, r25
    1662:	80 93 db 00 	sts	0x00DB, r24
	}
}
    1666:	0f 90       	pop	r0
    1668:	0f 90       	pop	r0
    166a:	cf 91       	pop	r28
    166c:	df 91       	pop	r29
    166e:	08 95       	ret

00001670 <__vector_10>:
ISR(TIMER0_COMP_vect){
    1670:	1f 92       	push	r1
    1672:	0f 92       	push	r0
    1674:	0f b6       	in	r0, 0x3f	; 63
    1676:	0f 92       	push	r0
    1678:	11 24       	eor	r1, r1
    167a:	2f 93       	push	r18
    167c:	3f 93       	push	r19
    167e:	4f 93       	push	r20
    1680:	5f 93       	push	r21
    1682:	6f 93       	push	r22
    1684:	7f 93       	push	r23
    1686:	8f 93       	push	r24
    1688:	9f 93       	push	r25
    168a:	af 93       	push	r26
    168c:	bf 93       	push	r27
    168e:	ef 93       	push	r30
    1690:	ff 93       	push	r31
    1692:	df 93       	push	r29
    1694:	cf 93       	push	r28
    1696:	cd b7       	in	r28, 0x3d	; 61
    1698:	de b7       	in	r29, 0x3e	; 62
	if(Tptr1!='\0'){
    169a:	80 91 d9 00 	lds	r24, 0x00D9
    169e:	90 91 da 00 	lds	r25, 0x00DA
    16a2:	00 97       	sbiw	r24, 0x00	; 0
    16a4:	29 f0       	breq	.+10     	; 0x16b0 <__vector_10+0x40>
		Tptr1();
    16a6:	e0 91 d9 00 	lds	r30, 0x00D9
    16aa:	f0 91 da 00 	lds	r31, 0x00DA
    16ae:	09 95       	icall
	}
}
    16b0:	cf 91       	pop	r28
    16b2:	df 91       	pop	r29
    16b4:	ff 91       	pop	r31
    16b6:	ef 91       	pop	r30
    16b8:	bf 91       	pop	r27
    16ba:	af 91       	pop	r26
    16bc:	9f 91       	pop	r25
    16be:	8f 91       	pop	r24
    16c0:	7f 91       	pop	r23
    16c2:	6f 91       	pop	r22
    16c4:	5f 91       	pop	r21
    16c6:	4f 91       	pop	r20
    16c8:	3f 91       	pop	r19
    16ca:	2f 91       	pop	r18
    16cc:	0f 90       	pop	r0
    16ce:	0f be       	out	0x3f, r0	; 63
    16d0:	0f 90       	pop	r0
    16d2:	1f 90       	pop	r1
    16d4:	18 95       	reti

000016d6 <__vector_11>:
ISR(TIMER0_OVF_vect){
    16d6:	1f 92       	push	r1
    16d8:	0f 92       	push	r0
    16da:	0f b6       	in	r0, 0x3f	; 63
    16dc:	0f 92       	push	r0
    16de:	11 24       	eor	r1, r1
    16e0:	2f 93       	push	r18
    16e2:	3f 93       	push	r19
    16e4:	4f 93       	push	r20
    16e6:	5f 93       	push	r21
    16e8:	6f 93       	push	r22
    16ea:	7f 93       	push	r23
    16ec:	8f 93       	push	r24
    16ee:	9f 93       	push	r25
    16f0:	af 93       	push	r26
    16f2:	bf 93       	push	r27
    16f4:	ef 93       	push	r30
    16f6:	ff 93       	push	r31
    16f8:	df 93       	push	r29
    16fa:	cf 93       	push	r28
    16fc:	cd b7       	in	r28, 0x3d	; 61
    16fe:	de b7       	in	r29, 0x3e	; 62
	if(Tptr2!='\0'){
    1700:	80 91 db 00 	lds	r24, 0x00DB
    1704:	90 91 dc 00 	lds	r25, 0x00DC
    1708:	00 97       	sbiw	r24, 0x00	; 0
    170a:	29 f0       	breq	.+10     	; 0x1716 <__vector_11+0x40>
		Tptr2();
    170c:	e0 91 db 00 	lds	r30, 0x00DB
    1710:	f0 91 dc 00 	lds	r31, 0x00DC
    1714:	09 95       	icall
	}
}
    1716:	cf 91       	pop	r28
    1718:	df 91       	pop	r29
    171a:	ff 91       	pop	r31
    171c:	ef 91       	pop	r30
    171e:	bf 91       	pop	r27
    1720:	af 91       	pop	r26
    1722:	9f 91       	pop	r25
    1724:	8f 91       	pop	r24
    1726:	7f 91       	pop	r23
    1728:	6f 91       	pop	r22
    172a:	5f 91       	pop	r21
    172c:	4f 91       	pop	r20
    172e:	3f 91       	pop	r19
    1730:	2f 91       	pop	r18
    1732:	0f 90       	pop	r0
    1734:	0f be       	out	0x3f, r0	; 63
    1736:	0f 90       	pop	r0
    1738:	1f 90       	pop	r1
    173a:	18 95       	reti

0000173c <SPI_vInit>:
 */
#include "SPI.h"

void(*Sptr)(void)='\0';

void SPI_vInit(){
    173c:	df 93       	push	r29
    173e:	cf 93       	push	r28
    1740:	cd b7       	in	r28, 0x3d	; 61
    1742:	de b7       	in	r29, 0x3e	; 62
		CLR_BIT(DDRB,4);
		CLR_BIT(DDRB,5);
		SET_BIT(DDRB,6);
		CLR_BIT(DDRB,7);
	#elif SPIMode==SPIMaster
		SPCR=0b00110000|SPIPrescaler;
    1744:	ed e2       	ldi	r30, 0x2D	; 45
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	84 e3       	ldi	r24, 0x34	; 52
    174a:	80 83       	st	Z, r24
		CLR_BIT(SPSR,0);
    174c:	ae e2       	ldi	r26, 0x2E	; 46
    174e:	b0 e0       	ldi	r27, 0x00	; 0
    1750:	ee e2       	ldi	r30, 0x2E	; 46
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	80 81       	ld	r24, Z
    1756:	8e 7f       	andi	r24, 0xFE	; 254
    1758:	8c 93       	st	X, r24
		SET_BIT(DDRB,4);
    175a:	a7 e3       	ldi	r26, 0x37	; 55
    175c:	b0 e0       	ldi	r27, 0x00	; 0
    175e:	e7 e3       	ldi	r30, 0x37	; 55
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	80 81       	ld	r24, Z
    1764:	80 61       	ori	r24, 0x10	; 16
    1766:	8c 93       	st	X, r24
		SET_BIT(DDRB,5);
    1768:	a7 e3       	ldi	r26, 0x37	; 55
    176a:	b0 e0       	ldi	r27, 0x00	; 0
    176c:	e7 e3       	ldi	r30, 0x37	; 55
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	80 81       	ld	r24, Z
    1772:	80 62       	ori	r24, 0x20	; 32
    1774:	8c 93       	st	X, r24
		CLR_BIT(DDRB,6);
    1776:	a7 e3       	ldi	r26, 0x37	; 55
    1778:	b0 e0       	ldi	r27, 0x00	; 0
    177a:	e7 e3       	ldi	r30, 0x37	; 55
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	80 81       	ld	r24, Z
    1780:	8f 7b       	andi	r24, 0xBF	; 191
    1782:	8c 93       	st	X, r24
		SET_BIT(DDRB,7);
    1784:	a7 e3       	ldi	r26, 0x37	; 55
    1786:	b0 e0       	ldi	r27, 0x00	; 0
    1788:	e7 e3       	ldi	r30, 0x37	; 55
    178a:	f0 e0       	ldi	r31, 0x00	; 0
    178c:	80 81       	ld	r24, Z
    178e:	80 68       	ori	r24, 0x80	; 128
    1790:	8c 93       	st	X, r24

		SET_BIT(SPCR,6);
    1792:	ad e2       	ldi	r26, 0x2D	; 45
    1794:	b0 e0       	ldi	r27, 0x00	; 0
    1796:	ed e2       	ldi	r30, 0x2D	; 45
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	80 81       	ld	r24, Z
    179c:	80 64       	ori	r24, 0x40	; 64
    179e:	8c 93       	st	X, r24
		CLR_BIT(DDRB,6);
		SET_BIT(DDRB,7);
	#endif
#endif

}
    17a0:	cf 91       	pop	r28
    17a2:	df 91       	pop	r29
    17a4:	08 95       	ret

000017a6 <SPI_vMasterWrite>:
void SPI_vMasterWrite(u8 Loc_WriteData){
    17a6:	df 93       	push	r29
    17a8:	cf 93       	push	r28
    17aa:	0f 92       	push	r0
    17ac:	cd b7       	in	r28, 0x3d	; 61
    17ae:	de b7       	in	r29, 0x3e	; 62
    17b0:	89 83       	std	Y+1, r24	; 0x01
	SPDR=Loc_WriteData;
    17b2:	ef e2       	ldi	r30, 0x2F	; 47
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	89 81       	ldd	r24, Y+1	; 0x01
    17b8:	80 83       	st	Z, r24
	while(!GET_BIT(SPSR,7));
    17ba:	ee e2       	ldi	r30, 0x2E	; 46
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	80 81       	ld	r24, Z
    17c0:	88 23       	and	r24, r24
    17c2:	dc f7       	brge	.-10     	; 0x17ba <SPI_vMasterWrite+0x14>
}
    17c4:	0f 90       	pop	r0
    17c6:	cf 91       	pop	r28
    17c8:	df 91       	pop	r29
    17ca:	08 95       	ret

000017cc <SPI_vMasterReadWrite>:

void SPI_vMasterReadWrite(u8 Loc_WriteData,u8 *Loc_ReadData){
    17cc:	df 93       	push	r29
    17ce:	cf 93       	push	r28
    17d0:	00 d0       	rcall	.+0      	; 0x17d2 <SPI_vMasterReadWrite+0x6>
    17d2:	0f 92       	push	r0
    17d4:	cd b7       	in	r28, 0x3d	; 61
    17d6:	de b7       	in	r29, 0x3e	; 62
    17d8:	89 83       	std	Y+1, r24	; 0x01
    17da:	7b 83       	std	Y+3, r23	; 0x03
    17dc:	6a 83       	std	Y+2, r22	; 0x02
	SPDR=Loc_WriteData;
    17de:	ef e2       	ldi	r30, 0x2F	; 47
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	89 81       	ldd	r24, Y+1	; 0x01
    17e4:	80 83       	st	Z, r24
	while(!GET_BIT(SPSR,7));
    17e6:	ee e2       	ldi	r30, 0x2E	; 46
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	80 81       	ld	r24, Z
    17ec:	88 23       	and	r24, r24
    17ee:	dc f7       	brge	.-10     	; 0x17e6 <SPI_vMasterReadWrite+0x1a>
	*Loc_ReadData = SPDR;
    17f0:	ef e2       	ldi	r30, 0x2F	; 47
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	80 81       	ld	r24, Z
    17f6:	ea 81       	ldd	r30, Y+2	; 0x02
    17f8:	fb 81       	ldd	r31, Y+3	; 0x03
    17fa:	80 83       	st	Z, r24
}
    17fc:	0f 90       	pop	r0
    17fe:	0f 90       	pop	r0
    1800:	0f 90       	pop	r0
    1802:	cf 91       	pop	r28
    1804:	df 91       	pop	r29
    1806:	08 95       	ret

00001808 <SPI_vSlaveRead>:

void SPI_vSlaveRead(u8 *Loc_ReadData){
    1808:	df 93       	push	r29
    180a:	cf 93       	push	r28
    180c:	00 d0       	rcall	.+0      	; 0x180e <SPI_vSlaveRead+0x6>
    180e:	cd b7       	in	r28, 0x3d	; 61
    1810:	de b7       	in	r29, 0x3e	; 62
    1812:	9a 83       	std	Y+2, r25	; 0x02
    1814:	89 83       	std	Y+1, r24	; 0x01
	while(!GET_BIT(SPSR,7));
    1816:	ee e2       	ldi	r30, 0x2E	; 46
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	80 81       	ld	r24, Z
    181c:	88 23       	and	r24, r24
    181e:	dc f7       	brge	.-10     	; 0x1816 <SPI_vSlaveRead+0xe>
	*Loc_ReadData = SPDR;
    1820:	ef e2       	ldi	r30, 0x2F	; 47
    1822:	f0 e0       	ldi	r31, 0x00	; 0
    1824:	80 81       	ld	r24, Z
    1826:	e9 81       	ldd	r30, Y+1	; 0x01
    1828:	fa 81       	ldd	r31, Y+2	; 0x02
    182a:	80 83       	st	Z, r24
}
    182c:	0f 90       	pop	r0
    182e:	0f 90       	pop	r0
    1830:	cf 91       	pop	r28
    1832:	df 91       	pop	r29
    1834:	08 95       	ret

00001836 <SPI_vTransferCompleteInterruptEnable>:
void SPI_vTransferCompleteInterruptEnable(void(*ptr)(void)){
    1836:	df 93       	push	r29
    1838:	cf 93       	push	r28
    183a:	00 d0       	rcall	.+0      	; 0x183c <SPI_vTransferCompleteInterruptEnable+0x6>
    183c:	cd b7       	in	r28, 0x3d	; 61
    183e:	de b7       	in	r29, 0x3e	; 62
    1840:	9a 83       	std	Y+2, r25	; 0x02
    1842:	89 83       	std	Y+1, r24	; 0x01
	if(ptr!='\0'){
    1844:	89 81       	ldd	r24, Y+1	; 0x01
    1846:	9a 81       	ldd	r25, Y+2	; 0x02
    1848:	00 97       	sbiw	r24, 0x00	; 0
    184a:	31 f0       	breq	.+12     	; 0x1858 <SPI_vTransferCompleteInterruptEnable+0x22>
		Sptr=ptr;
    184c:	89 81       	ldd	r24, Y+1	; 0x01
    184e:	9a 81       	ldd	r25, Y+2	; 0x02
    1850:	90 93 de 00 	sts	0x00DE, r25
    1854:	80 93 dd 00 	sts	0x00DD, r24
	}
}
    1858:	0f 90       	pop	r0
    185a:	0f 90       	pop	r0
    185c:	cf 91       	pop	r28
    185e:	df 91       	pop	r29
    1860:	08 95       	ret

00001862 <__vector_12>:
ISR(SPI_STC_vect){
    1862:	1f 92       	push	r1
    1864:	0f 92       	push	r0
    1866:	0f b6       	in	r0, 0x3f	; 63
    1868:	0f 92       	push	r0
    186a:	11 24       	eor	r1, r1
    186c:	2f 93       	push	r18
    186e:	3f 93       	push	r19
    1870:	4f 93       	push	r20
    1872:	5f 93       	push	r21
    1874:	6f 93       	push	r22
    1876:	7f 93       	push	r23
    1878:	8f 93       	push	r24
    187a:	9f 93       	push	r25
    187c:	af 93       	push	r26
    187e:	bf 93       	push	r27
    1880:	ef 93       	push	r30
    1882:	ff 93       	push	r31
    1884:	df 93       	push	r29
    1886:	cf 93       	push	r28
    1888:	cd b7       	in	r28, 0x3d	; 61
    188a:	de b7       	in	r29, 0x3e	; 62
	if(Sptr!='\0'){
    188c:	80 91 dd 00 	lds	r24, 0x00DD
    1890:	90 91 de 00 	lds	r25, 0x00DE
    1894:	00 97       	sbiw	r24, 0x00	; 0
    1896:	29 f0       	breq	.+10     	; 0x18a2 <__vector_12+0x40>
		Sptr();
    1898:	e0 91 dd 00 	lds	r30, 0x00DD
    189c:	f0 91 de 00 	lds	r31, 0x00DE
    18a0:	09 95       	icall
	}
}
    18a2:	cf 91       	pop	r28
    18a4:	df 91       	pop	r29
    18a6:	ff 91       	pop	r31
    18a8:	ef 91       	pop	r30
    18aa:	bf 91       	pop	r27
    18ac:	af 91       	pop	r26
    18ae:	9f 91       	pop	r25
    18b0:	8f 91       	pop	r24
    18b2:	7f 91       	pop	r23
    18b4:	6f 91       	pop	r22
    18b6:	5f 91       	pop	r21
    18b8:	4f 91       	pop	r20
    18ba:	3f 91       	pop	r19
    18bc:	2f 91       	pop	r18
    18be:	0f 90       	pop	r0
    18c0:	0f be       	out	0x3f, r0	; 63
    18c2:	0f 90       	pop	r0
    18c4:	1f 90       	pop	r1
    18c6:	18 95       	reti

000018c8 <I2C_vInit>:

#include "I2C.h"

void(*Iptr)(void)='\0';

void I2C_vInit(){
    18c8:	df 93       	push	r29
    18ca:	cf 93       	push	r28
    18cc:	cd b7       	in	r28, 0x3d	; 61
    18ce:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TWCR,TWIE);
	TWSR = I2CPrescaler;
	TWAR = assignedAddress;
#elif I2CMode==I2CPolling
	//		TWAR = assignedAddress;
	TWBR = 0x01;
    18d0:	e0 e2       	ldi	r30, 0x20	; 32
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
    18d4:	81 e0       	ldi	r24, 0x01	; 1
    18d6:	80 83       	st	Z, r24
	CLR_BIT(TWSR,0);
    18d8:	a1 e2       	ldi	r26, 0x21	; 33
    18da:	b0 e0       	ldi	r27, 0x00	; 0
    18dc:	e1 e2       	ldi	r30, 0x21	; 33
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	80 81       	ld	r24, Z
    18e2:	8e 7f       	andi	r24, 0xFE	; 254
    18e4:	8c 93       	st	X, r24
	CLR_BIT(TWSR,1);
    18e6:	a1 e2       	ldi	r26, 0x21	; 33
    18e8:	b0 e0       	ldi	r27, 0x00	; 0
    18ea:	e1 e2       	ldi	r30, 0x21	; 33
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	80 81       	ld	r24, Z
    18f0:	8d 7f       	andi	r24, 0xFD	; 253
    18f2:	8c 93       	st	X, r24
	//		SET_BIT(TWCR,6);
	//		SET_BIT(TWCR,2);
#endif
}
    18f4:	cf 91       	pop	r28
    18f6:	df 91       	pop	r29
    18f8:	08 95       	ret

000018fa <I2C_vSendStart>:
void I2C_vSendStart(){
    18fa:	df 93       	push	r29
    18fc:	cf 93       	push	r28
    18fe:	cd b7       	in	r28, 0x3d	; 61
    1900:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TWCR,2);
    1902:	a6 e5       	ldi	r26, 0x56	; 86
    1904:	b0 e0       	ldi	r27, 0x00	; 0
    1906:	e6 e5       	ldi	r30, 0x56	; 86
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	80 81       	ld	r24, Z
    190c:	84 60       	ori	r24, 0x04	; 4
    190e:	8c 93       	st	X, r24
	SET_BIT(TWCR,5);
    1910:	a6 e5       	ldi	r26, 0x56	; 86
    1912:	b0 e0       	ldi	r27, 0x00	; 0
    1914:	e6 e5       	ldi	r30, 0x56	; 86
    1916:	f0 e0       	ldi	r31, 0x00	; 0
    1918:	80 81       	ld	r24, Z
    191a:	80 62       	ori	r24, 0x20	; 32
    191c:	8c 93       	st	X, r24
	SET_BIT(TWCR,7);
    191e:	a6 e5       	ldi	r26, 0x56	; 86
    1920:	b0 e0       	ldi	r27, 0x00	; 0
    1922:	e6 e5       	ldi	r30, 0x56	; 86
    1924:	f0 e0       	ldi	r31, 0x00	; 0
    1926:	80 81       	ld	r24, Z
    1928:	80 68       	ori	r24, 0x80	; 128
    192a:	8c 93       	st	X, r24
	while(!(GET_BIT(TWCR,7)));
    192c:	e6 e5       	ldi	r30, 0x56	; 86
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	80 81       	ld	r24, Z
    1932:	88 23       	and	r24, r24
    1934:	dc f7       	brge	.-10     	; 0x192c <I2C_vSendStart+0x32>
//	while((TWSR&0xF8)!=0x08);
}
    1936:	cf 91       	pop	r28
    1938:	df 91       	pop	r29
    193a:	08 95       	ret

0000193c <I2C_vRepeatedSendStart>:
void I2C_vRepeatedSendStart(){
    193c:	df 93       	push	r29
    193e:	cf 93       	push	r28
    1940:	cd b7       	in	r28, 0x3d	; 61
    1942:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TWCR,2);
    1944:	a6 e5       	ldi	r26, 0x56	; 86
    1946:	b0 e0       	ldi	r27, 0x00	; 0
    1948:	e6 e5       	ldi	r30, 0x56	; 86
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	80 81       	ld	r24, Z
    194e:	84 60       	ori	r24, 0x04	; 4
    1950:	8c 93       	st	X, r24
	SET_BIT(TWCR,5);
    1952:	a6 e5       	ldi	r26, 0x56	; 86
    1954:	b0 e0       	ldi	r27, 0x00	; 0
    1956:	e6 e5       	ldi	r30, 0x56	; 86
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	80 81       	ld	r24, Z
    195c:	80 62       	ori	r24, 0x20	; 32
    195e:	8c 93       	st	X, r24
	SET_BIT(TWCR,7);
    1960:	a6 e5       	ldi	r26, 0x56	; 86
    1962:	b0 e0       	ldi	r27, 0x00	; 0
    1964:	e6 e5       	ldi	r30, 0x56	; 86
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	80 81       	ld	r24, Z
    196a:	80 68       	ori	r24, 0x80	; 128
    196c:	8c 93       	st	X, r24
	while(!(GET_BIT(TWCR,7)));
    196e:	e6 e5       	ldi	r30, 0x56	; 86
    1970:	f0 e0       	ldi	r31, 0x00	; 0
    1972:	80 81       	ld	r24, Z
    1974:	88 23       	and	r24, r24
    1976:	dc f7       	brge	.-10     	; 0x196e <I2C_vRepeatedSendStart+0x32>
//	while((TWSR&0xF8)!=0x10);

}
    1978:	cf 91       	pop	r28
    197a:	df 91       	pop	r29
    197c:	08 95       	ret

0000197e <I2C_vSendStop>:
void I2C_vSendStop(){
    197e:	df 93       	push	r29
    1980:	cf 93       	push	r28
    1982:	cd b7       	in	r28, 0x3d	; 61
    1984:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TWCR,2);
    1986:	a6 e5       	ldi	r26, 0x56	; 86
    1988:	b0 e0       	ldi	r27, 0x00	; 0
    198a:	e6 e5       	ldi	r30, 0x56	; 86
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	80 81       	ld	r24, Z
    1990:	84 60       	ori	r24, 0x04	; 4
    1992:	8c 93       	st	X, r24
	SET_BIT(TWCR,4);
    1994:	a6 e5       	ldi	r26, 0x56	; 86
    1996:	b0 e0       	ldi	r27, 0x00	; 0
    1998:	e6 e5       	ldi	r30, 0x56	; 86
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	80 81       	ld	r24, Z
    199e:	80 61       	ori	r24, 0x10	; 16
    19a0:	8c 93       	st	X, r24
	SET_BIT(TWCR,7);
    19a2:	a6 e5       	ldi	r26, 0x56	; 86
    19a4:	b0 e0       	ldi	r27, 0x00	; 0
    19a6:	e6 e5       	ldi	r30, 0x56	; 86
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	80 81       	ld	r24, Z
    19ac:	80 68       	ori	r24, 0x80	; 128
    19ae:	8c 93       	st	X, r24
	while(!(GET_BIT(TWCR,7)));
    19b0:	e6 e5       	ldi	r30, 0x56	; 86
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	80 81       	ld	r24, Z
    19b6:	88 23       	and	r24, r24
    19b8:	dc f7       	brge	.-10     	; 0x19b0 <I2C_vSendStop+0x32>
}
    19ba:	cf 91       	pop	r28
    19bc:	df 91       	pop	r29
    19be:	08 95       	ret

000019c0 <I2C_vSendSlaveAdress>:
void I2C_vSendSlaveAdress(u8 Loc_SlaveAdress){
    19c0:	df 93       	push	r29
    19c2:	cf 93       	push	r28
    19c4:	0f 92       	push	r0
    19c6:	cd b7       	in	r28, 0x3d	; 61
    19c8:	de b7       	in	r29, 0x3e	; 62
    19ca:	89 83       	std	Y+1, r24	; 0x01
	TWDR=Loc_SlaveAdress; //frist bit is for read or write
    19cc:	e3 e2       	ldi	r30, 0x23	; 35
    19ce:	f0 e0       	ldi	r31, 0x00	; 0
    19d0:	89 81       	ldd	r24, Y+1	; 0x01
    19d2:	80 83       	st	Z, r24
	SET_BIT(TWCR,2);
    19d4:	a6 e5       	ldi	r26, 0x56	; 86
    19d6:	b0 e0       	ldi	r27, 0x00	; 0
    19d8:	e6 e5       	ldi	r30, 0x56	; 86
    19da:	f0 e0       	ldi	r31, 0x00	; 0
    19dc:	80 81       	ld	r24, Z
    19de:	84 60       	ori	r24, 0x04	; 4
    19e0:	8c 93       	st	X, r24
	SET_BIT(TWCR,7);
    19e2:	a6 e5       	ldi	r26, 0x56	; 86
    19e4:	b0 e0       	ldi	r27, 0x00	; 0
    19e6:	e6 e5       	ldi	r30, 0x56	; 86
    19e8:	f0 e0       	ldi	r31, 0x00	; 0
    19ea:	80 81       	ld	r24, Z
    19ec:	80 68       	ori	r24, 0x80	; 128
    19ee:	8c 93       	st	X, r24
	while(!(GET_BIT(TWCR,7)));
    19f0:	e6 e5       	ldi	r30, 0x56	; 86
    19f2:	f0 e0       	ldi	r31, 0x00	; 0
    19f4:	80 81       	ld	r24, Z
    19f6:	88 23       	and	r24, r24
    19f8:	dc f7       	brge	.-10     	; 0x19f0 <I2C_vSendSlaveAdress+0x30>
	//while((TWSR&0xF8)!=0x18);

}
    19fa:	0f 90       	pop	r0
    19fc:	cf 91       	pop	r28
    19fe:	df 91       	pop	r29
    1a00:	08 95       	ret

00001a02 <I2C_SendData>:
void I2C_SendData(u8 Loc_Data){
    1a02:	df 93       	push	r29
    1a04:	cf 93       	push	r28
    1a06:	0f 92       	push	r0
    1a08:	cd b7       	in	r28, 0x3d	; 61
    1a0a:	de b7       	in	r29, 0x3e	; 62
    1a0c:	89 83       	std	Y+1, r24	; 0x01
	TWDR=Loc_Data;
    1a0e:	e3 e2       	ldi	r30, 0x23	; 35
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	89 81       	ldd	r24, Y+1	; 0x01
    1a14:	80 83       	st	Z, r24
	SET_BIT(TWCR,2);
    1a16:	a6 e5       	ldi	r26, 0x56	; 86
    1a18:	b0 e0       	ldi	r27, 0x00	; 0
    1a1a:	e6 e5       	ldi	r30, 0x56	; 86
    1a1c:	f0 e0       	ldi	r31, 0x00	; 0
    1a1e:	80 81       	ld	r24, Z
    1a20:	84 60       	ori	r24, 0x04	; 4
    1a22:	8c 93       	st	X, r24

	SET_BIT(TWCR,7);
    1a24:	a6 e5       	ldi	r26, 0x56	; 86
    1a26:	b0 e0       	ldi	r27, 0x00	; 0
    1a28:	e6 e5       	ldi	r30, 0x56	; 86
    1a2a:	f0 e0       	ldi	r31, 0x00	; 0
    1a2c:	80 81       	ld	r24, Z
    1a2e:	80 68       	ori	r24, 0x80	; 128
    1a30:	8c 93       	st	X, r24
	while(!(GET_BIT(TWCR,7)));
    1a32:	e6 e5       	ldi	r30, 0x56	; 86
    1a34:	f0 e0       	ldi	r31, 0x00	; 0
    1a36:	80 81       	ld	r24, Z
    1a38:	88 23       	and	r24, r24
    1a3a:	dc f7       	brge	.-10     	; 0x1a32 <I2C_SendData+0x30>
	//while((TWSR&0xF8)!=0x28);

}
    1a3c:	0f 90       	pop	r0
    1a3e:	cf 91       	pop	r28
    1a40:	df 91       	pop	r29
    1a42:	08 95       	ret

00001a44 <I2C_vReadData>:
void I2C_vReadData(u8* ptr){
    1a44:	df 93       	push	r29
    1a46:	cf 93       	push	r28
    1a48:	00 d0       	rcall	.+0      	; 0x1a4a <I2C_vReadData+0x6>
    1a4a:	cd b7       	in	r28, 0x3d	; 61
    1a4c:	de b7       	in	r29, 0x3e	; 62
    1a4e:	9a 83       	std	Y+2, r25	; 0x02
    1a50:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(TWCR,2);
    1a52:	a6 e5       	ldi	r26, 0x56	; 86
    1a54:	b0 e0       	ldi	r27, 0x00	; 0
    1a56:	e6 e5       	ldi	r30, 0x56	; 86
    1a58:	f0 e0       	ldi	r31, 0x00	; 0
    1a5a:	80 81       	ld	r24, Z
    1a5c:	84 60       	ori	r24, 0x04	; 4
    1a5e:	8c 93       	st	X, r24

	SET_BIT(TWCR,7);
    1a60:	a6 e5       	ldi	r26, 0x56	; 86
    1a62:	b0 e0       	ldi	r27, 0x00	; 0
    1a64:	e6 e5       	ldi	r30, 0x56	; 86
    1a66:	f0 e0       	ldi	r31, 0x00	; 0
    1a68:	80 81       	ld	r24, Z
    1a6a:	80 68       	ori	r24, 0x80	; 128
    1a6c:	8c 93       	st	X, r24
	while(!(GET_BIT(TWCR,7)));
    1a6e:	e6 e5       	ldi	r30, 0x56	; 86
    1a70:	f0 e0       	ldi	r31, 0x00	; 0
    1a72:	80 81       	ld	r24, Z
    1a74:	88 23       	and	r24, r24
    1a76:	dc f7       	brge	.-10     	; 0x1a6e <I2C_vReadData+0x2a>
	//while((TWSR&0xF8)!=0x58);
	*ptr=TWDR;
    1a78:	e3 e2       	ldi	r30, 0x23	; 35
    1a7a:	f0 e0       	ldi	r31, 0x00	; 0
    1a7c:	80 81       	ld	r24, Z
    1a7e:	e9 81       	ldd	r30, Y+1	; 0x01
    1a80:	fa 81       	ldd	r31, Y+2	; 0x02
    1a82:	80 83       	st	Z, r24

}
    1a84:	0f 90       	pop	r0
    1a86:	0f 90       	pop	r0
    1a88:	cf 91       	pop	r28
    1a8a:	df 91       	pop	r29
    1a8c:	08 95       	ret

00001a8e <I2C_vJobFinishedInterruptEnable>:
void I2C_vJobFinishedInterruptEnable(void(*ptr)(void)){
    1a8e:	df 93       	push	r29
    1a90:	cf 93       	push	r28
    1a92:	00 d0       	rcall	.+0      	; 0x1a94 <I2C_vJobFinishedInterruptEnable+0x6>
    1a94:	cd b7       	in	r28, 0x3d	; 61
    1a96:	de b7       	in	r29, 0x3e	; 62
    1a98:	9a 83       	std	Y+2, r25	; 0x02
    1a9a:	89 83       	std	Y+1, r24	; 0x01
	if(ptr!='\0'){
    1a9c:	89 81       	ldd	r24, Y+1	; 0x01
    1a9e:	9a 81       	ldd	r25, Y+2	; 0x02
    1aa0:	00 97       	sbiw	r24, 0x00	; 0
    1aa2:	31 f0       	breq	.+12     	; 0x1ab0 <I2C_vJobFinishedInterruptEnable+0x22>
		Iptr=ptr;
    1aa4:	89 81       	ldd	r24, Y+1	; 0x01
    1aa6:	9a 81       	ldd	r25, Y+2	; 0x02
    1aa8:	90 93 e0 00 	sts	0x00E0, r25
    1aac:	80 93 df 00 	sts	0x00DF, r24
	}
}
    1ab0:	0f 90       	pop	r0
    1ab2:	0f 90       	pop	r0
    1ab4:	cf 91       	pop	r28
    1ab6:	df 91       	pop	r29
    1ab8:	08 95       	ret

00001aba <__vector_19>:
ISR(TWI_vect){
    1aba:	1f 92       	push	r1
    1abc:	0f 92       	push	r0
    1abe:	0f b6       	in	r0, 0x3f	; 63
    1ac0:	0f 92       	push	r0
    1ac2:	11 24       	eor	r1, r1
    1ac4:	2f 93       	push	r18
    1ac6:	3f 93       	push	r19
    1ac8:	4f 93       	push	r20
    1aca:	5f 93       	push	r21
    1acc:	6f 93       	push	r22
    1ace:	7f 93       	push	r23
    1ad0:	8f 93       	push	r24
    1ad2:	9f 93       	push	r25
    1ad4:	af 93       	push	r26
    1ad6:	bf 93       	push	r27
    1ad8:	ef 93       	push	r30
    1ada:	ff 93       	push	r31
    1adc:	df 93       	push	r29
    1ade:	cf 93       	push	r28
    1ae0:	cd b7       	in	r28, 0x3d	; 61
    1ae2:	de b7       	in	r29, 0x3e	; 62
	if(Iptr!='\0'){
    1ae4:	80 91 df 00 	lds	r24, 0x00DF
    1ae8:	90 91 e0 00 	lds	r25, 0x00E0
    1aec:	00 97       	sbiw	r24, 0x00	; 0
    1aee:	29 f0       	breq	.+10     	; 0x1afa <__vector_19+0x40>
		Iptr();
    1af0:	e0 91 df 00 	lds	r30, 0x00DF
    1af4:	f0 91 e0 00 	lds	r31, 0x00E0
    1af8:	09 95       	icall
	}
}
    1afa:	cf 91       	pop	r28
    1afc:	df 91       	pop	r29
    1afe:	ff 91       	pop	r31
    1b00:	ef 91       	pop	r30
    1b02:	bf 91       	pop	r27
    1b04:	af 91       	pop	r26
    1b06:	9f 91       	pop	r25
    1b08:	8f 91       	pop	r24
    1b0a:	7f 91       	pop	r23
    1b0c:	6f 91       	pop	r22
    1b0e:	5f 91       	pop	r21
    1b10:	4f 91       	pop	r20
    1b12:	3f 91       	pop	r19
    1b14:	2f 91       	pop	r18
    1b16:	0f 90       	pop	r0
    1b18:	0f be       	out	0x3f, r0	; 63
    1b1a:	0f 90       	pop	r0
    1b1c:	1f 90       	pop	r1
    1b1e:	18 95       	reti

00001b20 <EXTI_vEnableGIE>:
#include "EXTI.h"

void(*Gptr0)(void)='\0';
void(*Gptr1)(void)='\0';
void(*Gptr2)(void)='\0';
void EXTI_vEnableGIE(void){
    1b20:	df 93       	push	r29
    1b22:	cf 93       	push	r28
    1b24:	cd b7       	in	r28, 0x3d	; 61
    1b26:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
    1b28:	af e5       	ldi	r26, 0x5F	; 95
    1b2a:	b0 e0       	ldi	r27, 0x00	; 0
    1b2c:	ef e5       	ldi	r30, 0x5F	; 95
    1b2e:	f0 e0       	ldi	r31, 0x00	; 0
    1b30:	80 81       	ld	r24, Z
    1b32:	80 68       	ori	r24, 0x80	; 128
    1b34:	8c 93       	st	X, r24
}
    1b36:	cf 91       	pop	r28
    1b38:	df 91       	pop	r29
    1b3a:	08 95       	ret

00001b3c <EXTI_vEnablePIE>:
void EXTI_vEnablePIE(u8 Loc_u8InterruptNumber){
    1b3c:	df 93       	push	r29
    1b3e:	cf 93       	push	r28
    1b40:	0f 92       	push	r0
    1b42:	cd b7       	in	r28, 0x3d	; 61
    1b44:	de b7       	in	r29, 0x3e	; 62
    1b46:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8InterruptNumber<=INT2){
    1b48:	89 81       	ldd	r24, Y+1	; 0x01
    1b4a:	83 30       	cpi	r24, 0x03	; 3
    1b4c:	00 f5       	brcc	.+64     	; 0x1b8e <EXTI_vEnablePIE+0x52>
		if(Loc_u8InterruptNumber==INT0){
    1b4e:	89 81       	ldd	r24, Y+1	; 0x01
    1b50:	88 23       	and	r24, r24
    1b52:	41 f4       	brne	.+16     	; 0x1b64 <EXTI_vEnablePIE+0x28>
			SET_BIT(GICR,6);
    1b54:	ab e5       	ldi	r26, 0x5B	; 91
    1b56:	b0 e0       	ldi	r27, 0x00	; 0
    1b58:	eb e5       	ldi	r30, 0x5B	; 91
    1b5a:	f0 e0       	ldi	r31, 0x00	; 0
    1b5c:	80 81       	ld	r24, Z
    1b5e:	80 64       	ori	r24, 0x40	; 64
    1b60:	8c 93       	st	X, r24
    1b62:	15 c0       	rjmp	.+42     	; 0x1b8e <EXTI_vEnablePIE+0x52>
		}
		else if(Loc_u8InterruptNumber==INT1){
    1b64:	89 81       	ldd	r24, Y+1	; 0x01
    1b66:	81 30       	cpi	r24, 0x01	; 1
    1b68:	41 f4       	brne	.+16     	; 0x1b7a <EXTI_vEnablePIE+0x3e>
			SET_BIT(GICR,7);
    1b6a:	ab e5       	ldi	r26, 0x5B	; 91
    1b6c:	b0 e0       	ldi	r27, 0x00	; 0
    1b6e:	eb e5       	ldi	r30, 0x5B	; 91
    1b70:	f0 e0       	ldi	r31, 0x00	; 0
    1b72:	80 81       	ld	r24, Z
    1b74:	80 68       	ori	r24, 0x80	; 128
    1b76:	8c 93       	st	X, r24
    1b78:	0a c0       	rjmp	.+20     	; 0x1b8e <EXTI_vEnablePIE+0x52>
		}
		else if(Loc_u8InterruptNumber==INT2){
    1b7a:	89 81       	ldd	r24, Y+1	; 0x01
    1b7c:	82 30       	cpi	r24, 0x02	; 2
    1b7e:	39 f4       	brne	.+14     	; 0x1b8e <EXTI_vEnablePIE+0x52>
			SET_BIT(GICR,5);
    1b80:	ab e5       	ldi	r26, 0x5B	; 91
    1b82:	b0 e0       	ldi	r27, 0x00	; 0
    1b84:	eb e5       	ldi	r30, 0x5B	; 91
    1b86:	f0 e0       	ldi	r31, 0x00	; 0
    1b88:	80 81       	ld	r24, Z
    1b8a:	80 62       	ori	r24, 0x20	; 32
    1b8c:	8c 93       	st	X, r24
		}
	}
	else {
		//do nothing
	}
}
    1b8e:	0f 90       	pop	r0
    1b90:	cf 91       	pop	r28
    1b92:	df 91       	pop	r29
    1b94:	08 95       	ret

00001b96 <EXIT_vReadPIF>:
u8 EXIT_vReadPIF(u8 Loc_u8InterruptNumber){
    1b96:	df 93       	push	r29
    1b98:	cf 93       	push	r28
    1b9a:	00 d0       	rcall	.+0      	; 0x1b9c <EXIT_vReadPIF+0x6>
    1b9c:	cd b7       	in	r28, 0x3d	; 61
    1b9e:	de b7       	in	r29, 0x3e	; 62
    1ba0:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8InterruptNumber<=INT2){
    1ba2:	89 81       	ldd	r24, Y+1	; 0x01
    1ba4:	83 30       	cpi	r24, 0x03	; 3
    1ba6:	38 f5       	brcc	.+78     	; 0x1bf6 <EXIT_vReadPIF+0x60>
			if(Loc_u8InterruptNumber==INT0){
    1ba8:	89 81       	ldd	r24, Y+1	; 0x01
    1baa:	88 23       	and	r24, r24
    1bac:	59 f4       	brne	.+22     	; 0x1bc4 <EXIT_vReadPIF+0x2e>
				return GET_BIT(GIFR,6);
    1bae:	ea e5       	ldi	r30, 0x5A	; 90
    1bb0:	f0 e0       	ldi	r31, 0x00	; 0
    1bb2:	80 81       	ld	r24, Z
    1bb4:	82 95       	swap	r24
    1bb6:	86 95       	lsr	r24
    1bb8:	86 95       	lsr	r24
    1bba:	83 70       	andi	r24, 0x03	; 3
    1bbc:	98 2f       	mov	r25, r24
    1bbe:	91 70       	andi	r25, 0x01	; 1
    1bc0:	9a 83       	std	Y+2, r25	; 0x02
    1bc2:	1b c0       	rjmp	.+54     	; 0x1bfa <EXIT_vReadPIF+0x64>
			}
			else if(Loc_u8InterruptNumber==INT1){
    1bc4:	89 81       	ldd	r24, Y+1	; 0x01
    1bc6:	81 30       	cpi	r24, 0x01	; 1
    1bc8:	49 f4       	brne	.+18     	; 0x1bdc <EXIT_vReadPIF+0x46>
				return GET_BIT(GIFR,7);
    1bca:	ea e5       	ldi	r30, 0x5A	; 90
    1bcc:	f0 e0       	ldi	r31, 0x00	; 0
    1bce:	80 81       	ld	r24, Z
    1bd0:	98 2f       	mov	r25, r24
    1bd2:	99 1f       	adc	r25, r25
    1bd4:	99 27       	eor	r25, r25
    1bd6:	99 1f       	adc	r25, r25
    1bd8:	9a 83       	std	Y+2, r25	; 0x02
    1bda:	0f c0       	rjmp	.+30     	; 0x1bfa <EXIT_vReadPIF+0x64>
			}
			else if(Loc_u8InterruptNumber==INT2){
    1bdc:	89 81       	ldd	r24, Y+1	; 0x01
    1bde:	82 30       	cpi	r24, 0x02	; 2
    1be0:	51 f4       	brne	.+20     	; 0x1bf6 <EXIT_vReadPIF+0x60>
				return GET_BIT(GIFR,5);
    1be2:	ea e5       	ldi	r30, 0x5A	; 90
    1be4:	f0 e0       	ldi	r31, 0x00	; 0
    1be6:	80 81       	ld	r24, Z
    1be8:	82 95       	swap	r24
    1bea:	86 95       	lsr	r24
    1bec:	87 70       	andi	r24, 0x07	; 7
    1bee:	98 2f       	mov	r25, r24
    1bf0:	91 70       	andi	r25, 0x01	; 1
    1bf2:	9a 83       	std	Y+2, r25	; 0x02
    1bf4:	02 c0       	rjmp	.+4      	; 0x1bfa <EXIT_vReadPIF+0x64>
			}
		}
		else {
			//do nothing
		}
	return 0xff;
    1bf6:	8f ef       	ldi	r24, 0xFF	; 255
    1bf8:	8a 83       	std	Y+2, r24	; 0x02
    1bfa:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1bfc:	0f 90       	pop	r0
    1bfe:	0f 90       	pop	r0
    1c00:	cf 91       	pop	r28
    1c02:	df 91       	pop	r29
    1c04:	08 95       	ret

00001c06 <EXTI_vSenseControl>:
void EXTI_vSenseControl(u8 Loc_u8InterruptNumber,u8 Loc_u8Mode){
    1c06:	df 93       	push	r29
    1c08:	cf 93       	push	r28
    1c0a:	00 d0       	rcall	.+0      	; 0x1c0c <EXTI_vSenseControl+0x6>
    1c0c:	cd b7       	in	r28, 0x3d	; 61
    1c0e:	de b7       	in	r29, 0x3e	; 62
    1c10:	89 83       	std	Y+1, r24	; 0x01
    1c12:	6a 83       	std	Y+2, r22	; 0x02

	if (Loc_u8InterruptNumber<=INT2){
    1c14:	89 81       	ldd	r24, Y+1	; 0x01
    1c16:	83 30       	cpi	r24, 0x03	; 3
    1c18:	08 f0       	brcs	.+2      	; 0x1c1c <EXTI_vSenseControl+0x16>
    1c1a:	bf c0       	rjmp	.+382    	; 0x1d9a <EXTI_vSenseControl+0x194>
		if(Loc_u8InterruptNumber==INT0){
    1c1c:	89 81       	ldd	r24, Y+1	; 0x01
    1c1e:	88 23       	and	r24, r24
    1c20:	09 f0       	breq	.+2      	; 0x1c24 <EXTI_vSenseControl+0x1e>
    1c22:	4d c0       	rjmp	.+154    	; 0x1cbe <EXTI_vSenseControl+0xb8>
			if(Loc_u8Mode<=Falling_Edge){
    1c24:	8a 81       	ldd	r24, Y+2	; 0x02
    1c26:	84 30       	cpi	r24, 0x04	; 4
    1c28:	08 f0       	brcs	.+2      	; 0x1c2c <EXTI_vSenseControl+0x26>
    1c2a:	b7 c0       	rjmp	.+366    	; 0x1d9a <EXTI_vSenseControl+0x194>
				if(Loc_u8Mode==Low_Level){
    1c2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2e:	88 23       	and	r24, r24
    1c30:	79 f4       	brne	.+30     	; 0x1c50 <EXTI_vSenseControl+0x4a>
					CLR_BIT(MCUCR,0);
    1c32:	a5 e5       	ldi	r26, 0x55	; 85
    1c34:	b0 e0       	ldi	r27, 0x00	; 0
    1c36:	e5 e5       	ldi	r30, 0x55	; 85
    1c38:	f0 e0       	ldi	r31, 0x00	; 0
    1c3a:	80 81       	ld	r24, Z
    1c3c:	8e 7f       	andi	r24, 0xFE	; 254
    1c3e:	8c 93       	st	X, r24
					CLR_BIT(MCUCR,1);
    1c40:	a5 e5       	ldi	r26, 0x55	; 85
    1c42:	b0 e0       	ldi	r27, 0x00	; 0
    1c44:	e5 e5       	ldi	r30, 0x55	; 85
    1c46:	f0 e0       	ldi	r31, 0x00	; 0
    1c48:	80 81       	ld	r24, Z
    1c4a:	8d 7f       	andi	r24, 0xFD	; 253
    1c4c:	8c 93       	st	X, r24
    1c4e:	a5 c0       	rjmp	.+330    	; 0x1d9a <EXTI_vSenseControl+0x194>
				}
				else if(Loc_u8Mode==Any_Change){
    1c50:	8a 81       	ldd	r24, Y+2	; 0x02
    1c52:	81 30       	cpi	r24, 0x01	; 1
    1c54:	79 f4       	brne	.+30     	; 0x1c74 <EXTI_vSenseControl+0x6e>
					SET_BIT(MCUCR,0);
    1c56:	a5 e5       	ldi	r26, 0x55	; 85
    1c58:	b0 e0       	ldi	r27, 0x00	; 0
    1c5a:	e5 e5       	ldi	r30, 0x55	; 85
    1c5c:	f0 e0       	ldi	r31, 0x00	; 0
    1c5e:	80 81       	ld	r24, Z
    1c60:	81 60       	ori	r24, 0x01	; 1
    1c62:	8c 93       	st	X, r24
					CLR_BIT(MCUCR,1);
    1c64:	a5 e5       	ldi	r26, 0x55	; 85
    1c66:	b0 e0       	ldi	r27, 0x00	; 0
    1c68:	e5 e5       	ldi	r30, 0x55	; 85
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	80 81       	ld	r24, Z
    1c6e:	8d 7f       	andi	r24, 0xFD	; 253
    1c70:	8c 93       	st	X, r24
    1c72:	93 c0       	rjmp	.+294    	; 0x1d9a <EXTI_vSenseControl+0x194>
				}
				else if(Loc_u8Mode==Rising_Egde){
    1c74:	8a 81       	ldd	r24, Y+2	; 0x02
    1c76:	82 30       	cpi	r24, 0x02	; 2
    1c78:	79 f4       	brne	.+30     	; 0x1c98 <EXTI_vSenseControl+0x92>
					SET_BIT(MCUCR,0);
    1c7a:	a5 e5       	ldi	r26, 0x55	; 85
    1c7c:	b0 e0       	ldi	r27, 0x00	; 0
    1c7e:	e5 e5       	ldi	r30, 0x55	; 85
    1c80:	f0 e0       	ldi	r31, 0x00	; 0
    1c82:	80 81       	ld	r24, Z
    1c84:	81 60       	ori	r24, 0x01	; 1
    1c86:	8c 93       	st	X, r24
					SET_BIT(MCUCR,1);
    1c88:	a5 e5       	ldi	r26, 0x55	; 85
    1c8a:	b0 e0       	ldi	r27, 0x00	; 0
    1c8c:	e5 e5       	ldi	r30, 0x55	; 85
    1c8e:	f0 e0       	ldi	r31, 0x00	; 0
    1c90:	80 81       	ld	r24, Z
    1c92:	82 60       	ori	r24, 0x02	; 2
    1c94:	8c 93       	st	X, r24
    1c96:	81 c0       	rjmp	.+258    	; 0x1d9a <EXTI_vSenseControl+0x194>
				}
				else if(Loc_u8Mode==Falling_Edge){
    1c98:	8a 81       	ldd	r24, Y+2	; 0x02
    1c9a:	83 30       	cpi	r24, 0x03	; 3
    1c9c:	09 f0       	breq	.+2      	; 0x1ca0 <EXTI_vSenseControl+0x9a>
    1c9e:	7d c0       	rjmp	.+250    	; 0x1d9a <EXTI_vSenseControl+0x194>
					CLR_BIT(MCUCR,0);
    1ca0:	a5 e5       	ldi	r26, 0x55	; 85
    1ca2:	b0 e0       	ldi	r27, 0x00	; 0
    1ca4:	e5 e5       	ldi	r30, 0x55	; 85
    1ca6:	f0 e0       	ldi	r31, 0x00	; 0
    1ca8:	80 81       	ld	r24, Z
    1caa:	8e 7f       	andi	r24, 0xFE	; 254
    1cac:	8c 93       	st	X, r24
					SET_BIT(MCUCR,1);
    1cae:	a5 e5       	ldi	r26, 0x55	; 85
    1cb0:	b0 e0       	ldi	r27, 0x00	; 0
    1cb2:	e5 e5       	ldi	r30, 0x55	; 85
    1cb4:	f0 e0       	ldi	r31, 0x00	; 0
    1cb6:	80 81       	ld	r24, Z
    1cb8:	82 60       	ori	r24, 0x02	; 2
    1cba:	8c 93       	st	X, r24
    1cbc:	6e c0       	rjmp	.+220    	; 0x1d9a <EXTI_vSenseControl+0x194>
			else{
				//do nothing
			}
		}

		else if(Loc_u8InterruptNumber==INT1){
    1cbe:	89 81       	ldd	r24, Y+1	; 0x01
    1cc0:	81 30       	cpi	r24, 0x01	; 1
    1cc2:	09 f0       	breq	.+2      	; 0x1cc6 <EXTI_vSenseControl+0xc0>
    1cc4:	4c c0       	rjmp	.+152    	; 0x1d5e <EXTI_vSenseControl+0x158>
			if(Loc_u8Mode<=Falling_Edge){
    1cc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc8:	84 30       	cpi	r24, 0x04	; 4
    1cca:	08 f0       	brcs	.+2      	; 0x1cce <EXTI_vSenseControl+0xc8>
    1ccc:	66 c0       	rjmp	.+204    	; 0x1d9a <EXTI_vSenseControl+0x194>
				if(Loc_u8Mode==Low_Level){
    1cce:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd0:	88 23       	and	r24, r24
    1cd2:	79 f4       	brne	.+30     	; 0x1cf2 <EXTI_vSenseControl+0xec>
					CLR_BIT(MCUCR,2);
    1cd4:	a5 e5       	ldi	r26, 0x55	; 85
    1cd6:	b0 e0       	ldi	r27, 0x00	; 0
    1cd8:	e5 e5       	ldi	r30, 0x55	; 85
    1cda:	f0 e0       	ldi	r31, 0x00	; 0
    1cdc:	80 81       	ld	r24, Z
    1cde:	8b 7f       	andi	r24, 0xFB	; 251
    1ce0:	8c 93       	st	X, r24
					CLR_BIT(MCUCR,3);
    1ce2:	a5 e5       	ldi	r26, 0x55	; 85
    1ce4:	b0 e0       	ldi	r27, 0x00	; 0
    1ce6:	e5 e5       	ldi	r30, 0x55	; 85
    1ce8:	f0 e0       	ldi	r31, 0x00	; 0
    1cea:	80 81       	ld	r24, Z
    1cec:	87 7f       	andi	r24, 0xF7	; 247
    1cee:	8c 93       	st	X, r24
    1cf0:	54 c0       	rjmp	.+168    	; 0x1d9a <EXTI_vSenseControl+0x194>
				}
				else if(Loc_u8Mode==Any_Change){
    1cf2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf4:	81 30       	cpi	r24, 0x01	; 1
    1cf6:	79 f4       	brne	.+30     	; 0x1d16 <EXTI_vSenseControl+0x110>
					SET_BIT(MCUCR,2);
    1cf8:	a5 e5       	ldi	r26, 0x55	; 85
    1cfa:	b0 e0       	ldi	r27, 0x00	; 0
    1cfc:	e5 e5       	ldi	r30, 0x55	; 85
    1cfe:	f0 e0       	ldi	r31, 0x00	; 0
    1d00:	80 81       	ld	r24, Z
    1d02:	84 60       	ori	r24, 0x04	; 4
    1d04:	8c 93       	st	X, r24
					CLR_BIT(MCUCR,3);
    1d06:	a5 e5       	ldi	r26, 0x55	; 85
    1d08:	b0 e0       	ldi	r27, 0x00	; 0
    1d0a:	e5 e5       	ldi	r30, 0x55	; 85
    1d0c:	f0 e0       	ldi	r31, 0x00	; 0
    1d0e:	80 81       	ld	r24, Z
    1d10:	87 7f       	andi	r24, 0xF7	; 247
    1d12:	8c 93       	st	X, r24
    1d14:	42 c0       	rjmp	.+132    	; 0x1d9a <EXTI_vSenseControl+0x194>
				}
				else if(Loc_u8Mode==Rising_Egde){
    1d16:	8a 81       	ldd	r24, Y+2	; 0x02
    1d18:	82 30       	cpi	r24, 0x02	; 2
    1d1a:	79 f4       	brne	.+30     	; 0x1d3a <EXTI_vSenseControl+0x134>
					SET_BIT(MCUCR,2);
    1d1c:	a5 e5       	ldi	r26, 0x55	; 85
    1d1e:	b0 e0       	ldi	r27, 0x00	; 0
    1d20:	e5 e5       	ldi	r30, 0x55	; 85
    1d22:	f0 e0       	ldi	r31, 0x00	; 0
    1d24:	80 81       	ld	r24, Z
    1d26:	84 60       	ori	r24, 0x04	; 4
    1d28:	8c 93       	st	X, r24
					SET_BIT(MCUCR,3);
    1d2a:	a5 e5       	ldi	r26, 0x55	; 85
    1d2c:	b0 e0       	ldi	r27, 0x00	; 0
    1d2e:	e5 e5       	ldi	r30, 0x55	; 85
    1d30:	f0 e0       	ldi	r31, 0x00	; 0
    1d32:	80 81       	ld	r24, Z
    1d34:	88 60       	ori	r24, 0x08	; 8
    1d36:	8c 93       	st	X, r24
    1d38:	30 c0       	rjmp	.+96     	; 0x1d9a <EXTI_vSenseControl+0x194>
				}
				else if(Loc_u8Mode==Falling_Edge){
    1d3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3c:	83 30       	cpi	r24, 0x03	; 3
    1d3e:	69 f5       	brne	.+90     	; 0x1d9a <EXTI_vSenseControl+0x194>
					CLR_BIT(MCUCR,2);
    1d40:	a5 e5       	ldi	r26, 0x55	; 85
    1d42:	b0 e0       	ldi	r27, 0x00	; 0
    1d44:	e5 e5       	ldi	r30, 0x55	; 85
    1d46:	f0 e0       	ldi	r31, 0x00	; 0
    1d48:	80 81       	ld	r24, Z
    1d4a:	8b 7f       	andi	r24, 0xFB	; 251
    1d4c:	8c 93       	st	X, r24
					SET_BIT(MCUCR,3);
    1d4e:	a5 e5       	ldi	r26, 0x55	; 85
    1d50:	b0 e0       	ldi	r27, 0x00	; 0
    1d52:	e5 e5       	ldi	r30, 0x55	; 85
    1d54:	f0 e0       	ldi	r31, 0x00	; 0
    1d56:	80 81       	ld	r24, Z
    1d58:	88 60       	ori	r24, 0x08	; 8
    1d5a:	8c 93       	st	X, r24
    1d5c:	1e c0       	rjmp	.+60     	; 0x1d9a <EXTI_vSenseControl+0x194>
			}
			else{
				//do nothing
			}
		}
		else if(Loc_u8InterruptNumber==INT2){
    1d5e:	89 81       	ldd	r24, Y+1	; 0x01
    1d60:	82 30       	cpi	r24, 0x02	; 2
    1d62:	d9 f4       	brne	.+54     	; 0x1d9a <EXTI_vSenseControl+0x194>
			if(Loc_u8Mode==Falling_Edge||Loc_u8Mode==Rising_Egde){
    1d64:	8a 81       	ldd	r24, Y+2	; 0x02
    1d66:	83 30       	cpi	r24, 0x03	; 3
    1d68:	19 f0       	breq	.+6      	; 0x1d70 <EXTI_vSenseControl+0x16a>
    1d6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6c:	82 30       	cpi	r24, 0x02	; 2
    1d6e:	a9 f4       	brne	.+42     	; 0x1d9a <EXTI_vSenseControl+0x194>
				if(Loc_u8Mode==Rising_Egde){
    1d70:	8a 81       	ldd	r24, Y+2	; 0x02
    1d72:	82 30       	cpi	r24, 0x02	; 2
    1d74:	41 f4       	brne	.+16     	; 0x1d86 <EXTI_vSenseControl+0x180>
					SET_BIT(MCUCSR,6);
    1d76:	a4 e5       	ldi	r26, 0x54	; 84
    1d78:	b0 e0       	ldi	r27, 0x00	; 0
    1d7a:	e4 e5       	ldi	r30, 0x54	; 84
    1d7c:	f0 e0       	ldi	r31, 0x00	; 0
    1d7e:	80 81       	ld	r24, Z
    1d80:	80 64       	ori	r24, 0x40	; 64
    1d82:	8c 93       	st	X, r24
    1d84:	0a c0       	rjmp	.+20     	; 0x1d9a <EXTI_vSenseControl+0x194>
				}
				else if(Loc_u8Mode==Falling_Edge){
    1d86:	8a 81       	ldd	r24, Y+2	; 0x02
    1d88:	83 30       	cpi	r24, 0x03	; 3
    1d8a:	39 f4       	brne	.+14     	; 0x1d9a <EXTI_vSenseControl+0x194>
					CLR_BIT(MCUCSR,6);
    1d8c:	a4 e5       	ldi	r26, 0x54	; 84
    1d8e:	b0 e0       	ldi	r27, 0x00	; 0
    1d90:	e4 e5       	ldi	r30, 0x54	; 84
    1d92:	f0 e0       	ldi	r31, 0x00	; 0
    1d94:	80 81       	ld	r24, Z
    1d96:	8f 7b       	andi	r24, 0xBF	; 191
    1d98:	8c 93       	st	X, r24
	}
	else{
		//do nothing
	}

}
    1d9a:	0f 90       	pop	r0
    1d9c:	0f 90       	pop	r0
    1d9e:	cf 91       	pop	r28
    1da0:	df 91       	pop	r29
    1da2:	08 95       	ret

00001da4 <EXTI_INT0CallBack>:
void EXTI_INT0CallBack(void(*ptr)(void)){
    1da4:	df 93       	push	r29
    1da6:	cf 93       	push	r28
    1da8:	00 d0       	rcall	.+0      	; 0x1daa <EXTI_INT0CallBack+0x6>
    1daa:	cd b7       	in	r28, 0x3d	; 61
    1dac:	de b7       	in	r29, 0x3e	; 62
    1dae:	9a 83       	std	Y+2, r25	; 0x02
    1db0:	89 83       	std	Y+1, r24	; 0x01
	if(ptr!='\0'){
    1db2:	89 81       	ldd	r24, Y+1	; 0x01
    1db4:	9a 81       	ldd	r25, Y+2	; 0x02
    1db6:	00 97       	sbiw	r24, 0x00	; 0
    1db8:	31 f0       	breq	.+12     	; 0x1dc6 <EXTI_INT0CallBack+0x22>
		Gptr0=ptr;
    1dba:	89 81       	ldd	r24, Y+1	; 0x01
    1dbc:	9a 81       	ldd	r25, Y+2	; 0x02
    1dbe:	90 93 e2 00 	sts	0x00E2, r25
    1dc2:	80 93 e1 00 	sts	0x00E1, r24
	}
}
    1dc6:	0f 90       	pop	r0
    1dc8:	0f 90       	pop	r0
    1dca:	cf 91       	pop	r28
    1dcc:	df 91       	pop	r29
    1dce:	08 95       	ret

00001dd0 <EXTI_INT1CallBack>:
void EXTI_INT1CallBack(void(*ptr)(void)){
    1dd0:	df 93       	push	r29
    1dd2:	cf 93       	push	r28
    1dd4:	00 d0       	rcall	.+0      	; 0x1dd6 <EXTI_INT1CallBack+0x6>
    1dd6:	cd b7       	in	r28, 0x3d	; 61
    1dd8:	de b7       	in	r29, 0x3e	; 62
    1dda:	9a 83       	std	Y+2, r25	; 0x02
    1ddc:	89 83       	std	Y+1, r24	; 0x01
	if(ptr!='\0'){
    1dde:	89 81       	ldd	r24, Y+1	; 0x01
    1de0:	9a 81       	ldd	r25, Y+2	; 0x02
    1de2:	00 97       	sbiw	r24, 0x00	; 0
    1de4:	31 f0       	breq	.+12     	; 0x1df2 <EXTI_INT1CallBack+0x22>
		Gptr1=ptr;
    1de6:	89 81       	ldd	r24, Y+1	; 0x01
    1de8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dea:	90 93 e4 00 	sts	0x00E4, r25
    1dee:	80 93 e3 00 	sts	0x00E3, r24
	}
}
    1df2:	0f 90       	pop	r0
    1df4:	0f 90       	pop	r0
    1df6:	cf 91       	pop	r28
    1df8:	df 91       	pop	r29
    1dfa:	08 95       	ret

00001dfc <EXTI_INT2CallBack>:
void EXTI_INT2CallBack(void(*ptr)(void)){
    1dfc:	df 93       	push	r29
    1dfe:	cf 93       	push	r28
    1e00:	00 d0       	rcall	.+0      	; 0x1e02 <EXTI_INT2CallBack+0x6>
    1e02:	cd b7       	in	r28, 0x3d	; 61
    1e04:	de b7       	in	r29, 0x3e	; 62
    1e06:	9a 83       	std	Y+2, r25	; 0x02
    1e08:	89 83       	std	Y+1, r24	; 0x01
	if(ptr!='\0'){
    1e0a:	89 81       	ldd	r24, Y+1	; 0x01
    1e0c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e0e:	00 97       	sbiw	r24, 0x00	; 0
    1e10:	31 f0       	breq	.+12     	; 0x1e1e <EXTI_INT2CallBack+0x22>
		Gptr2=ptr;
    1e12:	89 81       	ldd	r24, Y+1	; 0x01
    1e14:	9a 81       	ldd	r25, Y+2	; 0x02
    1e16:	90 93 e6 00 	sts	0x00E6, r25
    1e1a:	80 93 e5 00 	sts	0x00E5, r24
	}
}
    1e1e:	0f 90       	pop	r0
    1e20:	0f 90       	pop	r0
    1e22:	cf 91       	pop	r28
    1e24:	df 91       	pop	r29
    1e26:	08 95       	ret

00001e28 <__vector_1>:
ISR(INT0_vect){
    1e28:	1f 92       	push	r1
    1e2a:	0f 92       	push	r0
    1e2c:	0f b6       	in	r0, 0x3f	; 63
    1e2e:	0f 92       	push	r0
    1e30:	11 24       	eor	r1, r1
    1e32:	2f 93       	push	r18
    1e34:	3f 93       	push	r19
    1e36:	4f 93       	push	r20
    1e38:	5f 93       	push	r21
    1e3a:	6f 93       	push	r22
    1e3c:	7f 93       	push	r23
    1e3e:	8f 93       	push	r24
    1e40:	9f 93       	push	r25
    1e42:	af 93       	push	r26
    1e44:	bf 93       	push	r27
    1e46:	ef 93       	push	r30
    1e48:	ff 93       	push	r31
    1e4a:	df 93       	push	r29
    1e4c:	cf 93       	push	r28
    1e4e:	cd b7       	in	r28, 0x3d	; 61
    1e50:	de b7       	in	r29, 0x3e	; 62
	if(Gptr0!='\0'){
    1e52:	80 91 e1 00 	lds	r24, 0x00E1
    1e56:	90 91 e2 00 	lds	r25, 0x00E2
    1e5a:	00 97       	sbiw	r24, 0x00	; 0
    1e5c:	29 f0       	breq	.+10     	; 0x1e68 <__vector_1+0x40>
		Gptr0();
    1e5e:	e0 91 e1 00 	lds	r30, 0x00E1
    1e62:	f0 91 e2 00 	lds	r31, 0x00E2
    1e66:	09 95       	icall
	}
}
    1e68:	cf 91       	pop	r28
    1e6a:	df 91       	pop	r29
    1e6c:	ff 91       	pop	r31
    1e6e:	ef 91       	pop	r30
    1e70:	bf 91       	pop	r27
    1e72:	af 91       	pop	r26
    1e74:	9f 91       	pop	r25
    1e76:	8f 91       	pop	r24
    1e78:	7f 91       	pop	r23
    1e7a:	6f 91       	pop	r22
    1e7c:	5f 91       	pop	r21
    1e7e:	4f 91       	pop	r20
    1e80:	3f 91       	pop	r19
    1e82:	2f 91       	pop	r18
    1e84:	0f 90       	pop	r0
    1e86:	0f be       	out	0x3f, r0	; 63
    1e88:	0f 90       	pop	r0
    1e8a:	1f 90       	pop	r1
    1e8c:	18 95       	reti

00001e8e <__vector_2>:
ISR(INT1_vect){
    1e8e:	1f 92       	push	r1
    1e90:	0f 92       	push	r0
    1e92:	0f b6       	in	r0, 0x3f	; 63
    1e94:	0f 92       	push	r0
    1e96:	11 24       	eor	r1, r1
    1e98:	2f 93       	push	r18
    1e9a:	3f 93       	push	r19
    1e9c:	4f 93       	push	r20
    1e9e:	5f 93       	push	r21
    1ea0:	6f 93       	push	r22
    1ea2:	7f 93       	push	r23
    1ea4:	8f 93       	push	r24
    1ea6:	9f 93       	push	r25
    1ea8:	af 93       	push	r26
    1eaa:	bf 93       	push	r27
    1eac:	ef 93       	push	r30
    1eae:	ff 93       	push	r31
    1eb0:	df 93       	push	r29
    1eb2:	cf 93       	push	r28
    1eb4:	cd b7       	in	r28, 0x3d	; 61
    1eb6:	de b7       	in	r29, 0x3e	; 62
	if(Gptr1!='\0'){
    1eb8:	80 91 e3 00 	lds	r24, 0x00E3
    1ebc:	90 91 e4 00 	lds	r25, 0x00E4
    1ec0:	00 97       	sbiw	r24, 0x00	; 0
    1ec2:	29 f0       	breq	.+10     	; 0x1ece <__vector_2+0x40>
		Gptr1();
    1ec4:	e0 91 e3 00 	lds	r30, 0x00E3
    1ec8:	f0 91 e4 00 	lds	r31, 0x00E4
    1ecc:	09 95       	icall
	}
}
    1ece:	cf 91       	pop	r28
    1ed0:	df 91       	pop	r29
    1ed2:	ff 91       	pop	r31
    1ed4:	ef 91       	pop	r30
    1ed6:	bf 91       	pop	r27
    1ed8:	af 91       	pop	r26
    1eda:	9f 91       	pop	r25
    1edc:	8f 91       	pop	r24
    1ede:	7f 91       	pop	r23
    1ee0:	6f 91       	pop	r22
    1ee2:	5f 91       	pop	r21
    1ee4:	4f 91       	pop	r20
    1ee6:	3f 91       	pop	r19
    1ee8:	2f 91       	pop	r18
    1eea:	0f 90       	pop	r0
    1eec:	0f be       	out	0x3f, r0	; 63
    1eee:	0f 90       	pop	r0
    1ef0:	1f 90       	pop	r1
    1ef2:	18 95       	reti

00001ef4 <INT2_vect>:
ISR(INT2_vect){
    1ef4:	1f 92       	push	r1
    1ef6:	0f 92       	push	r0
    1ef8:	0f b6       	in	r0, 0x3f	; 63
    1efa:	0f 92       	push	r0
    1efc:	11 24       	eor	r1, r1
    1efe:	2f 93       	push	r18
    1f00:	3f 93       	push	r19
    1f02:	4f 93       	push	r20
    1f04:	5f 93       	push	r21
    1f06:	6f 93       	push	r22
    1f08:	7f 93       	push	r23
    1f0a:	8f 93       	push	r24
    1f0c:	9f 93       	push	r25
    1f0e:	af 93       	push	r26
    1f10:	bf 93       	push	r27
    1f12:	ef 93       	push	r30
    1f14:	ff 93       	push	r31
    1f16:	df 93       	push	r29
    1f18:	cf 93       	push	r28
    1f1a:	cd b7       	in	r28, 0x3d	; 61
    1f1c:	de b7       	in	r29, 0x3e	; 62
	if(Gptr2!='\0'){
    1f1e:	80 91 e5 00 	lds	r24, 0x00E5
    1f22:	90 91 e6 00 	lds	r25, 0x00E6
    1f26:	00 97       	sbiw	r24, 0x00	; 0
    1f28:	29 f0       	breq	.+10     	; 0x1f34 <INT2_vect+0x40>
		Gptr2();
    1f2a:	e0 91 e5 00 	lds	r30, 0x00E5
    1f2e:	f0 91 e6 00 	lds	r31, 0x00E6
    1f32:	09 95       	icall
	}
}
    1f34:	cf 91       	pop	r28
    1f36:	df 91       	pop	r29
    1f38:	ff 91       	pop	r31
    1f3a:	ef 91       	pop	r30
    1f3c:	bf 91       	pop	r27
    1f3e:	af 91       	pop	r26
    1f40:	9f 91       	pop	r25
    1f42:	8f 91       	pop	r24
    1f44:	7f 91       	pop	r23
    1f46:	6f 91       	pop	r22
    1f48:	5f 91       	pop	r21
    1f4a:	4f 91       	pop	r20
    1f4c:	3f 91       	pop	r19
    1f4e:	2f 91       	pop	r18
    1f50:	0f 90       	pop	r0
    1f52:	0f be       	out	0x3f, r0	; 63
    1f54:	0f 90       	pop	r0
    1f56:	1f 90       	pop	r1
    1f58:	18 95       	reti

00001f5a <DIO_vSetPortDirection>:

 * \Parameters (in) : Loc_u8PortID   PORT wanted to change it's Direction
 * 					Loc_u8PortDirection	    choose direction Input or Output
 * \Parameters (out): None
 *******************************************************************************/
void DIO_vSetPortDirection(u8 Loc_u8PortID, u8 Loc_u8PortDirection){
    1f5a:	df 93       	push	r29
    1f5c:	cf 93       	push	r28
    1f5e:	00 d0       	rcall	.+0      	; 0x1f60 <DIO_vSetPortDirection+0x6>
    1f60:	cd b7       	in	r28, 0x3d	; 61
    1f62:	de b7       	in	r29, 0x3e	; 62
    1f64:	89 83       	std	Y+1, r24	; 0x01
    1f66:	6a 83       	std	Y+2, r22	; 0x02
	if(Loc_u8PortID<=PortD){
    1f68:	89 81       	ldd	r24, Y+1	; 0x01
    1f6a:	84 30       	cpi	r24, 0x04	; 4
    1f6c:	f8 f4       	brcc	.+62     	; 0x1fac <DIO_vSetPortDirection+0x52>
		if(Loc_u8PortID==PortA){
    1f6e:	89 81       	ldd	r24, Y+1	; 0x01
    1f70:	88 23       	and	r24, r24
    1f72:	29 f4       	brne	.+10     	; 0x1f7e <DIO_vSetPortDirection+0x24>
			DDRA = Loc_u8PortDirection;
    1f74:	ea e3       	ldi	r30, 0x3A	; 58
    1f76:	f0 e0       	ldi	r31, 0x00	; 0
    1f78:	8a 81       	ldd	r24, Y+2	; 0x02
    1f7a:	80 83       	st	Z, r24
    1f7c:	17 c0       	rjmp	.+46     	; 0x1fac <DIO_vSetPortDirection+0x52>
		}
		else if(Loc_u8PortID==PortB){
    1f7e:	89 81       	ldd	r24, Y+1	; 0x01
    1f80:	81 30       	cpi	r24, 0x01	; 1
    1f82:	29 f4       	brne	.+10     	; 0x1f8e <DIO_vSetPortDirection+0x34>
			DDRB = Loc_u8PortDirection;
    1f84:	e7 e3       	ldi	r30, 0x37	; 55
    1f86:	f0 e0       	ldi	r31, 0x00	; 0
    1f88:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8a:	80 83       	st	Z, r24
    1f8c:	0f c0       	rjmp	.+30     	; 0x1fac <DIO_vSetPortDirection+0x52>
		}
		else if(Loc_u8PortID==PortC){
    1f8e:	89 81       	ldd	r24, Y+1	; 0x01
    1f90:	82 30       	cpi	r24, 0x02	; 2
    1f92:	29 f4       	brne	.+10     	; 0x1f9e <DIO_vSetPortDirection+0x44>
			DDRC = Loc_u8PortDirection;
    1f94:	e4 e3       	ldi	r30, 0x34	; 52
    1f96:	f0 e0       	ldi	r31, 0x00	; 0
    1f98:	8a 81       	ldd	r24, Y+2	; 0x02
    1f9a:	80 83       	st	Z, r24
    1f9c:	07 c0       	rjmp	.+14     	; 0x1fac <DIO_vSetPortDirection+0x52>
		}
		else if(Loc_u8PortID==PortD){
    1f9e:	89 81       	ldd	r24, Y+1	; 0x01
    1fa0:	83 30       	cpi	r24, 0x03	; 3
    1fa2:	21 f4       	brne	.+8      	; 0x1fac <DIO_vSetPortDirection+0x52>
			DDRD = Loc_u8PortDirection;
    1fa4:	e1 e3       	ldi	r30, 0x31	; 49
    1fa6:	f0 e0       	ldi	r31, 0x00	; 0
    1fa8:	8a 81       	ldd	r24, Y+2	; 0x02
    1faa:	80 83       	st	Z, r24
		}
	}
	else{
		//do nothing
	}
}
    1fac:	0f 90       	pop	r0
    1fae:	0f 90       	pop	r0
    1fb0:	cf 91       	pop	r28
    1fb2:	df 91       	pop	r29
    1fb4:	08 95       	ret

00001fb6 <DIO_vSetPortValue>:

* \Parameters (in) : Loc_u8PortID   PORT wanted to change it's value
* 					Loc_u8PortDirection	    choose value High or Low
* \Parameters (out): None
*******************************************************************************/
void DIO_vSetPortValue(u8 Loc_u8PortID, u8 Loc_u8PortValue){
    1fb6:	df 93       	push	r29
    1fb8:	cf 93       	push	r28
    1fba:	00 d0       	rcall	.+0      	; 0x1fbc <DIO_vSetPortValue+0x6>
    1fbc:	cd b7       	in	r28, 0x3d	; 61
    1fbe:	de b7       	in	r29, 0x3e	; 62
    1fc0:	89 83       	std	Y+1, r24	; 0x01
    1fc2:	6a 83       	std	Y+2, r22	; 0x02
	if(Loc_u8PortID<=PortD){
    1fc4:	89 81       	ldd	r24, Y+1	; 0x01
    1fc6:	84 30       	cpi	r24, 0x04	; 4
    1fc8:	f8 f4       	brcc	.+62     	; 0x2008 <DIO_vSetPortValue+0x52>
		if(Loc_u8PortID==PortA){
    1fca:	89 81       	ldd	r24, Y+1	; 0x01
    1fcc:	88 23       	and	r24, r24
    1fce:	29 f4       	brne	.+10     	; 0x1fda <DIO_vSetPortValue+0x24>
			PORTA = Loc_u8PortValue;
    1fd0:	eb e3       	ldi	r30, 0x3B	; 59
    1fd2:	f0 e0       	ldi	r31, 0x00	; 0
    1fd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd6:	80 83       	st	Z, r24
    1fd8:	17 c0       	rjmp	.+46     	; 0x2008 <DIO_vSetPortValue+0x52>
		}
		else if(Loc_u8PortID==PortB){
    1fda:	89 81       	ldd	r24, Y+1	; 0x01
    1fdc:	81 30       	cpi	r24, 0x01	; 1
    1fde:	29 f4       	brne	.+10     	; 0x1fea <DIO_vSetPortValue+0x34>
			PORTB = Loc_u8PortValue;
    1fe0:	e8 e3       	ldi	r30, 0x38	; 56
    1fe2:	f0 e0       	ldi	r31, 0x00	; 0
    1fe4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe6:	80 83       	st	Z, r24
    1fe8:	0f c0       	rjmp	.+30     	; 0x2008 <DIO_vSetPortValue+0x52>
		}
		else if(Loc_u8PortID==PortC){
    1fea:	89 81       	ldd	r24, Y+1	; 0x01
    1fec:	82 30       	cpi	r24, 0x02	; 2
    1fee:	29 f4       	brne	.+10     	; 0x1ffa <DIO_vSetPortValue+0x44>
			PORTC = Loc_u8PortValue;
    1ff0:	e5 e3       	ldi	r30, 0x35	; 53
    1ff2:	f0 e0       	ldi	r31, 0x00	; 0
    1ff4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff6:	80 83       	st	Z, r24
    1ff8:	07 c0       	rjmp	.+14     	; 0x2008 <DIO_vSetPortValue+0x52>
		}
		else if(Loc_u8PortID==PortD){
    1ffa:	89 81       	ldd	r24, Y+1	; 0x01
    1ffc:	83 30       	cpi	r24, 0x03	; 3
    1ffe:	21 f4       	brne	.+8      	; 0x2008 <DIO_vSetPortValue+0x52>
			PORTD = Loc_u8PortValue;
    2000:	e2 e3       	ldi	r30, 0x32	; 50
    2002:	f0 e0       	ldi	r31, 0x00	; 0
    2004:	8a 81       	ldd	r24, Y+2	; 0x02
    2006:	80 83       	st	Z, r24
		}
	}
	else{
		//do nothing
	}
}
    2008:	0f 90       	pop	r0
    200a:	0f 90       	pop	r0
    200c:	cf 91       	pop	r28
    200e:	df 91       	pop	r29
    2010:	08 95       	ret

00002012 <DIO_u8PGetPortValue>:

* \Parameters (in) : Loc_u8PortID   PORT wanted to Read it's value
* \Parameters (out): PINx
*  \Return value:   : unsigned char
*******************************************************************************/
u8 DIO_u8PGetPortValue(u8 Loc_u8PortID){
    2012:	df 93       	push	r29
    2014:	cf 93       	push	r28
    2016:	00 d0       	rcall	.+0      	; 0x2018 <DIO_u8PGetPortValue+0x6>
    2018:	cd b7       	in	r28, 0x3d	; 61
    201a:	de b7       	in	r29, 0x3e	; 62
    201c:	89 83       	std	Y+1, r24	; 0x01
	if(Loc_u8PortID<=PortD){
    201e:	89 81       	ldd	r24, Y+1	; 0x01
    2020:	84 30       	cpi	r24, 0x04	; 4
    2022:	00 f5       	brcc	.+64     	; 0x2064 <DIO_u8PGetPortValue+0x52>
		if(Loc_u8PortID==PortA){
    2024:	89 81       	ldd	r24, Y+1	; 0x01
    2026:	88 23       	and	r24, r24
    2028:	29 f4       	brne	.+10     	; 0x2034 <DIO_u8PGetPortValue+0x22>
			return PINA;
    202a:	e9 e3       	ldi	r30, 0x39	; 57
    202c:	f0 e0       	ldi	r31, 0x00	; 0
    202e:	80 81       	ld	r24, Z
    2030:	8a 83       	std	Y+2, r24	; 0x02
    2032:	1a c0       	rjmp	.+52     	; 0x2068 <DIO_u8PGetPortValue+0x56>
		}
		else if(Loc_u8PortID==PortB){
    2034:	89 81       	ldd	r24, Y+1	; 0x01
    2036:	81 30       	cpi	r24, 0x01	; 1
    2038:	29 f4       	brne	.+10     	; 0x2044 <DIO_u8PGetPortValue+0x32>
			return PINB;
    203a:	e6 e3       	ldi	r30, 0x36	; 54
    203c:	f0 e0       	ldi	r31, 0x00	; 0
    203e:	80 81       	ld	r24, Z
    2040:	8a 83       	std	Y+2, r24	; 0x02
    2042:	12 c0       	rjmp	.+36     	; 0x2068 <DIO_u8PGetPortValue+0x56>
		}
		else if(Loc_u8PortID==PortC){
    2044:	89 81       	ldd	r24, Y+1	; 0x01
    2046:	82 30       	cpi	r24, 0x02	; 2
    2048:	29 f4       	brne	.+10     	; 0x2054 <DIO_u8PGetPortValue+0x42>
			return PINC;
    204a:	e3 e3       	ldi	r30, 0x33	; 51
    204c:	f0 e0       	ldi	r31, 0x00	; 0
    204e:	80 81       	ld	r24, Z
    2050:	8a 83       	std	Y+2, r24	; 0x02
    2052:	0a c0       	rjmp	.+20     	; 0x2068 <DIO_u8PGetPortValue+0x56>
		}
		else if(Loc_u8PortID==PortD){
    2054:	89 81       	ldd	r24, Y+1	; 0x01
    2056:	83 30       	cpi	r24, 0x03	; 3
    2058:	29 f4       	brne	.+10     	; 0x2064 <DIO_u8PGetPortValue+0x52>
			return PIND;
    205a:	e0 e3       	ldi	r30, 0x30	; 48
    205c:	f0 e0       	ldi	r31, 0x00	; 0
    205e:	80 81       	ld	r24, Z
    2060:	8a 83       	std	Y+2, r24	; 0x02
    2062:	02 c0       	rjmp	.+4      	; 0x2068 <DIO_u8PGetPortValue+0x56>
		}
	}
	else{
		//do nothing
	}
	return 0xff;
    2064:	8f ef       	ldi	r24, 0xFF	; 255
    2066:	8a 83       	std	Y+2, r24	; 0x02
    2068:	8a 81       	ldd	r24, Y+2	; 0x02
}
    206a:	0f 90       	pop	r0
    206c:	0f 90       	pop	r0
    206e:	cf 91       	pop	r28
    2070:	df 91       	pop	r29
    2072:	08 95       	ret

00002074 <DIO_vTogPortValue>:
*

* \Parameters (in) : Loc_u8PortID  PORT wanted to Toggle it's value
* \Parameters (out): None
*******************************************************************************/
void DIO_vTogPortValue(u8 Loc_u8PortID){
    2074:	df 93       	push	r29
    2076:	cf 93       	push	r28
    2078:	0f 92       	push	r0
    207a:	cd b7       	in	r28, 0x3d	; 61
    207c:	de b7       	in	r29, 0x3e	; 62
    207e:	89 83       	std	Y+1, r24	; 0x01
	if(Loc_u8PortID<=PortD){
    2080:	89 81       	ldd	r24, Y+1	; 0x01
    2082:	84 30       	cpi	r24, 0x04	; 4
    2084:	58 f5       	brcc	.+86     	; 0x20dc <DIO_vTogPortValue+0x68>
		if(Loc_u8PortID==PortA){
    2086:	89 81       	ldd	r24, Y+1	; 0x01
    2088:	88 23       	and	r24, r24
    208a:	41 f4       	brne	.+16     	; 0x209c <DIO_vTogPortValue+0x28>
			PORTA = ~PORTA;
    208c:	ab e3       	ldi	r26, 0x3B	; 59
    208e:	b0 e0       	ldi	r27, 0x00	; 0
    2090:	eb e3       	ldi	r30, 0x3B	; 59
    2092:	f0 e0       	ldi	r31, 0x00	; 0
    2094:	80 81       	ld	r24, Z
    2096:	80 95       	com	r24
    2098:	8c 93       	st	X, r24
    209a:	20 c0       	rjmp	.+64     	; 0x20dc <DIO_vTogPortValue+0x68>
		}
		else if(Loc_u8PortID==PortB){
    209c:	89 81       	ldd	r24, Y+1	; 0x01
    209e:	81 30       	cpi	r24, 0x01	; 1
    20a0:	41 f4       	brne	.+16     	; 0x20b2 <DIO_vTogPortValue+0x3e>
			PORTB = ~PORTB;
    20a2:	a8 e3       	ldi	r26, 0x38	; 56
    20a4:	b0 e0       	ldi	r27, 0x00	; 0
    20a6:	e8 e3       	ldi	r30, 0x38	; 56
    20a8:	f0 e0       	ldi	r31, 0x00	; 0
    20aa:	80 81       	ld	r24, Z
    20ac:	80 95       	com	r24
    20ae:	8c 93       	st	X, r24
    20b0:	15 c0       	rjmp	.+42     	; 0x20dc <DIO_vTogPortValue+0x68>
		}
		else if(Loc_u8PortID==PortC){
    20b2:	89 81       	ldd	r24, Y+1	; 0x01
    20b4:	82 30       	cpi	r24, 0x02	; 2
    20b6:	41 f4       	brne	.+16     	; 0x20c8 <DIO_vTogPortValue+0x54>
			PORTC = ~PORTC;
    20b8:	a5 e3       	ldi	r26, 0x35	; 53
    20ba:	b0 e0       	ldi	r27, 0x00	; 0
    20bc:	e5 e3       	ldi	r30, 0x35	; 53
    20be:	f0 e0       	ldi	r31, 0x00	; 0
    20c0:	80 81       	ld	r24, Z
    20c2:	80 95       	com	r24
    20c4:	8c 93       	st	X, r24
    20c6:	0a c0       	rjmp	.+20     	; 0x20dc <DIO_vTogPortValue+0x68>
		}
		else if(Loc_u8PortID==PortD){
    20c8:	89 81       	ldd	r24, Y+1	; 0x01
    20ca:	83 30       	cpi	r24, 0x03	; 3
    20cc:	39 f4       	brne	.+14     	; 0x20dc <DIO_vTogPortValue+0x68>
			PORTD = ~PORTD;
    20ce:	a2 e3       	ldi	r26, 0x32	; 50
    20d0:	b0 e0       	ldi	r27, 0x00	; 0
    20d2:	e2 e3       	ldi	r30, 0x32	; 50
    20d4:	f0 e0       	ldi	r31, 0x00	; 0
    20d6:	80 81       	ld	r24, Z
    20d8:	80 95       	com	r24
    20da:	8c 93       	st	X, r24
		}
	}
	else{
		//do nothing
	}
}
    20dc:	0f 90       	pop	r0
    20de:	cf 91       	pop	r28
    20e0:	df 91       	pop	r29
    20e2:	08 95       	ret

000020e4 <DIO_vSetPinDirection>:
* \Parameters (in) : Loc_u8PortID   PIN PORT
* 					Loc_u8PinID		PIN wanted to change it's direction
* 					Loc_u8PinDirection  choose PIN direction (InPut,OutPut)
* \Parameters (out): None
*******************************************************************************/
void DIO_vSetPinDirection(u8 Loc_u8PortID, u8 Loc_u8PinID, u8 Loc_u8PinDirection){
    20e4:	df 93       	push	r29
    20e6:	cf 93       	push	r28
    20e8:	00 d0       	rcall	.+0      	; 0x20ea <DIO_vSetPinDirection+0x6>
    20ea:	0f 92       	push	r0
    20ec:	cd b7       	in	r28, 0x3d	; 61
    20ee:	de b7       	in	r29, 0x3e	; 62
    20f0:	89 83       	std	Y+1, r24	; 0x01
    20f2:	6a 83       	std	Y+2, r22	; 0x02
    20f4:	4b 83       	std	Y+3, r20	; 0x03
	if (Loc_u8PinDirection==Pin_OutPut){
    20f6:	8b 81       	ldd	r24, Y+3	; 0x03
    20f8:	81 30       	cpi	r24, 0x01	; 1
    20fa:	09 f0       	breq	.+2      	; 0x20fe <DIO_vSetPinDirection+0x1a>
    20fc:	75 c0       	rjmp	.+234    	; 0x21e8 <DIO_vSetPinDirection+0x104>

		if(Loc_u8PortID<=PortD){
    20fe:	89 81       	ldd	r24, Y+1	; 0x01
    2100:	84 30       	cpi	r24, 0x04	; 4
    2102:	08 f0       	brcs	.+2      	; 0x2106 <DIO_vSetPinDirection+0x22>
    2104:	ec c0       	rjmp	.+472    	; 0x22de <DIO_vSetPinDirection+0x1fa>
			if(Loc_u8PortID==PortA){
    2106:	89 81       	ldd	r24, Y+1	; 0x01
    2108:	88 23       	and	r24, r24
    210a:	c9 f4       	brne	.+50     	; 0x213e <DIO_vSetPinDirection+0x5a>
				DDRA = SET_BIT(DDRA, Loc_u8PinID);
    210c:	4a e3       	ldi	r20, 0x3A	; 58
    210e:	50 e0       	ldi	r21, 0x00	; 0
    2110:	aa e3       	ldi	r26, 0x3A	; 58
    2112:	b0 e0       	ldi	r27, 0x00	; 0
    2114:	ea e3       	ldi	r30, 0x3A	; 58
    2116:	f0 e0       	ldi	r31, 0x00	; 0
    2118:	80 81       	ld	r24, Z
    211a:	68 2f       	mov	r22, r24
    211c:	8a 81       	ldd	r24, Y+2	; 0x02
    211e:	28 2f       	mov	r18, r24
    2120:	30 e0       	ldi	r19, 0x00	; 0
    2122:	81 e0       	ldi	r24, 0x01	; 1
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	02 2e       	mov	r0, r18
    2128:	02 c0       	rjmp	.+4      	; 0x212e <DIO_vSetPinDirection+0x4a>
    212a:	88 0f       	add	r24, r24
    212c:	99 1f       	adc	r25, r25
    212e:	0a 94       	dec	r0
    2130:	e2 f7       	brpl	.-8      	; 0x212a <DIO_vSetPinDirection+0x46>
    2132:	86 2b       	or	r24, r22
    2134:	8c 93       	st	X, r24
    2136:	8c 91       	ld	r24, X
    2138:	fa 01       	movw	r30, r20
    213a:	80 83       	st	Z, r24
    213c:	d0 c0       	rjmp	.+416    	; 0x22de <DIO_vSetPinDirection+0x1fa>
			}
			else if(Loc_u8PortID==PortB){
    213e:	89 81       	ldd	r24, Y+1	; 0x01
    2140:	81 30       	cpi	r24, 0x01	; 1
    2142:	c9 f4       	brne	.+50     	; 0x2176 <DIO_vSetPinDirection+0x92>
				DDRB = SET_BIT(DDRB, Loc_u8PinID);
    2144:	47 e3       	ldi	r20, 0x37	; 55
    2146:	50 e0       	ldi	r21, 0x00	; 0
    2148:	a7 e3       	ldi	r26, 0x37	; 55
    214a:	b0 e0       	ldi	r27, 0x00	; 0
    214c:	e7 e3       	ldi	r30, 0x37	; 55
    214e:	f0 e0       	ldi	r31, 0x00	; 0
    2150:	80 81       	ld	r24, Z
    2152:	68 2f       	mov	r22, r24
    2154:	8a 81       	ldd	r24, Y+2	; 0x02
    2156:	28 2f       	mov	r18, r24
    2158:	30 e0       	ldi	r19, 0x00	; 0
    215a:	81 e0       	ldi	r24, 0x01	; 1
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	02 2e       	mov	r0, r18
    2160:	02 c0       	rjmp	.+4      	; 0x2166 <DIO_vSetPinDirection+0x82>
    2162:	88 0f       	add	r24, r24
    2164:	99 1f       	adc	r25, r25
    2166:	0a 94       	dec	r0
    2168:	e2 f7       	brpl	.-8      	; 0x2162 <DIO_vSetPinDirection+0x7e>
    216a:	86 2b       	or	r24, r22
    216c:	8c 93       	st	X, r24
    216e:	8c 91       	ld	r24, X
    2170:	fa 01       	movw	r30, r20
    2172:	80 83       	st	Z, r24
    2174:	b4 c0       	rjmp	.+360    	; 0x22de <DIO_vSetPinDirection+0x1fa>
			}
			else if(Loc_u8PortID==PortC){
    2176:	89 81       	ldd	r24, Y+1	; 0x01
    2178:	82 30       	cpi	r24, 0x02	; 2
    217a:	c9 f4       	brne	.+50     	; 0x21ae <DIO_vSetPinDirection+0xca>
				DDRC = SET_BIT(DDRC, Loc_u8PinID);
    217c:	44 e3       	ldi	r20, 0x34	; 52
    217e:	50 e0       	ldi	r21, 0x00	; 0
    2180:	a4 e3       	ldi	r26, 0x34	; 52
    2182:	b0 e0       	ldi	r27, 0x00	; 0
    2184:	e4 e3       	ldi	r30, 0x34	; 52
    2186:	f0 e0       	ldi	r31, 0x00	; 0
    2188:	80 81       	ld	r24, Z
    218a:	68 2f       	mov	r22, r24
    218c:	8a 81       	ldd	r24, Y+2	; 0x02
    218e:	28 2f       	mov	r18, r24
    2190:	30 e0       	ldi	r19, 0x00	; 0
    2192:	81 e0       	ldi	r24, 0x01	; 1
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	02 2e       	mov	r0, r18
    2198:	02 c0       	rjmp	.+4      	; 0x219e <DIO_vSetPinDirection+0xba>
    219a:	88 0f       	add	r24, r24
    219c:	99 1f       	adc	r25, r25
    219e:	0a 94       	dec	r0
    21a0:	e2 f7       	brpl	.-8      	; 0x219a <DIO_vSetPinDirection+0xb6>
    21a2:	86 2b       	or	r24, r22
    21a4:	8c 93       	st	X, r24
    21a6:	8c 91       	ld	r24, X
    21a8:	fa 01       	movw	r30, r20
    21aa:	80 83       	st	Z, r24
    21ac:	98 c0       	rjmp	.+304    	; 0x22de <DIO_vSetPinDirection+0x1fa>
			}
			else if(Loc_u8PortID==PortD){
    21ae:	89 81       	ldd	r24, Y+1	; 0x01
    21b0:	83 30       	cpi	r24, 0x03	; 3
    21b2:	09 f0       	breq	.+2      	; 0x21b6 <DIO_vSetPinDirection+0xd2>
    21b4:	94 c0       	rjmp	.+296    	; 0x22de <DIO_vSetPinDirection+0x1fa>
				DDRD = SET_BIT(DDRD, Loc_u8PinID);
    21b6:	41 e3       	ldi	r20, 0x31	; 49
    21b8:	50 e0       	ldi	r21, 0x00	; 0
    21ba:	a1 e3       	ldi	r26, 0x31	; 49
    21bc:	b0 e0       	ldi	r27, 0x00	; 0
    21be:	e1 e3       	ldi	r30, 0x31	; 49
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	80 81       	ld	r24, Z
    21c4:	68 2f       	mov	r22, r24
    21c6:	8a 81       	ldd	r24, Y+2	; 0x02
    21c8:	28 2f       	mov	r18, r24
    21ca:	30 e0       	ldi	r19, 0x00	; 0
    21cc:	81 e0       	ldi	r24, 0x01	; 1
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	02 2e       	mov	r0, r18
    21d2:	02 c0       	rjmp	.+4      	; 0x21d8 <DIO_vSetPinDirection+0xf4>
    21d4:	88 0f       	add	r24, r24
    21d6:	99 1f       	adc	r25, r25
    21d8:	0a 94       	dec	r0
    21da:	e2 f7       	brpl	.-8      	; 0x21d4 <DIO_vSetPinDirection+0xf0>
    21dc:	86 2b       	or	r24, r22
    21de:	8c 93       	st	X, r24
    21e0:	8c 91       	ld	r24, X
    21e2:	fa 01       	movw	r30, r20
    21e4:	80 83       	st	Z, r24
    21e6:	7b c0       	rjmp	.+246    	; 0x22de <DIO_vSetPinDirection+0x1fa>
		else{
			//do nothing
		}

	}
	else if(Loc_u8PinDirection==Pin_InPut){
    21e8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ea:	88 23       	and	r24, r24
    21ec:	09 f0       	breq	.+2      	; 0x21f0 <DIO_vSetPinDirection+0x10c>
    21ee:	77 c0       	rjmp	.+238    	; 0x22de <DIO_vSetPinDirection+0x1fa>

		if(Loc_u8PortID<=PortD){
    21f0:	89 81       	ldd	r24, Y+1	; 0x01
    21f2:	84 30       	cpi	r24, 0x04	; 4
    21f4:	08 f0       	brcs	.+2      	; 0x21f8 <DIO_vSetPinDirection+0x114>
    21f6:	73 c0       	rjmp	.+230    	; 0x22de <DIO_vSetPinDirection+0x1fa>
			if(Loc_u8PortID==PortA){
    21f8:	89 81       	ldd	r24, Y+1	; 0x01
    21fa:	88 23       	and	r24, r24
    21fc:	d1 f4       	brne	.+52     	; 0x2232 <DIO_vSetPinDirection+0x14e>
				DDRA = CLR_BIT(DDRA, Loc_u8PinID);
    21fe:	4a e3       	ldi	r20, 0x3A	; 58
    2200:	50 e0       	ldi	r21, 0x00	; 0
    2202:	aa e3       	ldi	r26, 0x3A	; 58
    2204:	b0 e0       	ldi	r27, 0x00	; 0
    2206:	ea e3       	ldi	r30, 0x3A	; 58
    2208:	f0 e0       	ldi	r31, 0x00	; 0
    220a:	80 81       	ld	r24, Z
    220c:	68 2f       	mov	r22, r24
    220e:	8a 81       	ldd	r24, Y+2	; 0x02
    2210:	28 2f       	mov	r18, r24
    2212:	30 e0       	ldi	r19, 0x00	; 0
    2214:	81 e0       	ldi	r24, 0x01	; 1
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	02 2e       	mov	r0, r18
    221a:	02 c0       	rjmp	.+4      	; 0x2220 <DIO_vSetPinDirection+0x13c>
    221c:	88 0f       	add	r24, r24
    221e:	99 1f       	adc	r25, r25
    2220:	0a 94       	dec	r0
    2222:	e2 f7       	brpl	.-8      	; 0x221c <DIO_vSetPinDirection+0x138>
    2224:	80 95       	com	r24
    2226:	86 23       	and	r24, r22
    2228:	8c 93       	st	X, r24
    222a:	8c 91       	ld	r24, X
    222c:	fa 01       	movw	r30, r20
    222e:	80 83       	st	Z, r24
    2230:	56 c0       	rjmp	.+172    	; 0x22de <DIO_vSetPinDirection+0x1fa>
			}
			else if(Loc_u8PortID==PortB){
    2232:	89 81       	ldd	r24, Y+1	; 0x01
    2234:	81 30       	cpi	r24, 0x01	; 1
    2236:	d1 f4       	brne	.+52     	; 0x226c <DIO_vSetPinDirection+0x188>
				DDRB = CLR_BIT(DDRB, Loc_u8PinID);
    2238:	47 e3       	ldi	r20, 0x37	; 55
    223a:	50 e0       	ldi	r21, 0x00	; 0
    223c:	a7 e3       	ldi	r26, 0x37	; 55
    223e:	b0 e0       	ldi	r27, 0x00	; 0
    2240:	e7 e3       	ldi	r30, 0x37	; 55
    2242:	f0 e0       	ldi	r31, 0x00	; 0
    2244:	80 81       	ld	r24, Z
    2246:	68 2f       	mov	r22, r24
    2248:	8a 81       	ldd	r24, Y+2	; 0x02
    224a:	28 2f       	mov	r18, r24
    224c:	30 e0       	ldi	r19, 0x00	; 0
    224e:	81 e0       	ldi	r24, 0x01	; 1
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	02 2e       	mov	r0, r18
    2254:	02 c0       	rjmp	.+4      	; 0x225a <DIO_vSetPinDirection+0x176>
    2256:	88 0f       	add	r24, r24
    2258:	99 1f       	adc	r25, r25
    225a:	0a 94       	dec	r0
    225c:	e2 f7       	brpl	.-8      	; 0x2256 <DIO_vSetPinDirection+0x172>
    225e:	80 95       	com	r24
    2260:	86 23       	and	r24, r22
    2262:	8c 93       	st	X, r24
    2264:	8c 91       	ld	r24, X
    2266:	fa 01       	movw	r30, r20
    2268:	80 83       	st	Z, r24
    226a:	39 c0       	rjmp	.+114    	; 0x22de <DIO_vSetPinDirection+0x1fa>
			}
			else if(Loc_u8PortID==PortC){
    226c:	89 81       	ldd	r24, Y+1	; 0x01
    226e:	82 30       	cpi	r24, 0x02	; 2
    2270:	d1 f4       	brne	.+52     	; 0x22a6 <DIO_vSetPinDirection+0x1c2>
				DDRC = CLR_BIT(DDRC, Loc_u8PinID);
    2272:	44 e3       	ldi	r20, 0x34	; 52
    2274:	50 e0       	ldi	r21, 0x00	; 0
    2276:	a4 e3       	ldi	r26, 0x34	; 52
    2278:	b0 e0       	ldi	r27, 0x00	; 0
    227a:	e4 e3       	ldi	r30, 0x34	; 52
    227c:	f0 e0       	ldi	r31, 0x00	; 0
    227e:	80 81       	ld	r24, Z
    2280:	68 2f       	mov	r22, r24
    2282:	8a 81       	ldd	r24, Y+2	; 0x02
    2284:	28 2f       	mov	r18, r24
    2286:	30 e0       	ldi	r19, 0x00	; 0
    2288:	81 e0       	ldi	r24, 0x01	; 1
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	02 2e       	mov	r0, r18
    228e:	02 c0       	rjmp	.+4      	; 0x2294 <DIO_vSetPinDirection+0x1b0>
    2290:	88 0f       	add	r24, r24
    2292:	99 1f       	adc	r25, r25
    2294:	0a 94       	dec	r0
    2296:	e2 f7       	brpl	.-8      	; 0x2290 <DIO_vSetPinDirection+0x1ac>
    2298:	80 95       	com	r24
    229a:	86 23       	and	r24, r22
    229c:	8c 93       	st	X, r24
    229e:	8c 91       	ld	r24, X
    22a0:	fa 01       	movw	r30, r20
    22a2:	80 83       	st	Z, r24
    22a4:	1c c0       	rjmp	.+56     	; 0x22de <DIO_vSetPinDirection+0x1fa>
			}
			else if(Loc_u8PortID==PortD){
    22a6:	89 81       	ldd	r24, Y+1	; 0x01
    22a8:	83 30       	cpi	r24, 0x03	; 3
    22aa:	c9 f4       	brne	.+50     	; 0x22de <DIO_vSetPinDirection+0x1fa>
				DDRD = CLR_BIT(DDRD, Loc_u8PinID);
    22ac:	41 e3       	ldi	r20, 0x31	; 49
    22ae:	50 e0       	ldi	r21, 0x00	; 0
    22b0:	a1 e3       	ldi	r26, 0x31	; 49
    22b2:	b0 e0       	ldi	r27, 0x00	; 0
    22b4:	e1 e3       	ldi	r30, 0x31	; 49
    22b6:	f0 e0       	ldi	r31, 0x00	; 0
    22b8:	80 81       	ld	r24, Z
    22ba:	68 2f       	mov	r22, r24
    22bc:	8a 81       	ldd	r24, Y+2	; 0x02
    22be:	28 2f       	mov	r18, r24
    22c0:	30 e0       	ldi	r19, 0x00	; 0
    22c2:	81 e0       	ldi	r24, 0x01	; 1
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	02 2e       	mov	r0, r18
    22c8:	02 c0       	rjmp	.+4      	; 0x22ce <DIO_vSetPinDirection+0x1ea>
    22ca:	88 0f       	add	r24, r24
    22cc:	99 1f       	adc	r25, r25
    22ce:	0a 94       	dec	r0
    22d0:	e2 f7       	brpl	.-8      	; 0x22ca <DIO_vSetPinDirection+0x1e6>
    22d2:	80 95       	com	r24
    22d4:	86 23       	and	r24, r22
    22d6:	8c 93       	st	X, r24
    22d8:	8c 91       	ld	r24, X
    22da:	fa 01       	movw	r30, r20
    22dc:	80 83       	st	Z, r24
	}
	else{
		//do nothing
	}

}
    22de:	0f 90       	pop	r0
    22e0:	0f 90       	pop	r0
    22e2:	0f 90       	pop	r0
    22e4:	cf 91       	pop	r28
    22e6:	df 91       	pop	r29
    22e8:	08 95       	ret

000022ea <DIO_vSetPinValue>:
* \Parameters (in) : Loc_u8PortID   PIN PORT
* 					Loc_u8PinID		PIN wanted to change it's value
* 					Loc_u8PinDirection  choose PIN value (Pin_High,Pin_Low)
* \Parameters (out): None
*******************************************************************************/
void DIO_vSetPinValue(u8 Loc_u8PortID, u8 Loc_u8PinID, u8 Loc_u8PinValue){
    22ea:	df 93       	push	r29
    22ec:	cf 93       	push	r28
    22ee:	00 d0       	rcall	.+0      	; 0x22f0 <DIO_vSetPinValue+0x6>
    22f0:	0f 92       	push	r0
    22f2:	cd b7       	in	r28, 0x3d	; 61
    22f4:	de b7       	in	r29, 0x3e	; 62
    22f6:	89 83       	std	Y+1, r24	; 0x01
    22f8:	6a 83       	std	Y+2, r22	; 0x02
    22fa:	4b 83       	std	Y+3, r20	; 0x03
	if(Loc_u8PinValue==Pin_High){
    22fc:	8b 81       	ldd	r24, Y+3	; 0x03
    22fe:	81 30       	cpi	r24, 0x01	; 1
    2300:	09 f0       	breq	.+2      	; 0x2304 <DIO_vSetPinValue+0x1a>
    2302:	61 c0       	rjmp	.+194    	; 0x23c6 <DIO_vSetPinValue+0xdc>
		if(Loc_u8PortID<=PortD){
    2304:	89 81       	ldd	r24, Y+1	; 0x01
    2306:	84 30       	cpi	r24, 0x04	; 4
    2308:	08 f0       	brcs	.+2      	; 0x230c <DIO_vSetPinValue+0x22>
    230a:	c4 c0       	rjmp	.+392    	; 0x2494 <DIO_vSetPinValue+0x1aa>
			if(Loc_u8PortID==PortA){
    230c:	89 81       	ldd	r24, Y+1	; 0x01
    230e:	88 23       	and	r24, r24
    2310:	a1 f4       	brne	.+40     	; 0x233a <DIO_vSetPinValue+0x50>
				SET_BIT(PORTA, Loc_u8PinID);
    2312:	ab e3       	ldi	r26, 0x3B	; 59
    2314:	b0 e0       	ldi	r27, 0x00	; 0
    2316:	eb e3       	ldi	r30, 0x3B	; 59
    2318:	f0 e0       	ldi	r31, 0x00	; 0
    231a:	80 81       	ld	r24, Z
    231c:	48 2f       	mov	r20, r24
    231e:	8a 81       	ldd	r24, Y+2	; 0x02
    2320:	28 2f       	mov	r18, r24
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	81 e0       	ldi	r24, 0x01	; 1
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	02 2e       	mov	r0, r18
    232a:	02 c0       	rjmp	.+4      	; 0x2330 <DIO_vSetPinValue+0x46>
    232c:	88 0f       	add	r24, r24
    232e:	99 1f       	adc	r25, r25
    2330:	0a 94       	dec	r0
    2332:	e2 f7       	brpl	.-8      	; 0x232c <DIO_vSetPinValue+0x42>
    2334:	84 2b       	or	r24, r20
    2336:	8c 93       	st	X, r24
    2338:	ad c0       	rjmp	.+346    	; 0x2494 <DIO_vSetPinValue+0x1aa>
			}
			else if(Loc_u8PortID==PortB){
    233a:	89 81       	ldd	r24, Y+1	; 0x01
    233c:	81 30       	cpi	r24, 0x01	; 1
    233e:	a1 f4       	brne	.+40     	; 0x2368 <DIO_vSetPinValue+0x7e>
				SET_BIT(PORTB, Loc_u8PinID);
    2340:	a8 e3       	ldi	r26, 0x38	; 56
    2342:	b0 e0       	ldi	r27, 0x00	; 0
    2344:	e8 e3       	ldi	r30, 0x38	; 56
    2346:	f0 e0       	ldi	r31, 0x00	; 0
    2348:	80 81       	ld	r24, Z
    234a:	48 2f       	mov	r20, r24
    234c:	8a 81       	ldd	r24, Y+2	; 0x02
    234e:	28 2f       	mov	r18, r24
    2350:	30 e0       	ldi	r19, 0x00	; 0
    2352:	81 e0       	ldi	r24, 0x01	; 1
    2354:	90 e0       	ldi	r25, 0x00	; 0
    2356:	02 2e       	mov	r0, r18
    2358:	02 c0       	rjmp	.+4      	; 0x235e <DIO_vSetPinValue+0x74>
    235a:	88 0f       	add	r24, r24
    235c:	99 1f       	adc	r25, r25
    235e:	0a 94       	dec	r0
    2360:	e2 f7       	brpl	.-8      	; 0x235a <DIO_vSetPinValue+0x70>
    2362:	84 2b       	or	r24, r20
    2364:	8c 93       	st	X, r24
    2366:	96 c0       	rjmp	.+300    	; 0x2494 <DIO_vSetPinValue+0x1aa>
			}
			else if(Loc_u8PortID==PortC){
    2368:	89 81       	ldd	r24, Y+1	; 0x01
    236a:	82 30       	cpi	r24, 0x02	; 2
    236c:	a1 f4       	brne	.+40     	; 0x2396 <DIO_vSetPinValue+0xac>
				SET_BIT(PORTC, Loc_u8PinID);
    236e:	a5 e3       	ldi	r26, 0x35	; 53
    2370:	b0 e0       	ldi	r27, 0x00	; 0
    2372:	e5 e3       	ldi	r30, 0x35	; 53
    2374:	f0 e0       	ldi	r31, 0x00	; 0
    2376:	80 81       	ld	r24, Z
    2378:	48 2f       	mov	r20, r24
    237a:	8a 81       	ldd	r24, Y+2	; 0x02
    237c:	28 2f       	mov	r18, r24
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	81 e0       	ldi	r24, 0x01	; 1
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	02 2e       	mov	r0, r18
    2386:	02 c0       	rjmp	.+4      	; 0x238c <DIO_vSetPinValue+0xa2>
    2388:	88 0f       	add	r24, r24
    238a:	99 1f       	adc	r25, r25
    238c:	0a 94       	dec	r0
    238e:	e2 f7       	brpl	.-8      	; 0x2388 <DIO_vSetPinValue+0x9e>
    2390:	84 2b       	or	r24, r20
    2392:	8c 93       	st	X, r24
    2394:	7f c0       	rjmp	.+254    	; 0x2494 <DIO_vSetPinValue+0x1aa>
			}
			else if(Loc_u8PortID==PortD){
    2396:	89 81       	ldd	r24, Y+1	; 0x01
    2398:	83 30       	cpi	r24, 0x03	; 3
    239a:	09 f0       	breq	.+2      	; 0x239e <DIO_vSetPinValue+0xb4>
    239c:	7b c0       	rjmp	.+246    	; 0x2494 <DIO_vSetPinValue+0x1aa>
				SET_BIT(PORTD, Loc_u8PinID);
    239e:	a2 e3       	ldi	r26, 0x32	; 50
    23a0:	b0 e0       	ldi	r27, 0x00	; 0
    23a2:	e2 e3       	ldi	r30, 0x32	; 50
    23a4:	f0 e0       	ldi	r31, 0x00	; 0
    23a6:	80 81       	ld	r24, Z
    23a8:	48 2f       	mov	r20, r24
    23aa:	8a 81       	ldd	r24, Y+2	; 0x02
    23ac:	28 2f       	mov	r18, r24
    23ae:	30 e0       	ldi	r19, 0x00	; 0
    23b0:	81 e0       	ldi	r24, 0x01	; 1
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	02 2e       	mov	r0, r18
    23b6:	02 c0       	rjmp	.+4      	; 0x23bc <DIO_vSetPinValue+0xd2>
    23b8:	88 0f       	add	r24, r24
    23ba:	99 1f       	adc	r25, r25
    23bc:	0a 94       	dec	r0
    23be:	e2 f7       	brpl	.-8      	; 0x23b8 <DIO_vSetPinValue+0xce>
    23c0:	84 2b       	or	r24, r20
    23c2:	8c 93       	st	X, r24
    23c4:	67 c0       	rjmp	.+206    	; 0x2494 <DIO_vSetPinValue+0x1aa>
		}
		else{
			//do nothing
		}
	}
	else if(Loc_u8PinValue==Pin_Low){
    23c6:	8b 81       	ldd	r24, Y+3	; 0x03
    23c8:	88 23       	and	r24, r24
    23ca:	09 f0       	breq	.+2      	; 0x23ce <DIO_vSetPinValue+0xe4>
    23cc:	63 c0       	rjmp	.+198    	; 0x2494 <DIO_vSetPinValue+0x1aa>

		if(Loc_u8PortID<=PortD){
    23ce:	89 81       	ldd	r24, Y+1	; 0x01
    23d0:	84 30       	cpi	r24, 0x04	; 4
    23d2:	08 f0       	brcs	.+2      	; 0x23d6 <DIO_vSetPinValue+0xec>
    23d4:	5f c0       	rjmp	.+190    	; 0x2494 <DIO_vSetPinValue+0x1aa>
			if(Loc_u8PortID==PortA){
    23d6:	89 81       	ldd	r24, Y+1	; 0x01
    23d8:	88 23       	and	r24, r24
    23da:	a9 f4       	brne	.+42     	; 0x2406 <DIO_vSetPinValue+0x11c>
				CLR_BIT(PORTA, Loc_u8PinID);
    23dc:	ab e3       	ldi	r26, 0x3B	; 59
    23de:	b0 e0       	ldi	r27, 0x00	; 0
    23e0:	eb e3       	ldi	r30, 0x3B	; 59
    23e2:	f0 e0       	ldi	r31, 0x00	; 0
    23e4:	80 81       	ld	r24, Z
    23e6:	48 2f       	mov	r20, r24
    23e8:	8a 81       	ldd	r24, Y+2	; 0x02
    23ea:	28 2f       	mov	r18, r24
    23ec:	30 e0       	ldi	r19, 0x00	; 0
    23ee:	81 e0       	ldi	r24, 0x01	; 1
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	02 2e       	mov	r0, r18
    23f4:	02 c0       	rjmp	.+4      	; 0x23fa <DIO_vSetPinValue+0x110>
    23f6:	88 0f       	add	r24, r24
    23f8:	99 1f       	adc	r25, r25
    23fa:	0a 94       	dec	r0
    23fc:	e2 f7       	brpl	.-8      	; 0x23f6 <DIO_vSetPinValue+0x10c>
    23fe:	80 95       	com	r24
    2400:	84 23       	and	r24, r20
    2402:	8c 93       	st	X, r24
    2404:	47 c0       	rjmp	.+142    	; 0x2494 <DIO_vSetPinValue+0x1aa>
			}
			else if(Loc_u8PortID==PortB){
    2406:	89 81       	ldd	r24, Y+1	; 0x01
    2408:	81 30       	cpi	r24, 0x01	; 1
    240a:	a9 f4       	brne	.+42     	; 0x2436 <DIO_vSetPinValue+0x14c>
				CLR_BIT(PORTB, Loc_u8PinID);
    240c:	a8 e3       	ldi	r26, 0x38	; 56
    240e:	b0 e0       	ldi	r27, 0x00	; 0
    2410:	e8 e3       	ldi	r30, 0x38	; 56
    2412:	f0 e0       	ldi	r31, 0x00	; 0
    2414:	80 81       	ld	r24, Z
    2416:	48 2f       	mov	r20, r24
    2418:	8a 81       	ldd	r24, Y+2	; 0x02
    241a:	28 2f       	mov	r18, r24
    241c:	30 e0       	ldi	r19, 0x00	; 0
    241e:	81 e0       	ldi	r24, 0x01	; 1
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	02 2e       	mov	r0, r18
    2424:	02 c0       	rjmp	.+4      	; 0x242a <DIO_vSetPinValue+0x140>
    2426:	88 0f       	add	r24, r24
    2428:	99 1f       	adc	r25, r25
    242a:	0a 94       	dec	r0
    242c:	e2 f7       	brpl	.-8      	; 0x2426 <DIO_vSetPinValue+0x13c>
    242e:	80 95       	com	r24
    2430:	84 23       	and	r24, r20
    2432:	8c 93       	st	X, r24
    2434:	2f c0       	rjmp	.+94     	; 0x2494 <DIO_vSetPinValue+0x1aa>
			}
			else if(Loc_u8PortID==PortC){
    2436:	89 81       	ldd	r24, Y+1	; 0x01
    2438:	82 30       	cpi	r24, 0x02	; 2
    243a:	a9 f4       	brne	.+42     	; 0x2466 <DIO_vSetPinValue+0x17c>
				CLR_BIT(PORTC, Loc_u8PinID);
    243c:	a5 e3       	ldi	r26, 0x35	; 53
    243e:	b0 e0       	ldi	r27, 0x00	; 0
    2440:	e5 e3       	ldi	r30, 0x35	; 53
    2442:	f0 e0       	ldi	r31, 0x00	; 0
    2444:	80 81       	ld	r24, Z
    2446:	48 2f       	mov	r20, r24
    2448:	8a 81       	ldd	r24, Y+2	; 0x02
    244a:	28 2f       	mov	r18, r24
    244c:	30 e0       	ldi	r19, 0x00	; 0
    244e:	81 e0       	ldi	r24, 0x01	; 1
    2450:	90 e0       	ldi	r25, 0x00	; 0
    2452:	02 2e       	mov	r0, r18
    2454:	02 c0       	rjmp	.+4      	; 0x245a <DIO_vSetPinValue+0x170>
    2456:	88 0f       	add	r24, r24
    2458:	99 1f       	adc	r25, r25
    245a:	0a 94       	dec	r0
    245c:	e2 f7       	brpl	.-8      	; 0x2456 <DIO_vSetPinValue+0x16c>
    245e:	80 95       	com	r24
    2460:	84 23       	and	r24, r20
    2462:	8c 93       	st	X, r24
    2464:	17 c0       	rjmp	.+46     	; 0x2494 <DIO_vSetPinValue+0x1aa>
			}
			else if(Loc_u8PortID==PortD){
    2466:	89 81       	ldd	r24, Y+1	; 0x01
    2468:	83 30       	cpi	r24, 0x03	; 3
    246a:	a1 f4       	brne	.+40     	; 0x2494 <DIO_vSetPinValue+0x1aa>
				CLR_BIT(PORTD, Loc_u8PinID);
    246c:	a2 e3       	ldi	r26, 0x32	; 50
    246e:	b0 e0       	ldi	r27, 0x00	; 0
    2470:	e2 e3       	ldi	r30, 0x32	; 50
    2472:	f0 e0       	ldi	r31, 0x00	; 0
    2474:	80 81       	ld	r24, Z
    2476:	48 2f       	mov	r20, r24
    2478:	8a 81       	ldd	r24, Y+2	; 0x02
    247a:	28 2f       	mov	r18, r24
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	81 e0       	ldi	r24, 0x01	; 1
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	02 2e       	mov	r0, r18
    2484:	02 c0       	rjmp	.+4      	; 0x248a <DIO_vSetPinValue+0x1a0>
    2486:	88 0f       	add	r24, r24
    2488:	99 1f       	adc	r25, r25
    248a:	0a 94       	dec	r0
    248c:	e2 f7       	brpl	.-8      	; 0x2486 <DIO_vSetPinValue+0x19c>
    248e:	80 95       	com	r24
    2490:	84 23       	and	r24, r20
    2492:	8c 93       	st	X, r24
		}
		else{
			//do nothing
		}
	}
}
    2494:	0f 90       	pop	r0
    2496:	0f 90       	pop	r0
    2498:	0f 90       	pop	r0
    249a:	cf 91       	pop	r28
    249c:	df 91       	pop	r29
    249e:	08 95       	ret

000024a0 <DIO_u8PGetPinValue>:
* \Parameters (in) : Loc_u8PortID   PIN PORT
* 					Loc_u8PinID		PIN wanted to read it's value
* \Parameters (out): PINx  value(0,1)
*  \Return value:   : unsigned char
*******************************************************************************/
u8 DIO_u8PGetPinValue(u8 Loc_u8PortID, u8 Loc_u8PinID){
    24a0:	df 93       	push	r29
    24a2:	cf 93       	push	r28
    24a4:	00 d0       	rcall	.+0      	; 0x24a6 <DIO_u8PGetPinValue+0x6>
    24a6:	0f 92       	push	r0
    24a8:	cd b7       	in	r28, 0x3d	; 61
    24aa:	de b7       	in	r29, 0x3e	; 62
    24ac:	89 83       	std	Y+1, r24	; 0x01
    24ae:	6a 83       	std	Y+2, r22	; 0x02
	if(Loc_u8PortID<=PortD){
    24b0:	89 81       	ldd	r24, Y+1	; 0x01
    24b2:	84 30       	cpi	r24, 0x04	; 4
    24b4:	08 f0       	brcs	.+2      	; 0x24b8 <DIO_u8PGetPinValue+0x18>
    24b6:	58 c0       	rjmp	.+176    	; 0x2568 <DIO_u8PGetPinValue+0xc8>
		if(Loc_u8PortID==PortA){
    24b8:	89 81       	ldd	r24, Y+1	; 0x01
    24ba:	88 23       	and	r24, r24
    24bc:	99 f4       	brne	.+38     	; 0x24e4 <DIO_u8PGetPinValue+0x44>
			return GET_BIT(PINA, Loc_u8PinID);
    24be:	e9 e3       	ldi	r30, 0x39	; 57
    24c0:	f0 e0       	ldi	r31, 0x00	; 0
    24c2:	80 81       	ld	r24, Z
    24c4:	28 2f       	mov	r18, r24
    24c6:	30 e0       	ldi	r19, 0x00	; 0
    24c8:	8a 81       	ldd	r24, Y+2	; 0x02
    24ca:	88 2f       	mov	r24, r24
    24cc:	90 e0       	ldi	r25, 0x00	; 0
    24ce:	a9 01       	movw	r20, r18
    24d0:	02 c0       	rjmp	.+4      	; 0x24d6 <DIO_u8PGetPinValue+0x36>
    24d2:	55 95       	asr	r21
    24d4:	47 95       	ror	r20
    24d6:	8a 95       	dec	r24
    24d8:	e2 f7       	brpl	.-8      	; 0x24d2 <DIO_u8PGetPinValue+0x32>
    24da:	ca 01       	movw	r24, r20
    24dc:	58 2f       	mov	r21, r24
    24de:	51 70       	andi	r21, 0x01	; 1
    24e0:	5b 83       	std	Y+3, r21	; 0x03
    24e2:	44 c0       	rjmp	.+136    	; 0x256c <DIO_u8PGetPinValue+0xcc>
		}
		else if(Loc_u8PortID==PortB){
    24e4:	89 81       	ldd	r24, Y+1	; 0x01
    24e6:	81 30       	cpi	r24, 0x01	; 1
    24e8:	99 f4       	brne	.+38     	; 0x2510 <DIO_u8PGetPinValue+0x70>
			return GET_BIT(PINB, Loc_u8PinID);
    24ea:	e6 e3       	ldi	r30, 0x36	; 54
    24ec:	f0 e0       	ldi	r31, 0x00	; 0
    24ee:	80 81       	ld	r24, Z
    24f0:	28 2f       	mov	r18, r24
    24f2:	30 e0       	ldi	r19, 0x00	; 0
    24f4:	8a 81       	ldd	r24, Y+2	; 0x02
    24f6:	88 2f       	mov	r24, r24
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	a9 01       	movw	r20, r18
    24fc:	02 c0       	rjmp	.+4      	; 0x2502 <DIO_u8PGetPinValue+0x62>
    24fe:	55 95       	asr	r21
    2500:	47 95       	ror	r20
    2502:	8a 95       	dec	r24
    2504:	e2 f7       	brpl	.-8      	; 0x24fe <DIO_u8PGetPinValue+0x5e>
    2506:	ca 01       	movw	r24, r20
    2508:	58 2f       	mov	r21, r24
    250a:	51 70       	andi	r21, 0x01	; 1
    250c:	5b 83       	std	Y+3, r21	; 0x03
    250e:	2e c0       	rjmp	.+92     	; 0x256c <DIO_u8PGetPinValue+0xcc>
		}
		else if(Loc_u8PortID==PortC){
    2510:	89 81       	ldd	r24, Y+1	; 0x01
    2512:	82 30       	cpi	r24, 0x02	; 2
    2514:	99 f4       	brne	.+38     	; 0x253c <DIO_u8PGetPinValue+0x9c>
			return GET_BIT(PINC, Loc_u8PinID);
    2516:	e3 e3       	ldi	r30, 0x33	; 51
    2518:	f0 e0       	ldi	r31, 0x00	; 0
    251a:	80 81       	ld	r24, Z
    251c:	28 2f       	mov	r18, r24
    251e:	30 e0       	ldi	r19, 0x00	; 0
    2520:	8a 81       	ldd	r24, Y+2	; 0x02
    2522:	88 2f       	mov	r24, r24
    2524:	90 e0       	ldi	r25, 0x00	; 0
    2526:	a9 01       	movw	r20, r18
    2528:	02 c0       	rjmp	.+4      	; 0x252e <DIO_u8PGetPinValue+0x8e>
    252a:	55 95       	asr	r21
    252c:	47 95       	ror	r20
    252e:	8a 95       	dec	r24
    2530:	e2 f7       	brpl	.-8      	; 0x252a <DIO_u8PGetPinValue+0x8a>
    2532:	ca 01       	movw	r24, r20
    2534:	58 2f       	mov	r21, r24
    2536:	51 70       	andi	r21, 0x01	; 1
    2538:	5b 83       	std	Y+3, r21	; 0x03
    253a:	18 c0       	rjmp	.+48     	; 0x256c <DIO_u8PGetPinValue+0xcc>
		}
		else if(Loc_u8PortID==PortD){
    253c:	89 81       	ldd	r24, Y+1	; 0x01
    253e:	83 30       	cpi	r24, 0x03	; 3
    2540:	99 f4       	brne	.+38     	; 0x2568 <DIO_u8PGetPinValue+0xc8>
			return GET_BIT(PIND, Loc_u8PinID);
    2542:	e0 e3       	ldi	r30, 0x30	; 48
    2544:	f0 e0       	ldi	r31, 0x00	; 0
    2546:	80 81       	ld	r24, Z
    2548:	28 2f       	mov	r18, r24
    254a:	30 e0       	ldi	r19, 0x00	; 0
    254c:	8a 81       	ldd	r24, Y+2	; 0x02
    254e:	88 2f       	mov	r24, r24
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	a9 01       	movw	r20, r18
    2554:	02 c0       	rjmp	.+4      	; 0x255a <DIO_u8PGetPinValue+0xba>
    2556:	55 95       	asr	r21
    2558:	47 95       	ror	r20
    255a:	8a 95       	dec	r24
    255c:	e2 f7       	brpl	.-8      	; 0x2556 <DIO_u8PGetPinValue+0xb6>
    255e:	ca 01       	movw	r24, r20
    2560:	58 2f       	mov	r21, r24
    2562:	51 70       	andi	r21, 0x01	; 1
    2564:	5b 83       	std	Y+3, r21	; 0x03
    2566:	02 c0       	rjmp	.+4      	; 0x256c <DIO_u8PGetPinValue+0xcc>
		}
	}
	else{
		//do nothing
	}
	return 0xff;
    2568:	8f ef       	ldi	r24, 0xFF	; 255
    256a:	8b 83       	std	Y+3, r24	; 0x03
    256c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    256e:	0f 90       	pop	r0
    2570:	0f 90       	pop	r0
    2572:	0f 90       	pop	r0
    2574:	cf 91       	pop	r28
    2576:	df 91       	pop	r29
    2578:	08 95       	ret

0000257a <DIO_vTogPinValue>:
*
* \Parameters (in) : Loc_u8PortID   PIN PORT
* 					Loc_u8PinID		PIN wanted to Toggle it's value
* \Parameters (out): None
*******************************************************************************/
void DIO_vTogPinValue(u8 Loc_u8PortID, u8 Loc_u8PinID){
    257a:	df 93       	push	r29
    257c:	cf 93       	push	r28
    257e:	00 d0       	rcall	.+0      	; 0x2580 <DIO_vTogPinValue+0x6>
    2580:	cd b7       	in	r28, 0x3d	; 61
    2582:	de b7       	in	r29, 0x3e	; 62
    2584:	89 83       	std	Y+1, r24	; 0x01
    2586:	6a 83       	std	Y+2, r22	; 0x02
	if(Loc_u8PortID<=PortD){
    2588:	89 81       	ldd	r24, Y+1	; 0x01
    258a:	84 30       	cpi	r24, 0x04	; 4
    258c:	08 f0       	brcs	.+2      	; 0x2590 <DIO_vTogPinValue+0x16>
    258e:	5b c0       	rjmp	.+182    	; 0x2646 <DIO_vTogPinValue+0xcc>
		if(Loc_u8PortID==PortA){
    2590:	89 81       	ldd	r24, Y+1	; 0x01
    2592:	88 23       	and	r24, r24
    2594:	a1 f4       	brne	.+40     	; 0x25be <DIO_vTogPinValue+0x44>
			TOG_BIT(PORTA, Loc_u8PinID);
    2596:	ab e3       	ldi	r26, 0x3B	; 59
    2598:	b0 e0       	ldi	r27, 0x00	; 0
    259a:	eb e3       	ldi	r30, 0x3B	; 59
    259c:	f0 e0       	ldi	r31, 0x00	; 0
    259e:	80 81       	ld	r24, Z
    25a0:	48 2f       	mov	r20, r24
    25a2:	8a 81       	ldd	r24, Y+2	; 0x02
    25a4:	28 2f       	mov	r18, r24
    25a6:	30 e0       	ldi	r19, 0x00	; 0
    25a8:	81 e0       	ldi	r24, 0x01	; 1
    25aa:	90 e0       	ldi	r25, 0x00	; 0
    25ac:	02 2e       	mov	r0, r18
    25ae:	02 c0       	rjmp	.+4      	; 0x25b4 <DIO_vTogPinValue+0x3a>
    25b0:	88 0f       	add	r24, r24
    25b2:	99 1f       	adc	r25, r25
    25b4:	0a 94       	dec	r0
    25b6:	e2 f7       	brpl	.-8      	; 0x25b0 <DIO_vTogPinValue+0x36>
    25b8:	84 27       	eor	r24, r20
    25ba:	8c 93       	st	X, r24
    25bc:	44 c0       	rjmp	.+136    	; 0x2646 <DIO_vTogPinValue+0xcc>
		}
		else if(Loc_u8PortID==PortB){
    25be:	89 81       	ldd	r24, Y+1	; 0x01
    25c0:	81 30       	cpi	r24, 0x01	; 1
    25c2:	a1 f4       	brne	.+40     	; 0x25ec <DIO_vTogPinValue+0x72>
			TOG_BIT(PORTB, Loc_u8PinID);
    25c4:	a8 e3       	ldi	r26, 0x38	; 56
    25c6:	b0 e0       	ldi	r27, 0x00	; 0
    25c8:	e8 e3       	ldi	r30, 0x38	; 56
    25ca:	f0 e0       	ldi	r31, 0x00	; 0
    25cc:	80 81       	ld	r24, Z
    25ce:	48 2f       	mov	r20, r24
    25d0:	8a 81       	ldd	r24, Y+2	; 0x02
    25d2:	28 2f       	mov	r18, r24
    25d4:	30 e0       	ldi	r19, 0x00	; 0
    25d6:	81 e0       	ldi	r24, 0x01	; 1
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	02 2e       	mov	r0, r18
    25dc:	02 c0       	rjmp	.+4      	; 0x25e2 <DIO_vTogPinValue+0x68>
    25de:	88 0f       	add	r24, r24
    25e0:	99 1f       	adc	r25, r25
    25e2:	0a 94       	dec	r0
    25e4:	e2 f7       	brpl	.-8      	; 0x25de <DIO_vTogPinValue+0x64>
    25e6:	84 27       	eor	r24, r20
    25e8:	8c 93       	st	X, r24
    25ea:	2d c0       	rjmp	.+90     	; 0x2646 <DIO_vTogPinValue+0xcc>
		}
		else if(Loc_u8PortID==PortC){
    25ec:	89 81       	ldd	r24, Y+1	; 0x01
    25ee:	82 30       	cpi	r24, 0x02	; 2
    25f0:	a1 f4       	brne	.+40     	; 0x261a <DIO_vTogPinValue+0xa0>
			TOG_BIT(PORTC, Loc_u8PinID);
    25f2:	a5 e3       	ldi	r26, 0x35	; 53
    25f4:	b0 e0       	ldi	r27, 0x00	; 0
    25f6:	e5 e3       	ldi	r30, 0x35	; 53
    25f8:	f0 e0       	ldi	r31, 0x00	; 0
    25fa:	80 81       	ld	r24, Z
    25fc:	48 2f       	mov	r20, r24
    25fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2600:	28 2f       	mov	r18, r24
    2602:	30 e0       	ldi	r19, 0x00	; 0
    2604:	81 e0       	ldi	r24, 0x01	; 1
    2606:	90 e0       	ldi	r25, 0x00	; 0
    2608:	02 2e       	mov	r0, r18
    260a:	02 c0       	rjmp	.+4      	; 0x2610 <DIO_vTogPinValue+0x96>
    260c:	88 0f       	add	r24, r24
    260e:	99 1f       	adc	r25, r25
    2610:	0a 94       	dec	r0
    2612:	e2 f7       	brpl	.-8      	; 0x260c <DIO_vTogPinValue+0x92>
    2614:	84 27       	eor	r24, r20
    2616:	8c 93       	st	X, r24
    2618:	16 c0       	rjmp	.+44     	; 0x2646 <DIO_vTogPinValue+0xcc>
		}
		else if(Loc_u8PortID==PortD){
    261a:	89 81       	ldd	r24, Y+1	; 0x01
    261c:	83 30       	cpi	r24, 0x03	; 3
    261e:	99 f4       	brne	.+38     	; 0x2646 <DIO_vTogPinValue+0xcc>
			TOG_BIT(PORTD, Loc_u8PinID);
    2620:	a2 e3       	ldi	r26, 0x32	; 50
    2622:	b0 e0       	ldi	r27, 0x00	; 0
    2624:	e2 e3       	ldi	r30, 0x32	; 50
    2626:	f0 e0       	ldi	r31, 0x00	; 0
    2628:	80 81       	ld	r24, Z
    262a:	48 2f       	mov	r20, r24
    262c:	8a 81       	ldd	r24, Y+2	; 0x02
    262e:	28 2f       	mov	r18, r24
    2630:	30 e0       	ldi	r19, 0x00	; 0
    2632:	81 e0       	ldi	r24, 0x01	; 1
    2634:	90 e0       	ldi	r25, 0x00	; 0
    2636:	02 2e       	mov	r0, r18
    2638:	02 c0       	rjmp	.+4      	; 0x263e <DIO_vTogPinValue+0xc4>
    263a:	88 0f       	add	r24, r24
    263c:	99 1f       	adc	r25, r25
    263e:	0a 94       	dec	r0
    2640:	e2 f7       	brpl	.-8      	; 0x263a <DIO_vTogPinValue+0xc0>
    2642:	84 27       	eor	r24, r20
    2644:	8c 93       	st	X, r24
		}
	}
	else{
		//do nothing
	}
}
    2646:	0f 90       	pop	r0
    2648:	0f 90       	pop	r0
    264a:	cf 91       	pop	r28
    264c:	df 91       	pop	r29
    264e:	08 95       	ret

00002650 <ADC_vInit>:
 *      Author: a7med
 */
void(*Aptr)(void)='\0';

#include "ADC.h"
void ADC_vInit(){
    2650:	df 93       	push	r29
    2652:	cf 93       	push	r28
    2654:	cd b7       	in	r28, 0x3d	; 61
    2656:	de b7       	in	r29, 0x3e	; 62
#if PollingOrInterrupt==Polling
	#if	ADCMode==SingleConvertion
		ADCSRA = 0x87;
	#elif ADCMode==FreeRunningMode
		ADCSRA = 0xA7;
    2658:	e6 e2       	ldi	r30, 0x26	; 38
    265a:	f0 e0       	ldi	r31, 0x00	; 0
    265c:	87 ea       	ldi	r24, 0xA7	; 167
    265e:	80 83       	st	Z, r24
		SFIOR = SFIOR|0x00;
    2660:	a0 e5       	ldi	r26, 0x50	; 80
    2662:	b0 e0       	ldi	r27, 0x00	; 0
    2664:	e0 e5       	ldi	r30, 0x50	; 80
    2666:	f0 e0       	ldi	r31, 0x00	; 0
    2668:	80 81       	ld	r24, Z
    266a:	8c 93       	st	X, r24
		CLR_BIT(SFIOR,5);
		SET_BIT(SFIOR,6);
		CLR_BIT(SFIOR,7);
	#endif
#endif
	ADMUX=(0x60|((ADCNum)&0x1F));
    266c:	27 e2       	ldi	r18, 0x27	; 39
    266e:	30 e0       	ldi	r19, 0x00	; 0
    2670:	a7 e2       	ldi	r26, 0x27	; 39
    2672:	b0 e0       	ldi	r27, 0x00	; 0
    2674:	e7 e2       	ldi	r30, 0x27	; 39
    2676:	f0 e0       	ldi	r31, 0x00	; 0
    2678:	80 81       	ld	r24, Z
    267a:	81 60       	ori	r24, 0x01	; 1
    267c:	8c 93       	st	X, r24
    267e:	8c 91       	ld	r24, X
    2680:	8f 71       	andi	r24, 0x1F	; 31
    2682:	80 66       	ori	r24, 0x60	; 96
    2684:	f9 01       	movw	r30, r18
    2686:	80 83       	st	Z, r24
	}
    2688:	cf 91       	pop	r28
    268a:	df 91       	pop	r29
    268c:	08 95       	ret

0000268e <ADC_vGetVal>:
	u16 ADC_vGetVal(){
    268e:	df 93       	push	r29
    2690:	cf 93       	push	r28
    2692:	cd b7       	in	r28, 0x3d	; 61
    2694:	de b7       	in	r29, 0x3e	; 62
    2696:	66 97       	sbiw	r28, 0x16	; 22
    2698:	0f b6       	in	r0, 0x3f	; 63
    269a:	f8 94       	cli
    269c:	de bf       	out	0x3e, r29	; 62
    269e:	0f be       	out	0x3f, r0	; 63
    26a0:	cd bf       	out	0x3d, r28	; 61
		StartConversion;
    26a2:	a6 e2       	ldi	r26, 0x26	; 38
    26a4:	b0 e0       	ldi	r27, 0x00	; 0
    26a6:	e6 e2       	ldi	r30, 0x26	; 38
    26a8:	f0 e0       	ldi	r31, 0x00	; 0
    26aa:	80 81       	ld	r24, Z
    26ac:	80 64       	ori	r24, 0x40	; 64
    26ae:	8c 93       	st	X, r24
		u32 y;
		u32 z;
	#if ADCMode==FreeRunningMode
			while((ADIF)==0);
    26b0:	e6 e2       	ldi	r30, 0x26	; 38
    26b2:	f0 e0       	ldi	r31, 0x00	; 0
    26b4:	80 81       	ld	r24, Z
    26b6:	82 95       	swap	r24
    26b8:	8f 70       	andi	r24, 0x0F	; 15
    26ba:	88 2f       	mov	r24, r24
    26bc:	90 e0       	ldi	r25, 0x00	; 0
    26be:	81 70       	andi	r24, 0x01	; 1
    26c0:	90 70       	andi	r25, 0x00	; 0
    26c2:	00 97       	sbiw	r24, 0x00	; 0
    26c4:	a9 f3       	breq	.-22     	; 0x26b0 <ADC_vGetVal+0x22>
    26c6:	80 e0       	ldi	r24, 0x00	; 0
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	a0 e2       	ldi	r26, 0x20	; 32
    26cc:	b1 e4       	ldi	r27, 0x41	; 65
    26ce:	8b 87       	std	Y+11, r24	; 0x0b
    26d0:	9c 87       	std	Y+12, r25	; 0x0c
    26d2:	ad 87       	std	Y+13, r26	; 0x0d
    26d4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    26d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    26da:	8d 85       	ldd	r24, Y+13	; 0x0d
    26dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    26de:	20 e0       	ldi	r18, 0x00	; 0
    26e0:	30 e0       	ldi	r19, 0x00	; 0
    26e2:	4a e7       	ldi	r20, 0x7A	; 122
    26e4:	55 e4       	ldi	r21, 0x45	; 69
    26e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ea:	dc 01       	movw	r26, r24
    26ec:	cb 01       	movw	r24, r22
    26ee:	8f 83       	std	Y+7, r24	; 0x07
    26f0:	98 87       	std	Y+8, r25	; 0x08
    26f2:	a9 87       	std	Y+9, r26	; 0x09
    26f4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26f6:	6f 81       	ldd	r22, Y+7	; 0x07
    26f8:	78 85       	ldd	r23, Y+8	; 0x08
    26fa:	89 85       	ldd	r24, Y+9	; 0x09
    26fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    26fe:	20 e0       	ldi	r18, 0x00	; 0
    2700:	30 e0       	ldi	r19, 0x00	; 0
    2702:	40 e8       	ldi	r20, 0x80	; 128
    2704:	5f e3       	ldi	r21, 0x3F	; 63
    2706:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    270a:	88 23       	and	r24, r24
    270c:	2c f4       	brge	.+10     	; 0x2718 <ADC_vGetVal+0x8a>
		__ticks = 1;
    270e:	81 e0       	ldi	r24, 0x01	; 1
    2710:	90 e0       	ldi	r25, 0x00	; 0
    2712:	9e 83       	std	Y+6, r25	; 0x06
    2714:	8d 83       	std	Y+5, r24	; 0x05
    2716:	3f c0       	rjmp	.+126    	; 0x2796 <ADC_vGetVal+0x108>
	else if (__tmp > 65535)
    2718:	6f 81       	ldd	r22, Y+7	; 0x07
    271a:	78 85       	ldd	r23, Y+8	; 0x08
    271c:	89 85       	ldd	r24, Y+9	; 0x09
    271e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2720:	20 e0       	ldi	r18, 0x00	; 0
    2722:	3f ef       	ldi	r19, 0xFF	; 255
    2724:	4f e7       	ldi	r20, 0x7F	; 127
    2726:	57 e4       	ldi	r21, 0x47	; 71
    2728:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    272c:	18 16       	cp	r1, r24
    272e:	4c f5       	brge	.+82     	; 0x2782 <ADC_vGetVal+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2730:	6b 85       	ldd	r22, Y+11	; 0x0b
    2732:	7c 85       	ldd	r23, Y+12	; 0x0c
    2734:	8d 85       	ldd	r24, Y+13	; 0x0d
    2736:	9e 85       	ldd	r25, Y+14	; 0x0e
    2738:	20 e0       	ldi	r18, 0x00	; 0
    273a:	30 e0       	ldi	r19, 0x00	; 0
    273c:	40 e2       	ldi	r20, 0x20	; 32
    273e:	51 e4       	ldi	r21, 0x41	; 65
    2740:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2744:	dc 01       	movw	r26, r24
    2746:	cb 01       	movw	r24, r22
    2748:	bc 01       	movw	r22, r24
    274a:	cd 01       	movw	r24, r26
    274c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2750:	dc 01       	movw	r26, r24
    2752:	cb 01       	movw	r24, r22
    2754:	9e 83       	std	Y+6, r25	; 0x06
    2756:	8d 83       	std	Y+5, r24	; 0x05
    2758:	0f c0       	rjmp	.+30     	; 0x2778 <ADC_vGetVal+0xea>
    275a:	80 e9       	ldi	r24, 0x90	; 144
    275c:	91 e0       	ldi	r25, 0x01	; 1
    275e:	9c 83       	std	Y+4, r25	; 0x04
    2760:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2762:	8b 81       	ldd	r24, Y+3	; 0x03
    2764:	9c 81       	ldd	r25, Y+4	; 0x04
    2766:	01 97       	sbiw	r24, 0x01	; 1
    2768:	f1 f7       	brne	.-4      	; 0x2766 <ADC_vGetVal+0xd8>
    276a:	9c 83       	std	Y+4, r25	; 0x04
    276c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    276e:	8d 81       	ldd	r24, Y+5	; 0x05
    2770:	9e 81       	ldd	r25, Y+6	; 0x06
    2772:	01 97       	sbiw	r24, 0x01	; 1
    2774:	9e 83       	std	Y+6, r25	; 0x06
    2776:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2778:	8d 81       	ldd	r24, Y+5	; 0x05
    277a:	9e 81       	ldd	r25, Y+6	; 0x06
    277c:	00 97       	sbiw	r24, 0x00	; 0
    277e:	69 f7       	brne	.-38     	; 0x275a <ADC_vGetVal+0xcc>
    2780:	14 c0       	rjmp	.+40     	; 0x27aa <ADC_vGetVal+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2782:	6f 81       	ldd	r22, Y+7	; 0x07
    2784:	78 85       	ldd	r23, Y+8	; 0x08
    2786:	89 85       	ldd	r24, Y+9	; 0x09
    2788:	9a 85       	ldd	r25, Y+10	; 0x0a
    278a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    278e:	dc 01       	movw	r26, r24
    2790:	cb 01       	movw	r24, r22
    2792:	9e 83       	std	Y+6, r25	; 0x06
    2794:	8d 83       	std	Y+5, r24	; 0x05
    2796:	8d 81       	ldd	r24, Y+5	; 0x05
    2798:	9e 81       	ldd	r25, Y+6	; 0x06
    279a:	9a 83       	std	Y+2, r25	; 0x02
    279c:	89 83       	std	Y+1, r24	; 0x01
    279e:	89 81       	ldd	r24, Y+1	; 0x01
    27a0:	9a 81       	ldd	r25, Y+2	; 0x02
    27a2:	01 97       	sbiw	r24, 0x01	; 1
    27a4:	f1 f7       	brne	.-4      	; 0x27a2 <ADC_vGetVal+0x114>
    27a6:	9a 83       	std	Y+2, r25	; 0x02
    27a8:	89 83       	std	Y+1, r24	; 0x01
	#elif ADCMode==SingleConvertion
			StartConversion;
			while(CheckConversoin==1);
	#endif
		_delay_ms(10);
		y = (((u32)ADCH)<<2);
    27aa:	e5 e2       	ldi	r30, 0x25	; 37
    27ac:	f0 e0       	ldi	r31, 0x00	; 0
    27ae:	80 81       	ld	r24, Z
    27b0:	88 2f       	mov	r24, r24
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	a0 e0       	ldi	r26, 0x00	; 0
    27b6:	b0 e0       	ldi	r27, 0x00	; 0
    27b8:	88 0f       	add	r24, r24
    27ba:	99 1f       	adc	r25, r25
    27bc:	aa 1f       	adc	r26, r26
    27be:	bb 1f       	adc	r27, r27
    27c0:	88 0f       	add	r24, r24
    27c2:	99 1f       	adc	r25, r25
    27c4:	aa 1f       	adc	r26, r26
    27c6:	bb 1f       	adc	r27, r27
    27c8:	8b 8b       	std	Y+19, r24	; 0x13
    27ca:	9c 8b       	std	Y+20, r25	; 0x14
    27cc:	ad 8b       	std	Y+21, r26	; 0x15
    27ce:	be 8b       	std	Y+22, r27	; 0x16
		z = (y*5000)/1024;
    27d0:	8b 89       	ldd	r24, Y+19	; 0x13
    27d2:	9c 89       	ldd	r25, Y+20	; 0x14
    27d4:	ad 89       	ldd	r26, Y+21	; 0x15
    27d6:	be 89       	ldd	r27, Y+22	; 0x16
    27d8:	28 e8       	ldi	r18, 0x88	; 136
    27da:	33 e1       	ldi	r19, 0x13	; 19
    27dc:	40 e0       	ldi	r20, 0x00	; 0
    27de:	50 e0       	ldi	r21, 0x00	; 0
    27e0:	bc 01       	movw	r22, r24
    27e2:	cd 01       	movw	r24, r26
    27e4:	0e 94 ab 35 	call	0x6b56	; 0x6b56 <__mulsi3>
    27e8:	dc 01       	movw	r26, r24
    27ea:	cb 01       	movw	r24, r22
    27ec:	07 2e       	mov	r0, r23
    27ee:	7a e0       	ldi	r23, 0x0A	; 10
    27f0:	b6 95       	lsr	r27
    27f2:	a7 95       	ror	r26
    27f4:	97 95       	ror	r25
    27f6:	87 95       	ror	r24
    27f8:	7a 95       	dec	r23
    27fa:	d1 f7       	brne	.-12     	; 0x27f0 <ADC_vGetVal+0x162>
    27fc:	70 2d       	mov	r23, r0
    27fe:	8f 87       	std	Y+15, r24	; 0x0f
    2800:	98 8b       	std	Y+16, r25	; 0x10
    2802:	a9 8b       	std	Y+17, r26	; 0x11
    2804:	ba 8b       	std	Y+18, r27	; 0x12
		return z;
    2806:	8f 85       	ldd	r24, Y+15	; 0x0f
    2808:	98 89       	ldd	r25, Y+16	; 0x10
	}
    280a:	66 96       	adiw	r28, 0x16	; 22
    280c:	0f b6       	in	r0, 0x3f	; 63
    280e:	f8 94       	cli
    2810:	de bf       	out	0x3e, r29	; 62
    2812:	0f be       	out	0x3f, r0	; 63
    2814:	cd bf       	out	0x3d, r28	; 61
    2816:	cf 91       	pop	r28
    2818:	df 91       	pop	r29
    281a:	08 95       	ret

0000281c <ADC_vADCCallBack>:
	void ADC_vADCCallBack(void(*ptr)(void)){
    281c:	df 93       	push	r29
    281e:	cf 93       	push	r28
    2820:	00 d0       	rcall	.+0      	; 0x2822 <ADC_vADCCallBack+0x6>
    2822:	cd b7       	in	r28, 0x3d	; 61
    2824:	de b7       	in	r29, 0x3e	; 62
    2826:	9a 83       	std	Y+2, r25	; 0x02
    2828:	89 83       	std	Y+1, r24	; 0x01
		if(ptr!='\0'){
    282a:	89 81       	ldd	r24, Y+1	; 0x01
    282c:	9a 81       	ldd	r25, Y+2	; 0x02
    282e:	00 97       	sbiw	r24, 0x00	; 0
    2830:	31 f0       	breq	.+12     	; 0x283e <ADC_vADCCallBack+0x22>
			Aptr=ptr;
    2832:	89 81       	ldd	r24, Y+1	; 0x01
    2834:	9a 81       	ldd	r25, Y+2	; 0x02
    2836:	90 93 e8 00 	sts	0x00E8, r25
    283a:	80 93 e7 00 	sts	0x00E7, r24
		}
	}
    283e:	0f 90       	pop	r0
    2840:	0f 90       	pop	r0
    2842:	cf 91       	pop	r28
    2844:	df 91       	pop	r29
    2846:	08 95       	ret

00002848 <__vector_16>:
ISR(ADC_vect){
    2848:	1f 92       	push	r1
    284a:	0f 92       	push	r0
    284c:	0f b6       	in	r0, 0x3f	; 63
    284e:	0f 92       	push	r0
    2850:	11 24       	eor	r1, r1
    2852:	2f 93       	push	r18
    2854:	3f 93       	push	r19
    2856:	4f 93       	push	r20
    2858:	5f 93       	push	r21
    285a:	6f 93       	push	r22
    285c:	7f 93       	push	r23
    285e:	8f 93       	push	r24
    2860:	9f 93       	push	r25
    2862:	af 93       	push	r26
    2864:	bf 93       	push	r27
    2866:	ef 93       	push	r30
    2868:	ff 93       	push	r31
    286a:	df 93       	push	r29
    286c:	cf 93       	push	r28
    286e:	cd b7       	in	r28, 0x3d	; 61
    2870:	de b7       	in	r29, 0x3e	; 62
		if(Aptr!='\0'){
    2872:	80 91 e7 00 	lds	r24, 0x00E7
    2876:	90 91 e8 00 	lds	r25, 0x00E8
    287a:	00 97       	sbiw	r24, 0x00	; 0
    287c:	29 f0       	breq	.+10     	; 0x2888 <__vector_16+0x40>
			Aptr();
    287e:	e0 91 e7 00 	lds	r30, 0x00E7
    2882:	f0 91 e8 00 	lds	r31, 0x00E8
    2886:	09 95       	icall
		}
	}
    2888:	cf 91       	pop	r28
    288a:	df 91       	pop	r29
    288c:	ff 91       	pop	r31
    288e:	ef 91       	pop	r30
    2890:	bf 91       	pop	r27
    2892:	af 91       	pop	r26
    2894:	9f 91       	pop	r25
    2896:	8f 91       	pop	r24
    2898:	7f 91       	pop	r23
    289a:	6f 91       	pop	r22
    289c:	5f 91       	pop	r21
    289e:	4f 91       	pop	r20
    28a0:	3f 91       	pop	r19
    28a2:	2f 91       	pop	r18
    28a4:	0f 90       	pop	r0
    28a6:	0f be       	out	0x3f, r0	; 63
    28a8:	0f 90       	pop	r0
    28aa:	1f 90       	pop	r1
    28ac:	18 95       	reti

000028ae <LedAndBuzzer_vLed0Open>:
* \Description     : this function is used to open the led0 which is connected to PortC Pin2
*
* \Parameters (in) : None
* \Parameters (out): None
*******************************************************************************/
void LedAndBuzzer_vLed0Open(){
    28ae:	df 93       	push	r29
    28b0:	cf 93       	push	r28
    28b2:	cd b7       	in	r28, 0x3d	; 61
    28b4:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPinDirection(PortC, Pin2, Pin_OutPut);
    28b6:	82 e0       	ldi	r24, 0x02	; 2
    28b8:	62 e0       	ldi	r22, 0x02	; 2
    28ba:	41 e0       	ldi	r20, 0x01	; 1
    28bc:	0e 94 72 10 	call	0x20e4	; 0x20e4 <DIO_vSetPinDirection>
	DIO_vSetPinValue(PortC, Pin2, Pin_High);
    28c0:	82 e0       	ldi	r24, 0x02	; 2
    28c2:	62 e0       	ldi	r22, 0x02	; 2
    28c4:	41 e0       	ldi	r20, 0x01	; 1
    28c6:	0e 94 75 11 	call	0x22ea	; 0x22ea <DIO_vSetPinValue>
}
    28ca:	cf 91       	pop	r28
    28cc:	df 91       	pop	r29
    28ce:	08 95       	ret

000028d0 <LedAndBuzzer_vLed0Close>:
* \Description     : this function is used to Close the led0 which is connected to PortC Pin2
*
* \Parameters (in) : None
* \Parameters (out): None
*******************************************************************************/
void LedAndBuzzer_vLed0Close(){
    28d0:	df 93       	push	r29
    28d2:	cf 93       	push	r28
    28d4:	cd b7       	in	r28, 0x3d	; 61
    28d6:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPinValue(PortC, Pin2, Pin_Low);
    28d8:	82 e0       	ldi	r24, 0x02	; 2
    28da:	62 e0       	ldi	r22, 0x02	; 2
    28dc:	40 e0       	ldi	r20, 0x00	; 0
    28de:	0e 94 75 11 	call	0x22ea	; 0x22ea <DIO_vSetPinValue>
}
    28e2:	cf 91       	pop	r28
    28e4:	df 91       	pop	r29
    28e6:	08 95       	ret

000028e8 <LedAndBuzzer_vLed1Open>:
* \Description     : this function is used to open the led1 which is connected to PortC Pin7
*
* \Parameters (in) : None
* \Parameters (out): None
*******************************************************************************/
void LedAndBuzzer_vLed1Open(){
    28e8:	df 93       	push	r29
    28ea:	cf 93       	push	r28
    28ec:	cd b7       	in	r28, 0x3d	; 61
    28ee:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPinDirection(PortC, Pin7, Pin_OutPut);
    28f0:	82 e0       	ldi	r24, 0x02	; 2
    28f2:	67 e0       	ldi	r22, 0x07	; 7
    28f4:	41 e0       	ldi	r20, 0x01	; 1
    28f6:	0e 94 72 10 	call	0x20e4	; 0x20e4 <DIO_vSetPinDirection>
	DIO_vSetPinValue(PortC, Pin7, Pin_High);
    28fa:	82 e0       	ldi	r24, 0x02	; 2
    28fc:	67 e0       	ldi	r22, 0x07	; 7
    28fe:	41 e0       	ldi	r20, 0x01	; 1
    2900:	0e 94 75 11 	call	0x22ea	; 0x22ea <DIO_vSetPinValue>
}
    2904:	cf 91       	pop	r28
    2906:	df 91       	pop	r29
    2908:	08 95       	ret

0000290a <LedAndBuzzer_vLed1Close>:
* \Description     : this function is used to Close the led1 which is connected to PortC Pin7
*
* \Parameters (in) : None
* \Parameters (out): None
*******************************************************************************/
void LedAndBuzzer_vLed1Close(){
    290a:	df 93       	push	r29
    290c:	cf 93       	push	r28
    290e:	cd b7       	in	r28, 0x3d	; 61
    2910:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPinValue(PortC, Pin7, Pin_Low);
    2912:	82 e0       	ldi	r24, 0x02	; 2
    2914:	67 e0       	ldi	r22, 0x07	; 7
    2916:	40 e0       	ldi	r20, 0x00	; 0
    2918:	0e 94 75 11 	call	0x22ea	; 0x22ea <DIO_vSetPinValue>
}
    291c:	cf 91       	pop	r28
    291e:	df 91       	pop	r29
    2920:	08 95       	ret

00002922 <LedAndBuzzer_vLed2Open>:
* \Description     : this function is used to open the led2 which is connected to PortD Pin3
*
* \Parameters (in) : None
* \Parameters (out): None
*******************************************************************************/
void LedAndBuzzer_vLed2Open(){
    2922:	df 93       	push	r29
    2924:	cf 93       	push	r28
    2926:	cd b7       	in	r28, 0x3d	; 61
    2928:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPinDirection(PortD, Pin3, Pin_OutPut);
    292a:	83 e0       	ldi	r24, 0x03	; 3
    292c:	63 e0       	ldi	r22, 0x03	; 3
    292e:	41 e0       	ldi	r20, 0x01	; 1
    2930:	0e 94 72 10 	call	0x20e4	; 0x20e4 <DIO_vSetPinDirection>
	DIO_vSetPinValue(PortD, Pin3, Pin_High);
    2934:	83 e0       	ldi	r24, 0x03	; 3
    2936:	63 e0       	ldi	r22, 0x03	; 3
    2938:	41 e0       	ldi	r20, 0x01	; 1
    293a:	0e 94 75 11 	call	0x22ea	; 0x22ea <DIO_vSetPinValue>
}
    293e:	cf 91       	pop	r28
    2940:	df 91       	pop	r29
    2942:	08 95       	ret

00002944 <LedAndBuzzer_vLed2Close>:
* \Description     : this function is used to Close the led2 which is connected to PortD Pin3
*
* \Parameters (in) : None
* \Parameters (out): None
*******************************************************************************/
void LedAndBuzzer_vLed2Close(){
    2944:	df 93       	push	r29
    2946:	cf 93       	push	r28
    2948:	cd b7       	in	r28, 0x3d	; 61
    294a:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPinValue(PortD, Pin3, Pin_Low);
    294c:	83 e0       	ldi	r24, 0x03	; 3
    294e:	63 e0       	ldi	r22, 0x03	; 3
    2950:	40 e0       	ldi	r20, 0x00	; 0
    2952:	0e 94 75 11 	call	0x22ea	; 0x22ea <DIO_vSetPinValue>
}
    2956:	cf 91       	pop	r28
    2958:	df 91       	pop	r29
    295a:	08 95       	ret

0000295c <LedAndBuzzer_vBuzzerOpen>:
* \Description     : this function is used to open the Buzzer which is connected to PortA Pin3
*
* \Parameters (in) : None
* \Parameters (out): None
*******************************************************************************/
void LedAndBuzzer_vBuzzerOpen(){
    295c:	df 93       	push	r29
    295e:	cf 93       	push	r28
    2960:	cd b7       	in	r28, 0x3d	; 61
    2962:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPinDirection(PortA, Pin3, Pin_OutPut);
    2964:	80 e0       	ldi	r24, 0x00	; 0
    2966:	63 e0       	ldi	r22, 0x03	; 3
    2968:	41 e0       	ldi	r20, 0x01	; 1
    296a:	0e 94 72 10 	call	0x20e4	; 0x20e4 <DIO_vSetPinDirection>
	DIO_vSetPinValue(PortA, Pin3, Pin_High);
    296e:	80 e0       	ldi	r24, 0x00	; 0
    2970:	63 e0       	ldi	r22, 0x03	; 3
    2972:	41 e0       	ldi	r20, 0x01	; 1
    2974:	0e 94 75 11 	call	0x22ea	; 0x22ea <DIO_vSetPinValue>
}
    2978:	cf 91       	pop	r28
    297a:	df 91       	pop	r29
    297c:	08 95       	ret

0000297e <LedAndBuzzer_vBuzzerClose>:
* \Description     : this function is used to Close the Buzzer which is connected to PortA Pin3
*
* \Parameters (in) : None
* \Parameters (out): None
*******************************************************************************/
void LedAndBuzzer_vBuzzerClose(){
    297e:	df 93       	push	r29
    2980:	cf 93       	push	r28
    2982:	cd b7       	in	r28, 0x3d	; 61
    2984:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPinValue(PortA, Pin3, Pin_Low);
    2986:	80 e0       	ldi	r24, 0x00	; 0
    2988:	63 e0       	ldi	r22, 0x03	; 3
    298a:	40 e0       	ldi	r20, 0x00	; 0
    298c:	0e 94 75 11 	call	0x22ea	; 0x22ea <DIO_vSetPinValue>
}
    2990:	cf 91       	pop	r28
    2992:	df 91       	pop	r29
    2994:	08 95       	ret

00002996 <LedAndBuzzer_vFlash>:
* \Description     : this function is used to turn on the LEDs and Buzzer for .25sec number of times
*
* \Parameters (in) : u8 Loc_vNumberOfFlashes	Number of LEDs and Buzzer WILL on and off
* \Parameters (out): None
*******************************************************************************/
void LedAndBuzzer_vFlash(u8 Loc_vNumberOfFlashes){
    2996:	df 93       	push	r29
    2998:	cf 93       	push	r28
    299a:	cd b7       	in	r28, 0x3d	; 61
    299c:	de b7       	in	r29, 0x3e	; 62
    299e:	6e 97       	sbiw	r28, 0x1e	; 30
    29a0:	0f b6       	in	r0, 0x3f	; 63
    29a2:	f8 94       	cli
    29a4:	de bf       	out	0x3e, r29	; 62
    29a6:	0f be       	out	0x3f, r0	; 63
    29a8:	cd bf       	out	0x3d, r28	; 61
    29aa:	8e 8f       	std	Y+30, r24	; 0x1e
	u8 count;
	for(count=0;count<Loc_vNumberOfFlashes;count++){
    29ac:	1d 8e       	std	Y+29, r1	; 0x1d
    29ae:	f7 c0       	rjmp	.+494    	; 0x2b9e <LedAndBuzzer_vFlash+0x208>
		LedAndBuzzer_vBuzzerOpen();
    29b0:	0e 94 ae 14 	call	0x295c	; 0x295c <LedAndBuzzer_vBuzzerOpen>
		LedAndBuzzer_vLed0Open();
    29b4:	0e 94 57 14 	call	0x28ae	; 0x28ae <LedAndBuzzer_vLed0Open>
		LedAndBuzzer_vLed1Open();
    29b8:	0e 94 74 14 	call	0x28e8	; 0x28e8 <LedAndBuzzer_vLed1Open>
		LedAndBuzzer_vLed2Open();
    29bc:	0e 94 91 14 	call	0x2922	; 0x2922 <LedAndBuzzer_vLed2Open>
    29c0:	80 e0       	ldi	r24, 0x00	; 0
    29c2:	90 e0       	ldi	r25, 0x00	; 0
    29c4:	aa e7       	ldi	r26, 0x7A	; 122
    29c6:	b3 e4       	ldi	r27, 0x43	; 67
    29c8:	89 8f       	std	Y+25, r24	; 0x19
    29ca:	9a 8f       	std	Y+26, r25	; 0x1a
    29cc:	ab 8f       	std	Y+27, r26	; 0x1b
    29ce:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29d0:	69 8d       	ldd	r22, Y+25	; 0x19
    29d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29d8:	20 e0       	ldi	r18, 0x00	; 0
    29da:	30 e0       	ldi	r19, 0x00	; 0
    29dc:	4a e7       	ldi	r20, 0x7A	; 122
    29de:	55 e4       	ldi	r21, 0x45	; 69
    29e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29e4:	dc 01       	movw	r26, r24
    29e6:	cb 01       	movw	r24, r22
    29e8:	8d 8b       	std	Y+21, r24	; 0x15
    29ea:	9e 8b       	std	Y+22, r25	; 0x16
    29ec:	af 8b       	std	Y+23, r26	; 0x17
    29ee:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    29f0:	6d 89       	ldd	r22, Y+21	; 0x15
    29f2:	7e 89       	ldd	r23, Y+22	; 0x16
    29f4:	8f 89       	ldd	r24, Y+23	; 0x17
    29f6:	98 8d       	ldd	r25, Y+24	; 0x18
    29f8:	20 e0       	ldi	r18, 0x00	; 0
    29fa:	30 e0       	ldi	r19, 0x00	; 0
    29fc:	40 e8       	ldi	r20, 0x80	; 128
    29fe:	5f e3       	ldi	r21, 0x3F	; 63
    2a00:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a04:	88 23       	and	r24, r24
    2a06:	2c f4       	brge	.+10     	; 0x2a12 <LedAndBuzzer_vFlash+0x7c>
		__ticks = 1;
    2a08:	81 e0       	ldi	r24, 0x01	; 1
    2a0a:	90 e0       	ldi	r25, 0x00	; 0
    2a0c:	9c 8b       	std	Y+20, r25	; 0x14
    2a0e:	8b 8b       	std	Y+19, r24	; 0x13
    2a10:	3f c0       	rjmp	.+126    	; 0x2a90 <LedAndBuzzer_vFlash+0xfa>
	else if (__tmp > 65535)
    2a12:	6d 89       	ldd	r22, Y+21	; 0x15
    2a14:	7e 89       	ldd	r23, Y+22	; 0x16
    2a16:	8f 89       	ldd	r24, Y+23	; 0x17
    2a18:	98 8d       	ldd	r25, Y+24	; 0x18
    2a1a:	20 e0       	ldi	r18, 0x00	; 0
    2a1c:	3f ef       	ldi	r19, 0xFF	; 255
    2a1e:	4f e7       	ldi	r20, 0x7F	; 127
    2a20:	57 e4       	ldi	r21, 0x47	; 71
    2a22:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a26:	18 16       	cp	r1, r24
    2a28:	4c f5       	brge	.+82     	; 0x2a7c <LedAndBuzzer_vFlash+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a2a:	69 8d       	ldd	r22, Y+25	; 0x19
    2a2c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a2e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a30:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a32:	20 e0       	ldi	r18, 0x00	; 0
    2a34:	30 e0       	ldi	r19, 0x00	; 0
    2a36:	40 e2       	ldi	r20, 0x20	; 32
    2a38:	51 e4       	ldi	r21, 0x41	; 65
    2a3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a3e:	dc 01       	movw	r26, r24
    2a40:	cb 01       	movw	r24, r22
    2a42:	bc 01       	movw	r22, r24
    2a44:	cd 01       	movw	r24, r26
    2a46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a4a:	dc 01       	movw	r26, r24
    2a4c:	cb 01       	movw	r24, r22
    2a4e:	9c 8b       	std	Y+20, r25	; 0x14
    2a50:	8b 8b       	std	Y+19, r24	; 0x13
    2a52:	0f c0       	rjmp	.+30     	; 0x2a72 <LedAndBuzzer_vFlash+0xdc>
    2a54:	80 e9       	ldi	r24, 0x90	; 144
    2a56:	91 e0       	ldi	r25, 0x01	; 1
    2a58:	9a 8b       	std	Y+18, r25	; 0x12
    2a5a:	89 8b       	std	Y+17, r24	; 0x11
    2a5c:	89 89       	ldd	r24, Y+17	; 0x11
    2a5e:	9a 89       	ldd	r25, Y+18	; 0x12
    2a60:	01 97       	sbiw	r24, 0x01	; 1
    2a62:	f1 f7       	brne	.-4      	; 0x2a60 <LedAndBuzzer_vFlash+0xca>
    2a64:	9a 8b       	std	Y+18, r25	; 0x12
    2a66:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a68:	8b 89       	ldd	r24, Y+19	; 0x13
    2a6a:	9c 89       	ldd	r25, Y+20	; 0x14
    2a6c:	01 97       	sbiw	r24, 0x01	; 1
    2a6e:	9c 8b       	std	Y+20, r25	; 0x14
    2a70:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a72:	8b 89       	ldd	r24, Y+19	; 0x13
    2a74:	9c 89       	ldd	r25, Y+20	; 0x14
    2a76:	00 97       	sbiw	r24, 0x00	; 0
    2a78:	69 f7       	brne	.-38     	; 0x2a54 <LedAndBuzzer_vFlash+0xbe>
    2a7a:	14 c0       	rjmp	.+40     	; 0x2aa4 <LedAndBuzzer_vFlash+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a7c:	6d 89       	ldd	r22, Y+21	; 0x15
    2a7e:	7e 89       	ldd	r23, Y+22	; 0x16
    2a80:	8f 89       	ldd	r24, Y+23	; 0x17
    2a82:	98 8d       	ldd	r25, Y+24	; 0x18
    2a84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a88:	dc 01       	movw	r26, r24
    2a8a:	cb 01       	movw	r24, r22
    2a8c:	9c 8b       	std	Y+20, r25	; 0x14
    2a8e:	8b 8b       	std	Y+19, r24	; 0x13
    2a90:	8b 89       	ldd	r24, Y+19	; 0x13
    2a92:	9c 89       	ldd	r25, Y+20	; 0x14
    2a94:	98 8b       	std	Y+16, r25	; 0x10
    2a96:	8f 87       	std	Y+15, r24	; 0x0f
    2a98:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a9a:	98 89       	ldd	r25, Y+16	; 0x10
    2a9c:	01 97       	sbiw	r24, 0x01	; 1
    2a9e:	f1 f7       	brne	.-4      	; 0x2a9c <LedAndBuzzer_vFlash+0x106>
    2aa0:	98 8b       	std	Y+16, r25	; 0x10
    2aa2:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(250);
		LedAndBuzzer_vBuzzerClose();
    2aa4:	0e 94 bf 14 	call	0x297e	; 0x297e <LedAndBuzzer_vBuzzerClose>
		LedAndBuzzer_vLed2Close();
    2aa8:	0e 94 a2 14 	call	0x2944	; 0x2944 <LedAndBuzzer_vLed2Close>
		LedAndBuzzer_vLed0Close();
    2aac:	0e 94 68 14 	call	0x28d0	; 0x28d0 <LedAndBuzzer_vLed0Close>
		LedAndBuzzer_vLed1Close();
    2ab0:	0e 94 85 14 	call	0x290a	; 0x290a <LedAndBuzzer_vLed1Close>
    2ab4:	80 e0       	ldi	r24, 0x00	; 0
    2ab6:	90 e0       	ldi	r25, 0x00	; 0
    2ab8:	aa e7       	ldi	r26, 0x7A	; 122
    2aba:	b3 e4       	ldi	r27, 0x43	; 67
    2abc:	8b 87       	std	Y+11, r24	; 0x0b
    2abe:	9c 87       	std	Y+12, r25	; 0x0c
    2ac0:	ad 87       	std	Y+13, r26	; 0x0d
    2ac2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ac4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ac6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ac8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2aca:	9e 85       	ldd	r25, Y+14	; 0x0e
    2acc:	20 e0       	ldi	r18, 0x00	; 0
    2ace:	30 e0       	ldi	r19, 0x00	; 0
    2ad0:	4a e7       	ldi	r20, 0x7A	; 122
    2ad2:	55 e4       	ldi	r21, 0x45	; 69
    2ad4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ad8:	dc 01       	movw	r26, r24
    2ada:	cb 01       	movw	r24, r22
    2adc:	8f 83       	std	Y+7, r24	; 0x07
    2ade:	98 87       	std	Y+8, r25	; 0x08
    2ae0:	a9 87       	std	Y+9, r26	; 0x09
    2ae2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ae4:	6f 81       	ldd	r22, Y+7	; 0x07
    2ae6:	78 85       	ldd	r23, Y+8	; 0x08
    2ae8:	89 85       	ldd	r24, Y+9	; 0x09
    2aea:	9a 85       	ldd	r25, Y+10	; 0x0a
    2aec:	20 e0       	ldi	r18, 0x00	; 0
    2aee:	30 e0       	ldi	r19, 0x00	; 0
    2af0:	40 e8       	ldi	r20, 0x80	; 128
    2af2:	5f e3       	ldi	r21, 0x3F	; 63
    2af4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2af8:	88 23       	and	r24, r24
    2afa:	2c f4       	brge	.+10     	; 0x2b06 <LedAndBuzzer_vFlash+0x170>
		__ticks = 1;
    2afc:	81 e0       	ldi	r24, 0x01	; 1
    2afe:	90 e0       	ldi	r25, 0x00	; 0
    2b00:	9e 83       	std	Y+6, r25	; 0x06
    2b02:	8d 83       	std	Y+5, r24	; 0x05
    2b04:	3f c0       	rjmp	.+126    	; 0x2b84 <LedAndBuzzer_vFlash+0x1ee>
	else if (__tmp > 65535)
    2b06:	6f 81       	ldd	r22, Y+7	; 0x07
    2b08:	78 85       	ldd	r23, Y+8	; 0x08
    2b0a:	89 85       	ldd	r24, Y+9	; 0x09
    2b0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b0e:	20 e0       	ldi	r18, 0x00	; 0
    2b10:	3f ef       	ldi	r19, 0xFF	; 255
    2b12:	4f e7       	ldi	r20, 0x7F	; 127
    2b14:	57 e4       	ldi	r21, 0x47	; 71
    2b16:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b1a:	18 16       	cp	r1, r24
    2b1c:	4c f5       	brge	.+82     	; 0x2b70 <LedAndBuzzer_vFlash+0x1da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b20:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b22:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b24:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b26:	20 e0       	ldi	r18, 0x00	; 0
    2b28:	30 e0       	ldi	r19, 0x00	; 0
    2b2a:	40 e2       	ldi	r20, 0x20	; 32
    2b2c:	51 e4       	ldi	r21, 0x41	; 65
    2b2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b32:	dc 01       	movw	r26, r24
    2b34:	cb 01       	movw	r24, r22
    2b36:	bc 01       	movw	r22, r24
    2b38:	cd 01       	movw	r24, r26
    2b3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b3e:	dc 01       	movw	r26, r24
    2b40:	cb 01       	movw	r24, r22
    2b42:	9e 83       	std	Y+6, r25	; 0x06
    2b44:	8d 83       	std	Y+5, r24	; 0x05
    2b46:	0f c0       	rjmp	.+30     	; 0x2b66 <LedAndBuzzer_vFlash+0x1d0>
    2b48:	80 e9       	ldi	r24, 0x90	; 144
    2b4a:	91 e0       	ldi	r25, 0x01	; 1
    2b4c:	9c 83       	std	Y+4, r25	; 0x04
    2b4e:	8b 83       	std	Y+3, r24	; 0x03
    2b50:	8b 81       	ldd	r24, Y+3	; 0x03
    2b52:	9c 81       	ldd	r25, Y+4	; 0x04
    2b54:	01 97       	sbiw	r24, 0x01	; 1
    2b56:	f1 f7       	brne	.-4      	; 0x2b54 <LedAndBuzzer_vFlash+0x1be>
    2b58:	9c 83       	std	Y+4, r25	; 0x04
    2b5a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b5c:	8d 81       	ldd	r24, Y+5	; 0x05
    2b5e:	9e 81       	ldd	r25, Y+6	; 0x06
    2b60:	01 97       	sbiw	r24, 0x01	; 1
    2b62:	9e 83       	std	Y+6, r25	; 0x06
    2b64:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b66:	8d 81       	ldd	r24, Y+5	; 0x05
    2b68:	9e 81       	ldd	r25, Y+6	; 0x06
    2b6a:	00 97       	sbiw	r24, 0x00	; 0
    2b6c:	69 f7       	brne	.-38     	; 0x2b48 <LedAndBuzzer_vFlash+0x1b2>
    2b6e:	14 c0       	rjmp	.+40     	; 0x2b98 <LedAndBuzzer_vFlash+0x202>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b70:	6f 81       	ldd	r22, Y+7	; 0x07
    2b72:	78 85       	ldd	r23, Y+8	; 0x08
    2b74:	89 85       	ldd	r24, Y+9	; 0x09
    2b76:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b7c:	dc 01       	movw	r26, r24
    2b7e:	cb 01       	movw	r24, r22
    2b80:	9e 83       	std	Y+6, r25	; 0x06
    2b82:	8d 83       	std	Y+5, r24	; 0x05
    2b84:	8d 81       	ldd	r24, Y+5	; 0x05
    2b86:	9e 81       	ldd	r25, Y+6	; 0x06
    2b88:	9a 83       	std	Y+2, r25	; 0x02
    2b8a:	89 83       	std	Y+1, r24	; 0x01
    2b8c:	89 81       	ldd	r24, Y+1	; 0x01
    2b8e:	9a 81       	ldd	r25, Y+2	; 0x02
    2b90:	01 97       	sbiw	r24, 0x01	; 1
    2b92:	f1 f7       	brne	.-4      	; 0x2b90 <LedAndBuzzer_vFlash+0x1fa>
    2b94:	9a 83       	std	Y+2, r25	; 0x02
    2b96:	89 83       	std	Y+1, r24	; 0x01
* \Parameters (in) : u8 Loc_vNumberOfFlashes	Number of LEDs and Buzzer WILL on and off
* \Parameters (out): None
*******************************************************************************/
void LedAndBuzzer_vFlash(u8 Loc_vNumberOfFlashes){
	u8 count;
	for(count=0;count<Loc_vNumberOfFlashes;count++){
    2b98:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b9a:	8f 5f       	subi	r24, 0xFF	; 255
    2b9c:	8d 8f       	std	Y+29, r24	; 0x1d
    2b9e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2ba0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2ba2:	98 17       	cp	r25, r24
    2ba4:	08 f4       	brcc	.+2      	; 0x2ba8 <LedAndBuzzer_vFlash+0x212>
    2ba6:	04 cf       	rjmp	.-504    	; 0x29b0 <LedAndBuzzer_vFlash+0x1a>
		LedAndBuzzer_vLed2Close();
		LedAndBuzzer_vLed0Close();
		LedAndBuzzer_vLed1Close();
		_delay_ms(250);
	}
}
    2ba8:	6e 96       	adiw	r28, 0x1e	; 30
    2baa:	0f b6       	in	r0, 0x3f	; 63
    2bac:	f8 94       	cli
    2bae:	de bf       	out	0x3e, r29	; 62
    2bb0:	0f be       	out	0x3f, r0	; 63
    2bb2:	cd bf       	out	0x3d, r28	; 61
    2bb4:	cf 91       	pop	r28
    2bb6:	df 91       	pop	r29
    2bb8:	08 95       	ret

00002bba <_7Segma_vInit>:
 *      and PortA Pin4, Pin5, Pin6, and Pin7 is used to show number .
 */

#include "_7Segma.h"
//------------ SET pins connected to the 7segma as out puts
void _7Segma_vInit(){
    2bba:	df 93       	push	r29
    2bbc:	cf 93       	push	r28
    2bbe:	cd b7       	in	r28, 0x3d	; 61
    2bc0:	de b7       	in	r29, 0x3e	; 62
	/*----------7SEG_A-->PORTA .4
				7SEG_B-->PORTA .5
				7SEG_C-->PORTA .6
				7SEG_D-->PORTA .7*/
	DIO_vSetPinDirection(PortA, Pin4, Pin_OutPut);
    2bc2:	80 e0       	ldi	r24, 0x00	; 0
    2bc4:	64 e0       	ldi	r22, 0x04	; 4
    2bc6:	41 e0       	ldi	r20, 0x01	; 1
    2bc8:	0e 94 72 10 	call	0x20e4	; 0x20e4 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PortA, Pin5, Pin_OutPut);
    2bcc:	80 e0       	ldi	r24, 0x00	; 0
    2bce:	65 e0       	ldi	r22, 0x05	; 5
    2bd0:	41 e0       	ldi	r20, 0x01	; 1
    2bd2:	0e 94 72 10 	call	0x20e4	; 0x20e4 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PortA, Pin6, Pin_OutPut);
    2bd6:	80 e0       	ldi	r24, 0x00	; 0
    2bd8:	66 e0       	ldi	r22, 0x06	; 6
    2bda:	41 e0       	ldi	r20, 0x01	; 1
    2bdc:	0e 94 72 10 	call	0x20e4	; 0x20e4 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PortA, Pin7, Pin_OutPut);
    2be0:	80 e0       	ldi	r24, 0x00	; 0
    2be2:	67 e0       	ldi	r22, 0x07	; 7
    2be4:	41 e0       	ldi	r20, 0x01	; 1
    2be6:	0e 94 72 10 	call	0x20e4	; 0x20e4 <DIO_vSetPinDirection>
	//-------------ENABLE LINES PINS ----------------
	DIO_vSetPinDirection(PortB, Pin2, Pin_OutPut);
    2bea:	81 e0       	ldi	r24, 0x01	; 1
    2bec:	62 e0       	ldi	r22, 0x02	; 2
    2bee:	41 e0       	ldi	r20, 0x01	; 1
    2bf0:	0e 94 72 10 	call	0x20e4	; 0x20e4 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PortB, Pin1, Pin_OutPut);
    2bf4:	81 e0       	ldi	r24, 0x01	; 1
    2bf6:	61 e0       	ldi	r22, 0x01	; 1
    2bf8:	41 e0       	ldi	r20, 0x01	; 1
    2bfa:	0e 94 72 10 	call	0x20e4	; 0x20e4 <DIO_vSetPinDirection>
}
    2bfe:	cf 91       	pop	r28
    2c00:	df 91       	pop	r29
    2c02:	08 95       	ret

00002c04 <_7Segma_vEnable1>:
//-----------enable 7Segma 1 -----------
void _7Segma_vEnable1(){
    2c04:	df 93       	push	r29
    2c06:	cf 93       	push	r28
    2c08:	cd b7       	in	r28, 0x3d	; 61
    2c0a:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPinValue(PortB, Pin1, Pin_High);
    2c0c:	81 e0       	ldi	r24, 0x01	; 1
    2c0e:	61 e0       	ldi	r22, 0x01	; 1
    2c10:	41 e0       	ldi	r20, 0x01	; 1
    2c12:	0e 94 75 11 	call	0x22ea	; 0x22ea <DIO_vSetPinValue>
}
    2c16:	cf 91       	pop	r28
    2c18:	df 91       	pop	r29
    2c1a:	08 95       	ret

00002c1c <_7Segma_vEnable2>:
//-----------enable 7Segma 2 -----------
void _7Segma_vEnable2(){
    2c1c:	df 93       	push	r29
    2c1e:	cf 93       	push	r28
    2c20:	cd b7       	in	r28, 0x3d	; 61
    2c22:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPinValue(PortB, Pin2, Pin_High);
    2c24:	81 e0       	ldi	r24, 0x01	; 1
    2c26:	62 e0       	ldi	r22, 0x02	; 2
    2c28:	41 e0       	ldi	r20, 0x01	; 1
    2c2a:	0e 94 75 11 	call	0x22ea	; 0x22ea <DIO_vSetPinValue>
}
    2c2e:	cf 91       	pop	r28
    2c30:	df 91       	pop	r29
    2c32:	08 95       	ret

00002c34 <_7Segma_vDisable1>:
//-----------Disable 7Segma 1
void _7Segma_vDisable1(){
    2c34:	df 93       	push	r29
    2c36:	cf 93       	push	r28
    2c38:	cd b7       	in	r28, 0x3d	; 61
    2c3a:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPinValue(PortB, Pin1, Pin_Low);
    2c3c:	81 e0       	ldi	r24, 0x01	; 1
    2c3e:	61 e0       	ldi	r22, 0x01	; 1
    2c40:	40 e0       	ldi	r20, 0x00	; 0
    2c42:	0e 94 75 11 	call	0x22ea	; 0x22ea <DIO_vSetPinValue>
}
    2c46:	cf 91       	pop	r28
    2c48:	df 91       	pop	r29
    2c4a:	08 95       	ret

00002c4c <_7Segma_vDisable2>:
//-----------Disable 7Segma 2
void _7Segma_vDisable2(){
    2c4c:	df 93       	push	r29
    2c4e:	cf 93       	push	r28
    2c50:	cd b7       	in	r28, 0x3d	; 61
    2c52:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPinValue(PortB, Pin2, Pin_Low);
    2c54:	81 e0       	ldi	r24, 0x01	; 1
    2c56:	62 e0       	ldi	r22, 0x02	; 2
    2c58:	40 e0       	ldi	r20, 0x00	; 0
    2c5a:	0e 94 75 11 	call	0x22ea	; 0x22ea <DIO_vSetPinValue>
}
    2c5e:	cf 91       	pop	r28
    2c60:	df 91       	pop	r29
    2c62:	08 95       	ret

00002c64 <_7Segma_vEnableDot>:
//------------enable 7Segma Dot
void _7Segma_vEnableDot(){
    2c64:	df 93       	push	r29
    2c66:	cf 93       	push	r28
    2c68:	cd b7       	in	r28, 0x3d	; 61
    2c6a:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPinValue(PortB, Pin3, Pin_High);
    2c6c:	81 e0       	ldi	r24, 0x01	; 1
    2c6e:	63 e0       	ldi	r22, 0x03	; 3
    2c70:	41 e0       	ldi	r20, 0x01	; 1
    2c72:	0e 94 75 11 	call	0x22ea	; 0x22ea <DIO_vSetPinValue>
}
    2c76:	cf 91       	pop	r28
    2c78:	df 91       	pop	r29
    2c7a:	08 95       	ret

00002c7c <_7Segma_vDisbleDot>:
//------------Disable 7Segma Dot
void _7Segma_vDisbleDot(){
    2c7c:	df 93       	push	r29
    2c7e:	cf 93       	push	r28
    2c80:	cd b7       	in	r28, 0x3d	; 61
    2c82:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPinValue(PortB, Pin3, Pin_Low);
    2c84:	81 e0       	ldi	r24, 0x01	; 1
    2c86:	63 e0       	ldi	r22, 0x03	; 3
    2c88:	40 e0       	ldi	r20, 0x00	; 0
    2c8a:	0e 94 75 11 	call	0x22ea	; 0x22ea <DIO_vSetPinValue>
}
    2c8e:	cf 91       	pop	r28
    2c90:	df 91       	pop	r29
    2c92:	08 95       	ret

00002c94 <_7Segma_vShow>:
//----------Show Value on 7Segma ----------
void _7Segma_vShow(u8 loc_u8SegmaShowNumber){
    2c94:	df 93       	push	r29
    2c96:	cf 93       	push	r28
    2c98:	0f 92       	push	r0
    2c9a:	cd b7       	in	r28, 0x3d	; 61
    2c9c:	de b7       	in	r29, 0x3e	; 62
    2c9e:	89 83       	std	Y+1, r24	; 0x01
	loc_u8SegmaShowNumber= (loc_u8SegmaShowNumber<<4);
    2ca0:	89 81       	ldd	r24, Y+1	; 0x01
    2ca2:	82 95       	swap	r24
    2ca4:	80 7f       	andi	r24, 0xF0	; 240
    2ca6:	89 83       	std	Y+1, r24	; 0x01
	DIO_vSetPortValue(PortA, loc_u8SegmaShowNumber);
    2ca8:	80 e0       	ldi	r24, 0x00	; 0
    2caa:	69 81       	ldd	r22, Y+1	; 0x01
    2cac:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <DIO_vSetPortValue>
}
    2cb0:	0f 90       	pop	r0
    2cb2:	cf 91       	pop	r28
    2cb4:	df 91       	pop	r29
    2cb6:	08 95       	ret

00002cb8 <_7Segma_vPrintNumber1>:
//------------ this function take a u8 number and print it on the left 7Segme------
void _7Segma_vPrintNumber1(u8 loc_u8SegmaPrintNumber){
    2cb8:	df 93       	push	r29
    2cba:	cf 93       	push	r28
    2cbc:	0f 92       	push	r0
    2cbe:	cd b7       	in	r28, 0x3d	; 61
    2cc0:	de b7       	in	r29, 0x3e	; 62
    2cc2:	89 83       	std	Y+1, r24	; 0x01
	_7Segma_vEnable1();
    2cc4:	0e 94 02 16 	call	0x2c04	; 0x2c04 <_7Segma_vEnable1>
	_7Segma_vShow(loc_u8SegmaPrintNumber);
    2cc8:	89 81       	ldd	r24, Y+1	; 0x01
    2cca:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <_7Segma_vShow>
	_7Segma_vDisable1();
    2cce:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_7Segma_vDisable1>
}
    2cd2:	0f 90       	pop	r0
    2cd4:	cf 91       	pop	r28
    2cd6:	df 91       	pop	r29
    2cd8:	08 95       	ret

00002cda <_7Segma_vPrintNumber2>:
//------------ this function take a u8 number and print it on the right 7Segme-----
void _7Segma_vPrintNumber2(u8 loc_u8SegmaPrintNumber){
    2cda:	df 93       	push	r29
    2cdc:	cf 93       	push	r28
    2cde:	0f 92       	push	r0
    2ce0:	cd b7       	in	r28, 0x3d	; 61
    2ce2:	de b7       	in	r29, 0x3e	; 62
    2ce4:	89 83       	std	Y+1, r24	; 0x01
	_7Segma_vEnable2();
    2ce6:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <_7Segma_vEnable2>
	_7Segma_vShow(loc_u8SegmaPrintNumber);
    2cea:	89 81       	ldd	r24, Y+1	; 0x01
    2cec:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <_7Segma_vShow>
	_7Segma_vDisable2();
    2cf0:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <_7Segma_vDisable2>
}
    2cf4:	0f 90       	pop	r0
    2cf6:	cf 91       	pop	r28
    2cf8:	df 91       	pop	r29
    2cfa:	08 95       	ret

00002cfc <PushButton_u8Button0>:
*
* \Parameters (in) : None
* \Parameters (out): u8
* \Return value:   : 0 or 1
*******************************************************************************/
u8 PushButton_u8Button0(){
    2cfc:	df 93       	push	r29
    2cfe:	cf 93       	push	r28
    2d00:	cd b7       	in	r28, 0x3d	; 61
    2d02:	de b7       	in	r29, 0x3e	; 62
    2d04:	2f 97       	sbiw	r28, 0x0f	; 15
    2d06:	0f b6       	in	r0, 0x3f	; 63
    2d08:	f8 94       	cli
    2d0a:	de bf       	out	0x3e, r29	; 62
    2d0c:	0f be       	out	0x3f, r0	; 63
    2d0e:	cd bf       	out	0x3d, r28	; 61
	DIO_vSetPinDirection(PortB, Pin0, Pin_InPut);
    2d10:	81 e0       	ldi	r24, 0x01	; 1
    2d12:	60 e0       	ldi	r22, 0x00	; 0
    2d14:	40 e0       	ldi	r20, 0x00	; 0
    2d16:	0e 94 72 10 	call	0x20e4	; 0x20e4 <DIO_vSetPinDirection>
	if(DIO_u8PGetPinValue(PortB,Pin0)){
    2d1a:	81 e0       	ldi	r24, 0x01	; 1
    2d1c:	60 e0       	ldi	r22, 0x00	; 0
    2d1e:	0e 94 50 12 	call	0x24a0	; 0x24a0 <DIO_u8PGetPinValue>
    2d22:	88 23       	and	r24, r24
    2d24:	09 f4       	brne	.+2      	; 0x2d28 <PushButton_u8Button0+0x2c>
    2d26:	7b c0       	rjmp	.+246    	; 0x2e1e <PushButton_u8Button0+0x122>
    2d28:	80 e0       	ldi	r24, 0x00	; 0
    2d2a:	90 e0       	ldi	r25, 0x00	; 0
    2d2c:	a8 ec       	ldi	r26, 0xC8	; 200
    2d2e:	b1 e4       	ldi	r27, 0x41	; 65
    2d30:	8b 87       	std	Y+11, r24	; 0x0b
    2d32:	9c 87       	std	Y+12, r25	; 0x0c
    2d34:	ad 87       	std	Y+13, r26	; 0x0d
    2d36:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d38:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d40:	20 e0       	ldi	r18, 0x00	; 0
    2d42:	30 e0       	ldi	r19, 0x00	; 0
    2d44:	4a e7       	ldi	r20, 0x7A	; 122
    2d46:	55 e4       	ldi	r21, 0x45	; 69
    2d48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d4c:	dc 01       	movw	r26, r24
    2d4e:	cb 01       	movw	r24, r22
    2d50:	8f 83       	std	Y+7, r24	; 0x07
    2d52:	98 87       	std	Y+8, r25	; 0x08
    2d54:	a9 87       	std	Y+9, r26	; 0x09
    2d56:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d58:	6f 81       	ldd	r22, Y+7	; 0x07
    2d5a:	78 85       	ldd	r23, Y+8	; 0x08
    2d5c:	89 85       	ldd	r24, Y+9	; 0x09
    2d5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d60:	20 e0       	ldi	r18, 0x00	; 0
    2d62:	30 e0       	ldi	r19, 0x00	; 0
    2d64:	40 e8       	ldi	r20, 0x80	; 128
    2d66:	5f e3       	ldi	r21, 0x3F	; 63
    2d68:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d6c:	88 23       	and	r24, r24
    2d6e:	2c f4       	brge	.+10     	; 0x2d7a <PushButton_u8Button0+0x7e>
		__ticks = 1;
    2d70:	81 e0       	ldi	r24, 0x01	; 1
    2d72:	90 e0       	ldi	r25, 0x00	; 0
    2d74:	9e 83       	std	Y+6, r25	; 0x06
    2d76:	8d 83       	std	Y+5, r24	; 0x05
    2d78:	3f c0       	rjmp	.+126    	; 0x2df8 <PushButton_u8Button0+0xfc>
	else if (__tmp > 65535)
    2d7a:	6f 81       	ldd	r22, Y+7	; 0x07
    2d7c:	78 85       	ldd	r23, Y+8	; 0x08
    2d7e:	89 85       	ldd	r24, Y+9	; 0x09
    2d80:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d82:	20 e0       	ldi	r18, 0x00	; 0
    2d84:	3f ef       	ldi	r19, 0xFF	; 255
    2d86:	4f e7       	ldi	r20, 0x7F	; 127
    2d88:	57 e4       	ldi	r21, 0x47	; 71
    2d8a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d8e:	18 16       	cp	r1, r24
    2d90:	4c f5       	brge	.+82     	; 0x2de4 <PushButton_u8Button0+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d92:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d94:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d96:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d98:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d9a:	20 e0       	ldi	r18, 0x00	; 0
    2d9c:	30 e0       	ldi	r19, 0x00	; 0
    2d9e:	40 e2       	ldi	r20, 0x20	; 32
    2da0:	51 e4       	ldi	r21, 0x41	; 65
    2da2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2da6:	dc 01       	movw	r26, r24
    2da8:	cb 01       	movw	r24, r22
    2daa:	bc 01       	movw	r22, r24
    2dac:	cd 01       	movw	r24, r26
    2dae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2db2:	dc 01       	movw	r26, r24
    2db4:	cb 01       	movw	r24, r22
    2db6:	9e 83       	std	Y+6, r25	; 0x06
    2db8:	8d 83       	std	Y+5, r24	; 0x05
    2dba:	0f c0       	rjmp	.+30     	; 0x2dda <PushButton_u8Button0+0xde>
    2dbc:	80 e9       	ldi	r24, 0x90	; 144
    2dbe:	91 e0       	ldi	r25, 0x01	; 1
    2dc0:	9c 83       	std	Y+4, r25	; 0x04
    2dc2:	8b 83       	std	Y+3, r24	; 0x03
    2dc4:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc6:	9c 81       	ldd	r25, Y+4	; 0x04
    2dc8:	01 97       	sbiw	r24, 0x01	; 1
    2dca:	f1 f7       	brne	.-4      	; 0x2dc8 <PushButton_u8Button0+0xcc>
    2dcc:	9c 83       	std	Y+4, r25	; 0x04
    2dce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dd0:	8d 81       	ldd	r24, Y+5	; 0x05
    2dd2:	9e 81       	ldd	r25, Y+6	; 0x06
    2dd4:	01 97       	sbiw	r24, 0x01	; 1
    2dd6:	9e 83       	std	Y+6, r25	; 0x06
    2dd8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dda:	8d 81       	ldd	r24, Y+5	; 0x05
    2ddc:	9e 81       	ldd	r25, Y+6	; 0x06
    2dde:	00 97       	sbiw	r24, 0x00	; 0
    2de0:	69 f7       	brne	.-38     	; 0x2dbc <PushButton_u8Button0+0xc0>
    2de2:	14 c0       	rjmp	.+40     	; 0x2e0c <PushButton_u8Button0+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2de4:	6f 81       	ldd	r22, Y+7	; 0x07
    2de6:	78 85       	ldd	r23, Y+8	; 0x08
    2de8:	89 85       	ldd	r24, Y+9	; 0x09
    2dea:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2df0:	dc 01       	movw	r26, r24
    2df2:	cb 01       	movw	r24, r22
    2df4:	9e 83       	std	Y+6, r25	; 0x06
    2df6:	8d 83       	std	Y+5, r24	; 0x05
    2df8:	8d 81       	ldd	r24, Y+5	; 0x05
    2dfa:	9e 81       	ldd	r25, Y+6	; 0x06
    2dfc:	9a 83       	std	Y+2, r25	; 0x02
    2dfe:	89 83       	std	Y+1, r24	; 0x01
    2e00:	89 81       	ldd	r24, Y+1	; 0x01
    2e02:	9a 81       	ldd	r25, Y+2	; 0x02
    2e04:	01 97       	sbiw	r24, 0x01	; 1
    2e06:	f1 f7       	brne	.-4      	; 0x2e04 <PushButton_u8Button0+0x108>
    2e08:	9a 83       	std	Y+2, r25	; 0x02
    2e0a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(25);
		if(DIO_u8PGetPinValue(PortB,Pin0)){
    2e0c:	81 e0       	ldi	r24, 0x01	; 1
    2e0e:	60 e0       	ldi	r22, 0x00	; 0
    2e10:	0e 94 50 12 	call	0x24a0	; 0x24a0 <DIO_u8PGetPinValue>
    2e14:	88 23       	and	r24, r24
    2e16:	19 f0       	breq	.+6      	; 0x2e1e <PushButton_u8Button0+0x122>
			return 1;
    2e18:	81 e0       	ldi	r24, 0x01	; 1
    2e1a:	8f 87       	std	Y+15, r24	; 0x0f
    2e1c:	01 c0       	rjmp	.+2      	; 0x2e20 <PushButton_u8Button0+0x124>
		}
	}
	return 0;
    2e1e:	1f 86       	std	Y+15, r1	; 0x0f
    2e20:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    2e22:	2f 96       	adiw	r28, 0x0f	; 15
    2e24:	0f b6       	in	r0, 0x3f	; 63
    2e26:	f8 94       	cli
    2e28:	de bf       	out	0x3e, r29	; 62
    2e2a:	0f be       	out	0x3f, r0	; 63
    2e2c:	cd bf       	out	0x3d, r28	; 61
    2e2e:	cf 91       	pop	r28
    2e30:	df 91       	pop	r29
    2e32:	08 95       	ret

00002e34 <PushButton_u8Button1>:
*
* \Parameters (in) : None
* \Parameters (out): u8
* \Return value:   : 0 or 1
*******************************************************************************/
u8 PushButton_u8Button1(){
    2e34:	df 93       	push	r29
    2e36:	cf 93       	push	r28
    2e38:	cd b7       	in	r28, 0x3d	; 61
    2e3a:	de b7       	in	r29, 0x3e	; 62
    2e3c:	2f 97       	sbiw	r28, 0x0f	; 15
    2e3e:	0f b6       	in	r0, 0x3f	; 63
    2e40:	f8 94       	cli
    2e42:	de bf       	out	0x3e, r29	; 62
    2e44:	0f be       	out	0x3f, r0	; 63
    2e46:	cd bf       	out	0x3d, r28	; 61
	DIO_vSetPinDirection(PortD, Pin6, Pin_InPut);
    2e48:	83 e0       	ldi	r24, 0x03	; 3
    2e4a:	66 e0       	ldi	r22, 0x06	; 6
    2e4c:	40 e0       	ldi	r20, 0x00	; 0
    2e4e:	0e 94 72 10 	call	0x20e4	; 0x20e4 <DIO_vSetPinDirection>
	if(DIO_u8PGetPinValue(PortD,Pin6)){
    2e52:	83 e0       	ldi	r24, 0x03	; 3
    2e54:	66 e0       	ldi	r22, 0x06	; 6
    2e56:	0e 94 50 12 	call	0x24a0	; 0x24a0 <DIO_u8PGetPinValue>
    2e5a:	88 23       	and	r24, r24
    2e5c:	09 f4       	brne	.+2      	; 0x2e60 <PushButton_u8Button1+0x2c>
    2e5e:	7b c0       	rjmp	.+246    	; 0x2f56 <PushButton_u8Button1+0x122>
    2e60:	80 e0       	ldi	r24, 0x00	; 0
    2e62:	90 e0       	ldi	r25, 0x00	; 0
    2e64:	a8 ec       	ldi	r26, 0xC8	; 200
    2e66:	b1 e4       	ldi	r27, 0x41	; 65
    2e68:	8b 87       	std	Y+11, r24	; 0x0b
    2e6a:	9c 87       	std	Y+12, r25	; 0x0c
    2e6c:	ad 87       	std	Y+13, r26	; 0x0d
    2e6e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e70:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e72:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e74:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e76:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e78:	20 e0       	ldi	r18, 0x00	; 0
    2e7a:	30 e0       	ldi	r19, 0x00	; 0
    2e7c:	4a e7       	ldi	r20, 0x7A	; 122
    2e7e:	55 e4       	ldi	r21, 0x45	; 69
    2e80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e84:	dc 01       	movw	r26, r24
    2e86:	cb 01       	movw	r24, r22
    2e88:	8f 83       	std	Y+7, r24	; 0x07
    2e8a:	98 87       	std	Y+8, r25	; 0x08
    2e8c:	a9 87       	std	Y+9, r26	; 0x09
    2e8e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e90:	6f 81       	ldd	r22, Y+7	; 0x07
    2e92:	78 85       	ldd	r23, Y+8	; 0x08
    2e94:	89 85       	ldd	r24, Y+9	; 0x09
    2e96:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e98:	20 e0       	ldi	r18, 0x00	; 0
    2e9a:	30 e0       	ldi	r19, 0x00	; 0
    2e9c:	40 e8       	ldi	r20, 0x80	; 128
    2e9e:	5f e3       	ldi	r21, 0x3F	; 63
    2ea0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ea4:	88 23       	and	r24, r24
    2ea6:	2c f4       	brge	.+10     	; 0x2eb2 <PushButton_u8Button1+0x7e>
		__ticks = 1;
    2ea8:	81 e0       	ldi	r24, 0x01	; 1
    2eaa:	90 e0       	ldi	r25, 0x00	; 0
    2eac:	9e 83       	std	Y+6, r25	; 0x06
    2eae:	8d 83       	std	Y+5, r24	; 0x05
    2eb0:	3f c0       	rjmp	.+126    	; 0x2f30 <PushButton_u8Button1+0xfc>
	else if (__tmp > 65535)
    2eb2:	6f 81       	ldd	r22, Y+7	; 0x07
    2eb4:	78 85       	ldd	r23, Y+8	; 0x08
    2eb6:	89 85       	ldd	r24, Y+9	; 0x09
    2eb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eba:	20 e0       	ldi	r18, 0x00	; 0
    2ebc:	3f ef       	ldi	r19, 0xFF	; 255
    2ebe:	4f e7       	ldi	r20, 0x7F	; 127
    2ec0:	57 e4       	ldi	r21, 0x47	; 71
    2ec2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ec6:	18 16       	cp	r1, r24
    2ec8:	4c f5       	brge	.+82     	; 0x2f1c <PushButton_u8Button1+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eca:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ecc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ece:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ed0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ed2:	20 e0       	ldi	r18, 0x00	; 0
    2ed4:	30 e0       	ldi	r19, 0x00	; 0
    2ed6:	40 e2       	ldi	r20, 0x20	; 32
    2ed8:	51 e4       	ldi	r21, 0x41	; 65
    2eda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ede:	dc 01       	movw	r26, r24
    2ee0:	cb 01       	movw	r24, r22
    2ee2:	bc 01       	movw	r22, r24
    2ee4:	cd 01       	movw	r24, r26
    2ee6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eea:	dc 01       	movw	r26, r24
    2eec:	cb 01       	movw	r24, r22
    2eee:	9e 83       	std	Y+6, r25	; 0x06
    2ef0:	8d 83       	std	Y+5, r24	; 0x05
    2ef2:	0f c0       	rjmp	.+30     	; 0x2f12 <PushButton_u8Button1+0xde>
    2ef4:	80 e9       	ldi	r24, 0x90	; 144
    2ef6:	91 e0       	ldi	r25, 0x01	; 1
    2ef8:	9c 83       	std	Y+4, r25	; 0x04
    2efa:	8b 83       	std	Y+3, r24	; 0x03
    2efc:	8b 81       	ldd	r24, Y+3	; 0x03
    2efe:	9c 81       	ldd	r25, Y+4	; 0x04
    2f00:	01 97       	sbiw	r24, 0x01	; 1
    2f02:	f1 f7       	brne	.-4      	; 0x2f00 <PushButton_u8Button1+0xcc>
    2f04:	9c 83       	std	Y+4, r25	; 0x04
    2f06:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f08:	8d 81       	ldd	r24, Y+5	; 0x05
    2f0a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f0c:	01 97       	sbiw	r24, 0x01	; 1
    2f0e:	9e 83       	std	Y+6, r25	; 0x06
    2f10:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f12:	8d 81       	ldd	r24, Y+5	; 0x05
    2f14:	9e 81       	ldd	r25, Y+6	; 0x06
    2f16:	00 97       	sbiw	r24, 0x00	; 0
    2f18:	69 f7       	brne	.-38     	; 0x2ef4 <PushButton_u8Button1+0xc0>
    2f1a:	14 c0       	rjmp	.+40     	; 0x2f44 <PushButton_u8Button1+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f1c:	6f 81       	ldd	r22, Y+7	; 0x07
    2f1e:	78 85       	ldd	r23, Y+8	; 0x08
    2f20:	89 85       	ldd	r24, Y+9	; 0x09
    2f22:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f28:	dc 01       	movw	r26, r24
    2f2a:	cb 01       	movw	r24, r22
    2f2c:	9e 83       	std	Y+6, r25	; 0x06
    2f2e:	8d 83       	std	Y+5, r24	; 0x05
    2f30:	8d 81       	ldd	r24, Y+5	; 0x05
    2f32:	9e 81       	ldd	r25, Y+6	; 0x06
    2f34:	9a 83       	std	Y+2, r25	; 0x02
    2f36:	89 83       	std	Y+1, r24	; 0x01
    2f38:	89 81       	ldd	r24, Y+1	; 0x01
    2f3a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f3c:	01 97       	sbiw	r24, 0x01	; 1
    2f3e:	f1 f7       	brne	.-4      	; 0x2f3c <PushButton_u8Button1+0x108>
    2f40:	9a 83       	std	Y+2, r25	; 0x02
    2f42:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(25);
		if(DIO_u8PGetPinValue(PortD,Pin6)){
    2f44:	83 e0       	ldi	r24, 0x03	; 3
    2f46:	66 e0       	ldi	r22, 0x06	; 6
    2f48:	0e 94 50 12 	call	0x24a0	; 0x24a0 <DIO_u8PGetPinValue>
    2f4c:	88 23       	and	r24, r24
    2f4e:	19 f0       	breq	.+6      	; 0x2f56 <PushButton_u8Button1+0x122>
			return 1;
    2f50:	81 e0       	ldi	r24, 0x01	; 1
    2f52:	8f 87       	std	Y+15, r24	; 0x0f
    2f54:	01 c0       	rjmp	.+2      	; 0x2f58 <PushButton_u8Button1+0x124>
		}
	}
	return 0;
    2f56:	1f 86       	std	Y+15, r1	; 0x0f
    2f58:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    2f5a:	2f 96       	adiw	r28, 0x0f	; 15
    2f5c:	0f b6       	in	r0, 0x3f	; 63
    2f5e:	f8 94       	cli
    2f60:	de bf       	out	0x3e, r29	; 62
    2f62:	0f be       	out	0x3f, r0	; 63
    2f64:	cd bf       	out	0x3d, r28	; 61
    2f66:	cf 91       	pop	r28
    2f68:	df 91       	pop	r29
    2f6a:	08 95       	ret

00002f6c <PushButton_u8Button2>:
*
* \Parameters (in) : None
* \Parameters (out): u8
* \Return value:   : 0 or 1
*******************************************************************************/
u8 PushButton_u8Button2(){
    2f6c:	df 93       	push	r29
    2f6e:	cf 93       	push	r28
    2f70:	cd b7       	in	r28, 0x3d	; 61
    2f72:	de b7       	in	r29, 0x3e	; 62
    2f74:	2f 97       	sbiw	r28, 0x0f	; 15
    2f76:	0f b6       	in	r0, 0x3f	; 63
    2f78:	f8 94       	cli
    2f7a:	de bf       	out	0x3e, r29	; 62
    2f7c:	0f be       	out	0x3f, r0	; 63
    2f7e:	cd bf       	out	0x3d, r28	; 61
	DIO_vSetPinDirection(PortD, Pin2, Pin_InPut);
    2f80:	83 e0       	ldi	r24, 0x03	; 3
    2f82:	62 e0       	ldi	r22, 0x02	; 2
    2f84:	40 e0       	ldi	r20, 0x00	; 0
    2f86:	0e 94 72 10 	call	0x20e4	; 0x20e4 <DIO_vSetPinDirection>
	if(DIO_u8PGetPinValue(PortD,Pin2)){
    2f8a:	83 e0       	ldi	r24, 0x03	; 3
    2f8c:	62 e0       	ldi	r22, 0x02	; 2
    2f8e:	0e 94 50 12 	call	0x24a0	; 0x24a0 <DIO_u8PGetPinValue>
    2f92:	88 23       	and	r24, r24
    2f94:	09 f4       	brne	.+2      	; 0x2f98 <PushButton_u8Button2+0x2c>
    2f96:	7b c0       	rjmp	.+246    	; 0x308e <PushButton_u8Button2+0x122>
    2f98:	80 e0       	ldi	r24, 0x00	; 0
    2f9a:	90 e0       	ldi	r25, 0x00	; 0
    2f9c:	a8 ec       	ldi	r26, 0xC8	; 200
    2f9e:	b1 e4       	ldi	r27, 0x41	; 65
    2fa0:	8b 87       	std	Y+11, r24	; 0x0b
    2fa2:	9c 87       	std	Y+12, r25	; 0x0c
    2fa4:	ad 87       	std	Y+13, r26	; 0x0d
    2fa6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fa8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2faa:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fac:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fae:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fb0:	20 e0       	ldi	r18, 0x00	; 0
    2fb2:	30 e0       	ldi	r19, 0x00	; 0
    2fb4:	4a e7       	ldi	r20, 0x7A	; 122
    2fb6:	55 e4       	ldi	r21, 0x45	; 69
    2fb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fbc:	dc 01       	movw	r26, r24
    2fbe:	cb 01       	movw	r24, r22
    2fc0:	8f 83       	std	Y+7, r24	; 0x07
    2fc2:	98 87       	std	Y+8, r25	; 0x08
    2fc4:	a9 87       	std	Y+9, r26	; 0x09
    2fc6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2fc8:	6f 81       	ldd	r22, Y+7	; 0x07
    2fca:	78 85       	ldd	r23, Y+8	; 0x08
    2fcc:	89 85       	ldd	r24, Y+9	; 0x09
    2fce:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fd0:	20 e0       	ldi	r18, 0x00	; 0
    2fd2:	30 e0       	ldi	r19, 0x00	; 0
    2fd4:	40 e8       	ldi	r20, 0x80	; 128
    2fd6:	5f e3       	ldi	r21, 0x3F	; 63
    2fd8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2fdc:	88 23       	and	r24, r24
    2fde:	2c f4       	brge	.+10     	; 0x2fea <PushButton_u8Button2+0x7e>
		__ticks = 1;
    2fe0:	81 e0       	ldi	r24, 0x01	; 1
    2fe2:	90 e0       	ldi	r25, 0x00	; 0
    2fe4:	9e 83       	std	Y+6, r25	; 0x06
    2fe6:	8d 83       	std	Y+5, r24	; 0x05
    2fe8:	3f c0       	rjmp	.+126    	; 0x3068 <PushButton_u8Button2+0xfc>
	else if (__tmp > 65535)
    2fea:	6f 81       	ldd	r22, Y+7	; 0x07
    2fec:	78 85       	ldd	r23, Y+8	; 0x08
    2fee:	89 85       	ldd	r24, Y+9	; 0x09
    2ff0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ff2:	20 e0       	ldi	r18, 0x00	; 0
    2ff4:	3f ef       	ldi	r19, 0xFF	; 255
    2ff6:	4f e7       	ldi	r20, 0x7F	; 127
    2ff8:	57 e4       	ldi	r21, 0x47	; 71
    2ffa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ffe:	18 16       	cp	r1, r24
    3000:	4c f5       	brge	.+82     	; 0x3054 <PushButton_u8Button2+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3002:	6b 85       	ldd	r22, Y+11	; 0x0b
    3004:	7c 85       	ldd	r23, Y+12	; 0x0c
    3006:	8d 85       	ldd	r24, Y+13	; 0x0d
    3008:	9e 85       	ldd	r25, Y+14	; 0x0e
    300a:	20 e0       	ldi	r18, 0x00	; 0
    300c:	30 e0       	ldi	r19, 0x00	; 0
    300e:	40 e2       	ldi	r20, 0x20	; 32
    3010:	51 e4       	ldi	r21, 0x41	; 65
    3012:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3016:	dc 01       	movw	r26, r24
    3018:	cb 01       	movw	r24, r22
    301a:	bc 01       	movw	r22, r24
    301c:	cd 01       	movw	r24, r26
    301e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3022:	dc 01       	movw	r26, r24
    3024:	cb 01       	movw	r24, r22
    3026:	9e 83       	std	Y+6, r25	; 0x06
    3028:	8d 83       	std	Y+5, r24	; 0x05
    302a:	0f c0       	rjmp	.+30     	; 0x304a <PushButton_u8Button2+0xde>
    302c:	80 e9       	ldi	r24, 0x90	; 144
    302e:	91 e0       	ldi	r25, 0x01	; 1
    3030:	9c 83       	std	Y+4, r25	; 0x04
    3032:	8b 83       	std	Y+3, r24	; 0x03
    3034:	8b 81       	ldd	r24, Y+3	; 0x03
    3036:	9c 81       	ldd	r25, Y+4	; 0x04
    3038:	01 97       	sbiw	r24, 0x01	; 1
    303a:	f1 f7       	brne	.-4      	; 0x3038 <PushButton_u8Button2+0xcc>
    303c:	9c 83       	std	Y+4, r25	; 0x04
    303e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3040:	8d 81       	ldd	r24, Y+5	; 0x05
    3042:	9e 81       	ldd	r25, Y+6	; 0x06
    3044:	01 97       	sbiw	r24, 0x01	; 1
    3046:	9e 83       	std	Y+6, r25	; 0x06
    3048:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    304a:	8d 81       	ldd	r24, Y+5	; 0x05
    304c:	9e 81       	ldd	r25, Y+6	; 0x06
    304e:	00 97       	sbiw	r24, 0x00	; 0
    3050:	69 f7       	brne	.-38     	; 0x302c <PushButton_u8Button2+0xc0>
    3052:	14 c0       	rjmp	.+40     	; 0x307c <PushButton_u8Button2+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3054:	6f 81       	ldd	r22, Y+7	; 0x07
    3056:	78 85       	ldd	r23, Y+8	; 0x08
    3058:	89 85       	ldd	r24, Y+9	; 0x09
    305a:	9a 85       	ldd	r25, Y+10	; 0x0a
    305c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3060:	dc 01       	movw	r26, r24
    3062:	cb 01       	movw	r24, r22
    3064:	9e 83       	std	Y+6, r25	; 0x06
    3066:	8d 83       	std	Y+5, r24	; 0x05
    3068:	8d 81       	ldd	r24, Y+5	; 0x05
    306a:	9e 81       	ldd	r25, Y+6	; 0x06
    306c:	9a 83       	std	Y+2, r25	; 0x02
    306e:	89 83       	std	Y+1, r24	; 0x01
    3070:	89 81       	ldd	r24, Y+1	; 0x01
    3072:	9a 81       	ldd	r25, Y+2	; 0x02
    3074:	01 97       	sbiw	r24, 0x01	; 1
    3076:	f1 f7       	brne	.-4      	; 0x3074 <PushButton_u8Button2+0x108>
    3078:	9a 83       	std	Y+2, r25	; 0x02
    307a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(25);
		if(DIO_u8PGetPinValue(PortD,Pin2)){
    307c:	83 e0       	ldi	r24, 0x03	; 3
    307e:	62 e0       	ldi	r22, 0x02	; 2
    3080:	0e 94 50 12 	call	0x24a0	; 0x24a0 <DIO_u8PGetPinValue>
    3084:	88 23       	and	r24, r24
    3086:	19 f0       	breq	.+6      	; 0x308e <PushButton_u8Button2+0x122>
			return 1;
    3088:	81 e0       	ldi	r24, 0x01	; 1
    308a:	8f 87       	std	Y+15, r24	; 0x0f
    308c:	01 c0       	rjmp	.+2      	; 0x3090 <PushButton_u8Button2+0x124>
		}
	}
	return 0;
    308e:	1f 86       	std	Y+15, r1	; 0x0f
    3090:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    3092:	2f 96       	adiw	r28, 0x0f	; 15
    3094:	0f b6       	in	r0, 0x3f	; 63
    3096:	f8 94       	cli
    3098:	de bf       	out	0x3e, r29	; 62
    309a:	0f be       	out	0x3f, r0	; 63
    309c:	cd bf       	out	0x3d, r28	; 61
    309e:	cf 91       	pop	r28
    30a0:	df 91       	pop	r29
    30a2:	08 95       	ret

000030a4 <PushButton_u8Button1LonPress>:
*
* \Parameters (in) : None
* \Parameters (out): u8
* \Return value:   : 0 or 1
*******************************************************************************/
u8 PushButton_u8Button1LonPress(){
    30a4:	df 93       	push	r29
    30a6:	cf 93       	push	r28
    30a8:	cd b7       	in	r28, 0x3d	; 61
    30aa:	de b7       	in	r29, 0x3e	; 62
    30ac:	2f 97       	sbiw	r28, 0x0f	; 15
    30ae:	0f b6       	in	r0, 0x3f	; 63
    30b0:	f8 94       	cli
    30b2:	de bf       	out	0x3e, r29	; 62
    30b4:	0f be       	out	0x3f, r0	; 63
    30b6:	cd bf       	out	0x3d, r28	; 61
	if(PushButton_u8Button1()){
    30b8:	0e 94 1a 17 	call	0x2e34	; 0x2e34 <PushButton_u8Button1>
    30bc:	88 23       	and	r24, r24
    30be:	09 f4       	brne	.+2      	; 0x30c2 <PushButton_u8Button1LonPress+0x1e>
    30c0:	7b c0       	rjmp	.+246    	; 0x31b8 <PushButton_u8Button1LonPress+0x114>
    30c2:	72 c0       	rjmp	.+228    	; 0x31a8 <PushButton_u8Button1LonPress+0x104>
		while(PushButton_u8Button1()){
    30c4:	80 e0       	ldi	r24, 0x00	; 0
    30c6:	90 e0       	ldi	r25, 0x00	; 0
    30c8:	a0 e2       	ldi	r26, 0x20	; 32
    30ca:	b1 e4       	ldi	r27, 0x41	; 65
    30cc:	8b 87       	std	Y+11, r24	; 0x0b
    30ce:	9c 87       	std	Y+12, r25	; 0x0c
    30d0:	ad 87       	std	Y+13, r26	; 0x0d
    30d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    30d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    30d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    30da:	9e 85       	ldd	r25, Y+14	; 0x0e
    30dc:	20 e0       	ldi	r18, 0x00	; 0
    30de:	30 e0       	ldi	r19, 0x00	; 0
    30e0:	4a e7       	ldi	r20, 0x7A	; 122
    30e2:	55 e4       	ldi	r21, 0x45	; 69
    30e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30e8:	dc 01       	movw	r26, r24
    30ea:	cb 01       	movw	r24, r22
    30ec:	8f 83       	std	Y+7, r24	; 0x07
    30ee:	98 87       	std	Y+8, r25	; 0x08
    30f0:	a9 87       	std	Y+9, r26	; 0x09
    30f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30f4:	6f 81       	ldd	r22, Y+7	; 0x07
    30f6:	78 85       	ldd	r23, Y+8	; 0x08
    30f8:	89 85       	ldd	r24, Y+9	; 0x09
    30fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    30fc:	20 e0       	ldi	r18, 0x00	; 0
    30fe:	30 e0       	ldi	r19, 0x00	; 0
    3100:	40 e8       	ldi	r20, 0x80	; 128
    3102:	5f e3       	ldi	r21, 0x3F	; 63
    3104:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3108:	88 23       	and	r24, r24
    310a:	2c f4       	brge	.+10     	; 0x3116 <PushButton_u8Button1LonPress+0x72>
		__ticks = 1;
    310c:	81 e0       	ldi	r24, 0x01	; 1
    310e:	90 e0       	ldi	r25, 0x00	; 0
    3110:	9e 83       	std	Y+6, r25	; 0x06
    3112:	8d 83       	std	Y+5, r24	; 0x05
    3114:	3f c0       	rjmp	.+126    	; 0x3194 <PushButton_u8Button1LonPress+0xf0>
	else if (__tmp > 65535)
    3116:	6f 81       	ldd	r22, Y+7	; 0x07
    3118:	78 85       	ldd	r23, Y+8	; 0x08
    311a:	89 85       	ldd	r24, Y+9	; 0x09
    311c:	9a 85       	ldd	r25, Y+10	; 0x0a
    311e:	20 e0       	ldi	r18, 0x00	; 0
    3120:	3f ef       	ldi	r19, 0xFF	; 255
    3122:	4f e7       	ldi	r20, 0x7F	; 127
    3124:	57 e4       	ldi	r21, 0x47	; 71
    3126:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    312a:	18 16       	cp	r1, r24
    312c:	4c f5       	brge	.+82     	; 0x3180 <PushButton_u8Button1LonPress+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    312e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3130:	7c 85       	ldd	r23, Y+12	; 0x0c
    3132:	8d 85       	ldd	r24, Y+13	; 0x0d
    3134:	9e 85       	ldd	r25, Y+14	; 0x0e
    3136:	20 e0       	ldi	r18, 0x00	; 0
    3138:	30 e0       	ldi	r19, 0x00	; 0
    313a:	40 e2       	ldi	r20, 0x20	; 32
    313c:	51 e4       	ldi	r21, 0x41	; 65
    313e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3142:	dc 01       	movw	r26, r24
    3144:	cb 01       	movw	r24, r22
    3146:	bc 01       	movw	r22, r24
    3148:	cd 01       	movw	r24, r26
    314a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    314e:	dc 01       	movw	r26, r24
    3150:	cb 01       	movw	r24, r22
    3152:	9e 83       	std	Y+6, r25	; 0x06
    3154:	8d 83       	std	Y+5, r24	; 0x05
    3156:	0f c0       	rjmp	.+30     	; 0x3176 <PushButton_u8Button1LonPress+0xd2>
    3158:	80 e9       	ldi	r24, 0x90	; 144
    315a:	91 e0       	ldi	r25, 0x01	; 1
    315c:	9c 83       	std	Y+4, r25	; 0x04
    315e:	8b 83       	std	Y+3, r24	; 0x03
    3160:	8b 81       	ldd	r24, Y+3	; 0x03
    3162:	9c 81       	ldd	r25, Y+4	; 0x04
    3164:	01 97       	sbiw	r24, 0x01	; 1
    3166:	f1 f7       	brne	.-4      	; 0x3164 <PushButton_u8Button1LonPress+0xc0>
    3168:	9c 83       	std	Y+4, r25	; 0x04
    316a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    316c:	8d 81       	ldd	r24, Y+5	; 0x05
    316e:	9e 81       	ldd	r25, Y+6	; 0x06
    3170:	01 97       	sbiw	r24, 0x01	; 1
    3172:	9e 83       	std	Y+6, r25	; 0x06
    3174:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3176:	8d 81       	ldd	r24, Y+5	; 0x05
    3178:	9e 81       	ldd	r25, Y+6	; 0x06
    317a:	00 97       	sbiw	r24, 0x00	; 0
    317c:	69 f7       	brne	.-38     	; 0x3158 <PushButton_u8Button1LonPress+0xb4>
    317e:	14 c0       	rjmp	.+40     	; 0x31a8 <PushButton_u8Button1LonPress+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3180:	6f 81       	ldd	r22, Y+7	; 0x07
    3182:	78 85       	ldd	r23, Y+8	; 0x08
    3184:	89 85       	ldd	r24, Y+9	; 0x09
    3186:	9a 85       	ldd	r25, Y+10	; 0x0a
    3188:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    318c:	dc 01       	movw	r26, r24
    318e:	cb 01       	movw	r24, r22
    3190:	9e 83       	std	Y+6, r25	; 0x06
    3192:	8d 83       	std	Y+5, r24	; 0x05
    3194:	8d 81       	ldd	r24, Y+5	; 0x05
    3196:	9e 81       	ldd	r25, Y+6	; 0x06
    3198:	9a 83       	std	Y+2, r25	; 0x02
    319a:	89 83       	std	Y+1, r24	; 0x01
    319c:	89 81       	ldd	r24, Y+1	; 0x01
    319e:	9a 81       	ldd	r25, Y+2	; 0x02
    31a0:	01 97       	sbiw	r24, 0x01	; 1
    31a2:	f1 f7       	brne	.-4      	; 0x31a0 <PushButton_u8Button1LonPress+0xfc>
    31a4:	9a 83       	std	Y+2, r25	; 0x02
    31a6:	89 83       	std	Y+1, r24	; 0x01
    31a8:	0e 94 1a 17 	call	0x2e34	; 0x2e34 <PushButton_u8Button1>
    31ac:	88 23       	and	r24, r24
    31ae:	09 f0       	breq	.+2      	; 0x31b2 <PushButton_u8Button1LonPress+0x10e>
    31b0:	89 cf       	rjmp	.-238    	; 0x30c4 <PushButton_u8Button1LonPress+0x20>
			_delay_ms(10);
		}
		return 1;
    31b2:	81 e0       	ldi	r24, 0x01	; 1
    31b4:	8f 87       	std	Y+15, r24	; 0x0f
    31b6:	01 c0       	rjmp	.+2      	; 0x31ba <PushButton_u8Button1LonPress+0x116>
	}
	else{
		return 0;
    31b8:	1f 86       	std	Y+15, r1	; 0x0f
    31ba:	8f 85       	ldd	r24, Y+15	; 0x0f
	}
}
    31bc:	2f 96       	adiw	r28, 0x0f	; 15
    31be:	0f b6       	in	r0, 0x3f	; 63
    31c0:	f8 94       	cli
    31c2:	de bf       	out	0x3e, r29	; 62
    31c4:	0f be       	out	0x3f, r0	; 63
    31c6:	cd bf       	out	0x3d, r28	; 61
    31c8:	cf 91       	pop	r28
    31ca:	df 91       	pop	r29
    31cc:	08 95       	ret

000031ce <PushButton_u8Button2OneSec>:
*
* \Parameters (in) : None
* \Parameters (out): u8
* \Return value:   : 0 or 1
*******************************************************************************/
u8 PushButton_u8Button2OneSec(){
    31ce:	df 93       	push	r29
    31d0:	cf 93       	push	r28
    31d2:	cd b7       	in	r28, 0x3d	; 61
    31d4:	de b7       	in	r29, 0x3e	; 62
    31d6:	60 97       	sbiw	r28, 0x10	; 16
    31d8:	0f b6       	in	r0, 0x3f	; 63
    31da:	f8 94       	cli
    31dc:	de bf       	out	0x3e, r29	; 62
    31de:	0f be       	out	0x3f, r0	; 63
    31e0:	cd bf       	out	0x3d, r28	; 61
	u8 Delay=0;
    31e2:	1f 86       	std	Y+15, r1	; 0x0f
    31e4:	75 c0       	rjmp	.+234    	; 0x32d0 <PushButton_u8Button2OneSec+0x102>
	while(PushButton_u8Button2()){
    31e6:	80 e0       	ldi	r24, 0x00	; 0
    31e8:	90 e0       	ldi	r25, 0x00	; 0
    31ea:	a0 e2       	ldi	r26, 0x20	; 32
    31ec:	b1 e4       	ldi	r27, 0x41	; 65
    31ee:	8b 87       	std	Y+11, r24	; 0x0b
    31f0:	9c 87       	std	Y+12, r25	; 0x0c
    31f2:	ad 87       	std	Y+13, r26	; 0x0d
    31f4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    31f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    31fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    31fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    31fe:	20 e0       	ldi	r18, 0x00	; 0
    3200:	30 e0       	ldi	r19, 0x00	; 0
    3202:	4a e7       	ldi	r20, 0x7A	; 122
    3204:	55 e4       	ldi	r21, 0x45	; 69
    3206:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    320a:	dc 01       	movw	r26, r24
    320c:	cb 01       	movw	r24, r22
    320e:	8f 83       	std	Y+7, r24	; 0x07
    3210:	98 87       	std	Y+8, r25	; 0x08
    3212:	a9 87       	std	Y+9, r26	; 0x09
    3214:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3216:	6f 81       	ldd	r22, Y+7	; 0x07
    3218:	78 85       	ldd	r23, Y+8	; 0x08
    321a:	89 85       	ldd	r24, Y+9	; 0x09
    321c:	9a 85       	ldd	r25, Y+10	; 0x0a
    321e:	20 e0       	ldi	r18, 0x00	; 0
    3220:	30 e0       	ldi	r19, 0x00	; 0
    3222:	40 e8       	ldi	r20, 0x80	; 128
    3224:	5f e3       	ldi	r21, 0x3F	; 63
    3226:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    322a:	88 23       	and	r24, r24
    322c:	2c f4       	brge	.+10     	; 0x3238 <PushButton_u8Button2OneSec+0x6a>
		__ticks = 1;
    322e:	81 e0       	ldi	r24, 0x01	; 1
    3230:	90 e0       	ldi	r25, 0x00	; 0
    3232:	9e 83       	std	Y+6, r25	; 0x06
    3234:	8d 83       	std	Y+5, r24	; 0x05
    3236:	3f c0       	rjmp	.+126    	; 0x32b6 <PushButton_u8Button2OneSec+0xe8>
	else if (__tmp > 65535)
    3238:	6f 81       	ldd	r22, Y+7	; 0x07
    323a:	78 85       	ldd	r23, Y+8	; 0x08
    323c:	89 85       	ldd	r24, Y+9	; 0x09
    323e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3240:	20 e0       	ldi	r18, 0x00	; 0
    3242:	3f ef       	ldi	r19, 0xFF	; 255
    3244:	4f e7       	ldi	r20, 0x7F	; 127
    3246:	57 e4       	ldi	r21, 0x47	; 71
    3248:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    324c:	18 16       	cp	r1, r24
    324e:	4c f5       	brge	.+82     	; 0x32a2 <PushButton_u8Button2OneSec+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3250:	6b 85       	ldd	r22, Y+11	; 0x0b
    3252:	7c 85       	ldd	r23, Y+12	; 0x0c
    3254:	8d 85       	ldd	r24, Y+13	; 0x0d
    3256:	9e 85       	ldd	r25, Y+14	; 0x0e
    3258:	20 e0       	ldi	r18, 0x00	; 0
    325a:	30 e0       	ldi	r19, 0x00	; 0
    325c:	40 e2       	ldi	r20, 0x20	; 32
    325e:	51 e4       	ldi	r21, 0x41	; 65
    3260:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3264:	dc 01       	movw	r26, r24
    3266:	cb 01       	movw	r24, r22
    3268:	bc 01       	movw	r22, r24
    326a:	cd 01       	movw	r24, r26
    326c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3270:	dc 01       	movw	r26, r24
    3272:	cb 01       	movw	r24, r22
    3274:	9e 83       	std	Y+6, r25	; 0x06
    3276:	8d 83       	std	Y+5, r24	; 0x05
    3278:	0f c0       	rjmp	.+30     	; 0x3298 <PushButton_u8Button2OneSec+0xca>
    327a:	80 e9       	ldi	r24, 0x90	; 144
    327c:	91 e0       	ldi	r25, 0x01	; 1
    327e:	9c 83       	std	Y+4, r25	; 0x04
    3280:	8b 83       	std	Y+3, r24	; 0x03
    3282:	8b 81       	ldd	r24, Y+3	; 0x03
    3284:	9c 81       	ldd	r25, Y+4	; 0x04
    3286:	01 97       	sbiw	r24, 0x01	; 1
    3288:	f1 f7       	brne	.-4      	; 0x3286 <PushButton_u8Button2OneSec+0xb8>
    328a:	9c 83       	std	Y+4, r25	; 0x04
    328c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    328e:	8d 81       	ldd	r24, Y+5	; 0x05
    3290:	9e 81       	ldd	r25, Y+6	; 0x06
    3292:	01 97       	sbiw	r24, 0x01	; 1
    3294:	9e 83       	std	Y+6, r25	; 0x06
    3296:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3298:	8d 81       	ldd	r24, Y+5	; 0x05
    329a:	9e 81       	ldd	r25, Y+6	; 0x06
    329c:	00 97       	sbiw	r24, 0x00	; 0
    329e:	69 f7       	brne	.-38     	; 0x327a <PushButton_u8Button2OneSec+0xac>
    32a0:	14 c0       	rjmp	.+40     	; 0x32ca <PushButton_u8Button2OneSec+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32a2:	6f 81       	ldd	r22, Y+7	; 0x07
    32a4:	78 85       	ldd	r23, Y+8	; 0x08
    32a6:	89 85       	ldd	r24, Y+9	; 0x09
    32a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    32aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32ae:	dc 01       	movw	r26, r24
    32b0:	cb 01       	movw	r24, r22
    32b2:	9e 83       	std	Y+6, r25	; 0x06
    32b4:	8d 83       	std	Y+5, r24	; 0x05
    32b6:	8d 81       	ldd	r24, Y+5	; 0x05
    32b8:	9e 81       	ldd	r25, Y+6	; 0x06
    32ba:	9a 83       	std	Y+2, r25	; 0x02
    32bc:	89 83       	std	Y+1, r24	; 0x01
    32be:	89 81       	ldd	r24, Y+1	; 0x01
    32c0:	9a 81       	ldd	r25, Y+2	; 0x02
    32c2:	01 97       	sbiw	r24, 0x01	; 1
    32c4:	f1 f7       	brne	.-4      	; 0x32c2 <PushButton_u8Button2OneSec+0xf4>
    32c6:	9a 83       	std	Y+2, r25	; 0x02
    32c8:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		Delay++;
    32ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    32cc:	8f 5f       	subi	r24, 0xFF	; 255
    32ce:	8f 87       	std	Y+15, r24	; 0x0f
* \Parameters (out): u8
* \Return value:   : 0 or 1
*******************************************************************************/
u8 PushButton_u8Button2OneSec(){
	u8 Delay=0;
	while(PushButton_u8Button2()){
    32d0:	0e 94 b6 17 	call	0x2f6c	; 0x2f6c <PushButton_u8Button2>
    32d4:	88 23       	and	r24, r24
    32d6:	09 f0       	breq	.+2      	; 0x32da <PushButton_u8Button2OneSec+0x10c>
    32d8:	86 cf       	rjmp	.-244    	; 0x31e6 <PushButton_u8Button2OneSec+0x18>
		_delay_ms(10);
		Delay++;
	}
	if(Delay>29){
    32da:	8f 85       	ldd	r24, Y+15	; 0x0f
    32dc:	8e 31       	cpi	r24, 0x1E	; 30
    32de:	18 f0       	brcs	.+6      	; 0x32e6 <PushButton_u8Button2OneSec+0x118>
		return 1;
    32e0:	81 e0       	ldi	r24, 0x01	; 1
    32e2:	88 8b       	std	Y+16, r24	; 0x10
    32e4:	01 c0       	rjmp	.+2      	; 0x32e8 <PushButton_u8Button2OneSec+0x11a>
	}
	else{
		return 0;
    32e6:	18 8a       	std	Y+16, r1	; 0x10
    32e8:	88 89       	ldd	r24, Y+16	; 0x10
	}
}
    32ea:	60 96       	adiw	r28, 0x10	; 16
    32ec:	0f b6       	in	r0, 0x3f	; 63
    32ee:	f8 94       	cli
    32f0:	de bf       	out	0x3e, r29	; 62
    32f2:	0f be       	out	0x3f, r0	; 63
    32f4:	cd bf       	out	0x3d, r28	; 61
    32f6:	cf 91       	pop	r28
    32f8:	df 91       	pop	r29
    32fa:	08 95       	ret

000032fc <LCD_vSendCommand>:
 *
 *  Created on: Dec 30, 2022
 *      Author: a7med
 */
#include "LCD.h"
void LCD_vSendCommand(u8 Loc_u8Command){
    32fc:	df 93       	push	r29
    32fe:	cf 93       	push	r28
    3300:	cd b7       	in	r28, 0x3d	; 61
    3302:	de b7       	in	r29, 0x3e	; 62
    3304:	6d 97       	sbiw	r28, 0x1d	; 29
    3306:	0f b6       	in	r0, 0x3f	; 63
    3308:	f8 94       	cli
    330a:	de bf       	out	0x3e, r29	; 62
    330c:	0f be       	out	0x3f, r0	; 63
    330e:	cd bf       	out	0x3d, r28	; 61
    3310:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_vSetPinValue(PortB, Pin1, Pin_Low);
    3312:	81 e0       	ldi	r24, 0x01	; 1
    3314:	61 e0       	ldi	r22, 0x01	; 1
    3316:	40 e0       	ldi	r20, 0x00	; 0
    3318:	0e 94 75 11 	call	0x22ea	; 0x22ea <DIO_vSetPinValue>
	DIO_vSetPinValue(PortB, Pin2, Pin_Low);
    331c:	81 e0       	ldi	r24, 0x01	; 1
    331e:	62 e0       	ldi	r22, 0x02	; 2
    3320:	40 e0       	ldi	r20, 0x00	; 0
    3322:	0e 94 75 11 	call	0x22ea	; 0x22ea <DIO_vSetPinValue>
	DIO_vSetPinValue(PortB, Pin3, Pin_Low);
    3326:	81 e0       	ldi	r24, 0x01	; 1
    3328:	63 e0       	ldi	r22, 0x03	; 3
    332a:	40 e0       	ldi	r20, 0x00	; 0
    332c:	0e 94 75 11 	call	0x22ea	; 0x22ea <DIO_vSetPinValue>
	//------Send command-------
	DIO_vSetPortValue(PortA,(Loc_u8Command)&0xF0);
    3330:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3332:	98 2f       	mov	r25, r24
    3334:	90 7f       	andi	r25, 0xF0	; 240
    3336:	80 e0       	ldi	r24, 0x00	; 0
    3338:	69 2f       	mov	r22, r25
    333a:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <DIO_vSetPortValue>
	DIO_vSetPinValue(PortB, Pin3, Pin_High);
    333e:	81 e0       	ldi	r24, 0x01	; 1
    3340:	63 e0       	ldi	r22, 0x03	; 3
    3342:	41 e0       	ldi	r20, 0x01	; 1
    3344:	0e 94 75 11 	call	0x22ea	; 0x22ea <DIO_vSetPinValue>
    3348:	80 e0       	ldi	r24, 0x00	; 0
    334a:	90 e0       	ldi	r25, 0x00	; 0
    334c:	a0 e2       	ldi	r26, 0x20	; 32
    334e:	b1 e4       	ldi	r27, 0x41	; 65
    3350:	89 8f       	std	Y+25, r24	; 0x19
    3352:	9a 8f       	std	Y+26, r25	; 0x1a
    3354:	ab 8f       	std	Y+27, r26	; 0x1b
    3356:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3358:	69 8d       	ldd	r22, Y+25	; 0x19
    335a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    335c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    335e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3360:	20 e0       	ldi	r18, 0x00	; 0
    3362:	30 e0       	ldi	r19, 0x00	; 0
    3364:	4a e7       	ldi	r20, 0x7A	; 122
    3366:	55 e4       	ldi	r21, 0x45	; 69
    3368:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    336c:	dc 01       	movw	r26, r24
    336e:	cb 01       	movw	r24, r22
    3370:	8d 8b       	std	Y+21, r24	; 0x15
    3372:	9e 8b       	std	Y+22, r25	; 0x16
    3374:	af 8b       	std	Y+23, r26	; 0x17
    3376:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3378:	6d 89       	ldd	r22, Y+21	; 0x15
    337a:	7e 89       	ldd	r23, Y+22	; 0x16
    337c:	8f 89       	ldd	r24, Y+23	; 0x17
    337e:	98 8d       	ldd	r25, Y+24	; 0x18
    3380:	20 e0       	ldi	r18, 0x00	; 0
    3382:	30 e0       	ldi	r19, 0x00	; 0
    3384:	40 e8       	ldi	r20, 0x80	; 128
    3386:	5f e3       	ldi	r21, 0x3F	; 63
    3388:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    338c:	88 23       	and	r24, r24
    338e:	2c f4       	brge	.+10     	; 0x339a <LCD_vSendCommand+0x9e>
		__ticks = 1;
    3390:	81 e0       	ldi	r24, 0x01	; 1
    3392:	90 e0       	ldi	r25, 0x00	; 0
    3394:	9c 8b       	std	Y+20, r25	; 0x14
    3396:	8b 8b       	std	Y+19, r24	; 0x13
    3398:	3f c0       	rjmp	.+126    	; 0x3418 <LCD_vSendCommand+0x11c>
	else if (__tmp > 65535)
    339a:	6d 89       	ldd	r22, Y+21	; 0x15
    339c:	7e 89       	ldd	r23, Y+22	; 0x16
    339e:	8f 89       	ldd	r24, Y+23	; 0x17
    33a0:	98 8d       	ldd	r25, Y+24	; 0x18
    33a2:	20 e0       	ldi	r18, 0x00	; 0
    33a4:	3f ef       	ldi	r19, 0xFF	; 255
    33a6:	4f e7       	ldi	r20, 0x7F	; 127
    33a8:	57 e4       	ldi	r21, 0x47	; 71
    33aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33ae:	18 16       	cp	r1, r24
    33b0:	4c f5       	brge	.+82     	; 0x3404 <LCD_vSendCommand+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33b2:	69 8d       	ldd	r22, Y+25	; 0x19
    33b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    33b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    33b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    33ba:	20 e0       	ldi	r18, 0x00	; 0
    33bc:	30 e0       	ldi	r19, 0x00	; 0
    33be:	40 e2       	ldi	r20, 0x20	; 32
    33c0:	51 e4       	ldi	r21, 0x41	; 65
    33c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33c6:	dc 01       	movw	r26, r24
    33c8:	cb 01       	movw	r24, r22
    33ca:	bc 01       	movw	r22, r24
    33cc:	cd 01       	movw	r24, r26
    33ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33d2:	dc 01       	movw	r26, r24
    33d4:	cb 01       	movw	r24, r22
    33d6:	9c 8b       	std	Y+20, r25	; 0x14
    33d8:	8b 8b       	std	Y+19, r24	; 0x13
    33da:	0f c0       	rjmp	.+30     	; 0x33fa <LCD_vSendCommand+0xfe>
    33dc:	80 e9       	ldi	r24, 0x90	; 144
    33de:	91 e0       	ldi	r25, 0x01	; 1
    33e0:	9a 8b       	std	Y+18, r25	; 0x12
    33e2:	89 8b       	std	Y+17, r24	; 0x11
    33e4:	89 89       	ldd	r24, Y+17	; 0x11
    33e6:	9a 89       	ldd	r25, Y+18	; 0x12
    33e8:	01 97       	sbiw	r24, 0x01	; 1
    33ea:	f1 f7       	brne	.-4      	; 0x33e8 <LCD_vSendCommand+0xec>
    33ec:	9a 8b       	std	Y+18, r25	; 0x12
    33ee:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33f0:	8b 89       	ldd	r24, Y+19	; 0x13
    33f2:	9c 89       	ldd	r25, Y+20	; 0x14
    33f4:	01 97       	sbiw	r24, 0x01	; 1
    33f6:	9c 8b       	std	Y+20, r25	; 0x14
    33f8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33fa:	8b 89       	ldd	r24, Y+19	; 0x13
    33fc:	9c 89       	ldd	r25, Y+20	; 0x14
    33fe:	00 97       	sbiw	r24, 0x00	; 0
    3400:	69 f7       	brne	.-38     	; 0x33dc <LCD_vSendCommand+0xe0>
    3402:	14 c0       	rjmp	.+40     	; 0x342c <LCD_vSendCommand+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3404:	6d 89       	ldd	r22, Y+21	; 0x15
    3406:	7e 89       	ldd	r23, Y+22	; 0x16
    3408:	8f 89       	ldd	r24, Y+23	; 0x17
    340a:	98 8d       	ldd	r25, Y+24	; 0x18
    340c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3410:	dc 01       	movw	r26, r24
    3412:	cb 01       	movw	r24, r22
    3414:	9c 8b       	std	Y+20, r25	; 0x14
    3416:	8b 8b       	std	Y+19, r24	; 0x13
    3418:	8b 89       	ldd	r24, Y+19	; 0x13
    341a:	9c 89       	ldd	r25, Y+20	; 0x14
    341c:	98 8b       	std	Y+16, r25	; 0x10
    341e:	8f 87       	std	Y+15, r24	; 0x0f
    3420:	8f 85       	ldd	r24, Y+15	; 0x0f
    3422:	98 89       	ldd	r25, Y+16	; 0x10
    3424:	01 97       	sbiw	r24, 0x01	; 1
    3426:	f1 f7       	brne	.-4      	; 0x3424 <LCD_vSendCommand+0x128>
    3428:	98 8b       	std	Y+16, r25	; 0x10
    342a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	DIO_vSetPinValue(PortB, Pin3, Pin_Low);
    342c:	81 e0       	ldi	r24, 0x01	; 1
    342e:	63 e0       	ldi	r22, 0x03	; 3
    3430:	40 e0       	ldi	r20, 0x00	; 0
    3432:	0e 94 75 11 	call	0x22ea	; 0x22ea <DIO_vSetPinValue>
	DIO_vSetPortValue(PortA,(Loc_u8Command<<4));
    3436:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3438:	98 2f       	mov	r25, r24
    343a:	92 95       	swap	r25
    343c:	90 7f       	andi	r25, 0xF0	; 240
    343e:	80 e0       	ldi	r24, 0x00	; 0
    3440:	69 2f       	mov	r22, r25
    3442:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <DIO_vSetPortValue>
	DIO_vSetPinValue(PortB, Pin3, Pin_High);
    3446:	81 e0       	ldi	r24, 0x01	; 1
    3448:	63 e0       	ldi	r22, 0x03	; 3
    344a:	41 e0       	ldi	r20, 0x01	; 1
    344c:	0e 94 75 11 	call	0x22ea	; 0x22ea <DIO_vSetPinValue>
    3450:	80 e0       	ldi	r24, 0x00	; 0
    3452:	90 e0       	ldi	r25, 0x00	; 0
    3454:	a0 e2       	ldi	r26, 0x20	; 32
    3456:	b1 e4       	ldi	r27, 0x41	; 65
    3458:	8b 87       	std	Y+11, r24	; 0x0b
    345a:	9c 87       	std	Y+12, r25	; 0x0c
    345c:	ad 87       	std	Y+13, r26	; 0x0d
    345e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3460:	6b 85       	ldd	r22, Y+11	; 0x0b
    3462:	7c 85       	ldd	r23, Y+12	; 0x0c
    3464:	8d 85       	ldd	r24, Y+13	; 0x0d
    3466:	9e 85       	ldd	r25, Y+14	; 0x0e
    3468:	20 e0       	ldi	r18, 0x00	; 0
    346a:	30 e0       	ldi	r19, 0x00	; 0
    346c:	4a e7       	ldi	r20, 0x7A	; 122
    346e:	55 e4       	ldi	r21, 0x45	; 69
    3470:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3474:	dc 01       	movw	r26, r24
    3476:	cb 01       	movw	r24, r22
    3478:	8f 83       	std	Y+7, r24	; 0x07
    347a:	98 87       	std	Y+8, r25	; 0x08
    347c:	a9 87       	std	Y+9, r26	; 0x09
    347e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3480:	6f 81       	ldd	r22, Y+7	; 0x07
    3482:	78 85       	ldd	r23, Y+8	; 0x08
    3484:	89 85       	ldd	r24, Y+9	; 0x09
    3486:	9a 85       	ldd	r25, Y+10	; 0x0a
    3488:	20 e0       	ldi	r18, 0x00	; 0
    348a:	30 e0       	ldi	r19, 0x00	; 0
    348c:	40 e8       	ldi	r20, 0x80	; 128
    348e:	5f e3       	ldi	r21, 0x3F	; 63
    3490:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3494:	88 23       	and	r24, r24
    3496:	2c f4       	brge	.+10     	; 0x34a2 <LCD_vSendCommand+0x1a6>
		__ticks = 1;
    3498:	81 e0       	ldi	r24, 0x01	; 1
    349a:	90 e0       	ldi	r25, 0x00	; 0
    349c:	9e 83       	std	Y+6, r25	; 0x06
    349e:	8d 83       	std	Y+5, r24	; 0x05
    34a0:	3f c0       	rjmp	.+126    	; 0x3520 <LCD_vSendCommand+0x224>
	else if (__tmp > 65535)
    34a2:	6f 81       	ldd	r22, Y+7	; 0x07
    34a4:	78 85       	ldd	r23, Y+8	; 0x08
    34a6:	89 85       	ldd	r24, Y+9	; 0x09
    34a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    34aa:	20 e0       	ldi	r18, 0x00	; 0
    34ac:	3f ef       	ldi	r19, 0xFF	; 255
    34ae:	4f e7       	ldi	r20, 0x7F	; 127
    34b0:	57 e4       	ldi	r21, 0x47	; 71
    34b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    34b6:	18 16       	cp	r1, r24
    34b8:	4c f5       	brge	.+82     	; 0x350c <LCD_vSendCommand+0x210>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    34bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    34be:	8d 85       	ldd	r24, Y+13	; 0x0d
    34c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    34c2:	20 e0       	ldi	r18, 0x00	; 0
    34c4:	30 e0       	ldi	r19, 0x00	; 0
    34c6:	40 e2       	ldi	r20, 0x20	; 32
    34c8:	51 e4       	ldi	r21, 0x41	; 65
    34ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34ce:	dc 01       	movw	r26, r24
    34d0:	cb 01       	movw	r24, r22
    34d2:	bc 01       	movw	r22, r24
    34d4:	cd 01       	movw	r24, r26
    34d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34da:	dc 01       	movw	r26, r24
    34dc:	cb 01       	movw	r24, r22
    34de:	9e 83       	std	Y+6, r25	; 0x06
    34e0:	8d 83       	std	Y+5, r24	; 0x05
    34e2:	0f c0       	rjmp	.+30     	; 0x3502 <LCD_vSendCommand+0x206>
    34e4:	80 e9       	ldi	r24, 0x90	; 144
    34e6:	91 e0       	ldi	r25, 0x01	; 1
    34e8:	9c 83       	std	Y+4, r25	; 0x04
    34ea:	8b 83       	std	Y+3, r24	; 0x03
    34ec:	8b 81       	ldd	r24, Y+3	; 0x03
    34ee:	9c 81       	ldd	r25, Y+4	; 0x04
    34f0:	01 97       	sbiw	r24, 0x01	; 1
    34f2:	f1 f7       	brne	.-4      	; 0x34f0 <LCD_vSendCommand+0x1f4>
    34f4:	9c 83       	std	Y+4, r25	; 0x04
    34f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34f8:	8d 81       	ldd	r24, Y+5	; 0x05
    34fa:	9e 81       	ldd	r25, Y+6	; 0x06
    34fc:	01 97       	sbiw	r24, 0x01	; 1
    34fe:	9e 83       	std	Y+6, r25	; 0x06
    3500:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3502:	8d 81       	ldd	r24, Y+5	; 0x05
    3504:	9e 81       	ldd	r25, Y+6	; 0x06
    3506:	00 97       	sbiw	r24, 0x00	; 0
    3508:	69 f7       	brne	.-38     	; 0x34e4 <LCD_vSendCommand+0x1e8>
    350a:	14 c0       	rjmp	.+40     	; 0x3534 <LCD_vSendCommand+0x238>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    350c:	6f 81       	ldd	r22, Y+7	; 0x07
    350e:	78 85       	ldd	r23, Y+8	; 0x08
    3510:	89 85       	ldd	r24, Y+9	; 0x09
    3512:	9a 85       	ldd	r25, Y+10	; 0x0a
    3514:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3518:	dc 01       	movw	r26, r24
    351a:	cb 01       	movw	r24, r22
    351c:	9e 83       	std	Y+6, r25	; 0x06
    351e:	8d 83       	std	Y+5, r24	; 0x05
    3520:	8d 81       	ldd	r24, Y+5	; 0x05
    3522:	9e 81       	ldd	r25, Y+6	; 0x06
    3524:	9a 83       	std	Y+2, r25	; 0x02
    3526:	89 83       	std	Y+1, r24	; 0x01
    3528:	89 81       	ldd	r24, Y+1	; 0x01
    352a:	9a 81       	ldd	r25, Y+2	; 0x02
    352c:	01 97       	sbiw	r24, 0x01	; 1
    352e:	f1 f7       	brne	.-4      	; 0x352c <LCD_vSendCommand+0x230>
    3530:	9a 83       	std	Y+2, r25	; 0x02
    3532:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	DIO_vSetPinValue(PortB, Pin3, Pin_Low);
    3534:	81 e0       	ldi	r24, 0x01	; 1
    3536:	63 e0       	ldi	r22, 0x03	; 3
    3538:	40 e0       	ldi	r20, 0x00	; 0
    353a:	0e 94 75 11 	call	0x22ea	; 0x22ea <DIO_vSetPinValue>


}
    353e:	6d 96       	adiw	r28, 0x1d	; 29
    3540:	0f b6       	in	r0, 0x3f	; 63
    3542:	f8 94       	cli
    3544:	de bf       	out	0x3e, r29	; 62
    3546:	0f be       	out	0x3f, r0	; 63
    3548:	cd bf       	out	0x3d, r28	; 61
    354a:	cf 91       	pop	r28
    354c:	df 91       	pop	r29
    354e:	08 95       	ret

00003550 <LCD_vInit>:
void LCD_vInit(){
    3550:	0f 93       	push	r16
    3552:	1f 93       	push	r17
    3554:	df 93       	push	r29
    3556:	cf 93       	push	r28
    3558:	cd b7       	in	r28, 0x3d	; 61
    355a:	de b7       	in	r29, 0x3e	; 62
    355c:	c6 54       	subi	r28, 0x46	; 70
    355e:	d0 40       	sbci	r29, 0x00	; 0
    3560:	0f b6       	in	r0, 0x3f	; 63
    3562:	f8 94       	cli
    3564:	de bf       	out	0x3e, r29	; 62
    3566:	0f be       	out	0x3f, r0	; 63
    3568:	cd bf       	out	0x3d, r28	; 61
	//------Set used pins as output-----
	DIO_vSetPinDirection(PortB, Pin1, Pin_OutPut);
    356a:	81 e0       	ldi	r24, 0x01	; 1
    356c:	61 e0       	ldi	r22, 0x01	; 1
    356e:	41 e0       	ldi	r20, 0x01	; 1
    3570:	0e 94 72 10 	call	0x20e4	; 0x20e4 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PortB, Pin3, Pin_OutPut);
    3574:	81 e0       	ldi	r24, 0x01	; 1
    3576:	63 e0       	ldi	r22, 0x03	; 3
    3578:	41 e0       	ldi	r20, 0x01	; 1
    357a:	0e 94 72 10 	call	0x20e4	; 0x20e4 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PortB, Pin2, Pin_OutPut);
    357e:	81 e0       	ldi	r24, 0x01	; 1
    3580:	62 e0       	ldi	r22, 0x02	; 2
    3582:	41 e0       	ldi	r20, 0x01	; 1
    3584:	0e 94 72 10 	call	0x20e4	; 0x20e4 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PortA, Pin4, Pin_OutPut);
    3588:	80 e0       	ldi	r24, 0x00	; 0
    358a:	64 e0       	ldi	r22, 0x04	; 4
    358c:	41 e0       	ldi	r20, 0x01	; 1
    358e:	0e 94 72 10 	call	0x20e4	; 0x20e4 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PortA, Pin5, Pin_OutPut);
    3592:	80 e0       	ldi	r24, 0x00	; 0
    3594:	65 e0       	ldi	r22, 0x05	; 5
    3596:	41 e0       	ldi	r20, 0x01	; 1
    3598:	0e 94 72 10 	call	0x20e4	; 0x20e4 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PortA, Pin6, Pin_OutPut);
    359c:	80 e0       	ldi	r24, 0x00	; 0
    359e:	66 e0       	ldi	r22, 0x06	; 6
    35a0:	41 e0       	ldi	r20, 0x01	; 1
    35a2:	0e 94 72 10 	call	0x20e4	; 0x20e4 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PortA, Pin7, Pin_OutPut);
    35a6:	80 e0       	ldi	r24, 0x00	; 0
    35a8:	67 e0       	ldi	r22, 0x07	; 7
    35aa:	41 e0       	ldi	r20, 0x01	; 1
    35ac:	0e 94 72 10 	call	0x20e4	; 0x20e4 <DIO_vSetPinDirection>
    35b0:	fe 01       	movw	r30, r28
    35b2:	ed 5b       	subi	r30, 0xBD	; 189
    35b4:	ff 4f       	sbci	r31, 0xFF	; 255
    35b6:	80 e0       	ldi	r24, 0x00	; 0
    35b8:	90 e0       	ldi	r25, 0x00	; 0
    35ba:	a8 e4       	ldi	r26, 0x48	; 72
    35bc:	b2 e4       	ldi	r27, 0x42	; 66
    35be:	80 83       	st	Z, r24
    35c0:	91 83       	std	Z+1, r25	; 0x01
    35c2:	a2 83       	std	Z+2, r26	; 0x02
    35c4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35c6:	8e 01       	movw	r16, r28
    35c8:	01 5c       	subi	r16, 0xC1	; 193
    35ca:	1f 4f       	sbci	r17, 0xFF	; 255
    35cc:	fe 01       	movw	r30, r28
    35ce:	ed 5b       	subi	r30, 0xBD	; 189
    35d0:	ff 4f       	sbci	r31, 0xFF	; 255
    35d2:	60 81       	ld	r22, Z
    35d4:	71 81       	ldd	r23, Z+1	; 0x01
    35d6:	82 81       	ldd	r24, Z+2	; 0x02
    35d8:	93 81       	ldd	r25, Z+3	; 0x03
    35da:	20 e0       	ldi	r18, 0x00	; 0
    35dc:	30 e0       	ldi	r19, 0x00	; 0
    35de:	4a e7       	ldi	r20, 0x7A	; 122
    35e0:	55 e4       	ldi	r21, 0x45	; 69
    35e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35e6:	dc 01       	movw	r26, r24
    35e8:	cb 01       	movw	r24, r22
    35ea:	f8 01       	movw	r30, r16
    35ec:	80 83       	st	Z, r24
    35ee:	91 83       	std	Z+1, r25	; 0x01
    35f0:	a2 83       	std	Z+2, r26	; 0x02
    35f2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    35f4:	fe 01       	movw	r30, r28
    35f6:	ff 96       	adiw	r30, 0x3f	; 63
    35f8:	60 81       	ld	r22, Z
    35fa:	71 81       	ldd	r23, Z+1	; 0x01
    35fc:	82 81       	ldd	r24, Z+2	; 0x02
    35fe:	93 81       	ldd	r25, Z+3	; 0x03
    3600:	20 e0       	ldi	r18, 0x00	; 0
    3602:	30 e0       	ldi	r19, 0x00	; 0
    3604:	40 e8       	ldi	r20, 0x80	; 128
    3606:	5f e3       	ldi	r21, 0x3F	; 63
    3608:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    360c:	88 23       	and	r24, r24
    360e:	2c f4       	brge	.+10     	; 0x361a <LCD_vInit+0xca>
		__ticks = 1;
    3610:	81 e0       	ldi	r24, 0x01	; 1
    3612:	90 e0       	ldi	r25, 0x00	; 0
    3614:	9e af       	std	Y+62, r25	; 0x3e
    3616:	8d af       	std	Y+61, r24	; 0x3d
    3618:	46 c0       	rjmp	.+140    	; 0x36a6 <LCD_vInit+0x156>
	else if (__tmp > 65535)
    361a:	fe 01       	movw	r30, r28
    361c:	ff 96       	adiw	r30, 0x3f	; 63
    361e:	60 81       	ld	r22, Z
    3620:	71 81       	ldd	r23, Z+1	; 0x01
    3622:	82 81       	ldd	r24, Z+2	; 0x02
    3624:	93 81       	ldd	r25, Z+3	; 0x03
    3626:	20 e0       	ldi	r18, 0x00	; 0
    3628:	3f ef       	ldi	r19, 0xFF	; 255
    362a:	4f e7       	ldi	r20, 0x7F	; 127
    362c:	57 e4       	ldi	r21, 0x47	; 71
    362e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3632:	18 16       	cp	r1, r24
    3634:	64 f5       	brge	.+88     	; 0x368e <LCD_vInit+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3636:	fe 01       	movw	r30, r28
    3638:	ed 5b       	subi	r30, 0xBD	; 189
    363a:	ff 4f       	sbci	r31, 0xFF	; 255
    363c:	60 81       	ld	r22, Z
    363e:	71 81       	ldd	r23, Z+1	; 0x01
    3640:	82 81       	ldd	r24, Z+2	; 0x02
    3642:	93 81       	ldd	r25, Z+3	; 0x03
    3644:	20 e0       	ldi	r18, 0x00	; 0
    3646:	30 e0       	ldi	r19, 0x00	; 0
    3648:	40 e2       	ldi	r20, 0x20	; 32
    364a:	51 e4       	ldi	r21, 0x41	; 65
    364c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3650:	dc 01       	movw	r26, r24
    3652:	cb 01       	movw	r24, r22
    3654:	bc 01       	movw	r22, r24
    3656:	cd 01       	movw	r24, r26
    3658:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    365c:	dc 01       	movw	r26, r24
    365e:	cb 01       	movw	r24, r22
    3660:	9e af       	std	Y+62, r25	; 0x3e
    3662:	8d af       	std	Y+61, r24	; 0x3d
    3664:	0f c0       	rjmp	.+30     	; 0x3684 <LCD_vInit+0x134>
    3666:	80 e9       	ldi	r24, 0x90	; 144
    3668:	91 e0       	ldi	r25, 0x01	; 1
    366a:	9c af       	std	Y+60, r25	; 0x3c
    366c:	8b af       	std	Y+59, r24	; 0x3b
    366e:	8b ad       	ldd	r24, Y+59	; 0x3b
    3670:	9c ad       	ldd	r25, Y+60	; 0x3c
    3672:	01 97       	sbiw	r24, 0x01	; 1
    3674:	f1 f7       	brne	.-4      	; 0x3672 <LCD_vInit+0x122>
    3676:	9c af       	std	Y+60, r25	; 0x3c
    3678:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    367a:	8d ad       	ldd	r24, Y+61	; 0x3d
    367c:	9e ad       	ldd	r25, Y+62	; 0x3e
    367e:	01 97       	sbiw	r24, 0x01	; 1
    3680:	9e af       	std	Y+62, r25	; 0x3e
    3682:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3684:	8d ad       	ldd	r24, Y+61	; 0x3d
    3686:	9e ad       	ldd	r25, Y+62	; 0x3e
    3688:	00 97       	sbiw	r24, 0x00	; 0
    368a:	69 f7       	brne	.-38     	; 0x3666 <LCD_vInit+0x116>
    368c:	16 c0       	rjmp	.+44     	; 0x36ba <LCD_vInit+0x16a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    368e:	fe 01       	movw	r30, r28
    3690:	ff 96       	adiw	r30, 0x3f	; 63
    3692:	60 81       	ld	r22, Z
    3694:	71 81       	ldd	r23, Z+1	; 0x01
    3696:	82 81       	ldd	r24, Z+2	; 0x02
    3698:	93 81       	ldd	r25, Z+3	; 0x03
    369a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    369e:	dc 01       	movw	r26, r24
    36a0:	cb 01       	movw	r24, r22
    36a2:	9e af       	std	Y+62, r25	; 0x3e
    36a4:	8d af       	std	Y+61, r24	; 0x3d
    36a6:	8d ad       	ldd	r24, Y+61	; 0x3d
    36a8:	9e ad       	ldd	r25, Y+62	; 0x3e
    36aa:	9a af       	std	Y+58, r25	; 0x3a
    36ac:	89 af       	std	Y+57, r24	; 0x39
    36ae:	89 ad       	ldd	r24, Y+57	; 0x39
    36b0:	9a ad       	ldd	r25, Y+58	; 0x3a
    36b2:	01 97       	sbiw	r24, 0x01	; 1
    36b4:	f1 f7       	brne	.-4      	; 0x36b2 <LCD_vInit+0x162>
    36b6:	9a af       	std	Y+58, r25	; 0x3a
    36b8:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(50);
	LCD_vSendCommand(FunctionSet);
    36ba:	88 e2       	ldi	r24, 0x28	; 40
    36bc:	0e 94 7e 19 	call	0x32fc	; 0x32fc <LCD_vSendCommand>
    36c0:	80 e0       	ldi	r24, 0x00	; 0
    36c2:	90 e0       	ldi	r25, 0x00	; 0
    36c4:	a0 e0       	ldi	r26, 0x00	; 0
    36c6:	b0 e4       	ldi	r27, 0x40	; 64
    36c8:	8d ab       	std	Y+53, r24	; 0x35
    36ca:	9e ab       	std	Y+54, r25	; 0x36
    36cc:	af ab       	std	Y+55, r26	; 0x37
    36ce:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36d0:	6d a9       	ldd	r22, Y+53	; 0x35
    36d2:	7e a9       	ldd	r23, Y+54	; 0x36
    36d4:	8f a9       	ldd	r24, Y+55	; 0x37
    36d6:	98 ad       	ldd	r25, Y+56	; 0x38
    36d8:	20 e0       	ldi	r18, 0x00	; 0
    36da:	30 e0       	ldi	r19, 0x00	; 0
    36dc:	4a e7       	ldi	r20, 0x7A	; 122
    36de:	55 e4       	ldi	r21, 0x45	; 69
    36e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36e4:	dc 01       	movw	r26, r24
    36e6:	cb 01       	movw	r24, r22
    36e8:	89 ab       	std	Y+49, r24	; 0x31
    36ea:	9a ab       	std	Y+50, r25	; 0x32
    36ec:	ab ab       	std	Y+51, r26	; 0x33
    36ee:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    36f0:	69 a9       	ldd	r22, Y+49	; 0x31
    36f2:	7a a9       	ldd	r23, Y+50	; 0x32
    36f4:	8b a9       	ldd	r24, Y+51	; 0x33
    36f6:	9c a9       	ldd	r25, Y+52	; 0x34
    36f8:	20 e0       	ldi	r18, 0x00	; 0
    36fa:	30 e0       	ldi	r19, 0x00	; 0
    36fc:	40 e8       	ldi	r20, 0x80	; 128
    36fe:	5f e3       	ldi	r21, 0x3F	; 63
    3700:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3704:	88 23       	and	r24, r24
    3706:	2c f4       	brge	.+10     	; 0x3712 <LCD_vInit+0x1c2>
		__ticks = 1;
    3708:	81 e0       	ldi	r24, 0x01	; 1
    370a:	90 e0       	ldi	r25, 0x00	; 0
    370c:	98 ab       	std	Y+48, r25	; 0x30
    370e:	8f a7       	std	Y+47, r24	; 0x2f
    3710:	3f c0       	rjmp	.+126    	; 0x3790 <LCD_vInit+0x240>
	else if (__tmp > 65535)
    3712:	69 a9       	ldd	r22, Y+49	; 0x31
    3714:	7a a9       	ldd	r23, Y+50	; 0x32
    3716:	8b a9       	ldd	r24, Y+51	; 0x33
    3718:	9c a9       	ldd	r25, Y+52	; 0x34
    371a:	20 e0       	ldi	r18, 0x00	; 0
    371c:	3f ef       	ldi	r19, 0xFF	; 255
    371e:	4f e7       	ldi	r20, 0x7F	; 127
    3720:	57 e4       	ldi	r21, 0x47	; 71
    3722:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3726:	18 16       	cp	r1, r24
    3728:	4c f5       	brge	.+82     	; 0x377c <LCD_vInit+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    372a:	6d a9       	ldd	r22, Y+53	; 0x35
    372c:	7e a9       	ldd	r23, Y+54	; 0x36
    372e:	8f a9       	ldd	r24, Y+55	; 0x37
    3730:	98 ad       	ldd	r25, Y+56	; 0x38
    3732:	20 e0       	ldi	r18, 0x00	; 0
    3734:	30 e0       	ldi	r19, 0x00	; 0
    3736:	40 e2       	ldi	r20, 0x20	; 32
    3738:	51 e4       	ldi	r21, 0x41	; 65
    373a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    373e:	dc 01       	movw	r26, r24
    3740:	cb 01       	movw	r24, r22
    3742:	bc 01       	movw	r22, r24
    3744:	cd 01       	movw	r24, r26
    3746:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    374a:	dc 01       	movw	r26, r24
    374c:	cb 01       	movw	r24, r22
    374e:	98 ab       	std	Y+48, r25	; 0x30
    3750:	8f a7       	std	Y+47, r24	; 0x2f
    3752:	0f c0       	rjmp	.+30     	; 0x3772 <LCD_vInit+0x222>
    3754:	80 e9       	ldi	r24, 0x90	; 144
    3756:	91 e0       	ldi	r25, 0x01	; 1
    3758:	9e a7       	std	Y+46, r25	; 0x2e
    375a:	8d a7       	std	Y+45, r24	; 0x2d
    375c:	8d a5       	ldd	r24, Y+45	; 0x2d
    375e:	9e a5       	ldd	r25, Y+46	; 0x2e
    3760:	01 97       	sbiw	r24, 0x01	; 1
    3762:	f1 f7       	brne	.-4      	; 0x3760 <LCD_vInit+0x210>
    3764:	9e a7       	std	Y+46, r25	; 0x2e
    3766:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3768:	8f a5       	ldd	r24, Y+47	; 0x2f
    376a:	98 a9       	ldd	r25, Y+48	; 0x30
    376c:	01 97       	sbiw	r24, 0x01	; 1
    376e:	98 ab       	std	Y+48, r25	; 0x30
    3770:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3772:	8f a5       	ldd	r24, Y+47	; 0x2f
    3774:	98 a9       	ldd	r25, Y+48	; 0x30
    3776:	00 97       	sbiw	r24, 0x00	; 0
    3778:	69 f7       	brne	.-38     	; 0x3754 <LCD_vInit+0x204>
    377a:	14 c0       	rjmp	.+40     	; 0x37a4 <LCD_vInit+0x254>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    377c:	69 a9       	ldd	r22, Y+49	; 0x31
    377e:	7a a9       	ldd	r23, Y+50	; 0x32
    3780:	8b a9       	ldd	r24, Y+51	; 0x33
    3782:	9c a9       	ldd	r25, Y+52	; 0x34
    3784:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3788:	dc 01       	movw	r26, r24
    378a:	cb 01       	movw	r24, r22
    378c:	98 ab       	std	Y+48, r25	; 0x30
    378e:	8f a7       	std	Y+47, r24	; 0x2f
    3790:	8f a5       	ldd	r24, Y+47	; 0x2f
    3792:	98 a9       	ldd	r25, Y+48	; 0x30
    3794:	9c a7       	std	Y+44, r25	; 0x2c
    3796:	8b a7       	std	Y+43, r24	; 0x2b
    3798:	8b a5       	ldd	r24, Y+43	; 0x2b
    379a:	9c a5       	ldd	r25, Y+44	; 0x2c
    379c:	01 97       	sbiw	r24, 0x01	; 1
    379e:	f1 f7       	brne	.-4      	; 0x379c <LCD_vInit+0x24c>
    37a0:	9c a7       	std	Y+44, r25	; 0x2c
    37a2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	LCD_vSendCommand(DisplayOnControl);
    37a4:	8e e0       	ldi	r24, 0x0E	; 14
    37a6:	0e 94 7e 19 	call	0x32fc	; 0x32fc <LCD_vSendCommand>
    37aa:	80 e0       	ldi	r24, 0x00	; 0
    37ac:	90 e0       	ldi	r25, 0x00	; 0
    37ae:	a0 e0       	ldi	r26, 0x00	; 0
    37b0:	b0 e4       	ldi	r27, 0x40	; 64
    37b2:	8f a3       	std	Y+39, r24	; 0x27
    37b4:	98 a7       	std	Y+40, r25	; 0x28
    37b6:	a9 a7       	std	Y+41, r26	; 0x29
    37b8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37ba:	6f a1       	ldd	r22, Y+39	; 0x27
    37bc:	78 a5       	ldd	r23, Y+40	; 0x28
    37be:	89 a5       	ldd	r24, Y+41	; 0x29
    37c0:	9a a5       	ldd	r25, Y+42	; 0x2a
    37c2:	20 e0       	ldi	r18, 0x00	; 0
    37c4:	30 e0       	ldi	r19, 0x00	; 0
    37c6:	4a e7       	ldi	r20, 0x7A	; 122
    37c8:	55 e4       	ldi	r21, 0x45	; 69
    37ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37ce:	dc 01       	movw	r26, r24
    37d0:	cb 01       	movw	r24, r22
    37d2:	8b a3       	std	Y+35, r24	; 0x23
    37d4:	9c a3       	std	Y+36, r25	; 0x24
    37d6:	ad a3       	std	Y+37, r26	; 0x25
    37d8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    37da:	6b a1       	ldd	r22, Y+35	; 0x23
    37dc:	7c a1       	ldd	r23, Y+36	; 0x24
    37de:	8d a1       	ldd	r24, Y+37	; 0x25
    37e0:	9e a1       	ldd	r25, Y+38	; 0x26
    37e2:	20 e0       	ldi	r18, 0x00	; 0
    37e4:	30 e0       	ldi	r19, 0x00	; 0
    37e6:	40 e8       	ldi	r20, 0x80	; 128
    37e8:	5f e3       	ldi	r21, 0x3F	; 63
    37ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    37ee:	88 23       	and	r24, r24
    37f0:	2c f4       	brge	.+10     	; 0x37fc <LCD_vInit+0x2ac>
		__ticks = 1;
    37f2:	81 e0       	ldi	r24, 0x01	; 1
    37f4:	90 e0       	ldi	r25, 0x00	; 0
    37f6:	9a a3       	std	Y+34, r25	; 0x22
    37f8:	89 a3       	std	Y+33, r24	; 0x21
    37fa:	3f c0       	rjmp	.+126    	; 0x387a <LCD_vInit+0x32a>
	else if (__tmp > 65535)
    37fc:	6b a1       	ldd	r22, Y+35	; 0x23
    37fe:	7c a1       	ldd	r23, Y+36	; 0x24
    3800:	8d a1       	ldd	r24, Y+37	; 0x25
    3802:	9e a1       	ldd	r25, Y+38	; 0x26
    3804:	20 e0       	ldi	r18, 0x00	; 0
    3806:	3f ef       	ldi	r19, 0xFF	; 255
    3808:	4f e7       	ldi	r20, 0x7F	; 127
    380a:	57 e4       	ldi	r21, 0x47	; 71
    380c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3810:	18 16       	cp	r1, r24
    3812:	4c f5       	brge	.+82     	; 0x3866 <LCD_vInit+0x316>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3814:	6f a1       	ldd	r22, Y+39	; 0x27
    3816:	78 a5       	ldd	r23, Y+40	; 0x28
    3818:	89 a5       	ldd	r24, Y+41	; 0x29
    381a:	9a a5       	ldd	r25, Y+42	; 0x2a
    381c:	20 e0       	ldi	r18, 0x00	; 0
    381e:	30 e0       	ldi	r19, 0x00	; 0
    3820:	40 e2       	ldi	r20, 0x20	; 32
    3822:	51 e4       	ldi	r21, 0x41	; 65
    3824:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3828:	dc 01       	movw	r26, r24
    382a:	cb 01       	movw	r24, r22
    382c:	bc 01       	movw	r22, r24
    382e:	cd 01       	movw	r24, r26
    3830:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3834:	dc 01       	movw	r26, r24
    3836:	cb 01       	movw	r24, r22
    3838:	9a a3       	std	Y+34, r25	; 0x22
    383a:	89 a3       	std	Y+33, r24	; 0x21
    383c:	0f c0       	rjmp	.+30     	; 0x385c <LCD_vInit+0x30c>
    383e:	80 e9       	ldi	r24, 0x90	; 144
    3840:	91 e0       	ldi	r25, 0x01	; 1
    3842:	98 a3       	std	Y+32, r25	; 0x20
    3844:	8f 8f       	std	Y+31, r24	; 0x1f
    3846:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3848:	98 a1       	ldd	r25, Y+32	; 0x20
    384a:	01 97       	sbiw	r24, 0x01	; 1
    384c:	f1 f7       	brne	.-4      	; 0x384a <LCD_vInit+0x2fa>
    384e:	98 a3       	std	Y+32, r25	; 0x20
    3850:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3852:	89 a1       	ldd	r24, Y+33	; 0x21
    3854:	9a a1       	ldd	r25, Y+34	; 0x22
    3856:	01 97       	sbiw	r24, 0x01	; 1
    3858:	9a a3       	std	Y+34, r25	; 0x22
    385a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    385c:	89 a1       	ldd	r24, Y+33	; 0x21
    385e:	9a a1       	ldd	r25, Y+34	; 0x22
    3860:	00 97       	sbiw	r24, 0x00	; 0
    3862:	69 f7       	brne	.-38     	; 0x383e <LCD_vInit+0x2ee>
    3864:	14 c0       	rjmp	.+40     	; 0x388e <LCD_vInit+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3866:	6b a1       	ldd	r22, Y+35	; 0x23
    3868:	7c a1       	ldd	r23, Y+36	; 0x24
    386a:	8d a1       	ldd	r24, Y+37	; 0x25
    386c:	9e a1       	ldd	r25, Y+38	; 0x26
    386e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3872:	dc 01       	movw	r26, r24
    3874:	cb 01       	movw	r24, r22
    3876:	9a a3       	std	Y+34, r25	; 0x22
    3878:	89 a3       	std	Y+33, r24	; 0x21
    387a:	89 a1       	ldd	r24, Y+33	; 0x21
    387c:	9a a1       	ldd	r25, Y+34	; 0x22
    387e:	9e 8f       	std	Y+30, r25	; 0x1e
    3880:	8d 8f       	std	Y+29, r24	; 0x1d
    3882:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3884:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3886:	01 97       	sbiw	r24, 0x01	; 1
    3888:	f1 f7       	brne	.-4      	; 0x3886 <LCD_vInit+0x336>
    388a:	9e 8f       	std	Y+30, r25	; 0x1e
    388c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	LCD_vSendCommand(DisplayClear);
    388e:	81 e0       	ldi	r24, 0x01	; 1
    3890:	0e 94 7e 19 	call	0x32fc	; 0x32fc <LCD_vSendCommand>
    3894:	80 e0       	ldi	r24, 0x00	; 0
    3896:	90 e0       	ldi	r25, 0x00	; 0
    3898:	a0 e0       	ldi	r26, 0x00	; 0
    389a:	b0 e4       	ldi	r27, 0x40	; 64
    389c:	89 8f       	std	Y+25, r24	; 0x19
    389e:	9a 8f       	std	Y+26, r25	; 0x1a
    38a0:	ab 8f       	std	Y+27, r26	; 0x1b
    38a2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38a4:	69 8d       	ldd	r22, Y+25	; 0x19
    38a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    38a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    38aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    38ac:	20 e0       	ldi	r18, 0x00	; 0
    38ae:	30 e0       	ldi	r19, 0x00	; 0
    38b0:	4a e7       	ldi	r20, 0x7A	; 122
    38b2:	55 e4       	ldi	r21, 0x45	; 69
    38b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38b8:	dc 01       	movw	r26, r24
    38ba:	cb 01       	movw	r24, r22
    38bc:	8d 8b       	std	Y+21, r24	; 0x15
    38be:	9e 8b       	std	Y+22, r25	; 0x16
    38c0:	af 8b       	std	Y+23, r26	; 0x17
    38c2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    38c4:	6d 89       	ldd	r22, Y+21	; 0x15
    38c6:	7e 89       	ldd	r23, Y+22	; 0x16
    38c8:	8f 89       	ldd	r24, Y+23	; 0x17
    38ca:	98 8d       	ldd	r25, Y+24	; 0x18
    38cc:	20 e0       	ldi	r18, 0x00	; 0
    38ce:	30 e0       	ldi	r19, 0x00	; 0
    38d0:	40 e8       	ldi	r20, 0x80	; 128
    38d2:	5f e3       	ldi	r21, 0x3F	; 63
    38d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    38d8:	88 23       	and	r24, r24
    38da:	2c f4       	brge	.+10     	; 0x38e6 <LCD_vInit+0x396>
		__ticks = 1;
    38dc:	81 e0       	ldi	r24, 0x01	; 1
    38de:	90 e0       	ldi	r25, 0x00	; 0
    38e0:	9c 8b       	std	Y+20, r25	; 0x14
    38e2:	8b 8b       	std	Y+19, r24	; 0x13
    38e4:	3f c0       	rjmp	.+126    	; 0x3964 <LCD_vInit+0x414>
	else if (__tmp > 65535)
    38e6:	6d 89       	ldd	r22, Y+21	; 0x15
    38e8:	7e 89       	ldd	r23, Y+22	; 0x16
    38ea:	8f 89       	ldd	r24, Y+23	; 0x17
    38ec:	98 8d       	ldd	r25, Y+24	; 0x18
    38ee:	20 e0       	ldi	r18, 0x00	; 0
    38f0:	3f ef       	ldi	r19, 0xFF	; 255
    38f2:	4f e7       	ldi	r20, 0x7F	; 127
    38f4:	57 e4       	ldi	r21, 0x47	; 71
    38f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    38fa:	18 16       	cp	r1, r24
    38fc:	4c f5       	brge	.+82     	; 0x3950 <LCD_vInit+0x400>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38fe:	69 8d       	ldd	r22, Y+25	; 0x19
    3900:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3902:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3904:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3906:	20 e0       	ldi	r18, 0x00	; 0
    3908:	30 e0       	ldi	r19, 0x00	; 0
    390a:	40 e2       	ldi	r20, 0x20	; 32
    390c:	51 e4       	ldi	r21, 0x41	; 65
    390e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3912:	dc 01       	movw	r26, r24
    3914:	cb 01       	movw	r24, r22
    3916:	bc 01       	movw	r22, r24
    3918:	cd 01       	movw	r24, r26
    391a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    391e:	dc 01       	movw	r26, r24
    3920:	cb 01       	movw	r24, r22
    3922:	9c 8b       	std	Y+20, r25	; 0x14
    3924:	8b 8b       	std	Y+19, r24	; 0x13
    3926:	0f c0       	rjmp	.+30     	; 0x3946 <LCD_vInit+0x3f6>
    3928:	80 e9       	ldi	r24, 0x90	; 144
    392a:	91 e0       	ldi	r25, 0x01	; 1
    392c:	9a 8b       	std	Y+18, r25	; 0x12
    392e:	89 8b       	std	Y+17, r24	; 0x11
    3930:	89 89       	ldd	r24, Y+17	; 0x11
    3932:	9a 89       	ldd	r25, Y+18	; 0x12
    3934:	01 97       	sbiw	r24, 0x01	; 1
    3936:	f1 f7       	brne	.-4      	; 0x3934 <LCD_vInit+0x3e4>
    3938:	9a 8b       	std	Y+18, r25	; 0x12
    393a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    393c:	8b 89       	ldd	r24, Y+19	; 0x13
    393e:	9c 89       	ldd	r25, Y+20	; 0x14
    3940:	01 97       	sbiw	r24, 0x01	; 1
    3942:	9c 8b       	std	Y+20, r25	; 0x14
    3944:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3946:	8b 89       	ldd	r24, Y+19	; 0x13
    3948:	9c 89       	ldd	r25, Y+20	; 0x14
    394a:	00 97       	sbiw	r24, 0x00	; 0
    394c:	69 f7       	brne	.-38     	; 0x3928 <LCD_vInit+0x3d8>
    394e:	14 c0       	rjmp	.+40     	; 0x3978 <LCD_vInit+0x428>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3950:	6d 89       	ldd	r22, Y+21	; 0x15
    3952:	7e 89       	ldd	r23, Y+22	; 0x16
    3954:	8f 89       	ldd	r24, Y+23	; 0x17
    3956:	98 8d       	ldd	r25, Y+24	; 0x18
    3958:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    395c:	dc 01       	movw	r26, r24
    395e:	cb 01       	movw	r24, r22
    3960:	9c 8b       	std	Y+20, r25	; 0x14
    3962:	8b 8b       	std	Y+19, r24	; 0x13
    3964:	8b 89       	ldd	r24, Y+19	; 0x13
    3966:	9c 89       	ldd	r25, Y+20	; 0x14
    3968:	98 8b       	std	Y+16, r25	; 0x10
    396a:	8f 87       	std	Y+15, r24	; 0x0f
    396c:	8f 85       	ldd	r24, Y+15	; 0x0f
    396e:	98 89       	ldd	r25, Y+16	; 0x10
    3970:	01 97       	sbiw	r24, 0x01	; 1
    3972:	f1 f7       	brne	.-4      	; 0x3970 <LCD_vInit+0x420>
    3974:	98 8b       	std	Y+16, r25	; 0x10
    3976:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	LCD_vSendCommand(EnrtyMode);
    3978:	86 e0       	ldi	r24, 0x06	; 6
    397a:	0e 94 7e 19 	call	0x32fc	; 0x32fc <LCD_vSendCommand>
    397e:	80 e0       	ldi	r24, 0x00	; 0
    3980:	90 e0       	ldi	r25, 0x00	; 0
    3982:	a0 e0       	ldi	r26, 0x00	; 0
    3984:	b0 e4       	ldi	r27, 0x40	; 64
    3986:	8b 87       	std	Y+11, r24	; 0x0b
    3988:	9c 87       	std	Y+12, r25	; 0x0c
    398a:	ad 87       	std	Y+13, r26	; 0x0d
    398c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    398e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3990:	7c 85       	ldd	r23, Y+12	; 0x0c
    3992:	8d 85       	ldd	r24, Y+13	; 0x0d
    3994:	9e 85       	ldd	r25, Y+14	; 0x0e
    3996:	20 e0       	ldi	r18, 0x00	; 0
    3998:	30 e0       	ldi	r19, 0x00	; 0
    399a:	4a e7       	ldi	r20, 0x7A	; 122
    399c:	55 e4       	ldi	r21, 0x45	; 69
    399e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39a2:	dc 01       	movw	r26, r24
    39a4:	cb 01       	movw	r24, r22
    39a6:	8f 83       	std	Y+7, r24	; 0x07
    39a8:	98 87       	std	Y+8, r25	; 0x08
    39aa:	a9 87       	std	Y+9, r26	; 0x09
    39ac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    39ae:	6f 81       	ldd	r22, Y+7	; 0x07
    39b0:	78 85       	ldd	r23, Y+8	; 0x08
    39b2:	89 85       	ldd	r24, Y+9	; 0x09
    39b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    39b6:	20 e0       	ldi	r18, 0x00	; 0
    39b8:	30 e0       	ldi	r19, 0x00	; 0
    39ba:	40 e8       	ldi	r20, 0x80	; 128
    39bc:	5f e3       	ldi	r21, 0x3F	; 63
    39be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    39c2:	88 23       	and	r24, r24
    39c4:	2c f4       	brge	.+10     	; 0x39d0 <LCD_vInit+0x480>
		__ticks = 1;
    39c6:	81 e0       	ldi	r24, 0x01	; 1
    39c8:	90 e0       	ldi	r25, 0x00	; 0
    39ca:	9e 83       	std	Y+6, r25	; 0x06
    39cc:	8d 83       	std	Y+5, r24	; 0x05
    39ce:	3f c0       	rjmp	.+126    	; 0x3a4e <LCD_vInit+0x4fe>
	else if (__tmp > 65535)
    39d0:	6f 81       	ldd	r22, Y+7	; 0x07
    39d2:	78 85       	ldd	r23, Y+8	; 0x08
    39d4:	89 85       	ldd	r24, Y+9	; 0x09
    39d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    39d8:	20 e0       	ldi	r18, 0x00	; 0
    39da:	3f ef       	ldi	r19, 0xFF	; 255
    39dc:	4f e7       	ldi	r20, 0x7F	; 127
    39de:	57 e4       	ldi	r21, 0x47	; 71
    39e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    39e4:	18 16       	cp	r1, r24
    39e6:	4c f5       	brge	.+82     	; 0x3a3a <LCD_vInit+0x4ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    39ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    39ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    39ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    39f0:	20 e0       	ldi	r18, 0x00	; 0
    39f2:	30 e0       	ldi	r19, 0x00	; 0
    39f4:	40 e2       	ldi	r20, 0x20	; 32
    39f6:	51 e4       	ldi	r21, 0x41	; 65
    39f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39fc:	dc 01       	movw	r26, r24
    39fe:	cb 01       	movw	r24, r22
    3a00:	bc 01       	movw	r22, r24
    3a02:	cd 01       	movw	r24, r26
    3a04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a08:	dc 01       	movw	r26, r24
    3a0a:	cb 01       	movw	r24, r22
    3a0c:	9e 83       	std	Y+6, r25	; 0x06
    3a0e:	8d 83       	std	Y+5, r24	; 0x05
    3a10:	0f c0       	rjmp	.+30     	; 0x3a30 <LCD_vInit+0x4e0>
    3a12:	80 e9       	ldi	r24, 0x90	; 144
    3a14:	91 e0       	ldi	r25, 0x01	; 1
    3a16:	9c 83       	std	Y+4, r25	; 0x04
    3a18:	8b 83       	std	Y+3, r24	; 0x03
    3a1a:	8b 81       	ldd	r24, Y+3	; 0x03
    3a1c:	9c 81       	ldd	r25, Y+4	; 0x04
    3a1e:	01 97       	sbiw	r24, 0x01	; 1
    3a20:	f1 f7       	brne	.-4      	; 0x3a1e <LCD_vInit+0x4ce>
    3a22:	9c 83       	std	Y+4, r25	; 0x04
    3a24:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a26:	8d 81       	ldd	r24, Y+5	; 0x05
    3a28:	9e 81       	ldd	r25, Y+6	; 0x06
    3a2a:	01 97       	sbiw	r24, 0x01	; 1
    3a2c:	9e 83       	std	Y+6, r25	; 0x06
    3a2e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a30:	8d 81       	ldd	r24, Y+5	; 0x05
    3a32:	9e 81       	ldd	r25, Y+6	; 0x06
    3a34:	00 97       	sbiw	r24, 0x00	; 0
    3a36:	69 f7       	brne	.-38     	; 0x3a12 <LCD_vInit+0x4c2>
    3a38:	14 c0       	rjmp	.+40     	; 0x3a62 <LCD_vInit+0x512>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a3a:	6f 81       	ldd	r22, Y+7	; 0x07
    3a3c:	78 85       	ldd	r23, Y+8	; 0x08
    3a3e:	89 85       	ldd	r24, Y+9	; 0x09
    3a40:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a46:	dc 01       	movw	r26, r24
    3a48:	cb 01       	movw	r24, r22
    3a4a:	9e 83       	std	Y+6, r25	; 0x06
    3a4c:	8d 83       	std	Y+5, r24	; 0x05
    3a4e:	8d 81       	ldd	r24, Y+5	; 0x05
    3a50:	9e 81       	ldd	r25, Y+6	; 0x06
    3a52:	9a 83       	std	Y+2, r25	; 0x02
    3a54:	89 83       	std	Y+1, r24	; 0x01
    3a56:	89 81       	ldd	r24, Y+1	; 0x01
    3a58:	9a 81       	ldd	r25, Y+2	; 0x02
    3a5a:	01 97       	sbiw	r24, 0x01	; 1
    3a5c:	f1 f7       	brne	.-4      	; 0x3a5a <LCD_vInit+0x50a>
    3a5e:	9a 83       	std	Y+2, r25	; 0x02
    3a60:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

}
    3a62:	ca 5b       	subi	r28, 0xBA	; 186
    3a64:	df 4f       	sbci	r29, 0xFF	; 255
    3a66:	0f b6       	in	r0, 0x3f	; 63
    3a68:	f8 94       	cli
    3a6a:	de bf       	out	0x3e, r29	; 62
    3a6c:	0f be       	out	0x3f, r0	; 63
    3a6e:	cd bf       	out	0x3d, r28	; 61
    3a70:	cf 91       	pop	r28
    3a72:	df 91       	pop	r29
    3a74:	1f 91       	pop	r17
    3a76:	0f 91       	pop	r16
    3a78:	08 95       	ret

00003a7a <LCD_vInitWithOutClear>:
void LCD_vInitWithOutClear(){
    3a7a:	df 93       	push	r29
    3a7c:	cf 93       	push	r28
    3a7e:	cd b7       	in	r28, 0x3d	; 61
    3a80:	de b7       	in	r29, 0x3e	; 62
    3a82:	e8 97       	sbiw	r28, 0x38	; 56
    3a84:	0f b6       	in	r0, 0x3f	; 63
    3a86:	f8 94       	cli
    3a88:	de bf       	out	0x3e, r29	; 62
    3a8a:	0f be       	out	0x3f, r0	; 63
    3a8c:	cd bf       	out	0x3d, r28	; 61
	DIO_vSetPinDirection(PortB, Pin1, Pin_OutPut);
    3a8e:	81 e0       	ldi	r24, 0x01	; 1
    3a90:	61 e0       	ldi	r22, 0x01	; 1
    3a92:	41 e0       	ldi	r20, 0x01	; 1
    3a94:	0e 94 72 10 	call	0x20e4	; 0x20e4 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PortB, Pin3, Pin_OutPut);
    3a98:	81 e0       	ldi	r24, 0x01	; 1
    3a9a:	63 e0       	ldi	r22, 0x03	; 3
    3a9c:	41 e0       	ldi	r20, 0x01	; 1
    3a9e:	0e 94 72 10 	call	0x20e4	; 0x20e4 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PortB, Pin2, Pin_OutPut);
    3aa2:	81 e0       	ldi	r24, 0x01	; 1
    3aa4:	62 e0       	ldi	r22, 0x02	; 2
    3aa6:	41 e0       	ldi	r20, 0x01	; 1
    3aa8:	0e 94 72 10 	call	0x20e4	; 0x20e4 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PortA, Pin4, Pin_OutPut);
    3aac:	80 e0       	ldi	r24, 0x00	; 0
    3aae:	64 e0       	ldi	r22, 0x04	; 4
    3ab0:	41 e0       	ldi	r20, 0x01	; 1
    3ab2:	0e 94 72 10 	call	0x20e4	; 0x20e4 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PortA, Pin5, Pin_OutPut);
    3ab6:	80 e0       	ldi	r24, 0x00	; 0
    3ab8:	65 e0       	ldi	r22, 0x05	; 5
    3aba:	41 e0       	ldi	r20, 0x01	; 1
    3abc:	0e 94 72 10 	call	0x20e4	; 0x20e4 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PortA, Pin6, Pin_OutPut);
    3ac0:	80 e0       	ldi	r24, 0x00	; 0
    3ac2:	66 e0       	ldi	r22, 0x06	; 6
    3ac4:	41 e0       	ldi	r20, 0x01	; 1
    3ac6:	0e 94 72 10 	call	0x20e4	; 0x20e4 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PortA, Pin7, Pin_OutPut);
    3aca:	80 e0       	ldi	r24, 0x00	; 0
    3acc:	67 e0       	ldi	r22, 0x07	; 7
    3ace:	41 e0       	ldi	r20, 0x01	; 1
    3ad0:	0e 94 72 10 	call	0x20e4	; 0x20e4 <DIO_vSetPinDirection>
    3ad4:	80 e0       	ldi	r24, 0x00	; 0
    3ad6:	90 e0       	ldi	r25, 0x00	; 0
    3ad8:	a8 e4       	ldi	r26, 0x48	; 72
    3ada:	b2 e4       	ldi	r27, 0x42	; 66
    3adc:	8d ab       	std	Y+53, r24	; 0x35
    3ade:	9e ab       	std	Y+54, r25	; 0x36
    3ae0:	af ab       	std	Y+55, r26	; 0x37
    3ae2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ae4:	6d a9       	ldd	r22, Y+53	; 0x35
    3ae6:	7e a9       	ldd	r23, Y+54	; 0x36
    3ae8:	8f a9       	ldd	r24, Y+55	; 0x37
    3aea:	98 ad       	ldd	r25, Y+56	; 0x38
    3aec:	20 e0       	ldi	r18, 0x00	; 0
    3aee:	30 e0       	ldi	r19, 0x00	; 0
    3af0:	4a e7       	ldi	r20, 0x7A	; 122
    3af2:	55 e4       	ldi	r21, 0x45	; 69
    3af4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3af8:	dc 01       	movw	r26, r24
    3afa:	cb 01       	movw	r24, r22
    3afc:	89 ab       	std	Y+49, r24	; 0x31
    3afe:	9a ab       	std	Y+50, r25	; 0x32
    3b00:	ab ab       	std	Y+51, r26	; 0x33
    3b02:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3b04:	69 a9       	ldd	r22, Y+49	; 0x31
    3b06:	7a a9       	ldd	r23, Y+50	; 0x32
    3b08:	8b a9       	ldd	r24, Y+51	; 0x33
    3b0a:	9c a9       	ldd	r25, Y+52	; 0x34
    3b0c:	20 e0       	ldi	r18, 0x00	; 0
    3b0e:	30 e0       	ldi	r19, 0x00	; 0
    3b10:	40 e8       	ldi	r20, 0x80	; 128
    3b12:	5f e3       	ldi	r21, 0x3F	; 63
    3b14:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3b18:	88 23       	and	r24, r24
    3b1a:	2c f4       	brge	.+10     	; 0x3b26 <LCD_vInitWithOutClear+0xac>
		__ticks = 1;
    3b1c:	81 e0       	ldi	r24, 0x01	; 1
    3b1e:	90 e0       	ldi	r25, 0x00	; 0
    3b20:	98 ab       	std	Y+48, r25	; 0x30
    3b22:	8f a7       	std	Y+47, r24	; 0x2f
    3b24:	3f c0       	rjmp	.+126    	; 0x3ba4 <LCD_vInitWithOutClear+0x12a>
	else if (__tmp > 65535)
    3b26:	69 a9       	ldd	r22, Y+49	; 0x31
    3b28:	7a a9       	ldd	r23, Y+50	; 0x32
    3b2a:	8b a9       	ldd	r24, Y+51	; 0x33
    3b2c:	9c a9       	ldd	r25, Y+52	; 0x34
    3b2e:	20 e0       	ldi	r18, 0x00	; 0
    3b30:	3f ef       	ldi	r19, 0xFF	; 255
    3b32:	4f e7       	ldi	r20, 0x7F	; 127
    3b34:	57 e4       	ldi	r21, 0x47	; 71
    3b36:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3b3a:	18 16       	cp	r1, r24
    3b3c:	4c f5       	brge	.+82     	; 0x3b90 <LCD_vInitWithOutClear+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b3e:	6d a9       	ldd	r22, Y+53	; 0x35
    3b40:	7e a9       	ldd	r23, Y+54	; 0x36
    3b42:	8f a9       	ldd	r24, Y+55	; 0x37
    3b44:	98 ad       	ldd	r25, Y+56	; 0x38
    3b46:	20 e0       	ldi	r18, 0x00	; 0
    3b48:	30 e0       	ldi	r19, 0x00	; 0
    3b4a:	40 e2       	ldi	r20, 0x20	; 32
    3b4c:	51 e4       	ldi	r21, 0x41	; 65
    3b4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b52:	dc 01       	movw	r26, r24
    3b54:	cb 01       	movw	r24, r22
    3b56:	bc 01       	movw	r22, r24
    3b58:	cd 01       	movw	r24, r26
    3b5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b5e:	dc 01       	movw	r26, r24
    3b60:	cb 01       	movw	r24, r22
    3b62:	98 ab       	std	Y+48, r25	; 0x30
    3b64:	8f a7       	std	Y+47, r24	; 0x2f
    3b66:	0f c0       	rjmp	.+30     	; 0x3b86 <LCD_vInitWithOutClear+0x10c>
    3b68:	80 e9       	ldi	r24, 0x90	; 144
    3b6a:	91 e0       	ldi	r25, 0x01	; 1
    3b6c:	9e a7       	std	Y+46, r25	; 0x2e
    3b6e:	8d a7       	std	Y+45, r24	; 0x2d
    3b70:	8d a5       	ldd	r24, Y+45	; 0x2d
    3b72:	9e a5       	ldd	r25, Y+46	; 0x2e
    3b74:	01 97       	sbiw	r24, 0x01	; 1
    3b76:	f1 f7       	brne	.-4      	; 0x3b74 <LCD_vInitWithOutClear+0xfa>
    3b78:	9e a7       	std	Y+46, r25	; 0x2e
    3b7a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b7c:	8f a5       	ldd	r24, Y+47	; 0x2f
    3b7e:	98 a9       	ldd	r25, Y+48	; 0x30
    3b80:	01 97       	sbiw	r24, 0x01	; 1
    3b82:	98 ab       	std	Y+48, r25	; 0x30
    3b84:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b86:	8f a5       	ldd	r24, Y+47	; 0x2f
    3b88:	98 a9       	ldd	r25, Y+48	; 0x30
    3b8a:	00 97       	sbiw	r24, 0x00	; 0
    3b8c:	69 f7       	brne	.-38     	; 0x3b68 <LCD_vInitWithOutClear+0xee>
    3b8e:	14 c0       	rjmp	.+40     	; 0x3bb8 <LCD_vInitWithOutClear+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b90:	69 a9       	ldd	r22, Y+49	; 0x31
    3b92:	7a a9       	ldd	r23, Y+50	; 0x32
    3b94:	8b a9       	ldd	r24, Y+51	; 0x33
    3b96:	9c a9       	ldd	r25, Y+52	; 0x34
    3b98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b9c:	dc 01       	movw	r26, r24
    3b9e:	cb 01       	movw	r24, r22
    3ba0:	98 ab       	std	Y+48, r25	; 0x30
    3ba2:	8f a7       	std	Y+47, r24	; 0x2f
    3ba4:	8f a5       	ldd	r24, Y+47	; 0x2f
    3ba6:	98 a9       	ldd	r25, Y+48	; 0x30
    3ba8:	9c a7       	std	Y+44, r25	; 0x2c
    3baa:	8b a7       	std	Y+43, r24	; 0x2b
    3bac:	8b a5       	ldd	r24, Y+43	; 0x2b
    3bae:	9c a5       	ldd	r25, Y+44	; 0x2c
    3bb0:	01 97       	sbiw	r24, 0x01	; 1
    3bb2:	f1 f7       	brne	.-4      	; 0x3bb0 <LCD_vInitWithOutClear+0x136>
    3bb4:	9c a7       	std	Y+44, r25	; 0x2c
    3bb6:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(50);
	LCD_vSendCommand(FunctionSet);
    3bb8:	88 e2       	ldi	r24, 0x28	; 40
    3bba:	0e 94 7e 19 	call	0x32fc	; 0x32fc <LCD_vSendCommand>
    3bbe:	80 e0       	ldi	r24, 0x00	; 0
    3bc0:	90 e0       	ldi	r25, 0x00	; 0
    3bc2:	a0 e0       	ldi	r26, 0x00	; 0
    3bc4:	b0 e4       	ldi	r27, 0x40	; 64
    3bc6:	8f a3       	std	Y+39, r24	; 0x27
    3bc8:	98 a7       	std	Y+40, r25	; 0x28
    3bca:	a9 a7       	std	Y+41, r26	; 0x29
    3bcc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bce:	6f a1       	ldd	r22, Y+39	; 0x27
    3bd0:	78 a5       	ldd	r23, Y+40	; 0x28
    3bd2:	89 a5       	ldd	r24, Y+41	; 0x29
    3bd4:	9a a5       	ldd	r25, Y+42	; 0x2a
    3bd6:	20 e0       	ldi	r18, 0x00	; 0
    3bd8:	30 e0       	ldi	r19, 0x00	; 0
    3bda:	4a e7       	ldi	r20, 0x7A	; 122
    3bdc:	55 e4       	ldi	r21, 0x45	; 69
    3bde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3be2:	dc 01       	movw	r26, r24
    3be4:	cb 01       	movw	r24, r22
    3be6:	8b a3       	std	Y+35, r24	; 0x23
    3be8:	9c a3       	std	Y+36, r25	; 0x24
    3bea:	ad a3       	std	Y+37, r26	; 0x25
    3bec:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3bee:	6b a1       	ldd	r22, Y+35	; 0x23
    3bf0:	7c a1       	ldd	r23, Y+36	; 0x24
    3bf2:	8d a1       	ldd	r24, Y+37	; 0x25
    3bf4:	9e a1       	ldd	r25, Y+38	; 0x26
    3bf6:	20 e0       	ldi	r18, 0x00	; 0
    3bf8:	30 e0       	ldi	r19, 0x00	; 0
    3bfa:	40 e8       	ldi	r20, 0x80	; 128
    3bfc:	5f e3       	ldi	r21, 0x3F	; 63
    3bfe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3c02:	88 23       	and	r24, r24
    3c04:	2c f4       	brge	.+10     	; 0x3c10 <LCD_vInitWithOutClear+0x196>
		__ticks = 1;
    3c06:	81 e0       	ldi	r24, 0x01	; 1
    3c08:	90 e0       	ldi	r25, 0x00	; 0
    3c0a:	9a a3       	std	Y+34, r25	; 0x22
    3c0c:	89 a3       	std	Y+33, r24	; 0x21
    3c0e:	3f c0       	rjmp	.+126    	; 0x3c8e <LCD_vInitWithOutClear+0x214>
	else if (__tmp > 65535)
    3c10:	6b a1       	ldd	r22, Y+35	; 0x23
    3c12:	7c a1       	ldd	r23, Y+36	; 0x24
    3c14:	8d a1       	ldd	r24, Y+37	; 0x25
    3c16:	9e a1       	ldd	r25, Y+38	; 0x26
    3c18:	20 e0       	ldi	r18, 0x00	; 0
    3c1a:	3f ef       	ldi	r19, 0xFF	; 255
    3c1c:	4f e7       	ldi	r20, 0x7F	; 127
    3c1e:	57 e4       	ldi	r21, 0x47	; 71
    3c20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3c24:	18 16       	cp	r1, r24
    3c26:	4c f5       	brge	.+82     	; 0x3c7a <LCD_vInitWithOutClear+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c28:	6f a1       	ldd	r22, Y+39	; 0x27
    3c2a:	78 a5       	ldd	r23, Y+40	; 0x28
    3c2c:	89 a5       	ldd	r24, Y+41	; 0x29
    3c2e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3c30:	20 e0       	ldi	r18, 0x00	; 0
    3c32:	30 e0       	ldi	r19, 0x00	; 0
    3c34:	40 e2       	ldi	r20, 0x20	; 32
    3c36:	51 e4       	ldi	r21, 0x41	; 65
    3c38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c3c:	dc 01       	movw	r26, r24
    3c3e:	cb 01       	movw	r24, r22
    3c40:	bc 01       	movw	r22, r24
    3c42:	cd 01       	movw	r24, r26
    3c44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c48:	dc 01       	movw	r26, r24
    3c4a:	cb 01       	movw	r24, r22
    3c4c:	9a a3       	std	Y+34, r25	; 0x22
    3c4e:	89 a3       	std	Y+33, r24	; 0x21
    3c50:	0f c0       	rjmp	.+30     	; 0x3c70 <LCD_vInitWithOutClear+0x1f6>
    3c52:	80 e9       	ldi	r24, 0x90	; 144
    3c54:	91 e0       	ldi	r25, 0x01	; 1
    3c56:	98 a3       	std	Y+32, r25	; 0x20
    3c58:	8f 8f       	std	Y+31, r24	; 0x1f
    3c5a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3c5c:	98 a1       	ldd	r25, Y+32	; 0x20
    3c5e:	01 97       	sbiw	r24, 0x01	; 1
    3c60:	f1 f7       	brne	.-4      	; 0x3c5e <LCD_vInitWithOutClear+0x1e4>
    3c62:	98 a3       	std	Y+32, r25	; 0x20
    3c64:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c66:	89 a1       	ldd	r24, Y+33	; 0x21
    3c68:	9a a1       	ldd	r25, Y+34	; 0x22
    3c6a:	01 97       	sbiw	r24, 0x01	; 1
    3c6c:	9a a3       	std	Y+34, r25	; 0x22
    3c6e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c70:	89 a1       	ldd	r24, Y+33	; 0x21
    3c72:	9a a1       	ldd	r25, Y+34	; 0x22
    3c74:	00 97       	sbiw	r24, 0x00	; 0
    3c76:	69 f7       	brne	.-38     	; 0x3c52 <LCD_vInitWithOutClear+0x1d8>
    3c78:	14 c0       	rjmp	.+40     	; 0x3ca2 <LCD_vInitWithOutClear+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c7a:	6b a1       	ldd	r22, Y+35	; 0x23
    3c7c:	7c a1       	ldd	r23, Y+36	; 0x24
    3c7e:	8d a1       	ldd	r24, Y+37	; 0x25
    3c80:	9e a1       	ldd	r25, Y+38	; 0x26
    3c82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c86:	dc 01       	movw	r26, r24
    3c88:	cb 01       	movw	r24, r22
    3c8a:	9a a3       	std	Y+34, r25	; 0x22
    3c8c:	89 a3       	std	Y+33, r24	; 0x21
    3c8e:	89 a1       	ldd	r24, Y+33	; 0x21
    3c90:	9a a1       	ldd	r25, Y+34	; 0x22
    3c92:	9e 8f       	std	Y+30, r25	; 0x1e
    3c94:	8d 8f       	std	Y+29, r24	; 0x1d
    3c96:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3c98:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3c9a:	01 97       	sbiw	r24, 0x01	; 1
    3c9c:	f1 f7       	brne	.-4      	; 0x3c9a <LCD_vInitWithOutClear+0x220>
    3c9e:	9e 8f       	std	Y+30, r25	; 0x1e
    3ca0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	LCD_vSendCommand(DisplayOnControl);
    3ca2:	8e e0       	ldi	r24, 0x0E	; 14
    3ca4:	0e 94 7e 19 	call	0x32fc	; 0x32fc <LCD_vSendCommand>
    3ca8:	80 e0       	ldi	r24, 0x00	; 0
    3caa:	90 e0       	ldi	r25, 0x00	; 0
    3cac:	a0 e0       	ldi	r26, 0x00	; 0
    3cae:	b0 e4       	ldi	r27, 0x40	; 64
    3cb0:	89 8f       	std	Y+25, r24	; 0x19
    3cb2:	9a 8f       	std	Y+26, r25	; 0x1a
    3cb4:	ab 8f       	std	Y+27, r26	; 0x1b
    3cb6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cb8:	69 8d       	ldd	r22, Y+25	; 0x19
    3cba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3cbc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3cbe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3cc0:	20 e0       	ldi	r18, 0x00	; 0
    3cc2:	30 e0       	ldi	r19, 0x00	; 0
    3cc4:	4a e7       	ldi	r20, 0x7A	; 122
    3cc6:	55 e4       	ldi	r21, 0x45	; 69
    3cc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ccc:	dc 01       	movw	r26, r24
    3cce:	cb 01       	movw	r24, r22
    3cd0:	8d 8b       	std	Y+21, r24	; 0x15
    3cd2:	9e 8b       	std	Y+22, r25	; 0x16
    3cd4:	af 8b       	std	Y+23, r26	; 0x17
    3cd6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3cd8:	6d 89       	ldd	r22, Y+21	; 0x15
    3cda:	7e 89       	ldd	r23, Y+22	; 0x16
    3cdc:	8f 89       	ldd	r24, Y+23	; 0x17
    3cde:	98 8d       	ldd	r25, Y+24	; 0x18
    3ce0:	20 e0       	ldi	r18, 0x00	; 0
    3ce2:	30 e0       	ldi	r19, 0x00	; 0
    3ce4:	40 e8       	ldi	r20, 0x80	; 128
    3ce6:	5f e3       	ldi	r21, 0x3F	; 63
    3ce8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3cec:	88 23       	and	r24, r24
    3cee:	2c f4       	brge	.+10     	; 0x3cfa <LCD_vInitWithOutClear+0x280>
		__ticks = 1;
    3cf0:	81 e0       	ldi	r24, 0x01	; 1
    3cf2:	90 e0       	ldi	r25, 0x00	; 0
    3cf4:	9c 8b       	std	Y+20, r25	; 0x14
    3cf6:	8b 8b       	std	Y+19, r24	; 0x13
    3cf8:	3f c0       	rjmp	.+126    	; 0x3d78 <LCD_vInitWithOutClear+0x2fe>
	else if (__tmp > 65535)
    3cfa:	6d 89       	ldd	r22, Y+21	; 0x15
    3cfc:	7e 89       	ldd	r23, Y+22	; 0x16
    3cfe:	8f 89       	ldd	r24, Y+23	; 0x17
    3d00:	98 8d       	ldd	r25, Y+24	; 0x18
    3d02:	20 e0       	ldi	r18, 0x00	; 0
    3d04:	3f ef       	ldi	r19, 0xFF	; 255
    3d06:	4f e7       	ldi	r20, 0x7F	; 127
    3d08:	57 e4       	ldi	r21, 0x47	; 71
    3d0a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3d0e:	18 16       	cp	r1, r24
    3d10:	4c f5       	brge	.+82     	; 0x3d64 <LCD_vInitWithOutClear+0x2ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d12:	69 8d       	ldd	r22, Y+25	; 0x19
    3d14:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3d16:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3d18:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3d1a:	20 e0       	ldi	r18, 0x00	; 0
    3d1c:	30 e0       	ldi	r19, 0x00	; 0
    3d1e:	40 e2       	ldi	r20, 0x20	; 32
    3d20:	51 e4       	ldi	r21, 0x41	; 65
    3d22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d26:	dc 01       	movw	r26, r24
    3d28:	cb 01       	movw	r24, r22
    3d2a:	bc 01       	movw	r22, r24
    3d2c:	cd 01       	movw	r24, r26
    3d2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d32:	dc 01       	movw	r26, r24
    3d34:	cb 01       	movw	r24, r22
    3d36:	9c 8b       	std	Y+20, r25	; 0x14
    3d38:	8b 8b       	std	Y+19, r24	; 0x13
    3d3a:	0f c0       	rjmp	.+30     	; 0x3d5a <LCD_vInitWithOutClear+0x2e0>
    3d3c:	80 e9       	ldi	r24, 0x90	; 144
    3d3e:	91 e0       	ldi	r25, 0x01	; 1
    3d40:	9a 8b       	std	Y+18, r25	; 0x12
    3d42:	89 8b       	std	Y+17, r24	; 0x11
    3d44:	89 89       	ldd	r24, Y+17	; 0x11
    3d46:	9a 89       	ldd	r25, Y+18	; 0x12
    3d48:	01 97       	sbiw	r24, 0x01	; 1
    3d4a:	f1 f7       	brne	.-4      	; 0x3d48 <LCD_vInitWithOutClear+0x2ce>
    3d4c:	9a 8b       	std	Y+18, r25	; 0x12
    3d4e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d50:	8b 89       	ldd	r24, Y+19	; 0x13
    3d52:	9c 89       	ldd	r25, Y+20	; 0x14
    3d54:	01 97       	sbiw	r24, 0x01	; 1
    3d56:	9c 8b       	std	Y+20, r25	; 0x14
    3d58:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d5a:	8b 89       	ldd	r24, Y+19	; 0x13
    3d5c:	9c 89       	ldd	r25, Y+20	; 0x14
    3d5e:	00 97       	sbiw	r24, 0x00	; 0
    3d60:	69 f7       	brne	.-38     	; 0x3d3c <LCD_vInitWithOutClear+0x2c2>
    3d62:	14 c0       	rjmp	.+40     	; 0x3d8c <LCD_vInitWithOutClear+0x312>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d64:	6d 89       	ldd	r22, Y+21	; 0x15
    3d66:	7e 89       	ldd	r23, Y+22	; 0x16
    3d68:	8f 89       	ldd	r24, Y+23	; 0x17
    3d6a:	98 8d       	ldd	r25, Y+24	; 0x18
    3d6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d70:	dc 01       	movw	r26, r24
    3d72:	cb 01       	movw	r24, r22
    3d74:	9c 8b       	std	Y+20, r25	; 0x14
    3d76:	8b 8b       	std	Y+19, r24	; 0x13
    3d78:	8b 89       	ldd	r24, Y+19	; 0x13
    3d7a:	9c 89       	ldd	r25, Y+20	; 0x14
    3d7c:	98 8b       	std	Y+16, r25	; 0x10
    3d7e:	8f 87       	std	Y+15, r24	; 0x0f
    3d80:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d82:	98 89       	ldd	r25, Y+16	; 0x10
    3d84:	01 97       	sbiw	r24, 0x01	; 1
    3d86:	f1 f7       	brne	.-4      	; 0x3d84 <LCD_vInitWithOutClear+0x30a>
    3d88:	98 8b       	std	Y+16, r25	; 0x10
    3d8a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	LCD_vSendCommand(EnrtyMode);
    3d8c:	86 e0       	ldi	r24, 0x06	; 6
    3d8e:	0e 94 7e 19 	call	0x32fc	; 0x32fc <LCD_vSendCommand>
    3d92:	80 e0       	ldi	r24, 0x00	; 0
    3d94:	90 e0       	ldi	r25, 0x00	; 0
    3d96:	a0 e0       	ldi	r26, 0x00	; 0
    3d98:	b0 e4       	ldi	r27, 0x40	; 64
    3d9a:	8b 87       	std	Y+11, r24	; 0x0b
    3d9c:	9c 87       	std	Y+12, r25	; 0x0c
    3d9e:	ad 87       	std	Y+13, r26	; 0x0d
    3da0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3da2:	6b 85       	ldd	r22, Y+11	; 0x0b
    3da4:	7c 85       	ldd	r23, Y+12	; 0x0c
    3da6:	8d 85       	ldd	r24, Y+13	; 0x0d
    3da8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3daa:	20 e0       	ldi	r18, 0x00	; 0
    3dac:	30 e0       	ldi	r19, 0x00	; 0
    3dae:	4a e7       	ldi	r20, 0x7A	; 122
    3db0:	55 e4       	ldi	r21, 0x45	; 69
    3db2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3db6:	dc 01       	movw	r26, r24
    3db8:	cb 01       	movw	r24, r22
    3dba:	8f 83       	std	Y+7, r24	; 0x07
    3dbc:	98 87       	std	Y+8, r25	; 0x08
    3dbe:	a9 87       	std	Y+9, r26	; 0x09
    3dc0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3dc2:	6f 81       	ldd	r22, Y+7	; 0x07
    3dc4:	78 85       	ldd	r23, Y+8	; 0x08
    3dc6:	89 85       	ldd	r24, Y+9	; 0x09
    3dc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dca:	20 e0       	ldi	r18, 0x00	; 0
    3dcc:	30 e0       	ldi	r19, 0x00	; 0
    3dce:	40 e8       	ldi	r20, 0x80	; 128
    3dd0:	5f e3       	ldi	r21, 0x3F	; 63
    3dd2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3dd6:	88 23       	and	r24, r24
    3dd8:	2c f4       	brge	.+10     	; 0x3de4 <LCD_vInitWithOutClear+0x36a>
		__ticks = 1;
    3dda:	81 e0       	ldi	r24, 0x01	; 1
    3ddc:	90 e0       	ldi	r25, 0x00	; 0
    3dde:	9e 83       	std	Y+6, r25	; 0x06
    3de0:	8d 83       	std	Y+5, r24	; 0x05
    3de2:	3f c0       	rjmp	.+126    	; 0x3e62 <LCD_vInitWithOutClear+0x3e8>
	else if (__tmp > 65535)
    3de4:	6f 81       	ldd	r22, Y+7	; 0x07
    3de6:	78 85       	ldd	r23, Y+8	; 0x08
    3de8:	89 85       	ldd	r24, Y+9	; 0x09
    3dea:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dec:	20 e0       	ldi	r18, 0x00	; 0
    3dee:	3f ef       	ldi	r19, 0xFF	; 255
    3df0:	4f e7       	ldi	r20, 0x7F	; 127
    3df2:	57 e4       	ldi	r21, 0x47	; 71
    3df4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3df8:	18 16       	cp	r1, r24
    3dfa:	4c f5       	brge	.+82     	; 0x3e4e <LCD_vInitWithOutClear+0x3d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3dfc:	6b 85       	ldd	r22, Y+11	; 0x0b
    3dfe:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e00:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e02:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e04:	20 e0       	ldi	r18, 0x00	; 0
    3e06:	30 e0       	ldi	r19, 0x00	; 0
    3e08:	40 e2       	ldi	r20, 0x20	; 32
    3e0a:	51 e4       	ldi	r21, 0x41	; 65
    3e0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e10:	dc 01       	movw	r26, r24
    3e12:	cb 01       	movw	r24, r22
    3e14:	bc 01       	movw	r22, r24
    3e16:	cd 01       	movw	r24, r26
    3e18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e1c:	dc 01       	movw	r26, r24
    3e1e:	cb 01       	movw	r24, r22
    3e20:	9e 83       	std	Y+6, r25	; 0x06
    3e22:	8d 83       	std	Y+5, r24	; 0x05
    3e24:	0f c0       	rjmp	.+30     	; 0x3e44 <LCD_vInitWithOutClear+0x3ca>
    3e26:	80 e9       	ldi	r24, 0x90	; 144
    3e28:	91 e0       	ldi	r25, 0x01	; 1
    3e2a:	9c 83       	std	Y+4, r25	; 0x04
    3e2c:	8b 83       	std	Y+3, r24	; 0x03
    3e2e:	8b 81       	ldd	r24, Y+3	; 0x03
    3e30:	9c 81       	ldd	r25, Y+4	; 0x04
    3e32:	01 97       	sbiw	r24, 0x01	; 1
    3e34:	f1 f7       	brne	.-4      	; 0x3e32 <LCD_vInitWithOutClear+0x3b8>
    3e36:	9c 83       	std	Y+4, r25	; 0x04
    3e38:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e3a:	8d 81       	ldd	r24, Y+5	; 0x05
    3e3c:	9e 81       	ldd	r25, Y+6	; 0x06
    3e3e:	01 97       	sbiw	r24, 0x01	; 1
    3e40:	9e 83       	std	Y+6, r25	; 0x06
    3e42:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e44:	8d 81       	ldd	r24, Y+5	; 0x05
    3e46:	9e 81       	ldd	r25, Y+6	; 0x06
    3e48:	00 97       	sbiw	r24, 0x00	; 0
    3e4a:	69 f7       	brne	.-38     	; 0x3e26 <LCD_vInitWithOutClear+0x3ac>
    3e4c:	14 c0       	rjmp	.+40     	; 0x3e76 <LCD_vInitWithOutClear+0x3fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e4e:	6f 81       	ldd	r22, Y+7	; 0x07
    3e50:	78 85       	ldd	r23, Y+8	; 0x08
    3e52:	89 85       	ldd	r24, Y+9	; 0x09
    3e54:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e5a:	dc 01       	movw	r26, r24
    3e5c:	cb 01       	movw	r24, r22
    3e5e:	9e 83       	std	Y+6, r25	; 0x06
    3e60:	8d 83       	std	Y+5, r24	; 0x05
    3e62:	8d 81       	ldd	r24, Y+5	; 0x05
    3e64:	9e 81       	ldd	r25, Y+6	; 0x06
    3e66:	9a 83       	std	Y+2, r25	; 0x02
    3e68:	89 83       	std	Y+1, r24	; 0x01
    3e6a:	89 81       	ldd	r24, Y+1	; 0x01
    3e6c:	9a 81       	ldd	r25, Y+2	; 0x02
    3e6e:	01 97       	sbiw	r24, 0x01	; 1
    3e70:	f1 f7       	brne	.-4      	; 0x3e6e <LCD_vInitWithOutClear+0x3f4>
    3e72:	9a 83       	std	Y+2, r25	; 0x02
    3e74:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    3e76:	e8 96       	adiw	r28, 0x38	; 56
    3e78:	0f b6       	in	r0, 0x3f	; 63
    3e7a:	f8 94       	cli
    3e7c:	de bf       	out	0x3e, r29	; 62
    3e7e:	0f be       	out	0x3f, r0	; 63
    3e80:	cd bf       	out	0x3d, r28	; 61
    3e82:	cf 91       	pop	r28
    3e84:	df 91       	pop	r29
    3e86:	08 95       	ret

00003e88 <LCD_vWriteCharacter>:
void LCD_vWriteCharacter(u8 Loc_u8Character){
    3e88:	df 93       	push	r29
    3e8a:	cf 93       	push	r28
    3e8c:	cd b7       	in	r28, 0x3d	; 61
    3e8e:	de b7       	in	r29, 0x3e	; 62
    3e90:	6d 97       	sbiw	r28, 0x1d	; 29
    3e92:	0f b6       	in	r0, 0x3f	; 63
    3e94:	f8 94       	cli
    3e96:	de bf       	out	0x3e, r29	; 62
    3e98:	0f be       	out	0x3f, r0	; 63
    3e9a:	cd bf       	out	0x3d, r28	; 61
    3e9c:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_vSetPinValue(PortB, Pin1, Pin_High);
    3e9e:	81 e0       	ldi	r24, 0x01	; 1
    3ea0:	61 e0       	ldi	r22, 0x01	; 1
    3ea2:	41 e0       	ldi	r20, 0x01	; 1
    3ea4:	0e 94 75 11 	call	0x22ea	; 0x22ea <DIO_vSetPinValue>
	DIO_vSetPinValue(PortB, Pin2, Pin_Low);
    3ea8:	81 e0       	ldi	r24, 0x01	; 1
    3eaa:	62 e0       	ldi	r22, 0x02	; 2
    3eac:	40 e0       	ldi	r20, 0x00	; 0
    3eae:	0e 94 75 11 	call	0x22ea	; 0x22ea <DIO_vSetPinValue>
	DIO_vSetPinValue(PortB, Pin3, Pin_Low);
    3eb2:	81 e0       	ldi	r24, 0x01	; 1
    3eb4:	63 e0       	ldi	r22, 0x03	; 3
    3eb6:	40 e0       	ldi	r20, 0x00	; 0
    3eb8:	0e 94 75 11 	call	0x22ea	; 0x22ea <DIO_vSetPinValue>
	//------Send command-------
	DIO_vSetPortValue(PortA,(Loc_u8Character)&0xF0);
    3ebc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3ebe:	98 2f       	mov	r25, r24
    3ec0:	90 7f       	andi	r25, 0xF0	; 240
    3ec2:	80 e0       	ldi	r24, 0x00	; 0
    3ec4:	69 2f       	mov	r22, r25
    3ec6:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <DIO_vSetPortValue>
	DIO_vSetPinValue(PortB, Pin3, Pin_High);
    3eca:	81 e0       	ldi	r24, 0x01	; 1
    3ecc:	63 e0       	ldi	r22, 0x03	; 3
    3ece:	41 e0       	ldi	r20, 0x01	; 1
    3ed0:	0e 94 75 11 	call	0x22ea	; 0x22ea <DIO_vSetPinValue>
    3ed4:	80 e0       	ldi	r24, 0x00	; 0
    3ed6:	90 e0       	ldi	r25, 0x00	; 0
    3ed8:	a0 e2       	ldi	r26, 0x20	; 32
    3eda:	b1 e4       	ldi	r27, 0x41	; 65
    3edc:	89 8f       	std	Y+25, r24	; 0x19
    3ede:	9a 8f       	std	Y+26, r25	; 0x1a
    3ee0:	ab 8f       	std	Y+27, r26	; 0x1b
    3ee2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ee4:	69 8d       	ldd	r22, Y+25	; 0x19
    3ee6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3ee8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3eea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3eec:	20 e0       	ldi	r18, 0x00	; 0
    3eee:	30 e0       	ldi	r19, 0x00	; 0
    3ef0:	4a e7       	ldi	r20, 0x7A	; 122
    3ef2:	55 e4       	ldi	r21, 0x45	; 69
    3ef4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ef8:	dc 01       	movw	r26, r24
    3efa:	cb 01       	movw	r24, r22
    3efc:	8d 8b       	std	Y+21, r24	; 0x15
    3efe:	9e 8b       	std	Y+22, r25	; 0x16
    3f00:	af 8b       	std	Y+23, r26	; 0x17
    3f02:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3f04:	6d 89       	ldd	r22, Y+21	; 0x15
    3f06:	7e 89       	ldd	r23, Y+22	; 0x16
    3f08:	8f 89       	ldd	r24, Y+23	; 0x17
    3f0a:	98 8d       	ldd	r25, Y+24	; 0x18
    3f0c:	20 e0       	ldi	r18, 0x00	; 0
    3f0e:	30 e0       	ldi	r19, 0x00	; 0
    3f10:	40 e8       	ldi	r20, 0x80	; 128
    3f12:	5f e3       	ldi	r21, 0x3F	; 63
    3f14:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3f18:	88 23       	and	r24, r24
    3f1a:	2c f4       	brge	.+10     	; 0x3f26 <LCD_vWriteCharacter+0x9e>
		__ticks = 1;
    3f1c:	81 e0       	ldi	r24, 0x01	; 1
    3f1e:	90 e0       	ldi	r25, 0x00	; 0
    3f20:	9c 8b       	std	Y+20, r25	; 0x14
    3f22:	8b 8b       	std	Y+19, r24	; 0x13
    3f24:	3f c0       	rjmp	.+126    	; 0x3fa4 <LCD_vWriteCharacter+0x11c>
	else if (__tmp > 65535)
    3f26:	6d 89       	ldd	r22, Y+21	; 0x15
    3f28:	7e 89       	ldd	r23, Y+22	; 0x16
    3f2a:	8f 89       	ldd	r24, Y+23	; 0x17
    3f2c:	98 8d       	ldd	r25, Y+24	; 0x18
    3f2e:	20 e0       	ldi	r18, 0x00	; 0
    3f30:	3f ef       	ldi	r19, 0xFF	; 255
    3f32:	4f e7       	ldi	r20, 0x7F	; 127
    3f34:	57 e4       	ldi	r21, 0x47	; 71
    3f36:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3f3a:	18 16       	cp	r1, r24
    3f3c:	4c f5       	brge	.+82     	; 0x3f90 <LCD_vWriteCharacter+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f3e:	69 8d       	ldd	r22, Y+25	; 0x19
    3f40:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3f42:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3f44:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3f46:	20 e0       	ldi	r18, 0x00	; 0
    3f48:	30 e0       	ldi	r19, 0x00	; 0
    3f4a:	40 e2       	ldi	r20, 0x20	; 32
    3f4c:	51 e4       	ldi	r21, 0x41	; 65
    3f4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f52:	dc 01       	movw	r26, r24
    3f54:	cb 01       	movw	r24, r22
    3f56:	bc 01       	movw	r22, r24
    3f58:	cd 01       	movw	r24, r26
    3f5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f5e:	dc 01       	movw	r26, r24
    3f60:	cb 01       	movw	r24, r22
    3f62:	9c 8b       	std	Y+20, r25	; 0x14
    3f64:	8b 8b       	std	Y+19, r24	; 0x13
    3f66:	0f c0       	rjmp	.+30     	; 0x3f86 <LCD_vWriteCharacter+0xfe>
    3f68:	80 e9       	ldi	r24, 0x90	; 144
    3f6a:	91 e0       	ldi	r25, 0x01	; 1
    3f6c:	9a 8b       	std	Y+18, r25	; 0x12
    3f6e:	89 8b       	std	Y+17, r24	; 0x11
    3f70:	89 89       	ldd	r24, Y+17	; 0x11
    3f72:	9a 89       	ldd	r25, Y+18	; 0x12
    3f74:	01 97       	sbiw	r24, 0x01	; 1
    3f76:	f1 f7       	brne	.-4      	; 0x3f74 <LCD_vWriteCharacter+0xec>
    3f78:	9a 8b       	std	Y+18, r25	; 0x12
    3f7a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f7c:	8b 89       	ldd	r24, Y+19	; 0x13
    3f7e:	9c 89       	ldd	r25, Y+20	; 0x14
    3f80:	01 97       	sbiw	r24, 0x01	; 1
    3f82:	9c 8b       	std	Y+20, r25	; 0x14
    3f84:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f86:	8b 89       	ldd	r24, Y+19	; 0x13
    3f88:	9c 89       	ldd	r25, Y+20	; 0x14
    3f8a:	00 97       	sbiw	r24, 0x00	; 0
    3f8c:	69 f7       	brne	.-38     	; 0x3f68 <LCD_vWriteCharacter+0xe0>
    3f8e:	14 c0       	rjmp	.+40     	; 0x3fb8 <LCD_vWriteCharacter+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f90:	6d 89       	ldd	r22, Y+21	; 0x15
    3f92:	7e 89       	ldd	r23, Y+22	; 0x16
    3f94:	8f 89       	ldd	r24, Y+23	; 0x17
    3f96:	98 8d       	ldd	r25, Y+24	; 0x18
    3f98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f9c:	dc 01       	movw	r26, r24
    3f9e:	cb 01       	movw	r24, r22
    3fa0:	9c 8b       	std	Y+20, r25	; 0x14
    3fa2:	8b 8b       	std	Y+19, r24	; 0x13
    3fa4:	8b 89       	ldd	r24, Y+19	; 0x13
    3fa6:	9c 89       	ldd	r25, Y+20	; 0x14
    3fa8:	98 8b       	std	Y+16, r25	; 0x10
    3faa:	8f 87       	std	Y+15, r24	; 0x0f
    3fac:	8f 85       	ldd	r24, Y+15	; 0x0f
    3fae:	98 89       	ldd	r25, Y+16	; 0x10
    3fb0:	01 97       	sbiw	r24, 0x01	; 1
    3fb2:	f1 f7       	brne	.-4      	; 0x3fb0 <LCD_vWriteCharacter+0x128>
    3fb4:	98 8b       	std	Y+16, r25	; 0x10
    3fb6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	DIO_vSetPinValue(PortB, Pin3, Pin_Low);
    3fb8:	81 e0       	ldi	r24, 0x01	; 1
    3fba:	63 e0       	ldi	r22, 0x03	; 3
    3fbc:	40 e0       	ldi	r20, 0x00	; 0
    3fbe:	0e 94 75 11 	call	0x22ea	; 0x22ea <DIO_vSetPinValue>
	DIO_vSetPortValue(PortA,(Loc_u8Character<<4));
    3fc2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3fc4:	98 2f       	mov	r25, r24
    3fc6:	92 95       	swap	r25
    3fc8:	90 7f       	andi	r25, 0xF0	; 240
    3fca:	80 e0       	ldi	r24, 0x00	; 0
    3fcc:	69 2f       	mov	r22, r25
    3fce:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <DIO_vSetPortValue>
	DIO_vSetPinValue(PortB, Pin3, Pin_High);
    3fd2:	81 e0       	ldi	r24, 0x01	; 1
    3fd4:	63 e0       	ldi	r22, 0x03	; 3
    3fd6:	41 e0       	ldi	r20, 0x01	; 1
    3fd8:	0e 94 75 11 	call	0x22ea	; 0x22ea <DIO_vSetPinValue>
    3fdc:	80 e0       	ldi	r24, 0x00	; 0
    3fde:	90 e0       	ldi	r25, 0x00	; 0
    3fe0:	a0 e2       	ldi	r26, 0x20	; 32
    3fe2:	b1 e4       	ldi	r27, 0x41	; 65
    3fe4:	8b 87       	std	Y+11, r24	; 0x0b
    3fe6:	9c 87       	std	Y+12, r25	; 0x0c
    3fe8:	ad 87       	std	Y+13, r26	; 0x0d
    3fea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fec:	6b 85       	ldd	r22, Y+11	; 0x0b
    3fee:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ff0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ff2:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ff4:	20 e0       	ldi	r18, 0x00	; 0
    3ff6:	30 e0       	ldi	r19, 0x00	; 0
    3ff8:	4a e7       	ldi	r20, 0x7A	; 122
    3ffa:	55 e4       	ldi	r21, 0x45	; 69
    3ffc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4000:	dc 01       	movw	r26, r24
    4002:	cb 01       	movw	r24, r22
    4004:	8f 83       	std	Y+7, r24	; 0x07
    4006:	98 87       	std	Y+8, r25	; 0x08
    4008:	a9 87       	std	Y+9, r26	; 0x09
    400a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    400c:	6f 81       	ldd	r22, Y+7	; 0x07
    400e:	78 85       	ldd	r23, Y+8	; 0x08
    4010:	89 85       	ldd	r24, Y+9	; 0x09
    4012:	9a 85       	ldd	r25, Y+10	; 0x0a
    4014:	20 e0       	ldi	r18, 0x00	; 0
    4016:	30 e0       	ldi	r19, 0x00	; 0
    4018:	40 e8       	ldi	r20, 0x80	; 128
    401a:	5f e3       	ldi	r21, 0x3F	; 63
    401c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4020:	88 23       	and	r24, r24
    4022:	2c f4       	brge	.+10     	; 0x402e <LCD_vWriteCharacter+0x1a6>
		__ticks = 1;
    4024:	81 e0       	ldi	r24, 0x01	; 1
    4026:	90 e0       	ldi	r25, 0x00	; 0
    4028:	9e 83       	std	Y+6, r25	; 0x06
    402a:	8d 83       	std	Y+5, r24	; 0x05
    402c:	3f c0       	rjmp	.+126    	; 0x40ac <LCD_vWriteCharacter+0x224>
	else if (__tmp > 65535)
    402e:	6f 81       	ldd	r22, Y+7	; 0x07
    4030:	78 85       	ldd	r23, Y+8	; 0x08
    4032:	89 85       	ldd	r24, Y+9	; 0x09
    4034:	9a 85       	ldd	r25, Y+10	; 0x0a
    4036:	20 e0       	ldi	r18, 0x00	; 0
    4038:	3f ef       	ldi	r19, 0xFF	; 255
    403a:	4f e7       	ldi	r20, 0x7F	; 127
    403c:	57 e4       	ldi	r21, 0x47	; 71
    403e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4042:	18 16       	cp	r1, r24
    4044:	4c f5       	brge	.+82     	; 0x4098 <LCD_vWriteCharacter+0x210>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4046:	6b 85       	ldd	r22, Y+11	; 0x0b
    4048:	7c 85       	ldd	r23, Y+12	; 0x0c
    404a:	8d 85       	ldd	r24, Y+13	; 0x0d
    404c:	9e 85       	ldd	r25, Y+14	; 0x0e
    404e:	20 e0       	ldi	r18, 0x00	; 0
    4050:	30 e0       	ldi	r19, 0x00	; 0
    4052:	40 e2       	ldi	r20, 0x20	; 32
    4054:	51 e4       	ldi	r21, 0x41	; 65
    4056:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    405a:	dc 01       	movw	r26, r24
    405c:	cb 01       	movw	r24, r22
    405e:	bc 01       	movw	r22, r24
    4060:	cd 01       	movw	r24, r26
    4062:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4066:	dc 01       	movw	r26, r24
    4068:	cb 01       	movw	r24, r22
    406a:	9e 83       	std	Y+6, r25	; 0x06
    406c:	8d 83       	std	Y+5, r24	; 0x05
    406e:	0f c0       	rjmp	.+30     	; 0x408e <LCD_vWriteCharacter+0x206>
    4070:	80 e9       	ldi	r24, 0x90	; 144
    4072:	91 e0       	ldi	r25, 0x01	; 1
    4074:	9c 83       	std	Y+4, r25	; 0x04
    4076:	8b 83       	std	Y+3, r24	; 0x03
    4078:	8b 81       	ldd	r24, Y+3	; 0x03
    407a:	9c 81       	ldd	r25, Y+4	; 0x04
    407c:	01 97       	sbiw	r24, 0x01	; 1
    407e:	f1 f7       	brne	.-4      	; 0x407c <LCD_vWriteCharacter+0x1f4>
    4080:	9c 83       	std	Y+4, r25	; 0x04
    4082:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4084:	8d 81       	ldd	r24, Y+5	; 0x05
    4086:	9e 81       	ldd	r25, Y+6	; 0x06
    4088:	01 97       	sbiw	r24, 0x01	; 1
    408a:	9e 83       	std	Y+6, r25	; 0x06
    408c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    408e:	8d 81       	ldd	r24, Y+5	; 0x05
    4090:	9e 81       	ldd	r25, Y+6	; 0x06
    4092:	00 97       	sbiw	r24, 0x00	; 0
    4094:	69 f7       	brne	.-38     	; 0x4070 <LCD_vWriteCharacter+0x1e8>
    4096:	14 c0       	rjmp	.+40     	; 0x40c0 <LCD_vWriteCharacter+0x238>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4098:	6f 81       	ldd	r22, Y+7	; 0x07
    409a:	78 85       	ldd	r23, Y+8	; 0x08
    409c:	89 85       	ldd	r24, Y+9	; 0x09
    409e:	9a 85       	ldd	r25, Y+10	; 0x0a
    40a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40a4:	dc 01       	movw	r26, r24
    40a6:	cb 01       	movw	r24, r22
    40a8:	9e 83       	std	Y+6, r25	; 0x06
    40aa:	8d 83       	std	Y+5, r24	; 0x05
    40ac:	8d 81       	ldd	r24, Y+5	; 0x05
    40ae:	9e 81       	ldd	r25, Y+6	; 0x06
    40b0:	9a 83       	std	Y+2, r25	; 0x02
    40b2:	89 83       	std	Y+1, r24	; 0x01
    40b4:	89 81       	ldd	r24, Y+1	; 0x01
    40b6:	9a 81       	ldd	r25, Y+2	; 0x02
    40b8:	01 97       	sbiw	r24, 0x01	; 1
    40ba:	f1 f7       	brne	.-4      	; 0x40b8 <LCD_vWriteCharacter+0x230>
    40bc:	9a 83       	std	Y+2, r25	; 0x02
    40be:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	DIO_vSetPinValue(PortB, Pin3, Pin_Low);
    40c0:	81 e0       	ldi	r24, 0x01	; 1
    40c2:	63 e0       	ldi	r22, 0x03	; 3
    40c4:	40 e0       	ldi	r20, 0x00	; 0
    40c6:	0e 94 75 11 	call	0x22ea	; 0x22ea <DIO_vSetPinValue>



}
    40ca:	6d 96       	adiw	r28, 0x1d	; 29
    40cc:	0f b6       	in	r0, 0x3f	; 63
    40ce:	f8 94       	cli
    40d0:	de bf       	out	0x3e, r29	; 62
    40d2:	0f be       	out	0x3f, r0	; 63
    40d4:	cd bf       	out	0x3d, r28	; 61
    40d6:	cf 91       	pop	r28
    40d8:	df 91       	pop	r29
    40da:	08 95       	ret

000040dc <LCD_vGoTo>:
void LCD_vGoTo(u8 Loc_u8Line, u8 Loc_u8CharPos){
    40dc:	df 93       	push	r29
    40de:	cf 93       	push	r28
    40e0:	00 d0       	rcall	.+0      	; 0x40e2 <LCD_vGoTo+0x6>
    40e2:	cd b7       	in	r28, 0x3d	; 61
    40e4:	de b7       	in	r29, 0x3e	; 62
    40e6:	89 83       	std	Y+1, r24	; 0x01
    40e8:	6a 83       	std	Y+2, r22	; 0x02
	LCD_vSendCommand(Loc_u8Line|Loc_u8CharPos);
    40ea:	89 81       	ldd	r24, Y+1	; 0x01
    40ec:	9a 81       	ldd	r25, Y+2	; 0x02
    40ee:	89 2b       	or	r24, r25
    40f0:	0e 94 7e 19 	call	0x32fc	; 0x32fc <LCD_vSendCommand>
}
    40f4:	0f 90       	pop	r0
    40f6:	0f 90       	pop	r0
    40f8:	cf 91       	pop	r28
    40fa:	df 91       	pop	r29
    40fc:	08 95       	ret

000040fe <LCD_vClear>:
void LCD_vClear(){
    40fe:	df 93       	push	r29
    4100:	cf 93       	push	r28
    4102:	cd b7       	in	r28, 0x3d	; 61
    4104:	de b7       	in	r29, 0x3e	; 62
    4106:	2e 97       	sbiw	r28, 0x0e	; 14
    4108:	0f b6       	in	r0, 0x3f	; 63
    410a:	f8 94       	cli
    410c:	de bf       	out	0x3e, r29	; 62
    410e:	0f be       	out	0x3f, r0	; 63
    4110:	cd bf       	out	0x3d, r28	; 61
	LCD_vSendCommand(DisplayClear);
    4112:	81 e0       	ldi	r24, 0x01	; 1
    4114:	0e 94 7e 19 	call	0x32fc	; 0x32fc <LCD_vSendCommand>
    4118:	80 e0       	ldi	r24, 0x00	; 0
    411a:	90 e0       	ldi	r25, 0x00	; 0
    411c:	a0 e0       	ldi	r26, 0x00	; 0
    411e:	b0 e4       	ldi	r27, 0x40	; 64
    4120:	8b 87       	std	Y+11, r24	; 0x0b
    4122:	9c 87       	std	Y+12, r25	; 0x0c
    4124:	ad 87       	std	Y+13, r26	; 0x0d
    4126:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4128:	6b 85       	ldd	r22, Y+11	; 0x0b
    412a:	7c 85       	ldd	r23, Y+12	; 0x0c
    412c:	8d 85       	ldd	r24, Y+13	; 0x0d
    412e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4130:	20 e0       	ldi	r18, 0x00	; 0
    4132:	30 e0       	ldi	r19, 0x00	; 0
    4134:	4a e7       	ldi	r20, 0x7A	; 122
    4136:	55 e4       	ldi	r21, 0x45	; 69
    4138:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    413c:	dc 01       	movw	r26, r24
    413e:	cb 01       	movw	r24, r22
    4140:	8f 83       	std	Y+7, r24	; 0x07
    4142:	98 87       	std	Y+8, r25	; 0x08
    4144:	a9 87       	std	Y+9, r26	; 0x09
    4146:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4148:	6f 81       	ldd	r22, Y+7	; 0x07
    414a:	78 85       	ldd	r23, Y+8	; 0x08
    414c:	89 85       	ldd	r24, Y+9	; 0x09
    414e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4150:	20 e0       	ldi	r18, 0x00	; 0
    4152:	30 e0       	ldi	r19, 0x00	; 0
    4154:	40 e8       	ldi	r20, 0x80	; 128
    4156:	5f e3       	ldi	r21, 0x3F	; 63
    4158:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    415c:	88 23       	and	r24, r24
    415e:	2c f4       	brge	.+10     	; 0x416a <LCD_vClear+0x6c>
		__ticks = 1;
    4160:	81 e0       	ldi	r24, 0x01	; 1
    4162:	90 e0       	ldi	r25, 0x00	; 0
    4164:	9e 83       	std	Y+6, r25	; 0x06
    4166:	8d 83       	std	Y+5, r24	; 0x05
    4168:	3f c0       	rjmp	.+126    	; 0x41e8 <LCD_vClear+0xea>
	else if (__tmp > 65535)
    416a:	6f 81       	ldd	r22, Y+7	; 0x07
    416c:	78 85       	ldd	r23, Y+8	; 0x08
    416e:	89 85       	ldd	r24, Y+9	; 0x09
    4170:	9a 85       	ldd	r25, Y+10	; 0x0a
    4172:	20 e0       	ldi	r18, 0x00	; 0
    4174:	3f ef       	ldi	r19, 0xFF	; 255
    4176:	4f e7       	ldi	r20, 0x7F	; 127
    4178:	57 e4       	ldi	r21, 0x47	; 71
    417a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    417e:	18 16       	cp	r1, r24
    4180:	4c f5       	brge	.+82     	; 0x41d4 <LCD_vClear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4182:	6b 85       	ldd	r22, Y+11	; 0x0b
    4184:	7c 85       	ldd	r23, Y+12	; 0x0c
    4186:	8d 85       	ldd	r24, Y+13	; 0x0d
    4188:	9e 85       	ldd	r25, Y+14	; 0x0e
    418a:	20 e0       	ldi	r18, 0x00	; 0
    418c:	30 e0       	ldi	r19, 0x00	; 0
    418e:	40 e2       	ldi	r20, 0x20	; 32
    4190:	51 e4       	ldi	r21, 0x41	; 65
    4192:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4196:	dc 01       	movw	r26, r24
    4198:	cb 01       	movw	r24, r22
    419a:	bc 01       	movw	r22, r24
    419c:	cd 01       	movw	r24, r26
    419e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41a2:	dc 01       	movw	r26, r24
    41a4:	cb 01       	movw	r24, r22
    41a6:	9e 83       	std	Y+6, r25	; 0x06
    41a8:	8d 83       	std	Y+5, r24	; 0x05
    41aa:	0f c0       	rjmp	.+30     	; 0x41ca <LCD_vClear+0xcc>
    41ac:	80 e9       	ldi	r24, 0x90	; 144
    41ae:	91 e0       	ldi	r25, 0x01	; 1
    41b0:	9c 83       	std	Y+4, r25	; 0x04
    41b2:	8b 83       	std	Y+3, r24	; 0x03
    41b4:	8b 81       	ldd	r24, Y+3	; 0x03
    41b6:	9c 81       	ldd	r25, Y+4	; 0x04
    41b8:	01 97       	sbiw	r24, 0x01	; 1
    41ba:	f1 f7       	brne	.-4      	; 0x41b8 <LCD_vClear+0xba>
    41bc:	9c 83       	std	Y+4, r25	; 0x04
    41be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41c0:	8d 81       	ldd	r24, Y+5	; 0x05
    41c2:	9e 81       	ldd	r25, Y+6	; 0x06
    41c4:	01 97       	sbiw	r24, 0x01	; 1
    41c6:	9e 83       	std	Y+6, r25	; 0x06
    41c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41ca:	8d 81       	ldd	r24, Y+5	; 0x05
    41cc:	9e 81       	ldd	r25, Y+6	; 0x06
    41ce:	00 97       	sbiw	r24, 0x00	; 0
    41d0:	69 f7       	brne	.-38     	; 0x41ac <LCD_vClear+0xae>
    41d2:	14 c0       	rjmp	.+40     	; 0x41fc <LCD_vClear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41d4:	6f 81       	ldd	r22, Y+7	; 0x07
    41d6:	78 85       	ldd	r23, Y+8	; 0x08
    41d8:	89 85       	ldd	r24, Y+9	; 0x09
    41da:	9a 85       	ldd	r25, Y+10	; 0x0a
    41dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41e0:	dc 01       	movw	r26, r24
    41e2:	cb 01       	movw	r24, r22
    41e4:	9e 83       	std	Y+6, r25	; 0x06
    41e6:	8d 83       	std	Y+5, r24	; 0x05
    41e8:	8d 81       	ldd	r24, Y+5	; 0x05
    41ea:	9e 81       	ldd	r25, Y+6	; 0x06
    41ec:	9a 83       	std	Y+2, r25	; 0x02
    41ee:	89 83       	std	Y+1, r24	; 0x01
    41f0:	89 81       	ldd	r24, Y+1	; 0x01
    41f2:	9a 81       	ldd	r25, Y+2	; 0x02
    41f4:	01 97       	sbiw	r24, 0x01	; 1
    41f6:	f1 f7       	brne	.-4      	; 0x41f4 <LCD_vClear+0xf6>
    41f8:	9a 83       	std	Y+2, r25	; 0x02
    41fa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    41fc:	2e 96       	adiw	r28, 0x0e	; 14
    41fe:	0f b6       	in	r0, 0x3f	; 63
    4200:	f8 94       	cli
    4202:	de bf       	out	0x3e, r29	; 62
    4204:	0f be       	out	0x3f, r0	; 63
    4206:	cd bf       	out	0x3d, r28	; 61
    4208:	cf 91       	pop	r28
    420a:	df 91       	pop	r29
    420c:	08 95       	ret

0000420e <LCD_vWriteString>:
void LCD_vWriteString(u8 *ptr){
    420e:	df 93       	push	r29
    4210:	cf 93       	push	r28
    4212:	00 d0       	rcall	.+0      	; 0x4214 <LCD_vWriteString+0x6>
    4214:	0f 92       	push	r0
    4216:	cd b7       	in	r28, 0x3d	; 61
    4218:	de b7       	in	r29, 0x3e	; 62
    421a:	9b 83       	std	Y+3, r25	; 0x03
    421c:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
    421e:	19 82       	std	Y+1, r1	; 0x01
    4220:	0e c0       	rjmp	.+28     	; 0x423e <LCD_vWriteString+0x30>
	while(ptr[i]!='\0'){
		LCD_vWriteCharacter(ptr[i]);
    4222:	89 81       	ldd	r24, Y+1	; 0x01
    4224:	28 2f       	mov	r18, r24
    4226:	30 e0       	ldi	r19, 0x00	; 0
    4228:	8a 81       	ldd	r24, Y+2	; 0x02
    422a:	9b 81       	ldd	r25, Y+3	; 0x03
    422c:	fc 01       	movw	r30, r24
    422e:	e2 0f       	add	r30, r18
    4230:	f3 1f       	adc	r31, r19
    4232:	80 81       	ld	r24, Z
    4234:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <LCD_vWriteCharacter>
		i++;
    4238:	89 81       	ldd	r24, Y+1	; 0x01
    423a:	8f 5f       	subi	r24, 0xFF	; 255
    423c:	89 83       	std	Y+1, r24	; 0x01
	LCD_vSendCommand(DisplayClear);
	_delay_ms(2);
}
void LCD_vWriteString(u8 *ptr){
	u8 i=0;
	while(ptr[i]!='\0'){
    423e:	89 81       	ldd	r24, Y+1	; 0x01
    4240:	28 2f       	mov	r18, r24
    4242:	30 e0       	ldi	r19, 0x00	; 0
    4244:	8a 81       	ldd	r24, Y+2	; 0x02
    4246:	9b 81       	ldd	r25, Y+3	; 0x03
    4248:	fc 01       	movw	r30, r24
    424a:	e2 0f       	add	r30, r18
    424c:	f3 1f       	adc	r31, r19
    424e:	80 81       	ld	r24, Z
    4250:	88 23       	and	r24, r24
    4252:	39 f7       	brne	.-50     	; 0x4222 <LCD_vWriteString+0x14>
		LCD_vWriteCharacter(ptr[i]);
		i++;
	}
}
    4254:	0f 90       	pop	r0
    4256:	0f 90       	pop	r0
    4258:	0f 90       	pop	r0
    425a:	cf 91       	pop	r28
    425c:	df 91       	pop	r29
    425e:	08 95       	ret

00004260 <LCD_vCustomCharacter>:
void LCD_vCustomCharacter(u8 *ptr,u8 Location){
    4260:	df 93       	push	r29
    4262:	cf 93       	push	r28
    4264:	00 d0       	rcall	.+0      	; 0x4266 <LCD_vCustomCharacter+0x6>
    4266:	00 d0       	rcall	.+0      	; 0x4268 <LCD_vCustomCharacter+0x8>
    4268:	cd b7       	in	r28, 0x3d	; 61
    426a:	de b7       	in	r29, 0x3e	; 62
    426c:	9b 83       	std	Y+3, r25	; 0x03
    426e:	8a 83       	std	Y+2, r24	; 0x02
    4270:	6c 83       	std	Y+4, r22	; 0x04
	u8 i;
	LCD_vSendCommand((0x40)+(Location*8));
    4272:	8c 81       	ldd	r24, Y+4	; 0x04
    4274:	88 2f       	mov	r24, r24
    4276:	90 e0       	ldi	r25, 0x00	; 0
    4278:	08 96       	adiw	r24, 0x08	; 8
    427a:	88 0f       	add	r24, r24
    427c:	99 1f       	adc	r25, r25
    427e:	88 0f       	add	r24, r24
    4280:	99 1f       	adc	r25, r25
    4282:	88 0f       	add	r24, r24
    4284:	99 1f       	adc	r25, r25
    4286:	0e 94 7e 19 	call	0x32fc	; 0x32fc <LCD_vSendCommand>
	for(i=0;i<8;i++){
    428a:	19 82       	std	Y+1, r1	; 0x01
    428c:	0e c0       	rjmp	.+28     	; 0x42aa <LCD_vCustomCharacter+0x4a>
		LCD_vWriteCharacter(ptr[i]);
    428e:	89 81       	ldd	r24, Y+1	; 0x01
    4290:	28 2f       	mov	r18, r24
    4292:	30 e0       	ldi	r19, 0x00	; 0
    4294:	8a 81       	ldd	r24, Y+2	; 0x02
    4296:	9b 81       	ldd	r25, Y+3	; 0x03
    4298:	fc 01       	movw	r30, r24
    429a:	e2 0f       	add	r30, r18
    429c:	f3 1f       	adc	r31, r19
    429e:	80 81       	ld	r24, Z
    42a0:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <LCD_vWriteCharacter>
	}
}
void LCD_vCustomCharacter(u8 *ptr,u8 Location){
	u8 i;
	LCD_vSendCommand((0x40)+(Location*8));
	for(i=0;i<8;i++){
    42a4:	89 81       	ldd	r24, Y+1	; 0x01
    42a6:	8f 5f       	subi	r24, 0xFF	; 255
    42a8:	89 83       	std	Y+1, r24	; 0x01
    42aa:	89 81       	ldd	r24, Y+1	; 0x01
    42ac:	88 30       	cpi	r24, 0x08	; 8
    42ae:	78 f3       	brcs	.-34     	; 0x428e <LCD_vCustomCharacter+0x2e>
		LCD_vWriteCharacter(ptr[i]);
	}


}
    42b0:	0f 90       	pop	r0
    42b2:	0f 90       	pop	r0
    42b4:	0f 90       	pop	r0
    42b6:	0f 90       	pop	r0
    42b8:	cf 91       	pop	r28
    42ba:	df 91       	pop	r29
    42bc:	08 95       	ret

000042be <LCD_vCLearOneChar>:
void LCD_vCLearOneChar(u8 Loc_u8Line,u8 Loc_u8CharPos){
    42be:	df 93       	push	r29
    42c0:	cf 93       	push	r28
    42c2:	cd b7       	in	r28, 0x3d	; 61
    42c4:	de b7       	in	r29, 0x3e	; 62
    42c6:	2a 97       	sbiw	r28, 0x0a	; 10
    42c8:	0f b6       	in	r0, 0x3f	; 63
    42ca:	f8 94       	cli
    42cc:	de bf       	out	0x3e, r29	; 62
    42ce:	0f be       	out	0x3f, r0	; 63
    42d0:	cd bf       	out	0x3d, r28	; 61
    42d2:	89 87       	std	Y+9, r24	; 0x09
    42d4:	6a 87       	std	Y+10, r22	; 0x0a
	u8 chr0[8]={0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
    42d6:	88 e0       	ldi	r24, 0x08	; 8
    42d8:	fe 01       	movw	r30, r28
    42da:	31 96       	adiw	r30, 0x01	; 1
    42dc:	df 01       	movw	r26, r30
    42de:	98 2f       	mov	r25, r24
    42e0:	1d 92       	st	X+, r1
    42e2:	9a 95       	dec	r25
    42e4:	e9 f7       	brne	.-6      	; 0x42e0 <LCD_vCLearOneChar+0x22>
	LCD_vCustomCharacter(chr0,1);
    42e6:	ce 01       	movw	r24, r28
    42e8:	01 96       	adiw	r24, 0x01	; 1
    42ea:	61 e0       	ldi	r22, 0x01	; 1
    42ec:	0e 94 30 21 	call	0x4260	; 0x4260 <LCD_vCustomCharacter>
	LCD_vGoTo(Loc_u8Line,Loc_u8CharPos);
    42f0:	89 85       	ldd	r24, Y+9	; 0x09
    42f2:	6a 85       	ldd	r22, Y+10	; 0x0a
    42f4:	0e 94 6e 20 	call	0x40dc	; 0x40dc <LCD_vGoTo>
	LCD_vWriteCharacter(1);
    42f8:	81 e0       	ldi	r24, 0x01	; 1
    42fa:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <LCD_vWriteCharacter>
}
    42fe:	2a 96       	adiw	r28, 0x0a	; 10
    4300:	0f b6       	in	r0, 0x3f	; 63
    4302:	f8 94       	cli
    4304:	de bf       	out	0x3e, r29	; 62
    4306:	0f be       	out	0x3f, r0	; 63
    4308:	cd bf       	out	0x3d, r28	; 61
    430a:	cf 91       	pop	r28
    430c:	df 91       	pop	r29
    430e:	08 95       	ret

00004310 <KAYPAD_vInit>:
* \Parameters (in) : None
* \Parameters (out): None
* \Return value:   : void  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void KAYPAD_vInit(){
    4310:	df 93       	push	r29
    4312:	cf 93       	push	r28
    4314:	cd b7       	in	r28, 0x3d	; 61
    4316:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPortDirection(KEYPAD_PORT,KEYPAD_DIRECTION);
    4318:	81 e0       	ldi	r24, 0x01	; 1
    431a:	6f e0       	ldi	r22, 0x0F	; 15
    431c:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <DIO_vSetPortDirection>
	DIO_vSetPortValue(KEYPAD_PORT,KEYPAD_VALUE);
    4320:	81 e0       	ldi	r24, 0x01	; 1
    4322:	6f ef       	ldi	r22, 0xFF	; 255
    4324:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <DIO_vSetPortValue>

}
    4328:	cf 91       	pop	r28
    432a:	df 91       	pop	r29
    432c:	08 95       	ret

0000432e <KAYPAD_u8GetKey>:
* \Parameters (in) : None
* \Parameters (out): None
* \Return value:   : unsigned char  E_OK
*                                    E_NOT_OK
*******************************************************************************/
u8 KAYPAD_u8GetKey(){
    432e:	df 93       	push	r29
    4330:	cf 93       	push	r28
    4332:	cd b7       	in	r28, 0x3d	; 61
    4334:	de b7       	in	r29, 0x3e	; 62
    4336:	65 97       	sbiw	r28, 0x15	; 21
    4338:	0f b6       	in	r0, 0x3f	; 63
    433a:	f8 94       	cli
    433c:	de bf       	out	0x3e, r29	; 62
    433e:	0f be       	out	0x3f, r0	; 63
    4340:	cd bf       	out	0x3d, r28	; 61
	u8 Loc_u8RowCounter, Loc_u8CoulomsCounter;
	u8 row , coulom, temp;
	coulom=3;
    4342:	83 e0       	ldi	r24, 0x03	; 3
    4344:	89 8b       	std	Y+17, r24	; 0x11
	u8 value=9;
    4346:	89 e0       	ldi	r24, 0x09	; 9
    4348:	8f 87       	std	Y+15, r24	; 0x0f
	for(Loc_u8CoulomsCounter=0;Loc_u8CoulomsCounter<4;Loc_u8CoulomsCounter++){
    434a:	1b 8a       	std	Y+19, r1	; 0x13
    434c:	b7 c0       	rjmp	.+366    	; 0x44bc <KAYPAD_u8GetKey+0x18e>
		DIO_vSetPinValue(KEYPAD_PORT,Loc_u8CoulomsCounter,Pin_Low);
    434e:	81 e0       	ldi	r24, 0x01	; 1
    4350:	6b 89       	ldd	r22, Y+19	; 0x13
    4352:	40 e0       	ldi	r20, 0x00	; 0
    4354:	0e 94 75 11 	call	0x22ea	; 0x22ea <DIO_vSetPinValue>
		row=3;
    4358:	83 e0       	ldi	r24, 0x03	; 3
    435a:	8a 8b       	std	Y+18, r24	; 0x12
		for(Loc_u8RowCounter=4;Loc_u8RowCounter<8;Loc_u8RowCounter++){
    435c:	84 e0       	ldi	r24, 0x04	; 4
    435e:	8c 8b       	std	Y+20, r24	; 0x14
    4360:	9e c0       	rjmp	.+316    	; 0x449e <KAYPAD_u8GetKey+0x170>
			temp=DIO_u8PGetPinValue(KEYPAD_PORT,Loc_u8RowCounter);
    4362:	81 e0       	ldi	r24, 0x01	; 1
    4364:	6c 89       	ldd	r22, Y+20	; 0x14
    4366:	0e 94 50 12 	call	0x24a0	; 0x24a0 <DIO_u8PGetPinValue>
    436a:	88 8b       	std	Y+16, r24	; 0x10
			if(temp==0){
    436c:	88 89       	ldd	r24, Y+16	; 0x10
    436e:	88 23       	and	r24, r24
    4370:	09 f0       	breq	.+2      	; 0x4374 <KAYPAD_u8GetKey+0x46>
    4372:	8f c0       	rjmp	.+286    	; 0x4492 <KAYPAD_u8GetKey+0x164>
    4374:	80 e0       	ldi	r24, 0x00	; 0
    4376:	90 e0       	ldi	r25, 0x00	; 0
    4378:	a8 ec       	ldi	r26, 0xC8	; 200
    437a:	b1 e4       	ldi	r27, 0x41	; 65
    437c:	8b 87       	std	Y+11, r24	; 0x0b
    437e:	9c 87       	std	Y+12, r25	; 0x0c
    4380:	ad 87       	std	Y+13, r26	; 0x0d
    4382:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4384:	6b 85       	ldd	r22, Y+11	; 0x0b
    4386:	7c 85       	ldd	r23, Y+12	; 0x0c
    4388:	8d 85       	ldd	r24, Y+13	; 0x0d
    438a:	9e 85       	ldd	r25, Y+14	; 0x0e
    438c:	20 e0       	ldi	r18, 0x00	; 0
    438e:	30 e0       	ldi	r19, 0x00	; 0
    4390:	4a e7       	ldi	r20, 0x7A	; 122
    4392:	55 e4       	ldi	r21, 0x45	; 69
    4394:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4398:	dc 01       	movw	r26, r24
    439a:	cb 01       	movw	r24, r22
    439c:	8f 83       	std	Y+7, r24	; 0x07
    439e:	98 87       	std	Y+8, r25	; 0x08
    43a0:	a9 87       	std	Y+9, r26	; 0x09
    43a2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    43a4:	6f 81       	ldd	r22, Y+7	; 0x07
    43a6:	78 85       	ldd	r23, Y+8	; 0x08
    43a8:	89 85       	ldd	r24, Y+9	; 0x09
    43aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    43ac:	20 e0       	ldi	r18, 0x00	; 0
    43ae:	30 e0       	ldi	r19, 0x00	; 0
    43b0:	40 e8       	ldi	r20, 0x80	; 128
    43b2:	5f e3       	ldi	r21, 0x3F	; 63
    43b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    43b8:	88 23       	and	r24, r24
    43ba:	2c f4       	brge	.+10     	; 0x43c6 <KAYPAD_u8GetKey+0x98>
		__ticks = 1;
    43bc:	81 e0       	ldi	r24, 0x01	; 1
    43be:	90 e0       	ldi	r25, 0x00	; 0
    43c0:	9e 83       	std	Y+6, r25	; 0x06
    43c2:	8d 83       	std	Y+5, r24	; 0x05
    43c4:	3f c0       	rjmp	.+126    	; 0x4444 <KAYPAD_u8GetKey+0x116>
	else if (__tmp > 65535)
    43c6:	6f 81       	ldd	r22, Y+7	; 0x07
    43c8:	78 85       	ldd	r23, Y+8	; 0x08
    43ca:	89 85       	ldd	r24, Y+9	; 0x09
    43cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    43ce:	20 e0       	ldi	r18, 0x00	; 0
    43d0:	3f ef       	ldi	r19, 0xFF	; 255
    43d2:	4f e7       	ldi	r20, 0x7F	; 127
    43d4:	57 e4       	ldi	r21, 0x47	; 71
    43d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    43da:	18 16       	cp	r1, r24
    43dc:	4c f5       	brge	.+82     	; 0x4430 <KAYPAD_u8GetKey+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43de:	6b 85       	ldd	r22, Y+11	; 0x0b
    43e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    43e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    43e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    43e6:	20 e0       	ldi	r18, 0x00	; 0
    43e8:	30 e0       	ldi	r19, 0x00	; 0
    43ea:	40 e2       	ldi	r20, 0x20	; 32
    43ec:	51 e4       	ldi	r21, 0x41	; 65
    43ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43f2:	dc 01       	movw	r26, r24
    43f4:	cb 01       	movw	r24, r22
    43f6:	bc 01       	movw	r22, r24
    43f8:	cd 01       	movw	r24, r26
    43fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43fe:	dc 01       	movw	r26, r24
    4400:	cb 01       	movw	r24, r22
    4402:	9e 83       	std	Y+6, r25	; 0x06
    4404:	8d 83       	std	Y+5, r24	; 0x05
    4406:	0f c0       	rjmp	.+30     	; 0x4426 <KAYPAD_u8GetKey+0xf8>
    4408:	80 e9       	ldi	r24, 0x90	; 144
    440a:	91 e0       	ldi	r25, 0x01	; 1
    440c:	9c 83       	std	Y+4, r25	; 0x04
    440e:	8b 83       	std	Y+3, r24	; 0x03
    4410:	8b 81       	ldd	r24, Y+3	; 0x03
    4412:	9c 81       	ldd	r25, Y+4	; 0x04
    4414:	01 97       	sbiw	r24, 0x01	; 1
    4416:	f1 f7       	brne	.-4      	; 0x4414 <KAYPAD_u8GetKey+0xe6>
    4418:	9c 83       	std	Y+4, r25	; 0x04
    441a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    441c:	8d 81       	ldd	r24, Y+5	; 0x05
    441e:	9e 81       	ldd	r25, Y+6	; 0x06
    4420:	01 97       	sbiw	r24, 0x01	; 1
    4422:	9e 83       	std	Y+6, r25	; 0x06
    4424:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4426:	8d 81       	ldd	r24, Y+5	; 0x05
    4428:	9e 81       	ldd	r25, Y+6	; 0x06
    442a:	00 97       	sbiw	r24, 0x00	; 0
    442c:	69 f7       	brne	.-38     	; 0x4408 <KAYPAD_u8GetKey+0xda>
    442e:	14 c0       	rjmp	.+40     	; 0x4458 <KAYPAD_u8GetKey+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4430:	6f 81       	ldd	r22, Y+7	; 0x07
    4432:	78 85       	ldd	r23, Y+8	; 0x08
    4434:	89 85       	ldd	r24, Y+9	; 0x09
    4436:	9a 85       	ldd	r25, Y+10	; 0x0a
    4438:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    443c:	dc 01       	movw	r26, r24
    443e:	cb 01       	movw	r24, r22
    4440:	9e 83       	std	Y+6, r25	; 0x06
    4442:	8d 83       	std	Y+5, r24	; 0x05
    4444:	8d 81       	ldd	r24, Y+5	; 0x05
    4446:	9e 81       	ldd	r25, Y+6	; 0x06
    4448:	9a 83       	std	Y+2, r25	; 0x02
    444a:	89 83       	std	Y+1, r24	; 0x01
    444c:	89 81       	ldd	r24, Y+1	; 0x01
    444e:	9a 81       	ldd	r25, Y+2	; 0x02
    4450:	01 97       	sbiw	r24, 0x01	; 1
    4452:	f1 f7       	brne	.-4      	; 0x4450 <KAYPAD_u8GetKey+0x122>
    4454:	9a 83       	std	Y+2, r25	; 0x02
    4456:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(25);
				temp=DIO_u8PGetPinValue(KEYPAD_PORT,Loc_u8RowCounter);
    4458:	81 e0       	ldi	r24, 0x01	; 1
    445a:	6c 89       	ldd	r22, Y+20	; 0x14
    445c:	0e 94 50 12 	call	0x24a0	; 0x24a0 <DIO_u8PGetPinValue>
    4460:	88 8b       	std	Y+16, r24	; 0x10
				if(temp==0){
    4462:	88 89       	ldd	r24, Y+16	; 0x10
    4464:	88 23       	and	r24, r24
    4466:	a9 f4       	brne	.+42     	; 0x4492 <KAYPAD_u8GetKey+0x164>
					value=arr[row][coulom];
    4468:	8a 89       	ldd	r24, Y+18	; 0x12
    446a:	48 2f       	mov	r20, r24
    446c:	50 e0       	ldi	r21, 0x00	; 0
    446e:	89 89       	ldd	r24, Y+17	; 0x11
    4470:	28 2f       	mov	r18, r24
    4472:	30 e0       	ldi	r19, 0x00	; 0
    4474:	ca 01       	movw	r24, r20
    4476:	88 0f       	add	r24, r24
    4478:	99 1f       	adc	r25, r25
    447a:	88 0f       	add	r24, r24
    447c:	99 1f       	adc	r25, r25
    447e:	82 0f       	add	r24, r18
    4480:	93 1f       	adc	r25, r19
    4482:	fc 01       	movw	r30, r24
    4484:	e3 55       	subi	r30, 0x53	; 83
    4486:	ff 4f       	sbci	r31, 0xFF	; 255
    4488:	80 81       	ld	r24, Z
    448a:	8f 87       	std	Y+15, r24	; 0x0f
					return value;
    448c:	8f 85       	ldd	r24, Y+15	; 0x0f
    448e:	8d 8b       	std	Y+21, r24	; 0x15
    4490:	1b c0       	rjmp	.+54     	; 0x44c8 <KAYPAD_u8GetKey+0x19a>
				}
			}
			row--;
    4492:	8a 89       	ldd	r24, Y+18	; 0x12
    4494:	81 50       	subi	r24, 0x01	; 1
    4496:	8a 8b       	std	Y+18, r24	; 0x12
	coulom=3;
	u8 value=9;
	for(Loc_u8CoulomsCounter=0;Loc_u8CoulomsCounter<4;Loc_u8CoulomsCounter++){
		DIO_vSetPinValue(KEYPAD_PORT,Loc_u8CoulomsCounter,Pin_Low);
		row=3;
		for(Loc_u8RowCounter=4;Loc_u8RowCounter<8;Loc_u8RowCounter++){
    4498:	8c 89       	ldd	r24, Y+20	; 0x14
    449a:	8f 5f       	subi	r24, 0xFF	; 255
    449c:	8c 8b       	std	Y+20, r24	; 0x14
    449e:	8c 89       	ldd	r24, Y+20	; 0x14
    44a0:	88 30       	cpi	r24, 0x08	; 8
    44a2:	08 f4       	brcc	.+2      	; 0x44a6 <KAYPAD_u8GetKey+0x178>
    44a4:	5e cf       	rjmp	.-324    	; 0x4362 <KAYPAD_u8GetKey+0x34>
					return value;
				}
			}
			row--;
		}
		coulom--;
    44a6:	89 89       	ldd	r24, Y+17	; 0x11
    44a8:	81 50       	subi	r24, 0x01	; 1
    44aa:	89 8b       	std	Y+17, r24	; 0x11
		DIO_vSetPinValue(KEYPAD_PORT,Loc_u8CoulomsCounter,Pin_High);
    44ac:	81 e0       	ldi	r24, 0x01	; 1
    44ae:	6b 89       	ldd	r22, Y+19	; 0x13
    44b0:	41 e0       	ldi	r20, 0x01	; 1
    44b2:	0e 94 75 11 	call	0x22ea	; 0x22ea <DIO_vSetPinValue>
u8 KAYPAD_u8GetKey(){
	u8 Loc_u8RowCounter, Loc_u8CoulomsCounter;
	u8 row , coulom, temp;
	coulom=3;
	u8 value=9;
	for(Loc_u8CoulomsCounter=0;Loc_u8CoulomsCounter<4;Loc_u8CoulomsCounter++){
    44b6:	8b 89       	ldd	r24, Y+19	; 0x13
    44b8:	8f 5f       	subi	r24, 0xFF	; 255
    44ba:	8b 8b       	std	Y+19, r24	; 0x13
    44bc:	8b 89       	ldd	r24, Y+19	; 0x13
    44be:	84 30       	cpi	r24, 0x04	; 4
    44c0:	08 f4       	brcc	.+2      	; 0x44c4 <KAYPAD_u8GetKey+0x196>
    44c2:	45 cf       	rjmp	.-374    	; 0x434e <KAYPAD_u8GetKey+0x20>
		}
		coulom--;
		DIO_vSetPinValue(KEYPAD_PORT,Loc_u8CoulomsCounter,Pin_High);
	}

	return 0xff;
    44c4:	8f ef       	ldi	r24, 0xFF	; 255
    44c6:	8d 8b       	std	Y+21, r24	; 0x15
    44c8:	8d 89       	ldd	r24, Y+21	; 0x15
}
    44ca:	65 96       	adiw	r28, 0x15	; 21
    44cc:	0f b6       	in	r0, 0x3f	; 63
    44ce:	f8 94       	cli
    44d0:	de bf       	out	0x3e, r29	; 62
    44d2:	0f be       	out	0x3f, r0	; 63
    44d4:	cd bf       	out	0x3d, r28	; 61
    44d6:	cf 91       	pop	r28
    44d8:	df 91       	pop	r29
    44da:	08 95       	ret

000044dc <H_Bridge_vInit>:
 *
 *  Created on: Jan 18, 2023
 *      Author: a7med
 */
#include "H_Bridge.h"
void H_Bridge_vInit(){
    44dc:	df 93       	push	r29
    44de:	cf 93       	push	r28
    44e0:	cd b7       	in	r28, 0x3d	; 61
    44e2:	de b7       	in	r29, 0x3e	; 62
	//----------- on this part motor1 is connected to 3y and VCC and motor2 is connected to 4y and Ground
	SET_BIT(DDRD,5);	//---- EN1
    44e4:	a1 e3       	ldi	r26, 0x31	; 49
    44e6:	b0 e0       	ldi	r27, 0x00	; 0
    44e8:	e1 e3       	ldi	r30, 0x31	; 49
    44ea:	f0 e0       	ldi	r31, 0x00	; 0
    44ec:	80 81       	ld	r24, Z
    44ee:	80 62       	ori	r24, 0x20	; 32
    44f0:	8c 93       	st	X, r24
	SET_BIT(DDRC,5);	//--- 3A
    44f2:	a4 e3       	ldi	r26, 0x34	; 52
    44f4:	b0 e0       	ldi	r27, 0x00	; 0
    44f6:	e4 e3       	ldi	r30, 0x34	; 52
    44f8:	f0 e0       	ldi	r31, 0x00	; 0
    44fa:	80 81       	ld	r24, Z
    44fc:	80 62       	ori	r24, 0x20	; 32
    44fe:	8c 93       	st	X, r24
	SET_BIT(DDRC,6);	//--- 4A
    4500:	a4 e3       	ldi	r26, 0x34	; 52
    4502:	b0 e0       	ldi	r27, 0x00	; 0
    4504:	e4 e3       	ldi	r30, 0x34	; 52
    4506:	f0 e0       	ldi	r31, 0x00	; 0
    4508:	80 81       	ld	r24, Z
    450a:	80 64       	ori	r24, 0x40	; 64
    450c:	8c 93       	st	X, r24
	//------- on this part the two motors are connected to 1Y and 2Y
	SET_BIT(DDRD,4);	//--- EN2
    450e:	a1 e3       	ldi	r26, 0x31	; 49
    4510:	b0 e0       	ldi	r27, 0x00	; 0
    4512:	e1 e3       	ldi	r30, 0x31	; 49
    4514:	f0 e0       	ldi	r31, 0x00	; 0
    4516:	80 81       	ld	r24, Z
    4518:	80 61       	ori	r24, 0x10	; 16
    451a:	8c 93       	st	X, r24
	SET_BIT(DDRC,3);	//--- 1A
    451c:	a4 e3       	ldi	r26, 0x34	; 52
    451e:	b0 e0       	ldi	r27, 0x00	; 0
    4520:	e4 e3       	ldi	r30, 0x34	; 52
    4522:	f0 e0       	ldi	r31, 0x00	; 0
    4524:	80 81       	ld	r24, Z
    4526:	88 60       	ori	r24, 0x08	; 8
    4528:	8c 93       	st	X, r24
	SET_BIT(DDRC,4);	//--- 2A
    452a:	a4 e3       	ldi	r26, 0x34	; 52
    452c:	b0 e0       	ldi	r27, 0x00	; 0
    452e:	e4 e3       	ldi	r30, 0x34	; 52
    4530:	f0 e0       	ldi	r31, 0x00	; 0
    4532:	80 81       	ld	r24, Z
    4534:	80 61       	ori	r24, 0x10	; 16
    4536:	8c 93       	st	X, r24
}
    4538:	cf 91       	pop	r28
    453a:	df 91       	pop	r29
    453c:	08 95       	ret

0000453e <H_Bridge_vRunM1AndStopM2>:
/* ---- Following 3 Functions if for ConnectionsToGroundAndVoltage ----*/
void H_Bridge_vRunM1AndStopM2(){
    453e:	df 93       	push	r29
    4540:	cf 93       	push	r28
    4542:	cd b7       	in	r28, 0x3d	; 61
    4544:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(PORTD,5);	//---EN1 High
    4546:	a2 e3       	ldi	r26, 0x32	; 50
    4548:	b0 e0       	ldi	r27, 0x00	; 0
    454a:	e2 e3       	ldi	r30, 0x32	; 50
    454c:	f0 e0       	ldi	r31, 0x00	; 0
    454e:	80 81       	ld	r24, Z
    4550:	80 62       	ori	r24, 0x20	; 32
    4552:	8c 93       	st	X, r24
	CLR_BIT(PORTC,5);	//---3A Low
    4554:	a5 e3       	ldi	r26, 0x35	; 53
    4556:	b0 e0       	ldi	r27, 0x00	; 0
    4558:	e5 e3       	ldi	r30, 0x35	; 53
    455a:	f0 e0       	ldi	r31, 0x00	; 0
    455c:	80 81       	ld	r24, Z
    455e:	8f 7d       	andi	r24, 0xDF	; 223
    4560:	8c 93       	st	X, r24
	CLR_BIT(PORTC,6);	//---4A Low
    4562:	a5 e3       	ldi	r26, 0x35	; 53
    4564:	b0 e0       	ldi	r27, 0x00	; 0
    4566:	e5 e3       	ldi	r30, 0x35	; 53
    4568:	f0 e0       	ldi	r31, 0x00	; 0
    456a:	80 81       	ld	r24, Z
    456c:	8f 7b       	andi	r24, 0xBF	; 191
    456e:	8c 93       	st	X, r24
}
    4570:	cf 91       	pop	r28
    4572:	df 91       	pop	r29
    4574:	08 95       	ret

00004576 <H_Bridge_vRunM2AndStopM1>:
void H_Bridge_vRunM2AndStopM1(){
    4576:	df 93       	push	r29
    4578:	cf 93       	push	r28
    457a:	cd b7       	in	r28, 0x3d	; 61
    457c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(PORTD,5);	//---EN1 High
    457e:	a2 e3       	ldi	r26, 0x32	; 50
    4580:	b0 e0       	ldi	r27, 0x00	; 0
    4582:	e2 e3       	ldi	r30, 0x32	; 50
    4584:	f0 e0       	ldi	r31, 0x00	; 0
    4586:	80 81       	ld	r24, Z
    4588:	80 62       	ori	r24, 0x20	; 32
    458a:	8c 93       	st	X, r24
	SET_BIT(PORTC,5);	//---3A High
    458c:	a5 e3       	ldi	r26, 0x35	; 53
    458e:	b0 e0       	ldi	r27, 0x00	; 0
    4590:	e5 e3       	ldi	r30, 0x35	; 53
    4592:	f0 e0       	ldi	r31, 0x00	; 0
    4594:	80 81       	ld	r24, Z
    4596:	80 62       	ori	r24, 0x20	; 32
    4598:	8c 93       	st	X, r24
	SET_BIT(PORTC,6);	//---4A High
    459a:	a5 e3       	ldi	r26, 0x35	; 53
    459c:	b0 e0       	ldi	r27, 0x00	; 0
    459e:	e5 e3       	ldi	r30, 0x35	; 53
    45a0:	f0 e0       	ldi	r31, 0x00	; 0
    45a2:	80 81       	ld	r24, Z
    45a4:	80 64       	ori	r24, 0x40	; 64
    45a6:	8c 93       	st	X, r24
}
    45a8:	cf 91       	pop	r28
    45aa:	df 91       	pop	r29
    45ac:	08 95       	ret

000045ae <H_Bridge_vM1AndM2FreeRuningStop>:
void H_Bridge_vM1AndM2FreeRuningStop(){
    45ae:	df 93       	push	r29
    45b0:	cf 93       	push	r28
    45b2:	cd b7       	in	r28, 0x3d	; 61
    45b4:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(PORTD,5);	//---EN1 Low
    45b6:	a2 e3       	ldi	r26, 0x32	; 50
    45b8:	b0 e0       	ldi	r27, 0x00	; 0
    45ba:	e2 e3       	ldi	r30, 0x32	; 50
    45bc:	f0 e0       	ldi	r31, 0x00	; 0
    45be:	80 81       	ld	r24, Z
    45c0:	8f 7d       	andi	r24, 0xDF	; 223
    45c2:	8c 93       	st	X, r24
}
    45c4:	cf 91       	pop	r28
    45c6:	df 91       	pop	r29
    45c8:	08 95       	ret

000045ca <H_Bridge_vM1AndM2TurnRight>:
/* ---- Following Functions if for BidirectionalDCMotorControl ----*/
void H_Bridge_vM1AndM2TurnRight(){
    45ca:	df 93       	push	r29
    45cc:	cf 93       	push	r28
    45ce:	cd b7       	in	r28, 0x3d	; 61
    45d0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(PORTD,4);	//--- EN2 High
    45d2:	a2 e3       	ldi	r26, 0x32	; 50
    45d4:	b0 e0       	ldi	r27, 0x00	; 0
    45d6:	e2 e3       	ldi	r30, 0x32	; 50
    45d8:	f0 e0       	ldi	r31, 0x00	; 0
    45da:	80 81       	ld	r24, Z
    45dc:	80 61       	ori	r24, 0x10	; 16
    45de:	8c 93       	st	X, r24
	CLR_BIT(PORTC,3);	//--- 1A Low
    45e0:	a5 e3       	ldi	r26, 0x35	; 53
    45e2:	b0 e0       	ldi	r27, 0x00	; 0
    45e4:	e5 e3       	ldi	r30, 0x35	; 53
    45e6:	f0 e0       	ldi	r31, 0x00	; 0
    45e8:	80 81       	ld	r24, Z
    45ea:	87 7f       	andi	r24, 0xF7	; 247
    45ec:	8c 93       	st	X, r24
	SET_BIT(PORTC,4);	//--- 2A High
    45ee:	a5 e3       	ldi	r26, 0x35	; 53
    45f0:	b0 e0       	ldi	r27, 0x00	; 0
    45f2:	e5 e3       	ldi	r30, 0x35	; 53
    45f4:	f0 e0       	ldi	r31, 0x00	; 0
    45f6:	80 81       	ld	r24, Z
    45f8:	80 61       	ori	r24, 0x10	; 16
    45fa:	8c 93       	st	X, r24
}
    45fc:	cf 91       	pop	r28
    45fe:	df 91       	pop	r29
    4600:	08 95       	ret

00004602 <H_Bridge_vM1AndM2TurnLeft>:
void H_Bridge_vM1AndM2TurnLeft(){
    4602:	df 93       	push	r29
    4604:	cf 93       	push	r28
    4606:	cd b7       	in	r28, 0x3d	; 61
    4608:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(PORTD,4);	//--- EN2 High
    460a:	a2 e3       	ldi	r26, 0x32	; 50
    460c:	b0 e0       	ldi	r27, 0x00	; 0
    460e:	e2 e3       	ldi	r30, 0x32	; 50
    4610:	f0 e0       	ldi	r31, 0x00	; 0
    4612:	80 81       	ld	r24, Z
    4614:	80 61       	ori	r24, 0x10	; 16
    4616:	8c 93       	st	X, r24
	SET_BIT(PORTC,3);	//--- 1A High
    4618:	a5 e3       	ldi	r26, 0x35	; 53
    461a:	b0 e0       	ldi	r27, 0x00	; 0
    461c:	e5 e3       	ldi	r30, 0x35	; 53
    461e:	f0 e0       	ldi	r31, 0x00	; 0
    4620:	80 81       	ld	r24, Z
    4622:	88 60       	ori	r24, 0x08	; 8
    4624:	8c 93       	st	X, r24
	CLR_BIT(PORTC,4);	//--- 2A Low
    4626:	a5 e3       	ldi	r26, 0x35	; 53
    4628:	b0 e0       	ldi	r27, 0x00	; 0
    462a:	e5 e3       	ldi	r30, 0x35	; 53
    462c:	f0 e0       	ldi	r31, 0x00	; 0
    462e:	80 81       	ld	r24, Z
    4630:	8f 7e       	andi	r24, 0xEF	; 239
    4632:	8c 93       	st	X, r24
}
    4634:	cf 91       	pop	r28
    4636:	df 91       	pop	r29
    4638:	08 95       	ret

0000463a <H_Bridge_vM1AndM2FastStop>:
void H_Bridge_vM1AndM2FastStop(){
    463a:	df 93       	push	r29
    463c:	cf 93       	push	r28
    463e:	cd b7       	in	r28, 0x3d	; 61
    4640:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(PORTD,4);	//--- EN2 Low
    4642:	a2 e3       	ldi	r26, 0x32	; 50
    4644:	b0 e0       	ldi	r27, 0x00	; 0
    4646:	e2 e3       	ldi	r30, 0x32	; 50
    4648:	f0 e0       	ldi	r31, 0x00	; 0
    464a:	80 81       	ld	r24, Z
    464c:	8f 7e       	andi	r24, 0xEF	; 239
    464e:	8c 93       	st	X, r24
}
    4650:	cf 91       	pop	r28
    4652:	df 91       	pop	r29
    4654:	08 95       	ret

00004656 <APP_vPrintNumberSS>:
 *      Author: a7medDawoud
 */
#include "APP.h"

//------------ this function take two u8 numbers and print them on the 7Segme at the same time-----
void APP_vPrintNumberSS(u8 loc_u8SegmaPrintNumber1, u8 loc_u8SegmaPrintNumber2){
    4656:	df 93       	push	r29
    4658:	cf 93       	push	r28
    465a:	cd b7       	in	r28, 0x3d	; 61
    465c:	de b7       	in	r29, 0x3e	; 62
    465e:	a0 97       	sbiw	r28, 0x20	; 32
    4660:	0f b6       	in	r0, 0x3f	; 63
    4662:	f8 94       	cli
    4664:	de bf       	out	0x3e, r29	; 62
    4666:	0f be       	out	0x3f, r0	; 63
    4668:	cd bf       	out	0x3d, r28	; 61
    466a:	8f 8f       	std	Y+31, r24	; 0x1f
    466c:	68 a3       	std	Y+32, r22	; 0x20
	_7Segma_vInit();
    466e:	0e 94 dd 15 	call	0x2bba	; 0x2bba <_7Segma_vInit>
	u16 loc_delay;
	for(loc_delay=0;loc_delay<100;loc_delay++){
    4672:	1e 8e       	std	Y+30, r1	; 0x1e
    4674:	1d 8e       	std	Y+29, r1	; 0x1d
    4676:	ef c0       	rjmp	.+478    	; 0x4856 <APP_vPrintNumberSS+0x200>
		_7Segma_vPrintNumber1(loc_u8SegmaPrintNumber1);
    4678:	8f 8d       	ldd	r24, Y+31	; 0x1f
    467a:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <_7Segma_vPrintNumber1>
    467e:	80 e0       	ldi	r24, 0x00	; 0
    4680:	90 e0       	ldi	r25, 0x00	; 0
    4682:	a0 e8       	ldi	r26, 0x80	; 128
    4684:	bf e3       	ldi	r27, 0x3F	; 63
    4686:	89 8f       	std	Y+25, r24	; 0x19
    4688:	9a 8f       	std	Y+26, r25	; 0x1a
    468a:	ab 8f       	std	Y+27, r26	; 0x1b
    468c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    468e:	69 8d       	ldd	r22, Y+25	; 0x19
    4690:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4692:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4694:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4696:	20 e0       	ldi	r18, 0x00	; 0
    4698:	30 e0       	ldi	r19, 0x00	; 0
    469a:	4a e7       	ldi	r20, 0x7A	; 122
    469c:	55 e4       	ldi	r21, 0x45	; 69
    469e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46a2:	dc 01       	movw	r26, r24
    46a4:	cb 01       	movw	r24, r22
    46a6:	8d 8b       	std	Y+21, r24	; 0x15
    46a8:	9e 8b       	std	Y+22, r25	; 0x16
    46aa:	af 8b       	std	Y+23, r26	; 0x17
    46ac:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    46ae:	6d 89       	ldd	r22, Y+21	; 0x15
    46b0:	7e 89       	ldd	r23, Y+22	; 0x16
    46b2:	8f 89       	ldd	r24, Y+23	; 0x17
    46b4:	98 8d       	ldd	r25, Y+24	; 0x18
    46b6:	20 e0       	ldi	r18, 0x00	; 0
    46b8:	30 e0       	ldi	r19, 0x00	; 0
    46ba:	40 e8       	ldi	r20, 0x80	; 128
    46bc:	5f e3       	ldi	r21, 0x3F	; 63
    46be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    46c2:	88 23       	and	r24, r24
    46c4:	2c f4       	brge	.+10     	; 0x46d0 <APP_vPrintNumberSS+0x7a>
		__ticks = 1;
    46c6:	81 e0       	ldi	r24, 0x01	; 1
    46c8:	90 e0       	ldi	r25, 0x00	; 0
    46ca:	9c 8b       	std	Y+20, r25	; 0x14
    46cc:	8b 8b       	std	Y+19, r24	; 0x13
    46ce:	3f c0       	rjmp	.+126    	; 0x474e <APP_vPrintNumberSS+0xf8>
	else if (__tmp > 65535)
    46d0:	6d 89       	ldd	r22, Y+21	; 0x15
    46d2:	7e 89       	ldd	r23, Y+22	; 0x16
    46d4:	8f 89       	ldd	r24, Y+23	; 0x17
    46d6:	98 8d       	ldd	r25, Y+24	; 0x18
    46d8:	20 e0       	ldi	r18, 0x00	; 0
    46da:	3f ef       	ldi	r19, 0xFF	; 255
    46dc:	4f e7       	ldi	r20, 0x7F	; 127
    46de:	57 e4       	ldi	r21, 0x47	; 71
    46e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    46e4:	18 16       	cp	r1, r24
    46e6:	4c f5       	brge	.+82     	; 0x473a <APP_vPrintNumberSS+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46e8:	69 8d       	ldd	r22, Y+25	; 0x19
    46ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    46ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    46ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    46f0:	20 e0       	ldi	r18, 0x00	; 0
    46f2:	30 e0       	ldi	r19, 0x00	; 0
    46f4:	40 e2       	ldi	r20, 0x20	; 32
    46f6:	51 e4       	ldi	r21, 0x41	; 65
    46f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46fc:	dc 01       	movw	r26, r24
    46fe:	cb 01       	movw	r24, r22
    4700:	bc 01       	movw	r22, r24
    4702:	cd 01       	movw	r24, r26
    4704:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4708:	dc 01       	movw	r26, r24
    470a:	cb 01       	movw	r24, r22
    470c:	9c 8b       	std	Y+20, r25	; 0x14
    470e:	8b 8b       	std	Y+19, r24	; 0x13
    4710:	0f c0       	rjmp	.+30     	; 0x4730 <APP_vPrintNumberSS+0xda>
    4712:	80 e9       	ldi	r24, 0x90	; 144
    4714:	91 e0       	ldi	r25, 0x01	; 1
    4716:	9a 8b       	std	Y+18, r25	; 0x12
    4718:	89 8b       	std	Y+17, r24	; 0x11
    471a:	89 89       	ldd	r24, Y+17	; 0x11
    471c:	9a 89       	ldd	r25, Y+18	; 0x12
    471e:	01 97       	sbiw	r24, 0x01	; 1
    4720:	f1 f7       	brne	.-4      	; 0x471e <APP_vPrintNumberSS+0xc8>
    4722:	9a 8b       	std	Y+18, r25	; 0x12
    4724:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4726:	8b 89       	ldd	r24, Y+19	; 0x13
    4728:	9c 89       	ldd	r25, Y+20	; 0x14
    472a:	01 97       	sbiw	r24, 0x01	; 1
    472c:	9c 8b       	std	Y+20, r25	; 0x14
    472e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4730:	8b 89       	ldd	r24, Y+19	; 0x13
    4732:	9c 89       	ldd	r25, Y+20	; 0x14
    4734:	00 97       	sbiw	r24, 0x00	; 0
    4736:	69 f7       	brne	.-38     	; 0x4712 <APP_vPrintNumberSS+0xbc>
    4738:	14 c0       	rjmp	.+40     	; 0x4762 <APP_vPrintNumberSS+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    473a:	6d 89       	ldd	r22, Y+21	; 0x15
    473c:	7e 89       	ldd	r23, Y+22	; 0x16
    473e:	8f 89       	ldd	r24, Y+23	; 0x17
    4740:	98 8d       	ldd	r25, Y+24	; 0x18
    4742:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4746:	dc 01       	movw	r26, r24
    4748:	cb 01       	movw	r24, r22
    474a:	9c 8b       	std	Y+20, r25	; 0x14
    474c:	8b 8b       	std	Y+19, r24	; 0x13
    474e:	8b 89       	ldd	r24, Y+19	; 0x13
    4750:	9c 89       	ldd	r25, Y+20	; 0x14
    4752:	98 8b       	std	Y+16, r25	; 0x10
    4754:	8f 87       	std	Y+15, r24	; 0x0f
    4756:	8f 85       	ldd	r24, Y+15	; 0x0f
    4758:	98 89       	ldd	r25, Y+16	; 0x10
    475a:	01 97       	sbiw	r24, 0x01	; 1
    475c:	f1 f7       	brne	.-4      	; 0x475a <APP_vPrintNumberSS+0x104>
    475e:	98 8b       	std	Y+16, r25	; 0x10
    4760:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		_7Segma_vPrintNumber2(loc_u8SegmaPrintNumber2);
    4762:	88 a1       	ldd	r24, Y+32	; 0x20
    4764:	0e 94 6d 16 	call	0x2cda	; 0x2cda <_7Segma_vPrintNumber2>
    4768:	80 e0       	ldi	r24, 0x00	; 0
    476a:	90 e0       	ldi	r25, 0x00	; 0
    476c:	a0 e8       	ldi	r26, 0x80	; 128
    476e:	bf e3       	ldi	r27, 0x3F	; 63
    4770:	8b 87       	std	Y+11, r24	; 0x0b
    4772:	9c 87       	std	Y+12, r25	; 0x0c
    4774:	ad 87       	std	Y+13, r26	; 0x0d
    4776:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4778:	6b 85       	ldd	r22, Y+11	; 0x0b
    477a:	7c 85       	ldd	r23, Y+12	; 0x0c
    477c:	8d 85       	ldd	r24, Y+13	; 0x0d
    477e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4780:	20 e0       	ldi	r18, 0x00	; 0
    4782:	30 e0       	ldi	r19, 0x00	; 0
    4784:	4a e7       	ldi	r20, 0x7A	; 122
    4786:	55 e4       	ldi	r21, 0x45	; 69
    4788:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    478c:	dc 01       	movw	r26, r24
    478e:	cb 01       	movw	r24, r22
    4790:	8f 83       	std	Y+7, r24	; 0x07
    4792:	98 87       	std	Y+8, r25	; 0x08
    4794:	a9 87       	std	Y+9, r26	; 0x09
    4796:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4798:	6f 81       	ldd	r22, Y+7	; 0x07
    479a:	78 85       	ldd	r23, Y+8	; 0x08
    479c:	89 85       	ldd	r24, Y+9	; 0x09
    479e:	9a 85       	ldd	r25, Y+10	; 0x0a
    47a0:	20 e0       	ldi	r18, 0x00	; 0
    47a2:	30 e0       	ldi	r19, 0x00	; 0
    47a4:	40 e8       	ldi	r20, 0x80	; 128
    47a6:	5f e3       	ldi	r21, 0x3F	; 63
    47a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    47ac:	88 23       	and	r24, r24
    47ae:	2c f4       	brge	.+10     	; 0x47ba <APP_vPrintNumberSS+0x164>
		__ticks = 1;
    47b0:	81 e0       	ldi	r24, 0x01	; 1
    47b2:	90 e0       	ldi	r25, 0x00	; 0
    47b4:	9e 83       	std	Y+6, r25	; 0x06
    47b6:	8d 83       	std	Y+5, r24	; 0x05
    47b8:	3f c0       	rjmp	.+126    	; 0x4838 <APP_vPrintNumberSS+0x1e2>
	else if (__tmp > 65535)
    47ba:	6f 81       	ldd	r22, Y+7	; 0x07
    47bc:	78 85       	ldd	r23, Y+8	; 0x08
    47be:	89 85       	ldd	r24, Y+9	; 0x09
    47c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    47c2:	20 e0       	ldi	r18, 0x00	; 0
    47c4:	3f ef       	ldi	r19, 0xFF	; 255
    47c6:	4f e7       	ldi	r20, 0x7F	; 127
    47c8:	57 e4       	ldi	r21, 0x47	; 71
    47ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    47ce:	18 16       	cp	r1, r24
    47d0:	4c f5       	brge	.+82     	; 0x4824 <APP_vPrintNumberSS+0x1ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    47d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    47d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    47d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    47d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    47da:	20 e0       	ldi	r18, 0x00	; 0
    47dc:	30 e0       	ldi	r19, 0x00	; 0
    47de:	40 e2       	ldi	r20, 0x20	; 32
    47e0:	51 e4       	ldi	r21, 0x41	; 65
    47e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47e6:	dc 01       	movw	r26, r24
    47e8:	cb 01       	movw	r24, r22
    47ea:	bc 01       	movw	r22, r24
    47ec:	cd 01       	movw	r24, r26
    47ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47f2:	dc 01       	movw	r26, r24
    47f4:	cb 01       	movw	r24, r22
    47f6:	9e 83       	std	Y+6, r25	; 0x06
    47f8:	8d 83       	std	Y+5, r24	; 0x05
    47fa:	0f c0       	rjmp	.+30     	; 0x481a <APP_vPrintNumberSS+0x1c4>
    47fc:	80 e9       	ldi	r24, 0x90	; 144
    47fe:	91 e0       	ldi	r25, 0x01	; 1
    4800:	9c 83       	std	Y+4, r25	; 0x04
    4802:	8b 83       	std	Y+3, r24	; 0x03
    4804:	8b 81       	ldd	r24, Y+3	; 0x03
    4806:	9c 81       	ldd	r25, Y+4	; 0x04
    4808:	01 97       	sbiw	r24, 0x01	; 1
    480a:	f1 f7       	brne	.-4      	; 0x4808 <APP_vPrintNumberSS+0x1b2>
    480c:	9c 83       	std	Y+4, r25	; 0x04
    480e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4810:	8d 81       	ldd	r24, Y+5	; 0x05
    4812:	9e 81       	ldd	r25, Y+6	; 0x06
    4814:	01 97       	sbiw	r24, 0x01	; 1
    4816:	9e 83       	std	Y+6, r25	; 0x06
    4818:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    481a:	8d 81       	ldd	r24, Y+5	; 0x05
    481c:	9e 81       	ldd	r25, Y+6	; 0x06
    481e:	00 97       	sbiw	r24, 0x00	; 0
    4820:	69 f7       	brne	.-38     	; 0x47fc <APP_vPrintNumberSS+0x1a6>
    4822:	14 c0       	rjmp	.+40     	; 0x484c <APP_vPrintNumberSS+0x1f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4824:	6f 81       	ldd	r22, Y+7	; 0x07
    4826:	78 85       	ldd	r23, Y+8	; 0x08
    4828:	89 85       	ldd	r24, Y+9	; 0x09
    482a:	9a 85       	ldd	r25, Y+10	; 0x0a
    482c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4830:	dc 01       	movw	r26, r24
    4832:	cb 01       	movw	r24, r22
    4834:	9e 83       	std	Y+6, r25	; 0x06
    4836:	8d 83       	std	Y+5, r24	; 0x05
    4838:	8d 81       	ldd	r24, Y+5	; 0x05
    483a:	9e 81       	ldd	r25, Y+6	; 0x06
    483c:	9a 83       	std	Y+2, r25	; 0x02
    483e:	89 83       	std	Y+1, r24	; 0x01
    4840:	89 81       	ldd	r24, Y+1	; 0x01
    4842:	9a 81       	ldd	r25, Y+2	; 0x02
    4844:	01 97       	sbiw	r24, 0x01	; 1
    4846:	f1 f7       	brne	.-4      	; 0x4844 <APP_vPrintNumberSS+0x1ee>
    4848:	9a 83       	std	Y+2, r25	; 0x02
    484a:	89 83       	std	Y+1, r24	; 0x01

//------------ this function take two u8 numbers and print them on the 7Segme at the same time-----
void APP_vPrintNumberSS(u8 loc_u8SegmaPrintNumber1, u8 loc_u8SegmaPrintNumber2){
	_7Segma_vInit();
	u16 loc_delay;
	for(loc_delay=0;loc_delay<100;loc_delay++){
    484c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    484e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4850:	01 96       	adiw	r24, 0x01	; 1
    4852:	9e 8f       	std	Y+30, r25	; 0x1e
    4854:	8d 8f       	std	Y+29, r24	; 0x1d
    4856:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4858:	9e 8d       	ldd	r25, Y+30	; 0x1e
    485a:	84 36       	cpi	r24, 0x64	; 100
    485c:	91 05       	cpc	r25, r1
    485e:	08 f4       	brcc	.+2      	; 0x4862 <APP_vPrintNumberSS+0x20c>
    4860:	0b cf       	rjmp	.-490    	; 0x4678 <APP_vPrintNumberSS+0x22>
		_7Segma_vPrintNumber1(loc_u8SegmaPrintNumber1);
		_delay_ms(1);
		_7Segma_vPrintNumber2(loc_u8SegmaPrintNumber2);
		_delay_ms(1);
	}
}
    4862:	a0 96       	adiw	r28, 0x20	; 32
    4864:	0f b6       	in	r0, 0x3f	; 63
    4866:	f8 94       	cli
    4868:	de bf       	out	0x3e, r29	; 62
    486a:	0f be       	out	0x3f, r0	; 63
    486c:	cd bf       	out	0x3d, r28	; 61
    486e:	cf 91       	pop	r28
    4870:	df 91       	pop	r29
    4872:	08 95       	ret

00004874 <APP_vPrintTwoDigitNumberSS>:
void APP_vPrintTwoDigitNumberSS(u8 loc_u8SegmaPrintNumber){
    4874:	df 93       	push	r29
    4876:	cf 93       	push	r28
    4878:	0f 92       	push	r0
    487a:	cd b7       	in	r28, 0x3d	; 61
    487c:	de b7       	in	r29, 0x3e	; 62
    487e:	89 83       	std	Y+1, r24	; 0x01
	APP_vPrintNumberSS(loc_u8SegmaPrintNumber/10, loc_u8SegmaPrintNumber%10);
    4880:	89 81       	ldd	r24, Y+1	; 0x01
    4882:	9a e0       	ldi	r25, 0x0A	; 10
    4884:	69 2f       	mov	r22, r25
    4886:	0e 94 ca 35 	call	0x6b94	; 0x6b94 <__udivmodqi4>
    488a:	28 2f       	mov	r18, r24
    488c:	89 81       	ldd	r24, Y+1	; 0x01
    488e:	9a e0       	ldi	r25, 0x0A	; 10
    4890:	69 2f       	mov	r22, r25
    4892:	0e 94 ca 35 	call	0x6b94	; 0x6b94 <__udivmodqi4>
    4896:	89 2f       	mov	r24, r25
    4898:	98 2f       	mov	r25, r24
    489a:	82 2f       	mov	r24, r18
    489c:	69 2f       	mov	r22, r25
    489e:	0e 94 2b 23 	call	0x4656	; 0x4656 <APP_vPrintNumberSS>
}
    48a2:	0f 90       	pop	r0
    48a4:	cf 91       	pop	r28
    48a6:	df 91       	pop	r29
    48a8:	08 95       	ret

000048aa <APP_vPrintDecimalNumberSS>:
//------------ this function take a f32 number and print it on the 7Segme-----
void APP_vPrintDecimalNumberSS(f32 loc_f32SegmaDecimalNumber){
    48aa:	df 93       	push	r29
    48ac:	cf 93       	push	r28
    48ae:	00 d0       	rcall	.+0      	; 0x48b0 <APP_vPrintDecimalNumberSS+0x6>
    48b0:	00 d0       	rcall	.+0      	; 0x48b2 <APP_vPrintDecimalNumberSS+0x8>
    48b2:	00 d0       	rcall	.+0      	; 0x48b4 <APP_vPrintDecimalNumberSS+0xa>
    48b4:	cd b7       	in	r28, 0x3d	; 61
    48b6:	de b7       	in	r29, 0x3e	; 62
    48b8:	6b 83       	std	Y+3, r22	; 0x03
    48ba:	7c 83       	std	Y+4, r23	; 0x04
    48bc:	8d 83       	std	Y+5, r24	; 0x05
    48be:	9e 83       	std	Y+6, r25	; 0x06
	//------------ DECIMAL POINT PIN------
	DIO_vSetPinDirection(PortB, Pin3, Pin_OutPut);
    48c0:	81 e0       	ldi	r24, 0x01	; 1
    48c2:	63 e0       	ldi	r22, 0x03	; 3
    48c4:	41 e0       	ldi	r20, 0x01	; 1
    48c6:	0e 94 72 10 	call	0x20e4	; 0x20e4 <DIO_vSetPinDirection>
	u16 Loc_u16SegmaNumber=(loc_f32SegmaDecimalNumber*10);
    48ca:	6b 81       	ldd	r22, Y+3	; 0x03
    48cc:	7c 81       	ldd	r23, Y+4	; 0x04
    48ce:	8d 81       	ldd	r24, Y+5	; 0x05
    48d0:	9e 81       	ldd	r25, Y+6	; 0x06
    48d2:	20 e0       	ldi	r18, 0x00	; 0
    48d4:	30 e0       	ldi	r19, 0x00	; 0
    48d6:	40 e2       	ldi	r20, 0x20	; 32
    48d8:	51 e4       	ldi	r21, 0x41	; 65
    48da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48de:	dc 01       	movw	r26, r24
    48e0:	cb 01       	movw	r24, r22
    48e2:	bc 01       	movw	r22, r24
    48e4:	cd 01       	movw	r24, r26
    48e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48ea:	dc 01       	movw	r26, r24
    48ec:	cb 01       	movw	r24, r22
    48ee:	9a 83       	std	Y+2, r25	; 0x02
    48f0:	89 83       	std	Y+1, r24	; 0x01
	_7Segma_vEnableDot();
    48f2:	0e 94 32 16 	call	0x2c64	; 0x2c64 <_7Segma_vEnableDot>
	APP_vPrintNumberSS(Loc_u16SegmaNumber/10, Loc_u16SegmaNumber%10);
    48f6:	89 81       	ldd	r24, Y+1	; 0x01
    48f8:	9a 81       	ldd	r25, Y+2	; 0x02
    48fa:	2a e0       	ldi	r18, 0x0A	; 10
    48fc:	30 e0       	ldi	r19, 0x00	; 0
    48fe:	b9 01       	movw	r22, r18
    4900:	0e 94 d6 35 	call	0x6bac	; 0x6bac <__udivmodhi4>
    4904:	cb 01       	movw	r24, r22
    4906:	48 2f       	mov	r20, r24
    4908:	89 81       	ldd	r24, Y+1	; 0x01
    490a:	9a 81       	ldd	r25, Y+2	; 0x02
    490c:	2a e0       	ldi	r18, 0x0A	; 10
    490e:	30 e0       	ldi	r19, 0x00	; 0
    4910:	b9 01       	movw	r22, r18
    4912:	0e 94 d6 35 	call	0x6bac	; 0x6bac <__udivmodhi4>
    4916:	98 2f       	mov	r25, r24
    4918:	84 2f       	mov	r24, r20
    491a:	69 2f       	mov	r22, r25
    491c:	0e 94 2b 23 	call	0x4656	; 0x4656 <APP_vPrintNumberSS>
	_7Segma_vDisbleDot();
    4920:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <_7Segma_vDisbleDot>
}
    4924:	26 96       	adiw	r28, 0x06	; 6
    4926:	0f b6       	in	r0, 0x3f	; 63
    4928:	f8 94       	cli
    492a:	de bf       	out	0x3e, r29	; 62
    492c:	0f be       	out	0x3f, r0	; 63
    492e:	cd bf       	out	0x3d, r28	; 61
    4930:	cf 91       	pop	r28
    4932:	df 91       	pop	r29
    4934:	08 95       	ret

00004936 <APP_vPrint0to99SS>:
//--------------- this function is used to print from 00 to 99--------
void APP_vPrint0to99SS(){
    4936:	df 93       	push	r29
    4938:	cf 93       	push	r28
    493a:	00 d0       	rcall	.+0      	; 0x493c <APP_vPrint0to99SS+0x6>
    493c:	cd b7       	in	r28, 0x3d	; 61
    493e:	de b7       	in	r29, 0x3e	; 62
	u8 Loc_Count,Loc_Count2;
	for(Loc_Count=0;Loc_Count<10;Loc_Count++){
    4940:	1a 82       	std	Y+2, r1	; 0x02
    4942:	0f c0       	rjmp	.+30     	; 0x4962 <APP_vPrint0to99SS+0x2c>
		for(Loc_Count2=0;Loc_Count2<10;Loc_Count2++){
    4944:	19 82       	std	Y+1, r1	; 0x01
    4946:	07 c0       	rjmp	.+14     	; 0x4956 <APP_vPrint0to99SS+0x20>
			APP_vPrintNumberSS(Loc_Count,Loc_Count2);
    4948:	8a 81       	ldd	r24, Y+2	; 0x02
    494a:	69 81       	ldd	r22, Y+1	; 0x01
    494c:	0e 94 2b 23 	call	0x4656	; 0x4656 <APP_vPrintNumberSS>
}
//--------------- this function is used to print from 00 to 99--------
void APP_vPrint0to99SS(){
	u8 Loc_Count,Loc_Count2;
	for(Loc_Count=0;Loc_Count<10;Loc_Count++){
		for(Loc_Count2=0;Loc_Count2<10;Loc_Count2++){
    4950:	89 81       	ldd	r24, Y+1	; 0x01
    4952:	8f 5f       	subi	r24, 0xFF	; 255
    4954:	89 83       	std	Y+1, r24	; 0x01
    4956:	89 81       	ldd	r24, Y+1	; 0x01
    4958:	8a 30       	cpi	r24, 0x0A	; 10
    495a:	b0 f3       	brcs	.-20     	; 0x4948 <APP_vPrint0to99SS+0x12>
	_7Segma_vDisbleDot();
}
//--------------- this function is used to print from 00 to 99--------
void APP_vPrint0to99SS(){
	u8 Loc_Count,Loc_Count2;
	for(Loc_Count=0;Loc_Count<10;Loc_Count++){
    495c:	8a 81       	ldd	r24, Y+2	; 0x02
    495e:	8f 5f       	subi	r24, 0xFF	; 255
    4960:	8a 83       	std	Y+2, r24	; 0x02
    4962:	8a 81       	ldd	r24, Y+2	; 0x02
    4964:	8a 30       	cpi	r24, 0x0A	; 10
    4966:	70 f3       	brcs	.-36     	; 0x4944 <APP_vPrint0to99SS+0xe>
		for(Loc_Count2=0;Loc_Count2<10;Loc_Count2++){
			APP_vPrintNumberSS(Loc_Count,Loc_Count2);
		}
	}
}
    4968:	0f 90       	pop	r0
    496a:	0f 90       	pop	r0
    496c:	cf 91       	pop	r28
    496e:	df 91       	pop	r29
    4970:	08 95       	ret

00004972 <APP_vPrint1MinuteSS>:
//--------------- this function is used to print 1 minute on the 7 segma--------
void APP_vPrint1MinuteSS(){
    4972:	df 93       	push	r29
    4974:	cf 93       	push	r28
    4976:	00 d0       	rcall	.+0      	; 0x4978 <APP_vPrint1MinuteSS+0x6>
    4978:	cd b7       	in	r28, 0x3d	; 61
    497a:	de b7       	in	r29, 0x3e	; 62
	u8 Loc_Count,loc_delay;
	for(Loc_Count=0;Loc_Count<=60;Loc_Count++){
    497c:	1a 82       	std	Y+2, r1	; 0x02
    497e:	0e c0       	rjmp	.+28     	; 0x499c <APP_vPrint1MinuteSS+0x2a>
		for(loc_delay=0;loc_delay<4;loc_delay++){
    4980:	19 82       	std	Y+1, r1	; 0x01
    4982:	06 c0       	rjmp	.+12     	; 0x4990 <APP_vPrint1MinuteSS+0x1e>
			APP_vPrintTwoDigitNumberSS(Loc_Count);
    4984:	8a 81       	ldd	r24, Y+2	; 0x02
    4986:	0e 94 3a 24 	call	0x4874	; 0x4874 <APP_vPrintTwoDigitNumberSS>
}
//--------------- this function is used to print 1 minute on the 7 segma--------
void APP_vPrint1MinuteSS(){
	u8 Loc_Count,loc_delay;
	for(Loc_Count=0;Loc_Count<=60;Loc_Count++){
		for(loc_delay=0;loc_delay<4;loc_delay++){
    498a:	89 81       	ldd	r24, Y+1	; 0x01
    498c:	8f 5f       	subi	r24, 0xFF	; 255
    498e:	89 83       	std	Y+1, r24	; 0x01
    4990:	89 81       	ldd	r24, Y+1	; 0x01
    4992:	84 30       	cpi	r24, 0x04	; 4
    4994:	b8 f3       	brcs	.-18     	; 0x4984 <APP_vPrint1MinuteSS+0x12>
	}
}
//--------------- this function is used to print 1 minute on the 7 segma--------
void APP_vPrint1MinuteSS(){
	u8 Loc_Count,loc_delay;
	for(Loc_Count=0;Loc_Count<=60;Loc_Count++){
    4996:	8a 81       	ldd	r24, Y+2	; 0x02
    4998:	8f 5f       	subi	r24, 0xFF	; 255
    499a:	8a 83       	std	Y+2, r24	; 0x02
    499c:	8a 81       	ldd	r24, Y+2	; 0x02
    499e:	8d 33       	cpi	r24, 0x3D	; 61
    49a0:	78 f3       	brcs	.-34     	; 0x4980 <APP_vPrint1MinuteSS+0xe>
		for(loc_delay=0;loc_delay<4;loc_delay++){
			APP_vPrintTwoDigitNumberSS(Loc_Count);
		}
	}
}
    49a2:	0f 90       	pop	r0
    49a4:	0f 90       	pop	r0
    49a6:	cf 91       	pop	r28
    49a8:	df 91       	pop	r29
    49aa:	08 95       	ret

000049ac <APP_vClickCounterPB>:
/*--------------- this function is used to count the
 * (number clicks on pushbutton 1 Subtracted from number clicks on pushbutton 2)
 * and print it on the 7Segma*/
void APP_vClickCounterPB(){
    49ac:	df 93       	push	r29
    49ae:	cf 93       	push	r28
    49b0:	0f 92       	push	r0
    49b2:	cd b7       	in	r28, 0x3d	; 61
    49b4:	de b7       	in	r29, 0x3e	; 62
	u8 Loc_Count;
	for(Loc_Count=0;Loc_Count<100;){
    49b6:	19 82       	std	Y+1, r1	; 0x01
    49b8:	22 c0       	rjmp	.+68     	; 0x49fe <APP_vClickCounterPB+0x52>
		if(PushButton_u8Button1()){
    49ba:	0e 94 1a 17 	call	0x2e34	; 0x2e34 <PushButton_u8Button1>
    49be:	88 23       	and	r24, r24
    49c0:	51 f0       	breq	.+20     	; 0x49d6 <APP_vClickCounterPB+0x2a>
			Loc_Count++;
    49c2:	89 81       	ldd	r24, Y+1	; 0x01
    49c4:	8f 5f       	subi	r24, 0xFF	; 255
    49c6:	89 83       	std	Y+1, r24	; 0x01
			APP_vPrintTwoDigitNumberSS(Loc_Count);
    49c8:	89 81       	ldd	r24, Y+1	; 0x01
    49ca:	0e 94 3a 24 	call	0x4874	; 0x4874 <APP_vPrintTwoDigitNumberSS>
			APP_vPrintTwoDigitNumberSS(Loc_Count);
    49ce:	89 81       	ldd	r24, Y+1	; 0x01
    49d0:	0e 94 3a 24 	call	0x4874	; 0x4874 <APP_vPrintTwoDigitNumberSS>
    49d4:	14 c0       	rjmp	.+40     	; 0x49fe <APP_vClickCounterPB+0x52>
		}
		else if(PushButton_u8Button2()&&Loc_Count!=0){
    49d6:	0e 94 b6 17 	call	0x2f6c	; 0x2f6c <PushButton_u8Button2>
    49da:	88 23       	and	r24, r24
    49dc:	69 f0       	breq	.+26     	; 0x49f8 <APP_vClickCounterPB+0x4c>
    49de:	89 81       	ldd	r24, Y+1	; 0x01
    49e0:	88 23       	and	r24, r24
    49e2:	51 f0       	breq	.+20     	; 0x49f8 <APP_vClickCounterPB+0x4c>
			Loc_Count--;
    49e4:	89 81       	ldd	r24, Y+1	; 0x01
    49e6:	81 50       	subi	r24, 0x01	; 1
    49e8:	89 83       	std	Y+1, r24	; 0x01
			APP_vPrintTwoDigitNumberSS(Loc_Count);
    49ea:	89 81       	ldd	r24, Y+1	; 0x01
    49ec:	0e 94 3a 24 	call	0x4874	; 0x4874 <APP_vPrintTwoDigitNumberSS>
			APP_vPrintTwoDigitNumberSS(Loc_Count);
    49f0:	89 81       	ldd	r24, Y+1	; 0x01
    49f2:	0e 94 3a 24 	call	0x4874	; 0x4874 <APP_vPrintTwoDigitNumberSS>
    49f6:	03 c0       	rjmp	.+6      	; 0x49fe <APP_vClickCounterPB+0x52>
		}
		else{
			APP_vPrintTwoDigitNumberSS(Loc_Count);
    49f8:	89 81       	ldd	r24, Y+1	; 0x01
    49fa:	0e 94 3a 24 	call	0x4874	; 0x4874 <APP_vPrintTwoDigitNumberSS>
/*--------------- this function is used to count the
 * (number clicks on pushbutton 1 Subtracted from number clicks on pushbutton 2)
 * and print it on the 7Segma*/
void APP_vClickCounterPB(){
	u8 Loc_Count;
	for(Loc_Count=0;Loc_Count<100;){
    49fe:	89 81       	ldd	r24, Y+1	; 0x01
    4a00:	84 36       	cpi	r24, 0x64	; 100
    4a02:	d8 f2       	brcs	.-74     	; 0x49ba <APP_vClickCounterPB+0xe>
		}
		else{
			APP_vPrintTwoDigitNumberSS(Loc_Count);
		}
	}
}
    4a04:	0f 90       	pop	r0
    4a06:	cf 91       	pop	r28
    4a08:	df 91       	pop	r29
    4a0a:	08 95       	ret

00004a0c <APP_v3Leds1MinuteEachSS>:
/*---------this function is used to count 3 minutes every minute a led will turn on--------*/
void APP_v3Leds1MinuteEachSS(){
    4a0c:	df 93       	push	r29
    4a0e:	cf 93       	push	r28
    4a10:	cd b7       	in	r28, 0x3d	; 61
    4a12:	de b7       	in	r29, 0x3e	; 62
    4a14:	6c 97       	sbiw	r28, 0x1c	; 28
    4a16:	0f b6       	in	r0, 0x3f	; 63
    4a18:	f8 94       	cli
    4a1a:	de bf       	out	0x3e, r29	; 62
    4a1c:	0f be       	out	0x3f, r0	; 63
    4a1e:	cd bf       	out	0x3d, r28	; 61
	APP_vPrint1MinuteSS();
    4a20:	0e 94 b9 24 	call	0x4972	; 0x4972 <APP_vPrint1MinuteSS>
	LedAndBuzzer_vLed0Open();
    4a24:	0e 94 57 14 	call	0x28ae	; 0x28ae <LedAndBuzzer_vLed0Open>
	APP_vPrint1MinuteSS();
    4a28:	0e 94 b9 24 	call	0x4972	; 0x4972 <APP_vPrint1MinuteSS>
	LedAndBuzzer_vLed1Open();
    4a2c:	0e 94 74 14 	call	0x28e8	; 0x28e8 <LedAndBuzzer_vLed1Open>
	APP_vPrint1MinuteSS();
    4a30:	0e 94 b9 24 	call	0x4972	; 0x4972 <APP_vPrint1MinuteSS>
	LedAndBuzzer_vLed2Open();
    4a34:	0e 94 91 14 	call	0x2922	; 0x2922 <LedAndBuzzer_vLed2Open>
    4a38:	80 e0       	ldi	r24, 0x00	; 0
    4a3a:	90 e0       	ldi	r25, 0x00	; 0
    4a3c:	aa e7       	ldi	r26, 0x7A	; 122
    4a3e:	b3 e4       	ldi	r27, 0x43	; 67
    4a40:	89 8f       	std	Y+25, r24	; 0x19
    4a42:	9a 8f       	std	Y+26, r25	; 0x1a
    4a44:	ab 8f       	std	Y+27, r26	; 0x1b
    4a46:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a48:	69 8d       	ldd	r22, Y+25	; 0x19
    4a4a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4a4c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4a4e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4a50:	20 e0       	ldi	r18, 0x00	; 0
    4a52:	30 e0       	ldi	r19, 0x00	; 0
    4a54:	4a e7       	ldi	r20, 0x7A	; 122
    4a56:	55 e4       	ldi	r21, 0x45	; 69
    4a58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a5c:	dc 01       	movw	r26, r24
    4a5e:	cb 01       	movw	r24, r22
    4a60:	8d 8b       	std	Y+21, r24	; 0x15
    4a62:	9e 8b       	std	Y+22, r25	; 0x16
    4a64:	af 8b       	std	Y+23, r26	; 0x17
    4a66:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4a68:	6d 89       	ldd	r22, Y+21	; 0x15
    4a6a:	7e 89       	ldd	r23, Y+22	; 0x16
    4a6c:	8f 89       	ldd	r24, Y+23	; 0x17
    4a6e:	98 8d       	ldd	r25, Y+24	; 0x18
    4a70:	20 e0       	ldi	r18, 0x00	; 0
    4a72:	30 e0       	ldi	r19, 0x00	; 0
    4a74:	40 e8       	ldi	r20, 0x80	; 128
    4a76:	5f e3       	ldi	r21, 0x3F	; 63
    4a78:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4a7c:	88 23       	and	r24, r24
    4a7e:	2c f4       	brge	.+10     	; 0x4a8a <APP_v3Leds1MinuteEachSS+0x7e>
		__ticks = 1;
    4a80:	81 e0       	ldi	r24, 0x01	; 1
    4a82:	90 e0       	ldi	r25, 0x00	; 0
    4a84:	9c 8b       	std	Y+20, r25	; 0x14
    4a86:	8b 8b       	std	Y+19, r24	; 0x13
    4a88:	3f c0       	rjmp	.+126    	; 0x4b08 <APP_v3Leds1MinuteEachSS+0xfc>
	else if (__tmp > 65535)
    4a8a:	6d 89       	ldd	r22, Y+21	; 0x15
    4a8c:	7e 89       	ldd	r23, Y+22	; 0x16
    4a8e:	8f 89       	ldd	r24, Y+23	; 0x17
    4a90:	98 8d       	ldd	r25, Y+24	; 0x18
    4a92:	20 e0       	ldi	r18, 0x00	; 0
    4a94:	3f ef       	ldi	r19, 0xFF	; 255
    4a96:	4f e7       	ldi	r20, 0x7F	; 127
    4a98:	57 e4       	ldi	r21, 0x47	; 71
    4a9a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4a9e:	18 16       	cp	r1, r24
    4aa0:	4c f5       	brge	.+82     	; 0x4af4 <APP_v3Leds1MinuteEachSS+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4aa2:	69 8d       	ldd	r22, Y+25	; 0x19
    4aa4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4aa6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4aa8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4aaa:	20 e0       	ldi	r18, 0x00	; 0
    4aac:	30 e0       	ldi	r19, 0x00	; 0
    4aae:	40 e2       	ldi	r20, 0x20	; 32
    4ab0:	51 e4       	ldi	r21, 0x41	; 65
    4ab2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ab6:	dc 01       	movw	r26, r24
    4ab8:	cb 01       	movw	r24, r22
    4aba:	bc 01       	movw	r22, r24
    4abc:	cd 01       	movw	r24, r26
    4abe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ac2:	dc 01       	movw	r26, r24
    4ac4:	cb 01       	movw	r24, r22
    4ac6:	9c 8b       	std	Y+20, r25	; 0x14
    4ac8:	8b 8b       	std	Y+19, r24	; 0x13
    4aca:	0f c0       	rjmp	.+30     	; 0x4aea <APP_v3Leds1MinuteEachSS+0xde>
    4acc:	80 e9       	ldi	r24, 0x90	; 144
    4ace:	91 e0       	ldi	r25, 0x01	; 1
    4ad0:	9a 8b       	std	Y+18, r25	; 0x12
    4ad2:	89 8b       	std	Y+17, r24	; 0x11
    4ad4:	89 89       	ldd	r24, Y+17	; 0x11
    4ad6:	9a 89       	ldd	r25, Y+18	; 0x12
    4ad8:	01 97       	sbiw	r24, 0x01	; 1
    4ada:	f1 f7       	brne	.-4      	; 0x4ad8 <APP_v3Leds1MinuteEachSS+0xcc>
    4adc:	9a 8b       	std	Y+18, r25	; 0x12
    4ade:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ae0:	8b 89       	ldd	r24, Y+19	; 0x13
    4ae2:	9c 89       	ldd	r25, Y+20	; 0x14
    4ae4:	01 97       	sbiw	r24, 0x01	; 1
    4ae6:	9c 8b       	std	Y+20, r25	; 0x14
    4ae8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4aea:	8b 89       	ldd	r24, Y+19	; 0x13
    4aec:	9c 89       	ldd	r25, Y+20	; 0x14
    4aee:	00 97       	sbiw	r24, 0x00	; 0
    4af0:	69 f7       	brne	.-38     	; 0x4acc <APP_v3Leds1MinuteEachSS+0xc0>
    4af2:	14 c0       	rjmp	.+40     	; 0x4b1c <APP_v3Leds1MinuteEachSS+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4af4:	6d 89       	ldd	r22, Y+21	; 0x15
    4af6:	7e 89       	ldd	r23, Y+22	; 0x16
    4af8:	8f 89       	ldd	r24, Y+23	; 0x17
    4afa:	98 8d       	ldd	r25, Y+24	; 0x18
    4afc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b00:	dc 01       	movw	r26, r24
    4b02:	cb 01       	movw	r24, r22
    4b04:	9c 8b       	std	Y+20, r25	; 0x14
    4b06:	8b 8b       	std	Y+19, r24	; 0x13
    4b08:	8b 89       	ldd	r24, Y+19	; 0x13
    4b0a:	9c 89       	ldd	r25, Y+20	; 0x14
    4b0c:	98 8b       	std	Y+16, r25	; 0x10
    4b0e:	8f 87       	std	Y+15, r24	; 0x0f
    4b10:	8f 85       	ldd	r24, Y+15	; 0x0f
    4b12:	98 89       	ldd	r25, Y+16	; 0x10
    4b14:	01 97       	sbiw	r24, 0x01	; 1
    4b16:	f1 f7       	brne	.-4      	; 0x4b14 <APP_v3Leds1MinuteEachSS+0x108>
    4b18:	98 8b       	std	Y+16, r25	; 0x10
    4b1a:	8f 87       	std	Y+15, r24	; 0x0f
    4b1c:	80 e0       	ldi	r24, 0x00	; 0
    4b1e:	90 e0       	ldi	r25, 0x00	; 0
    4b20:	aa e7       	ldi	r26, 0x7A	; 122
    4b22:	b3 e4       	ldi	r27, 0x43	; 67
    4b24:	8b 87       	std	Y+11, r24	; 0x0b
    4b26:	9c 87       	std	Y+12, r25	; 0x0c
    4b28:	ad 87       	std	Y+13, r26	; 0x0d
    4b2a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    4b2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4b30:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b32:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b34:	20 e0       	ldi	r18, 0x00	; 0
    4b36:	30 e0       	ldi	r19, 0x00	; 0
    4b38:	4a e7       	ldi	r20, 0x7A	; 122
    4b3a:	55 e4       	ldi	r21, 0x45	; 69
    4b3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b40:	dc 01       	movw	r26, r24
    4b42:	cb 01       	movw	r24, r22
    4b44:	8f 83       	std	Y+7, r24	; 0x07
    4b46:	98 87       	std	Y+8, r25	; 0x08
    4b48:	a9 87       	std	Y+9, r26	; 0x09
    4b4a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4b4c:	6f 81       	ldd	r22, Y+7	; 0x07
    4b4e:	78 85       	ldd	r23, Y+8	; 0x08
    4b50:	89 85       	ldd	r24, Y+9	; 0x09
    4b52:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b54:	20 e0       	ldi	r18, 0x00	; 0
    4b56:	30 e0       	ldi	r19, 0x00	; 0
    4b58:	40 e8       	ldi	r20, 0x80	; 128
    4b5a:	5f e3       	ldi	r21, 0x3F	; 63
    4b5c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4b60:	88 23       	and	r24, r24
    4b62:	2c f4       	brge	.+10     	; 0x4b6e <APP_v3Leds1MinuteEachSS+0x162>
		__ticks = 1;
    4b64:	81 e0       	ldi	r24, 0x01	; 1
    4b66:	90 e0       	ldi	r25, 0x00	; 0
    4b68:	9e 83       	std	Y+6, r25	; 0x06
    4b6a:	8d 83       	std	Y+5, r24	; 0x05
    4b6c:	3f c0       	rjmp	.+126    	; 0x4bec <APP_v3Leds1MinuteEachSS+0x1e0>
	else if (__tmp > 65535)
    4b6e:	6f 81       	ldd	r22, Y+7	; 0x07
    4b70:	78 85       	ldd	r23, Y+8	; 0x08
    4b72:	89 85       	ldd	r24, Y+9	; 0x09
    4b74:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b76:	20 e0       	ldi	r18, 0x00	; 0
    4b78:	3f ef       	ldi	r19, 0xFF	; 255
    4b7a:	4f e7       	ldi	r20, 0x7F	; 127
    4b7c:	57 e4       	ldi	r21, 0x47	; 71
    4b7e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4b82:	18 16       	cp	r1, r24
    4b84:	4c f5       	brge	.+82     	; 0x4bd8 <APP_v3Leds1MinuteEachSS+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b86:	6b 85       	ldd	r22, Y+11	; 0x0b
    4b88:	7c 85       	ldd	r23, Y+12	; 0x0c
    4b8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b8e:	20 e0       	ldi	r18, 0x00	; 0
    4b90:	30 e0       	ldi	r19, 0x00	; 0
    4b92:	40 e2       	ldi	r20, 0x20	; 32
    4b94:	51 e4       	ldi	r21, 0x41	; 65
    4b96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b9a:	dc 01       	movw	r26, r24
    4b9c:	cb 01       	movw	r24, r22
    4b9e:	bc 01       	movw	r22, r24
    4ba0:	cd 01       	movw	r24, r26
    4ba2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ba6:	dc 01       	movw	r26, r24
    4ba8:	cb 01       	movw	r24, r22
    4baa:	9e 83       	std	Y+6, r25	; 0x06
    4bac:	8d 83       	std	Y+5, r24	; 0x05
    4bae:	0f c0       	rjmp	.+30     	; 0x4bce <APP_v3Leds1MinuteEachSS+0x1c2>
    4bb0:	80 e9       	ldi	r24, 0x90	; 144
    4bb2:	91 e0       	ldi	r25, 0x01	; 1
    4bb4:	9c 83       	std	Y+4, r25	; 0x04
    4bb6:	8b 83       	std	Y+3, r24	; 0x03
    4bb8:	8b 81       	ldd	r24, Y+3	; 0x03
    4bba:	9c 81       	ldd	r25, Y+4	; 0x04
    4bbc:	01 97       	sbiw	r24, 0x01	; 1
    4bbe:	f1 f7       	brne	.-4      	; 0x4bbc <APP_v3Leds1MinuteEachSS+0x1b0>
    4bc0:	9c 83       	std	Y+4, r25	; 0x04
    4bc2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4bc4:	8d 81       	ldd	r24, Y+5	; 0x05
    4bc6:	9e 81       	ldd	r25, Y+6	; 0x06
    4bc8:	01 97       	sbiw	r24, 0x01	; 1
    4bca:	9e 83       	std	Y+6, r25	; 0x06
    4bcc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4bce:	8d 81       	ldd	r24, Y+5	; 0x05
    4bd0:	9e 81       	ldd	r25, Y+6	; 0x06
    4bd2:	00 97       	sbiw	r24, 0x00	; 0
    4bd4:	69 f7       	brne	.-38     	; 0x4bb0 <APP_v3Leds1MinuteEachSS+0x1a4>
    4bd6:	14 c0       	rjmp	.+40     	; 0x4c00 <APP_v3Leds1MinuteEachSS+0x1f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4bd8:	6f 81       	ldd	r22, Y+7	; 0x07
    4bda:	78 85       	ldd	r23, Y+8	; 0x08
    4bdc:	89 85       	ldd	r24, Y+9	; 0x09
    4bde:	9a 85       	ldd	r25, Y+10	; 0x0a
    4be0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4be4:	dc 01       	movw	r26, r24
    4be6:	cb 01       	movw	r24, r22
    4be8:	9e 83       	std	Y+6, r25	; 0x06
    4bea:	8d 83       	std	Y+5, r24	; 0x05
    4bec:	8d 81       	ldd	r24, Y+5	; 0x05
    4bee:	9e 81       	ldd	r25, Y+6	; 0x06
    4bf0:	9a 83       	std	Y+2, r25	; 0x02
    4bf2:	89 83       	std	Y+1, r24	; 0x01
    4bf4:	89 81       	ldd	r24, Y+1	; 0x01
    4bf6:	9a 81       	ldd	r25, Y+2	; 0x02
    4bf8:	01 97       	sbiw	r24, 0x01	; 1
    4bfa:	f1 f7       	brne	.-4      	; 0x4bf8 <APP_v3Leds1MinuteEachSS+0x1ec>
    4bfc:	9a 83       	std	Y+2, r25	; 0x02
    4bfe:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(250);
	_delay_ms(250);
	LedAndBuzzer_vLed0Close();
    4c00:	0e 94 68 14 	call	0x28d0	; 0x28d0 <LedAndBuzzer_vLed0Close>
	LedAndBuzzer_vLed1Close();
    4c04:	0e 94 85 14 	call	0x290a	; 0x290a <LedAndBuzzer_vLed1Close>
	LedAndBuzzer_vLed2Close();
    4c08:	0e 94 a2 14 	call	0x2944	; 0x2944 <LedAndBuzzer_vLed2Close>
}
    4c0c:	6c 96       	adiw	r28, 0x1c	; 28
    4c0e:	0f b6       	in	r0, 0x3f	; 63
    4c10:	f8 94       	cli
    4c12:	de bf       	out	0x3e, r29	; 62
    4c14:	0f be       	out	0x3f, r0	; 63
    4c16:	cd bf       	out	0x3d, r28	; 61
    4c18:	cf 91       	pop	r28
    4c1a:	df 91       	pop	r29
    4c1c:	08 95       	ret

00004c1e <APP_vTaskFinsh>:
/*------------ this function is used to turn all LEDs and buzzer 3 times
 * -------------- to show that Task is finished--------*/
void APP_vTaskFinsh(){
    4c1e:	df 93       	push	r29
    4c20:	cf 93       	push	r28
    4c22:	cd b7       	in	r28, 0x3d	; 61
    4c24:	de b7       	in	r29, 0x3e	; 62
	LedAndBuzzer_vFlash(3);
    4c26:	83 e0       	ldi	r24, 0x03	; 3
    4c28:	0e 94 cb 14 	call	0x2996	; 0x2996 <LedAndBuzzer_vFlash>
}
    4c2c:	cf 91       	pop	r28
    4c2e:	df 91       	pop	r29
    4c30:	08 95       	ret

00004c32 <APP_vWriteStringManyTimesLCD>:
//-----------------
void APP_vWriteStringManyTimesLCD(u8 *Loc_u8Array,u8 Loc_u8size){
    4c32:	df 93       	push	r29
    4c34:	cf 93       	push	r28
    4c36:	cd b7       	in	r28, 0x3d	; 61
    4c38:	de b7       	in	r29, 0x3e	; 62
    4c3a:	a0 97       	sbiw	r28, 0x20	; 32
    4c3c:	0f b6       	in	r0, 0x3f	; 63
    4c3e:	f8 94       	cli
    4c40:	de bf       	out	0x3e, r29	; 62
    4c42:	0f be       	out	0x3f, r0	; 63
    4c44:	cd bf       	out	0x3d, r28	; 61
    4c46:	9f 8f       	std	Y+31, r25	; 0x1f
    4c48:	8e 8f       	std	Y+30, r24	; 0x1e
    4c4a:	68 a3       	std	Y+32, r22	; 0x20
	LCD_vInit();
    4c4c:	0e 94 a8 1a 	call	0x3550	; 0x3550 <LCD_vInit>
	u8 i;
	for(i=0;i<=((16/Loc_u8size));i++){
    4c50:	1d 8e       	std	Y+29, r1	; 0x1d
    4c52:	91 c0       	rjmp	.+290    	; 0x4d76 <APP_vWriteStringManyTimesLCD+0x144>
		LCD_vGoTo(LineOne,((Loc_u8size-1)*i));
    4c54:	88 a1       	ldd	r24, Y+32	; 0x20
    4c56:	88 2f       	mov	r24, r24
    4c58:	90 e0       	ldi	r25, 0x00	; 0
    4c5a:	9c 01       	movw	r18, r24
    4c5c:	21 50       	subi	r18, 0x01	; 1
    4c5e:	30 40       	sbci	r19, 0x00	; 0
    4c60:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4c62:	88 2f       	mov	r24, r24
    4c64:	90 e0       	ldi	r25, 0x00	; 0
    4c66:	ac 01       	movw	r20, r24
    4c68:	24 9f       	mul	r18, r20
    4c6a:	c0 01       	movw	r24, r0
    4c6c:	25 9f       	mul	r18, r21
    4c6e:	90 0d       	add	r25, r0
    4c70:	34 9f       	mul	r19, r20
    4c72:	90 0d       	add	r25, r0
    4c74:	11 24       	eor	r1, r1
    4c76:	98 2f       	mov	r25, r24
    4c78:	80 e8       	ldi	r24, 0x80	; 128
    4c7a:	69 2f       	mov	r22, r25
    4c7c:	0e 94 6e 20 	call	0x40dc	; 0x40dc <LCD_vGoTo>
		LCD_vWriteString(Loc_u8Array);
    4c80:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4c82:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4c84:	0e 94 07 21 	call	0x420e	; 0x420e <LCD_vWriteString>
    4c88:	80 e0       	ldi	r24, 0x00	; 0
    4c8a:	90 e0       	ldi	r25, 0x00	; 0
    4c8c:	aa e7       	ldi	r26, 0x7A	; 122
    4c8e:	b3 e4       	ldi	r27, 0x43	; 67
    4c90:	89 8f       	std	Y+25, r24	; 0x19
    4c92:	9a 8f       	std	Y+26, r25	; 0x1a
    4c94:	ab 8f       	std	Y+27, r26	; 0x1b
    4c96:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c98:	69 8d       	ldd	r22, Y+25	; 0x19
    4c9a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4c9c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4c9e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4ca0:	20 e0       	ldi	r18, 0x00	; 0
    4ca2:	30 e0       	ldi	r19, 0x00	; 0
    4ca4:	4a e7       	ldi	r20, 0x7A	; 122
    4ca6:	55 e4       	ldi	r21, 0x45	; 69
    4ca8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cac:	dc 01       	movw	r26, r24
    4cae:	cb 01       	movw	r24, r22
    4cb0:	8d 8b       	std	Y+21, r24	; 0x15
    4cb2:	9e 8b       	std	Y+22, r25	; 0x16
    4cb4:	af 8b       	std	Y+23, r26	; 0x17
    4cb6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4cb8:	6d 89       	ldd	r22, Y+21	; 0x15
    4cba:	7e 89       	ldd	r23, Y+22	; 0x16
    4cbc:	8f 89       	ldd	r24, Y+23	; 0x17
    4cbe:	98 8d       	ldd	r25, Y+24	; 0x18
    4cc0:	20 e0       	ldi	r18, 0x00	; 0
    4cc2:	30 e0       	ldi	r19, 0x00	; 0
    4cc4:	40 e8       	ldi	r20, 0x80	; 128
    4cc6:	5f e3       	ldi	r21, 0x3F	; 63
    4cc8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4ccc:	88 23       	and	r24, r24
    4cce:	2c f4       	brge	.+10     	; 0x4cda <APP_vWriteStringManyTimesLCD+0xa8>
		__ticks = 1;
    4cd0:	81 e0       	ldi	r24, 0x01	; 1
    4cd2:	90 e0       	ldi	r25, 0x00	; 0
    4cd4:	9c 8b       	std	Y+20, r25	; 0x14
    4cd6:	8b 8b       	std	Y+19, r24	; 0x13
    4cd8:	3f c0       	rjmp	.+126    	; 0x4d58 <APP_vWriteStringManyTimesLCD+0x126>
	else if (__tmp > 65535)
    4cda:	6d 89       	ldd	r22, Y+21	; 0x15
    4cdc:	7e 89       	ldd	r23, Y+22	; 0x16
    4cde:	8f 89       	ldd	r24, Y+23	; 0x17
    4ce0:	98 8d       	ldd	r25, Y+24	; 0x18
    4ce2:	20 e0       	ldi	r18, 0x00	; 0
    4ce4:	3f ef       	ldi	r19, 0xFF	; 255
    4ce6:	4f e7       	ldi	r20, 0x7F	; 127
    4ce8:	57 e4       	ldi	r21, 0x47	; 71
    4cea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4cee:	18 16       	cp	r1, r24
    4cf0:	4c f5       	brge	.+82     	; 0x4d44 <APP_vWriteStringManyTimesLCD+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4cf2:	69 8d       	ldd	r22, Y+25	; 0x19
    4cf4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4cf6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4cf8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4cfa:	20 e0       	ldi	r18, 0x00	; 0
    4cfc:	30 e0       	ldi	r19, 0x00	; 0
    4cfe:	40 e2       	ldi	r20, 0x20	; 32
    4d00:	51 e4       	ldi	r21, 0x41	; 65
    4d02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d06:	dc 01       	movw	r26, r24
    4d08:	cb 01       	movw	r24, r22
    4d0a:	bc 01       	movw	r22, r24
    4d0c:	cd 01       	movw	r24, r26
    4d0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d12:	dc 01       	movw	r26, r24
    4d14:	cb 01       	movw	r24, r22
    4d16:	9c 8b       	std	Y+20, r25	; 0x14
    4d18:	8b 8b       	std	Y+19, r24	; 0x13
    4d1a:	0f c0       	rjmp	.+30     	; 0x4d3a <APP_vWriteStringManyTimesLCD+0x108>
    4d1c:	80 e9       	ldi	r24, 0x90	; 144
    4d1e:	91 e0       	ldi	r25, 0x01	; 1
    4d20:	9a 8b       	std	Y+18, r25	; 0x12
    4d22:	89 8b       	std	Y+17, r24	; 0x11
    4d24:	89 89       	ldd	r24, Y+17	; 0x11
    4d26:	9a 89       	ldd	r25, Y+18	; 0x12
    4d28:	01 97       	sbiw	r24, 0x01	; 1
    4d2a:	f1 f7       	brne	.-4      	; 0x4d28 <APP_vWriteStringManyTimesLCD+0xf6>
    4d2c:	9a 8b       	std	Y+18, r25	; 0x12
    4d2e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d30:	8b 89       	ldd	r24, Y+19	; 0x13
    4d32:	9c 89       	ldd	r25, Y+20	; 0x14
    4d34:	01 97       	sbiw	r24, 0x01	; 1
    4d36:	9c 8b       	std	Y+20, r25	; 0x14
    4d38:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d3a:	8b 89       	ldd	r24, Y+19	; 0x13
    4d3c:	9c 89       	ldd	r25, Y+20	; 0x14
    4d3e:	00 97       	sbiw	r24, 0x00	; 0
    4d40:	69 f7       	brne	.-38     	; 0x4d1c <APP_vWriteStringManyTimesLCD+0xea>
    4d42:	14 c0       	rjmp	.+40     	; 0x4d6c <APP_vWriteStringManyTimesLCD+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d44:	6d 89       	ldd	r22, Y+21	; 0x15
    4d46:	7e 89       	ldd	r23, Y+22	; 0x16
    4d48:	8f 89       	ldd	r24, Y+23	; 0x17
    4d4a:	98 8d       	ldd	r25, Y+24	; 0x18
    4d4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d50:	dc 01       	movw	r26, r24
    4d52:	cb 01       	movw	r24, r22
    4d54:	9c 8b       	std	Y+20, r25	; 0x14
    4d56:	8b 8b       	std	Y+19, r24	; 0x13
    4d58:	8b 89       	ldd	r24, Y+19	; 0x13
    4d5a:	9c 89       	ldd	r25, Y+20	; 0x14
    4d5c:	98 8b       	std	Y+16, r25	; 0x10
    4d5e:	8f 87       	std	Y+15, r24	; 0x0f
    4d60:	8f 85       	ldd	r24, Y+15	; 0x0f
    4d62:	98 89       	ldd	r25, Y+16	; 0x10
    4d64:	01 97       	sbiw	r24, 0x01	; 1
    4d66:	f1 f7       	brne	.-4      	; 0x4d64 <APP_vWriteStringManyTimesLCD+0x132>
    4d68:	98 8b       	std	Y+16, r25	; 0x10
    4d6a:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(250);
		LCD_vClear();
    4d6c:	0e 94 7f 20 	call	0x40fe	; 0x40fe <LCD_vClear>
}
//-----------------
void APP_vWriteStringManyTimesLCD(u8 *Loc_u8Array,u8 Loc_u8size){
	LCD_vInit();
	u8 i;
	for(i=0;i<=((16/Loc_u8size));i++){
    4d70:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4d72:	8f 5f       	subi	r24, 0xFF	; 255
    4d74:	8d 8f       	std	Y+29, r24	; 0x1d
    4d76:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4d78:	e8 2f       	mov	r30, r24
    4d7a:	f0 e0       	ldi	r31, 0x00	; 0
    4d7c:	88 a1       	ldd	r24, Y+32	; 0x20
    4d7e:	28 2f       	mov	r18, r24
    4d80:	30 e0       	ldi	r19, 0x00	; 0
    4d82:	80 e1       	ldi	r24, 0x10	; 16
    4d84:	90 e0       	ldi	r25, 0x00	; 0
    4d86:	b9 01       	movw	r22, r18
    4d88:	0e 94 ea 35 	call	0x6bd4	; 0x6bd4 <__divmodhi4>
    4d8c:	cb 01       	movw	r24, r22
    4d8e:	8e 17       	cp	r24, r30
    4d90:	9f 07       	cpc	r25, r31
    4d92:	0c f0       	brlt	.+2      	; 0x4d96 <APP_vWriteStringManyTimesLCD+0x164>
    4d94:	5f cf       	rjmp	.-322    	; 0x4c54 <APP_vWriteStringManyTimesLCD+0x22>
		LCD_vGoTo(LineOne,((Loc_u8size-1)*i));
		LCD_vWriteString(Loc_u8Array);
		_delay_ms(250);
		LCD_vClear();
	}
	for(i=0;i<=((16/Loc_u8size));i++){
    4d96:	1d 8e       	std	Y+29, r1	; 0x1d
    4d98:	91 c0       	rjmp	.+290    	; 0x4ebc <APP_vWriteStringManyTimesLCD+0x28a>
		LCD_vGoTo(LineTwo,((Loc_u8size-1)*i));
    4d9a:	88 a1       	ldd	r24, Y+32	; 0x20
    4d9c:	88 2f       	mov	r24, r24
    4d9e:	90 e0       	ldi	r25, 0x00	; 0
    4da0:	9c 01       	movw	r18, r24
    4da2:	21 50       	subi	r18, 0x01	; 1
    4da4:	30 40       	sbci	r19, 0x00	; 0
    4da6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4da8:	88 2f       	mov	r24, r24
    4daa:	90 e0       	ldi	r25, 0x00	; 0
    4dac:	ac 01       	movw	r20, r24
    4dae:	24 9f       	mul	r18, r20
    4db0:	c0 01       	movw	r24, r0
    4db2:	25 9f       	mul	r18, r21
    4db4:	90 0d       	add	r25, r0
    4db6:	34 9f       	mul	r19, r20
    4db8:	90 0d       	add	r25, r0
    4dba:	11 24       	eor	r1, r1
    4dbc:	98 2f       	mov	r25, r24
    4dbe:	80 ec       	ldi	r24, 0xC0	; 192
    4dc0:	69 2f       	mov	r22, r25
    4dc2:	0e 94 6e 20 	call	0x40dc	; 0x40dc <LCD_vGoTo>
		LCD_vWriteString(Loc_u8Array);
    4dc6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4dc8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4dca:	0e 94 07 21 	call	0x420e	; 0x420e <LCD_vWriteString>
    4dce:	80 e0       	ldi	r24, 0x00	; 0
    4dd0:	90 e0       	ldi	r25, 0x00	; 0
    4dd2:	aa e7       	ldi	r26, 0x7A	; 122
    4dd4:	b3 e4       	ldi	r27, 0x43	; 67
    4dd6:	8b 87       	std	Y+11, r24	; 0x0b
    4dd8:	9c 87       	std	Y+12, r25	; 0x0c
    4dda:	ad 87       	std	Y+13, r26	; 0x0d
    4ddc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4dde:	6b 85       	ldd	r22, Y+11	; 0x0b
    4de0:	7c 85       	ldd	r23, Y+12	; 0x0c
    4de2:	8d 85       	ldd	r24, Y+13	; 0x0d
    4de4:	9e 85       	ldd	r25, Y+14	; 0x0e
    4de6:	20 e0       	ldi	r18, 0x00	; 0
    4de8:	30 e0       	ldi	r19, 0x00	; 0
    4dea:	4a e7       	ldi	r20, 0x7A	; 122
    4dec:	55 e4       	ldi	r21, 0x45	; 69
    4dee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4df2:	dc 01       	movw	r26, r24
    4df4:	cb 01       	movw	r24, r22
    4df6:	8f 83       	std	Y+7, r24	; 0x07
    4df8:	98 87       	std	Y+8, r25	; 0x08
    4dfa:	a9 87       	std	Y+9, r26	; 0x09
    4dfc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4dfe:	6f 81       	ldd	r22, Y+7	; 0x07
    4e00:	78 85       	ldd	r23, Y+8	; 0x08
    4e02:	89 85       	ldd	r24, Y+9	; 0x09
    4e04:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e06:	20 e0       	ldi	r18, 0x00	; 0
    4e08:	30 e0       	ldi	r19, 0x00	; 0
    4e0a:	40 e8       	ldi	r20, 0x80	; 128
    4e0c:	5f e3       	ldi	r21, 0x3F	; 63
    4e0e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4e12:	88 23       	and	r24, r24
    4e14:	2c f4       	brge	.+10     	; 0x4e20 <APP_vWriteStringManyTimesLCD+0x1ee>
		__ticks = 1;
    4e16:	81 e0       	ldi	r24, 0x01	; 1
    4e18:	90 e0       	ldi	r25, 0x00	; 0
    4e1a:	9e 83       	std	Y+6, r25	; 0x06
    4e1c:	8d 83       	std	Y+5, r24	; 0x05
    4e1e:	3f c0       	rjmp	.+126    	; 0x4e9e <APP_vWriteStringManyTimesLCD+0x26c>
	else if (__tmp > 65535)
    4e20:	6f 81       	ldd	r22, Y+7	; 0x07
    4e22:	78 85       	ldd	r23, Y+8	; 0x08
    4e24:	89 85       	ldd	r24, Y+9	; 0x09
    4e26:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e28:	20 e0       	ldi	r18, 0x00	; 0
    4e2a:	3f ef       	ldi	r19, 0xFF	; 255
    4e2c:	4f e7       	ldi	r20, 0x7F	; 127
    4e2e:	57 e4       	ldi	r21, 0x47	; 71
    4e30:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4e34:	18 16       	cp	r1, r24
    4e36:	4c f5       	brge	.+82     	; 0x4e8a <APP_vWriteStringManyTimesLCD+0x258>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e38:	6b 85       	ldd	r22, Y+11	; 0x0b
    4e3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    4e3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e40:	20 e0       	ldi	r18, 0x00	; 0
    4e42:	30 e0       	ldi	r19, 0x00	; 0
    4e44:	40 e2       	ldi	r20, 0x20	; 32
    4e46:	51 e4       	ldi	r21, 0x41	; 65
    4e48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e4c:	dc 01       	movw	r26, r24
    4e4e:	cb 01       	movw	r24, r22
    4e50:	bc 01       	movw	r22, r24
    4e52:	cd 01       	movw	r24, r26
    4e54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e58:	dc 01       	movw	r26, r24
    4e5a:	cb 01       	movw	r24, r22
    4e5c:	9e 83       	std	Y+6, r25	; 0x06
    4e5e:	8d 83       	std	Y+5, r24	; 0x05
    4e60:	0f c0       	rjmp	.+30     	; 0x4e80 <APP_vWriteStringManyTimesLCD+0x24e>
    4e62:	80 e9       	ldi	r24, 0x90	; 144
    4e64:	91 e0       	ldi	r25, 0x01	; 1
    4e66:	9c 83       	std	Y+4, r25	; 0x04
    4e68:	8b 83       	std	Y+3, r24	; 0x03
    4e6a:	8b 81       	ldd	r24, Y+3	; 0x03
    4e6c:	9c 81       	ldd	r25, Y+4	; 0x04
    4e6e:	01 97       	sbiw	r24, 0x01	; 1
    4e70:	f1 f7       	brne	.-4      	; 0x4e6e <APP_vWriteStringManyTimesLCD+0x23c>
    4e72:	9c 83       	std	Y+4, r25	; 0x04
    4e74:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e76:	8d 81       	ldd	r24, Y+5	; 0x05
    4e78:	9e 81       	ldd	r25, Y+6	; 0x06
    4e7a:	01 97       	sbiw	r24, 0x01	; 1
    4e7c:	9e 83       	std	Y+6, r25	; 0x06
    4e7e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e80:	8d 81       	ldd	r24, Y+5	; 0x05
    4e82:	9e 81       	ldd	r25, Y+6	; 0x06
    4e84:	00 97       	sbiw	r24, 0x00	; 0
    4e86:	69 f7       	brne	.-38     	; 0x4e62 <APP_vWriteStringManyTimesLCD+0x230>
    4e88:	14 c0       	rjmp	.+40     	; 0x4eb2 <APP_vWriteStringManyTimesLCD+0x280>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e8a:	6f 81       	ldd	r22, Y+7	; 0x07
    4e8c:	78 85       	ldd	r23, Y+8	; 0x08
    4e8e:	89 85       	ldd	r24, Y+9	; 0x09
    4e90:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e96:	dc 01       	movw	r26, r24
    4e98:	cb 01       	movw	r24, r22
    4e9a:	9e 83       	std	Y+6, r25	; 0x06
    4e9c:	8d 83       	std	Y+5, r24	; 0x05
    4e9e:	8d 81       	ldd	r24, Y+5	; 0x05
    4ea0:	9e 81       	ldd	r25, Y+6	; 0x06
    4ea2:	9a 83       	std	Y+2, r25	; 0x02
    4ea4:	89 83       	std	Y+1, r24	; 0x01
    4ea6:	89 81       	ldd	r24, Y+1	; 0x01
    4ea8:	9a 81       	ldd	r25, Y+2	; 0x02
    4eaa:	01 97       	sbiw	r24, 0x01	; 1
    4eac:	f1 f7       	brne	.-4      	; 0x4eaa <APP_vWriteStringManyTimesLCD+0x278>
    4eae:	9a 83       	std	Y+2, r25	; 0x02
    4eb0:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(250);
		LCD_vClear();
    4eb2:	0e 94 7f 20 	call	0x40fe	; 0x40fe <LCD_vClear>
		LCD_vGoTo(LineOne,((Loc_u8size-1)*i));
		LCD_vWriteString(Loc_u8Array);
		_delay_ms(250);
		LCD_vClear();
	}
	for(i=0;i<=((16/Loc_u8size));i++){
    4eb6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4eb8:	8f 5f       	subi	r24, 0xFF	; 255
    4eba:	8d 8f       	std	Y+29, r24	; 0x1d
    4ebc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4ebe:	e8 2f       	mov	r30, r24
    4ec0:	f0 e0       	ldi	r31, 0x00	; 0
    4ec2:	88 a1       	ldd	r24, Y+32	; 0x20
    4ec4:	28 2f       	mov	r18, r24
    4ec6:	30 e0       	ldi	r19, 0x00	; 0
    4ec8:	80 e1       	ldi	r24, 0x10	; 16
    4eca:	90 e0       	ldi	r25, 0x00	; 0
    4ecc:	b9 01       	movw	r22, r18
    4ece:	0e 94 ea 35 	call	0x6bd4	; 0x6bd4 <__divmodhi4>
    4ed2:	cb 01       	movw	r24, r22
    4ed4:	8e 17       	cp	r24, r30
    4ed6:	9f 07       	cpc	r25, r31
    4ed8:	0c f0       	brlt	.+2      	; 0x4edc <APP_vWriteStringManyTimesLCD+0x2aa>
    4eda:	5f cf       	rjmp	.-322    	; 0x4d9a <APP_vWriteStringManyTimesLCD+0x168>
		LCD_vGoTo(LineTwo,((Loc_u8size-1)*i));
		LCD_vWriteString(Loc_u8Array);
		_delay_ms(250);
		LCD_vClear();
	}
}
    4edc:	a0 96       	adiw	r28, 0x20	; 32
    4ede:	0f b6       	in	r0, 0x3f	; 63
    4ee0:	f8 94       	cli
    4ee2:	de bf       	out	0x3e, r29	; 62
    4ee4:	0f be       	out	0x3f, r0	; 63
    4ee6:	cd bf       	out	0x3d, r28	; 61
    4ee8:	cf 91       	pop	r28
    4eea:	df 91       	pop	r29
    4eec:	08 95       	ret

00004eee <APP_vToString>:
//-----------------
void APP_vToString(u8 str[], u16 num){
    4eee:	df 93       	push	r29
    4ef0:	cf 93       	push	r28
    4ef2:	cd b7       	in	r28, 0x3d	; 61
    4ef4:	de b7       	in	r29, 0x3e	; 62
    4ef6:	2a 97       	sbiw	r28, 0x0a	; 10
    4ef8:	0f b6       	in	r0, 0x3f	; 63
    4efa:	f8 94       	cli
    4efc:	de bf       	out	0x3e, r29	; 62
    4efe:	0f be       	out	0x3f, r0	; 63
    4f00:	cd bf       	out	0x3d, r28	; 61
    4f02:	98 87       	std	Y+8, r25	; 0x08
    4f04:	8f 83       	std	Y+7, r24	; 0x07
    4f06:	7a 87       	std	Y+10, r23	; 0x0a
    4f08:	69 87       	std	Y+9, r22	; 0x09
	u8 i, len = 0 ;
    4f0a:	1d 82       	std	Y+5, r1	; 0x05
	u16 n,rem;
	n = num;
    4f0c:	89 85       	ldd	r24, Y+9	; 0x09
    4f0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f10:	9c 83       	std	Y+4, r25	; 0x04
    4f12:	8b 83       	std	Y+3, r24	; 0x03
    4f14:	0d c0       	rjmp	.+26     	; 0x4f30 <APP_vToString+0x42>
	while (n != 0)
	{
		len++;
    4f16:	8d 81       	ldd	r24, Y+5	; 0x05
    4f18:	8f 5f       	subi	r24, 0xFF	; 255
    4f1a:	8d 83       	std	Y+5, r24	; 0x05
		n /= 10;
    4f1c:	8b 81       	ldd	r24, Y+3	; 0x03
    4f1e:	9c 81       	ldd	r25, Y+4	; 0x04
    4f20:	2a e0       	ldi	r18, 0x0A	; 10
    4f22:	30 e0       	ldi	r19, 0x00	; 0
    4f24:	b9 01       	movw	r22, r18
    4f26:	0e 94 d6 35 	call	0x6bac	; 0x6bac <__udivmodhi4>
    4f2a:	cb 01       	movw	r24, r22
    4f2c:	9c 83       	std	Y+4, r25	; 0x04
    4f2e:	8b 83       	std	Y+3, r24	; 0x03
//-----------------
void APP_vToString(u8 str[], u16 num){
	u8 i, len = 0 ;
	u16 n,rem;
	n = num;
	while (n != 0)
    4f30:	8b 81       	ldd	r24, Y+3	; 0x03
    4f32:	9c 81       	ldd	r25, Y+4	; 0x04
    4f34:	00 97       	sbiw	r24, 0x00	; 0
    4f36:	79 f7       	brne	.-34     	; 0x4f16 <APP_vToString+0x28>
	{
		len++;
		n /= 10;
	}
	for (i = 0; i < len; i++)
    4f38:	1e 82       	std	Y+6, r1	; 0x06
    4f3a:	29 c0       	rjmp	.+82     	; 0x4f8e <APP_vToString+0xa0>
	{
		rem = num % 10;
    4f3c:	89 85       	ldd	r24, Y+9	; 0x09
    4f3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f40:	2a e0       	ldi	r18, 0x0A	; 10
    4f42:	30 e0       	ldi	r19, 0x00	; 0
    4f44:	b9 01       	movw	r22, r18
    4f46:	0e 94 d6 35 	call	0x6bac	; 0x6bac <__udivmodhi4>
    4f4a:	9a 83       	std	Y+2, r25	; 0x02
    4f4c:	89 83       	std	Y+1, r24	; 0x01
		num = num / 10;
    4f4e:	89 85       	ldd	r24, Y+9	; 0x09
    4f50:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f52:	2a e0       	ldi	r18, 0x0A	; 10
    4f54:	30 e0       	ldi	r19, 0x00	; 0
    4f56:	b9 01       	movw	r22, r18
    4f58:	0e 94 d6 35 	call	0x6bac	; 0x6bac <__udivmodhi4>
    4f5c:	cb 01       	movw	r24, r22
    4f5e:	9a 87       	std	Y+10, r25	; 0x0a
    4f60:	89 87       	std	Y+9, r24	; 0x09
		str[len - (i + 1)] = rem + '0';
    4f62:	8d 81       	ldd	r24, Y+5	; 0x05
    4f64:	28 2f       	mov	r18, r24
    4f66:	30 e0       	ldi	r19, 0x00	; 0
    4f68:	8e 81       	ldd	r24, Y+6	; 0x06
    4f6a:	88 2f       	mov	r24, r24
    4f6c:	90 e0       	ldi	r25, 0x00	; 0
    4f6e:	80 95       	com	r24
    4f70:	90 95       	com	r25
    4f72:	82 0f       	add	r24, r18
    4f74:	93 1f       	adc	r25, r19
    4f76:	9c 01       	movw	r18, r24
    4f78:	8f 81       	ldd	r24, Y+7	; 0x07
    4f7a:	98 85       	ldd	r25, Y+8	; 0x08
    4f7c:	fc 01       	movw	r30, r24
    4f7e:	e2 0f       	add	r30, r18
    4f80:	f3 1f       	adc	r31, r19
    4f82:	89 81       	ldd	r24, Y+1	; 0x01
    4f84:	80 5d       	subi	r24, 0xD0	; 208
    4f86:	80 83       	st	Z, r24
	while (n != 0)
	{
		len++;
		n /= 10;
	}
	for (i = 0; i < len; i++)
    4f88:	8e 81       	ldd	r24, Y+6	; 0x06
    4f8a:	8f 5f       	subi	r24, 0xFF	; 255
    4f8c:	8e 83       	std	Y+6, r24	; 0x06
    4f8e:	9e 81       	ldd	r25, Y+6	; 0x06
    4f90:	8d 81       	ldd	r24, Y+5	; 0x05
    4f92:	98 17       	cp	r25, r24
    4f94:	98 f2       	brcs	.-90     	; 0x4f3c <APP_vToString+0x4e>
	{
		rem = num % 10;
		num = num / 10;
		str[len - (i + 1)] = rem + '0';
	}
	str[len] = '\0';
    4f96:	8d 81       	ldd	r24, Y+5	; 0x05
    4f98:	28 2f       	mov	r18, r24
    4f9a:	30 e0       	ldi	r19, 0x00	; 0
    4f9c:	8f 81       	ldd	r24, Y+7	; 0x07
    4f9e:	98 85       	ldd	r25, Y+8	; 0x08
    4fa0:	fc 01       	movw	r30, r24
    4fa2:	e2 0f       	add	r30, r18
    4fa4:	f3 1f       	adc	r31, r19
    4fa6:	10 82       	st	Z, r1
}
    4fa8:	2a 96       	adiw	r28, 0x0a	; 10
    4faa:	0f b6       	in	r0, 0x3f	; 63
    4fac:	f8 94       	cli
    4fae:	de bf       	out	0x3e, r29	; 62
    4fb0:	0f be       	out	0x3f, r0	; 63
    4fb2:	cd bf       	out	0x3d, r28	; 61
    4fb4:	cf 91       	pop	r28
    4fb6:	df 91       	pop	r29
    4fb8:	08 95       	ret

00004fba <APP_vCalculatorLCD>:
//-----------------
void APP_vCalculatorLCD(){
    4fba:	0f 93       	push	r16
    4fbc:	1f 93       	push	r17
    4fbe:	df 93       	push	r29
    4fc0:	cf 93       	push	r28
    4fc2:	cd b7       	in	r28, 0x3d	; 61
    4fc4:	de b7       	in	r29, 0x3e	; 62
    4fc6:	c8 57       	subi	r28, 0x78	; 120
    4fc8:	d0 40       	sbci	r29, 0x00	; 0
    4fca:	0f b6       	in	r0, 0x3f	; 63
    4fcc:	f8 94       	cli
    4fce:	de bf       	out	0x3e, r29	; 62
    4fd0:	0f be       	out	0x3f, r0	; 63
    4fd2:	cd bf       	out	0x3d, r28	; 61
	//-- while(!=)
	u8 Loc_u8Num1=0,Loc_u8Num2,Loc_u8Symbol1,Loc_u8Symbol2,Loc_u8sum;
    4fd4:	fe 01       	movw	r30, r28
    4fd6:	eb 58       	subi	r30, 0x8B	; 139
    4fd8:	ff 4f       	sbci	r31, 0xFF	; 255
    4fda:	10 82       	st	Z, r1
	KAYPAD_vInit();
    4fdc:	0e 94 88 21 	call	0x4310	; 0x4310 <KAYPAD_vInit>
//Busy Wait
	while(1){
		Loc_u8Num1=KAYPAD_u8GetKey();
    4fe0:	0e 94 97 21 	call	0x432e	; 0x432e <KAYPAD_u8GetKey>
    4fe4:	fe 01       	movw	r30, r28
    4fe6:	eb 58       	subi	r30, 0x8B	; 139
    4fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    4fea:	80 83       	st	Z, r24
    4fec:	fe 01       	movw	r30, r28
    4fee:	e3 59       	subi	r30, 0x93	; 147
    4ff0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ff2:	80 e0       	ldi	r24, 0x00	; 0
    4ff4:	90 e0       	ldi	r25, 0x00	; 0
    4ff6:	a8 e4       	ldi	r26, 0x48	; 72
    4ff8:	b2 e4       	ldi	r27, 0x42	; 66
    4ffa:	80 83       	st	Z, r24
    4ffc:	91 83       	std	Z+1, r25	; 0x01
    4ffe:	a2 83       	std	Z+2, r26	; 0x02
    5000:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5002:	8e 01       	movw	r16, r28
    5004:	07 59       	subi	r16, 0x97	; 151
    5006:	1f 4f       	sbci	r17, 0xFF	; 255
    5008:	fe 01       	movw	r30, r28
    500a:	e3 59       	subi	r30, 0x93	; 147
    500c:	ff 4f       	sbci	r31, 0xFF	; 255
    500e:	60 81       	ld	r22, Z
    5010:	71 81       	ldd	r23, Z+1	; 0x01
    5012:	82 81       	ldd	r24, Z+2	; 0x02
    5014:	93 81       	ldd	r25, Z+3	; 0x03
    5016:	20 e0       	ldi	r18, 0x00	; 0
    5018:	30 e0       	ldi	r19, 0x00	; 0
    501a:	4a e7       	ldi	r20, 0x7A	; 122
    501c:	55 e4       	ldi	r21, 0x45	; 69
    501e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5022:	dc 01       	movw	r26, r24
    5024:	cb 01       	movw	r24, r22
    5026:	f8 01       	movw	r30, r16
    5028:	80 83       	st	Z, r24
    502a:	91 83       	std	Z+1, r25	; 0x01
    502c:	a2 83       	std	Z+2, r26	; 0x02
    502e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5030:	fe 01       	movw	r30, r28
    5032:	e7 59       	subi	r30, 0x97	; 151
    5034:	ff 4f       	sbci	r31, 0xFF	; 255
    5036:	60 81       	ld	r22, Z
    5038:	71 81       	ldd	r23, Z+1	; 0x01
    503a:	82 81       	ldd	r24, Z+2	; 0x02
    503c:	93 81       	ldd	r25, Z+3	; 0x03
    503e:	20 e0       	ldi	r18, 0x00	; 0
    5040:	30 e0       	ldi	r19, 0x00	; 0
    5042:	40 e8       	ldi	r20, 0x80	; 128
    5044:	5f e3       	ldi	r21, 0x3F	; 63
    5046:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    504a:	88 23       	and	r24, r24
    504c:	44 f4       	brge	.+16     	; 0x505e <APP_vCalculatorLCD+0xa4>
		__ticks = 1;
    504e:	fe 01       	movw	r30, r28
    5050:	e9 59       	subi	r30, 0x99	; 153
    5052:	ff 4f       	sbci	r31, 0xFF	; 255
    5054:	81 e0       	ldi	r24, 0x01	; 1
    5056:	90 e0       	ldi	r25, 0x00	; 0
    5058:	91 83       	std	Z+1, r25	; 0x01
    505a:	80 83       	st	Z, r24
    505c:	64 c0       	rjmp	.+200    	; 0x5126 <APP_vCalculatorLCD+0x16c>
	else if (__tmp > 65535)
    505e:	fe 01       	movw	r30, r28
    5060:	e7 59       	subi	r30, 0x97	; 151
    5062:	ff 4f       	sbci	r31, 0xFF	; 255
    5064:	60 81       	ld	r22, Z
    5066:	71 81       	ldd	r23, Z+1	; 0x01
    5068:	82 81       	ldd	r24, Z+2	; 0x02
    506a:	93 81       	ldd	r25, Z+3	; 0x03
    506c:	20 e0       	ldi	r18, 0x00	; 0
    506e:	3f ef       	ldi	r19, 0xFF	; 255
    5070:	4f e7       	ldi	r20, 0x7F	; 127
    5072:	57 e4       	ldi	r21, 0x47	; 71
    5074:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5078:	18 16       	cp	r1, r24
    507a:	0c f0       	brlt	.+2      	; 0x507e <APP_vCalculatorLCD+0xc4>
    507c:	43 c0       	rjmp	.+134    	; 0x5104 <APP_vCalculatorLCD+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    507e:	fe 01       	movw	r30, r28
    5080:	e3 59       	subi	r30, 0x93	; 147
    5082:	ff 4f       	sbci	r31, 0xFF	; 255
    5084:	60 81       	ld	r22, Z
    5086:	71 81       	ldd	r23, Z+1	; 0x01
    5088:	82 81       	ldd	r24, Z+2	; 0x02
    508a:	93 81       	ldd	r25, Z+3	; 0x03
    508c:	20 e0       	ldi	r18, 0x00	; 0
    508e:	30 e0       	ldi	r19, 0x00	; 0
    5090:	40 e2       	ldi	r20, 0x20	; 32
    5092:	51 e4       	ldi	r21, 0x41	; 65
    5094:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5098:	dc 01       	movw	r26, r24
    509a:	cb 01       	movw	r24, r22
    509c:	8e 01       	movw	r16, r28
    509e:	09 59       	subi	r16, 0x99	; 153
    50a0:	1f 4f       	sbci	r17, 0xFF	; 255
    50a2:	bc 01       	movw	r22, r24
    50a4:	cd 01       	movw	r24, r26
    50a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50aa:	dc 01       	movw	r26, r24
    50ac:	cb 01       	movw	r24, r22
    50ae:	f8 01       	movw	r30, r16
    50b0:	91 83       	std	Z+1, r25	; 0x01
    50b2:	80 83       	st	Z, r24
    50b4:	1f c0       	rjmp	.+62     	; 0x50f4 <APP_vCalculatorLCD+0x13a>
    50b6:	fe 01       	movw	r30, r28
    50b8:	eb 59       	subi	r30, 0x9B	; 155
    50ba:	ff 4f       	sbci	r31, 0xFF	; 255
    50bc:	80 e9       	ldi	r24, 0x90	; 144
    50be:	91 e0       	ldi	r25, 0x01	; 1
    50c0:	91 83       	std	Z+1, r25	; 0x01
    50c2:	80 83       	st	Z, r24
    50c4:	fe 01       	movw	r30, r28
    50c6:	eb 59       	subi	r30, 0x9B	; 155
    50c8:	ff 4f       	sbci	r31, 0xFF	; 255
    50ca:	80 81       	ld	r24, Z
    50cc:	91 81       	ldd	r25, Z+1	; 0x01
    50ce:	01 97       	sbiw	r24, 0x01	; 1
    50d0:	f1 f7       	brne	.-4      	; 0x50ce <APP_vCalculatorLCD+0x114>
    50d2:	fe 01       	movw	r30, r28
    50d4:	eb 59       	subi	r30, 0x9B	; 155
    50d6:	ff 4f       	sbci	r31, 0xFF	; 255
    50d8:	91 83       	std	Z+1, r25	; 0x01
    50da:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    50dc:	de 01       	movw	r26, r28
    50de:	a9 59       	subi	r26, 0x99	; 153
    50e0:	bf 4f       	sbci	r27, 0xFF	; 255
    50e2:	fe 01       	movw	r30, r28
    50e4:	e9 59       	subi	r30, 0x99	; 153
    50e6:	ff 4f       	sbci	r31, 0xFF	; 255
    50e8:	80 81       	ld	r24, Z
    50ea:	91 81       	ldd	r25, Z+1	; 0x01
    50ec:	01 97       	sbiw	r24, 0x01	; 1
    50ee:	11 96       	adiw	r26, 0x01	; 1
    50f0:	9c 93       	st	X, r25
    50f2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    50f4:	fe 01       	movw	r30, r28
    50f6:	e9 59       	subi	r30, 0x99	; 153
    50f8:	ff 4f       	sbci	r31, 0xFF	; 255
    50fa:	80 81       	ld	r24, Z
    50fc:	91 81       	ldd	r25, Z+1	; 0x01
    50fe:	00 97       	sbiw	r24, 0x00	; 0
    5100:	d1 f6       	brne	.-76     	; 0x50b6 <APP_vCalculatorLCD+0xfc>
    5102:	28 c0       	rjmp	.+80     	; 0x5154 <APP_vCalculatorLCD+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5104:	8e 01       	movw	r16, r28
    5106:	09 59       	subi	r16, 0x99	; 153
    5108:	1f 4f       	sbci	r17, 0xFF	; 255
    510a:	fe 01       	movw	r30, r28
    510c:	e7 59       	subi	r30, 0x97	; 151
    510e:	ff 4f       	sbci	r31, 0xFF	; 255
    5110:	60 81       	ld	r22, Z
    5112:	71 81       	ldd	r23, Z+1	; 0x01
    5114:	82 81       	ldd	r24, Z+2	; 0x02
    5116:	93 81       	ldd	r25, Z+3	; 0x03
    5118:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    511c:	dc 01       	movw	r26, r24
    511e:	cb 01       	movw	r24, r22
    5120:	f8 01       	movw	r30, r16
    5122:	91 83       	std	Z+1, r25	; 0x01
    5124:	80 83       	st	Z, r24
    5126:	de 01       	movw	r26, r28
    5128:	ad 59       	subi	r26, 0x9D	; 157
    512a:	bf 4f       	sbci	r27, 0xFF	; 255
    512c:	fe 01       	movw	r30, r28
    512e:	e9 59       	subi	r30, 0x99	; 153
    5130:	ff 4f       	sbci	r31, 0xFF	; 255
    5132:	80 81       	ld	r24, Z
    5134:	91 81       	ldd	r25, Z+1	; 0x01
    5136:	11 96       	adiw	r26, 0x01	; 1
    5138:	9c 93       	st	X, r25
    513a:	8e 93       	st	-X, r24
    513c:	fe 01       	movw	r30, r28
    513e:	ed 59       	subi	r30, 0x9D	; 157
    5140:	ff 4f       	sbci	r31, 0xFF	; 255
    5142:	80 81       	ld	r24, Z
    5144:	91 81       	ldd	r25, Z+1	; 0x01
    5146:	01 97       	sbiw	r24, 0x01	; 1
    5148:	f1 f7       	brne	.-4      	; 0x5146 <APP_vCalculatorLCD+0x18c>
    514a:	fe 01       	movw	r30, r28
    514c:	ed 59       	subi	r30, 0x9D	; 157
    514e:	ff 4f       	sbci	r31, 0xFF	; 255
    5150:	91 83       	std	Z+1, r25	; 0x01
    5152:	80 83       	st	Z, r24
		_delay_ms(50);
		if(Loc_u8Num1!=0xff){
    5154:	fe 01       	movw	r30, r28
    5156:	eb 58       	subi	r30, 0x8B	; 139
    5158:	ff 4f       	sbci	r31, 0xFF	; 255
    515a:	80 81       	ld	r24, Z
    515c:	8f 3f       	cpi	r24, 0xFF	; 255
    515e:	09 f4       	brne	.+2      	; 0x5162 <APP_vCalculatorLCD+0x1a8>
    5160:	3f cf       	rjmp	.-386    	; 0x4fe0 <APP_vCalculatorLCD+0x26>
			LCD_vInit();
    5162:	0e 94 a8 1a 	call	0x3550	; 0x3550 <LCD_vInit>
			LCD_vWriteCharacter(Loc_u8Num1+48);
    5166:	fe 01       	movw	r30, r28
    5168:	eb 58       	subi	r30, 0x8B	; 139
    516a:	ff 4f       	sbci	r31, 0xFF	; 255
    516c:	80 81       	ld	r24, Z
    516e:	80 5d       	subi	r24, 0xD0	; 208
    5170:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <LCD_vWriteCharacter>
    5174:	fe 01       	movw	r30, r28
    5176:	e1 5a       	subi	r30, 0xA1	; 161
    5178:	ff 4f       	sbci	r31, 0xFF	; 255
    517a:	80 e0       	ldi	r24, 0x00	; 0
    517c:	90 e0       	ldi	r25, 0x00	; 0
    517e:	a8 e4       	ldi	r26, 0x48	; 72
    5180:	b2 e4       	ldi	r27, 0x42	; 66
    5182:	80 83       	st	Z, r24
    5184:	91 83       	std	Z+1, r25	; 0x01
    5186:	a2 83       	std	Z+2, r26	; 0x02
    5188:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    518a:	8e 01       	movw	r16, r28
    518c:	05 5a       	subi	r16, 0xA5	; 165
    518e:	1f 4f       	sbci	r17, 0xFF	; 255
    5190:	fe 01       	movw	r30, r28
    5192:	e1 5a       	subi	r30, 0xA1	; 161
    5194:	ff 4f       	sbci	r31, 0xFF	; 255
    5196:	60 81       	ld	r22, Z
    5198:	71 81       	ldd	r23, Z+1	; 0x01
    519a:	82 81       	ldd	r24, Z+2	; 0x02
    519c:	93 81       	ldd	r25, Z+3	; 0x03
    519e:	20 e0       	ldi	r18, 0x00	; 0
    51a0:	30 e0       	ldi	r19, 0x00	; 0
    51a2:	4a e7       	ldi	r20, 0x7A	; 122
    51a4:	55 e4       	ldi	r21, 0x45	; 69
    51a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    51aa:	dc 01       	movw	r26, r24
    51ac:	cb 01       	movw	r24, r22
    51ae:	f8 01       	movw	r30, r16
    51b0:	80 83       	st	Z, r24
    51b2:	91 83       	std	Z+1, r25	; 0x01
    51b4:	a2 83       	std	Z+2, r26	; 0x02
    51b6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    51b8:	fe 01       	movw	r30, r28
    51ba:	e5 5a       	subi	r30, 0xA5	; 165
    51bc:	ff 4f       	sbci	r31, 0xFF	; 255
    51be:	60 81       	ld	r22, Z
    51c0:	71 81       	ldd	r23, Z+1	; 0x01
    51c2:	82 81       	ldd	r24, Z+2	; 0x02
    51c4:	93 81       	ldd	r25, Z+3	; 0x03
    51c6:	20 e0       	ldi	r18, 0x00	; 0
    51c8:	30 e0       	ldi	r19, 0x00	; 0
    51ca:	40 e8       	ldi	r20, 0x80	; 128
    51cc:	5f e3       	ldi	r21, 0x3F	; 63
    51ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    51d2:	88 23       	and	r24, r24
    51d4:	44 f4       	brge	.+16     	; 0x51e6 <APP_vCalculatorLCD+0x22c>
		__ticks = 1;
    51d6:	fe 01       	movw	r30, r28
    51d8:	e7 5a       	subi	r30, 0xA7	; 167
    51da:	ff 4f       	sbci	r31, 0xFF	; 255
    51dc:	81 e0       	ldi	r24, 0x01	; 1
    51de:	90 e0       	ldi	r25, 0x00	; 0
    51e0:	91 83       	std	Z+1, r25	; 0x01
    51e2:	80 83       	st	Z, r24
    51e4:	64 c0       	rjmp	.+200    	; 0x52ae <APP_vCalculatorLCD+0x2f4>
	else if (__tmp > 65535)
    51e6:	fe 01       	movw	r30, r28
    51e8:	e5 5a       	subi	r30, 0xA5	; 165
    51ea:	ff 4f       	sbci	r31, 0xFF	; 255
    51ec:	60 81       	ld	r22, Z
    51ee:	71 81       	ldd	r23, Z+1	; 0x01
    51f0:	82 81       	ldd	r24, Z+2	; 0x02
    51f2:	93 81       	ldd	r25, Z+3	; 0x03
    51f4:	20 e0       	ldi	r18, 0x00	; 0
    51f6:	3f ef       	ldi	r19, 0xFF	; 255
    51f8:	4f e7       	ldi	r20, 0x7F	; 127
    51fa:	57 e4       	ldi	r21, 0x47	; 71
    51fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5200:	18 16       	cp	r1, r24
    5202:	0c f0       	brlt	.+2      	; 0x5206 <APP_vCalculatorLCD+0x24c>
    5204:	43 c0       	rjmp	.+134    	; 0x528c <APP_vCalculatorLCD+0x2d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5206:	fe 01       	movw	r30, r28
    5208:	e1 5a       	subi	r30, 0xA1	; 161
    520a:	ff 4f       	sbci	r31, 0xFF	; 255
    520c:	60 81       	ld	r22, Z
    520e:	71 81       	ldd	r23, Z+1	; 0x01
    5210:	82 81       	ldd	r24, Z+2	; 0x02
    5212:	93 81       	ldd	r25, Z+3	; 0x03
    5214:	20 e0       	ldi	r18, 0x00	; 0
    5216:	30 e0       	ldi	r19, 0x00	; 0
    5218:	40 e2       	ldi	r20, 0x20	; 32
    521a:	51 e4       	ldi	r21, 0x41	; 65
    521c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5220:	dc 01       	movw	r26, r24
    5222:	cb 01       	movw	r24, r22
    5224:	8e 01       	movw	r16, r28
    5226:	07 5a       	subi	r16, 0xA7	; 167
    5228:	1f 4f       	sbci	r17, 0xFF	; 255
    522a:	bc 01       	movw	r22, r24
    522c:	cd 01       	movw	r24, r26
    522e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5232:	dc 01       	movw	r26, r24
    5234:	cb 01       	movw	r24, r22
    5236:	f8 01       	movw	r30, r16
    5238:	91 83       	std	Z+1, r25	; 0x01
    523a:	80 83       	st	Z, r24
    523c:	1f c0       	rjmp	.+62     	; 0x527c <APP_vCalculatorLCD+0x2c2>
    523e:	fe 01       	movw	r30, r28
    5240:	e9 5a       	subi	r30, 0xA9	; 169
    5242:	ff 4f       	sbci	r31, 0xFF	; 255
    5244:	80 e9       	ldi	r24, 0x90	; 144
    5246:	91 e0       	ldi	r25, 0x01	; 1
    5248:	91 83       	std	Z+1, r25	; 0x01
    524a:	80 83       	st	Z, r24
    524c:	fe 01       	movw	r30, r28
    524e:	e9 5a       	subi	r30, 0xA9	; 169
    5250:	ff 4f       	sbci	r31, 0xFF	; 255
    5252:	80 81       	ld	r24, Z
    5254:	91 81       	ldd	r25, Z+1	; 0x01
    5256:	01 97       	sbiw	r24, 0x01	; 1
    5258:	f1 f7       	brne	.-4      	; 0x5256 <APP_vCalculatorLCD+0x29c>
    525a:	fe 01       	movw	r30, r28
    525c:	e9 5a       	subi	r30, 0xA9	; 169
    525e:	ff 4f       	sbci	r31, 0xFF	; 255
    5260:	91 83       	std	Z+1, r25	; 0x01
    5262:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5264:	de 01       	movw	r26, r28
    5266:	a7 5a       	subi	r26, 0xA7	; 167
    5268:	bf 4f       	sbci	r27, 0xFF	; 255
    526a:	fe 01       	movw	r30, r28
    526c:	e7 5a       	subi	r30, 0xA7	; 167
    526e:	ff 4f       	sbci	r31, 0xFF	; 255
    5270:	80 81       	ld	r24, Z
    5272:	91 81       	ldd	r25, Z+1	; 0x01
    5274:	01 97       	sbiw	r24, 0x01	; 1
    5276:	11 96       	adiw	r26, 0x01	; 1
    5278:	9c 93       	st	X, r25
    527a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    527c:	fe 01       	movw	r30, r28
    527e:	e7 5a       	subi	r30, 0xA7	; 167
    5280:	ff 4f       	sbci	r31, 0xFF	; 255
    5282:	80 81       	ld	r24, Z
    5284:	91 81       	ldd	r25, Z+1	; 0x01
    5286:	00 97       	sbiw	r24, 0x00	; 0
    5288:	d1 f6       	brne	.-76     	; 0x523e <APP_vCalculatorLCD+0x284>
    528a:	27 c0       	rjmp	.+78     	; 0x52da <APP_vCalculatorLCD+0x320>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    528c:	8e 01       	movw	r16, r28
    528e:	07 5a       	subi	r16, 0xA7	; 167
    5290:	1f 4f       	sbci	r17, 0xFF	; 255
    5292:	fe 01       	movw	r30, r28
    5294:	e5 5a       	subi	r30, 0xA5	; 165
    5296:	ff 4f       	sbci	r31, 0xFF	; 255
    5298:	60 81       	ld	r22, Z
    529a:	71 81       	ldd	r23, Z+1	; 0x01
    529c:	82 81       	ldd	r24, Z+2	; 0x02
    529e:	93 81       	ldd	r25, Z+3	; 0x03
    52a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52a4:	dc 01       	movw	r26, r24
    52a6:	cb 01       	movw	r24, r22
    52a8:	f8 01       	movw	r30, r16
    52aa:	91 83       	std	Z+1, r25	; 0x01
    52ac:	80 83       	st	Z, r24
    52ae:	de 01       	movw	r26, r28
    52b0:	ab 5a       	subi	r26, 0xAB	; 171
    52b2:	bf 4f       	sbci	r27, 0xFF	; 255
    52b4:	fe 01       	movw	r30, r28
    52b6:	e7 5a       	subi	r30, 0xA7	; 167
    52b8:	ff 4f       	sbci	r31, 0xFF	; 255
    52ba:	80 81       	ld	r24, Z
    52bc:	91 81       	ldd	r25, Z+1	; 0x01
    52be:	8d 93       	st	X+, r24
    52c0:	9c 93       	st	X, r25
    52c2:	fe 01       	movw	r30, r28
    52c4:	eb 5a       	subi	r30, 0xAB	; 171
    52c6:	ff 4f       	sbci	r31, 0xFF	; 255
    52c8:	80 81       	ld	r24, Z
    52ca:	91 81       	ldd	r25, Z+1	; 0x01
    52cc:	01 97       	sbiw	r24, 0x01	; 1
    52ce:	f1 f7       	brne	.-4      	; 0x52cc <APP_vCalculatorLCD+0x312>
    52d0:	fe 01       	movw	r30, r28
    52d2:	eb 5a       	subi	r30, 0xAB	; 171
    52d4:	ff 4f       	sbci	r31, 0xFF	; 255
    52d6:	91 83       	std	Z+1, r25	; 0x01
    52d8:	80 83       	st	Z, r24
			break;
		}
	}
	_delay_ms(50);
	KAYPAD_vInit();
    52da:	0e 94 88 21 	call	0x4310	; 0x4310 <KAYPAD_vInit>
	//--- delete all while 1 and replace it with if that take v and it count
	while(1){
		Loc_u8Symbol1=KAYPAD_u8GetKey();
    52de:	0e 94 97 21 	call	0x432e	; 0x432e <KAYPAD_u8GetKey>
    52e2:	fe 01       	movw	r30, r28
    52e4:	ed 58       	subi	r30, 0x8D	; 141
    52e6:	ff 4f       	sbci	r31, 0xFF	; 255
    52e8:	80 83       	st	Z, r24
    52ea:	fe 01       	movw	r30, r28
    52ec:	ef 5a       	subi	r30, 0xAF	; 175
    52ee:	ff 4f       	sbci	r31, 0xFF	; 255
    52f0:	80 e0       	ldi	r24, 0x00	; 0
    52f2:	90 e0       	ldi	r25, 0x00	; 0
    52f4:	a8 e4       	ldi	r26, 0x48	; 72
    52f6:	b2 e4       	ldi	r27, 0x42	; 66
    52f8:	80 83       	st	Z, r24
    52fa:	91 83       	std	Z+1, r25	; 0x01
    52fc:	a2 83       	std	Z+2, r26	; 0x02
    52fe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5300:	8e 01       	movw	r16, r28
    5302:	03 5b       	subi	r16, 0xB3	; 179
    5304:	1f 4f       	sbci	r17, 0xFF	; 255
    5306:	fe 01       	movw	r30, r28
    5308:	ef 5a       	subi	r30, 0xAF	; 175
    530a:	ff 4f       	sbci	r31, 0xFF	; 255
    530c:	60 81       	ld	r22, Z
    530e:	71 81       	ldd	r23, Z+1	; 0x01
    5310:	82 81       	ldd	r24, Z+2	; 0x02
    5312:	93 81       	ldd	r25, Z+3	; 0x03
    5314:	20 e0       	ldi	r18, 0x00	; 0
    5316:	30 e0       	ldi	r19, 0x00	; 0
    5318:	4a e7       	ldi	r20, 0x7A	; 122
    531a:	55 e4       	ldi	r21, 0x45	; 69
    531c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5320:	dc 01       	movw	r26, r24
    5322:	cb 01       	movw	r24, r22
    5324:	f8 01       	movw	r30, r16
    5326:	80 83       	st	Z, r24
    5328:	91 83       	std	Z+1, r25	; 0x01
    532a:	a2 83       	std	Z+2, r26	; 0x02
    532c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    532e:	fe 01       	movw	r30, r28
    5330:	e3 5b       	subi	r30, 0xB3	; 179
    5332:	ff 4f       	sbci	r31, 0xFF	; 255
    5334:	60 81       	ld	r22, Z
    5336:	71 81       	ldd	r23, Z+1	; 0x01
    5338:	82 81       	ldd	r24, Z+2	; 0x02
    533a:	93 81       	ldd	r25, Z+3	; 0x03
    533c:	20 e0       	ldi	r18, 0x00	; 0
    533e:	30 e0       	ldi	r19, 0x00	; 0
    5340:	40 e8       	ldi	r20, 0x80	; 128
    5342:	5f e3       	ldi	r21, 0x3F	; 63
    5344:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5348:	88 23       	and	r24, r24
    534a:	44 f4       	brge	.+16     	; 0x535c <APP_vCalculatorLCD+0x3a2>
		__ticks = 1;
    534c:	fe 01       	movw	r30, r28
    534e:	e5 5b       	subi	r30, 0xB5	; 181
    5350:	ff 4f       	sbci	r31, 0xFF	; 255
    5352:	81 e0       	ldi	r24, 0x01	; 1
    5354:	90 e0       	ldi	r25, 0x00	; 0
    5356:	91 83       	std	Z+1, r25	; 0x01
    5358:	80 83       	st	Z, r24
    535a:	64 c0       	rjmp	.+200    	; 0x5424 <APP_vCalculatorLCD+0x46a>
	else if (__tmp > 65535)
    535c:	fe 01       	movw	r30, r28
    535e:	e3 5b       	subi	r30, 0xB3	; 179
    5360:	ff 4f       	sbci	r31, 0xFF	; 255
    5362:	60 81       	ld	r22, Z
    5364:	71 81       	ldd	r23, Z+1	; 0x01
    5366:	82 81       	ldd	r24, Z+2	; 0x02
    5368:	93 81       	ldd	r25, Z+3	; 0x03
    536a:	20 e0       	ldi	r18, 0x00	; 0
    536c:	3f ef       	ldi	r19, 0xFF	; 255
    536e:	4f e7       	ldi	r20, 0x7F	; 127
    5370:	57 e4       	ldi	r21, 0x47	; 71
    5372:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5376:	18 16       	cp	r1, r24
    5378:	0c f0       	brlt	.+2      	; 0x537c <APP_vCalculatorLCD+0x3c2>
    537a:	43 c0       	rjmp	.+134    	; 0x5402 <APP_vCalculatorLCD+0x448>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    537c:	fe 01       	movw	r30, r28
    537e:	ef 5a       	subi	r30, 0xAF	; 175
    5380:	ff 4f       	sbci	r31, 0xFF	; 255
    5382:	60 81       	ld	r22, Z
    5384:	71 81       	ldd	r23, Z+1	; 0x01
    5386:	82 81       	ldd	r24, Z+2	; 0x02
    5388:	93 81       	ldd	r25, Z+3	; 0x03
    538a:	20 e0       	ldi	r18, 0x00	; 0
    538c:	30 e0       	ldi	r19, 0x00	; 0
    538e:	40 e2       	ldi	r20, 0x20	; 32
    5390:	51 e4       	ldi	r21, 0x41	; 65
    5392:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5396:	dc 01       	movw	r26, r24
    5398:	cb 01       	movw	r24, r22
    539a:	8e 01       	movw	r16, r28
    539c:	05 5b       	subi	r16, 0xB5	; 181
    539e:	1f 4f       	sbci	r17, 0xFF	; 255
    53a0:	bc 01       	movw	r22, r24
    53a2:	cd 01       	movw	r24, r26
    53a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    53a8:	dc 01       	movw	r26, r24
    53aa:	cb 01       	movw	r24, r22
    53ac:	f8 01       	movw	r30, r16
    53ae:	91 83       	std	Z+1, r25	; 0x01
    53b0:	80 83       	st	Z, r24
    53b2:	1f c0       	rjmp	.+62     	; 0x53f2 <APP_vCalculatorLCD+0x438>
    53b4:	fe 01       	movw	r30, r28
    53b6:	e7 5b       	subi	r30, 0xB7	; 183
    53b8:	ff 4f       	sbci	r31, 0xFF	; 255
    53ba:	80 e9       	ldi	r24, 0x90	; 144
    53bc:	91 e0       	ldi	r25, 0x01	; 1
    53be:	91 83       	std	Z+1, r25	; 0x01
    53c0:	80 83       	st	Z, r24
    53c2:	fe 01       	movw	r30, r28
    53c4:	e7 5b       	subi	r30, 0xB7	; 183
    53c6:	ff 4f       	sbci	r31, 0xFF	; 255
    53c8:	80 81       	ld	r24, Z
    53ca:	91 81       	ldd	r25, Z+1	; 0x01
    53cc:	01 97       	sbiw	r24, 0x01	; 1
    53ce:	f1 f7       	brne	.-4      	; 0x53cc <APP_vCalculatorLCD+0x412>
    53d0:	fe 01       	movw	r30, r28
    53d2:	e7 5b       	subi	r30, 0xB7	; 183
    53d4:	ff 4f       	sbci	r31, 0xFF	; 255
    53d6:	91 83       	std	Z+1, r25	; 0x01
    53d8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    53da:	de 01       	movw	r26, r28
    53dc:	a5 5b       	subi	r26, 0xB5	; 181
    53de:	bf 4f       	sbci	r27, 0xFF	; 255
    53e0:	fe 01       	movw	r30, r28
    53e2:	e5 5b       	subi	r30, 0xB5	; 181
    53e4:	ff 4f       	sbci	r31, 0xFF	; 255
    53e6:	80 81       	ld	r24, Z
    53e8:	91 81       	ldd	r25, Z+1	; 0x01
    53ea:	01 97       	sbiw	r24, 0x01	; 1
    53ec:	11 96       	adiw	r26, 0x01	; 1
    53ee:	9c 93       	st	X, r25
    53f0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    53f2:	fe 01       	movw	r30, r28
    53f4:	e5 5b       	subi	r30, 0xB5	; 181
    53f6:	ff 4f       	sbci	r31, 0xFF	; 255
    53f8:	80 81       	ld	r24, Z
    53fa:	91 81       	ldd	r25, Z+1	; 0x01
    53fc:	00 97       	sbiw	r24, 0x00	; 0
    53fe:	d1 f6       	brne	.-76     	; 0x53b4 <APP_vCalculatorLCD+0x3fa>
    5400:	28 c0       	rjmp	.+80     	; 0x5452 <APP_vCalculatorLCD+0x498>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5402:	8e 01       	movw	r16, r28
    5404:	05 5b       	subi	r16, 0xB5	; 181
    5406:	1f 4f       	sbci	r17, 0xFF	; 255
    5408:	fe 01       	movw	r30, r28
    540a:	e3 5b       	subi	r30, 0xB3	; 179
    540c:	ff 4f       	sbci	r31, 0xFF	; 255
    540e:	60 81       	ld	r22, Z
    5410:	71 81       	ldd	r23, Z+1	; 0x01
    5412:	82 81       	ldd	r24, Z+2	; 0x02
    5414:	93 81       	ldd	r25, Z+3	; 0x03
    5416:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    541a:	dc 01       	movw	r26, r24
    541c:	cb 01       	movw	r24, r22
    541e:	f8 01       	movw	r30, r16
    5420:	91 83       	std	Z+1, r25	; 0x01
    5422:	80 83       	st	Z, r24
    5424:	de 01       	movw	r26, r28
    5426:	a9 5b       	subi	r26, 0xB9	; 185
    5428:	bf 4f       	sbci	r27, 0xFF	; 255
    542a:	fe 01       	movw	r30, r28
    542c:	e5 5b       	subi	r30, 0xB5	; 181
    542e:	ff 4f       	sbci	r31, 0xFF	; 255
    5430:	80 81       	ld	r24, Z
    5432:	91 81       	ldd	r25, Z+1	; 0x01
    5434:	11 96       	adiw	r26, 0x01	; 1
    5436:	9c 93       	st	X, r25
    5438:	8e 93       	st	-X, r24
    543a:	fe 01       	movw	r30, r28
    543c:	e9 5b       	subi	r30, 0xB9	; 185
    543e:	ff 4f       	sbci	r31, 0xFF	; 255
    5440:	80 81       	ld	r24, Z
    5442:	91 81       	ldd	r25, Z+1	; 0x01
    5444:	01 97       	sbiw	r24, 0x01	; 1
    5446:	f1 f7       	brne	.-4      	; 0x5444 <APP_vCalculatorLCD+0x48a>
    5448:	fe 01       	movw	r30, r28
    544a:	e9 5b       	subi	r30, 0xB9	; 185
    544c:	ff 4f       	sbci	r31, 0xFF	; 255
    544e:	91 83       	std	Z+1, r25	; 0x01
    5450:	80 83       	st	Z, r24
		_delay_ms(50);
		if(Loc_u8Symbol1=='/'||Loc_u8Symbol1=='*'||Loc_u8Symbol1=='-'||Loc_u8Symbol1=='+'||Loc_u8Symbol1=='%'){
    5452:	fe 01       	movw	r30, r28
    5454:	ed 58       	subi	r30, 0x8D	; 141
    5456:	ff 4f       	sbci	r31, 0xFF	; 255
    5458:	80 81       	ld	r24, Z
    545a:	8f 32       	cpi	r24, 0x2F	; 47
    545c:	c9 f0       	breq	.+50     	; 0x5490 <APP_vCalculatorLCD+0x4d6>
    545e:	fe 01       	movw	r30, r28
    5460:	ed 58       	subi	r30, 0x8D	; 141
    5462:	ff 4f       	sbci	r31, 0xFF	; 255
    5464:	80 81       	ld	r24, Z
    5466:	8a 32       	cpi	r24, 0x2A	; 42
    5468:	99 f0       	breq	.+38     	; 0x5490 <APP_vCalculatorLCD+0x4d6>
    546a:	fe 01       	movw	r30, r28
    546c:	ed 58       	subi	r30, 0x8D	; 141
    546e:	ff 4f       	sbci	r31, 0xFF	; 255
    5470:	80 81       	ld	r24, Z
    5472:	8d 32       	cpi	r24, 0x2D	; 45
    5474:	69 f0       	breq	.+26     	; 0x5490 <APP_vCalculatorLCD+0x4d6>
    5476:	fe 01       	movw	r30, r28
    5478:	ed 58       	subi	r30, 0x8D	; 141
    547a:	ff 4f       	sbci	r31, 0xFF	; 255
    547c:	80 81       	ld	r24, Z
    547e:	8b 32       	cpi	r24, 0x2B	; 43
    5480:	39 f0       	breq	.+14     	; 0x5490 <APP_vCalculatorLCD+0x4d6>
    5482:	fe 01       	movw	r30, r28
    5484:	ed 58       	subi	r30, 0x8D	; 141
    5486:	ff 4f       	sbci	r31, 0xFF	; 255
    5488:	80 81       	ld	r24, Z
    548a:	85 32       	cpi	r24, 0x25	; 37
    548c:	09 f0       	breq	.+2      	; 0x5490 <APP_vCalculatorLCD+0x4d6>
    548e:	27 cf       	rjmp	.-434    	; 0x52de <APP_vCalculatorLCD+0x324>
			LCD_vInitWithOutClear();
    5490:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <LCD_vInitWithOutClear>
			LCD_vGoTo(LineOne,1);
    5494:	80 e8       	ldi	r24, 0x80	; 128
    5496:	61 e0       	ldi	r22, 0x01	; 1
    5498:	0e 94 6e 20 	call	0x40dc	; 0x40dc <LCD_vGoTo>
			LCD_vWriteCharacter(Loc_u8Symbol1);
    549c:	fe 01       	movw	r30, r28
    549e:	ed 58       	subi	r30, 0x8D	; 141
    54a0:	ff 4f       	sbci	r31, 0xFF	; 255
    54a2:	80 81       	ld	r24, Z
    54a4:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <LCD_vWriteCharacter>
    54a8:	fe 01       	movw	r30, r28
    54aa:	ed 5b       	subi	r30, 0xBD	; 189
    54ac:	ff 4f       	sbci	r31, 0xFF	; 255
    54ae:	80 e0       	ldi	r24, 0x00	; 0
    54b0:	90 e0       	ldi	r25, 0x00	; 0
    54b2:	a8 e4       	ldi	r26, 0x48	; 72
    54b4:	b2 e4       	ldi	r27, 0x42	; 66
    54b6:	80 83       	st	Z, r24
    54b8:	91 83       	std	Z+1, r25	; 0x01
    54ba:	a2 83       	std	Z+2, r26	; 0x02
    54bc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    54be:	8e 01       	movw	r16, r28
    54c0:	01 5c       	subi	r16, 0xC1	; 193
    54c2:	1f 4f       	sbci	r17, 0xFF	; 255
    54c4:	fe 01       	movw	r30, r28
    54c6:	ed 5b       	subi	r30, 0xBD	; 189
    54c8:	ff 4f       	sbci	r31, 0xFF	; 255
    54ca:	60 81       	ld	r22, Z
    54cc:	71 81       	ldd	r23, Z+1	; 0x01
    54ce:	82 81       	ldd	r24, Z+2	; 0x02
    54d0:	93 81       	ldd	r25, Z+3	; 0x03
    54d2:	20 e0       	ldi	r18, 0x00	; 0
    54d4:	30 e0       	ldi	r19, 0x00	; 0
    54d6:	4a e7       	ldi	r20, 0x7A	; 122
    54d8:	55 e4       	ldi	r21, 0x45	; 69
    54da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    54de:	dc 01       	movw	r26, r24
    54e0:	cb 01       	movw	r24, r22
    54e2:	f8 01       	movw	r30, r16
    54e4:	80 83       	st	Z, r24
    54e6:	91 83       	std	Z+1, r25	; 0x01
    54e8:	a2 83       	std	Z+2, r26	; 0x02
    54ea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    54ec:	fe 01       	movw	r30, r28
    54ee:	ff 96       	adiw	r30, 0x3f	; 63
    54f0:	60 81       	ld	r22, Z
    54f2:	71 81       	ldd	r23, Z+1	; 0x01
    54f4:	82 81       	ldd	r24, Z+2	; 0x02
    54f6:	93 81       	ldd	r25, Z+3	; 0x03
    54f8:	20 e0       	ldi	r18, 0x00	; 0
    54fa:	30 e0       	ldi	r19, 0x00	; 0
    54fc:	40 e8       	ldi	r20, 0x80	; 128
    54fe:	5f e3       	ldi	r21, 0x3F	; 63
    5500:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5504:	88 23       	and	r24, r24
    5506:	2c f4       	brge	.+10     	; 0x5512 <APP_vCalculatorLCD+0x558>
		__ticks = 1;
    5508:	81 e0       	ldi	r24, 0x01	; 1
    550a:	90 e0       	ldi	r25, 0x00	; 0
    550c:	9e af       	std	Y+62, r25	; 0x3e
    550e:	8d af       	std	Y+61, r24	; 0x3d
    5510:	46 c0       	rjmp	.+140    	; 0x559e <APP_vCalculatorLCD+0x5e4>
	else if (__tmp > 65535)
    5512:	fe 01       	movw	r30, r28
    5514:	ff 96       	adiw	r30, 0x3f	; 63
    5516:	60 81       	ld	r22, Z
    5518:	71 81       	ldd	r23, Z+1	; 0x01
    551a:	82 81       	ldd	r24, Z+2	; 0x02
    551c:	93 81       	ldd	r25, Z+3	; 0x03
    551e:	20 e0       	ldi	r18, 0x00	; 0
    5520:	3f ef       	ldi	r19, 0xFF	; 255
    5522:	4f e7       	ldi	r20, 0x7F	; 127
    5524:	57 e4       	ldi	r21, 0x47	; 71
    5526:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    552a:	18 16       	cp	r1, r24
    552c:	64 f5       	brge	.+88     	; 0x5586 <APP_vCalculatorLCD+0x5cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    552e:	fe 01       	movw	r30, r28
    5530:	ed 5b       	subi	r30, 0xBD	; 189
    5532:	ff 4f       	sbci	r31, 0xFF	; 255
    5534:	60 81       	ld	r22, Z
    5536:	71 81       	ldd	r23, Z+1	; 0x01
    5538:	82 81       	ldd	r24, Z+2	; 0x02
    553a:	93 81       	ldd	r25, Z+3	; 0x03
    553c:	20 e0       	ldi	r18, 0x00	; 0
    553e:	30 e0       	ldi	r19, 0x00	; 0
    5540:	40 e2       	ldi	r20, 0x20	; 32
    5542:	51 e4       	ldi	r21, 0x41	; 65
    5544:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5548:	dc 01       	movw	r26, r24
    554a:	cb 01       	movw	r24, r22
    554c:	bc 01       	movw	r22, r24
    554e:	cd 01       	movw	r24, r26
    5550:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5554:	dc 01       	movw	r26, r24
    5556:	cb 01       	movw	r24, r22
    5558:	9e af       	std	Y+62, r25	; 0x3e
    555a:	8d af       	std	Y+61, r24	; 0x3d
    555c:	0f c0       	rjmp	.+30     	; 0x557c <APP_vCalculatorLCD+0x5c2>
    555e:	80 e9       	ldi	r24, 0x90	; 144
    5560:	91 e0       	ldi	r25, 0x01	; 1
    5562:	9c af       	std	Y+60, r25	; 0x3c
    5564:	8b af       	std	Y+59, r24	; 0x3b
    5566:	8b ad       	ldd	r24, Y+59	; 0x3b
    5568:	9c ad       	ldd	r25, Y+60	; 0x3c
    556a:	01 97       	sbiw	r24, 0x01	; 1
    556c:	f1 f7       	brne	.-4      	; 0x556a <APP_vCalculatorLCD+0x5b0>
    556e:	9c af       	std	Y+60, r25	; 0x3c
    5570:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5572:	8d ad       	ldd	r24, Y+61	; 0x3d
    5574:	9e ad       	ldd	r25, Y+62	; 0x3e
    5576:	01 97       	sbiw	r24, 0x01	; 1
    5578:	9e af       	std	Y+62, r25	; 0x3e
    557a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    557c:	8d ad       	ldd	r24, Y+61	; 0x3d
    557e:	9e ad       	ldd	r25, Y+62	; 0x3e
    5580:	00 97       	sbiw	r24, 0x00	; 0
    5582:	69 f7       	brne	.-38     	; 0x555e <APP_vCalculatorLCD+0x5a4>
    5584:	16 c0       	rjmp	.+44     	; 0x55b2 <APP_vCalculatorLCD+0x5f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5586:	fe 01       	movw	r30, r28
    5588:	ff 96       	adiw	r30, 0x3f	; 63
    558a:	60 81       	ld	r22, Z
    558c:	71 81       	ldd	r23, Z+1	; 0x01
    558e:	82 81       	ldd	r24, Z+2	; 0x02
    5590:	93 81       	ldd	r25, Z+3	; 0x03
    5592:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5596:	dc 01       	movw	r26, r24
    5598:	cb 01       	movw	r24, r22
    559a:	9e af       	std	Y+62, r25	; 0x3e
    559c:	8d af       	std	Y+61, r24	; 0x3d
    559e:	8d ad       	ldd	r24, Y+61	; 0x3d
    55a0:	9e ad       	ldd	r25, Y+62	; 0x3e
    55a2:	9a af       	std	Y+58, r25	; 0x3a
    55a4:	89 af       	std	Y+57, r24	; 0x39
    55a6:	89 ad       	ldd	r24, Y+57	; 0x39
    55a8:	9a ad       	ldd	r25, Y+58	; 0x3a
    55aa:	01 97       	sbiw	r24, 0x01	; 1
    55ac:	f1 f7       	brne	.-4      	; 0x55aa <APP_vCalculatorLCD+0x5f0>
    55ae:	9a af       	std	Y+58, r25	; 0x3a
    55b0:	89 af       	std	Y+57, r24	; 0x39
			break;
		}
	}
	_delay_ms(50);
	KAYPAD_vInit();
    55b2:	0e 94 88 21 	call	0x4310	; 0x4310 <KAYPAD_vInit>
	while(1){
		Loc_u8Num2=KAYPAD_u8GetKey();
    55b6:	0e 94 97 21 	call	0x432e	; 0x432e <KAYPAD_u8GetKey>
    55ba:	fe 01       	movw	r30, r28
    55bc:	ec 58       	subi	r30, 0x8C	; 140
    55be:	ff 4f       	sbci	r31, 0xFF	; 255
    55c0:	80 83       	st	Z, r24
    55c2:	80 e0       	ldi	r24, 0x00	; 0
    55c4:	90 e0       	ldi	r25, 0x00	; 0
    55c6:	a8 e4       	ldi	r26, 0x48	; 72
    55c8:	b2 e4       	ldi	r27, 0x42	; 66
    55ca:	8d ab       	std	Y+53, r24	; 0x35
    55cc:	9e ab       	std	Y+54, r25	; 0x36
    55ce:	af ab       	std	Y+55, r26	; 0x37
    55d0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    55d2:	6d a9       	ldd	r22, Y+53	; 0x35
    55d4:	7e a9       	ldd	r23, Y+54	; 0x36
    55d6:	8f a9       	ldd	r24, Y+55	; 0x37
    55d8:	98 ad       	ldd	r25, Y+56	; 0x38
    55da:	20 e0       	ldi	r18, 0x00	; 0
    55dc:	30 e0       	ldi	r19, 0x00	; 0
    55de:	4a e7       	ldi	r20, 0x7A	; 122
    55e0:	55 e4       	ldi	r21, 0x45	; 69
    55e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55e6:	dc 01       	movw	r26, r24
    55e8:	cb 01       	movw	r24, r22
    55ea:	89 ab       	std	Y+49, r24	; 0x31
    55ec:	9a ab       	std	Y+50, r25	; 0x32
    55ee:	ab ab       	std	Y+51, r26	; 0x33
    55f0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    55f2:	69 a9       	ldd	r22, Y+49	; 0x31
    55f4:	7a a9       	ldd	r23, Y+50	; 0x32
    55f6:	8b a9       	ldd	r24, Y+51	; 0x33
    55f8:	9c a9       	ldd	r25, Y+52	; 0x34
    55fa:	20 e0       	ldi	r18, 0x00	; 0
    55fc:	30 e0       	ldi	r19, 0x00	; 0
    55fe:	40 e8       	ldi	r20, 0x80	; 128
    5600:	5f e3       	ldi	r21, 0x3F	; 63
    5602:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5606:	88 23       	and	r24, r24
    5608:	2c f4       	brge	.+10     	; 0x5614 <APP_vCalculatorLCD+0x65a>
		__ticks = 1;
    560a:	81 e0       	ldi	r24, 0x01	; 1
    560c:	90 e0       	ldi	r25, 0x00	; 0
    560e:	98 ab       	std	Y+48, r25	; 0x30
    5610:	8f a7       	std	Y+47, r24	; 0x2f
    5612:	3f c0       	rjmp	.+126    	; 0x5692 <APP_vCalculatorLCD+0x6d8>
	else if (__tmp > 65535)
    5614:	69 a9       	ldd	r22, Y+49	; 0x31
    5616:	7a a9       	ldd	r23, Y+50	; 0x32
    5618:	8b a9       	ldd	r24, Y+51	; 0x33
    561a:	9c a9       	ldd	r25, Y+52	; 0x34
    561c:	20 e0       	ldi	r18, 0x00	; 0
    561e:	3f ef       	ldi	r19, 0xFF	; 255
    5620:	4f e7       	ldi	r20, 0x7F	; 127
    5622:	57 e4       	ldi	r21, 0x47	; 71
    5624:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5628:	18 16       	cp	r1, r24
    562a:	4c f5       	brge	.+82     	; 0x567e <APP_vCalculatorLCD+0x6c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    562c:	6d a9       	ldd	r22, Y+53	; 0x35
    562e:	7e a9       	ldd	r23, Y+54	; 0x36
    5630:	8f a9       	ldd	r24, Y+55	; 0x37
    5632:	98 ad       	ldd	r25, Y+56	; 0x38
    5634:	20 e0       	ldi	r18, 0x00	; 0
    5636:	30 e0       	ldi	r19, 0x00	; 0
    5638:	40 e2       	ldi	r20, 0x20	; 32
    563a:	51 e4       	ldi	r21, 0x41	; 65
    563c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5640:	dc 01       	movw	r26, r24
    5642:	cb 01       	movw	r24, r22
    5644:	bc 01       	movw	r22, r24
    5646:	cd 01       	movw	r24, r26
    5648:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    564c:	dc 01       	movw	r26, r24
    564e:	cb 01       	movw	r24, r22
    5650:	98 ab       	std	Y+48, r25	; 0x30
    5652:	8f a7       	std	Y+47, r24	; 0x2f
    5654:	0f c0       	rjmp	.+30     	; 0x5674 <APP_vCalculatorLCD+0x6ba>
    5656:	80 e9       	ldi	r24, 0x90	; 144
    5658:	91 e0       	ldi	r25, 0x01	; 1
    565a:	9e a7       	std	Y+46, r25	; 0x2e
    565c:	8d a7       	std	Y+45, r24	; 0x2d
    565e:	8d a5       	ldd	r24, Y+45	; 0x2d
    5660:	9e a5       	ldd	r25, Y+46	; 0x2e
    5662:	01 97       	sbiw	r24, 0x01	; 1
    5664:	f1 f7       	brne	.-4      	; 0x5662 <APP_vCalculatorLCD+0x6a8>
    5666:	9e a7       	std	Y+46, r25	; 0x2e
    5668:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    566a:	8f a5       	ldd	r24, Y+47	; 0x2f
    566c:	98 a9       	ldd	r25, Y+48	; 0x30
    566e:	01 97       	sbiw	r24, 0x01	; 1
    5670:	98 ab       	std	Y+48, r25	; 0x30
    5672:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5674:	8f a5       	ldd	r24, Y+47	; 0x2f
    5676:	98 a9       	ldd	r25, Y+48	; 0x30
    5678:	00 97       	sbiw	r24, 0x00	; 0
    567a:	69 f7       	brne	.-38     	; 0x5656 <APP_vCalculatorLCD+0x69c>
    567c:	14 c0       	rjmp	.+40     	; 0x56a6 <APP_vCalculatorLCD+0x6ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    567e:	69 a9       	ldd	r22, Y+49	; 0x31
    5680:	7a a9       	ldd	r23, Y+50	; 0x32
    5682:	8b a9       	ldd	r24, Y+51	; 0x33
    5684:	9c a9       	ldd	r25, Y+52	; 0x34
    5686:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    568a:	dc 01       	movw	r26, r24
    568c:	cb 01       	movw	r24, r22
    568e:	98 ab       	std	Y+48, r25	; 0x30
    5690:	8f a7       	std	Y+47, r24	; 0x2f
    5692:	8f a5       	ldd	r24, Y+47	; 0x2f
    5694:	98 a9       	ldd	r25, Y+48	; 0x30
    5696:	9c a7       	std	Y+44, r25	; 0x2c
    5698:	8b a7       	std	Y+43, r24	; 0x2b
    569a:	8b a5       	ldd	r24, Y+43	; 0x2b
    569c:	9c a5       	ldd	r25, Y+44	; 0x2c
    569e:	01 97       	sbiw	r24, 0x01	; 1
    56a0:	f1 f7       	brne	.-4      	; 0x569e <APP_vCalculatorLCD+0x6e4>
    56a2:	9c a7       	std	Y+44, r25	; 0x2c
    56a4:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(50);
		if(Loc_u8Num2!=0xff){
    56a6:	fe 01       	movw	r30, r28
    56a8:	ec 58       	subi	r30, 0x8C	; 140
    56aa:	ff 4f       	sbci	r31, 0xFF	; 255
    56ac:	80 81       	ld	r24, Z
    56ae:	8f 3f       	cpi	r24, 0xFF	; 255
    56b0:	09 f4       	brne	.+2      	; 0x56b4 <APP_vCalculatorLCD+0x6fa>
    56b2:	81 cf       	rjmp	.-254    	; 0x55b6 <APP_vCalculatorLCD+0x5fc>
			LCD_vInitWithOutClear();
    56b4:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <LCD_vInitWithOutClear>
			LCD_vGoTo(LineOne,2);
    56b8:	80 e8       	ldi	r24, 0x80	; 128
    56ba:	62 e0       	ldi	r22, 0x02	; 2
    56bc:	0e 94 6e 20 	call	0x40dc	; 0x40dc <LCD_vGoTo>
			LCD_vWriteCharacter(Loc_u8Num2+48);
    56c0:	fe 01       	movw	r30, r28
    56c2:	ec 58       	subi	r30, 0x8C	; 140
    56c4:	ff 4f       	sbci	r31, 0xFF	; 255
    56c6:	80 81       	ld	r24, Z
    56c8:	80 5d       	subi	r24, 0xD0	; 208
    56ca:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <LCD_vWriteCharacter>
    56ce:	80 e0       	ldi	r24, 0x00	; 0
    56d0:	90 e0       	ldi	r25, 0x00	; 0
    56d2:	a8 e4       	ldi	r26, 0x48	; 72
    56d4:	b2 e4       	ldi	r27, 0x42	; 66
    56d6:	8f a3       	std	Y+39, r24	; 0x27
    56d8:	98 a7       	std	Y+40, r25	; 0x28
    56da:	a9 a7       	std	Y+41, r26	; 0x29
    56dc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    56de:	6f a1       	ldd	r22, Y+39	; 0x27
    56e0:	78 a5       	ldd	r23, Y+40	; 0x28
    56e2:	89 a5       	ldd	r24, Y+41	; 0x29
    56e4:	9a a5       	ldd	r25, Y+42	; 0x2a
    56e6:	20 e0       	ldi	r18, 0x00	; 0
    56e8:	30 e0       	ldi	r19, 0x00	; 0
    56ea:	4a e7       	ldi	r20, 0x7A	; 122
    56ec:	55 e4       	ldi	r21, 0x45	; 69
    56ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    56f2:	dc 01       	movw	r26, r24
    56f4:	cb 01       	movw	r24, r22
    56f6:	8b a3       	std	Y+35, r24	; 0x23
    56f8:	9c a3       	std	Y+36, r25	; 0x24
    56fa:	ad a3       	std	Y+37, r26	; 0x25
    56fc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    56fe:	6b a1       	ldd	r22, Y+35	; 0x23
    5700:	7c a1       	ldd	r23, Y+36	; 0x24
    5702:	8d a1       	ldd	r24, Y+37	; 0x25
    5704:	9e a1       	ldd	r25, Y+38	; 0x26
    5706:	20 e0       	ldi	r18, 0x00	; 0
    5708:	30 e0       	ldi	r19, 0x00	; 0
    570a:	40 e8       	ldi	r20, 0x80	; 128
    570c:	5f e3       	ldi	r21, 0x3F	; 63
    570e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5712:	88 23       	and	r24, r24
    5714:	2c f4       	brge	.+10     	; 0x5720 <APP_vCalculatorLCD+0x766>
		__ticks = 1;
    5716:	81 e0       	ldi	r24, 0x01	; 1
    5718:	90 e0       	ldi	r25, 0x00	; 0
    571a:	9a a3       	std	Y+34, r25	; 0x22
    571c:	89 a3       	std	Y+33, r24	; 0x21
    571e:	3f c0       	rjmp	.+126    	; 0x579e <APP_vCalculatorLCD+0x7e4>
	else if (__tmp > 65535)
    5720:	6b a1       	ldd	r22, Y+35	; 0x23
    5722:	7c a1       	ldd	r23, Y+36	; 0x24
    5724:	8d a1       	ldd	r24, Y+37	; 0x25
    5726:	9e a1       	ldd	r25, Y+38	; 0x26
    5728:	20 e0       	ldi	r18, 0x00	; 0
    572a:	3f ef       	ldi	r19, 0xFF	; 255
    572c:	4f e7       	ldi	r20, 0x7F	; 127
    572e:	57 e4       	ldi	r21, 0x47	; 71
    5730:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5734:	18 16       	cp	r1, r24
    5736:	4c f5       	brge	.+82     	; 0x578a <APP_vCalculatorLCD+0x7d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5738:	6f a1       	ldd	r22, Y+39	; 0x27
    573a:	78 a5       	ldd	r23, Y+40	; 0x28
    573c:	89 a5       	ldd	r24, Y+41	; 0x29
    573e:	9a a5       	ldd	r25, Y+42	; 0x2a
    5740:	20 e0       	ldi	r18, 0x00	; 0
    5742:	30 e0       	ldi	r19, 0x00	; 0
    5744:	40 e2       	ldi	r20, 0x20	; 32
    5746:	51 e4       	ldi	r21, 0x41	; 65
    5748:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    574c:	dc 01       	movw	r26, r24
    574e:	cb 01       	movw	r24, r22
    5750:	bc 01       	movw	r22, r24
    5752:	cd 01       	movw	r24, r26
    5754:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5758:	dc 01       	movw	r26, r24
    575a:	cb 01       	movw	r24, r22
    575c:	9a a3       	std	Y+34, r25	; 0x22
    575e:	89 a3       	std	Y+33, r24	; 0x21
    5760:	0f c0       	rjmp	.+30     	; 0x5780 <APP_vCalculatorLCD+0x7c6>
    5762:	80 e9       	ldi	r24, 0x90	; 144
    5764:	91 e0       	ldi	r25, 0x01	; 1
    5766:	98 a3       	std	Y+32, r25	; 0x20
    5768:	8f 8f       	std	Y+31, r24	; 0x1f
    576a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    576c:	98 a1       	ldd	r25, Y+32	; 0x20
    576e:	01 97       	sbiw	r24, 0x01	; 1
    5770:	f1 f7       	brne	.-4      	; 0x576e <APP_vCalculatorLCD+0x7b4>
    5772:	98 a3       	std	Y+32, r25	; 0x20
    5774:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5776:	89 a1       	ldd	r24, Y+33	; 0x21
    5778:	9a a1       	ldd	r25, Y+34	; 0x22
    577a:	01 97       	sbiw	r24, 0x01	; 1
    577c:	9a a3       	std	Y+34, r25	; 0x22
    577e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5780:	89 a1       	ldd	r24, Y+33	; 0x21
    5782:	9a a1       	ldd	r25, Y+34	; 0x22
    5784:	00 97       	sbiw	r24, 0x00	; 0
    5786:	69 f7       	brne	.-38     	; 0x5762 <APP_vCalculatorLCD+0x7a8>
    5788:	14 c0       	rjmp	.+40     	; 0x57b2 <APP_vCalculatorLCD+0x7f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    578a:	6b a1       	ldd	r22, Y+35	; 0x23
    578c:	7c a1       	ldd	r23, Y+36	; 0x24
    578e:	8d a1       	ldd	r24, Y+37	; 0x25
    5790:	9e a1       	ldd	r25, Y+38	; 0x26
    5792:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5796:	dc 01       	movw	r26, r24
    5798:	cb 01       	movw	r24, r22
    579a:	9a a3       	std	Y+34, r25	; 0x22
    579c:	89 a3       	std	Y+33, r24	; 0x21
    579e:	89 a1       	ldd	r24, Y+33	; 0x21
    57a0:	9a a1       	ldd	r25, Y+34	; 0x22
    57a2:	9e 8f       	std	Y+30, r25	; 0x1e
    57a4:	8d 8f       	std	Y+29, r24	; 0x1d
    57a6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    57a8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    57aa:	01 97       	sbiw	r24, 0x01	; 1
    57ac:	f1 f7       	brne	.-4      	; 0x57aa <APP_vCalculatorLCD+0x7f0>
    57ae:	9e 8f       	std	Y+30, r25	; 0x1e
    57b0:	8d 8f       	std	Y+29, r24	; 0x1d
			break;
		}
	}
	_delay_ms(50);
	KAYPAD_vInit();
    57b2:	0e 94 88 21 	call	0x4310	; 0x4310 <KAYPAD_vInit>
	while(1){
		Loc_u8Symbol2=KAYPAD_u8GetKey();
    57b6:	0e 94 97 21 	call	0x432e	; 0x432e <KAYPAD_u8GetKey>
    57ba:	fe 01       	movw	r30, r28
    57bc:	ee 58       	subi	r30, 0x8E	; 142
    57be:	ff 4f       	sbci	r31, 0xFF	; 255
    57c0:	80 83       	st	Z, r24
    57c2:	80 e0       	ldi	r24, 0x00	; 0
    57c4:	90 e0       	ldi	r25, 0x00	; 0
    57c6:	a8 e4       	ldi	r26, 0x48	; 72
    57c8:	b2 e4       	ldi	r27, 0x42	; 66
    57ca:	89 8f       	std	Y+25, r24	; 0x19
    57cc:	9a 8f       	std	Y+26, r25	; 0x1a
    57ce:	ab 8f       	std	Y+27, r26	; 0x1b
    57d0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    57d2:	69 8d       	ldd	r22, Y+25	; 0x19
    57d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    57d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    57d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    57da:	20 e0       	ldi	r18, 0x00	; 0
    57dc:	30 e0       	ldi	r19, 0x00	; 0
    57de:	4a e7       	ldi	r20, 0x7A	; 122
    57e0:	55 e4       	ldi	r21, 0x45	; 69
    57e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    57e6:	dc 01       	movw	r26, r24
    57e8:	cb 01       	movw	r24, r22
    57ea:	8d 8b       	std	Y+21, r24	; 0x15
    57ec:	9e 8b       	std	Y+22, r25	; 0x16
    57ee:	af 8b       	std	Y+23, r26	; 0x17
    57f0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    57f2:	6d 89       	ldd	r22, Y+21	; 0x15
    57f4:	7e 89       	ldd	r23, Y+22	; 0x16
    57f6:	8f 89       	ldd	r24, Y+23	; 0x17
    57f8:	98 8d       	ldd	r25, Y+24	; 0x18
    57fa:	20 e0       	ldi	r18, 0x00	; 0
    57fc:	30 e0       	ldi	r19, 0x00	; 0
    57fe:	40 e8       	ldi	r20, 0x80	; 128
    5800:	5f e3       	ldi	r21, 0x3F	; 63
    5802:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5806:	88 23       	and	r24, r24
    5808:	2c f4       	brge	.+10     	; 0x5814 <APP_vCalculatorLCD+0x85a>
		__ticks = 1;
    580a:	81 e0       	ldi	r24, 0x01	; 1
    580c:	90 e0       	ldi	r25, 0x00	; 0
    580e:	9c 8b       	std	Y+20, r25	; 0x14
    5810:	8b 8b       	std	Y+19, r24	; 0x13
    5812:	3f c0       	rjmp	.+126    	; 0x5892 <APP_vCalculatorLCD+0x8d8>
	else if (__tmp > 65535)
    5814:	6d 89       	ldd	r22, Y+21	; 0x15
    5816:	7e 89       	ldd	r23, Y+22	; 0x16
    5818:	8f 89       	ldd	r24, Y+23	; 0x17
    581a:	98 8d       	ldd	r25, Y+24	; 0x18
    581c:	20 e0       	ldi	r18, 0x00	; 0
    581e:	3f ef       	ldi	r19, 0xFF	; 255
    5820:	4f e7       	ldi	r20, 0x7F	; 127
    5822:	57 e4       	ldi	r21, 0x47	; 71
    5824:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5828:	18 16       	cp	r1, r24
    582a:	4c f5       	brge	.+82     	; 0x587e <APP_vCalculatorLCD+0x8c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    582c:	69 8d       	ldd	r22, Y+25	; 0x19
    582e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5830:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5832:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5834:	20 e0       	ldi	r18, 0x00	; 0
    5836:	30 e0       	ldi	r19, 0x00	; 0
    5838:	40 e2       	ldi	r20, 0x20	; 32
    583a:	51 e4       	ldi	r21, 0x41	; 65
    583c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5840:	dc 01       	movw	r26, r24
    5842:	cb 01       	movw	r24, r22
    5844:	bc 01       	movw	r22, r24
    5846:	cd 01       	movw	r24, r26
    5848:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    584c:	dc 01       	movw	r26, r24
    584e:	cb 01       	movw	r24, r22
    5850:	9c 8b       	std	Y+20, r25	; 0x14
    5852:	8b 8b       	std	Y+19, r24	; 0x13
    5854:	0f c0       	rjmp	.+30     	; 0x5874 <APP_vCalculatorLCD+0x8ba>
    5856:	80 e9       	ldi	r24, 0x90	; 144
    5858:	91 e0       	ldi	r25, 0x01	; 1
    585a:	9a 8b       	std	Y+18, r25	; 0x12
    585c:	89 8b       	std	Y+17, r24	; 0x11
    585e:	89 89       	ldd	r24, Y+17	; 0x11
    5860:	9a 89       	ldd	r25, Y+18	; 0x12
    5862:	01 97       	sbiw	r24, 0x01	; 1
    5864:	f1 f7       	brne	.-4      	; 0x5862 <APP_vCalculatorLCD+0x8a8>
    5866:	9a 8b       	std	Y+18, r25	; 0x12
    5868:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    586a:	8b 89       	ldd	r24, Y+19	; 0x13
    586c:	9c 89       	ldd	r25, Y+20	; 0x14
    586e:	01 97       	sbiw	r24, 0x01	; 1
    5870:	9c 8b       	std	Y+20, r25	; 0x14
    5872:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5874:	8b 89       	ldd	r24, Y+19	; 0x13
    5876:	9c 89       	ldd	r25, Y+20	; 0x14
    5878:	00 97       	sbiw	r24, 0x00	; 0
    587a:	69 f7       	brne	.-38     	; 0x5856 <APP_vCalculatorLCD+0x89c>
    587c:	14 c0       	rjmp	.+40     	; 0x58a6 <APP_vCalculatorLCD+0x8ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    587e:	6d 89       	ldd	r22, Y+21	; 0x15
    5880:	7e 89       	ldd	r23, Y+22	; 0x16
    5882:	8f 89       	ldd	r24, Y+23	; 0x17
    5884:	98 8d       	ldd	r25, Y+24	; 0x18
    5886:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    588a:	dc 01       	movw	r26, r24
    588c:	cb 01       	movw	r24, r22
    588e:	9c 8b       	std	Y+20, r25	; 0x14
    5890:	8b 8b       	std	Y+19, r24	; 0x13
    5892:	8b 89       	ldd	r24, Y+19	; 0x13
    5894:	9c 89       	ldd	r25, Y+20	; 0x14
    5896:	98 8b       	std	Y+16, r25	; 0x10
    5898:	8f 87       	std	Y+15, r24	; 0x0f
    589a:	8f 85       	ldd	r24, Y+15	; 0x0f
    589c:	98 89       	ldd	r25, Y+16	; 0x10
    589e:	01 97       	sbiw	r24, 0x01	; 1
    58a0:	f1 f7       	brne	.-4      	; 0x589e <APP_vCalculatorLCD+0x8e4>
    58a2:	98 8b       	std	Y+16, r25	; 0x10
    58a4:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(50);
		if(Loc_u8Symbol2=='='){
    58a6:	fe 01       	movw	r30, r28
    58a8:	ee 58       	subi	r30, 0x8E	; 142
    58aa:	ff 4f       	sbci	r31, 0xFF	; 255
    58ac:	80 81       	ld	r24, Z
    58ae:	8d 33       	cpi	r24, 0x3D	; 61
    58b0:	09 f0       	breq	.+2      	; 0x58b4 <APP_vCalculatorLCD+0x8fa>
    58b2:	81 cf       	rjmp	.-254    	; 0x57b6 <APP_vCalculatorLCD+0x7fc>
			LCD_vInitWithOutClear();
    58b4:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <LCD_vInitWithOutClear>
			LCD_vGoTo(LineOne,3);
    58b8:	80 e8       	ldi	r24, 0x80	; 128
    58ba:	63 e0       	ldi	r22, 0x03	; 3
    58bc:	0e 94 6e 20 	call	0x40dc	; 0x40dc <LCD_vGoTo>
			LCD_vWriteCharacter(Loc_u8Symbol2);
    58c0:	fe 01       	movw	r30, r28
    58c2:	ee 58       	subi	r30, 0x8E	; 142
    58c4:	ff 4f       	sbci	r31, 0xFF	; 255
    58c6:	80 81       	ld	r24, Z
    58c8:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <LCD_vWriteCharacter>
			break;
		}
	}
	if(Loc_u8Symbol1=='+'){
    58cc:	fe 01       	movw	r30, r28
    58ce:	ed 58       	subi	r30, 0x8D	; 141
    58d0:	ff 4f       	sbci	r31, 0xFF	; 255
    58d2:	80 81       	ld	r24, Z
    58d4:	8b 32       	cpi	r24, 0x2B	; 43
    58d6:	79 f4       	brne	.+30     	; 0x58f6 <APP_vCalculatorLCD+0x93c>
		Loc_u8sum=Loc_u8Num1+Loc_u8Num2;
    58d8:	9e 01       	movw	r18, r28
    58da:	2f 58       	subi	r18, 0x8F	; 143
    58dc:	3f 4f       	sbci	r19, 0xFF	; 255
    58de:	fe 01       	movw	r30, r28
    58e0:	eb 58       	subi	r30, 0x8B	; 139
    58e2:	ff 4f       	sbci	r31, 0xFF	; 255
    58e4:	de 01       	movw	r26, r28
    58e6:	ac 58       	subi	r26, 0x8C	; 140
    58e8:	bf 4f       	sbci	r27, 0xFF	; 255
    58ea:	90 81       	ld	r25, Z
    58ec:	8c 91       	ld	r24, X
    58ee:	89 0f       	add	r24, r25
    58f0:	f9 01       	movw	r30, r18
    58f2:	80 83       	st	Z, r24
    58f4:	5c c0       	rjmp	.+184    	; 0x59ae <APP_vCalculatorLCD+0x9f4>
	}
	else if(Loc_u8Symbol1=='-'){
    58f6:	fe 01       	movw	r30, r28
    58f8:	ed 58       	subi	r30, 0x8D	; 141
    58fa:	ff 4f       	sbci	r31, 0xFF	; 255
    58fc:	80 81       	ld	r24, Z
    58fe:	8d 32       	cpi	r24, 0x2D	; 45
    5900:	89 f4       	brne	.+34     	; 0x5924 <APP_vCalculatorLCD+0x96a>
		Loc_u8sum=Loc_u8Num1-Loc_u8Num2;
    5902:	9e 01       	movw	r18, r28
    5904:	2f 58       	subi	r18, 0x8F	; 143
    5906:	3f 4f       	sbci	r19, 0xFF	; 255
    5908:	fe 01       	movw	r30, r28
    590a:	eb 58       	subi	r30, 0x8B	; 139
    590c:	ff 4f       	sbci	r31, 0xFF	; 255
    590e:	de 01       	movw	r26, r28
    5910:	ac 58       	subi	r26, 0x8C	; 140
    5912:	bf 4f       	sbci	r27, 0xFF	; 255
    5914:	90 81       	ld	r25, Z
    5916:	8c 91       	ld	r24, X
    5918:	f9 2f       	mov	r31, r25
    591a:	f8 1b       	sub	r31, r24
    591c:	8f 2f       	mov	r24, r31
    591e:	f9 01       	movw	r30, r18
    5920:	80 83       	st	Z, r24
    5922:	45 c0       	rjmp	.+138    	; 0x59ae <APP_vCalculatorLCD+0x9f4>
	}
	else if(Loc_u8Symbol1=='/'){
    5924:	fe 01       	movw	r30, r28
    5926:	ed 58       	subi	r30, 0x8D	; 141
    5928:	ff 4f       	sbci	r31, 0xFF	; 255
    592a:	80 81       	ld	r24, Z
    592c:	8f 32       	cpi	r24, 0x2F	; 47
    592e:	89 f4       	brne	.+34     	; 0x5952 <APP_vCalculatorLCD+0x998>
		Loc_u8sum=Loc_u8Num1/Loc_u8Num2;
    5930:	9e 01       	movw	r18, r28
    5932:	2f 58       	subi	r18, 0x8F	; 143
    5934:	3f 4f       	sbci	r19, 0xFF	; 255
    5936:	fe 01       	movw	r30, r28
    5938:	eb 58       	subi	r30, 0x8B	; 139
    593a:	ff 4f       	sbci	r31, 0xFF	; 255
    593c:	de 01       	movw	r26, r28
    593e:	ac 58       	subi	r26, 0x8C	; 140
    5940:	bf 4f       	sbci	r27, 0xFF	; 255
    5942:	80 81       	ld	r24, Z
    5944:	9c 91       	ld	r25, X
    5946:	69 2f       	mov	r22, r25
    5948:	0e 94 ca 35 	call	0x6b94	; 0x6b94 <__udivmodqi4>
    594c:	f9 01       	movw	r30, r18
    594e:	80 83       	st	Z, r24
    5950:	2e c0       	rjmp	.+92     	; 0x59ae <APP_vCalculatorLCD+0x9f4>
	}
	else if(Loc_u8Symbol1=='*'){
    5952:	fe 01       	movw	r30, r28
    5954:	ed 58       	subi	r30, 0x8D	; 141
    5956:	ff 4f       	sbci	r31, 0xFF	; 255
    5958:	80 81       	ld	r24, Z
    595a:	8a 32       	cpi	r24, 0x2A	; 42
    595c:	89 f4       	brne	.+34     	; 0x5980 <APP_vCalculatorLCD+0x9c6>
		Loc_u8sum=Loc_u8Num1*Loc_u8Num2;
    595e:	9e 01       	movw	r18, r28
    5960:	2f 58       	subi	r18, 0x8F	; 143
    5962:	3f 4f       	sbci	r19, 0xFF	; 255
    5964:	fe 01       	movw	r30, r28
    5966:	eb 58       	subi	r30, 0x8B	; 139
    5968:	ff 4f       	sbci	r31, 0xFF	; 255
    596a:	de 01       	movw	r26, r28
    596c:	ac 58       	subi	r26, 0x8C	; 140
    596e:	bf 4f       	sbci	r27, 0xFF	; 255
    5970:	90 81       	ld	r25, Z
    5972:	8c 91       	ld	r24, X
    5974:	98 9f       	mul	r25, r24
    5976:	80 2d       	mov	r24, r0
    5978:	11 24       	eor	r1, r1
    597a:	f9 01       	movw	r30, r18
    597c:	80 83       	st	Z, r24
    597e:	17 c0       	rjmp	.+46     	; 0x59ae <APP_vCalculatorLCD+0x9f4>
	}
	else if(Loc_u8Symbol1=='%'){
    5980:	fe 01       	movw	r30, r28
    5982:	ed 58       	subi	r30, 0x8D	; 141
    5984:	ff 4f       	sbci	r31, 0xFF	; 255
    5986:	80 81       	ld	r24, Z
    5988:	85 32       	cpi	r24, 0x25	; 37
    598a:	89 f4       	brne	.+34     	; 0x59ae <APP_vCalculatorLCD+0x9f4>
		Loc_u8sum=Loc_u8Num1%Loc_u8Num2;
    598c:	9e 01       	movw	r18, r28
    598e:	2f 58       	subi	r18, 0x8F	; 143
    5990:	3f 4f       	sbci	r19, 0xFF	; 255
    5992:	fe 01       	movw	r30, r28
    5994:	eb 58       	subi	r30, 0x8B	; 139
    5996:	ff 4f       	sbci	r31, 0xFF	; 255
    5998:	de 01       	movw	r26, r28
    599a:	ac 58       	subi	r26, 0x8C	; 140
    599c:	bf 4f       	sbci	r27, 0xFF	; 255
    599e:	80 81       	ld	r24, Z
    59a0:	9c 91       	ld	r25, X
    59a2:	69 2f       	mov	r22, r25
    59a4:	0e 94 ca 35 	call	0x6b94	; 0x6b94 <__udivmodqi4>
    59a8:	89 2f       	mov	r24, r25
    59aa:	f9 01       	movw	r30, r18
    59ac:	80 83       	st	Z, r24
	}
	else{
		//do nothing
	}
	LCD_vInitWithOutClear();
    59ae:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <LCD_vInitWithOutClear>
	LCD_vGoTo(LineOne,4);
    59b2:	80 e8       	ldi	r24, 0x80	; 128
    59b4:	64 e0       	ldi	r22, 0x04	; 4
    59b6:	0e 94 6e 20 	call	0x40dc	; 0x40dc <LCD_vGoTo>
	u8 arr[3];
	APP_vToString(arr,Loc_u8sum);
    59ba:	fe 01       	movw	r30, r28
    59bc:	ef 58       	subi	r30, 0x8F	; 143
    59be:	ff 4f       	sbci	r31, 0xFF	; 255
    59c0:	80 81       	ld	r24, Z
    59c2:	28 2f       	mov	r18, r24
    59c4:	30 e0       	ldi	r19, 0x00	; 0
    59c6:	ce 01       	movw	r24, r28
    59c8:	8a 58       	subi	r24, 0x8A	; 138
    59ca:	9f 4f       	sbci	r25, 0xFF	; 255
    59cc:	b9 01       	movw	r22, r18
    59ce:	0e 94 77 27 	call	0x4eee	; 0x4eee <APP_vToString>
	LCD_vWriteString(arr);
    59d2:	ce 01       	movw	r24, r28
    59d4:	8a 58       	subi	r24, 0x8A	; 138
    59d6:	9f 4f       	sbci	r25, 0xFF	; 255
    59d8:	0e 94 07 21 	call	0x420e	; 0x420e <LCD_vWriteString>
    59dc:	80 e0       	ldi	r24, 0x00	; 0
    59de:	90 e0       	ldi	r25, 0x00	; 0
    59e0:	a8 ec       	ldi	r26, 0xC8	; 200
    59e2:	b2 e4       	ldi	r27, 0x42	; 66
    59e4:	8b 87       	std	Y+11, r24	; 0x0b
    59e6:	9c 87       	std	Y+12, r25	; 0x0c
    59e8:	ad 87       	std	Y+13, r26	; 0x0d
    59ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    59ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    59ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    59f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    59f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    59f4:	20 e0       	ldi	r18, 0x00	; 0
    59f6:	30 e0       	ldi	r19, 0x00	; 0
    59f8:	4a e7       	ldi	r20, 0x7A	; 122
    59fa:	55 e4       	ldi	r21, 0x45	; 69
    59fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a00:	dc 01       	movw	r26, r24
    5a02:	cb 01       	movw	r24, r22
    5a04:	8f 83       	std	Y+7, r24	; 0x07
    5a06:	98 87       	std	Y+8, r25	; 0x08
    5a08:	a9 87       	std	Y+9, r26	; 0x09
    5a0a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5a0c:	6f 81       	ldd	r22, Y+7	; 0x07
    5a0e:	78 85       	ldd	r23, Y+8	; 0x08
    5a10:	89 85       	ldd	r24, Y+9	; 0x09
    5a12:	9a 85       	ldd	r25, Y+10	; 0x0a
    5a14:	20 e0       	ldi	r18, 0x00	; 0
    5a16:	30 e0       	ldi	r19, 0x00	; 0
    5a18:	40 e8       	ldi	r20, 0x80	; 128
    5a1a:	5f e3       	ldi	r21, 0x3F	; 63
    5a1c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5a20:	88 23       	and	r24, r24
    5a22:	2c f4       	brge	.+10     	; 0x5a2e <APP_vCalculatorLCD+0xa74>
		__ticks = 1;
    5a24:	81 e0       	ldi	r24, 0x01	; 1
    5a26:	90 e0       	ldi	r25, 0x00	; 0
    5a28:	9e 83       	std	Y+6, r25	; 0x06
    5a2a:	8d 83       	std	Y+5, r24	; 0x05
    5a2c:	3f c0       	rjmp	.+126    	; 0x5aac <APP_vCalculatorLCD+0xaf2>
	else if (__tmp > 65535)
    5a2e:	6f 81       	ldd	r22, Y+7	; 0x07
    5a30:	78 85       	ldd	r23, Y+8	; 0x08
    5a32:	89 85       	ldd	r24, Y+9	; 0x09
    5a34:	9a 85       	ldd	r25, Y+10	; 0x0a
    5a36:	20 e0       	ldi	r18, 0x00	; 0
    5a38:	3f ef       	ldi	r19, 0xFF	; 255
    5a3a:	4f e7       	ldi	r20, 0x7F	; 127
    5a3c:	57 e4       	ldi	r21, 0x47	; 71
    5a3e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5a42:	18 16       	cp	r1, r24
    5a44:	4c f5       	brge	.+82     	; 0x5a98 <APP_vCalculatorLCD+0xade>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5a46:	6b 85       	ldd	r22, Y+11	; 0x0b
    5a48:	7c 85       	ldd	r23, Y+12	; 0x0c
    5a4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    5a4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    5a4e:	20 e0       	ldi	r18, 0x00	; 0
    5a50:	30 e0       	ldi	r19, 0x00	; 0
    5a52:	40 e2       	ldi	r20, 0x20	; 32
    5a54:	51 e4       	ldi	r21, 0x41	; 65
    5a56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a5a:	dc 01       	movw	r26, r24
    5a5c:	cb 01       	movw	r24, r22
    5a5e:	bc 01       	movw	r22, r24
    5a60:	cd 01       	movw	r24, r26
    5a62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a66:	dc 01       	movw	r26, r24
    5a68:	cb 01       	movw	r24, r22
    5a6a:	9e 83       	std	Y+6, r25	; 0x06
    5a6c:	8d 83       	std	Y+5, r24	; 0x05
    5a6e:	0f c0       	rjmp	.+30     	; 0x5a8e <APP_vCalculatorLCD+0xad4>
    5a70:	80 e9       	ldi	r24, 0x90	; 144
    5a72:	91 e0       	ldi	r25, 0x01	; 1
    5a74:	9c 83       	std	Y+4, r25	; 0x04
    5a76:	8b 83       	std	Y+3, r24	; 0x03
    5a78:	8b 81       	ldd	r24, Y+3	; 0x03
    5a7a:	9c 81       	ldd	r25, Y+4	; 0x04
    5a7c:	01 97       	sbiw	r24, 0x01	; 1
    5a7e:	f1 f7       	brne	.-4      	; 0x5a7c <APP_vCalculatorLCD+0xac2>
    5a80:	9c 83       	std	Y+4, r25	; 0x04
    5a82:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5a84:	8d 81       	ldd	r24, Y+5	; 0x05
    5a86:	9e 81       	ldd	r25, Y+6	; 0x06
    5a88:	01 97       	sbiw	r24, 0x01	; 1
    5a8a:	9e 83       	std	Y+6, r25	; 0x06
    5a8c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5a8e:	8d 81       	ldd	r24, Y+5	; 0x05
    5a90:	9e 81       	ldd	r25, Y+6	; 0x06
    5a92:	00 97       	sbiw	r24, 0x00	; 0
    5a94:	69 f7       	brne	.-38     	; 0x5a70 <APP_vCalculatorLCD+0xab6>
    5a96:	14 c0       	rjmp	.+40     	; 0x5ac0 <APP_vCalculatorLCD+0xb06>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5a98:	6f 81       	ldd	r22, Y+7	; 0x07
    5a9a:	78 85       	ldd	r23, Y+8	; 0x08
    5a9c:	89 85       	ldd	r24, Y+9	; 0x09
    5a9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5aa0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5aa4:	dc 01       	movw	r26, r24
    5aa6:	cb 01       	movw	r24, r22
    5aa8:	9e 83       	std	Y+6, r25	; 0x06
    5aaa:	8d 83       	std	Y+5, r24	; 0x05
    5aac:	8d 81       	ldd	r24, Y+5	; 0x05
    5aae:	9e 81       	ldd	r25, Y+6	; 0x06
    5ab0:	9a 83       	std	Y+2, r25	; 0x02
    5ab2:	89 83       	std	Y+1, r24	; 0x01
    5ab4:	89 81       	ldd	r24, Y+1	; 0x01
    5ab6:	9a 81       	ldd	r25, Y+2	; 0x02
    5ab8:	01 97       	sbiw	r24, 0x01	; 1
    5aba:	f1 f7       	brne	.-4      	; 0x5ab8 <APP_vCalculatorLCD+0xafe>
    5abc:	9a 83       	std	Y+2, r25	; 0x02
    5abe:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
}
    5ac0:	c8 58       	subi	r28, 0x88	; 136
    5ac2:	df 4f       	sbci	r29, 0xFF	; 255
    5ac4:	0f b6       	in	r0, 0x3f	; 63
    5ac6:	f8 94       	cli
    5ac8:	de bf       	out	0x3e, r29	; 62
    5aca:	0f be       	out	0x3f, r0	; 63
    5acc:	cd bf       	out	0x3d, r28	; 61
    5ace:	cf 91       	pop	r28
    5ad0:	df 91       	pop	r29
    5ad2:	1f 91       	pop	r17
    5ad4:	0f 91       	pop	r16
    5ad6:	08 95       	ret

00005ad8 <APP_vLocker>:
//-----------------
void APP_vLocker(u8 *Loc_CorrectUserName4,u8 *Loc_CorrectPassword3){
    5ad8:	0f 93       	push	r16
    5ada:	1f 93       	push	r17
    5adc:	df 93       	push	r29
    5ade:	cf 93       	push	r28
    5ae0:	cd b7       	in	r28, 0x3d	; 61
    5ae2:	de b7       	in	r29, 0x3e	; 62
    5ae4:	c6 5b       	subi	r28, 0xB6	; 182
    5ae6:	d0 40       	sbci	r29, 0x00	; 0
    5ae8:	0f b6       	in	r0, 0x3f	; 63
    5aea:	f8 94       	cli
    5aec:	de bf       	out	0x3e, r29	; 62
    5aee:	0f be       	out	0x3f, r0	; 63
    5af0:	cd bf       	out	0x3d, r28	; 61
    5af2:	fe 01       	movw	r30, r28
    5af4:	eb 56       	subi	r30, 0x6B	; 107
    5af6:	ff 4f       	sbci	r31, 0xFF	; 255
    5af8:	91 83       	std	Z+1, r25	; 0x01
    5afa:	80 83       	st	Z, r24
    5afc:	fe 01       	movw	r30, r28
    5afe:	e9 56       	subi	r30, 0x69	; 105
    5b00:	ff 4f       	sbci	r31, 0xFF	; 255
    5b02:	71 83       	std	Z+1, r23	; 0x01
    5b04:	60 83       	st	Z, r22
	u8 i;
	u8 user[4],pass[3];
	while(1){
		LCD_vInit();
    5b06:	0e 94 a8 1a 	call	0x3550	; 0x3550 <LCD_vInit>
		u8 User[]="Enter UserNam";
    5b0a:	ce 01       	movw	r24, r28
    5b0c:	80 5b       	subi	r24, 0xB0	; 176
    5b0e:	9f 4f       	sbci	r25, 0xFF	; 255
    5b10:	c7 56       	subi	r28, 0x67	; 103
    5b12:	df 4f       	sbci	r29, 0xFF	; 255
    5b14:	99 83       	std	Y+1, r25	; 0x01
    5b16:	88 83       	st	Y, r24
    5b18:	c9 59       	subi	r28, 0x99	; 153
    5b1a:	d0 40       	sbci	r29, 0x00	; 0
    5b1c:	80 e6       	ldi	r24, 0x60	; 96
    5b1e:	90 e0       	ldi	r25, 0x00	; 0
    5b20:	c5 56       	subi	r28, 0x65	; 101
    5b22:	df 4f       	sbci	r29, 0xFF	; 255
    5b24:	99 83       	std	Y+1, r25	; 0x01
    5b26:	88 83       	st	Y, r24
    5b28:	cb 59       	subi	r28, 0x9B	; 155
    5b2a:	d0 40       	sbci	r29, 0x00	; 0
    5b2c:	9e e0       	ldi	r25, 0x0E	; 14
    5b2e:	c3 56       	subi	r28, 0x63	; 99
    5b30:	df 4f       	sbci	r29, 0xFF	; 255
    5b32:	98 83       	st	Y, r25
    5b34:	cd 59       	subi	r28, 0x9D	; 157
    5b36:	d0 40       	sbci	r29, 0x00	; 0
    5b38:	c5 56       	subi	r28, 0x65	; 101
    5b3a:	df 4f       	sbci	r29, 0xFF	; 255
    5b3c:	e8 81       	ld	r30, Y
    5b3e:	f9 81       	ldd	r31, Y+1	; 0x01
    5b40:	cb 59       	subi	r28, 0x9B	; 155
    5b42:	d0 40       	sbci	r29, 0x00	; 0
    5b44:	00 80       	ld	r0, Z
    5b46:	c5 56       	subi	r28, 0x65	; 101
    5b48:	df 4f       	sbci	r29, 0xFF	; 255
    5b4a:	88 81       	ld	r24, Y
    5b4c:	99 81       	ldd	r25, Y+1	; 0x01
    5b4e:	cb 59       	subi	r28, 0x9B	; 155
    5b50:	d0 40       	sbci	r29, 0x00	; 0
    5b52:	01 96       	adiw	r24, 0x01	; 1
    5b54:	c5 56       	subi	r28, 0x65	; 101
    5b56:	df 4f       	sbci	r29, 0xFF	; 255
    5b58:	99 83       	std	Y+1, r25	; 0x01
    5b5a:	88 83       	st	Y, r24
    5b5c:	cb 59       	subi	r28, 0x9B	; 155
    5b5e:	d0 40       	sbci	r29, 0x00	; 0
    5b60:	c7 56       	subi	r28, 0x67	; 103
    5b62:	df 4f       	sbci	r29, 0xFF	; 255
    5b64:	e8 81       	ld	r30, Y
    5b66:	f9 81       	ldd	r31, Y+1	; 0x01
    5b68:	c9 59       	subi	r28, 0x99	; 153
    5b6a:	d0 40       	sbci	r29, 0x00	; 0
    5b6c:	00 82       	st	Z, r0
    5b6e:	c7 56       	subi	r28, 0x67	; 103
    5b70:	df 4f       	sbci	r29, 0xFF	; 255
    5b72:	88 81       	ld	r24, Y
    5b74:	99 81       	ldd	r25, Y+1	; 0x01
    5b76:	c9 59       	subi	r28, 0x99	; 153
    5b78:	d0 40       	sbci	r29, 0x00	; 0
    5b7a:	01 96       	adiw	r24, 0x01	; 1
    5b7c:	c7 56       	subi	r28, 0x67	; 103
    5b7e:	df 4f       	sbci	r29, 0xFF	; 255
    5b80:	99 83       	std	Y+1, r25	; 0x01
    5b82:	88 83       	st	Y, r24
    5b84:	c9 59       	subi	r28, 0x99	; 153
    5b86:	d0 40       	sbci	r29, 0x00	; 0
    5b88:	c3 56       	subi	r28, 0x63	; 99
    5b8a:	df 4f       	sbci	r29, 0xFF	; 255
    5b8c:	98 81       	ld	r25, Y
    5b8e:	cd 59       	subi	r28, 0x9D	; 157
    5b90:	d0 40       	sbci	r29, 0x00	; 0
    5b92:	91 50       	subi	r25, 0x01	; 1
    5b94:	c3 56       	subi	r28, 0x63	; 99
    5b96:	df 4f       	sbci	r29, 0xFF	; 255
    5b98:	98 83       	st	Y, r25
    5b9a:	cd 59       	subi	r28, 0x9D	; 157
    5b9c:	d0 40       	sbci	r29, 0x00	; 0
    5b9e:	c3 56       	subi	r28, 0x63	; 99
    5ba0:	df 4f       	sbci	r29, 0xFF	; 255
    5ba2:	e8 81       	ld	r30, Y
    5ba4:	cd 59       	subi	r28, 0x9D	; 157
    5ba6:	d0 40       	sbci	r29, 0x00	; 0
    5ba8:	ee 23       	and	r30, r30
    5baa:	31 f6       	brne	.-116    	; 0x5b38 <APP_vLocker+0x60>
		LCD_vWriteString(User);
    5bac:	ce 01       	movw	r24, r28
    5bae:	80 5b       	subi	r24, 0xB0	; 176
    5bb0:	9f 4f       	sbci	r25, 0xFF	; 255
    5bb2:	0e 94 07 21 	call	0x420e	; 0x420e <LCD_vWriteString>
		for(i=0;i<4;i++){
    5bb6:	fe 01       	movw	r30, r28
    5bb8:	e8 5b       	subi	r30, 0xB8	; 184
    5bba:	ff 4f       	sbci	r31, 0xFF	; 255
    5bbc:	10 82       	st	Z, r1
    5bbe:	c9 c0       	rjmp	.+402    	; 0x5d52 <APP_vLocker+0x27a>
			KAYPAD_vInit();
    5bc0:	0e 94 88 21 	call	0x4310	; 0x4310 <KAYPAD_vInit>
			while(1){
				user[i]=KAYPAD_u8GetKey();
    5bc4:	fe 01       	movw	r30, r28
    5bc6:	e8 5b       	subi	r30, 0xB8	; 184
    5bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    5bca:	80 81       	ld	r24, Z
    5bcc:	08 2f       	mov	r16, r24
    5bce:	10 e0       	ldi	r17, 0x00	; 0
    5bd0:	0e 94 97 21 	call	0x432e	; 0x432e <KAYPAD_u8GetKey>
    5bd4:	28 2f       	mov	r18, r24
    5bd6:	ce 01       	movw	r24, r28
    5bd8:	87 5b       	subi	r24, 0xB7	; 183
    5bda:	9f 4f       	sbci	r25, 0xFF	; 255
    5bdc:	fc 01       	movw	r30, r24
    5bde:	e0 0f       	add	r30, r16
    5be0:	f1 1f       	adc	r31, r17
    5be2:	20 83       	st	Z, r18
    5be4:	fe 01       	movw	r30, r28
    5be6:	ed 5b       	subi	r30, 0xBD	; 189
    5be8:	ff 4f       	sbci	r31, 0xFF	; 255
    5bea:	80 e0       	ldi	r24, 0x00	; 0
    5bec:	90 e0       	ldi	r25, 0x00	; 0
    5bee:	a8 e4       	ldi	r26, 0x48	; 72
    5bf0:	b2 e4       	ldi	r27, 0x42	; 66
    5bf2:	80 83       	st	Z, r24
    5bf4:	91 83       	std	Z+1, r25	; 0x01
    5bf6:	a2 83       	std	Z+2, r26	; 0x02
    5bf8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5bfa:	8e 01       	movw	r16, r28
    5bfc:	01 5c       	subi	r16, 0xC1	; 193
    5bfe:	1f 4f       	sbci	r17, 0xFF	; 255
    5c00:	fe 01       	movw	r30, r28
    5c02:	ed 5b       	subi	r30, 0xBD	; 189
    5c04:	ff 4f       	sbci	r31, 0xFF	; 255
    5c06:	60 81       	ld	r22, Z
    5c08:	71 81       	ldd	r23, Z+1	; 0x01
    5c0a:	82 81       	ldd	r24, Z+2	; 0x02
    5c0c:	93 81       	ldd	r25, Z+3	; 0x03
    5c0e:	20 e0       	ldi	r18, 0x00	; 0
    5c10:	30 e0       	ldi	r19, 0x00	; 0
    5c12:	4a e7       	ldi	r20, 0x7A	; 122
    5c14:	55 e4       	ldi	r21, 0x45	; 69
    5c16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5c1a:	dc 01       	movw	r26, r24
    5c1c:	cb 01       	movw	r24, r22
    5c1e:	f8 01       	movw	r30, r16
    5c20:	80 83       	st	Z, r24
    5c22:	91 83       	std	Z+1, r25	; 0x01
    5c24:	a2 83       	std	Z+2, r26	; 0x02
    5c26:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5c28:	fe 01       	movw	r30, r28
    5c2a:	ff 96       	adiw	r30, 0x3f	; 63
    5c2c:	60 81       	ld	r22, Z
    5c2e:	71 81       	ldd	r23, Z+1	; 0x01
    5c30:	82 81       	ldd	r24, Z+2	; 0x02
    5c32:	93 81       	ldd	r25, Z+3	; 0x03
    5c34:	20 e0       	ldi	r18, 0x00	; 0
    5c36:	30 e0       	ldi	r19, 0x00	; 0
    5c38:	40 e8       	ldi	r20, 0x80	; 128
    5c3a:	5f e3       	ldi	r21, 0x3F	; 63
    5c3c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5c40:	88 23       	and	r24, r24
    5c42:	2c f4       	brge	.+10     	; 0x5c4e <APP_vLocker+0x176>
		__ticks = 1;
    5c44:	81 e0       	ldi	r24, 0x01	; 1
    5c46:	90 e0       	ldi	r25, 0x00	; 0
    5c48:	9e af       	std	Y+62, r25	; 0x3e
    5c4a:	8d af       	std	Y+61, r24	; 0x3d
    5c4c:	46 c0       	rjmp	.+140    	; 0x5cda <APP_vLocker+0x202>
	else if (__tmp > 65535)
    5c4e:	fe 01       	movw	r30, r28
    5c50:	ff 96       	adiw	r30, 0x3f	; 63
    5c52:	60 81       	ld	r22, Z
    5c54:	71 81       	ldd	r23, Z+1	; 0x01
    5c56:	82 81       	ldd	r24, Z+2	; 0x02
    5c58:	93 81       	ldd	r25, Z+3	; 0x03
    5c5a:	20 e0       	ldi	r18, 0x00	; 0
    5c5c:	3f ef       	ldi	r19, 0xFF	; 255
    5c5e:	4f e7       	ldi	r20, 0x7F	; 127
    5c60:	57 e4       	ldi	r21, 0x47	; 71
    5c62:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5c66:	18 16       	cp	r1, r24
    5c68:	64 f5       	brge	.+88     	; 0x5cc2 <APP_vLocker+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5c6a:	fe 01       	movw	r30, r28
    5c6c:	ed 5b       	subi	r30, 0xBD	; 189
    5c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    5c70:	60 81       	ld	r22, Z
    5c72:	71 81       	ldd	r23, Z+1	; 0x01
    5c74:	82 81       	ldd	r24, Z+2	; 0x02
    5c76:	93 81       	ldd	r25, Z+3	; 0x03
    5c78:	20 e0       	ldi	r18, 0x00	; 0
    5c7a:	30 e0       	ldi	r19, 0x00	; 0
    5c7c:	40 e2       	ldi	r20, 0x20	; 32
    5c7e:	51 e4       	ldi	r21, 0x41	; 65
    5c80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5c84:	dc 01       	movw	r26, r24
    5c86:	cb 01       	movw	r24, r22
    5c88:	bc 01       	movw	r22, r24
    5c8a:	cd 01       	movw	r24, r26
    5c8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5c90:	dc 01       	movw	r26, r24
    5c92:	cb 01       	movw	r24, r22
    5c94:	9e af       	std	Y+62, r25	; 0x3e
    5c96:	8d af       	std	Y+61, r24	; 0x3d
    5c98:	0f c0       	rjmp	.+30     	; 0x5cb8 <APP_vLocker+0x1e0>
    5c9a:	80 e9       	ldi	r24, 0x90	; 144
    5c9c:	91 e0       	ldi	r25, 0x01	; 1
    5c9e:	9c af       	std	Y+60, r25	; 0x3c
    5ca0:	8b af       	std	Y+59, r24	; 0x3b
    5ca2:	8b ad       	ldd	r24, Y+59	; 0x3b
    5ca4:	9c ad       	ldd	r25, Y+60	; 0x3c
    5ca6:	01 97       	sbiw	r24, 0x01	; 1
    5ca8:	f1 f7       	brne	.-4      	; 0x5ca6 <APP_vLocker+0x1ce>
    5caa:	9c af       	std	Y+60, r25	; 0x3c
    5cac:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5cae:	8d ad       	ldd	r24, Y+61	; 0x3d
    5cb0:	9e ad       	ldd	r25, Y+62	; 0x3e
    5cb2:	01 97       	sbiw	r24, 0x01	; 1
    5cb4:	9e af       	std	Y+62, r25	; 0x3e
    5cb6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5cb8:	8d ad       	ldd	r24, Y+61	; 0x3d
    5cba:	9e ad       	ldd	r25, Y+62	; 0x3e
    5cbc:	00 97       	sbiw	r24, 0x00	; 0
    5cbe:	69 f7       	brne	.-38     	; 0x5c9a <APP_vLocker+0x1c2>
    5cc0:	16 c0       	rjmp	.+44     	; 0x5cee <APP_vLocker+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5cc2:	fe 01       	movw	r30, r28
    5cc4:	ff 96       	adiw	r30, 0x3f	; 63
    5cc6:	60 81       	ld	r22, Z
    5cc8:	71 81       	ldd	r23, Z+1	; 0x01
    5cca:	82 81       	ldd	r24, Z+2	; 0x02
    5ccc:	93 81       	ldd	r25, Z+3	; 0x03
    5cce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5cd2:	dc 01       	movw	r26, r24
    5cd4:	cb 01       	movw	r24, r22
    5cd6:	9e af       	std	Y+62, r25	; 0x3e
    5cd8:	8d af       	std	Y+61, r24	; 0x3d
    5cda:	8d ad       	ldd	r24, Y+61	; 0x3d
    5cdc:	9e ad       	ldd	r25, Y+62	; 0x3e
    5cde:	9a af       	std	Y+58, r25	; 0x3a
    5ce0:	89 af       	std	Y+57, r24	; 0x39
    5ce2:	89 ad       	ldd	r24, Y+57	; 0x39
    5ce4:	9a ad       	ldd	r25, Y+58	; 0x3a
    5ce6:	01 97       	sbiw	r24, 0x01	; 1
    5ce8:	f1 f7       	brne	.-4      	; 0x5ce6 <APP_vLocker+0x20e>
    5cea:	9a af       	std	Y+58, r25	; 0x3a
    5cec:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(50);
				if(user[i]!=0xff){
    5cee:	fe 01       	movw	r30, r28
    5cf0:	e8 5b       	subi	r30, 0xB8	; 184
    5cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    5cf4:	80 81       	ld	r24, Z
    5cf6:	28 2f       	mov	r18, r24
    5cf8:	30 e0       	ldi	r19, 0x00	; 0
    5cfa:	ce 01       	movw	r24, r28
    5cfc:	87 5b       	subi	r24, 0xB7	; 183
    5cfe:	9f 4f       	sbci	r25, 0xFF	; 255
    5d00:	fc 01       	movw	r30, r24
    5d02:	e2 0f       	add	r30, r18
    5d04:	f3 1f       	adc	r31, r19
    5d06:	80 81       	ld	r24, Z
    5d08:	8f 3f       	cpi	r24, 0xFF	; 255
    5d0a:	09 f4       	brne	.+2      	; 0x5d0e <APP_vLocker+0x236>
    5d0c:	5b cf       	rjmp	.-330    	; 0x5bc4 <APP_vLocker+0xec>
					LCD_vInitWithOutClear();
    5d0e:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <LCD_vInitWithOutClear>
					LCD_vGoTo(LineTwo,i);
    5d12:	fe 01       	movw	r30, r28
    5d14:	e8 5b       	subi	r30, 0xB8	; 184
    5d16:	ff 4f       	sbci	r31, 0xFF	; 255
    5d18:	80 ec       	ldi	r24, 0xC0	; 192
    5d1a:	60 81       	ld	r22, Z
    5d1c:	0e 94 6e 20 	call	0x40dc	; 0x40dc <LCD_vGoTo>
					LCD_vWriteCharacter((user[i])+48);
    5d20:	fe 01       	movw	r30, r28
    5d22:	e8 5b       	subi	r30, 0xB8	; 184
    5d24:	ff 4f       	sbci	r31, 0xFF	; 255
    5d26:	80 81       	ld	r24, Z
    5d28:	28 2f       	mov	r18, r24
    5d2a:	30 e0       	ldi	r19, 0x00	; 0
    5d2c:	ce 01       	movw	r24, r28
    5d2e:	87 5b       	subi	r24, 0xB7	; 183
    5d30:	9f 4f       	sbci	r25, 0xFF	; 255
    5d32:	fc 01       	movw	r30, r24
    5d34:	e2 0f       	add	r30, r18
    5d36:	f3 1f       	adc	r31, r19
    5d38:	80 81       	ld	r24, Z
    5d3a:	80 5d       	subi	r24, 0xD0	; 208
    5d3c:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <LCD_vWriteCharacter>
	u8 user[4],pass[3];
	while(1){
		LCD_vInit();
		u8 User[]="Enter UserNam";
		LCD_vWriteString(User);
		for(i=0;i<4;i++){
    5d40:	de 01       	movw	r26, r28
    5d42:	a8 5b       	subi	r26, 0xB8	; 184
    5d44:	bf 4f       	sbci	r27, 0xFF	; 255
    5d46:	fe 01       	movw	r30, r28
    5d48:	e8 5b       	subi	r30, 0xB8	; 184
    5d4a:	ff 4f       	sbci	r31, 0xFF	; 255
    5d4c:	80 81       	ld	r24, Z
    5d4e:	8f 5f       	subi	r24, 0xFF	; 255
    5d50:	8c 93       	st	X, r24
    5d52:	fe 01       	movw	r30, r28
    5d54:	e8 5b       	subi	r30, 0xB8	; 184
    5d56:	ff 4f       	sbci	r31, 0xFF	; 255
    5d58:	80 81       	ld	r24, Z
    5d5a:	84 30       	cpi	r24, 0x04	; 4
    5d5c:	08 f4       	brcc	.+2      	; 0x5d60 <APP_vLocker+0x288>
    5d5e:	30 cf       	rjmp	.-416    	; 0x5bc0 <APP_vLocker+0xe8>
					break;
				}
			}

		}
		if(APP_u8compareArray(Loc_CorrectUserName4,user,4)==0){
    5d60:	fe 01       	movw	r30, r28
    5d62:	eb 56       	subi	r30, 0x6B	; 107
    5d64:	ff 4f       	sbci	r31, 0xFF	; 255
    5d66:	80 81       	ld	r24, Z
    5d68:	91 81       	ldd	r25, Z+1	; 0x01
    5d6a:	9e 01       	movw	r18, r28
    5d6c:	27 5b       	subi	r18, 0xB7	; 183
    5d6e:	3f 4f       	sbci	r19, 0xFF	; 255
    5d70:	b9 01       	movw	r22, r18
    5d72:	44 e0       	ldi	r20, 0x04	; 4
    5d74:	0e 94 de 32 	call	0x65bc	; 0x65bc <APP_u8compareArray>
    5d78:	88 23       	and	r24, r24
    5d7a:	09 f0       	breq	.+2      	; 0x5d7e <APP_vLocker+0x2a6>
    5d7c:	cb c0       	rjmp	.+406    	; 0x5f14 <APP_vLocker+0x43c>
			u8 Wrong[]="Wrong UserNam";
    5d7e:	ce 01       	movw	r24, r28
    5d80:	82 5a       	subi	r24, 0xA2	; 162
    5d82:	9f 4f       	sbci	r25, 0xFF	; 255
    5d84:	c2 56       	subi	r28, 0x62	; 98
    5d86:	df 4f       	sbci	r29, 0xFF	; 255
    5d88:	99 83       	std	Y+1, r25	; 0x01
    5d8a:	88 83       	st	Y, r24
    5d8c:	ce 59       	subi	r28, 0x9E	; 158
    5d8e:	d0 40       	sbci	r29, 0x00	; 0
    5d90:	8e e6       	ldi	r24, 0x6E	; 110
    5d92:	90 e0       	ldi	r25, 0x00	; 0
    5d94:	c0 56       	subi	r28, 0x60	; 96
    5d96:	df 4f       	sbci	r29, 0xFF	; 255
    5d98:	99 83       	std	Y+1, r25	; 0x01
    5d9a:	88 83       	st	Y, r24
    5d9c:	c0 5a       	subi	r28, 0xA0	; 160
    5d9e:	d0 40       	sbci	r29, 0x00	; 0
    5da0:	9e e0       	ldi	r25, 0x0E	; 14
    5da2:	ce 55       	subi	r28, 0x5E	; 94
    5da4:	df 4f       	sbci	r29, 0xFF	; 255
    5da6:	98 83       	st	Y, r25
    5da8:	c2 5a       	subi	r28, 0xA2	; 162
    5daa:	d0 40       	sbci	r29, 0x00	; 0
    5dac:	c0 56       	subi	r28, 0x60	; 96
    5dae:	df 4f       	sbci	r29, 0xFF	; 255
    5db0:	e8 81       	ld	r30, Y
    5db2:	f9 81       	ldd	r31, Y+1	; 0x01
    5db4:	c0 5a       	subi	r28, 0xA0	; 160
    5db6:	d0 40       	sbci	r29, 0x00	; 0
    5db8:	00 80       	ld	r0, Z
    5dba:	c0 56       	subi	r28, 0x60	; 96
    5dbc:	df 4f       	sbci	r29, 0xFF	; 255
    5dbe:	88 81       	ld	r24, Y
    5dc0:	99 81       	ldd	r25, Y+1	; 0x01
    5dc2:	c0 5a       	subi	r28, 0xA0	; 160
    5dc4:	d0 40       	sbci	r29, 0x00	; 0
    5dc6:	01 96       	adiw	r24, 0x01	; 1
    5dc8:	c0 56       	subi	r28, 0x60	; 96
    5dca:	df 4f       	sbci	r29, 0xFF	; 255
    5dcc:	99 83       	std	Y+1, r25	; 0x01
    5dce:	88 83       	st	Y, r24
    5dd0:	c0 5a       	subi	r28, 0xA0	; 160
    5dd2:	d0 40       	sbci	r29, 0x00	; 0
    5dd4:	c2 56       	subi	r28, 0x62	; 98
    5dd6:	df 4f       	sbci	r29, 0xFF	; 255
    5dd8:	e8 81       	ld	r30, Y
    5dda:	f9 81       	ldd	r31, Y+1	; 0x01
    5ddc:	ce 59       	subi	r28, 0x9E	; 158
    5dde:	d0 40       	sbci	r29, 0x00	; 0
    5de0:	00 82       	st	Z, r0
    5de2:	c2 56       	subi	r28, 0x62	; 98
    5de4:	df 4f       	sbci	r29, 0xFF	; 255
    5de6:	88 81       	ld	r24, Y
    5de8:	99 81       	ldd	r25, Y+1	; 0x01
    5dea:	ce 59       	subi	r28, 0x9E	; 158
    5dec:	d0 40       	sbci	r29, 0x00	; 0
    5dee:	01 96       	adiw	r24, 0x01	; 1
    5df0:	c2 56       	subi	r28, 0x62	; 98
    5df2:	df 4f       	sbci	r29, 0xFF	; 255
    5df4:	99 83       	std	Y+1, r25	; 0x01
    5df6:	88 83       	st	Y, r24
    5df8:	ce 59       	subi	r28, 0x9E	; 158
    5dfa:	d0 40       	sbci	r29, 0x00	; 0
    5dfc:	ce 55       	subi	r28, 0x5E	; 94
    5dfe:	df 4f       	sbci	r29, 0xFF	; 255
    5e00:	98 81       	ld	r25, Y
    5e02:	c2 5a       	subi	r28, 0xA2	; 162
    5e04:	d0 40       	sbci	r29, 0x00	; 0
    5e06:	91 50       	subi	r25, 0x01	; 1
    5e08:	ce 55       	subi	r28, 0x5E	; 94
    5e0a:	df 4f       	sbci	r29, 0xFF	; 255
    5e0c:	98 83       	st	Y, r25
    5e0e:	c2 5a       	subi	r28, 0xA2	; 162
    5e10:	d0 40       	sbci	r29, 0x00	; 0
    5e12:	ce 55       	subi	r28, 0x5E	; 94
    5e14:	df 4f       	sbci	r29, 0xFF	; 255
    5e16:	e8 81       	ld	r30, Y
    5e18:	c2 5a       	subi	r28, 0xA2	; 162
    5e1a:	d0 40       	sbci	r29, 0x00	; 0
    5e1c:	ee 23       	and	r30, r30
    5e1e:	31 f6       	brne	.-116    	; 0x5dac <APP_vLocker+0x2d4>
			LCD_vInit();
    5e20:	0e 94 a8 1a 	call	0x3550	; 0x3550 <LCD_vInit>
			LCD_vWriteString(Wrong);
    5e24:	ce 01       	movw	r24, r28
    5e26:	82 5a       	subi	r24, 0xA2	; 162
    5e28:	9f 4f       	sbci	r25, 0xFF	; 255
    5e2a:	0e 94 07 21 	call	0x420e	; 0x420e <LCD_vWriteString>
    5e2e:	80 e0       	ldi	r24, 0x00	; 0
    5e30:	90 e0       	ldi	r25, 0x00	; 0
    5e32:	aa e7       	ldi	r26, 0x7A	; 122
    5e34:	b3 e4       	ldi	r27, 0x43	; 67
    5e36:	8d ab       	std	Y+53, r24	; 0x35
    5e38:	9e ab       	std	Y+54, r25	; 0x36
    5e3a:	af ab       	std	Y+55, r26	; 0x37
    5e3c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5e3e:	6d a9       	ldd	r22, Y+53	; 0x35
    5e40:	7e a9       	ldd	r23, Y+54	; 0x36
    5e42:	8f a9       	ldd	r24, Y+55	; 0x37
    5e44:	98 ad       	ldd	r25, Y+56	; 0x38
    5e46:	20 e0       	ldi	r18, 0x00	; 0
    5e48:	30 e0       	ldi	r19, 0x00	; 0
    5e4a:	4a e7       	ldi	r20, 0x7A	; 122
    5e4c:	55 e4       	ldi	r21, 0x45	; 69
    5e4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5e52:	dc 01       	movw	r26, r24
    5e54:	cb 01       	movw	r24, r22
    5e56:	89 ab       	std	Y+49, r24	; 0x31
    5e58:	9a ab       	std	Y+50, r25	; 0x32
    5e5a:	ab ab       	std	Y+51, r26	; 0x33
    5e5c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5e5e:	69 a9       	ldd	r22, Y+49	; 0x31
    5e60:	7a a9       	ldd	r23, Y+50	; 0x32
    5e62:	8b a9       	ldd	r24, Y+51	; 0x33
    5e64:	9c a9       	ldd	r25, Y+52	; 0x34
    5e66:	20 e0       	ldi	r18, 0x00	; 0
    5e68:	30 e0       	ldi	r19, 0x00	; 0
    5e6a:	40 e8       	ldi	r20, 0x80	; 128
    5e6c:	5f e3       	ldi	r21, 0x3F	; 63
    5e6e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5e72:	88 23       	and	r24, r24
    5e74:	2c f4       	brge	.+10     	; 0x5e80 <APP_vLocker+0x3a8>
		__ticks = 1;
    5e76:	81 e0       	ldi	r24, 0x01	; 1
    5e78:	90 e0       	ldi	r25, 0x00	; 0
    5e7a:	98 ab       	std	Y+48, r25	; 0x30
    5e7c:	8f a7       	std	Y+47, r24	; 0x2f
    5e7e:	3f c0       	rjmp	.+126    	; 0x5efe <APP_vLocker+0x426>
	else if (__tmp > 65535)
    5e80:	69 a9       	ldd	r22, Y+49	; 0x31
    5e82:	7a a9       	ldd	r23, Y+50	; 0x32
    5e84:	8b a9       	ldd	r24, Y+51	; 0x33
    5e86:	9c a9       	ldd	r25, Y+52	; 0x34
    5e88:	20 e0       	ldi	r18, 0x00	; 0
    5e8a:	3f ef       	ldi	r19, 0xFF	; 255
    5e8c:	4f e7       	ldi	r20, 0x7F	; 127
    5e8e:	57 e4       	ldi	r21, 0x47	; 71
    5e90:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5e94:	18 16       	cp	r1, r24
    5e96:	4c f5       	brge	.+82     	; 0x5eea <APP_vLocker+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5e98:	6d a9       	ldd	r22, Y+53	; 0x35
    5e9a:	7e a9       	ldd	r23, Y+54	; 0x36
    5e9c:	8f a9       	ldd	r24, Y+55	; 0x37
    5e9e:	98 ad       	ldd	r25, Y+56	; 0x38
    5ea0:	20 e0       	ldi	r18, 0x00	; 0
    5ea2:	30 e0       	ldi	r19, 0x00	; 0
    5ea4:	40 e2       	ldi	r20, 0x20	; 32
    5ea6:	51 e4       	ldi	r21, 0x41	; 65
    5ea8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5eac:	dc 01       	movw	r26, r24
    5eae:	cb 01       	movw	r24, r22
    5eb0:	bc 01       	movw	r22, r24
    5eb2:	cd 01       	movw	r24, r26
    5eb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5eb8:	dc 01       	movw	r26, r24
    5eba:	cb 01       	movw	r24, r22
    5ebc:	98 ab       	std	Y+48, r25	; 0x30
    5ebe:	8f a7       	std	Y+47, r24	; 0x2f
    5ec0:	0f c0       	rjmp	.+30     	; 0x5ee0 <APP_vLocker+0x408>
    5ec2:	80 e9       	ldi	r24, 0x90	; 144
    5ec4:	91 e0       	ldi	r25, 0x01	; 1
    5ec6:	9e a7       	std	Y+46, r25	; 0x2e
    5ec8:	8d a7       	std	Y+45, r24	; 0x2d
    5eca:	8d a5       	ldd	r24, Y+45	; 0x2d
    5ecc:	9e a5       	ldd	r25, Y+46	; 0x2e
    5ece:	01 97       	sbiw	r24, 0x01	; 1
    5ed0:	f1 f7       	brne	.-4      	; 0x5ece <APP_vLocker+0x3f6>
    5ed2:	9e a7       	std	Y+46, r25	; 0x2e
    5ed4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5ed6:	8f a5       	ldd	r24, Y+47	; 0x2f
    5ed8:	98 a9       	ldd	r25, Y+48	; 0x30
    5eda:	01 97       	sbiw	r24, 0x01	; 1
    5edc:	98 ab       	std	Y+48, r25	; 0x30
    5ede:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5ee0:	8f a5       	ldd	r24, Y+47	; 0x2f
    5ee2:	98 a9       	ldd	r25, Y+48	; 0x30
    5ee4:	00 97       	sbiw	r24, 0x00	; 0
    5ee6:	69 f7       	brne	.-38     	; 0x5ec2 <APP_vLocker+0x3ea>
    5ee8:	0e ce       	rjmp	.-996    	; 0x5b06 <APP_vLocker+0x2e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5eea:	69 a9       	ldd	r22, Y+49	; 0x31
    5eec:	7a a9       	ldd	r23, Y+50	; 0x32
    5eee:	8b a9       	ldd	r24, Y+51	; 0x33
    5ef0:	9c a9       	ldd	r25, Y+52	; 0x34
    5ef2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ef6:	dc 01       	movw	r26, r24
    5ef8:	cb 01       	movw	r24, r22
    5efa:	98 ab       	std	Y+48, r25	; 0x30
    5efc:	8f a7       	std	Y+47, r24	; 0x2f
    5efe:	8f a5       	ldd	r24, Y+47	; 0x2f
    5f00:	98 a9       	ldd	r25, Y+48	; 0x30
    5f02:	9c a7       	std	Y+44, r25	; 0x2c
    5f04:	8b a7       	std	Y+43, r24	; 0x2b
    5f06:	8b a5       	ldd	r24, Y+43	; 0x2b
    5f08:	9c a5       	ldd	r25, Y+44	; 0x2c
    5f0a:	01 97       	sbiw	r24, 0x01	; 1
    5f0c:	f1 f7       	brne	.-4      	; 0x5f0a <APP_vLocker+0x432>
    5f0e:	9c a7       	std	Y+44, r25	; 0x2c
    5f10:	8b a7       	std	Y+43, r24	; 0x2b
    5f12:	f9 cd       	rjmp	.-1038   	; 0x5b06 <APP_vLocker+0x2e>
			_delay_ms(250);
		}
		else if(APP_u8compareArray(Loc_CorrectUserName4,user,4)==1){
    5f14:	fe 01       	movw	r30, r28
    5f16:	eb 56       	subi	r30, 0x6B	; 107
    5f18:	ff 4f       	sbci	r31, 0xFF	; 255
    5f1a:	80 81       	ld	r24, Z
    5f1c:	91 81       	ldd	r25, Z+1	; 0x01
    5f1e:	9e 01       	movw	r18, r28
    5f20:	27 5b       	subi	r18, 0xB7	; 183
    5f22:	3f 4f       	sbci	r19, 0xFF	; 255
    5f24:	b9 01       	movw	r22, r18
    5f26:	44 e0       	ldi	r20, 0x04	; 4
    5f28:	0e 94 de 32 	call	0x65bc	; 0x65bc <APP_u8compareArray>
    5f2c:	81 30       	cpi	r24, 0x01	; 1
    5f2e:	09 f0       	breq	.+2      	; 0x5f32 <APP_vLocker+0x45a>
    5f30:	ea cd       	rjmp	.-1068   	; 0x5b06 <APP_vLocker+0x2e>
		else{
			//do nothing
		}
	}
	u8 WrongPassCounter ;
	for(WrongPassCounter=0;WrongPassCounter<3;WrongPassCounter++){
    5f32:	fe 01       	movw	r30, r28
    5f34:	e9 5b       	subi	r30, 0xB9	; 185
    5f36:	ff 4f       	sbci	r31, 0xFF	; 255
    5f38:	10 82       	st	Z, r1
    5f3a:	ce c2       	rjmp	.+1436   	; 0x64d8 <APP_vLocker+0xa00>
		LCD_vInit();
    5f3c:	0e 94 a8 1a 	call	0x3550	; 0x3550 <LCD_vInit>
		u8 Pass[]="Enter Pass";
    5f40:	ce 01       	movw	r24, r28
    5f42:	84 59       	subi	r24, 0x94	; 148
    5f44:	9f 4f       	sbci	r25, 0xFF	; 255
    5f46:	cd 55       	subi	r28, 0x5D	; 93
    5f48:	df 4f       	sbci	r29, 0xFF	; 255
    5f4a:	99 83       	std	Y+1, r25	; 0x01
    5f4c:	88 83       	st	Y, r24
    5f4e:	c3 5a       	subi	r28, 0xA3	; 163
    5f50:	d0 40       	sbci	r29, 0x00	; 0
    5f52:	8c e7       	ldi	r24, 0x7C	; 124
    5f54:	90 e0       	ldi	r25, 0x00	; 0
    5f56:	cb 55       	subi	r28, 0x5B	; 91
    5f58:	df 4f       	sbci	r29, 0xFF	; 255
    5f5a:	99 83       	std	Y+1, r25	; 0x01
    5f5c:	88 83       	st	Y, r24
    5f5e:	c5 5a       	subi	r28, 0xA5	; 165
    5f60:	d0 40       	sbci	r29, 0x00	; 0
    5f62:	9b e0       	ldi	r25, 0x0B	; 11
    5f64:	c9 55       	subi	r28, 0x59	; 89
    5f66:	df 4f       	sbci	r29, 0xFF	; 255
    5f68:	98 83       	st	Y, r25
    5f6a:	c7 5a       	subi	r28, 0xA7	; 167
    5f6c:	d0 40       	sbci	r29, 0x00	; 0
    5f6e:	cb 55       	subi	r28, 0x5B	; 91
    5f70:	df 4f       	sbci	r29, 0xFF	; 255
    5f72:	e8 81       	ld	r30, Y
    5f74:	f9 81       	ldd	r31, Y+1	; 0x01
    5f76:	c5 5a       	subi	r28, 0xA5	; 165
    5f78:	d0 40       	sbci	r29, 0x00	; 0
    5f7a:	00 80       	ld	r0, Z
    5f7c:	cb 55       	subi	r28, 0x5B	; 91
    5f7e:	df 4f       	sbci	r29, 0xFF	; 255
    5f80:	88 81       	ld	r24, Y
    5f82:	99 81       	ldd	r25, Y+1	; 0x01
    5f84:	c5 5a       	subi	r28, 0xA5	; 165
    5f86:	d0 40       	sbci	r29, 0x00	; 0
    5f88:	01 96       	adiw	r24, 0x01	; 1
    5f8a:	cb 55       	subi	r28, 0x5B	; 91
    5f8c:	df 4f       	sbci	r29, 0xFF	; 255
    5f8e:	99 83       	std	Y+1, r25	; 0x01
    5f90:	88 83       	st	Y, r24
    5f92:	c5 5a       	subi	r28, 0xA5	; 165
    5f94:	d0 40       	sbci	r29, 0x00	; 0
    5f96:	cd 55       	subi	r28, 0x5D	; 93
    5f98:	df 4f       	sbci	r29, 0xFF	; 255
    5f9a:	e8 81       	ld	r30, Y
    5f9c:	f9 81       	ldd	r31, Y+1	; 0x01
    5f9e:	c3 5a       	subi	r28, 0xA3	; 163
    5fa0:	d0 40       	sbci	r29, 0x00	; 0
    5fa2:	00 82       	st	Z, r0
    5fa4:	cd 55       	subi	r28, 0x5D	; 93
    5fa6:	df 4f       	sbci	r29, 0xFF	; 255
    5fa8:	88 81       	ld	r24, Y
    5faa:	99 81       	ldd	r25, Y+1	; 0x01
    5fac:	c3 5a       	subi	r28, 0xA3	; 163
    5fae:	d0 40       	sbci	r29, 0x00	; 0
    5fb0:	01 96       	adiw	r24, 0x01	; 1
    5fb2:	cd 55       	subi	r28, 0x5D	; 93
    5fb4:	df 4f       	sbci	r29, 0xFF	; 255
    5fb6:	99 83       	std	Y+1, r25	; 0x01
    5fb8:	88 83       	st	Y, r24
    5fba:	c3 5a       	subi	r28, 0xA3	; 163
    5fbc:	d0 40       	sbci	r29, 0x00	; 0
    5fbe:	c9 55       	subi	r28, 0x59	; 89
    5fc0:	df 4f       	sbci	r29, 0xFF	; 255
    5fc2:	98 81       	ld	r25, Y
    5fc4:	c7 5a       	subi	r28, 0xA7	; 167
    5fc6:	d0 40       	sbci	r29, 0x00	; 0
    5fc8:	91 50       	subi	r25, 0x01	; 1
    5fca:	c9 55       	subi	r28, 0x59	; 89
    5fcc:	df 4f       	sbci	r29, 0xFF	; 255
    5fce:	98 83       	st	Y, r25
    5fd0:	c7 5a       	subi	r28, 0xA7	; 167
    5fd2:	d0 40       	sbci	r29, 0x00	; 0
    5fd4:	c9 55       	subi	r28, 0x59	; 89
    5fd6:	df 4f       	sbci	r29, 0xFF	; 255
    5fd8:	e8 81       	ld	r30, Y
    5fda:	c7 5a       	subi	r28, 0xA7	; 167
    5fdc:	d0 40       	sbci	r29, 0x00	; 0
    5fde:	ee 23       	and	r30, r30
    5fe0:	31 f6       	brne	.-116    	; 0x5f6e <APP_vLocker+0x496>
		LCD_vWriteString(Pass);
    5fe2:	ce 01       	movw	r24, r28
    5fe4:	84 59       	subi	r24, 0x94	; 148
    5fe6:	9f 4f       	sbci	r25, 0xFF	; 255
    5fe8:	0e 94 07 21 	call	0x420e	; 0x420e <LCD_vWriteString>
		LCD_vGoTo(LineTwo,0);
    5fec:	80 ec       	ldi	r24, 0xC0	; 192
    5fee:	60 e0       	ldi	r22, 0x00	; 0
    5ff0:	0e 94 6e 20 	call	0x40dc	; 0x40dc <LCD_vGoTo>
		for(i=0;i<3;i++){
    5ff4:	fe 01       	movw	r30, r28
    5ff6:	e8 5b       	subi	r30, 0xB8	; 184
    5ff8:	ff 4f       	sbci	r31, 0xFF	; 255
    5ffa:	10 82       	st	Z, r1
    5ffc:	a9 c0       	rjmp	.+338    	; 0x6150 <APP_vLocker+0x678>
			KAYPAD_vInit();
    5ffe:	0e 94 88 21 	call	0x4310	; 0x4310 <KAYPAD_vInit>
			while(1){
				pass[i]=KAYPAD_u8GetKey();
    6002:	fe 01       	movw	r30, r28
    6004:	e8 5b       	subi	r30, 0xB8	; 184
    6006:	ff 4f       	sbci	r31, 0xFF	; 255
    6008:	80 81       	ld	r24, Z
    600a:	08 2f       	mov	r16, r24
    600c:	10 e0       	ldi	r17, 0x00	; 0
    600e:	0e 94 97 21 	call	0x432e	; 0x432e <KAYPAD_u8GetKey>
    6012:	28 2f       	mov	r18, r24
    6014:	ce 01       	movw	r24, r28
    6016:	83 5b       	subi	r24, 0xB3	; 179
    6018:	9f 4f       	sbci	r25, 0xFF	; 255
    601a:	fc 01       	movw	r30, r24
    601c:	e0 0f       	add	r30, r16
    601e:	f1 1f       	adc	r31, r17
    6020:	20 83       	st	Z, r18
    6022:	80 e0       	ldi	r24, 0x00	; 0
    6024:	90 e0       	ldi	r25, 0x00	; 0
    6026:	a8 e4       	ldi	r26, 0x48	; 72
    6028:	b2 e4       	ldi	r27, 0x42	; 66
    602a:	8f a3       	std	Y+39, r24	; 0x27
    602c:	98 a7       	std	Y+40, r25	; 0x28
    602e:	a9 a7       	std	Y+41, r26	; 0x29
    6030:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6032:	6f a1       	ldd	r22, Y+39	; 0x27
    6034:	78 a5       	ldd	r23, Y+40	; 0x28
    6036:	89 a5       	ldd	r24, Y+41	; 0x29
    6038:	9a a5       	ldd	r25, Y+42	; 0x2a
    603a:	20 e0       	ldi	r18, 0x00	; 0
    603c:	30 e0       	ldi	r19, 0x00	; 0
    603e:	4a e7       	ldi	r20, 0x7A	; 122
    6040:	55 e4       	ldi	r21, 0x45	; 69
    6042:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6046:	dc 01       	movw	r26, r24
    6048:	cb 01       	movw	r24, r22
    604a:	8b a3       	std	Y+35, r24	; 0x23
    604c:	9c a3       	std	Y+36, r25	; 0x24
    604e:	ad a3       	std	Y+37, r26	; 0x25
    6050:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    6052:	6b a1       	ldd	r22, Y+35	; 0x23
    6054:	7c a1       	ldd	r23, Y+36	; 0x24
    6056:	8d a1       	ldd	r24, Y+37	; 0x25
    6058:	9e a1       	ldd	r25, Y+38	; 0x26
    605a:	20 e0       	ldi	r18, 0x00	; 0
    605c:	30 e0       	ldi	r19, 0x00	; 0
    605e:	40 e8       	ldi	r20, 0x80	; 128
    6060:	5f e3       	ldi	r21, 0x3F	; 63
    6062:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    6066:	88 23       	and	r24, r24
    6068:	2c f4       	brge	.+10     	; 0x6074 <APP_vLocker+0x59c>
		__ticks = 1;
    606a:	81 e0       	ldi	r24, 0x01	; 1
    606c:	90 e0       	ldi	r25, 0x00	; 0
    606e:	9a a3       	std	Y+34, r25	; 0x22
    6070:	89 a3       	std	Y+33, r24	; 0x21
    6072:	3f c0       	rjmp	.+126    	; 0x60f2 <APP_vLocker+0x61a>
	else if (__tmp > 65535)
    6074:	6b a1       	ldd	r22, Y+35	; 0x23
    6076:	7c a1       	ldd	r23, Y+36	; 0x24
    6078:	8d a1       	ldd	r24, Y+37	; 0x25
    607a:	9e a1       	ldd	r25, Y+38	; 0x26
    607c:	20 e0       	ldi	r18, 0x00	; 0
    607e:	3f ef       	ldi	r19, 0xFF	; 255
    6080:	4f e7       	ldi	r20, 0x7F	; 127
    6082:	57 e4       	ldi	r21, 0x47	; 71
    6084:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    6088:	18 16       	cp	r1, r24
    608a:	4c f5       	brge	.+82     	; 0x60de <APP_vLocker+0x606>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    608c:	6f a1       	ldd	r22, Y+39	; 0x27
    608e:	78 a5       	ldd	r23, Y+40	; 0x28
    6090:	89 a5       	ldd	r24, Y+41	; 0x29
    6092:	9a a5       	ldd	r25, Y+42	; 0x2a
    6094:	20 e0       	ldi	r18, 0x00	; 0
    6096:	30 e0       	ldi	r19, 0x00	; 0
    6098:	40 e2       	ldi	r20, 0x20	; 32
    609a:	51 e4       	ldi	r21, 0x41	; 65
    609c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    60a0:	dc 01       	movw	r26, r24
    60a2:	cb 01       	movw	r24, r22
    60a4:	bc 01       	movw	r22, r24
    60a6:	cd 01       	movw	r24, r26
    60a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    60ac:	dc 01       	movw	r26, r24
    60ae:	cb 01       	movw	r24, r22
    60b0:	9a a3       	std	Y+34, r25	; 0x22
    60b2:	89 a3       	std	Y+33, r24	; 0x21
    60b4:	0f c0       	rjmp	.+30     	; 0x60d4 <APP_vLocker+0x5fc>
    60b6:	80 e9       	ldi	r24, 0x90	; 144
    60b8:	91 e0       	ldi	r25, 0x01	; 1
    60ba:	98 a3       	std	Y+32, r25	; 0x20
    60bc:	8f 8f       	std	Y+31, r24	; 0x1f
    60be:	8f 8d       	ldd	r24, Y+31	; 0x1f
    60c0:	98 a1       	ldd	r25, Y+32	; 0x20
    60c2:	01 97       	sbiw	r24, 0x01	; 1
    60c4:	f1 f7       	brne	.-4      	; 0x60c2 <APP_vLocker+0x5ea>
    60c6:	98 a3       	std	Y+32, r25	; 0x20
    60c8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    60ca:	89 a1       	ldd	r24, Y+33	; 0x21
    60cc:	9a a1       	ldd	r25, Y+34	; 0x22
    60ce:	01 97       	sbiw	r24, 0x01	; 1
    60d0:	9a a3       	std	Y+34, r25	; 0x22
    60d2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    60d4:	89 a1       	ldd	r24, Y+33	; 0x21
    60d6:	9a a1       	ldd	r25, Y+34	; 0x22
    60d8:	00 97       	sbiw	r24, 0x00	; 0
    60da:	69 f7       	brne	.-38     	; 0x60b6 <APP_vLocker+0x5de>
    60dc:	14 c0       	rjmp	.+40     	; 0x6106 <APP_vLocker+0x62e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    60de:	6b a1       	ldd	r22, Y+35	; 0x23
    60e0:	7c a1       	ldd	r23, Y+36	; 0x24
    60e2:	8d a1       	ldd	r24, Y+37	; 0x25
    60e4:	9e a1       	ldd	r25, Y+38	; 0x26
    60e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    60ea:	dc 01       	movw	r26, r24
    60ec:	cb 01       	movw	r24, r22
    60ee:	9a a3       	std	Y+34, r25	; 0x22
    60f0:	89 a3       	std	Y+33, r24	; 0x21
    60f2:	89 a1       	ldd	r24, Y+33	; 0x21
    60f4:	9a a1       	ldd	r25, Y+34	; 0x22
    60f6:	9e 8f       	std	Y+30, r25	; 0x1e
    60f8:	8d 8f       	std	Y+29, r24	; 0x1d
    60fa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    60fc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    60fe:	01 97       	sbiw	r24, 0x01	; 1
    6100:	f1 f7       	brne	.-4      	; 0x60fe <APP_vLocker+0x626>
    6102:	9e 8f       	std	Y+30, r25	; 0x1e
    6104:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(50);
				if(pass[i]!=0xff){
    6106:	fe 01       	movw	r30, r28
    6108:	e8 5b       	subi	r30, 0xB8	; 184
    610a:	ff 4f       	sbci	r31, 0xFF	; 255
    610c:	80 81       	ld	r24, Z
    610e:	28 2f       	mov	r18, r24
    6110:	30 e0       	ldi	r19, 0x00	; 0
    6112:	ce 01       	movw	r24, r28
    6114:	83 5b       	subi	r24, 0xB3	; 179
    6116:	9f 4f       	sbci	r25, 0xFF	; 255
    6118:	fc 01       	movw	r30, r24
    611a:	e2 0f       	add	r30, r18
    611c:	f3 1f       	adc	r31, r19
    611e:	80 81       	ld	r24, Z
    6120:	8f 3f       	cpi	r24, 0xFF	; 255
    6122:	09 f4       	brne	.+2      	; 0x6126 <APP_vLocker+0x64e>
    6124:	6e cf       	rjmp	.-292    	; 0x6002 <APP_vLocker+0x52a>
					LCD_vInitWithOutClear();
    6126:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <LCD_vInitWithOutClear>
					LCD_vGoTo(LineTwo,i);
    612a:	fe 01       	movw	r30, r28
    612c:	e8 5b       	subi	r30, 0xB8	; 184
    612e:	ff 4f       	sbci	r31, 0xFF	; 255
    6130:	80 ec       	ldi	r24, 0xC0	; 192
    6132:	60 81       	ld	r22, Z
    6134:	0e 94 6e 20 	call	0x40dc	; 0x40dc <LCD_vGoTo>
					LCD_vWriteCharacter('*');
    6138:	8a e2       	ldi	r24, 0x2A	; 42
    613a:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <LCD_vWriteCharacter>
	for(WrongPassCounter=0;WrongPassCounter<3;WrongPassCounter++){
		LCD_vInit();
		u8 Pass[]="Enter Pass";
		LCD_vWriteString(Pass);
		LCD_vGoTo(LineTwo,0);
		for(i=0;i<3;i++){
    613e:	de 01       	movw	r26, r28
    6140:	a8 5b       	subi	r26, 0xB8	; 184
    6142:	bf 4f       	sbci	r27, 0xFF	; 255
    6144:	fe 01       	movw	r30, r28
    6146:	e8 5b       	subi	r30, 0xB8	; 184
    6148:	ff 4f       	sbci	r31, 0xFF	; 255
    614a:	80 81       	ld	r24, Z
    614c:	8f 5f       	subi	r24, 0xFF	; 255
    614e:	8c 93       	st	X, r24
    6150:	fe 01       	movw	r30, r28
    6152:	e8 5b       	subi	r30, 0xB8	; 184
    6154:	ff 4f       	sbci	r31, 0xFF	; 255
    6156:	80 81       	ld	r24, Z
    6158:	83 30       	cpi	r24, 0x03	; 3
    615a:	08 f4       	brcc	.+2      	; 0x615e <APP_vLocker+0x686>
    615c:	50 cf       	rjmp	.-352    	; 0x5ffe <APP_vLocker+0x526>
					LCD_vWriteCharacter('*');
					break;
				}
			}
		}
		if(APP_u8compareArray(Loc_CorrectPassword3,pass,3)==0){
    615e:	fe 01       	movw	r30, r28
    6160:	e9 56       	subi	r30, 0x69	; 105
    6162:	ff 4f       	sbci	r31, 0xFF	; 255
    6164:	80 81       	ld	r24, Z
    6166:	91 81       	ldd	r25, Z+1	; 0x01
    6168:	9e 01       	movw	r18, r28
    616a:	23 5b       	subi	r18, 0xB3	; 179
    616c:	3f 4f       	sbci	r19, 0xFF	; 255
    616e:	b9 01       	movw	r22, r18
    6170:	43 e0       	ldi	r20, 0x03	; 3
    6172:	0e 94 de 32 	call	0x65bc	; 0x65bc <APP_u8compareArray>
    6176:	88 23       	and	r24, r24
    6178:	09 f0       	breq	.+2      	; 0x617c <APP_vLocker+0x6a4>
    617a:	cb c0       	rjmp	.+406    	; 0x6312 <APP_vLocker+0x83a>
			LCD_vInit();
    617c:	0e 94 a8 1a 	call	0x3550	; 0x3550 <LCD_vInit>
			u8 Wrong[]="Wrong Pass";
    6180:	ce 01       	movw	r24, r28
    6182:	89 58       	subi	r24, 0x89	; 137
    6184:	9f 4f       	sbci	r25, 0xFF	; 255
    6186:	c8 55       	subi	r28, 0x58	; 88
    6188:	df 4f       	sbci	r29, 0xFF	; 255
    618a:	99 83       	std	Y+1, r25	; 0x01
    618c:	88 83       	st	Y, r24
    618e:	c8 5a       	subi	r28, 0xA8	; 168
    6190:	d0 40       	sbci	r29, 0x00	; 0
    6192:	87 e8       	ldi	r24, 0x87	; 135
    6194:	90 e0       	ldi	r25, 0x00	; 0
    6196:	c6 55       	subi	r28, 0x56	; 86
    6198:	df 4f       	sbci	r29, 0xFF	; 255
    619a:	99 83       	std	Y+1, r25	; 0x01
    619c:	88 83       	st	Y, r24
    619e:	ca 5a       	subi	r28, 0xAA	; 170
    61a0:	d0 40       	sbci	r29, 0x00	; 0
    61a2:	9b e0       	ldi	r25, 0x0B	; 11
    61a4:	c4 55       	subi	r28, 0x54	; 84
    61a6:	df 4f       	sbci	r29, 0xFF	; 255
    61a8:	98 83       	st	Y, r25
    61aa:	cc 5a       	subi	r28, 0xAC	; 172
    61ac:	d0 40       	sbci	r29, 0x00	; 0
    61ae:	c6 55       	subi	r28, 0x56	; 86
    61b0:	df 4f       	sbci	r29, 0xFF	; 255
    61b2:	e8 81       	ld	r30, Y
    61b4:	f9 81       	ldd	r31, Y+1	; 0x01
    61b6:	ca 5a       	subi	r28, 0xAA	; 170
    61b8:	d0 40       	sbci	r29, 0x00	; 0
    61ba:	00 80       	ld	r0, Z
    61bc:	c6 55       	subi	r28, 0x56	; 86
    61be:	df 4f       	sbci	r29, 0xFF	; 255
    61c0:	88 81       	ld	r24, Y
    61c2:	99 81       	ldd	r25, Y+1	; 0x01
    61c4:	ca 5a       	subi	r28, 0xAA	; 170
    61c6:	d0 40       	sbci	r29, 0x00	; 0
    61c8:	01 96       	adiw	r24, 0x01	; 1
    61ca:	c6 55       	subi	r28, 0x56	; 86
    61cc:	df 4f       	sbci	r29, 0xFF	; 255
    61ce:	99 83       	std	Y+1, r25	; 0x01
    61d0:	88 83       	st	Y, r24
    61d2:	ca 5a       	subi	r28, 0xAA	; 170
    61d4:	d0 40       	sbci	r29, 0x00	; 0
    61d6:	c8 55       	subi	r28, 0x58	; 88
    61d8:	df 4f       	sbci	r29, 0xFF	; 255
    61da:	e8 81       	ld	r30, Y
    61dc:	f9 81       	ldd	r31, Y+1	; 0x01
    61de:	c8 5a       	subi	r28, 0xA8	; 168
    61e0:	d0 40       	sbci	r29, 0x00	; 0
    61e2:	00 82       	st	Z, r0
    61e4:	c8 55       	subi	r28, 0x58	; 88
    61e6:	df 4f       	sbci	r29, 0xFF	; 255
    61e8:	88 81       	ld	r24, Y
    61ea:	99 81       	ldd	r25, Y+1	; 0x01
    61ec:	c8 5a       	subi	r28, 0xA8	; 168
    61ee:	d0 40       	sbci	r29, 0x00	; 0
    61f0:	01 96       	adiw	r24, 0x01	; 1
    61f2:	c8 55       	subi	r28, 0x58	; 88
    61f4:	df 4f       	sbci	r29, 0xFF	; 255
    61f6:	99 83       	std	Y+1, r25	; 0x01
    61f8:	88 83       	st	Y, r24
    61fa:	c8 5a       	subi	r28, 0xA8	; 168
    61fc:	d0 40       	sbci	r29, 0x00	; 0
    61fe:	c4 55       	subi	r28, 0x54	; 84
    6200:	df 4f       	sbci	r29, 0xFF	; 255
    6202:	98 81       	ld	r25, Y
    6204:	cc 5a       	subi	r28, 0xAC	; 172
    6206:	d0 40       	sbci	r29, 0x00	; 0
    6208:	91 50       	subi	r25, 0x01	; 1
    620a:	c4 55       	subi	r28, 0x54	; 84
    620c:	df 4f       	sbci	r29, 0xFF	; 255
    620e:	98 83       	st	Y, r25
    6210:	cc 5a       	subi	r28, 0xAC	; 172
    6212:	d0 40       	sbci	r29, 0x00	; 0
    6214:	c4 55       	subi	r28, 0x54	; 84
    6216:	df 4f       	sbci	r29, 0xFF	; 255
    6218:	e8 81       	ld	r30, Y
    621a:	cc 5a       	subi	r28, 0xAC	; 172
    621c:	d0 40       	sbci	r29, 0x00	; 0
    621e:	ee 23       	and	r30, r30
    6220:	31 f6       	brne	.-116    	; 0x61ae <APP_vLocker+0x6d6>
			LCD_vWriteString(Wrong);
    6222:	ce 01       	movw	r24, r28
    6224:	89 58       	subi	r24, 0x89	; 137
    6226:	9f 4f       	sbci	r25, 0xFF	; 255
    6228:	0e 94 07 21 	call	0x420e	; 0x420e <LCD_vWriteString>
    622c:	80 e0       	ldi	r24, 0x00	; 0
    622e:	90 e0       	ldi	r25, 0x00	; 0
    6230:	aa e7       	ldi	r26, 0x7A	; 122
    6232:	b3 e4       	ldi	r27, 0x43	; 67
    6234:	89 8f       	std	Y+25, r24	; 0x19
    6236:	9a 8f       	std	Y+26, r25	; 0x1a
    6238:	ab 8f       	std	Y+27, r26	; 0x1b
    623a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    623c:	69 8d       	ldd	r22, Y+25	; 0x19
    623e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6240:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6242:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6244:	20 e0       	ldi	r18, 0x00	; 0
    6246:	30 e0       	ldi	r19, 0x00	; 0
    6248:	4a e7       	ldi	r20, 0x7A	; 122
    624a:	55 e4       	ldi	r21, 0x45	; 69
    624c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6250:	dc 01       	movw	r26, r24
    6252:	cb 01       	movw	r24, r22
    6254:	8d 8b       	std	Y+21, r24	; 0x15
    6256:	9e 8b       	std	Y+22, r25	; 0x16
    6258:	af 8b       	std	Y+23, r26	; 0x17
    625a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    625c:	6d 89       	ldd	r22, Y+21	; 0x15
    625e:	7e 89       	ldd	r23, Y+22	; 0x16
    6260:	8f 89       	ldd	r24, Y+23	; 0x17
    6262:	98 8d       	ldd	r25, Y+24	; 0x18
    6264:	20 e0       	ldi	r18, 0x00	; 0
    6266:	30 e0       	ldi	r19, 0x00	; 0
    6268:	40 e8       	ldi	r20, 0x80	; 128
    626a:	5f e3       	ldi	r21, 0x3F	; 63
    626c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    6270:	88 23       	and	r24, r24
    6272:	2c f4       	brge	.+10     	; 0x627e <APP_vLocker+0x7a6>
		__ticks = 1;
    6274:	81 e0       	ldi	r24, 0x01	; 1
    6276:	90 e0       	ldi	r25, 0x00	; 0
    6278:	9c 8b       	std	Y+20, r25	; 0x14
    627a:	8b 8b       	std	Y+19, r24	; 0x13
    627c:	3f c0       	rjmp	.+126    	; 0x62fc <APP_vLocker+0x824>
	else if (__tmp > 65535)
    627e:	6d 89       	ldd	r22, Y+21	; 0x15
    6280:	7e 89       	ldd	r23, Y+22	; 0x16
    6282:	8f 89       	ldd	r24, Y+23	; 0x17
    6284:	98 8d       	ldd	r25, Y+24	; 0x18
    6286:	20 e0       	ldi	r18, 0x00	; 0
    6288:	3f ef       	ldi	r19, 0xFF	; 255
    628a:	4f e7       	ldi	r20, 0x7F	; 127
    628c:	57 e4       	ldi	r21, 0x47	; 71
    628e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    6292:	18 16       	cp	r1, r24
    6294:	4c f5       	brge	.+82     	; 0x62e8 <APP_vLocker+0x810>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6296:	69 8d       	ldd	r22, Y+25	; 0x19
    6298:	7a 8d       	ldd	r23, Y+26	; 0x1a
    629a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    629c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    629e:	20 e0       	ldi	r18, 0x00	; 0
    62a0:	30 e0       	ldi	r19, 0x00	; 0
    62a2:	40 e2       	ldi	r20, 0x20	; 32
    62a4:	51 e4       	ldi	r21, 0x41	; 65
    62a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    62aa:	dc 01       	movw	r26, r24
    62ac:	cb 01       	movw	r24, r22
    62ae:	bc 01       	movw	r22, r24
    62b0:	cd 01       	movw	r24, r26
    62b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    62b6:	dc 01       	movw	r26, r24
    62b8:	cb 01       	movw	r24, r22
    62ba:	9c 8b       	std	Y+20, r25	; 0x14
    62bc:	8b 8b       	std	Y+19, r24	; 0x13
    62be:	0f c0       	rjmp	.+30     	; 0x62de <APP_vLocker+0x806>
    62c0:	80 e9       	ldi	r24, 0x90	; 144
    62c2:	91 e0       	ldi	r25, 0x01	; 1
    62c4:	9a 8b       	std	Y+18, r25	; 0x12
    62c6:	89 8b       	std	Y+17, r24	; 0x11
    62c8:	89 89       	ldd	r24, Y+17	; 0x11
    62ca:	9a 89       	ldd	r25, Y+18	; 0x12
    62cc:	01 97       	sbiw	r24, 0x01	; 1
    62ce:	f1 f7       	brne	.-4      	; 0x62cc <APP_vLocker+0x7f4>
    62d0:	9a 8b       	std	Y+18, r25	; 0x12
    62d2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    62d4:	8b 89       	ldd	r24, Y+19	; 0x13
    62d6:	9c 89       	ldd	r25, Y+20	; 0x14
    62d8:	01 97       	sbiw	r24, 0x01	; 1
    62da:	9c 8b       	std	Y+20, r25	; 0x14
    62dc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    62de:	8b 89       	ldd	r24, Y+19	; 0x13
    62e0:	9c 89       	ldd	r25, Y+20	; 0x14
    62e2:	00 97       	sbiw	r24, 0x00	; 0
    62e4:	69 f7       	brne	.-38     	; 0x62c0 <APP_vLocker+0x7e8>
    62e6:	ef c0       	rjmp	.+478    	; 0x64c6 <APP_vLocker+0x9ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    62e8:	6d 89       	ldd	r22, Y+21	; 0x15
    62ea:	7e 89       	ldd	r23, Y+22	; 0x16
    62ec:	8f 89       	ldd	r24, Y+23	; 0x17
    62ee:	98 8d       	ldd	r25, Y+24	; 0x18
    62f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    62f4:	dc 01       	movw	r26, r24
    62f6:	cb 01       	movw	r24, r22
    62f8:	9c 8b       	std	Y+20, r25	; 0x14
    62fa:	8b 8b       	std	Y+19, r24	; 0x13
    62fc:	8b 89       	ldd	r24, Y+19	; 0x13
    62fe:	9c 89       	ldd	r25, Y+20	; 0x14
    6300:	98 8b       	std	Y+16, r25	; 0x10
    6302:	8f 87       	std	Y+15, r24	; 0x0f
    6304:	8f 85       	ldd	r24, Y+15	; 0x0f
    6306:	98 89       	ldd	r25, Y+16	; 0x10
    6308:	01 97       	sbiw	r24, 0x01	; 1
    630a:	f1 f7       	brne	.-4      	; 0x6308 <APP_vLocker+0x830>
    630c:	98 8b       	std	Y+16, r25	; 0x10
    630e:	8f 87       	std	Y+15, r24	; 0x0f
    6310:	da c0       	rjmp	.+436    	; 0x64c6 <APP_vLocker+0x9ee>
			_delay_ms(250);
		}
		else if(APP_u8compareArray(Loc_CorrectPassword3,pass,3)==1){
    6312:	fe 01       	movw	r30, r28
    6314:	e9 56       	subi	r30, 0x69	; 105
    6316:	ff 4f       	sbci	r31, 0xFF	; 255
    6318:	80 81       	ld	r24, Z
    631a:	91 81       	ldd	r25, Z+1	; 0x01
    631c:	9e 01       	movw	r18, r28
    631e:	23 5b       	subi	r18, 0xB3	; 179
    6320:	3f 4f       	sbci	r19, 0xFF	; 255
    6322:	b9 01       	movw	r22, r18
    6324:	43 e0       	ldi	r20, 0x03	; 3
    6326:	0e 94 de 32 	call	0x65bc	; 0x65bc <APP_u8compareArray>
    632a:	81 30       	cpi	r24, 0x01	; 1
    632c:	09 f0       	breq	.+2      	; 0x6330 <APP_vLocker+0x858>
    632e:	cb c0       	rjmp	.+406    	; 0x64c6 <APP_vLocker+0x9ee>
			LCD_vInit();
    6330:	0e 94 a8 1a 	call	0x3550	; 0x3550 <LCD_vInit>
			u8 Welcome[]="Welcome";
    6334:	ce 01       	movw	r24, r28
    6336:	8e 57       	subi	r24, 0x7E	; 126
    6338:	9f 4f       	sbci	r25, 0xFF	; 255
    633a:	c3 55       	subi	r28, 0x53	; 83
    633c:	df 4f       	sbci	r29, 0xFF	; 255
    633e:	99 83       	std	Y+1, r25	; 0x01
    6340:	88 83       	st	Y, r24
    6342:	cd 5a       	subi	r28, 0xAD	; 173
    6344:	d0 40       	sbci	r29, 0x00	; 0
    6346:	82 e9       	ldi	r24, 0x92	; 146
    6348:	90 e0       	ldi	r25, 0x00	; 0
    634a:	c1 55       	subi	r28, 0x51	; 81
    634c:	df 4f       	sbci	r29, 0xFF	; 255
    634e:	99 83       	std	Y+1, r25	; 0x01
    6350:	88 83       	st	Y, r24
    6352:	cf 5a       	subi	r28, 0xAF	; 175
    6354:	d0 40       	sbci	r29, 0x00	; 0
    6356:	98 e0       	ldi	r25, 0x08	; 8
    6358:	cf 54       	subi	r28, 0x4F	; 79
    635a:	df 4f       	sbci	r29, 0xFF	; 255
    635c:	98 83       	st	Y, r25
    635e:	c1 5b       	subi	r28, 0xB1	; 177
    6360:	d0 40       	sbci	r29, 0x00	; 0
    6362:	c1 55       	subi	r28, 0x51	; 81
    6364:	df 4f       	sbci	r29, 0xFF	; 255
    6366:	e8 81       	ld	r30, Y
    6368:	f9 81       	ldd	r31, Y+1	; 0x01
    636a:	cf 5a       	subi	r28, 0xAF	; 175
    636c:	d0 40       	sbci	r29, 0x00	; 0
    636e:	00 80       	ld	r0, Z
    6370:	c1 55       	subi	r28, 0x51	; 81
    6372:	df 4f       	sbci	r29, 0xFF	; 255
    6374:	88 81       	ld	r24, Y
    6376:	99 81       	ldd	r25, Y+1	; 0x01
    6378:	cf 5a       	subi	r28, 0xAF	; 175
    637a:	d0 40       	sbci	r29, 0x00	; 0
    637c:	01 96       	adiw	r24, 0x01	; 1
    637e:	c1 55       	subi	r28, 0x51	; 81
    6380:	df 4f       	sbci	r29, 0xFF	; 255
    6382:	99 83       	std	Y+1, r25	; 0x01
    6384:	88 83       	st	Y, r24
    6386:	cf 5a       	subi	r28, 0xAF	; 175
    6388:	d0 40       	sbci	r29, 0x00	; 0
    638a:	c3 55       	subi	r28, 0x53	; 83
    638c:	df 4f       	sbci	r29, 0xFF	; 255
    638e:	e8 81       	ld	r30, Y
    6390:	f9 81       	ldd	r31, Y+1	; 0x01
    6392:	cd 5a       	subi	r28, 0xAD	; 173
    6394:	d0 40       	sbci	r29, 0x00	; 0
    6396:	00 82       	st	Z, r0
    6398:	c3 55       	subi	r28, 0x53	; 83
    639a:	df 4f       	sbci	r29, 0xFF	; 255
    639c:	88 81       	ld	r24, Y
    639e:	99 81       	ldd	r25, Y+1	; 0x01
    63a0:	cd 5a       	subi	r28, 0xAD	; 173
    63a2:	d0 40       	sbci	r29, 0x00	; 0
    63a4:	01 96       	adiw	r24, 0x01	; 1
    63a6:	c3 55       	subi	r28, 0x53	; 83
    63a8:	df 4f       	sbci	r29, 0xFF	; 255
    63aa:	99 83       	std	Y+1, r25	; 0x01
    63ac:	88 83       	st	Y, r24
    63ae:	cd 5a       	subi	r28, 0xAD	; 173
    63b0:	d0 40       	sbci	r29, 0x00	; 0
    63b2:	cf 54       	subi	r28, 0x4F	; 79
    63b4:	df 4f       	sbci	r29, 0xFF	; 255
    63b6:	98 81       	ld	r25, Y
    63b8:	c1 5b       	subi	r28, 0xB1	; 177
    63ba:	d0 40       	sbci	r29, 0x00	; 0
    63bc:	91 50       	subi	r25, 0x01	; 1
    63be:	cf 54       	subi	r28, 0x4F	; 79
    63c0:	df 4f       	sbci	r29, 0xFF	; 255
    63c2:	98 83       	st	Y, r25
    63c4:	c1 5b       	subi	r28, 0xB1	; 177
    63c6:	d0 40       	sbci	r29, 0x00	; 0
    63c8:	cf 54       	subi	r28, 0x4F	; 79
    63ca:	df 4f       	sbci	r29, 0xFF	; 255
    63cc:	e8 81       	ld	r30, Y
    63ce:	c1 5b       	subi	r28, 0xB1	; 177
    63d0:	d0 40       	sbci	r29, 0x00	; 0
    63d2:	ee 23       	and	r30, r30
    63d4:	31 f6       	brne	.-116    	; 0x6362 <APP_vLocker+0x88a>
			LCD_vWriteString(Welcome);
    63d6:	ce 01       	movw	r24, r28
    63d8:	8e 57       	subi	r24, 0x7E	; 126
    63da:	9f 4f       	sbci	r25, 0xFF	; 255
    63dc:	0e 94 07 21 	call	0x420e	; 0x420e <LCD_vWriteString>
    63e0:	80 e0       	ldi	r24, 0x00	; 0
    63e2:	90 e0       	ldi	r25, 0x00	; 0
    63e4:	aa e7       	ldi	r26, 0x7A	; 122
    63e6:	b3 e4       	ldi	r27, 0x43	; 67
    63e8:	8b 87       	std	Y+11, r24	; 0x0b
    63ea:	9c 87       	std	Y+12, r25	; 0x0c
    63ec:	ad 87       	std	Y+13, r26	; 0x0d
    63ee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    63f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    63f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    63f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    63f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    63f8:	20 e0       	ldi	r18, 0x00	; 0
    63fa:	30 e0       	ldi	r19, 0x00	; 0
    63fc:	4a e7       	ldi	r20, 0x7A	; 122
    63fe:	55 e4       	ldi	r21, 0x45	; 69
    6400:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6404:	dc 01       	movw	r26, r24
    6406:	cb 01       	movw	r24, r22
    6408:	8f 83       	std	Y+7, r24	; 0x07
    640a:	98 87       	std	Y+8, r25	; 0x08
    640c:	a9 87       	std	Y+9, r26	; 0x09
    640e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6410:	6f 81       	ldd	r22, Y+7	; 0x07
    6412:	78 85       	ldd	r23, Y+8	; 0x08
    6414:	89 85       	ldd	r24, Y+9	; 0x09
    6416:	9a 85       	ldd	r25, Y+10	; 0x0a
    6418:	20 e0       	ldi	r18, 0x00	; 0
    641a:	30 e0       	ldi	r19, 0x00	; 0
    641c:	40 e8       	ldi	r20, 0x80	; 128
    641e:	5f e3       	ldi	r21, 0x3F	; 63
    6420:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    6424:	88 23       	and	r24, r24
    6426:	2c f4       	brge	.+10     	; 0x6432 <APP_vLocker+0x95a>
		__ticks = 1;
    6428:	81 e0       	ldi	r24, 0x01	; 1
    642a:	90 e0       	ldi	r25, 0x00	; 0
    642c:	9e 83       	std	Y+6, r25	; 0x06
    642e:	8d 83       	std	Y+5, r24	; 0x05
    6430:	3f c0       	rjmp	.+126    	; 0x64b0 <APP_vLocker+0x9d8>
	else if (__tmp > 65535)
    6432:	6f 81       	ldd	r22, Y+7	; 0x07
    6434:	78 85       	ldd	r23, Y+8	; 0x08
    6436:	89 85       	ldd	r24, Y+9	; 0x09
    6438:	9a 85       	ldd	r25, Y+10	; 0x0a
    643a:	20 e0       	ldi	r18, 0x00	; 0
    643c:	3f ef       	ldi	r19, 0xFF	; 255
    643e:	4f e7       	ldi	r20, 0x7F	; 127
    6440:	57 e4       	ldi	r21, 0x47	; 71
    6442:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    6446:	18 16       	cp	r1, r24
    6448:	4c f5       	brge	.+82     	; 0x649c <APP_vLocker+0x9c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    644a:	6b 85       	ldd	r22, Y+11	; 0x0b
    644c:	7c 85       	ldd	r23, Y+12	; 0x0c
    644e:	8d 85       	ldd	r24, Y+13	; 0x0d
    6450:	9e 85       	ldd	r25, Y+14	; 0x0e
    6452:	20 e0       	ldi	r18, 0x00	; 0
    6454:	30 e0       	ldi	r19, 0x00	; 0
    6456:	40 e2       	ldi	r20, 0x20	; 32
    6458:	51 e4       	ldi	r21, 0x41	; 65
    645a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    645e:	dc 01       	movw	r26, r24
    6460:	cb 01       	movw	r24, r22
    6462:	bc 01       	movw	r22, r24
    6464:	cd 01       	movw	r24, r26
    6466:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    646a:	dc 01       	movw	r26, r24
    646c:	cb 01       	movw	r24, r22
    646e:	9e 83       	std	Y+6, r25	; 0x06
    6470:	8d 83       	std	Y+5, r24	; 0x05
    6472:	0f c0       	rjmp	.+30     	; 0x6492 <APP_vLocker+0x9ba>
    6474:	80 e9       	ldi	r24, 0x90	; 144
    6476:	91 e0       	ldi	r25, 0x01	; 1
    6478:	9c 83       	std	Y+4, r25	; 0x04
    647a:	8b 83       	std	Y+3, r24	; 0x03
    647c:	8b 81       	ldd	r24, Y+3	; 0x03
    647e:	9c 81       	ldd	r25, Y+4	; 0x04
    6480:	01 97       	sbiw	r24, 0x01	; 1
    6482:	f1 f7       	brne	.-4      	; 0x6480 <APP_vLocker+0x9a8>
    6484:	9c 83       	std	Y+4, r25	; 0x04
    6486:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6488:	8d 81       	ldd	r24, Y+5	; 0x05
    648a:	9e 81       	ldd	r25, Y+6	; 0x06
    648c:	01 97       	sbiw	r24, 0x01	; 1
    648e:	9e 83       	std	Y+6, r25	; 0x06
    6490:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6492:	8d 81       	ldd	r24, Y+5	; 0x05
    6494:	9e 81       	ldd	r25, Y+6	; 0x06
    6496:	00 97       	sbiw	r24, 0x00	; 0
    6498:	69 f7       	brne	.-38     	; 0x6474 <APP_vLocker+0x99c>
    649a:	25 c0       	rjmp	.+74     	; 0x64e6 <APP_vLocker+0xa0e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    649c:	6f 81       	ldd	r22, Y+7	; 0x07
    649e:	78 85       	ldd	r23, Y+8	; 0x08
    64a0:	89 85       	ldd	r24, Y+9	; 0x09
    64a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    64a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    64a8:	dc 01       	movw	r26, r24
    64aa:	cb 01       	movw	r24, r22
    64ac:	9e 83       	std	Y+6, r25	; 0x06
    64ae:	8d 83       	std	Y+5, r24	; 0x05
    64b0:	8d 81       	ldd	r24, Y+5	; 0x05
    64b2:	9e 81       	ldd	r25, Y+6	; 0x06
    64b4:	9a 83       	std	Y+2, r25	; 0x02
    64b6:	89 83       	std	Y+1, r24	; 0x01
    64b8:	89 81       	ldd	r24, Y+1	; 0x01
    64ba:	9a 81       	ldd	r25, Y+2	; 0x02
    64bc:	01 97       	sbiw	r24, 0x01	; 1
    64be:	f1 f7       	brne	.-4      	; 0x64bc <APP_vLocker+0x9e4>
    64c0:	9a 83       	std	Y+2, r25	; 0x02
    64c2:	89 83       	std	Y+1, r24	; 0x01
    64c4:	10 c0       	rjmp	.+32     	; 0x64e6 <APP_vLocker+0xa0e>
		else{
			//do nothing
		}
	}
	u8 WrongPassCounter ;
	for(WrongPassCounter=0;WrongPassCounter<3;WrongPassCounter++){
    64c6:	de 01       	movw	r26, r28
    64c8:	a9 5b       	subi	r26, 0xB9	; 185
    64ca:	bf 4f       	sbci	r27, 0xFF	; 255
    64cc:	fe 01       	movw	r30, r28
    64ce:	e9 5b       	subi	r30, 0xB9	; 185
    64d0:	ff 4f       	sbci	r31, 0xFF	; 255
    64d2:	80 81       	ld	r24, Z
    64d4:	8f 5f       	subi	r24, 0xFF	; 255
    64d6:	8c 93       	st	X, r24
    64d8:	fe 01       	movw	r30, r28
    64da:	e9 5b       	subi	r30, 0xB9	; 185
    64dc:	ff 4f       	sbci	r31, 0xFF	; 255
    64de:	80 81       	ld	r24, Z
    64e0:	83 30       	cpi	r24, 0x03	; 3
    64e2:	08 f4       	brcc	.+2      	; 0x64e6 <APP_vLocker+0xa0e>
    64e4:	2b cd       	rjmp	.-1450   	; 0x5f3c <APP_vLocker+0x464>
		}
		else{
			//do nothing
		}
	}
	if(WrongPassCounter==3){
    64e6:	fe 01       	movw	r30, r28
    64e8:	e9 5b       	subi	r30, 0xB9	; 185
    64ea:	ff 4f       	sbci	r31, 0xFF	; 255
    64ec:	80 81       	ld	r24, Z
    64ee:	83 30       	cpi	r24, 0x03	; 3
    64f0:	09 f0       	breq	.+2      	; 0x64f4 <APP_vLocker+0xa1c>
    64f2:	58 c0       	rjmp	.+176    	; 0x65a4 <APP_vLocker+0xacc>
		LCD_vInit();
    64f4:	0e 94 a8 1a 	call	0x3550	; 0x3550 <LCD_vInit>
		u8 Wrong1[]="Try latter";
    64f8:	ce 01       	movw	r24, r28
    64fa:	86 57       	subi	r24, 0x76	; 118
    64fc:	9f 4f       	sbci	r25, 0xFF	; 255
    64fe:	ce 54       	subi	r28, 0x4E	; 78
    6500:	df 4f       	sbci	r29, 0xFF	; 255
    6502:	99 83       	std	Y+1, r25	; 0x01
    6504:	88 83       	st	Y, r24
    6506:	c2 5b       	subi	r28, 0xB2	; 178
    6508:	d0 40       	sbci	r29, 0x00	; 0
    650a:	8a e9       	ldi	r24, 0x9A	; 154
    650c:	90 e0       	ldi	r25, 0x00	; 0
    650e:	cc 54       	subi	r28, 0x4C	; 76
    6510:	df 4f       	sbci	r29, 0xFF	; 255
    6512:	99 83       	std	Y+1, r25	; 0x01
    6514:	88 83       	st	Y, r24
    6516:	c4 5b       	subi	r28, 0xB4	; 180
    6518:	d0 40       	sbci	r29, 0x00	; 0
    651a:	9b e0       	ldi	r25, 0x0B	; 11
    651c:	ca 54       	subi	r28, 0x4A	; 74
    651e:	df 4f       	sbci	r29, 0xFF	; 255
    6520:	98 83       	st	Y, r25
    6522:	c6 5b       	subi	r28, 0xB6	; 182
    6524:	d0 40       	sbci	r29, 0x00	; 0
    6526:	cc 54       	subi	r28, 0x4C	; 76
    6528:	df 4f       	sbci	r29, 0xFF	; 255
    652a:	e8 81       	ld	r30, Y
    652c:	f9 81       	ldd	r31, Y+1	; 0x01
    652e:	c4 5b       	subi	r28, 0xB4	; 180
    6530:	d0 40       	sbci	r29, 0x00	; 0
    6532:	00 80       	ld	r0, Z
    6534:	cc 54       	subi	r28, 0x4C	; 76
    6536:	df 4f       	sbci	r29, 0xFF	; 255
    6538:	88 81       	ld	r24, Y
    653a:	99 81       	ldd	r25, Y+1	; 0x01
    653c:	c4 5b       	subi	r28, 0xB4	; 180
    653e:	d0 40       	sbci	r29, 0x00	; 0
    6540:	01 96       	adiw	r24, 0x01	; 1
    6542:	cc 54       	subi	r28, 0x4C	; 76
    6544:	df 4f       	sbci	r29, 0xFF	; 255
    6546:	99 83       	std	Y+1, r25	; 0x01
    6548:	88 83       	st	Y, r24
    654a:	c4 5b       	subi	r28, 0xB4	; 180
    654c:	d0 40       	sbci	r29, 0x00	; 0
    654e:	ce 54       	subi	r28, 0x4E	; 78
    6550:	df 4f       	sbci	r29, 0xFF	; 255
    6552:	e8 81       	ld	r30, Y
    6554:	f9 81       	ldd	r31, Y+1	; 0x01
    6556:	c2 5b       	subi	r28, 0xB2	; 178
    6558:	d0 40       	sbci	r29, 0x00	; 0
    655a:	00 82       	st	Z, r0
    655c:	ce 54       	subi	r28, 0x4E	; 78
    655e:	df 4f       	sbci	r29, 0xFF	; 255
    6560:	88 81       	ld	r24, Y
    6562:	99 81       	ldd	r25, Y+1	; 0x01
    6564:	c2 5b       	subi	r28, 0xB2	; 178
    6566:	d0 40       	sbci	r29, 0x00	; 0
    6568:	01 96       	adiw	r24, 0x01	; 1
    656a:	ce 54       	subi	r28, 0x4E	; 78
    656c:	df 4f       	sbci	r29, 0xFF	; 255
    656e:	99 83       	std	Y+1, r25	; 0x01
    6570:	88 83       	st	Y, r24
    6572:	c2 5b       	subi	r28, 0xB2	; 178
    6574:	d0 40       	sbci	r29, 0x00	; 0
    6576:	ca 54       	subi	r28, 0x4A	; 74
    6578:	df 4f       	sbci	r29, 0xFF	; 255
    657a:	98 81       	ld	r25, Y
    657c:	c6 5b       	subi	r28, 0xB6	; 182
    657e:	d0 40       	sbci	r29, 0x00	; 0
    6580:	91 50       	subi	r25, 0x01	; 1
    6582:	ca 54       	subi	r28, 0x4A	; 74
    6584:	df 4f       	sbci	r29, 0xFF	; 255
    6586:	98 83       	st	Y, r25
    6588:	c6 5b       	subi	r28, 0xB6	; 182
    658a:	d0 40       	sbci	r29, 0x00	; 0
    658c:	ca 54       	subi	r28, 0x4A	; 74
    658e:	df 4f       	sbci	r29, 0xFF	; 255
    6590:	e8 81       	ld	r30, Y
    6592:	c6 5b       	subi	r28, 0xB6	; 182
    6594:	d0 40       	sbci	r29, 0x00	; 0
    6596:	ee 23       	and	r30, r30
    6598:	31 f6       	brne	.-116    	; 0x6526 <APP_vLocker+0xa4e>
		LCD_vWriteString(Wrong1);
    659a:	ce 01       	movw	r24, r28
    659c:	86 57       	subi	r24, 0x76	; 118
    659e:	9f 4f       	sbci	r25, 0xFF	; 255
    65a0:	0e 94 07 21 	call	0x420e	; 0x420e <LCD_vWriteString>
	}
	else{
		//do nothing
	}
}
    65a4:	ca 54       	subi	r28, 0x4A	; 74
    65a6:	df 4f       	sbci	r29, 0xFF	; 255
    65a8:	0f b6       	in	r0, 0x3f	; 63
    65aa:	f8 94       	cli
    65ac:	de bf       	out	0x3e, r29	; 62
    65ae:	0f be       	out	0x3f, r0	; 63
    65b0:	cd bf       	out	0x3d, r28	; 61
    65b2:	cf 91       	pop	r28
    65b4:	df 91       	pop	r29
    65b6:	1f 91       	pop	r17
    65b8:	0f 91       	pop	r16
    65ba:	08 95       	ret

000065bc <APP_u8compareArray>:
//----------------
u8 APP_u8compareArray(u8 *ptr1,u8 *ptr2,u8 size){
    65bc:	df 93       	push	r29
    65be:	cf 93       	push	r28
    65c0:	cd b7       	in	r28, 0x3d	; 61
    65c2:	de b7       	in	r29, 0x3e	; 62
    65c4:	27 97       	sbiw	r28, 0x07	; 7
    65c6:	0f b6       	in	r0, 0x3f	; 63
    65c8:	f8 94       	cli
    65ca:	de bf       	out	0x3e, r29	; 62
    65cc:	0f be       	out	0x3f, r0	; 63
    65ce:	cd bf       	out	0x3d, r28	; 61
    65d0:	9b 83       	std	Y+3, r25	; 0x03
    65d2:	8a 83       	std	Y+2, r24	; 0x02
    65d4:	7d 83       	std	Y+5, r23	; 0x05
    65d6:	6c 83       	std	Y+4, r22	; 0x04
    65d8:	4e 83       	std	Y+6, r20	; 0x06
	u8 i;
	for(i=0;i<size;i++){
    65da:	19 82       	std	Y+1, r1	; 0x01
    65dc:	19 c0       	rjmp	.+50     	; 0x6610 <APP_u8compareArray+0x54>
		if(ptr1[i]!=ptr2[i])
    65de:	89 81       	ldd	r24, Y+1	; 0x01
    65e0:	28 2f       	mov	r18, r24
    65e2:	30 e0       	ldi	r19, 0x00	; 0
    65e4:	8a 81       	ldd	r24, Y+2	; 0x02
    65e6:	9b 81       	ldd	r25, Y+3	; 0x03
    65e8:	fc 01       	movw	r30, r24
    65ea:	e2 0f       	add	r30, r18
    65ec:	f3 1f       	adc	r31, r19
    65ee:	40 81       	ld	r20, Z
    65f0:	89 81       	ldd	r24, Y+1	; 0x01
    65f2:	28 2f       	mov	r18, r24
    65f4:	30 e0       	ldi	r19, 0x00	; 0
    65f6:	8c 81       	ldd	r24, Y+4	; 0x04
    65f8:	9d 81       	ldd	r25, Y+5	; 0x05
    65fa:	fc 01       	movw	r30, r24
    65fc:	e2 0f       	add	r30, r18
    65fe:	f3 1f       	adc	r31, r19
    6600:	80 81       	ld	r24, Z
    6602:	48 17       	cp	r20, r24
    6604:	11 f0       	breq	.+4      	; 0x660a <APP_u8compareArray+0x4e>
			return 0;
    6606:	1f 82       	std	Y+7, r1	; 0x07
    6608:	09 c0       	rjmp	.+18     	; 0x661c <APP_u8compareArray+0x60>
	}
}
//----------------
u8 APP_u8compareArray(u8 *ptr1,u8 *ptr2,u8 size){
	u8 i;
	for(i=0;i<size;i++){
    660a:	89 81       	ldd	r24, Y+1	; 0x01
    660c:	8f 5f       	subi	r24, 0xFF	; 255
    660e:	89 83       	std	Y+1, r24	; 0x01
    6610:	99 81       	ldd	r25, Y+1	; 0x01
    6612:	8e 81       	ldd	r24, Y+6	; 0x06
    6614:	98 17       	cp	r25, r24
    6616:	18 f3       	brcs	.-58     	; 0x65de <APP_u8compareArray+0x22>
		if(ptr1[i]!=ptr2[i])
			return 0;
	}
	return 1;
    6618:	81 e0       	ldi	r24, 0x01	; 1
    661a:	8f 83       	std	Y+7, r24	; 0x07
    661c:	8f 81       	ldd	r24, Y+7	; 0x07
}
    661e:	27 96       	adiw	r28, 0x07	; 7
    6620:	0f b6       	in	r0, 0x3f	; 63
    6622:	f8 94       	cli
    6624:	de bf       	out	0x3e, r29	; 62
    6626:	0f be       	out	0x3f, r0	; 63
    6628:	cd bf       	out	0x3d, r28	; 61
    662a:	cf 91       	pop	r28
    662c:	df 91       	pop	r29
    662e:	08 95       	ret

00006630 <APP_vVolumeLCD>:
//------------------------
void APP_vVolumeLCD(){
    6630:	df 93       	push	r29
    6632:	cf 93       	push	r28
    6634:	cd b7       	in	r28, 0x3d	; 61
    6636:	de b7       	in	r29, 0x3e	; 62
    6638:	a8 97       	sbiw	r28, 0x28	; 40
    663a:	0f b6       	in	r0, 0x3f	; 63
    663c:	f8 94       	cli
    663e:	de bf       	out	0x3e, r29	; 62
    6640:	0f be       	out	0x3f, r0	; 63
    6642:	cd bf       	out	0x3d, r28	; 61
	LCD_vInit();
    6644:	0e 94 a8 1a 	call	0x3550	; 0x3550 <LCD_vInit>
	u16 z;
	u8 counter=0,i,y;
    6648:	19 8a       	std	Y+17, r1	; 0x11
	u8 chrr[8]={0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,0x1F};
    664a:	ce 01       	movw	r24, r28
    664c:	44 96       	adiw	r24, 0x14	; 20
    664e:	9d a3       	std	Y+37, r25	; 0x25
    6650:	8c a3       	std	Y+36, r24	; 0x24
    6652:	ad eb       	ldi	r26, 0xBD	; 189
    6654:	b0 e0       	ldi	r27, 0x00	; 0
    6656:	bf a3       	std	Y+39, r27	; 0x27
    6658:	ae a3       	std	Y+38, r26	; 0x26
    665a:	b8 e0       	ldi	r27, 0x08	; 8
    665c:	b8 a7       	std	Y+40, r27	; 0x28
    665e:	ee a1       	ldd	r30, Y+38	; 0x26
    6660:	ff a1       	ldd	r31, Y+39	; 0x27
    6662:	00 80       	ld	r0, Z
    6664:	8e a1       	ldd	r24, Y+38	; 0x26
    6666:	9f a1       	ldd	r25, Y+39	; 0x27
    6668:	01 96       	adiw	r24, 0x01	; 1
    666a:	9f a3       	std	Y+39, r25	; 0x27
    666c:	8e a3       	std	Y+38, r24	; 0x26
    666e:	ac a1       	ldd	r26, Y+36	; 0x24
    6670:	bd a1       	ldd	r27, Y+37	; 0x25
    6672:	0c 92       	st	X, r0
    6674:	ec a1       	ldd	r30, Y+36	; 0x24
    6676:	fd a1       	ldd	r31, Y+37	; 0x25
    6678:	31 96       	adiw	r30, 0x01	; 1
    667a:	fd a3       	std	Y+37, r31	; 0x25
    667c:	ec a3       	std	Y+36, r30	; 0x24
    667e:	f8 a5       	ldd	r31, Y+40	; 0x28
    6680:	f1 50       	subi	r31, 0x01	; 1
    6682:	f8 a7       	std	Y+40, r31	; 0x28
    6684:	28 a5       	ldd	r18, Y+40	; 0x28
    6686:	22 23       	and	r18, r18
    6688:	51 f7       	brne	.-44     	; 0x665e <APP_vVolumeLCD+0x2e>
	u8 chr0[8]={0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
    668a:	88 e0       	ldi	r24, 0x08	; 8
    668c:	fe 01       	movw	r30, r28
    668e:	7c 96       	adiw	r30, 0x1c	; 28
    6690:	df 01       	movw	r26, r30
    6692:	28 2f       	mov	r18, r24
    6694:	1d 92       	st	X+, r1
    6696:	2a 95       	dec	r18
    6698:	e9 f7       	brne	.-6      	; 0x6694 <APP_vVolumeLCD+0x64>
	LCD_vCustomCharacter(chrr,0);
    669a:	ce 01       	movw	r24, r28
    669c:	44 96       	adiw	r24, 0x14	; 20
    669e:	60 e0       	ldi	r22, 0x00	; 0
    66a0:	0e 94 30 21 	call	0x4260	; 0x4260 <LCD_vCustomCharacter>
	LCD_vCustomCharacter(chr0,1);
    66a4:	ce 01       	movw	r24, r28
    66a6:	4c 96       	adiw	r24, 0x1c	; 28
    66a8:	61 e0       	ldi	r22, 0x01	; 1
    66aa:	0e 94 30 21 	call	0x4260	; 0x4260 <LCD_vCustomCharacter>
	ADC_vInit(Polling,ADC1,FreeRunningMode);
    66ae:	a7 e2       	ldi	r26, 0x27	; 39
    66b0:	b0 e0       	ldi	r27, 0x00	; 0
    66b2:	e7 e2       	ldi	r30, 0x27	; 39
    66b4:	f0 e0       	ldi	r31, 0x00	; 0
    66b6:	80 81       	ld	r24, Z
    66b8:	81 60       	ori	r24, 0x01	; 1
    66ba:	8c 93       	st	X, r24
    66bc:	8c 91       	ld	r24, X
    66be:	28 2f       	mov	r18, r24
    66c0:	30 e0       	ldi	r19, 0x00	; 0
    66c2:	80 e0       	ldi	r24, 0x00	; 0
    66c4:	90 e0       	ldi	r25, 0x00	; 0
    66c6:	b9 01       	movw	r22, r18
    66c8:	41 e0       	ldi	r20, 0x01	; 1
    66ca:	50 e0       	ldi	r21, 0x00	; 0
    66cc:	0e 94 28 13 	call	0x2650	; 0x2650 <ADC_vInit>
	while(1){
		z=ADC_vGetVal(FreeRunningMode);
    66d0:	81 e0       	ldi	r24, 0x01	; 1
    66d2:	90 e0       	ldi	r25, 0x00	; 0
    66d4:	0e 94 47 13 	call	0x268e	; 0x268e <ADC_vGetVal>
    66d8:	9b 8b       	std	Y+19, r25	; 0x13
    66da:	8a 8b       	std	Y+18, r24	; 0x12
    66dc:	09 c0       	rjmp	.+18     	; 0x66f0 <APP_vVolumeLCD+0xc0>
		while(z>311){
			z=z-311;
    66de:	8a 89       	ldd	r24, Y+18	; 0x12
    66e0:	9b 89       	ldd	r25, Y+19	; 0x13
    66e2:	87 53       	subi	r24, 0x37	; 55
    66e4:	91 40       	sbci	r25, 0x01	; 1
    66e6:	9b 8b       	std	Y+19, r25	; 0x13
    66e8:	8a 8b       	std	Y+18, r24	; 0x12
			counter++;
    66ea:	89 89       	ldd	r24, Y+17	; 0x11
    66ec:	8f 5f       	subi	r24, 0xFF	; 255
    66ee:	89 8b       	std	Y+17, r24	; 0x11
	LCD_vCustomCharacter(chrr,0);
	LCD_vCustomCharacter(chr0,1);
	ADC_vInit(Polling,ADC1,FreeRunningMode);
	while(1){
		z=ADC_vGetVal(FreeRunningMode);
		while(z>311){
    66f0:	8a 89       	ldd	r24, Y+18	; 0x12
    66f2:	9b 89       	ldd	r25, Y+19	; 0x13
    66f4:	a1 e0       	ldi	r26, 0x01	; 1
    66f6:	88 33       	cpi	r24, 0x38	; 56
    66f8:	9a 07       	cpc	r25, r26
    66fa:	88 f7       	brcc	.-30     	; 0x66de <APP_vVolumeLCD+0xae>
			z=z-311;
			counter++;
		}
		for(i=0;i<counter;i++){
    66fc:	18 8a       	std	Y+16, r1	; 0x10
    66fe:	06 c0       	rjmp	.+12     	; 0x670c <APP_vVolumeLCD+0xdc>
			LCD_vWriteCharacter(0);
    6700:	80 e0       	ldi	r24, 0x00	; 0
    6702:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <LCD_vWriteCharacter>
		z=ADC_vGetVal(FreeRunningMode);
		while(z>311){
			z=z-311;
			counter++;
		}
		for(i=0;i<counter;i++){
    6706:	88 89       	ldd	r24, Y+16	; 0x10
    6708:	8f 5f       	subi	r24, 0xFF	; 255
    670a:	88 8b       	std	Y+16, r24	; 0x10
    670c:	98 89       	ldd	r25, Y+16	; 0x10
    670e:	89 89       	ldd	r24, Y+17	; 0x11
    6710:	98 17       	cp	r25, r24
    6712:	b0 f3       	brcs	.-20     	; 0x6700 <APP_vVolumeLCD+0xd0>
			LCD_vWriteCharacter(0);
		}
		for(i=y;i>counter;i--){
    6714:	8f 85       	ldd	r24, Y+15	; 0x0f
    6716:	88 8b       	std	Y+16, r24	; 0x10
    6718:	0a c0       	rjmp	.+20     	; 0x672e <APP_vVolumeLCD+0xfe>
			LCD_vGoTo(LineOne,i);
    671a:	80 e8       	ldi	r24, 0x80	; 128
    671c:	68 89       	ldd	r22, Y+16	; 0x10
    671e:	0e 94 6e 20 	call	0x40dc	; 0x40dc <LCD_vGoTo>
			LCD_vWriteCharacter(1);
    6722:	81 e0       	ldi	r24, 0x01	; 1
    6724:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <LCD_vWriteCharacter>
			counter++;
		}
		for(i=0;i<counter;i++){
			LCD_vWriteCharacter(0);
		}
		for(i=y;i>counter;i--){
    6728:	88 89       	ldd	r24, Y+16	; 0x10
    672a:	81 50       	subi	r24, 0x01	; 1
    672c:	88 8b       	std	Y+16, r24	; 0x10
    672e:	98 89       	ldd	r25, Y+16	; 0x10
    6730:	89 89       	ldd	r24, Y+17	; 0x11
    6732:	89 17       	cp	r24, r25
    6734:	90 f3       	brcs	.-28     	; 0x671a <APP_vVolumeLCD+0xea>
			LCD_vGoTo(LineOne,i);
			LCD_vWriteCharacter(1);
		}
		y=counter;
    6736:	89 89       	ldd	r24, Y+17	; 0x11
    6738:	8f 87       	std	Y+15, r24	; 0x0f
		if(counter==16){
    673a:	89 89       	ldd	r24, Y+17	; 0x11
    673c:	80 31       	cpi	r24, 0x10	; 16
    673e:	09 f0       	breq	.+2      	; 0x6742 <APP_vVolumeLCD+0x112>
    6740:	76 c0       	rjmp	.+236    	; 0x682e <APP_vVolumeLCD+0x1fe>
			LedAndBuzzer_vBuzzerOpen();
    6742:	0e 94 ae 14 	call	0x295c	; 0x295c <LedAndBuzzer_vBuzzerOpen>
    6746:	80 e0       	ldi	r24, 0x00	; 0
    6748:	90 e0       	ldi	r25, 0x00	; 0
    674a:	aa e7       	ldi	r26, 0x7A	; 122
    674c:	b3 e4       	ldi	r27, 0x43	; 67
    674e:	8b 87       	std	Y+11, r24	; 0x0b
    6750:	9c 87       	std	Y+12, r25	; 0x0c
    6752:	ad 87       	std	Y+13, r26	; 0x0d
    6754:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6756:	6b 85       	ldd	r22, Y+11	; 0x0b
    6758:	7c 85       	ldd	r23, Y+12	; 0x0c
    675a:	8d 85       	ldd	r24, Y+13	; 0x0d
    675c:	9e 85       	ldd	r25, Y+14	; 0x0e
    675e:	20 e0       	ldi	r18, 0x00	; 0
    6760:	30 e0       	ldi	r19, 0x00	; 0
    6762:	4a e7       	ldi	r20, 0x7A	; 122
    6764:	55 e4       	ldi	r21, 0x45	; 69
    6766:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    676a:	dc 01       	movw	r26, r24
    676c:	cb 01       	movw	r24, r22
    676e:	8f 83       	std	Y+7, r24	; 0x07
    6770:	98 87       	std	Y+8, r25	; 0x08
    6772:	a9 87       	std	Y+9, r26	; 0x09
    6774:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6776:	6f 81       	ldd	r22, Y+7	; 0x07
    6778:	78 85       	ldd	r23, Y+8	; 0x08
    677a:	89 85       	ldd	r24, Y+9	; 0x09
    677c:	9a 85       	ldd	r25, Y+10	; 0x0a
    677e:	20 e0       	ldi	r18, 0x00	; 0
    6780:	30 e0       	ldi	r19, 0x00	; 0
    6782:	40 e8       	ldi	r20, 0x80	; 128
    6784:	5f e3       	ldi	r21, 0x3F	; 63
    6786:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    678a:	88 23       	and	r24, r24
    678c:	2c f4       	brge	.+10     	; 0x6798 <APP_vVolumeLCD+0x168>
		__ticks = 1;
    678e:	81 e0       	ldi	r24, 0x01	; 1
    6790:	90 e0       	ldi	r25, 0x00	; 0
    6792:	9e 83       	std	Y+6, r25	; 0x06
    6794:	8d 83       	std	Y+5, r24	; 0x05
    6796:	3f c0       	rjmp	.+126    	; 0x6816 <APP_vVolumeLCD+0x1e6>
	else if (__tmp > 65535)
    6798:	6f 81       	ldd	r22, Y+7	; 0x07
    679a:	78 85       	ldd	r23, Y+8	; 0x08
    679c:	89 85       	ldd	r24, Y+9	; 0x09
    679e:	9a 85       	ldd	r25, Y+10	; 0x0a
    67a0:	20 e0       	ldi	r18, 0x00	; 0
    67a2:	3f ef       	ldi	r19, 0xFF	; 255
    67a4:	4f e7       	ldi	r20, 0x7F	; 127
    67a6:	57 e4       	ldi	r21, 0x47	; 71
    67a8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    67ac:	18 16       	cp	r1, r24
    67ae:	4c f5       	brge	.+82     	; 0x6802 <APP_vVolumeLCD+0x1d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    67b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    67b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    67b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    67b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    67b8:	20 e0       	ldi	r18, 0x00	; 0
    67ba:	30 e0       	ldi	r19, 0x00	; 0
    67bc:	40 e2       	ldi	r20, 0x20	; 32
    67be:	51 e4       	ldi	r21, 0x41	; 65
    67c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    67c4:	dc 01       	movw	r26, r24
    67c6:	cb 01       	movw	r24, r22
    67c8:	bc 01       	movw	r22, r24
    67ca:	cd 01       	movw	r24, r26
    67cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    67d0:	dc 01       	movw	r26, r24
    67d2:	cb 01       	movw	r24, r22
    67d4:	9e 83       	std	Y+6, r25	; 0x06
    67d6:	8d 83       	std	Y+5, r24	; 0x05
    67d8:	0f c0       	rjmp	.+30     	; 0x67f8 <APP_vVolumeLCD+0x1c8>
    67da:	80 e9       	ldi	r24, 0x90	; 144
    67dc:	91 e0       	ldi	r25, 0x01	; 1
    67de:	9c 83       	std	Y+4, r25	; 0x04
    67e0:	8b 83       	std	Y+3, r24	; 0x03
    67e2:	8b 81       	ldd	r24, Y+3	; 0x03
    67e4:	9c 81       	ldd	r25, Y+4	; 0x04
    67e6:	01 97       	sbiw	r24, 0x01	; 1
    67e8:	f1 f7       	brne	.-4      	; 0x67e6 <APP_vVolumeLCD+0x1b6>
    67ea:	9c 83       	std	Y+4, r25	; 0x04
    67ec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    67ee:	8d 81       	ldd	r24, Y+5	; 0x05
    67f0:	9e 81       	ldd	r25, Y+6	; 0x06
    67f2:	01 97       	sbiw	r24, 0x01	; 1
    67f4:	9e 83       	std	Y+6, r25	; 0x06
    67f6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    67f8:	8d 81       	ldd	r24, Y+5	; 0x05
    67fa:	9e 81       	ldd	r25, Y+6	; 0x06
    67fc:	00 97       	sbiw	r24, 0x00	; 0
    67fe:	69 f7       	brne	.-38     	; 0x67da <APP_vVolumeLCD+0x1aa>
    6800:	14 c0       	rjmp	.+40     	; 0x682a <APP_vVolumeLCD+0x1fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6802:	6f 81       	ldd	r22, Y+7	; 0x07
    6804:	78 85       	ldd	r23, Y+8	; 0x08
    6806:	89 85       	ldd	r24, Y+9	; 0x09
    6808:	9a 85       	ldd	r25, Y+10	; 0x0a
    680a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    680e:	dc 01       	movw	r26, r24
    6810:	cb 01       	movw	r24, r22
    6812:	9e 83       	std	Y+6, r25	; 0x06
    6814:	8d 83       	std	Y+5, r24	; 0x05
    6816:	8d 81       	ldd	r24, Y+5	; 0x05
    6818:	9e 81       	ldd	r25, Y+6	; 0x06
    681a:	9a 83       	std	Y+2, r25	; 0x02
    681c:	89 83       	std	Y+1, r24	; 0x01
    681e:	89 81       	ldd	r24, Y+1	; 0x01
    6820:	9a 81       	ldd	r25, Y+2	; 0x02
    6822:	01 97       	sbiw	r24, 0x01	; 1
    6824:	f1 f7       	brne	.-4      	; 0x6822 <APP_vVolumeLCD+0x1f2>
    6826:	9a 83       	std	Y+2, r25	; 0x02
    6828:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(250);
			LedAndBuzzer_vBuzzerClose();
    682a:	0e 94 bf 14 	call	0x297e	; 0x297e <LedAndBuzzer_vBuzzerClose>
		}
		LCD_vGoTo(LineOne,0);
    682e:	80 e8       	ldi	r24, 0x80	; 128
    6830:	60 e0       	ldi	r22, 0x00	; 0
    6832:	0e 94 6e 20 	call	0x40dc	; 0x40dc <LCD_vGoTo>
		counter=0;
    6836:	19 8a       	std	Y+17, r1	; 0x11
    6838:	4b cf       	rjmp	.-362    	; 0x66d0 <APP_vVolumeLCD+0xa0>

0000683a <APP_vVolumeVerticalLCD>:
	}
}
//-
void APP_vVolumeVerticalLCD(){
    683a:	df 93       	push	r29
    683c:	cf 93       	push	r28
    683e:	cd b7       	in	r28, 0x3d	; 61
    6840:	de b7       	in	r29, 0x3e	; 62
    6842:	c4 55       	subi	r28, 0x54	; 84
    6844:	d0 40       	sbci	r29, 0x00	; 0
    6846:	0f b6       	in	r0, 0x3f	; 63
    6848:	f8 94       	cli
    684a:	de bf       	out	0x3e, r29	; 62
    684c:	0f be       	out	0x3f, r0	; 63
    684e:	cd bf       	out	0x3d, r28	; 61
	LCD_vInit();
    6850:	0e 94 a8 1a 	call	0x3550	; 0x3550 <LCD_vInit>
	ADC_vInit();
    6854:	0e 94 28 13 	call	0x2650	; 0x2650 <ADC_vInit>
	s16 z;
	s8 counter=0,i,j,y=0;
    6858:	1a 8a       	std	Y+18, r1	; 0x12
    685a:	1f 86       	std	Y+15, r1	; 0x0f
	u8 arr1[8][8];
	for(i=0;i<8;i++){
    685c:	19 8a       	std	Y+17, r1	; 0x11
    685e:	5d c0       	rjmp	.+186    	; 0x691a <APP_vVolumeVerticalLCD+0xe0>
		for(j=i;j<8;j++){
    6860:	89 89       	ldd	r24, Y+17	; 0x11
    6862:	88 8b       	std	Y+16, r24	; 0x10
    6864:	1e c0       	rjmp	.+60     	; 0x68a2 <APP_vVolumeVerticalLCD+0x68>
			arr1[i][7-j]=0x00;
    6866:	89 89       	ldd	r24, Y+17	; 0x11
    6868:	68 2f       	mov	r22, r24
    686a:	70 e0       	ldi	r23, 0x00	; 0
    686c:	88 89       	ldd	r24, Y+16	; 0x10
    686e:	28 2f       	mov	r18, r24
    6870:	30 e0       	ldi	r19, 0x00	; 0
    6872:	87 e0       	ldi	r24, 0x07	; 7
    6874:	90 e0       	ldi	r25, 0x00	; 0
    6876:	ac 01       	movw	r20, r24
    6878:	42 1b       	sub	r20, r18
    687a:	53 0b       	sbc	r21, r19
    687c:	9b 01       	movw	r18, r22
    687e:	22 0f       	add	r18, r18
    6880:	33 1f       	adc	r19, r19
    6882:	22 0f       	add	r18, r18
    6884:	33 1f       	adc	r19, r19
    6886:	22 0f       	add	r18, r18
    6888:	33 1f       	adc	r19, r19
    688a:	ce 01       	movw	r24, r28
    688c:	01 96       	adiw	r24, 0x01	; 1
    688e:	82 0f       	add	r24, r18
    6890:	93 1f       	adc	r25, r19
    6892:	84 0f       	add	r24, r20
    6894:	95 1f       	adc	r25, r21
    6896:	fc 01       	movw	r30, r24
    6898:	74 96       	adiw	r30, 0x14	; 20
    689a:	10 82       	st	Z, r1
	ADC_vInit();
	s16 z;
	s8 counter=0,i,j,y=0;
	u8 arr1[8][8];
	for(i=0;i<8;i++){
		for(j=i;j<8;j++){
    689c:	88 89       	ldd	r24, Y+16	; 0x10
    689e:	8f 5f       	subi	r24, 0xFF	; 255
    68a0:	88 8b       	std	Y+16, r24	; 0x10
    68a2:	88 89       	ldd	r24, Y+16	; 0x10
    68a4:	88 30       	cpi	r24, 0x08	; 8
    68a6:	f8 f2       	brcs	.-66     	; 0x6866 <APP_vVolumeVerticalLCD+0x2c>
			arr1[i][7-j]=0x00;
		}
		for(j=0;j<=i;j++){
    68a8:	18 8a       	std	Y+16, r1	; 0x10
    68aa:	1f c0       	rjmp	.+62     	; 0x68ea <APP_vVolumeVerticalLCD+0xb0>
			arr1[i][7-j]=0x1F;
    68ac:	89 89       	ldd	r24, Y+17	; 0x11
    68ae:	68 2f       	mov	r22, r24
    68b0:	70 e0       	ldi	r23, 0x00	; 0
    68b2:	88 89       	ldd	r24, Y+16	; 0x10
    68b4:	28 2f       	mov	r18, r24
    68b6:	30 e0       	ldi	r19, 0x00	; 0
    68b8:	87 e0       	ldi	r24, 0x07	; 7
    68ba:	90 e0       	ldi	r25, 0x00	; 0
    68bc:	ac 01       	movw	r20, r24
    68be:	42 1b       	sub	r20, r18
    68c0:	53 0b       	sbc	r21, r19
    68c2:	9b 01       	movw	r18, r22
    68c4:	22 0f       	add	r18, r18
    68c6:	33 1f       	adc	r19, r19
    68c8:	22 0f       	add	r18, r18
    68ca:	33 1f       	adc	r19, r19
    68cc:	22 0f       	add	r18, r18
    68ce:	33 1f       	adc	r19, r19
    68d0:	ce 01       	movw	r24, r28
    68d2:	01 96       	adiw	r24, 0x01	; 1
    68d4:	82 0f       	add	r24, r18
    68d6:	93 1f       	adc	r25, r19
    68d8:	84 0f       	add	r24, r20
    68da:	95 1f       	adc	r25, r21
    68dc:	fc 01       	movw	r30, r24
    68de:	74 96       	adiw	r30, 0x14	; 20
    68e0:	8f e1       	ldi	r24, 0x1F	; 31
    68e2:	80 83       	st	Z, r24
	u8 arr1[8][8];
	for(i=0;i<8;i++){
		for(j=i;j<8;j++){
			arr1[i][7-j]=0x00;
		}
		for(j=0;j<=i;j++){
    68e4:	88 89       	ldd	r24, Y+16	; 0x10
    68e6:	8f 5f       	subi	r24, 0xFF	; 255
    68e8:	88 8b       	std	Y+16, r24	; 0x10
    68ea:	98 89       	ldd	r25, Y+16	; 0x10
    68ec:	89 89       	ldd	r24, Y+17	; 0x11
    68ee:	89 17       	cp	r24, r25
    68f0:	e8 f6       	brcc	.-70     	; 0x68ac <APP_vVolumeVerticalLCD+0x72>
			arr1[i][7-j]=0x1F;
		}
		LCD_vCustomCharacter(arr1[i],i);
    68f2:	9e 01       	movw	r18, r28
    68f4:	2b 5e       	subi	r18, 0xEB	; 235
    68f6:	3f 4f       	sbci	r19, 0xFF	; 255
    68f8:	89 89       	ldd	r24, Y+17	; 0x11
    68fa:	88 2f       	mov	r24, r24
    68fc:	90 e0       	ldi	r25, 0x00	; 0
    68fe:	88 0f       	add	r24, r24
    6900:	99 1f       	adc	r25, r25
    6902:	88 0f       	add	r24, r24
    6904:	99 1f       	adc	r25, r25
    6906:	88 0f       	add	r24, r24
    6908:	99 1f       	adc	r25, r25
    690a:	82 0f       	add	r24, r18
    690c:	93 1f       	adc	r25, r19
    690e:	69 89       	ldd	r22, Y+17	; 0x11
    6910:	0e 94 30 21 	call	0x4260	; 0x4260 <LCD_vCustomCharacter>
	LCD_vInit();
	ADC_vInit();
	s16 z;
	s8 counter=0,i,j,y=0;
	u8 arr1[8][8];
	for(i=0;i<8;i++){
    6914:	89 89       	ldd	r24, Y+17	; 0x11
    6916:	8f 5f       	subi	r24, 0xFF	; 255
    6918:	89 8b       	std	Y+17, r24	; 0x11
    691a:	89 89       	ldd	r24, Y+17	; 0x11
    691c:	88 30       	cpi	r24, 0x08	; 8
    691e:	08 f4       	brcc	.+2      	; 0x6922 <APP_vVolumeVerticalLCD+0xe8>
    6920:	9f cf       	rjmp	.-194    	; 0x6860 <APP_vVolumeVerticalLCD+0x26>
			arr1[i][7-j]=0x1F;
		}
		LCD_vCustomCharacter(arr1[i],i);
	}
	while(1){
		z=ADC_vGetVal();
    6922:	0e 94 47 13 	call	0x268e	; 0x268e <ADC_vGetVal>
    6926:	9c 8b       	std	Y+20, r25	; 0x14
    6928:	8b 8b       	std	Y+19, r24	; 0x13
    692a:	09 c0       	rjmp	.+18     	; 0x693e <APP_vVolumeVerticalLCD+0x104>
		while(z>611){
			z=z-611;
    692c:	8b 89       	ldd	r24, Y+19	; 0x13
    692e:	9c 89       	ldd	r25, Y+20	; 0x14
    6930:	83 56       	subi	r24, 0x63	; 99
    6932:	92 40       	sbci	r25, 0x02	; 2
    6934:	9c 8b       	std	Y+20, r25	; 0x14
    6936:	8b 8b       	std	Y+19, r24	; 0x13
			counter++;
    6938:	8a 89       	ldd	r24, Y+18	; 0x12
    693a:	8f 5f       	subi	r24, 0xFF	; 255
    693c:	8a 8b       	std	Y+18, r24	; 0x12
		}
		LCD_vCustomCharacter(arr1[i],i);
	}
	while(1){
		z=ADC_vGetVal();
		while(z>611){
    693e:	8b 89       	ldd	r24, Y+19	; 0x13
    6940:	9c 89       	ldd	r25, Y+20	; 0x14
    6942:	22 e0       	ldi	r18, 0x02	; 2
    6944:	84 36       	cpi	r24, 0x64	; 100
    6946:	92 07       	cpc	r25, r18
    6948:	8c f7       	brge	.-30     	; 0x692c <APP_vVolumeVerticalLCD+0xf2>
			z=z-611;
			counter++;
		}
		for(i=y;i<counter;i++){
    694a:	8f 85       	ldd	r24, Y+15	; 0x0f
    694c:	89 8b       	std	Y+17, r24	; 0x11
    694e:	0a c0       	rjmp	.+20     	; 0x6964 <APP_vVolumeVerticalLCD+0x12a>
			LCD_vGoTo(LineOne,i);
    6950:	80 e8       	ldi	r24, 0x80	; 128
    6952:	69 89       	ldd	r22, Y+17	; 0x11
    6954:	0e 94 6e 20 	call	0x40dc	; 0x40dc <LCD_vGoTo>
			LCD_vWriteCharacter(i);
    6958:	89 89       	ldd	r24, Y+17	; 0x11
    695a:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <LCD_vWriteCharacter>
		z=ADC_vGetVal();
		while(z>611){
			z=z-611;
			counter++;
		}
		for(i=y;i<counter;i++){
    695e:	89 89       	ldd	r24, Y+17	; 0x11
    6960:	8f 5f       	subi	r24, 0xFF	; 255
    6962:	89 8b       	std	Y+17, r24	; 0x11
    6964:	99 89       	ldd	r25, Y+17	; 0x11
    6966:	8a 89       	ldd	r24, Y+18	; 0x12
    6968:	98 17       	cp	r25, r24
    696a:	90 f3       	brcs	.-28     	; 0x6950 <APP_vVolumeVerticalLCD+0x116>
			LCD_vGoTo(LineOne,i);
			LCD_vWriteCharacter(i);
		}
		for(i=y;i>counter;i--){
    696c:	8f 85       	ldd	r24, Y+15	; 0x0f
    696e:	89 8b       	std	Y+17, r24	; 0x11
    6970:	0a c0       	rjmp	.+20     	; 0x6986 <APP_vVolumeVerticalLCD+0x14c>
			LCD_vGoTo(LineOne,i);
    6972:	80 e8       	ldi	r24, 0x80	; 128
    6974:	69 89       	ldd	r22, Y+17	; 0x11
    6976:	0e 94 6e 20 	call	0x40dc	; 0x40dc <LCD_vGoTo>
			LCD_vWriteCharacter(0);
    697a:	80 e0       	ldi	r24, 0x00	; 0
    697c:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <LCD_vWriteCharacter>
		}
		for(i=y;i<counter;i++){
			LCD_vGoTo(LineOne,i);
			LCD_vWriteCharacter(i);
		}
		for(i=y;i>counter;i--){
    6980:	89 89       	ldd	r24, Y+17	; 0x11
    6982:	81 50       	subi	r24, 0x01	; 1
    6984:	89 8b       	std	Y+17, r24	; 0x11
    6986:	99 89       	ldd	r25, Y+17	; 0x11
    6988:	8a 89       	ldd	r24, Y+18	; 0x12
    698a:	89 17       	cp	r24, r25
    698c:	90 f3       	brcs	.-28     	; 0x6972 <APP_vVolumeVerticalLCD+0x138>
			LCD_vGoTo(LineOne,i);
			LCD_vWriteCharacter(0);
		}
		y=counter;
    698e:	8a 89       	ldd	r24, Y+18	; 0x12
    6990:	8f 87       	std	Y+15, r24	; 0x0f
		if(counter==8){
    6992:	8a 89       	ldd	r24, Y+18	; 0x12
    6994:	88 30       	cpi	r24, 0x08	; 8
    6996:	09 f0       	breq	.+2      	; 0x699a <APP_vVolumeVerticalLCD+0x160>
    6998:	76 c0       	rjmp	.+236    	; 0x6a86 <APP_vVolumeVerticalLCD+0x24c>
			LedAndBuzzer_vBuzzerOpen();
    699a:	0e 94 ae 14 	call	0x295c	; 0x295c <LedAndBuzzer_vBuzzerOpen>
    699e:	80 e0       	ldi	r24, 0x00	; 0
    69a0:	90 e0       	ldi	r25, 0x00	; 0
    69a2:	aa e7       	ldi	r26, 0x7A	; 122
    69a4:	b3 e4       	ldi	r27, 0x43	; 67
    69a6:	8b 87       	std	Y+11, r24	; 0x0b
    69a8:	9c 87       	std	Y+12, r25	; 0x0c
    69aa:	ad 87       	std	Y+13, r26	; 0x0d
    69ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    69ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    69b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    69b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    69b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    69b6:	20 e0       	ldi	r18, 0x00	; 0
    69b8:	30 e0       	ldi	r19, 0x00	; 0
    69ba:	4a e7       	ldi	r20, 0x7A	; 122
    69bc:	55 e4       	ldi	r21, 0x45	; 69
    69be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    69c2:	dc 01       	movw	r26, r24
    69c4:	cb 01       	movw	r24, r22
    69c6:	8f 83       	std	Y+7, r24	; 0x07
    69c8:	98 87       	std	Y+8, r25	; 0x08
    69ca:	a9 87       	std	Y+9, r26	; 0x09
    69cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    69ce:	6f 81       	ldd	r22, Y+7	; 0x07
    69d0:	78 85       	ldd	r23, Y+8	; 0x08
    69d2:	89 85       	ldd	r24, Y+9	; 0x09
    69d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    69d6:	20 e0       	ldi	r18, 0x00	; 0
    69d8:	30 e0       	ldi	r19, 0x00	; 0
    69da:	40 e8       	ldi	r20, 0x80	; 128
    69dc:	5f e3       	ldi	r21, 0x3F	; 63
    69de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    69e2:	88 23       	and	r24, r24
    69e4:	2c f4       	brge	.+10     	; 0x69f0 <APP_vVolumeVerticalLCD+0x1b6>
		__ticks = 1;
    69e6:	81 e0       	ldi	r24, 0x01	; 1
    69e8:	90 e0       	ldi	r25, 0x00	; 0
    69ea:	9e 83       	std	Y+6, r25	; 0x06
    69ec:	8d 83       	std	Y+5, r24	; 0x05
    69ee:	3f c0       	rjmp	.+126    	; 0x6a6e <APP_vVolumeVerticalLCD+0x234>
	else if (__tmp > 65535)
    69f0:	6f 81       	ldd	r22, Y+7	; 0x07
    69f2:	78 85       	ldd	r23, Y+8	; 0x08
    69f4:	89 85       	ldd	r24, Y+9	; 0x09
    69f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    69f8:	20 e0       	ldi	r18, 0x00	; 0
    69fa:	3f ef       	ldi	r19, 0xFF	; 255
    69fc:	4f e7       	ldi	r20, 0x7F	; 127
    69fe:	57 e4       	ldi	r21, 0x47	; 71
    6a00:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    6a04:	18 16       	cp	r1, r24
    6a06:	4c f5       	brge	.+82     	; 0x6a5a <APP_vVolumeVerticalLCD+0x220>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6a08:	6b 85       	ldd	r22, Y+11	; 0x0b
    6a0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    6a0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    6a0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    6a10:	20 e0       	ldi	r18, 0x00	; 0
    6a12:	30 e0       	ldi	r19, 0x00	; 0
    6a14:	40 e2       	ldi	r20, 0x20	; 32
    6a16:	51 e4       	ldi	r21, 0x41	; 65
    6a18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6a1c:	dc 01       	movw	r26, r24
    6a1e:	cb 01       	movw	r24, r22
    6a20:	bc 01       	movw	r22, r24
    6a22:	cd 01       	movw	r24, r26
    6a24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6a28:	dc 01       	movw	r26, r24
    6a2a:	cb 01       	movw	r24, r22
    6a2c:	9e 83       	std	Y+6, r25	; 0x06
    6a2e:	8d 83       	std	Y+5, r24	; 0x05
    6a30:	0f c0       	rjmp	.+30     	; 0x6a50 <APP_vVolumeVerticalLCD+0x216>
    6a32:	80 e9       	ldi	r24, 0x90	; 144
    6a34:	91 e0       	ldi	r25, 0x01	; 1
    6a36:	9c 83       	std	Y+4, r25	; 0x04
    6a38:	8b 83       	std	Y+3, r24	; 0x03
    6a3a:	8b 81       	ldd	r24, Y+3	; 0x03
    6a3c:	9c 81       	ldd	r25, Y+4	; 0x04
    6a3e:	01 97       	sbiw	r24, 0x01	; 1
    6a40:	f1 f7       	brne	.-4      	; 0x6a3e <APP_vVolumeVerticalLCD+0x204>
    6a42:	9c 83       	std	Y+4, r25	; 0x04
    6a44:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6a46:	8d 81       	ldd	r24, Y+5	; 0x05
    6a48:	9e 81       	ldd	r25, Y+6	; 0x06
    6a4a:	01 97       	sbiw	r24, 0x01	; 1
    6a4c:	9e 83       	std	Y+6, r25	; 0x06
    6a4e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6a50:	8d 81       	ldd	r24, Y+5	; 0x05
    6a52:	9e 81       	ldd	r25, Y+6	; 0x06
    6a54:	00 97       	sbiw	r24, 0x00	; 0
    6a56:	69 f7       	brne	.-38     	; 0x6a32 <APP_vVolumeVerticalLCD+0x1f8>
    6a58:	14 c0       	rjmp	.+40     	; 0x6a82 <APP_vVolumeVerticalLCD+0x248>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6a5a:	6f 81       	ldd	r22, Y+7	; 0x07
    6a5c:	78 85       	ldd	r23, Y+8	; 0x08
    6a5e:	89 85       	ldd	r24, Y+9	; 0x09
    6a60:	9a 85       	ldd	r25, Y+10	; 0x0a
    6a62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6a66:	dc 01       	movw	r26, r24
    6a68:	cb 01       	movw	r24, r22
    6a6a:	9e 83       	std	Y+6, r25	; 0x06
    6a6c:	8d 83       	std	Y+5, r24	; 0x05
    6a6e:	8d 81       	ldd	r24, Y+5	; 0x05
    6a70:	9e 81       	ldd	r25, Y+6	; 0x06
    6a72:	9a 83       	std	Y+2, r25	; 0x02
    6a74:	89 83       	std	Y+1, r24	; 0x01
    6a76:	89 81       	ldd	r24, Y+1	; 0x01
    6a78:	9a 81       	ldd	r25, Y+2	; 0x02
    6a7a:	01 97       	sbiw	r24, 0x01	; 1
    6a7c:	f1 f7       	brne	.-4      	; 0x6a7a <APP_vVolumeVerticalLCD+0x240>
    6a7e:	9a 83       	std	Y+2, r25	; 0x02
    6a80:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(250);
			LedAndBuzzer_vBuzzerClose();
    6a82:	0e 94 bf 14 	call	0x297e	; 0x297e <LedAndBuzzer_vBuzzerClose>
		}

		counter=0;
    6a86:	1a 8a       	std	Y+18, r1	; 0x12
    6a88:	4c cf       	rjmp	.-360    	; 0x6922 <APP_vVolumeVerticalLCD+0xe8>

00006a8a <main>:
u32 counter=0;
void Task1(void);
void Task2(void);
void Task3(void);

int main(void){
    6a8a:	df 93       	push	r29
    6a8c:	cf 93       	push	r28
    6a8e:	cd b7       	in	r28, 0x3d	; 61
    6a90:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(DDRD,3);
    6a92:	a1 e3       	ldi	r26, 0x31	; 49
    6a94:	b0 e0       	ldi	r27, 0x00	; 0
    6a96:	e1 e3       	ldi	r30, 0x31	; 49
    6a98:	f0 e0       	ldi	r31, 0x00	; 0
    6a9a:	80 81       	ld	r24, Z
    6a9c:	88 60       	ori	r24, 0x08	; 8
    6a9e:	8c 93       	st	X, r24
	SET_BIT(DDRC,2);
    6aa0:	a4 e3       	ldi	r26, 0x34	; 52
    6aa2:	b0 e0       	ldi	r27, 0x00	; 0
    6aa4:	e4 e3       	ldi	r30, 0x34	; 52
    6aa6:	f0 e0       	ldi	r31, 0x00	; 0
    6aa8:	80 81       	ld	r24, Z
    6aaa:	84 60       	ori	r24, 0x04	; 4
    6aac:	8c 93       	st	X, r24
	SET_BIT(DDRC,7);
    6aae:	a4 e3       	ldi	r26, 0x34	; 52
    6ab0:	b0 e0       	ldi	r27, 0x00	; 0
    6ab2:	e4 e3       	ldi	r30, 0x34	; 52
    6ab4:	f0 e0       	ldi	r31, 0x00	; 0
    6ab6:	80 81       	ld	r24, Z
    6ab8:	80 68       	ori	r24, 0x80	; 128
    6aba:	8c 93       	st	X, r24
	//SET_BIT(PORTC,7);

	OS_AddTask(0,2,Task1);
    6abc:	2e e7       	ldi	r18, 0x7E	; 126
    6abe:	35 e3       	ldi	r19, 0x35	; 53
    6ac0:	80 e0       	ldi	r24, 0x00	; 0
    6ac2:	42 e0       	ldi	r20, 0x02	; 2
    6ac4:	50 e0       	ldi	r21, 0x00	; 0
    6ac6:	60 e0       	ldi	r22, 0x00	; 0
    6ac8:	70 e0       	ldi	r23, 0x00	; 0
    6aca:	0e 94 b0 05 	call	0xb60	; 0xb60 <OS_AddTask>
	OS_AddTask(1,3,Task2);
    6ace:	2d e8       	ldi	r18, 0x8D	; 141
    6ad0:	35 e3       	ldi	r19, 0x35	; 53
    6ad2:	81 e0       	ldi	r24, 0x01	; 1
    6ad4:	43 e0       	ldi	r20, 0x03	; 3
    6ad6:	50 e0       	ldi	r21, 0x00	; 0
    6ad8:	60 e0       	ldi	r22, 0x00	; 0
    6ada:	70 e0       	ldi	r23, 0x00	; 0
    6adc:	0e 94 b0 05 	call	0xb60	; 0xb60 <OS_AddTask>
	OS_AddTask(2,4,Task3);
    6ae0:	2c e9       	ldi	r18, 0x9C	; 156
    6ae2:	35 e3       	ldi	r19, 0x35	; 53
    6ae4:	82 e0       	ldi	r24, 0x02	; 2
    6ae6:	44 e0       	ldi	r20, 0x04	; 4
    6ae8:	50 e0       	ldi	r21, 0x00	; 0
    6aea:	60 e0       	ldi	r22, 0x00	; 0
    6aec:	70 e0       	ldi	r23, 0x00	; 0
    6aee:	0e 94 b0 05 	call	0xb60	; 0xb60 <OS_AddTask>
	OS_StartScheduler();
    6af2:	0e 94 53 06 	call	0xca6	; 0xca6 <OS_StartScheduler>
	OS_vInit();
    6af6:	0e 94 a3 05 	call	0xb46	; 0xb46 <OS_vInit>
    6afa:	ff cf       	rjmp	.-2      	; 0x6afa <main+0x70>

00006afc <Task1>:
		SET_BIT(PORTD,7);
		counter=0;
	}
}
 */
void Task1(){
    6afc:	df 93       	push	r29
    6afe:	cf 93       	push	r28
    6b00:	cd b7       	in	r28, 0x3d	; 61
    6b02:	de b7       	in	r29, 0x3e	; 62
	TOG_BIT(PORTD,3);
    6b04:	a2 e3       	ldi	r26, 0x32	; 50
    6b06:	b0 e0       	ldi	r27, 0x00	; 0
    6b08:	e2 e3       	ldi	r30, 0x32	; 50
    6b0a:	f0 e0       	ldi	r31, 0x00	; 0
    6b0c:	90 81       	ld	r25, Z
    6b0e:	88 e0       	ldi	r24, 0x08	; 8
    6b10:	89 27       	eor	r24, r25
    6b12:	8c 93       	st	X, r24
}
    6b14:	cf 91       	pop	r28
    6b16:	df 91       	pop	r29
    6b18:	08 95       	ret

00006b1a <Task2>:
void Task2(){
    6b1a:	df 93       	push	r29
    6b1c:	cf 93       	push	r28
    6b1e:	cd b7       	in	r28, 0x3d	; 61
    6b20:	de b7       	in	r29, 0x3e	; 62
	TOG_BIT(PORTC,2);
    6b22:	a5 e3       	ldi	r26, 0x35	; 53
    6b24:	b0 e0       	ldi	r27, 0x00	; 0
    6b26:	e5 e3       	ldi	r30, 0x35	; 53
    6b28:	f0 e0       	ldi	r31, 0x00	; 0
    6b2a:	90 81       	ld	r25, Z
    6b2c:	84 e0       	ldi	r24, 0x04	; 4
    6b2e:	89 27       	eor	r24, r25
    6b30:	8c 93       	st	X, r24
}
    6b32:	cf 91       	pop	r28
    6b34:	df 91       	pop	r29
    6b36:	08 95       	ret

00006b38 <Task3>:
void Task3(){
    6b38:	df 93       	push	r29
    6b3a:	cf 93       	push	r28
    6b3c:	cd b7       	in	r28, 0x3d	; 61
    6b3e:	de b7       	in	r29, 0x3e	; 62
	TOG_BIT(PORTC,7);
    6b40:	a5 e3       	ldi	r26, 0x35	; 53
    6b42:	b0 e0       	ldi	r27, 0x00	; 0
    6b44:	e5 e3       	ldi	r30, 0x35	; 53
    6b46:	f0 e0       	ldi	r31, 0x00	; 0
    6b48:	90 81       	ld	r25, Z
    6b4a:	80 e8       	ldi	r24, 0x80	; 128
    6b4c:	89 27       	eor	r24, r25
    6b4e:	8c 93       	st	X, r24

}
    6b50:	cf 91       	pop	r28
    6b52:	df 91       	pop	r29
    6b54:	08 95       	ret

00006b56 <__mulsi3>:
    6b56:	62 9f       	mul	r22, r18
    6b58:	d0 01       	movw	r26, r0
    6b5a:	73 9f       	mul	r23, r19
    6b5c:	f0 01       	movw	r30, r0
    6b5e:	82 9f       	mul	r24, r18
    6b60:	e0 0d       	add	r30, r0
    6b62:	f1 1d       	adc	r31, r1
    6b64:	64 9f       	mul	r22, r20
    6b66:	e0 0d       	add	r30, r0
    6b68:	f1 1d       	adc	r31, r1
    6b6a:	92 9f       	mul	r25, r18
    6b6c:	f0 0d       	add	r31, r0
    6b6e:	83 9f       	mul	r24, r19
    6b70:	f0 0d       	add	r31, r0
    6b72:	74 9f       	mul	r23, r20
    6b74:	f0 0d       	add	r31, r0
    6b76:	65 9f       	mul	r22, r21
    6b78:	f0 0d       	add	r31, r0
    6b7a:	99 27       	eor	r25, r25
    6b7c:	72 9f       	mul	r23, r18
    6b7e:	b0 0d       	add	r27, r0
    6b80:	e1 1d       	adc	r30, r1
    6b82:	f9 1f       	adc	r31, r25
    6b84:	63 9f       	mul	r22, r19
    6b86:	b0 0d       	add	r27, r0
    6b88:	e1 1d       	adc	r30, r1
    6b8a:	f9 1f       	adc	r31, r25
    6b8c:	bd 01       	movw	r22, r26
    6b8e:	cf 01       	movw	r24, r30
    6b90:	11 24       	eor	r1, r1
    6b92:	08 95       	ret

00006b94 <__udivmodqi4>:
    6b94:	99 1b       	sub	r25, r25
    6b96:	79 e0       	ldi	r23, 0x09	; 9
    6b98:	04 c0       	rjmp	.+8      	; 0x6ba2 <__udivmodqi4_ep>

00006b9a <__udivmodqi4_loop>:
    6b9a:	99 1f       	adc	r25, r25
    6b9c:	96 17       	cp	r25, r22
    6b9e:	08 f0       	brcs	.+2      	; 0x6ba2 <__udivmodqi4_ep>
    6ba0:	96 1b       	sub	r25, r22

00006ba2 <__udivmodqi4_ep>:
    6ba2:	88 1f       	adc	r24, r24
    6ba4:	7a 95       	dec	r23
    6ba6:	c9 f7       	brne	.-14     	; 0x6b9a <__udivmodqi4_loop>
    6ba8:	80 95       	com	r24
    6baa:	08 95       	ret

00006bac <__udivmodhi4>:
    6bac:	aa 1b       	sub	r26, r26
    6bae:	bb 1b       	sub	r27, r27
    6bb0:	51 e1       	ldi	r21, 0x11	; 17
    6bb2:	07 c0       	rjmp	.+14     	; 0x6bc2 <__udivmodhi4_ep>

00006bb4 <__udivmodhi4_loop>:
    6bb4:	aa 1f       	adc	r26, r26
    6bb6:	bb 1f       	adc	r27, r27
    6bb8:	a6 17       	cp	r26, r22
    6bba:	b7 07       	cpc	r27, r23
    6bbc:	10 f0       	brcs	.+4      	; 0x6bc2 <__udivmodhi4_ep>
    6bbe:	a6 1b       	sub	r26, r22
    6bc0:	b7 0b       	sbc	r27, r23

00006bc2 <__udivmodhi4_ep>:
    6bc2:	88 1f       	adc	r24, r24
    6bc4:	99 1f       	adc	r25, r25
    6bc6:	5a 95       	dec	r21
    6bc8:	a9 f7       	brne	.-22     	; 0x6bb4 <__udivmodhi4_loop>
    6bca:	80 95       	com	r24
    6bcc:	90 95       	com	r25
    6bce:	bc 01       	movw	r22, r24
    6bd0:	cd 01       	movw	r24, r26
    6bd2:	08 95       	ret

00006bd4 <__divmodhi4>:
    6bd4:	97 fb       	bst	r25, 7
    6bd6:	09 2e       	mov	r0, r25
    6bd8:	07 26       	eor	r0, r23
    6bda:	0a d0       	rcall	.+20     	; 0x6bf0 <__divmodhi4_neg1>
    6bdc:	77 fd       	sbrc	r23, 7
    6bde:	04 d0       	rcall	.+8      	; 0x6be8 <__divmodhi4_neg2>
    6be0:	e5 df       	rcall	.-54     	; 0x6bac <__udivmodhi4>
    6be2:	06 d0       	rcall	.+12     	; 0x6bf0 <__divmodhi4_neg1>
    6be4:	00 20       	and	r0, r0
    6be6:	1a f4       	brpl	.+6      	; 0x6bee <__divmodhi4_exit>

00006be8 <__divmodhi4_neg2>:
    6be8:	70 95       	com	r23
    6bea:	61 95       	neg	r22
    6bec:	7f 4f       	sbci	r23, 0xFF	; 255

00006bee <__divmodhi4_exit>:
    6bee:	08 95       	ret

00006bf0 <__divmodhi4_neg1>:
    6bf0:	f6 f7       	brtc	.-4      	; 0x6bee <__divmodhi4_exit>
    6bf2:	90 95       	com	r25
    6bf4:	81 95       	neg	r24
    6bf6:	9f 4f       	sbci	r25, 0xFF	; 255
    6bf8:	08 95       	ret

00006bfa <__udivmodsi4>:
    6bfa:	a1 e2       	ldi	r26, 0x21	; 33
    6bfc:	1a 2e       	mov	r1, r26
    6bfe:	aa 1b       	sub	r26, r26
    6c00:	bb 1b       	sub	r27, r27
    6c02:	fd 01       	movw	r30, r26
    6c04:	0d c0       	rjmp	.+26     	; 0x6c20 <__udivmodsi4_ep>

00006c06 <__udivmodsi4_loop>:
    6c06:	aa 1f       	adc	r26, r26
    6c08:	bb 1f       	adc	r27, r27
    6c0a:	ee 1f       	adc	r30, r30
    6c0c:	ff 1f       	adc	r31, r31
    6c0e:	a2 17       	cp	r26, r18
    6c10:	b3 07       	cpc	r27, r19
    6c12:	e4 07       	cpc	r30, r20
    6c14:	f5 07       	cpc	r31, r21
    6c16:	20 f0       	brcs	.+8      	; 0x6c20 <__udivmodsi4_ep>
    6c18:	a2 1b       	sub	r26, r18
    6c1a:	b3 0b       	sbc	r27, r19
    6c1c:	e4 0b       	sbc	r30, r20
    6c1e:	f5 0b       	sbc	r31, r21

00006c20 <__udivmodsi4_ep>:
    6c20:	66 1f       	adc	r22, r22
    6c22:	77 1f       	adc	r23, r23
    6c24:	88 1f       	adc	r24, r24
    6c26:	99 1f       	adc	r25, r25
    6c28:	1a 94       	dec	r1
    6c2a:	69 f7       	brne	.-38     	; 0x6c06 <__udivmodsi4_loop>
    6c2c:	60 95       	com	r22
    6c2e:	70 95       	com	r23
    6c30:	80 95       	com	r24
    6c32:	90 95       	com	r25
    6c34:	9b 01       	movw	r18, r22
    6c36:	ac 01       	movw	r20, r24
    6c38:	bd 01       	movw	r22, r26
    6c3a:	cf 01       	movw	r24, r30
    6c3c:	08 95       	ret

00006c3e <__divmodsi4>:
    6c3e:	97 fb       	bst	r25, 7
    6c40:	09 2e       	mov	r0, r25
    6c42:	05 26       	eor	r0, r21
    6c44:	0e d0       	rcall	.+28     	; 0x6c62 <__divmodsi4_neg1>
    6c46:	57 fd       	sbrc	r21, 7
    6c48:	04 d0       	rcall	.+8      	; 0x6c52 <__divmodsi4_neg2>
    6c4a:	d7 df       	rcall	.-82     	; 0x6bfa <__udivmodsi4>
    6c4c:	0a d0       	rcall	.+20     	; 0x6c62 <__divmodsi4_neg1>
    6c4e:	00 1c       	adc	r0, r0
    6c50:	38 f4       	brcc	.+14     	; 0x6c60 <__divmodsi4_exit>

00006c52 <__divmodsi4_neg2>:
    6c52:	50 95       	com	r21
    6c54:	40 95       	com	r20
    6c56:	30 95       	com	r19
    6c58:	21 95       	neg	r18
    6c5a:	3f 4f       	sbci	r19, 0xFF	; 255
    6c5c:	4f 4f       	sbci	r20, 0xFF	; 255
    6c5e:	5f 4f       	sbci	r21, 0xFF	; 255

00006c60 <__divmodsi4_exit>:
    6c60:	08 95       	ret

00006c62 <__divmodsi4_neg1>:
    6c62:	f6 f7       	brtc	.-4      	; 0x6c60 <__divmodsi4_exit>
    6c64:	90 95       	com	r25
    6c66:	80 95       	com	r24
    6c68:	70 95       	com	r23
    6c6a:	61 95       	neg	r22
    6c6c:	7f 4f       	sbci	r23, 0xFF	; 255
    6c6e:	8f 4f       	sbci	r24, 0xFF	; 255
    6c70:	9f 4f       	sbci	r25, 0xFF	; 255
    6c72:	08 95       	ret

00006c74 <__prologue_saves__>:
    6c74:	2f 92       	push	r2
    6c76:	3f 92       	push	r3
    6c78:	4f 92       	push	r4
    6c7a:	5f 92       	push	r5
    6c7c:	6f 92       	push	r6
    6c7e:	7f 92       	push	r7
    6c80:	8f 92       	push	r8
    6c82:	9f 92       	push	r9
    6c84:	af 92       	push	r10
    6c86:	bf 92       	push	r11
    6c88:	cf 92       	push	r12
    6c8a:	df 92       	push	r13
    6c8c:	ef 92       	push	r14
    6c8e:	ff 92       	push	r15
    6c90:	0f 93       	push	r16
    6c92:	1f 93       	push	r17
    6c94:	cf 93       	push	r28
    6c96:	df 93       	push	r29
    6c98:	cd b7       	in	r28, 0x3d	; 61
    6c9a:	de b7       	in	r29, 0x3e	; 62
    6c9c:	ca 1b       	sub	r28, r26
    6c9e:	db 0b       	sbc	r29, r27
    6ca0:	0f b6       	in	r0, 0x3f	; 63
    6ca2:	f8 94       	cli
    6ca4:	de bf       	out	0x3e, r29	; 62
    6ca6:	0f be       	out	0x3f, r0	; 63
    6ca8:	cd bf       	out	0x3d, r28	; 61
    6caa:	09 94       	ijmp

00006cac <__epilogue_restores__>:
    6cac:	2a 88       	ldd	r2, Y+18	; 0x12
    6cae:	39 88       	ldd	r3, Y+17	; 0x11
    6cb0:	48 88       	ldd	r4, Y+16	; 0x10
    6cb2:	5f 84       	ldd	r5, Y+15	; 0x0f
    6cb4:	6e 84       	ldd	r6, Y+14	; 0x0e
    6cb6:	7d 84       	ldd	r7, Y+13	; 0x0d
    6cb8:	8c 84       	ldd	r8, Y+12	; 0x0c
    6cba:	9b 84       	ldd	r9, Y+11	; 0x0b
    6cbc:	aa 84       	ldd	r10, Y+10	; 0x0a
    6cbe:	b9 84       	ldd	r11, Y+9	; 0x09
    6cc0:	c8 84       	ldd	r12, Y+8	; 0x08
    6cc2:	df 80       	ldd	r13, Y+7	; 0x07
    6cc4:	ee 80       	ldd	r14, Y+6	; 0x06
    6cc6:	fd 80       	ldd	r15, Y+5	; 0x05
    6cc8:	0c 81       	ldd	r16, Y+4	; 0x04
    6cca:	1b 81       	ldd	r17, Y+3	; 0x03
    6ccc:	aa 81       	ldd	r26, Y+2	; 0x02
    6cce:	b9 81       	ldd	r27, Y+1	; 0x01
    6cd0:	ce 0f       	add	r28, r30
    6cd2:	d1 1d       	adc	r29, r1
    6cd4:	0f b6       	in	r0, 0x3f	; 63
    6cd6:	f8 94       	cli
    6cd8:	de bf       	out	0x3e, r29	; 62
    6cda:	0f be       	out	0x3f, r0	; 63
    6cdc:	cd bf       	out	0x3d, r28	; 61
    6cde:	ed 01       	movw	r28, r26
    6ce0:	08 95       	ret

00006ce2 <_exit>:
    6ce2:	f8 94       	cli

00006ce4 <__stop_program>:
    6ce4:	ff cf       	rjmp	.-2      	; 0x6ce4 <__stop_program>
