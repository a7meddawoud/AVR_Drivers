
medo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000695c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000066  00800060  0000695c  000069f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000024  008000c6  008000c6  00006a56  2**0
                  ALLOC
  3 .stab         00006df8  00000000  00000000  00006a58  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000231b  00000000  00000000  0000d850  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000fb6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000fcab  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000fe1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00011a64  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0001294f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000136fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0001385c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00013ae9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000142b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 eb 1d 	jmp	0x3bd6	; 0x3bd6 <__vector_1>
       8:	0c 94 1e 1e 	jmp	0x3c3c	; 0x3c3c <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 4d 31 	jmp	0x629a	; 0x629a <__vector_6>
      1c:	0c 94 b4 30 	jmp	0x6168	; 0x6168 <__vector_7>
      20:	0c 94 e7 30 	jmp	0x61ce	; 0x61ce <__vector_8>
      24:	0c 94 1a 31 	jmp	0x6234	; 0x6234 <__vector_9>
      28:	0c 94 03 2e 	jmp	0x5c06	; 0x5c06 <__vector_10>
      2c:	0c 94 36 2e 	jmp	0x5c6c	; 0x5c6c <__vector_11>
      30:	0c 94 4a 2d 	jmp	0x5a94	; 0x5a94 <__vector_12>
      34:	0c 94 33 32 	jmp	0x6466	; 0x6466 <__vector_13>
      38:	0c 94 66 32 	jmp	0x64cc	; 0x64cc <__vector_14>
      3c:	0c 94 99 32 	jmp	0x6532	; 0x6532 <__vector_15>
      40:	0c 94 9f 06 	jmp	0xd3e	; 0xd3e <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e5       	ldi	r30, 0x5C	; 92
      68:	f9 e6       	ldi	r31, 0x69	; 105
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3c       	cpi	r26, 0xC6	; 198
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 ec       	ldi	r26, 0xC6	; 198
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 3e       	cpi	r26, 0xEA	; 234
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6d 33 	call	0x66da	; 0x66da <main>
      8a:	0c 94 ac 34 	jmp	0x6958	; 0x6958 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 75 34 	jmp	0x68ea	; 0x68ea <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 ea       	ldi	r26, 0xA5	; 165
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 91 34 	jmp	0x6922	; 0x6922 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 81 34 	jmp	0x6902	; 0x6902 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 9d 34 	jmp	0x693a	; 0x693a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 81 34 	jmp	0x6902	; 0x6902 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 9d 34 	jmp	0x693a	; 0x693a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 75 34 	jmp	0x68ea	; 0x68ea <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	85 ea       	ldi	r24, 0xA5	; 165
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 91 34 	jmp	0x6922	; 0x6922 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 81 34 	jmp	0x6902	; 0x6902 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 9d 34 	jmp	0x693a	; 0x693a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 81 34 	jmp	0x6902	; 0x6902 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 9d 34 	jmp	0x693a	; 0x693a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 81 34 	jmp	0x6902	; 0x6902 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 9d 34 	jmp	0x693a	; 0x693a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 85 34 	jmp	0x690a	; 0x690a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 a1 34 	jmp	0x6942	; 0x6942 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_vInit>:
 *      Author: a7med
 */
void(*Aptr)(void)='\0';

#include "ADC.h"
void ADC_vInit(){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
#if PollingOrInterrupt==Polling
	#if	ADCMode==SingleConvertion
		ADCSRA = 0x87;
	#elif ADCMode==FreeRunningMode
		ADCSRA = 0xA7;
     b4e:	e6 e2       	ldi	r30, 0x26	; 38
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	87 ea       	ldi	r24, 0xA7	; 167
     b54:	80 83       	st	Z, r24
		SFIOR = SFIOR|0x00;
     b56:	a0 e5       	ldi	r26, 0x50	; 80
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	e0 e5       	ldi	r30, 0x50	; 80
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	80 81       	ld	r24, Z
     b60:	8c 93       	st	X, r24
		CLR_BIT(SFIOR,5);
		SET_BIT(SFIOR,6);
		CLR_BIT(SFIOR,7);
	#endif
#endif
	ADMUX=(0x60|((ADCNum)&0x1F));
     b62:	27 e2       	ldi	r18, 0x27	; 39
     b64:	30 e0       	ldi	r19, 0x00	; 0
     b66:	a7 e2       	ldi	r26, 0x27	; 39
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	e7 e2       	ldi	r30, 0x27	; 39
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	80 81       	ld	r24, Z
     b70:	81 60       	ori	r24, 0x01	; 1
     b72:	8c 93       	st	X, r24
     b74:	8c 91       	ld	r24, X
     b76:	8f 71       	andi	r24, 0x1F	; 31
     b78:	80 66       	ori	r24, 0x60	; 96
     b7a:	f9 01       	movw	r30, r18
     b7c:	80 83       	st	Z, r24
	}
     b7e:	cf 91       	pop	r28
     b80:	df 91       	pop	r29
     b82:	08 95       	ret

00000b84 <ADC_vGetVal>:
	u16 ADC_vGetVal(){
     b84:	df 93       	push	r29
     b86:	cf 93       	push	r28
     b88:	cd b7       	in	r28, 0x3d	; 61
     b8a:	de b7       	in	r29, 0x3e	; 62
     b8c:	66 97       	sbiw	r28, 0x16	; 22
     b8e:	0f b6       	in	r0, 0x3f	; 63
     b90:	f8 94       	cli
     b92:	de bf       	out	0x3e, r29	; 62
     b94:	0f be       	out	0x3f, r0	; 63
     b96:	cd bf       	out	0x3d, r28	; 61
		StartConversion;
     b98:	a6 e2       	ldi	r26, 0x26	; 38
     b9a:	b0 e0       	ldi	r27, 0x00	; 0
     b9c:	e6 e2       	ldi	r30, 0x26	; 38
     b9e:	f0 e0       	ldi	r31, 0x00	; 0
     ba0:	80 81       	ld	r24, Z
     ba2:	80 64       	ori	r24, 0x40	; 64
     ba4:	8c 93       	st	X, r24
		u32 y;
		u32 z;
	#if ADCMode==FreeRunningMode
			while((ADIF)==0);
     ba6:	e6 e2       	ldi	r30, 0x26	; 38
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	82 95       	swap	r24
     bae:	8f 70       	andi	r24, 0x0F	; 15
     bb0:	88 2f       	mov	r24, r24
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	81 70       	andi	r24, 0x01	; 1
     bb6:	90 70       	andi	r25, 0x00	; 0
     bb8:	00 97       	sbiw	r24, 0x00	; 0
     bba:	a9 f3       	breq	.-22     	; 0xba6 <ADC_vGetVal+0x22>
     bbc:	80 e0       	ldi	r24, 0x00	; 0
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	a0 e2       	ldi	r26, 0x20	; 32
     bc2:	b1 e4       	ldi	r27, 0x41	; 65
     bc4:	8b 87       	std	Y+11, r24	; 0x0b
     bc6:	9c 87       	std	Y+12, r25	; 0x0c
     bc8:	ad 87       	std	Y+13, r26	; 0x0d
     bca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bcc:	6b 85       	ldd	r22, Y+11	; 0x0b
     bce:	7c 85       	ldd	r23, Y+12	; 0x0c
     bd0:	8d 85       	ldd	r24, Y+13	; 0x0d
     bd2:	9e 85       	ldd	r25, Y+14	; 0x0e
     bd4:	20 e0       	ldi	r18, 0x00	; 0
     bd6:	30 e0       	ldi	r19, 0x00	; 0
     bd8:	4a e7       	ldi	r20, 0x7A	; 122
     bda:	55 e4       	ldi	r21, 0x45	; 69
     bdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     be0:	dc 01       	movw	r26, r24
     be2:	cb 01       	movw	r24, r22
     be4:	8f 83       	std	Y+7, r24	; 0x07
     be6:	98 87       	std	Y+8, r25	; 0x08
     be8:	a9 87       	std	Y+9, r26	; 0x09
     bea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bec:	6f 81       	ldd	r22, Y+7	; 0x07
     bee:	78 85       	ldd	r23, Y+8	; 0x08
     bf0:	89 85       	ldd	r24, Y+9	; 0x09
     bf2:	9a 85       	ldd	r25, Y+10	; 0x0a
     bf4:	20 e0       	ldi	r18, 0x00	; 0
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	40 e8       	ldi	r20, 0x80	; 128
     bfa:	5f e3       	ldi	r21, 0x3F	; 63
     bfc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c00:	88 23       	and	r24, r24
     c02:	2c f4       	brge	.+10     	; 0xc0e <ADC_vGetVal+0x8a>
		__ticks = 1;
     c04:	81 e0       	ldi	r24, 0x01	; 1
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	9e 83       	std	Y+6, r25	; 0x06
     c0a:	8d 83       	std	Y+5, r24	; 0x05
     c0c:	3f c0       	rjmp	.+126    	; 0xc8c <ADC_vGetVal+0x108>
	else if (__tmp > 65535)
     c0e:	6f 81       	ldd	r22, Y+7	; 0x07
     c10:	78 85       	ldd	r23, Y+8	; 0x08
     c12:	89 85       	ldd	r24, Y+9	; 0x09
     c14:	9a 85       	ldd	r25, Y+10	; 0x0a
     c16:	20 e0       	ldi	r18, 0x00	; 0
     c18:	3f ef       	ldi	r19, 0xFF	; 255
     c1a:	4f e7       	ldi	r20, 0x7F	; 127
     c1c:	57 e4       	ldi	r21, 0x47	; 71
     c1e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c22:	18 16       	cp	r1, r24
     c24:	4c f5       	brge	.+82     	; 0xc78 <ADC_vGetVal+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c26:	6b 85       	ldd	r22, Y+11	; 0x0b
     c28:	7c 85       	ldd	r23, Y+12	; 0x0c
     c2a:	8d 85       	ldd	r24, Y+13	; 0x0d
     c2c:	9e 85       	ldd	r25, Y+14	; 0x0e
     c2e:	20 e0       	ldi	r18, 0x00	; 0
     c30:	30 e0       	ldi	r19, 0x00	; 0
     c32:	40 e2       	ldi	r20, 0x20	; 32
     c34:	51 e4       	ldi	r21, 0x41	; 65
     c36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c3a:	dc 01       	movw	r26, r24
     c3c:	cb 01       	movw	r24, r22
     c3e:	bc 01       	movw	r22, r24
     c40:	cd 01       	movw	r24, r26
     c42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c46:	dc 01       	movw	r26, r24
     c48:	cb 01       	movw	r24, r22
     c4a:	9e 83       	std	Y+6, r25	; 0x06
     c4c:	8d 83       	std	Y+5, r24	; 0x05
     c4e:	0f c0       	rjmp	.+30     	; 0xc6e <ADC_vGetVal+0xea>
     c50:	80 e9       	ldi	r24, 0x90	; 144
     c52:	91 e0       	ldi	r25, 0x01	; 1
     c54:	9c 83       	std	Y+4, r25	; 0x04
     c56:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c58:	8b 81       	ldd	r24, Y+3	; 0x03
     c5a:	9c 81       	ldd	r25, Y+4	; 0x04
     c5c:	01 97       	sbiw	r24, 0x01	; 1
     c5e:	f1 f7       	brne	.-4      	; 0xc5c <ADC_vGetVal+0xd8>
     c60:	9c 83       	std	Y+4, r25	; 0x04
     c62:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c64:	8d 81       	ldd	r24, Y+5	; 0x05
     c66:	9e 81       	ldd	r25, Y+6	; 0x06
     c68:	01 97       	sbiw	r24, 0x01	; 1
     c6a:	9e 83       	std	Y+6, r25	; 0x06
     c6c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c6e:	8d 81       	ldd	r24, Y+5	; 0x05
     c70:	9e 81       	ldd	r25, Y+6	; 0x06
     c72:	00 97       	sbiw	r24, 0x00	; 0
     c74:	69 f7       	brne	.-38     	; 0xc50 <ADC_vGetVal+0xcc>
     c76:	14 c0       	rjmp	.+40     	; 0xca0 <ADC_vGetVal+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c78:	6f 81       	ldd	r22, Y+7	; 0x07
     c7a:	78 85       	ldd	r23, Y+8	; 0x08
     c7c:	89 85       	ldd	r24, Y+9	; 0x09
     c7e:	9a 85       	ldd	r25, Y+10	; 0x0a
     c80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c84:	dc 01       	movw	r26, r24
     c86:	cb 01       	movw	r24, r22
     c88:	9e 83       	std	Y+6, r25	; 0x06
     c8a:	8d 83       	std	Y+5, r24	; 0x05
     c8c:	8d 81       	ldd	r24, Y+5	; 0x05
     c8e:	9e 81       	ldd	r25, Y+6	; 0x06
     c90:	9a 83       	std	Y+2, r25	; 0x02
     c92:	89 83       	std	Y+1, r24	; 0x01
     c94:	89 81       	ldd	r24, Y+1	; 0x01
     c96:	9a 81       	ldd	r25, Y+2	; 0x02
     c98:	01 97       	sbiw	r24, 0x01	; 1
     c9a:	f1 f7       	brne	.-4      	; 0xc98 <ADC_vGetVal+0x114>
     c9c:	9a 83       	std	Y+2, r25	; 0x02
     c9e:	89 83       	std	Y+1, r24	; 0x01
	#elif ADCMode==SingleConvertion
			StartConversion;
			while(CheckConversoin==1);
	#endif
		_delay_ms(10);
		y = (((u32)ADCH)<<2);
     ca0:	e5 e2       	ldi	r30, 0x25	; 37
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	80 81       	ld	r24, Z
     ca6:	88 2f       	mov	r24, r24
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	a0 e0       	ldi	r26, 0x00	; 0
     cac:	b0 e0       	ldi	r27, 0x00	; 0
     cae:	88 0f       	add	r24, r24
     cb0:	99 1f       	adc	r25, r25
     cb2:	aa 1f       	adc	r26, r26
     cb4:	bb 1f       	adc	r27, r27
     cb6:	88 0f       	add	r24, r24
     cb8:	99 1f       	adc	r25, r25
     cba:	aa 1f       	adc	r26, r26
     cbc:	bb 1f       	adc	r27, r27
     cbe:	8b 8b       	std	Y+19, r24	; 0x13
     cc0:	9c 8b       	std	Y+20, r25	; 0x14
     cc2:	ad 8b       	std	Y+21, r26	; 0x15
     cc4:	be 8b       	std	Y+22, r27	; 0x16
		z = (y*5000)/1024;
     cc6:	8b 89       	ldd	r24, Y+19	; 0x13
     cc8:	9c 89       	ldd	r25, Y+20	; 0x14
     cca:	ad 89       	ldd	r26, Y+21	; 0x15
     ccc:	be 89       	ldd	r27, Y+22	; 0x16
     cce:	28 e8       	ldi	r18, 0x88	; 136
     cd0:	33 e1       	ldi	r19, 0x13	; 19
     cd2:	40 e0       	ldi	r20, 0x00	; 0
     cd4:	50 e0       	ldi	r21, 0x00	; 0
     cd6:	bc 01       	movw	r22, r24
     cd8:	cd 01       	movw	r24, r26
     cda:	0e 94 e6 33 	call	0x67cc	; 0x67cc <__mulsi3>
     cde:	dc 01       	movw	r26, r24
     ce0:	cb 01       	movw	r24, r22
     ce2:	07 2e       	mov	r0, r23
     ce4:	7a e0       	ldi	r23, 0x0A	; 10
     ce6:	b6 95       	lsr	r27
     ce8:	a7 95       	ror	r26
     cea:	97 95       	ror	r25
     cec:	87 95       	ror	r24
     cee:	7a 95       	dec	r23
     cf0:	d1 f7       	brne	.-12     	; 0xce6 <ADC_vGetVal+0x162>
     cf2:	70 2d       	mov	r23, r0
     cf4:	8f 87       	std	Y+15, r24	; 0x0f
     cf6:	98 8b       	std	Y+16, r25	; 0x10
     cf8:	a9 8b       	std	Y+17, r26	; 0x11
     cfa:	ba 8b       	std	Y+18, r27	; 0x12
		return z;
     cfc:	8f 85       	ldd	r24, Y+15	; 0x0f
     cfe:	98 89       	ldd	r25, Y+16	; 0x10
	}
     d00:	66 96       	adiw	r28, 0x16	; 22
     d02:	0f b6       	in	r0, 0x3f	; 63
     d04:	f8 94       	cli
     d06:	de bf       	out	0x3e, r29	; 62
     d08:	0f be       	out	0x3f, r0	; 63
     d0a:	cd bf       	out	0x3d, r28	; 61
     d0c:	cf 91       	pop	r28
     d0e:	df 91       	pop	r29
     d10:	08 95       	ret

00000d12 <ADC_vADCCallBack>:
	void ADC_vADCCallBack(void(*ptr)(void)){
     d12:	df 93       	push	r29
     d14:	cf 93       	push	r28
     d16:	00 d0       	rcall	.+0      	; 0xd18 <ADC_vADCCallBack+0x6>
     d18:	cd b7       	in	r28, 0x3d	; 61
     d1a:	de b7       	in	r29, 0x3e	; 62
     d1c:	9a 83       	std	Y+2, r25	; 0x02
     d1e:	89 83       	std	Y+1, r24	; 0x01
		if(ptr!='\0'){
     d20:	89 81       	ldd	r24, Y+1	; 0x01
     d22:	9a 81       	ldd	r25, Y+2	; 0x02
     d24:	00 97       	sbiw	r24, 0x00	; 0
     d26:	31 f0       	breq	.+12     	; 0xd34 <ADC_vADCCallBack+0x22>
			Aptr=ptr;
     d28:	89 81       	ldd	r24, Y+1	; 0x01
     d2a:	9a 81       	ldd	r25, Y+2	; 0x02
     d2c:	90 93 c7 00 	sts	0x00C7, r25
     d30:	80 93 c6 00 	sts	0x00C6, r24
		}
	}
     d34:	0f 90       	pop	r0
     d36:	0f 90       	pop	r0
     d38:	cf 91       	pop	r28
     d3a:	df 91       	pop	r29
     d3c:	08 95       	ret

00000d3e <__vector_16>:
ISR(ADC_vect){
     d3e:	1f 92       	push	r1
     d40:	0f 92       	push	r0
     d42:	0f b6       	in	r0, 0x3f	; 63
     d44:	0f 92       	push	r0
     d46:	11 24       	eor	r1, r1
     d48:	2f 93       	push	r18
     d4a:	3f 93       	push	r19
     d4c:	4f 93       	push	r20
     d4e:	5f 93       	push	r21
     d50:	6f 93       	push	r22
     d52:	7f 93       	push	r23
     d54:	8f 93       	push	r24
     d56:	9f 93       	push	r25
     d58:	af 93       	push	r26
     d5a:	bf 93       	push	r27
     d5c:	ef 93       	push	r30
     d5e:	ff 93       	push	r31
     d60:	df 93       	push	r29
     d62:	cf 93       	push	r28
     d64:	cd b7       	in	r28, 0x3d	; 61
     d66:	de b7       	in	r29, 0x3e	; 62
		if(Aptr!='\0'){
     d68:	80 91 c6 00 	lds	r24, 0x00C6
     d6c:	90 91 c7 00 	lds	r25, 0x00C7
     d70:	00 97       	sbiw	r24, 0x00	; 0
     d72:	29 f0       	breq	.+10     	; 0xd7e <__vector_16+0x40>
			Aptr();
     d74:	e0 91 c6 00 	lds	r30, 0x00C6
     d78:	f0 91 c7 00 	lds	r31, 0x00C7
     d7c:	09 95       	icall
		}
	}
     d7e:	cf 91       	pop	r28
     d80:	df 91       	pop	r29
     d82:	ff 91       	pop	r31
     d84:	ef 91       	pop	r30
     d86:	bf 91       	pop	r27
     d88:	af 91       	pop	r26
     d8a:	9f 91       	pop	r25
     d8c:	8f 91       	pop	r24
     d8e:	7f 91       	pop	r23
     d90:	6f 91       	pop	r22
     d92:	5f 91       	pop	r21
     d94:	4f 91       	pop	r20
     d96:	3f 91       	pop	r19
     d98:	2f 91       	pop	r18
     d9a:	0f 90       	pop	r0
     d9c:	0f be       	out	0x3f, r0	; 63
     d9e:	0f 90       	pop	r0
     da0:	1f 90       	pop	r1
     da2:	18 95       	reti

00000da4 <APP_vPrintNumberSS>:
 *      Author: a7medDawoud
 */
#include "APP.h"

//------------ this function take two u8 numbers and print them on the 7Segme at the same time-----
void APP_vPrintNumberSS(u8 loc_u8SegmaPrintNumber1, u8 loc_u8SegmaPrintNumber2){
     da4:	df 93       	push	r29
     da6:	cf 93       	push	r28
     da8:	cd b7       	in	r28, 0x3d	; 61
     daa:	de b7       	in	r29, 0x3e	; 62
     dac:	a0 97       	sbiw	r28, 0x20	; 32
     dae:	0f b6       	in	r0, 0x3f	; 63
     db0:	f8 94       	cli
     db2:	de bf       	out	0x3e, r29	; 62
     db4:	0f be       	out	0x3f, r0	; 63
     db6:	cd bf       	out	0x3d, r28	; 61
     db8:	8f 8f       	std	Y+31, r24	; 0x1f
     dba:	68 a3       	std	Y+32, r22	; 0x20
	_7Segma_vInit();
     dbc:	0e 94 cc 32 	call	0x6598	; 0x6598 <_7Segma_vInit>
	u16 loc_delay;
	for(loc_delay=0;loc_delay<100;loc_delay++){
     dc0:	1e 8e       	std	Y+30, r1	; 0x1e
     dc2:	1d 8e       	std	Y+29, r1	; 0x1d
     dc4:	ef c0       	rjmp	.+478    	; 0xfa4 <APP_vPrintNumberSS+0x200>
		_7Segma_vPrintNumber1(loc_u8SegmaPrintNumber1);
     dc6:	8f 8d       	ldd	r24, Y+31	; 0x1f
     dc8:	0e 94 4b 33 	call	0x6696	; 0x6696 <_7Segma_vPrintNumber1>
     dcc:	80 e0       	ldi	r24, 0x00	; 0
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	a0 e8       	ldi	r26, 0x80	; 128
     dd2:	bf e3       	ldi	r27, 0x3F	; 63
     dd4:	89 8f       	std	Y+25, r24	; 0x19
     dd6:	9a 8f       	std	Y+26, r25	; 0x1a
     dd8:	ab 8f       	std	Y+27, r26	; 0x1b
     dda:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ddc:	69 8d       	ldd	r22, Y+25	; 0x19
     dde:	7a 8d       	ldd	r23, Y+26	; 0x1a
     de0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     de2:	9c 8d       	ldd	r25, Y+28	; 0x1c
     de4:	20 e0       	ldi	r18, 0x00	; 0
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	4a e7       	ldi	r20, 0x7A	; 122
     dea:	55 e4       	ldi	r21, 0x45	; 69
     dec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     df0:	dc 01       	movw	r26, r24
     df2:	cb 01       	movw	r24, r22
     df4:	8d 8b       	std	Y+21, r24	; 0x15
     df6:	9e 8b       	std	Y+22, r25	; 0x16
     df8:	af 8b       	std	Y+23, r26	; 0x17
     dfa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     dfc:	6d 89       	ldd	r22, Y+21	; 0x15
     dfe:	7e 89       	ldd	r23, Y+22	; 0x16
     e00:	8f 89       	ldd	r24, Y+23	; 0x17
     e02:	98 8d       	ldd	r25, Y+24	; 0x18
     e04:	20 e0       	ldi	r18, 0x00	; 0
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	40 e8       	ldi	r20, 0x80	; 128
     e0a:	5f e3       	ldi	r21, 0x3F	; 63
     e0c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e10:	88 23       	and	r24, r24
     e12:	2c f4       	brge	.+10     	; 0xe1e <APP_vPrintNumberSS+0x7a>
		__ticks = 1;
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	9c 8b       	std	Y+20, r25	; 0x14
     e1a:	8b 8b       	std	Y+19, r24	; 0x13
     e1c:	3f c0       	rjmp	.+126    	; 0xe9c <APP_vPrintNumberSS+0xf8>
	else if (__tmp > 65535)
     e1e:	6d 89       	ldd	r22, Y+21	; 0x15
     e20:	7e 89       	ldd	r23, Y+22	; 0x16
     e22:	8f 89       	ldd	r24, Y+23	; 0x17
     e24:	98 8d       	ldd	r25, Y+24	; 0x18
     e26:	20 e0       	ldi	r18, 0x00	; 0
     e28:	3f ef       	ldi	r19, 0xFF	; 255
     e2a:	4f e7       	ldi	r20, 0x7F	; 127
     e2c:	57 e4       	ldi	r21, 0x47	; 71
     e2e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e32:	18 16       	cp	r1, r24
     e34:	4c f5       	brge	.+82     	; 0xe88 <APP_vPrintNumberSS+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e36:	69 8d       	ldd	r22, Y+25	; 0x19
     e38:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e3a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e3c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e3e:	20 e0       	ldi	r18, 0x00	; 0
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	40 e2       	ldi	r20, 0x20	; 32
     e44:	51 e4       	ldi	r21, 0x41	; 65
     e46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e4a:	dc 01       	movw	r26, r24
     e4c:	cb 01       	movw	r24, r22
     e4e:	bc 01       	movw	r22, r24
     e50:	cd 01       	movw	r24, r26
     e52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e56:	dc 01       	movw	r26, r24
     e58:	cb 01       	movw	r24, r22
     e5a:	9c 8b       	std	Y+20, r25	; 0x14
     e5c:	8b 8b       	std	Y+19, r24	; 0x13
     e5e:	0f c0       	rjmp	.+30     	; 0xe7e <APP_vPrintNumberSS+0xda>
     e60:	80 e9       	ldi	r24, 0x90	; 144
     e62:	91 e0       	ldi	r25, 0x01	; 1
     e64:	9a 8b       	std	Y+18, r25	; 0x12
     e66:	89 8b       	std	Y+17, r24	; 0x11
     e68:	89 89       	ldd	r24, Y+17	; 0x11
     e6a:	9a 89       	ldd	r25, Y+18	; 0x12
     e6c:	01 97       	sbiw	r24, 0x01	; 1
     e6e:	f1 f7       	brne	.-4      	; 0xe6c <APP_vPrintNumberSS+0xc8>
     e70:	9a 8b       	std	Y+18, r25	; 0x12
     e72:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e74:	8b 89       	ldd	r24, Y+19	; 0x13
     e76:	9c 89       	ldd	r25, Y+20	; 0x14
     e78:	01 97       	sbiw	r24, 0x01	; 1
     e7a:	9c 8b       	std	Y+20, r25	; 0x14
     e7c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e7e:	8b 89       	ldd	r24, Y+19	; 0x13
     e80:	9c 89       	ldd	r25, Y+20	; 0x14
     e82:	00 97       	sbiw	r24, 0x00	; 0
     e84:	69 f7       	brne	.-38     	; 0xe60 <APP_vPrintNumberSS+0xbc>
     e86:	14 c0       	rjmp	.+40     	; 0xeb0 <APP_vPrintNumberSS+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e88:	6d 89       	ldd	r22, Y+21	; 0x15
     e8a:	7e 89       	ldd	r23, Y+22	; 0x16
     e8c:	8f 89       	ldd	r24, Y+23	; 0x17
     e8e:	98 8d       	ldd	r25, Y+24	; 0x18
     e90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e94:	dc 01       	movw	r26, r24
     e96:	cb 01       	movw	r24, r22
     e98:	9c 8b       	std	Y+20, r25	; 0x14
     e9a:	8b 8b       	std	Y+19, r24	; 0x13
     e9c:	8b 89       	ldd	r24, Y+19	; 0x13
     e9e:	9c 89       	ldd	r25, Y+20	; 0x14
     ea0:	98 8b       	std	Y+16, r25	; 0x10
     ea2:	8f 87       	std	Y+15, r24	; 0x0f
     ea4:	8f 85       	ldd	r24, Y+15	; 0x0f
     ea6:	98 89       	ldd	r25, Y+16	; 0x10
     ea8:	01 97       	sbiw	r24, 0x01	; 1
     eaa:	f1 f7       	brne	.-4      	; 0xea8 <APP_vPrintNumberSS+0x104>
     eac:	98 8b       	std	Y+16, r25	; 0x10
     eae:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		_7Segma_vPrintNumber2(loc_u8SegmaPrintNumber2);
     eb0:	88 a1       	ldd	r24, Y+32	; 0x20
     eb2:	0e 94 5c 33 	call	0x66b8	; 0x66b8 <_7Segma_vPrintNumber2>
     eb6:	80 e0       	ldi	r24, 0x00	; 0
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	a0 e8       	ldi	r26, 0x80	; 128
     ebc:	bf e3       	ldi	r27, 0x3F	; 63
     ebe:	8b 87       	std	Y+11, r24	; 0x0b
     ec0:	9c 87       	std	Y+12, r25	; 0x0c
     ec2:	ad 87       	std	Y+13, r26	; 0x0d
     ec4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ec6:	6b 85       	ldd	r22, Y+11	; 0x0b
     ec8:	7c 85       	ldd	r23, Y+12	; 0x0c
     eca:	8d 85       	ldd	r24, Y+13	; 0x0d
     ecc:	9e 85       	ldd	r25, Y+14	; 0x0e
     ece:	20 e0       	ldi	r18, 0x00	; 0
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	4a e7       	ldi	r20, 0x7A	; 122
     ed4:	55 e4       	ldi	r21, 0x45	; 69
     ed6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eda:	dc 01       	movw	r26, r24
     edc:	cb 01       	movw	r24, r22
     ede:	8f 83       	std	Y+7, r24	; 0x07
     ee0:	98 87       	std	Y+8, r25	; 0x08
     ee2:	a9 87       	std	Y+9, r26	; 0x09
     ee4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ee6:	6f 81       	ldd	r22, Y+7	; 0x07
     ee8:	78 85       	ldd	r23, Y+8	; 0x08
     eea:	89 85       	ldd	r24, Y+9	; 0x09
     eec:	9a 85       	ldd	r25, Y+10	; 0x0a
     eee:	20 e0       	ldi	r18, 0x00	; 0
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	40 e8       	ldi	r20, 0x80	; 128
     ef4:	5f e3       	ldi	r21, 0x3F	; 63
     ef6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     efa:	88 23       	and	r24, r24
     efc:	2c f4       	brge	.+10     	; 0xf08 <APP_vPrintNumberSS+0x164>
		__ticks = 1;
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	9e 83       	std	Y+6, r25	; 0x06
     f04:	8d 83       	std	Y+5, r24	; 0x05
     f06:	3f c0       	rjmp	.+126    	; 0xf86 <APP_vPrintNumberSS+0x1e2>
	else if (__tmp > 65535)
     f08:	6f 81       	ldd	r22, Y+7	; 0x07
     f0a:	78 85       	ldd	r23, Y+8	; 0x08
     f0c:	89 85       	ldd	r24, Y+9	; 0x09
     f0e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f10:	20 e0       	ldi	r18, 0x00	; 0
     f12:	3f ef       	ldi	r19, 0xFF	; 255
     f14:	4f e7       	ldi	r20, 0x7F	; 127
     f16:	57 e4       	ldi	r21, 0x47	; 71
     f18:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f1c:	18 16       	cp	r1, r24
     f1e:	4c f5       	brge	.+82     	; 0xf72 <APP_vPrintNumberSS+0x1ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f20:	6b 85       	ldd	r22, Y+11	; 0x0b
     f22:	7c 85       	ldd	r23, Y+12	; 0x0c
     f24:	8d 85       	ldd	r24, Y+13	; 0x0d
     f26:	9e 85       	ldd	r25, Y+14	; 0x0e
     f28:	20 e0       	ldi	r18, 0x00	; 0
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	40 e2       	ldi	r20, 0x20	; 32
     f2e:	51 e4       	ldi	r21, 0x41	; 65
     f30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f34:	dc 01       	movw	r26, r24
     f36:	cb 01       	movw	r24, r22
     f38:	bc 01       	movw	r22, r24
     f3a:	cd 01       	movw	r24, r26
     f3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f40:	dc 01       	movw	r26, r24
     f42:	cb 01       	movw	r24, r22
     f44:	9e 83       	std	Y+6, r25	; 0x06
     f46:	8d 83       	std	Y+5, r24	; 0x05
     f48:	0f c0       	rjmp	.+30     	; 0xf68 <APP_vPrintNumberSS+0x1c4>
     f4a:	80 e9       	ldi	r24, 0x90	; 144
     f4c:	91 e0       	ldi	r25, 0x01	; 1
     f4e:	9c 83       	std	Y+4, r25	; 0x04
     f50:	8b 83       	std	Y+3, r24	; 0x03
     f52:	8b 81       	ldd	r24, Y+3	; 0x03
     f54:	9c 81       	ldd	r25, Y+4	; 0x04
     f56:	01 97       	sbiw	r24, 0x01	; 1
     f58:	f1 f7       	brne	.-4      	; 0xf56 <APP_vPrintNumberSS+0x1b2>
     f5a:	9c 83       	std	Y+4, r25	; 0x04
     f5c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f5e:	8d 81       	ldd	r24, Y+5	; 0x05
     f60:	9e 81       	ldd	r25, Y+6	; 0x06
     f62:	01 97       	sbiw	r24, 0x01	; 1
     f64:	9e 83       	std	Y+6, r25	; 0x06
     f66:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f68:	8d 81       	ldd	r24, Y+5	; 0x05
     f6a:	9e 81       	ldd	r25, Y+6	; 0x06
     f6c:	00 97       	sbiw	r24, 0x00	; 0
     f6e:	69 f7       	brne	.-38     	; 0xf4a <APP_vPrintNumberSS+0x1a6>
     f70:	14 c0       	rjmp	.+40     	; 0xf9a <APP_vPrintNumberSS+0x1f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f72:	6f 81       	ldd	r22, Y+7	; 0x07
     f74:	78 85       	ldd	r23, Y+8	; 0x08
     f76:	89 85       	ldd	r24, Y+9	; 0x09
     f78:	9a 85       	ldd	r25, Y+10	; 0x0a
     f7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f7e:	dc 01       	movw	r26, r24
     f80:	cb 01       	movw	r24, r22
     f82:	9e 83       	std	Y+6, r25	; 0x06
     f84:	8d 83       	std	Y+5, r24	; 0x05
     f86:	8d 81       	ldd	r24, Y+5	; 0x05
     f88:	9e 81       	ldd	r25, Y+6	; 0x06
     f8a:	9a 83       	std	Y+2, r25	; 0x02
     f8c:	89 83       	std	Y+1, r24	; 0x01
     f8e:	89 81       	ldd	r24, Y+1	; 0x01
     f90:	9a 81       	ldd	r25, Y+2	; 0x02
     f92:	01 97       	sbiw	r24, 0x01	; 1
     f94:	f1 f7       	brne	.-4      	; 0xf92 <APP_vPrintNumberSS+0x1ee>
     f96:	9a 83       	std	Y+2, r25	; 0x02
     f98:	89 83       	std	Y+1, r24	; 0x01

//------------ this function take two u8 numbers and print them on the 7Segme at the same time-----
void APP_vPrintNumberSS(u8 loc_u8SegmaPrintNumber1, u8 loc_u8SegmaPrintNumber2){
	_7Segma_vInit();
	u16 loc_delay;
	for(loc_delay=0;loc_delay<100;loc_delay++){
     f9a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f9c:	9e 8d       	ldd	r25, Y+30	; 0x1e
     f9e:	01 96       	adiw	r24, 0x01	; 1
     fa0:	9e 8f       	std	Y+30, r25	; 0x1e
     fa2:	8d 8f       	std	Y+29, r24	; 0x1d
     fa4:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fa6:	9e 8d       	ldd	r25, Y+30	; 0x1e
     fa8:	84 36       	cpi	r24, 0x64	; 100
     faa:	91 05       	cpc	r25, r1
     fac:	08 f4       	brcc	.+2      	; 0xfb0 <APP_vPrintNumberSS+0x20c>
     fae:	0b cf       	rjmp	.-490    	; 0xdc6 <APP_vPrintNumberSS+0x22>
		_7Segma_vPrintNumber1(loc_u8SegmaPrintNumber1);
		_delay_ms(1);
		_7Segma_vPrintNumber2(loc_u8SegmaPrintNumber2);
		_delay_ms(1);
	}
}
     fb0:	a0 96       	adiw	r28, 0x20	; 32
     fb2:	0f b6       	in	r0, 0x3f	; 63
     fb4:	f8 94       	cli
     fb6:	de bf       	out	0x3e, r29	; 62
     fb8:	0f be       	out	0x3f, r0	; 63
     fba:	cd bf       	out	0x3d, r28	; 61
     fbc:	cf 91       	pop	r28
     fbe:	df 91       	pop	r29
     fc0:	08 95       	ret

00000fc2 <APP_vPrintTwoDigitNumberSS>:
void APP_vPrintTwoDigitNumberSS(u8 loc_u8SegmaPrintNumber){
     fc2:	df 93       	push	r29
     fc4:	cf 93       	push	r28
     fc6:	0f 92       	push	r0
     fc8:	cd b7       	in	r28, 0x3d	; 61
     fca:	de b7       	in	r29, 0x3e	; 62
     fcc:	89 83       	std	Y+1, r24	; 0x01
	APP_vPrintNumberSS(loc_u8SegmaPrintNumber/10, loc_u8SegmaPrintNumber%10);
     fce:	89 81       	ldd	r24, Y+1	; 0x01
     fd0:	9a e0       	ldi	r25, 0x0A	; 10
     fd2:	69 2f       	mov	r22, r25
     fd4:	0e 94 05 34 	call	0x680a	; 0x680a <__udivmodqi4>
     fd8:	28 2f       	mov	r18, r24
     fda:	89 81       	ldd	r24, Y+1	; 0x01
     fdc:	9a e0       	ldi	r25, 0x0A	; 10
     fde:	69 2f       	mov	r22, r25
     fe0:	0e 94 05 34 	call	0x680a	; 0x680a <__udivmodqi4>
     fe4:	89 2f       	mov	r24, r25
     fe6:	98 2f       	mov	r25, r24
     fe8:	82 2f       	mov	r24, r18
     fea:	69 2f       	mov	r22, r25
     fec:	0e 94 d2 06 	call	0xda4	; 0xda4 <APP_vPrintNumberSS>
}
     ff0:	0f 90       	pop	r0
     ff2:	cf 91       	pop	r28
     ff4:	df 91       	pop	r29
     ff6:	08 95       	ret

00000ff8 <APP_vPrintDecimalNumberSS>:
//------------ this function take a f32 number and print it on the 7Segme-----
void APP_vPrintDecimalNumberSS(f32 loc_f32SegmaDecimalNumber){
     ff8:	df 93       	push	r29
     ffa:	cf 93       	push	r28
     ffc:	00 d0       	rcall	.+0      	; 0xffe <APP_vPrintDecimalNumberSS+0x6>
     ffe:	00 d0       	rcall	.+0      	; 0x1000 <APP_vPrintDecimalNumberSS+0x8>
    1000:	00 d0       	rcall	.+0      	; 0x1002 <APP_vPrintDecimalNumberSS+0xa>
    1002:	cd b7       	in	r28, 0x3d	; 61
    1004:	de b7       	in	r29, 0x3e	; 62
    1006:	6b 83       	std	Y+3, r22	; 0x03
    1008:	7c 83       	std	Y+4, r23	; 0x04
    100a:	8d 83       	std	Y+5, r24	; 0x05
    100c:	9e 83       	std	Y+6, r25	; 0x06
	//------------ DECIMAL POINT PIN------
	DIO_vSetPinDirection(PortB, Pin3, Pin_OutPut);
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	63 e0       	ldi	r22, 0x03	; 3
    1012:	41 e0       	ldi	r20, 0x01	; 1
    1014:	0e 94 b1 19 	call	0x3362	; 0x3362 <DIO_vSetPinDirection>
	u16 Loc_u16SegmaNumber=(loc_f32SegmaDecimalNumber*10);
    1018:	6b 81       	ldd	r22, Y+3	; 0x03
    101a:	7c 81       	ldd	r23, Y+4	; 0x04
    101c:	8d 81       	ldd	r24, Y+5	; 0x05
    101e:	9e 81       	ldd	r25, Y+6	; 0x06
    1020:	20 e0       	ldi	r18, 0x00	; 0
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	40 e2       	ldi	r20, 0x20	; 32
    1026:	51 e4       	ldi	r21, 0x41	; 65
    1028:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    102c:	dc 01       	movw	r26, r24
    102e:	cb 01       	movw	r24, r22
    1030:	bc 01       	movw	r22, r24
    1032:	cd 01       	movw	r24, r26
    1034:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1038:	dc 01       	movw	r26, r24
    103a:	cb 01       	movw	r24, r22
    103c:	9a 83       	std	Y+2, r25	; 0x02
    103e:	89 83       	std	Y+1, r24	; 0x01
	_7Segma_vEnableDot();
    1040:	0e 94 21 33 	call	0x6642	; 0x6642 <_7Segma_vEnableDot>
	APP_vPrintNumberSS(Loc_u16SegmaNumber/10, Loc_u16SegmaNumber%10);
    1044:	89 81       	ldd	r24, Y+1	; 0x01
    1046:	9a 81       	ldd	r25, Y+2	; 0x02
    1048:	2a e0       	ldi	r18, 0x0A	; 10
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	b9 01       	movw	r22, r18
    104e:	0e 94 11 34 	call	0x6822	; 0x6822 <__udivmodhi4>
    1052:	cb 01       	movw	r24, r22
    1054:	48 2f       	mov	r20, r24
    1056:	89 81       	ldd	r24, Y+1	; 0x01
    1058:	9a 81       	ldd	r25, Y+2	; 0x02
    105a:	2a e0       	ldi	r18, 0x0A	; 10
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	b9 01       	movw	r22, r18
    1060:	0e 94 11 34 	call	0x6822	; 0x6822 <__udivmodhi4>
    1064:	98 2f       	mov	r25, r24
    1066:	84 2f       	mov	r24, r20
    1068:	69 2f       	mov	r22, r25
    106a:	0e 94 d2 06 	call	0xda4	; 0xda4 <APP_vPrintNumberSS>
	_7Segma_vDisbleDot();
    106e:	0e 94 2d 33 	call	0x665a	; 0x665a <_7Segma_vDisbleDot>
}
    1072:	26 96       	adiw	r28, 0x06	; 6
    1074:	0f b6       	in	r0, 0x3f	; 63
    1076:	f8 94       	cli
    1078:	de bf       	out	0x3e, r29	; 62
    107a:	0f be       	out	0x3f, r0	; 63
    107c:	cd bf       	out	0x3d, r28	; 61
    107e:	cf 91       	pop	r28
    1080:	df 91       	pop	r29
    1082:	08 95       	ret

00001084 <APP_vPrint0to99SS>:
//--------------- this function is used to print from 00 to 99--------
void APP_vPrint0to99SS(){
    1084:	df 93       	push	r29
    1086:	cf 93       	push	r28
    1088:	00 d0       	rcall	.+0      	; 0x108a <APP_vPrint0to99SS+0x6>
    108a:	cd b7       	in	r28, 0x3d	; 61
    108c:	de b7       	in	r29, 0x3e	; 62
	u8 Loc_Count,Loc_Count2;
	for(Loc_Count=0;Loc_Count<10;Loc_Count++){
    108e:	1a 82       	std	Y+2, r1	; 0x02
    1090:	0f c0       	rjmp	.+30     	; 0x10b0 <APP_vPrint0to99SS+0x2c>
		for(Loc_Count2=0;Loc_Count2<10;Loc_Count2++){
    1092:	19 82       	std	Y+1, r1	; 0x01
    1094:	07 c0       	rjmp	.+14     	; 0x10a4 <APP_vPrint0to99SS+0x20>
			APP_vPrintNumberSS(Loc_Count,Loc_Count2);
    1096:	8a 81       	ldd	r24, Y+2	; 0x02
    1098:	69 81       	ldd	r22, Y+1	; 0x01
    109a:	0e 94 d2 06 	call	0xda4	; 0xda4 <APP_vPrintNumberSS>
}
//--------------- this function is used to print from 00 to 99--------
void APP_vPrint0to99SS(){
	u8 Loc_Count,Loc_Count2;
	for(Loc_Count=0;Loc_Count<10;Loc_Count++){
		for(Loc_Count2=0;Loc_Count2<10;Loc_Count2++){
    109e:	89 81       	ldd	r24, Y+1	; 0x01
    10a0:	8f 5f       	subi	r24, 0xFF	; 255
    10a2:	89 83       	std	Y+1, r24	; 0x01
    10a4:	89 81       	ldd	r24, Y+1	; 0x01
    10a6:	8a 30       	cpi	r24, 0x0A	; 10
    10a8:	b0 f3       	brcs	.-20     	; 0x1096 <APP_vPrint0to99SS+0x12>
	_7Segma_vDisbleDot();
}
//--------------- this function is used to print from 00 to 99--------
void APP_vPrint0to99SS(){
	u8 Loc_Count,Loc_Count2;
	for(Loc_Count=0;Loc_Count<10;Loc_Count++){
    10aa:	8a 81       	ldd	r24, Y+2	; 0x02
    10ac:	8f 5f       	subi	r24, 0xFF	; 255
    10ae:	8a 83       	std	Y+2, r24	; 0x02
    10b0:	8a 81       	ldd	r24, Y+2	; 0x02
    10b2:	8a 30       	cpi	r24, 0x0A	; 10
    10b4:	70 f3       	brcs	.-36     	; 0x1092 <APP_vPrint0to99SS+0xe>
		for(Loc_Count2=0;Loc_Count2<10;Loc_Count2++){
			APP_vPrintNumberSS(Loc_Count,Loc_Count2);
		}
	}
}
    10b6:	0f 90       	pop	r0
    10b8:	0f 90       	pop	r0
    10ba:	cf 91       	pop	r28
    10bc:	df 91       	pop	r29
    10be:	08 95       	ret

000010c0 <APP_vPrint1MinuteSS>:
//--------------- this function is used to print 1 minute on the 7 segma--------
void APP_vPrint1MinuteSS(){
    10c0:	df 93       	push	r29
    10c2:	cf 93       	push	r28
    10c4:	00 d0       	rcall	.+0      	; 0x10c6 <APP_vPrint1MinuteSS+0x6>
    10c6:	cd b7       	in	r28, 0x3d	; 61
    10c8:	de b7       	in	r29, 0x3e	; 62
	u8 Loc_Count,loc_delay;
	for(Loc_Count=0;Loc_Count<=60;Loc_Count++){
    10ca:	1a 82       	std	Y+2, r1	; 0x02
    10cc:	0e c0       	rjmp	.+28     	; 0x10ea <APP_vPrint1MinuteSS+0x2a>
		for(loc_delay=0;loc_delay<4;loc_delay++){
    10ce:	19 82       	std	Y+1, r1	; 0x01
    10d0:	06 c0       	rjmp	.+12     	; 0x10de <APP_vPrint1MinuteSS+0x1e>
			APP_vPrintTwoDigitNumberSS(Loc_Count);
    10d2:	8a 81       	ldd	r24, Y+2	; 0x02
    10d4:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <APP_vPrintTwoDigitNumberSS>
}
//--------------- this function is used to print 1 minute on the 7 segma--------
void APP_vPrint1MinuteSS(){
	u8 Loc_Count,loc_delay;
	for(Loc_Count=0;Loc_Count<=60;Loc_Count++){
		for(loc_delay=0;loc_delay<4;loc_delay++){
    10d8:	89 81       	ldd	r24, Y+1	; 0x01
    10da:	8f 5f       	subi	r24, 0xFF	; 255
    10dc:	89 83       	std	Y+1, r24	; 0x01
    10de:	89 81       	ldd	r24, Y+1	; 0x01
    10e0:	84 30       	cpi	r24, 0x04	; 4
    10e2:	b8 f3       	brcs	.-18     	; 0x10d2 <APP_vPrint1MinuteSS+0x12>
	}
}
//--------------- this function is used to print 1 minute on the 7 segma--------
void APP_vPrint1MinuteSS(){
	u8 Loc_Count,loc_delay;
	for(Loc_Count=0;Loc_Count<=60;Loc_Count++){
    10e4:	8a 81       	ldd	r24, Y+2	; 0x02
    10e6:	8f 5f       	subi	r24, 0xFF	; 255
    10e8:	8a 83       	std	Y+2, r24	; 0x02
    10ea:	8a 81       	ldd	r24, Y+2	; 0x02
    10ec:	8d 33       	cpi	r24, 0x3D	; 61
    10ee:	78 f3       	brcs	.-34     	; 0x10ce <APP_vPrint1MinuteSS+0xe>
		for(loc_delay=0;loc_delay<4;loc_delay++){
			APP_vPrintTwoDigitNumberSS(Loc_Count);
		}
	}
}
    10f0:	0f 90       	pop	r0
    10f2:	0f 90       	pop	r0
    10f4:	cf 91       	pop	r28
    10f6:	df 91       	pop	r29
    10f8:	08 95       	ret

000010fa <APP_vClickCounterPB>:
/*--------------- this function is used to count the
 * (number clicks on pushbutton 1 Subtracted from number clicks on pushbutton 2)
 * and print it on the 7Segma*/
void APP_vClickCounterPB(){
    10fa:	df 93       	push	r29
    10fc:	cf 93       	push	r28
    10fe:	0f 92       	push	r0
    1100:	cd b7       	in	r28, 0x3d	; 61
    1102:	de b7       	in	r29, 0x3e	; 62
	u8 Loc_Count;
	for(Loc_Count=0;Loc_Count<100;){
    1104:	19 82       	std	Y+1, r1	; 0x01
    1106:	22 c0       	rjmp	.+68     	; 0x114c <APP_vClickCounterPB+0x52>
		if(PushButton_u8Button1()){
    1108:	0e 94 53 2a 	call	0x54a6	; 0x54a6 <PushButton_u8Button1>
    110c:	88 23       	and	r24, r24
    110e:	51 f0       	breq	.+20     	; 0x1124 <APP_vClickCounterPB+0x2a>
			Loc_Count++;
    1110:	89 81       	ldd	r24, Y+1	; 0x01
    1112:	8f 5f       	subi	r24, 0xFF	; 255
    1114:	89 83       	std	Y+1, r24	; 0x01
			APP_vPrintTwoDigitNumberSS(Loc_Count);
    1116:	89 81       	ldd	r24, Y+1	; 0x01
    1118:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <APP_vPrintTwoDigitNumberSS>
			APP_vPrintTwoDigitNumberSS(Loc_Count);
    111c:	89 81       	ldd	r24, Y+1	; 0x01
    111e:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <APP_vPrintTwoDigitNumberSS>
    1122:	14 c0       	rjmp	.+40     	; 0x114c <APP_vClickCounterPB+0x52>
		}
		else if(PushButton_u8Button2()&&Loc_Count!=0){
    1124:	0e 94 ef 2a 	call	0x55de	; 0x55de <PushButton_u8Button2>
    1128:	88 23       	and	r24, r24
    112a:	69 f0       	breq	.+26     	; 0x1146 <APP_vClickCounterPB+0x4c>
    112c:	89 81       	ldd	r24, Y+1	; 0x01
    112e:	88 23       	and	r24, r24
    1130:	51 f0       	breq	.+20     	; 0x1146 <APP_vClickCounterPB+0x4c>
			Loc_Count--;
    1132:	89 81       	ldd	r24, Y+1	; 0x01
    1134:	81 50       	subi	r24, 0x01	; 1
    1136:	89 83       	std	Y+1, r24	; 0x01
			APP_vPrintTwoDigitNumberSS(Loc_Count);
    1138:	89 81       	ldd	r24, Y+1	; 0x01
    113a:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <APP_vPrintTwoDigitNumberSS>
			APP_vPrintTwoDigitNumberSS(Loc_Count);
    113e:	89 81       	ldd	r24, Y+1	; 0x01
    1140:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <APP_vPrintTwoDigitNumberSS>
    1144:	03 c0       	rjmp	.+6      	; 0x114c <APP_vClickCounterPB+0x52>
		}
		else{
			APP_vPrintTwoDigitNumberSS(Loc_Count);
    1146:	89 81       	ldd	r24, Y+1	; 0x01
    1148:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <APP_vPrintTwoDigitNumberSS>
/*--------------- this function is used to count the
 * (number clicks on pushbutton 1 Subtracted from number clicks on pushbutton 2)
 * and print it on the 7Segma*/
void APP_vClickCounterPB(){
	u8 Loc_Count;
	for(Loc_Count=0;Loc_Count<100;){
    114c:	89 81       	ldd	r24, Y+1	; 0x01
    114e:	84 36       	cpi	r24, 0x64	; 100
    1150:	d8 f2       	brcs	.-74     	; 0x1108 <APP_vClickCounterPB+0xe>
		}
		else{
			APP_vPrintTwoDigitNumberSS(Loc_Count);
		}
	}
}
    1152:	0f 90       	pop	r0
    1154:	cf 91       	pop	r28
    1156:	df 91       	pop	r29
    1158:	08 95       	ret

0000115a <APP_v3Leds1MinuteEachSS>:
/*---------this function is used to count 3 minutes every minute a led will turn on--------*/
void APP_v3Leds1MinuteEachSS(){
    115a:	df 93       	push	r29
    115c:	cf 93       	push	r28
    115e:	cd b7       	in	r28, 0x3d	; 61
    1160:	de b7       	in	r29, 0x3e	; 62
    1162:	6c 97       	sbiw	r28, 0x1c	; 28
    1164:	0f b6       	in	r0, 0x3f	; 63
    1166:	f8 94       	cli
    1168:	de bf       	out	0x3e, r29	; 62
    116a:	0f be       	out	0x3f, r0	; 63
    116c:	cd bf       	out	0x3d, r28	; 61
	APP_vPrint1MinuteSS();
    116e:	0e 94 60 08 	call	0x10c0	; 0x10c0 <APP_vPrint1MinuteSS>
	LedAndBuzzer_vLed0Open();
    1172:	0e 94 31 28 	call	0x5062	; 0x5062 <LedAndBuzzer_vLed0Open>
	APP_vPrint1MinuteSS();
    1176:	0e 94 60 08 	call	0x10c0	; 0x10c0 <APP_vPrint1MinuteSS>
	LedAndBuzzer_vLed1Open();
    117a:	0e 94 4e 28 	call	0x509c	; 0x509c <LedAndBuzzer_vLed1Open>
	APP_vPrint1MinuteSS();
    117e:	0e 94 60 08 	call	0x10c0	; 0x10c0 <APP_vPrint1MinuteSS>
	LedAndBuzzer_vLed2Open();
    1182:	0e 94 6b 28 	call	0x50d6	; 0x50d6 <LedAndBuzzer_vLed2Open>
    1186:	80 e0       	ldi	r24, 0x00	; 0
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	aa e7       	ldi	r26, 0x7A	; 122
    118c:	b3 e4       	ldi	r27, 0x43	; 67
    118e:	89 8f       	std	Y+25, r24	; 0x19
    1190:	9a 8f       	std	Y+26, r25	; 0x1a
    1192:	ab 8f       	std	Y+27, r26	; 0x1b
    1194:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1196:	69 8d       	ldd	r22, Y+25	; 0x19
    1198:	7a 8d       	ldd	r23, Y+26	; 0x1a
    119a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    119c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    119e:	20 e0       	ldi	r18, 0x00	; 0
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	4a e7       	ldi	r20, 0x7A	; 122
    11a4:	55 e4       	ldi	r21, 0x45	; 69
    11a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11aa:	dc 01       	movw	r26, r24
    11ac:	cb 01       	movw	r24, r22
    11ae:	8d 8b       	std	Y+21, r24	; 0x15
    11b0:	9e 8b       	std	Y+22, r25	; 0x16
    11b2:	af 8b       	std	Y+23, r26	; 0x17
    11b4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    11b6:	6d 89       	ldd	r22, Y+21	; 0x15
    11b8:	7e 89       	ldd	r23, Y+22	; 0x16
    11ba:	8f 89       	ldd	r24, Y+23	; 0x17
    11bc:	98 8d       	ldd	r25, Y+24	; 0x18
    11be:	20 e0       	ldi	r18, 0x00	; 0
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	40 e8       	ldi	r20, 0x80	; 128
    11c4:	5f e3       	ldi	r21, 0x3F	; 63
    11c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11ca:	88 23       	and	r24, r24
    11cc:	2c f4       	brge	.+10     	; 0x11d8 <APP_v3Leds1MinuteEachSS+0x7e>
		__ticks = 1;
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	9c 8b       	std	Y+20, r25	; 0x14
    11d4:	8b 8b       	std	Y+19, r24	; 0x13
    11d6:	3f c0       	rjmp	.+126    	; 0x1256 <APP_v3Leds1MinuteEachSS+0xfc>
	else if (__tmp > 65535)
    11d8:	6d 89       	ldd	r22, Y+21	; 0x15
    11da:	7e 89       	ldd	r23, Y+22	; 0x16
    11dc:	8f 89       	ldd	r24, Y+23	; 0x17
    11de:	98 8d       	ldd	r25, Y+24	; 0x18
    11e0:	20 e0       	ldi	r18, 0x00	; 0
    11e2:	3f ef       	ldi	r19, 0xFF	; 255
    11e4:	4f e7       	ldi	r20, 0x7F	; 127
    11e6:	57 e4       	ldi	r21, 0x47	; 71
    11e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11ec:	18 16       	cp	r1, r24
    11ee:	4c f5       	brge	.+82     	; 0x1242 <APP_v3Leds1MinuteEachSS+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11f0:	69 8d       	ldd	r22, Y+25	; 0x19
    11f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11f8:	20 e0       	ldi	r18, 0x00	; 0
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	40 e2       	ldi	r20, 0x20	; 32
    11fe:	51 e4       	ldi	r21, 0x41	; 65
    1200:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1204:	dc 01       	movw	r26, r24
    1206:	cb 01       	movw	r24, r22
    1208:	bc 01       	movw	r22, r24
    120a:	cd 01       	movw	r24, r26
    120c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1210:	dc 01       	movw	r26, r24
    1212:	cb 01       	movw	r24, r22
    1214:	9c 8b       	std	Y+20, r25	; 0x14
    1216:	8b 8b       	std	Y+19, r24	; 0x13
    1218:	0f c0       	rjmp	.+30     	; 0x1238 <APP_v3Leds1MinuteEachSS+0xde>
    121a:	80 e9       	ldi	r24, 0x90	; 144
    121c:	91 e0       	ldi	r25, 0x01	; 1
    121e:	9a 8b       	std	Y+18, r25	; 0x12
    1220:	89 8b       	std	Y+17, r24	; 0x11
    1222:	89 89       	ldd	r24, Y+17	; 0x11
    1224:	9a 89       	ldd	r25, Y+18	; 0x12
    1226:	01 97       	sbiw	r24, 0x01	; 1
    1228:	f1 f7       	brne	.-4      	; 0x1226 <APP_v3Leds1MinuteEachSS+0xcc>
    122a:	9a 8b       	std	Y+18, r25	; 0x12
    122c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    122e:	8b 89       	ldd	r24, Y+19	; 0x13
    1230:	9c 89       	ldd	r25, Y+20	; 0x14
    1232:	01 97       	sbiw	r24, 0x01	; 1
    1234:	9c 8b       	std	Y+20, r25	; 0x14
    1236:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1238:	8b 89       	ldd	r24, Y+19	; 0x13
    123a:	9c 89       	ldd	r25, Y+20	; 0x14
    123c:	00 97       	sbiw	r24, 0x00	; 0
    123e:	69 f7       	brne	.-38     	; 0x121a <APP_v3Leds1MinuteEachSS+0xc0>
    1240:	14 c0       	rjmp	.+40     	; 0x126a <APP_v3Leds1MinuteEachSS+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1242:	6d 89       	ldd	r22, Y+21	; 0x15
    1244:	7e 89       	ldd	r23, Y+22	; 0x16
    1246:	8f 89       	ldd	r24, Y+23	; 0x17
    1248:	98 8d       	ldd	r25, Y+24	; 0x18
    124a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    124e:	dc 01       	movw	r26, r24
    1250:	cb 01       	movw	r24, r22
    1252:	9c 8b       	std	Y+20, r25	; 0x14
    1254:	8b 8b       	std	Y+19, r24	; 0x13
    1256:	8b 89       	ldd	r24, Y+19	; 0x13
    1258:	9c 89       	ldd	r25, Y+20	; 0x14
    125a:	98 8b       	std	Y+16, r25	; 0x10
    125c:	8f 87       	std	Y+15, r24	; 0x0f
    125e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1260:	98 89       	ldd	r25, Y+16	; 0x10
    1262:	01 97       	sbiw	r24, 0x01	; 1
    1264:	f1 f7       	brne	.-4      	; 0x1262 <APP_v3Leds1MinuteEachSS+0x108>
    1266:	98 8b       	std	Y+16, r25	; 0x10
    1268:	8f 87       	std	Y+15, r24	; 0x0f
    126a:	80 e0       	ldi	r24, 0x00	; 0
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	aa e7       	ldi	r26, 0x7A	; 122
    1270:	b3 e4       	ldi	r27, 0x43	; 67
    1272:	8b 87       	std	Y+11, r24	; 0x0b
    1274:	9c 87       	std	Y+12, r25	; 0x0c
    1276:	ad 87       	std	Y+13, r26	; 0x0d
    1278:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    127a:	6b 85       	ldd	r22, Y+11	; 0x0b
    127c:	7c 85       	ldd	r23, Y+12	; 0x0c
    127e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1280:	9e 85       	ldd	r25, Y+14	; 0x0e
    1282:	20 e0       	ldi	r18, 0x00	; 0
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	4a e7       	ldi	r20, 0x7A	; 122
    1288:	55 e4       	ldi	r21, 0x45	; 69
    128a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    128e:	dc 01       	movw	r26, r24
    1290:	cb 01       	movw	r24, r22
    1292:	8f 83       	std	Y+7, r24	; 0x07
    1294:	98 87       	std	Y+8, r25	; 0x08
    1296:	a9 87       	std	Y+9, r26	; 0x09
    1298:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    129a:	6f 81       	ldd	r22, Y+7	; 0x07
    129c:	78 85       	ldd	r23, Y+8	; 0x08
    129e:	89 85       	ldd	r24, Y+9	; 0x09
    12a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    12a2:	20 e0       	ldi	r18, 0x00	; 0
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	40 e8       	ldi	r20, 0x80	; 128
    12a8:	5f e3       	ldi	r21, 0x3F	; 63
    12aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12ae:	88 23       	and	r24, r24
    12b0:	2c f4       	brge	.+10     	; 0x12bc <APP_v3Leds1MinuteEachSS+0x162>
		__ticks = 1;
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	9e 83       	std	Y+6, r25	; 0x06
    12b8:	8d 83       	std	Y+5, r24	; 0x05
    12ba:	3f c0       	rjmp	.+126    	; 0x133a <APP_v3Leds1MinuteEachSS+0x1e0>
	else if (__tmp > 65535)
    12bc:	6f 81       	ldd	r22, Y+7	; 0x07
    12be:	78 85       	ldd	r23, Y+8	; 0x08
    12c0:	89 85       	ldd	r24, Y+9	; 0x09
    12c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    12c4:	20 e0       	ldi	r18, 0x00	; 0
    12c6:	3f ef       	ldi	r19, 0xFF	; 255
    12c8:	4f e7       	ldi	r20, 0x7F	; 127
    12ca:	57 e4       	ldi	r21, 0x47	; 71
    12cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12d0:	18 16       	cp	r1, r24
    12d2:	4c f5       	brge	.+82     	; 0x1326 <APP_v3Leds1MinuteEachSS+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    12d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    12d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    12da:	9e 85       	ldd	r25, Y+14	; 0x0e
    12dc:	20 e0       	ldi	r18, 0x00	; 0
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	40 e2       	ldi	r20, 0x20	; 32
    12e2:	51 e4       	ldi	r21, 0x41	; 65
    12e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12e8:	dc 01       	movw	r26, r24
    12ea:	cb 01       	movw	r24, r22
    12ec:	bc 01       	movw	r22, r24
    12ee:	cd 01       	movw	r24, r26
    12f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12f4:	dc 01       	movw	r26, r24
    12f6:	cb 01       	movw	r24, r22
    12f8:	9e 83       	std	Y+6, r25	; 0x06
    12fa:	8d 83       	std	Y+5, r24	; 0x05
    12fc:	0f c0       	rjmp	.+30     	; 0x131c <APP_v3Leds1MinuteEachSS+0x1c2>
    12fe:	80 e9       	ldi	r24, 0x90	; 144
    1300:	91 e0       	ldi	r25, 0x01	; 1
    1302:	9c 83       	std	Y+4, r25	; 0x04
    1304:	8b 83       	std	Y+3, r24	; 0x03
    1306:	8b 81       	ldd	r24, Y+3	; 0x03
    1308:	9c 81       	ldd	r25, Y+4	; 0x04
    130a:	01 97       	sbiw	r24, 0x01	; 1
    130c:	f1 f7       	brne	.-4      	; 0x130a <APP_v3Leds1MinuteEachSS+0x1b0>
    130e:	9c 83       	std	Y+4, r25	; 0x04
    1310:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1312:	8d 81       	ldd	r24, Y+5	; 0x05
    1314:	9e 81       	ldd	r25, Y+6	; 0x06
    1316:	01 97       	sbiw	r24, 0x01	; 1
    1318:	9e 83       	std	Y+6, r25	; 0x06
    131a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    131c:	8d 81       	ldd	r24, Y+5	; 0x05
    131e:	9e 81       	ldd	r25, Y+6	; 0x06
    1320:	00 97       	sbiw	r24, 0x00	; 0
    1322:	69 f7       	brne	.-38     	; 0x12fe <APP_v3Leds1MinuteEachSS+0x1a4>
    1324:	14 c0       	rjmp	.+40     	; 0x134e <APP_v3Leds1MinuteEachSS+0x1f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1326:	6f 81       	ldd	r22, Y+7	; 0x07
    1328:	78 85       	ldd	r23, Y+8	; 0x08
    132a:	89 85       	ldd	r24, Y+9	; 0x09
    132c:	9a 85       	ldd	r25, Y+10	; 0x0a
    132e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1332:	dc 01       	movw	r26, r24
    1334:	cb 01       	movw	r24, r22
    1336:	9e 83       	std	Y+6, r25	; 0x06
    1338:	8d 83       	std	Y+5, r24	; 0x05
    133a:	8d 81       	ldd	r24, Y+5	; 0x05
    133c:	9e 81       	ldd	r25, Y+6	; 0x06
    133e:	9a 83       	std	Y+2, r25	; 0x02
    1340:	89 83       	std	Y+1, r24	; 0x01
    1342:	89 81       	ldd	r24, Y+1	; 0x01
    1344:	9a 81       	ldd	r25, Y+2	; 0x02
    1346:	01 97       	sbiw	r24, 0x01	; 1
    1348:	f1 f7       	brne	.-4      	; 0x1346 <APP_v3Leds1MinuteEachSS+0x1ec>
    134a:	9a 83       	std	Y+2, r25	; 0x02
    134c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(250);
	_delay_ms(250);
	LedAndBuzzer_vLed0Close();
    134e:	0e 94 42 28 	call	0x5084	; 0x5084 <LedAndBuzzer_vLed0Close>
	LedAndBuzzer_vLed1Close();
    1352:	0e 94 5f 28 	call	0x50be	; 0x50be <LedAndBuzzer_vLed1Close>
	LedAndBuzzer_vLed2Close();
    1356:	0e 94 7c 28 	call	0x50f8	; 0x50f8 <LedAndBuzzer_vLed2Close>
}
    135a:	6c 96       	adiw	r28, 0x1c	; 28
    135c:	0f b6       	in	r0, 0x3f	; 63
    135e:	f8 94       	cli
    1360:	de bf       	out	0x3e, r29	; 62
    1362:	0f be       	out	0x3f, r0	; 63
    1364:	cd bf       	out	0x3d, r28	; 61
    1366:	cf 91       	pop	r28
    1368:	df 91       	pop	r29
    136a:	08 95       	ret

0000136c <APP_vTaskFinsh>:
/*------------ this function is used to turn all LEDs and buzzer 3 times
 * -------------- to show that Task is finished--------*/
void APP_vTaskFinsh(){
    136c:	df 93       	push	r29
    136e:	cf 93       	push	r28
    1370:	cd b7       	in	r28, 0x3d	; 61
    1372:	de b7       	in	r29, 0x3e	; 62
	LedAndBuzzer_vFlash(3);
    1374:	83 e0       	ldi	r24, 0x03	; 3
    1376:	0e 94 a5 28 	call	0x514a	; 0x514a <LedAndBuzzer_vFlash>
}
    137a:	cf 91       	pop	r28
    137c:	df 91       	pop	r29
    137e:	08 95       	ret

00001380 <APP_vWriteStringManyTimesLCD>:
//-----------------
void APP_vWriteStringManyTimesLCD(u8 *Loc_u8Array,u8 Loc_u8size){
    1380:	df 93       	push	r29
    1382:	cf 93       	push	r28
    1384:	cd b7       	in	r28, 0x3d	; 61
    1386:	de b7       	in	r29, 0x3e	; 62
    1388:	a0 97       	sbiw	r28, 0x20	; 32
    138a:	0f b6       	in	r0, 0x3f	; 63
    138c:	f8 94       	cli
    138e:	de bf       	out	0x3e, r29	; 62
    1390:	0f be       	out	0x3f, r0	; 63
    1392:	cd bf       	out	0x3d, r28	; 61
    1394:	9f 8f       	std	Y+31, r25	; 0x1f
    1396:	8e 8f       	std	Y+30, r24	; 0x1e
    1398:	68 a3       	std	Y+32, r22	; 0x20
	LCD_vInit();
    139a:	0e 94 51 21 	call	0x42a2	; 0x42a2 <LCD_vInit>
	u8 i;
	for(i=0;i<=((16/Loc_u8size));i++){
    139e:	1d 8e       	std	Y+29, r1	; 0x1d
    13a0:	91 c0       	rjmp	.+290    	; 0x14c4 <APP_vWriteStringManyTimesLCD+0x144>
		LCD_vGoTo(LineOne,((Loc_u8size-1)*i));
    13a2:	88 a1       	ldd	r24, Y+32	; 0x20
    13a4:	88 2f       	mov	r24, r24
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	9c 01       	movw	r18, r24
    13aa:	21 50       	subi	r18, 0x01	; 1
    13ac:	30 40       	sbci	r19, 0x00	; 0
    13ae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13b0:	88 2f       	mov	r24, r24
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	ac 01       	movw	r20, r24
    13b6:	24 9f       	mul	r18, r20
    13b8:	c0 01       	movw	r24, r0
    13ba:	25 9f       	mul	r18, r21
    13bc:	90 0d       	add	r25, r0
    13be:	34 9f       	mul	r19, r20
    13c0:	90 0d       	add	r25, r0
    13c2:	11 24       	eor	r1, r1
    13c4:	98 2f       	mov	r25, r24
    13c6:	80 e8       	ldi	r24, 0x80	; 128
    13c8:	69 2f       	mov	r22, r25
    13ca:	0e 94 17 27 	call	0x4e2e	; 0x4e2e <LCD_vGoTo>
		LCD_vWriteString(Loc_u8Array);
    13ce:	8e 8d       	ldd	r24, Y+30	; 0x1e
    13d0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    13d2:	0e 94 b0 27 	call	0x4f60	; 0x4f60 <LCD_vWriteString>
    13d6:	80 e0       	ldi	r24, 0x00	; 0
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	aa e7       	ldi	r26, 0x7A	; 122
    13dc:	b3 e4       	ldi	r27, 0x43	; 67
    13de:	89 8f       	std	Y+25, r24	; 0x19
    13e0:	9a 8f       	std	Y+26, r25	; 0x1a
    13e2:	ab 8f       	std	Y+27, r26	; 0x1b
    13e4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13e6:	69 8d       	ldd	r22, Y+25	; 0x19
    13e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13ee:	20 e0       	ldi	r18, 0x00	; 0
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	4a e7       	ldi	r20, 0x7A	; 122
    13f4:	55 e4       	ldi	r21, 0x45	; 69
    13f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13fa:	dc 01       	movw	r26, r24
    13fc:	cb 01       	movw	r24, r22
    13fe:	8d 8b       	std	Y+21, r24	; 0x15
    1400:	9e 8b       	std	Y+22, r25	; 0x16
    1402:	af 8b       	std	Y+23, r26	; 0x17
    1404:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1406:	6d 89       	ldd	r22, Y+21	; 0x15
    1408:	7e 89       	ldd	r23, Y+22	; 0x16
    140a:	8f 89       	ldd	r24, Y+23	; 0x17
    140c:	98 8d       	ldd	r25, Y+24	; 0x18
    140e:	20 e0       	ldi	r18, 0x00	; 0
    1410:	30 e0       	ldi	r19, 0x00	; 0
    1412:	40 e8       	ldi	r20, 0x80	; 128
    1414:	5f e3       	ldi	r21, 0x3F	; 63
    1416:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    141a:	88 23       	and	r24, r24
    141c:	2c f4       	brge	.+10     	; 0x1428 <APP_vWriteStringManyTimesLCD+0xa8>
		__ticks = 1;
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	9c 8b       	std	Y+20, r25	; 0x14
    1424:	8b 8b       	std	Y+19, r24	; 0x13
    1426:	3f c0       	rjmp	.+126    	; 0x14a6 <APP_vWriteStringManyTimesLCD+0x126>
	else if (__tmp > 65535)
    1428:	6d 89       	ldd	r22, Y+21	; 0x15
    142a:	7e 89       	ldd	r23, Y+22	; 0x16
    142c:	8f 89       	ldd	r24, Y+23	; 0x17
    142e:	98 8d       	ldd	r25, Y+24	; 0x18
    1430:	20 e0       	ldi	r18, 0x00	; 0
    1432:	3f ef       	ldi	r19, 0xFF	; 255
    1434:	4f e7       	ldi	r20, 0x7F	; 127
    1436:	57 e4       	ldi	r21, 0x47	; 71
    1438:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    143c:	18 16       	cp	r1, r24
    143e:	4c f5       	brge	.+82     	; 0x1492 <APP_vWriteStringManyTimesLCD+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1440:	69 8d       	ldd	r22, Y+25	; 0x19
    1442:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1444:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1446:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1448:	20 e0       	ldi	r18, 0x00	; 0
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	40 e2       	ldi	r20, 0x20	; 32
    144e:	51 e4       	ldi	r21, 0x41	; 65
    1450:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1454:	dc 01       	movw	r26, r24
    1456:	cb 01       	movw	r24, r22
    1458:	bc 01       	movw	r22, r24
    145a:	cd 01       	movw	r24, r26
    145c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1460:	dc 01       	movw	r26, r24
    1462:	cb 01       	movw	r24, r22
    1464:	9c 8b       	std	Y+20, r25	; 0x14
    1466:	8b 8b       	std	Y+19, r24	; 0x13
    1468:	0f c0       	rjmp	.+30     	; 0x1488 <APP_vWriteStringManyTimesLCD+0x108>
    146a:	80 e9       	ldi	r24, 0x90	; 144
    146c:	91 e0       	ldi	r25, 0x01	; 1
    146e:	9a 8b       	std	Y+18, r25	; 0x12
    1470:	89 8b       	std	Y+17, r24	; 0x11
    1472:	89 89       	ldd	r24, Y+17	; 0x11
    1474:	9a 89       	ldd	r25, Y+18	; 0x12
    1476:	01 97       	sbiw	r24, 0x01	; 1
    1478:	f1 f7       	brne	.-4      	; 0x1476 <APP_vWriteStringManyTimesLCD+0xf6>
    147a:	9a 8b       	std	Y+18, r25	; 0x12
    147c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    147e:	8b 89       	ldd	r24, Y+19	; 0x13
    1480:	9c 89       	ldd	r25, Y+20	; 0x14
    1482:	01 97       	sbiw	r24, 0x01	; 1
    1484:	9c 8b       	std	Y+20, r25	; 0x14
    1486:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1488:	8b 89       	ldd	r24, Y+19	; 0x13
    148a:	9c 89       	ldd	r25, Y+20	; 0x14
    148c:	00 97       	sbiw	r24, 0x00	; 0
    148e:	69 f7       	brne	.-38     	; 0x146a <APP_vWriteStringManyTimesLCD+0xea>
    1490:	14 c0       	rjmp	.+40     	; 0x14ba <APP_vWriteStringManyTimesLCD+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1492:	6d 89       	ldd	r22, Y+21	; 0x15
    1494:	7e 89       	ldd	r23, Y+22	; 0x16
    1496:	8f 89       	ldd	r24, Y+23	; 0x17
    1498:	98 8d       	ldd	r25, Y+24	; 0x18
    149a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    149e:	dc 01       	movw	r26, r24
    14a0:	cb 01       	movw	r24, r22
    14a2:	9c 8b       	std	Y+20, r25	; 0x14
    14a4:	8b 8b       	std	Y+19, r24	; 0x13
    14a6:	8b 89       	ldd	r24, Y+19	; 0x13
    14a8:	9c 89       	ldd	r25, Y+20	; 0x14
    14aa:	98 8b       	std	Y+16, r25	; 0x10
    14ac:	8f 87       	std	Y+15, r24	; 0x0f
    14ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    14b0:	98 89       	ldd	r25, Y+16	; 0x10
    14b2:	01 97       	sbiw	r24, 0x01	; 1
    14b4:	f1 f7       	brne	.-4      	; 0x14b2 <APP_vWriteStringManyTimesLCD+0x132>
    14b6:	98 8b       	std	Y+16, r25	; 0x10
    14b8:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(250);
		LCD_vClear();
    14ba:	0e 94 28 27 	call	0x4e50	; 0x4e50 <LCD_vClear>
}
//-----------------
void APP_vWriteStringManyTimesLCD(u8 *Loc_u8Array,u8 Loc_u8size){
	LCD_vInit();
	u8 i;
	for(i=0;i<=((16/Loc_u8size));i++){
    14be:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14c0:	8f 5f       	subi	r24, 0xFF	; 255
    14c2:	8d 8f       	std	Y+29, r24	; 0x1d
    14c4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14c6:	e8 2f       	mov	r30, r24
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	88 a1       	ldd	r24, Y+32	; 0x20
    14cc:	28 2f       	mov	r18, r24
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	80 e1       	ldi	r24, 0x10	; 16
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	b9 01       	movw	r22, r18
    14d6:	0e 94 25 34 	call	0x684a	; 0x684a <__divmodhi4>
    14da:	cb 01       	movw	r24, r22
    14dc:	8e 17       	cp	r24, r30
    14de:	9f 07       	cpc	r25, r31
    14e0:	0c f0       	brlt	.+2      	; 0x14e4 <APP_vWriteStringManyTimesLCD+0x164>
    14e2:	5f cf       	rjmp	.-322    	; 0x13a2 <APP_vWriteStringManyTimesLCD+0x22>
		LCD_vGoTo(LineOne,((Loc_u8size-1)*i));
		LCD_vWriteString(Loc_u8Array);
		_delay_ms(250);
		LCD_vClear();
	}
	for(i=0;i<=((16/Loc_u8size));i++){
    14e4:	1d 8e       	std	Y+29, r1	; 0x1d
    14e6:	91 c0       	rjmp	.+290    	; 0x160a <APP_vWriteStringManyTimesLCD+0x28a>
		LCD_vGoTo(LineTwo,((Loc_u8size-1)*i));
    14e8:	88 a1       	ldd	r24, Y+32	; 0x20
    14ea:	88 2f       	mov	r24, r24
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	9c 01       	movw	r18, r24
    14f0:	21 50       	subi	r18, 0x01	; 1
    14f2:	30 40       	sbci	r19, 0x00	; 0
    14f4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14f6:	88 2f       	mov	r24, r24
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	ac 01       	movw	r20, r24
    14fc:	24 9f       	mul	r18, r20
    14fe:	c0 01       	movw	r24, r0
    1500:	25 9f       	mul	r18, r21
    1502:	90 0d       	add	r25, r0
    1504:	34 9f       	mul	r19, r20
    1506:	90 0d       	add	r25, r0
    1508:	11 24       	eor	r1, r1
    150a:	98 2f       	mov	r25, r24
    150c:	80 ec       	ldi	r24, 0xC0	; 192
    150e:	69 2f       	mov	r22, r25
    1510:	0e 94 17 27 	call	0x4e2e	; 0x4e2e <LCD_vGoTo>
		LCD_vWriteString(Loc_u8Array);
    1514:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1516:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1518:	0e 94 b0 27 	call	0x4f60	; 0x4f60 <LCD_vWriteString>
    151c:	80 e0       	ldi	r24, 0x00	; 0
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	aa e7       	ldi	r26, 0x7A	; 122
    1522:	b3 e4       	ldi	r27, 0x43	; 67
    1524:	8b 87       	std	Y+11, r24	; 0x0b
    1526:	9c 87       	std	Y+12, r25	; 0x0c
    1528:	ad 87       	std	Y+13, r26	; 0x0d
    152a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    152c:	6b 85       	ldd	r22, Y+11	; 0x0b
    152e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1530:	8d 85       	ldd	r24, Y+13	; 0x0d
    1532:	9e 85       	ldd	r25, Y+14	; 0x0e
    1534:	20 e0       	ldi	r18, 0x00	; 0
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	4a e7       	ldi	r20, 0x7A	; 122
    153a:	55 e4       	ldi	r21, 0x45	; 69
    153c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1540:	dc 01       	movw	r26, r24
    1542:	cb 01       	movw	r24, r22
    1544:	8f 83       	std	Y+7, r24	; 0x07
    1546:	98 87       	std	Y+8, r25	; 0x08
    1548:	a9 87       	std	Y+9, r26	; 0x09
    154a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    154c:	6f 81       	ldd	r22, Y+7	; 0x07
    154e:	78 85       	ldd	r23, Y+8	; 0x08
    1550:	89 85       	ldd	r24, Y+9	; 0x09
    1552:	9a 85       	ldd	r25, Y+10	; 0x0a
    1554:	20 e0       	ldi	r18, 0x00	; 0
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	40 e8       	ldi	r20, 0x80	; 128
    155a:	5f e3       	ldi	r21, 0x3F	; 63
    155c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1560:	88 23       	and	r24, r24
    1562:	2c f4       	brge	.+10     	; 0x156e <APP_vWriteStringManyTimesLCD+0x1ee>
		__ticks = 1;
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	9e 83       	std	Y+6, r25	; 0x06
    156a:	8d 83       	std	Y+5, r24	; 0x05
    156c:	3f c0       	rjmp	.+126    	; 0x15ec <APP_vWriteStringManyTimesLCD+0x26c>
	else if (__tmp > 65535)
    156e:	6f 81       	ldd	r22, Y+7	; 0x07
    1570:	78 85       	ldd	r23, Y+8	; 0x08
    1572:	89 85       	ldd	r24, Y+9	; 0x09
    1574:	9a 85       	ldd	r25, Y+10	; 0x0a
    1576:	20 e0       	ldi	r18, 0x00	; 0
    1578:	3f ef       	ldi	r19, 0xFF	; 255
    157a:	4f e7       	ldi	r20, 0x7F	; 127
    157c:	57 e4       	ldi	r21, 0x47	; 71
    157e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1582:	18 16       	cp	r1, r24
    1584:	4c f5       	brge	.+82     	; 0x15d8 <APP_vWriteStringManyTimesLCD+0x258>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1586:	6b 85       	ldd	r22, Y+11	; 0x0b
    1588:	7c 85       	ldd	r23, Y+12	; 0x0c
    158a:	8d 85       	ldd	r24, Y+13	; 0x0d
    158c:	9e 85       	ldd	r25, Y+14	; 0x0e
    158e:	20 e0       	ldi	r18, 0x00	; 0
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	40 e2       	ldi	r20, 0x20	; 32
    1594:	51 e4       	ldi	r21, 0x41	; 65
    1596:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    159a:	dc 01       	movw	r26, r24
    159c:	cb 01       	movw	r24, r22
    159e:	bc 01       	movw	r22, r24
    15a0:	cd 01       	movw	r24, r26
    15a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15a6:	dc 01       	movw	r26, r24
    15a8:	cb 01       	movw	r24, r22
    15aa:	9e 83       	std	Y+6, r25	; 0x06
    15ac:	8d 83       	std	Y+5, r24	; 0x05
    15ae:	0f c0       	rjmp	.+30     	; 0x15ce <APP_vWriteStringManyTimesLCD+0x24e>
    15b0:	80 e9       	ldi	r24, 0x90	; 144
    15b2:	91 e0       	ldi	r25, 0x01	; 1
    15b4:	9c 83       	std	Y+4, r25	; 0x04
    15b6:	8b 83       	std	Y+3, r24	; 0x03
    15b8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ba:	9c 81       	ldd	r25, Y+4	; 0x04
    15bc:	01 97       	sbiw	r24, 0x01	; 1
    15be:	f1 f7       	brne	.-4      	; 0x15bc <APP_vWriteStringManyTimesLCD+0x23c>
    15c0:	9c 83       	std	Y+4, r25	; 0x04
    15c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15c4:	8d 81       	ldd	r24, Y+5	; 0x05
    15c6:	9e 81       	ldd	r25, Y+6	; 0x06
    15c8:	01 97       	sbiw	r24, 0x01	; 1
    15ca:	9e 83       	std	Y+6, r25	; 0x06
    15cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15ce:	8d 81       	ldd	r24, Y+5	; 0x05
    15d0:	9e 81       	ldd	r25, Y+6	; 0x06
    15d2:	00 97       	sbiw	r24, 0x00	; 0
    15d4:	69 f7       	brne	.-38     	; 0x15b0 <APP_vWriteStringManyTimesLCD+0x230>
    15d6:	14 c0       	rjmp	.+40     	; 0x1600 <APP_vWriteStringManyTimesLCD+0x280>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15d8:	6f 81       	ldd	r22, Y+7	; 0x07
    15da:	78 85       	ldd	r23, Y+8	; 0x08
    15dc:	89 85       	ldd	r24, Y+9	; 0x09
    15de:	9a 85       	ldd	r25, Y+10	; 0x0a
    15e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15e4:	dc 01       	movw	r26, r24
    15e6:	cb 01       	movw	r24, r22
    15e8:	9e 83       	std	Y+6, r25	; 0x06
    15ea:	8d 83       	std	Y+5, r24	; 0x05
    15ec:	8d 81       	ldd	r24, Y+5	; 0x05
    15ee:	9e 81       	ldd	r25, Y+6	; 0x06
    15f0:	9a 83       	std	Y+2, r25	; 0x02
    15f2:	89 83       	std	Y+1, r24	; 0x01
    15f4:	89 81       	ldd	r24, Y+1	; 0x01
    15f6:	9a 81       	ldd	r25, Y+2	; 0x02
    15f8:	01 97       	sbiw	r24, 0x01	; 1
    15fa:	f1 f7       	brne	.-4      	; 0x15f8 <APP_vWriteStringManyTimesLCD+0x278>
    15fc:	9a 83       	std	Y+2, r25	; 0x02
    15fe:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(250);
		LCD_vClear();
    1600:	0e 94 28 27 	call	0x4e50	; 0x4e50 <LCD_vClear>
		LCD_vGoTo(LineOne,((Loc_u8size-1)*i));
		LCD_vWriteString(Loc_u8Array);
		_delay_ms(250);
		LCD_vClear();
	}
	for(i=0;i<=((16/Loc_u8size));i++){
    1604:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1606:	8f 5f       	subi	r24, 0xFF	; 255
    1608:	8d 8f       	std	Y+29, r24	; 0x1d
    160a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    160c:	e8 2f       	mov	r30, r24
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	88 a1       	ldd	r24, Y+32	; 0x20
    1612:	28 2f       	mov	r18, r24
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	80 e1       	ldi	r24, 0x10	; 16
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	b9 01       	movw	r22, r18
    161c:	0e 94 25 34 	call	0x684a	; 0x684a <__divmodhi4>
    1620:	cb 01       	movw	r24, r22
    1622:	8e 17       	cp	r24, r30
    1624:	9f 07       	cpc	r25, r31
    1626:	0c f0       	brlt	.+2      	; 0x162a <APP_vWriteStringManyTimesLCD+0x2aa>
    1628:	5f cf       	rjmp	.-322    	; 0x14e8 <APP_vWriteStringManyTimesLCD+0x168>
		LCD_vGoTo(LineTwo,((Loc_u8size-1)*i));
		LCD_vWriteString(Loc_u8Array);
		_delay_ms(250);
		LCD_vClear();
	}
}
    162a:	a0 96       	adiw	r28, 0x20	; 32
    162c:	0f b6       	in	r0, 0x3f	; 63
    162e:	f8 94       	cli
    1630:	de bf       	out	0x3e, r29	; 62
    1632:	0f be       	out	0x3f, r0	; 63
    1634:	cd bf       	out	0x3d, r28	; 61
    1636:	cf 91       	pop	r28
    1638:	df 91       	pop	r29
    163a:	08 95       	ret

0000163c <APP_vToString>:
//-----------------
void APP_vToString(u8 str[], u16 num){
    163c:	df 93       	push	r29
    163e:	cf 93       	push	r28
    1640:	cd b7       	in	r28, 0x3d	; 61
    1642:	de b7       	in	r29, 0x3e	; 62
    1644:	2a 97       	sbiw	r28, 0x0a	; 10
    1646:	0f b6       	in	r0, 0x3f	; 63
    1648:	f8 94       	cli
    164a:	de bf       	out	0x3e, r29	; 62
    164c:	0f be       	out	0x3f, r0	; 63
    164e:	cd bf       	out	0x3d, r28	; 61
    1650:	98 87       	std	Y+8, r25	; 0x08
    1652:	8f 83       	std	Y+7, r24	; 0x07
    1654:	7a 87       	std	Y+10, r23	; 0x0a
    1656:	69 87       	std	Y+9, r22	; 0x09
	u8 i, len = 0 ;
    1658:	1d 82       	std	Y+5, r1	; 0x05
	u16 n,rem;
	n = num;
    165a:	89 85       	ldd	r24, Y+9	; 0x09
    165c:	9a 85       	ldd	r25, Y+10	; 0x0a
    165e:	9c 83       	std	Y+4, r25	; 0x04
    1660:	8b 83       	std	Y+3, r24	; 0x03
    1662:	0d c0       	rjmp	.+26     	; 0x167e <APP_vToString+0x42>
	while (n != 0)
	{
		len++;
    1664:	8d 81       	ldd	r24, Y+5	; 0x05
    1666:	8f 5f       	subi	r24, 0xFF	; 255
    1668:	8d 83       	std	Y+5, r24	; 0x05
		n /= 10;
    166a:	8b 81       	ldd	r24, Y+3	; 0x03
    166c:	9c 81       	ldd	r25, Y+4	; 0x04
    166e:	2a e0       	ldi	r18, 0x0A	; 10
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	b9 01       	movw	r22, r18
    1674:	0e 94 11 34 	call	0x6822	; 0x6822 <__udivmodhi4>
    1678:	cb 01       	movw	r24, r22
    167a:	9c 83       	std	Y+4, r25	; 0x04
    167c:	8b 83       	std	Y+3, r24	; 0x03
//-----------------
void APP_vToString(u8 str[], u16 num){
	u8 i, len = 0 ;
	u16 n,rem;
	n = num;
	while (n != 0)
    167e:	8b 81       	ldd	r24, Y+3	; 0x03
    1680:	9c 81       	ldd	r25, Y+4	; 0x04
    1682:	00 97       	sbiw	r24, 0x00	; 0
    1684:	79 f7       	brne	.-34     	; 0x1664 <APP_vToString+0x28>
	{
		len++;
		n /= 10;
	}
	for (i = 0; i < len; i++)
    1686:	1e 82       	std	Y+6, r1	; 0x06
    1688:	29 c0       	rjmp	.+82     	; 0x16dc <APP_vToString+0xa0>
	{
		rem = num % 10;
    168a:	89 85       	ldd	r24, Y+9	; 0x09
    168c:	9a 85       	ldd	r25, Y+10	; 0x0a
    168e:	2a e0       	ldi	r18, 0x0A	; 10
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	b9 01       	movw	r22, r18
    1694:	0e 94 11 34 	call	0x6822	; 0x6822 <__udivmodhi4>
    1698:	9a 83       	std	Y+2, r25	; 0x02
    169a:	89 83       	std	Y+1, r24	; 0x01
		num = num / 10;
    169c:	89 85       	ldd	r24, Y+9	; 0x09
    169e:	9a 85       	ldd	r25, Y+10	; 0x0a
    16a0:	2a e0       	ldi	r18, 0x0A	; 10
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	b9 01       	movw	r22, r18
    16a6:	0e 94 11 34 	call	0x6822	; 0x6822 <__udivmodhi4>
    16aa:	cb 01       	movw	r24, r22
    16ac:	9a 87       	std	Y+10, r25	; 0x0a
    16ae:	89 87       	std	Y+9, r24	; 0x09
		str[len - (i + 1)] = rem + '0';
    16b0:	8d 81       	ldd	r24, Y+5	; 0x05
    16b2:	28 2f       	mov	r18, r24
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	8e 81       	ldd	r24, Y+6	; 0x06
    16b8:	88 2f       	mov	r24, r24
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	80 95       	com	r24
    16be:	90 95       	com	r25
    16c0:	82 0f       	add	r24, r18
    16c2:	93 1f       	adc	r25, r19
    16c4:	9c 01       	movw	r18, r24
    16c6:	8f 81       	ldd	r24, Y+7	; 0x07
    16c8:	98 85       	ldd	r25, Y+8	; 0x08
    16ca:	fc 01       	movw	r30, r24
    16cc:	e2 0f       	add	r30, r18
    16ce:	f3 1f       	adc	r31, r19
    16d0:	89 81       	ldd	r24, Y+1	; 0x01
    16d2:	80 5d       	subi	r24, 0xD0	; 208
    16d4:	80 83       	st	Z, r24
	while (n != 0)
	{
		len++;
		n /= 10;
	}
	for (i = 0; i < len; i++)
    16d6:	8e 81       	ldd	r24, Y+6	; 0x06
    16d8:	8f 5f       	subi	r24, 0xFF	; 255
    16da:	8e 83       	std	Y+6, r24	; 0x06
    16dc:	9e 81       	ldd	r25, Y+6	; 0x06
    16de:	8d 81       	ldd	r24, Y+5	; 0x05
    16e0:	98 17       	cp	r25, r24
    16e2:	98 f2       	brcs	.-90     	; 0x168a <APP_vToString+0x4e>
	{
		rem = num % 10;
		num = num / 10;
		str[len - (i + 1)] = rem + '0';
	}
	str[len] = '\0';
    16e4:	8d 81       	ldd	r24, Y+5	; 0x05
    16e6:	28 2f       	mov	r18, r24
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	8f 81       	ldd	r24, Y+7	; 0x07
    16ec:	98 85       	ldd	r25, Y+8	; 0x08
    16ee:	fc 01       	movw	r30, r24
    16f0:	e2 0f       	add	r30, r18
    16f2:	f3 1f       	adc	r31, r19
    16f4:	10 82       	st	Z, r1
}
    16f6:	2a 96       	adiw	r28, 0x0a	; 10
    16f8:	0f b6       	in	r0, 0x3f	; 63
    16fa:	f8 94       	cli
    16fc:	de bf       	out	0x3e, r29	; 62
    16fe:	0f be       	out	0x3f, r0	; 63
    1700:	cd bf       	out	0x3d, r28	; 61
    1702:	cf 91       	pop	r28
    1704:	df 91       	pop	r29
    1706:	08 95       	ret

00001708 <APP_vCalculatorLCD>:
//-----------------
void APP_vCalculatorLCD(){
    1708:	0f 93       	push	r16
    170a:	1f 93       	push	r17
    170c:	df 93       	push	r29
    170e:	cf 93       	push	r28
    1710:	cd b7       	in	r28, 0x3d	; 61
    1712:	de b7       	in	r29, 0x3e	; 62
    1714:	c8 57       	subi	r28, 0x78	; 120
    1716:	d0 40       	sbci	r29, 0x00	; 0
    1718:	0f b6       	in	r0, 0x3f	; 63
    171a:	f8 94       	cli
    171c:	de bf       	out	0x3e, r29	; 62
    171e:	0f be       	out	0x3f, r0	; 63
    1720:	cd bf       	out	0x3d, r28	; 61
	//-- while(!=)
	u8 Loc_u8Num1=0,Loc_u8Num2,Loc_u8Symbol1,Loc_u8Symbol2,Loc_u8sum;
    1722:	fe 01       	movw	r30, r28
    1724:	eb 58       	subi	r30, 0x8B	; 139
    1726:	ff 4f       	sbci	r31, 0xFF	; 255
    1728:	10 82       	st	Z, r1
	KAYPAD_vInit();
    172a:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <KAYPAD_vInit>
//Busy Wait
	while(1){
		Loc_u8Num1=KAYPAD_u8GetKey();
    172e:	0e 94 50 1f 	call	0x3ea0	; 0x3ea0 <KAYPAD_u8GetKey>
    1732:	fe 01       	movw	r30, r28
    1734:	eb 58       	subi	r30, 0x8B	; 139
    1736:	ff 4f       	sbci	r31, 0xFF	; 255
    1738:	80 83       	st	Z, r24
    173a:	fe 01       	movw	r30, r28
    173c:	e3 59       	subi	r30, 0x93	; 147
    173e:	ff 4f       	sbci	r31, 0xFF	; 255
    1740:	80 e0       	ldi	r24, 0x00	; 0
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	a8 e4       	ldi	r26, 0x48	; 72
    1746:	b2 e4       	ldi	r27, 0x42	; 66
    1748:	80 83       	st	Z, r24
    174a:	91 83       	std	Z+1, r25	; 0x01
    174c:	a2 83       	std	Z+2, r26	; 0x02
    174e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1750:	8e 01       	movw	r16, r28
    1752:	07 59       	subi	r16, 0x97	; 151
    1754:	1f 4f       	sbci	r17, 0xFF	; 255
    1756:	fe 01       	movw	r30, r28
    1758:	e3 59       	subi	r30, 0x93	; 147
    175a:	ff 4f       	sbci	r31, 0xFF	; 255
    175c:	60 81       	ld	r22, Z
    175e:	71 81       	ldd	r23, Z+1	; 0x01
    1760:	82 81       	ldd	r24, Z+2	; 0x02
    1762:	93 81       	ldd	r25, Z+3	; 0x03
    1764:	20 e0       	ldi	r18, 0x00	; 0
    1766:	30 e0       	ldi	r19, 0x00	; 0
    1768:	4a e7       	ldi	r20, 0x7A	; 122
    176a:	55 e4       	ldi	r21, 0x45	; 69
    176c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1770:	dc 01       	movw	r26, r24
    1772:	cb 01       	movw	r24, r22
    1774:	f8 01       	movw	r30, r16
    1776:	80 83       	st	Z, r24
    1778:	91 83       	std	Z+1, r25	; 0x01
    177a:	a2 83       	std	Z+2, r26	; 0x02
    177c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    177e:	fe 01       	movw	r30, r28
    1780:	e7 59       	subi	r30, 0x97	; 151
    1782:	ff 4f       	sbci	r31, 0xFF	; 255
    1784:	60 81       	ld	r22, Z
    1786:	71 81       	ldd	r23, Z+1	; 0x01
    1788:	82 81       	ldd	r24, Z+2	; 0x02
    178a:	93 81       	ldd	r25, Z+3	; 0x03
    178c:	20 e0       	ldi	r18, 0x00	; 0
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	40 e8       	ldi	r20, 0x80	; 128
    1792:	5f e3       	ldi	r21, 0x3F	; 63
    1794:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1798:	88 23       	and	r24, r24
    179a:	44 f4       	brge	.+16     	; 0x17ac <APP_vCalculatorLCD+0xa4>
		__ticks = 1;
    179c:	fe 01       	movw	r30, r28
    179e:	e9 59       	subi	r30, 0x99	; 153
    17a0:	ff 4f       	sbci	r31, 0xFF	; 255
    17a2:	81 e0       	ldi	r24, 0x01	; 1
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	91 83       	std	Z+1, r25	; 0x01
    17a8:	80 83       	st	Z, r24
    17aa:	64 c0       	rjmp	.+200    	; 0x1874 <APP_vCalculatorLCD+0x16c>
	else if (__tmp > 65535)
    17ac:	fe 01       	movw	r30, r28
    17ae:	e7 59       	subi	r30, 0x97	; 151
    17b0:	ff 4f       	sbci	r31, 0xFF	; 255
    17b2:	60 81       	ld	r22, Z
    17b4:	71 81       	ldd	r23, Z+1	; 0x01
    17b6:	82 81       	ldd	r24, Z+2	; 0x02
    17b8:	93 81       	ldd	r25, Z+3	; 0x03
    17ba:	20 e0       	ldi	r18, 0x00	; 0
    17bc:	3f ef       	ldi	r19, 0xFF	; 255
    17be:	4f e7       	ldi	r20, 0x7F	; 127
    17c0:	57 e4       	ldi	r21, 0x47	; 71
    17c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17c6:	18 16       	cp	r1, r24
    17c8:	0c f0       	brlt	.+2      	; 0x17cc <APP_vCalculatorLCD+0xc4>
    17ca:	43 c0       	rjmp	.+134    	; 0x1852 <APP_vCalculatorLCD+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17cc:	fe 01       	movw	r30, r28
    17ce:	e3 59       	subi	r30, 0x93	; 147
    17d0:	ff 4f       	sbci	r31, 0xFF	; 255
    17d2:	60 81       	ld	r22, Z
    17d4:	71 81       	ldd	r23, Z+1	; 0x01
    17d6:	82 81       	ldd	r24, Z+2	; 0x02
    17d8:	93 81       	ldd	r25, Z+3	; 0x03
    17da:	20 e0       	ldi	r18, 0x00	; 0
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	40 e2       	ldi	r20, 0x20	; 32
    17e0:	51 e4       	ldi	r21, 0x41	; 65
    17e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17e6:	dc 01       	movw	r26, r24
    17e8:	cb 01       	movw	r24, r22
    17ea:	8e 01       	movw	r16, r28
    17ec:	09 59       	subi	r16, 0x99	; 153
    17ee:	1f 4f       	sbci	r17, 0xFF	; 255
    17f0:	bc 01       	movw	r22, r24
    17f2:	cd 01       	movw	r24, r26
    17f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17f8:	dc 01       	movw	r26, r24
    17fa:	cb 01       	movw	r24, r22
    17fc:	f8 01       	movw	r30, r16
    17fe:	91 83       	std	Z+1, r25	; 0x01
    1800:	80 83       	st	Z, r24
    1802:	1f c0       	rjmp	.+62     	; 0x1842 <APP_vCalculatorLCD+0x13a>
    1804:	fe 01       	movw	r30, r28
    1806:	eb 59       	subi	r30, 0x9B	; 155
    1808:	ff 4f       	sbci	r31, 0xFF	; 255
    180a:	80 e9       	ldi	r24, 0x90	; 144
    180c:	91 e0       	ldi	r25, 0x01	; 1
    180e:	91 83       	std	Z+1, r25	; 0x01
    1810:	80 83       	st	Z, r24
    1812:	fe 01       	movw	r30, r28
    1814:	eb 59       	subi	r30, 0x9B	; 155
    1816:	ff 4f       	sbci	r31, 0xFF	; 255
    1818:	80 81       	ld	r24, Z
    181a:	91 81       	ldd	r25, Z+1	; 0x01
    181c:	01 97       	sbiw	r24, 0x01	; 1
    181e:	f1 f7       	brne	.-4      	; 0x181c <APP_vCalculatorLCD+0x114>
    1820:	fe 01       	movw	r30, r28
    1822:	eb 59       	subi	r30, 0x9B	; 155
    1824:	ff 4f       	sbci	r31, 0xFF	; 255
    1826:	91 83       	std	Z+1, r25	; 0x01
    1828:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    182a:	de 01       	movw	r26, r28
    182c:	a9 59       	subi	r26, 0x99	; 153
    182e:	bf 4f       	sbci	r27, 0xFF	; 255
    1830:	fe 01       	movw	r30, r28
    1832:	e9 59       	subi	r30, 0x99	; 153
    1834:	ff 4f       	sbci	r31, 0xFF	; 255
    1836:	80 81       	ld	r24, Z
    1838:	91 81       	ldd	r25, Z+1	; 0x01
    183a:	01 97       	sbiw	r24, 0x01	; 1
    183c:	11 96       	adiw	r26, 0x01	; 1
    183e:	9c 93       	st	X, r25
    1840:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1842:	fe 01       	movw	r30, r28
    1844:	e9 59       	subi	r30, 0x99	; 153
    1846:	ff 4f       	sbci	r31, 0xFF	; 255
    1848:	80 81       	ld	r24, Z
    184a:	91 81       	ldd	r25, Z+1	; 0x01
    184c:	00 97       	sbiw	r24, 0x00	; 0
    184e:	d1 f6       	brne	.-76     	; 0x1804 <APP_vCalculatorLCD+0xfc>
    1850:	28 c0       	rjmp	.+80     	; 0x18a2 <APP_vCalculatorLCD+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1852:	8e 01       	movw	r16, r28
    1854:	09 59       	subi	r16, 0x99	; 153
    1856:	1f 4f       	sbci	r17, 0xFF	; 255
    1858:	fe 01       	movw	r30, r28
    185a:	e7 59       	subi	r30, 0x97	; 151
    185c:	ff 4f       	sbci	r31, 0xFF	; 255
    185e:	60 81       	ld	r22, Z
    1860:	71 81       	ldd	r23, Z+1	; 0x01
    1862:	82 81       	ldd	r24, Z+2	; 0x02
    1864:	93 81       	ldd	r25, Z+3	; 0x03
    1866:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    186a:	dc 01       	movw	r26, r24
    186c:	cb 01       	movw	r24, r22
    186e:	f8 01       	movw	r30, r16
    1870:	91 83       	std	Z+1, r25	; 0x01
    1872:	80 83       	st	Z, r24
    1874:	de 01       	movw	r26, r28
    1876:	ad 59       	subi	r26, 0x9D	; 157
    1878:	bf 4f       	sbci	r27, 0xFF	; 255
    187a:	fe 01       	movw	r30, r28
    187c:	e9 59       	subi	r30, 0x99	; 153
    187e:	ff 4f       	sbci	r31, 0xFF	; 255
    1880:	80 81       	ld	r24, Z
    1882:	91 81       	ldd	r25, Z+1	; 0x01
    1884:	11 96       	adiw	r26, 0x01	; 1
    1886:	9c 93       	st	X, r25
    1888:	8e 93       	st	-X, r24
    188a:	fe 01       	movw	r30, r28
    188c:	ed 59       	subi	r30, 0x9D	; 157
    188e:	ff 4f       	sbci	r31, 0xFF	; 255
    1890:	80 81       	ld	r24, Z
    1892:	91 81       	ldd	r25, Z+1	; 0x01
    1894:	01 97       	sbiw	r24, 0x01	; 1
    1896:	f1 f7       	brne	.-4      	; 0x1894 <APP_vCalculatorLCD+0x18c>
    1898:	fe 01       	movw	r30, r28
    189a:	ed 59       	subi	r30, 0x9D	; 157
    189c:	ff 4f       	sbci	r31, 0xFF	; 255
    189e:	91 83       	std	Z+1, r25	; 0x01
    18a0:	80 83       	st	Z, r24
		_delay_ms(50);
		if(Loc_u8Num1!=0xff){
    18a2:	fe 01       	movw	r30, r28
    18a4:	eb 58       	subi	r30, 0x8B	; 139
    18a6:	ff 4f       	sbci	r31, 0xFF	; 255
    18a8:	80 81       	ld	r24, Z
    18aa:	8f 3f       	cpi	r24, 0xFF	; 255
    18ac:	09 f4       	brne	.+2      	; 0x18b0 <APP_vCalculatorLCD+0x1a8>
    18ae:	3f cf       	rjmp	.-386    	; 0x172e <APP_vCalculatorLCD+0x26>
			LCD_vInit();
    18b0:	0e 94 51 21 	call	0x42a2	; 0x42a2 <LCD_vInit>
			LCD_vWriteCharacter(Loc_u8Num1+48);
    18b4:	fe 01       	movw	r30, r28
    18b6:	eb 58       	subi	r30, 0x8B	; 139
    18b8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ba:	80 81       	ld	r24, Z
    18bc:	80 5d       	subi	r24, 0xD0	; 208
    18be:	0e 94 ed 25 	call	0x4bda	; 0x4bda <LCD_vWriteCharacter>
    18c2:	fe 01       	movw	r30, r28
    18c4:	e1 5a       	subi	r30, 0xA1	; 161
    18c6:	ff 4f       	sbci	r31, 0xFF	; 255
    18c8:	80 e0       	ldi	r24, 0x00	; 0
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	a8 e4       	ldi	r26, 0x48	; 72
    18ce:	b2 e4       	ldi	r27, 0x42	; 66
    18d0:	80 83       	st	Z, r24
    18d2:	91 83       	std	Z+1, r25	; 0x01
    18d4:	a2 83       	std	Z+2, r26	; 0x02
    18d6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18d8:	8e 01       	movw	r16, r28
    18da:	05 5a       	subi	r16, 0xA5	; 165
    18dc:	1f 4f       	sbci	r17, 0xFF	; 255
    18de:	fe 01       	movw	r30, r28
    18e0:	e1 5a       	subi	r30, 0xA1	; 161
    18e2:	ff 4f       	sbci	r31, 0xFF	; 255
    18e4:	60 81       	ld	r22, Z
    18e6:	71 81       	ldd	r23, Z+1	; 0x01
    18e8:	82 81       	ldd	r24, Z+2	; 0x02
    18ea:	93 81       	ldd	r25, Z+3	; 0x03
    18ec:	20 e0       	ldi	r18, 0x00	; 0
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	4a e7       	ldi	r20, 0x7A	; 122
    18f2:	55 e4       	ldi	r21, 0x45	; 69
    18f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18f8:	dc 01       	movw	r26, r24
    18fa:	cb 01       	movw	r24, r22
    18fc:	f8 01       	movw	r30, r16
    18fe:	80 83       	st	Z, r24
    1900:	91 83       	std	Z+1, r25	; 0x01
    1902:	a2 83       	std	Z+2, r26	; 0x02
    1904:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1906:	fe 01       	movw	r30, r28
    1908:	e5 5a       	subi	r30, 0xA5	; 165
    190a:	ff 4f       	sbci	r31, 0xFF	; 255
    190c:	60 81       	ld	r22, Z
    190e:	71 81       	ldd	r23, Z+1	; 0x01
    1910:	82 81       	ldd	r24, Z+2	; 0x02
    1912:	93 81       	ldd	r25, Z+3	; 0x03
    1914:	20 e0       	ldi	r18, 0x00	; 0
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	40 e8       	ldi	r20, 0x80	; 128
    191a:	5f e3       	ldi	r21, 0x3F	; 63
    191c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1920:	88 23       	and	r24, r24
    1922:	44 f4       	brge	.+16     	; 0x1934 <APP_vCalculatorLCD+0x22c>
		__ticks = 1;
    1924:	fe 01       	movw	r30, r28
    1926:	e7 5a       	subi	r30, 0xA7	; 167
    1928:	ff 4f       	sbci	r31, 0xFF	; 255
    192a:	81 e0       	ldi	r24, 0x01	; 1
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	91 83       	std	Z+1, r25	; 0x01
    1930:	80 83       	st	Z, r24
    1932:	64 c0       	rjmp	.+200    	; 0x19fc <APP_vCalculatorLCD+0x2f4>
	else if (__tmp > 65535)
    1934:	fe 01       	movw	r30, r28
    1936:	e5 5a       	subi	r30, 0xA5	; 165
    1938:	ff 4f       	sbci	r31, 0xFF	; 255
    193a:	60 81       	ld	r22, Z
    193c:	71 81       	ldd	r23, Z+1	; 0x01
    193e:	82 81       	ldd	r24, Z+2	; 0x02
    1940:	93 81       	ldd	r25, Z+3	; 0x03
    1942:	20 e0       	ldi	r18, 0x00	; 0
    1944:	3f ef       	ldi	r19, 0xFF	; 255
    1946:	4f e7       	ldi	r20, 0x7F	; 127
    1948:	57 e4       	ldi	r21, 0x47	; 71
    194a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    194e:	18 16       	cp	r1, r24
    1950:	0c f0       	brlt	.+2      	; 0x1954 <APP_vCalculatorLCD+0x24c>
    1952:	43 c0       	rjmp	.+134    	; 0x19da <APP_vCalculatorLCD+0x2d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1954:	fe 01       	movw	r30, r28
    1956:	e1 5a       	subi	r30, 0xA1	; 161
    1958:	ff 4f       	sbci	r31, 0xFF	; 255
    195a:	60 81       	ld	r22, Z
    195c:	71 81       	ldd	r23, Z+1	; 0x01
    195e:	82 81       	ldd	r24, Z+2	; 0x02
    1960:	93 81       	ldd	r25, Z+3	; 0x03
    1962:	20 e0       	ldi	r18, 0x00	; 0
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	40 e2       	ldi	r20, 0x20	; 32
    1968:	51 e4       	ldi	r21, 0x41	; 65
    196a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    196e:	dc 01       	movw	r26, r24
    1970:	cb 01       	movw	r24, r22
    1972:	8e 01       	movw	r16, r28
    1974:	07 5a       	subi	r16, 0xA7	; 167
    1976:	1f 4f       	sbci	r17, 0xFF	; 255
    1978:	bc 01       	movw	r22, r24
    197a:	cd 01       	movw	r24, r26
    197c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1980:	dc 01       	movw	r26, r24
    1982:	cb 01       	movw	r24, r22
    1984:	f8 01       	movw	r30, r16
    1986:	91 83       	std	Z+1, r25	; 0x01
    1988:	80 83       	st	Z, r24
    198a:	1f c0       	rjmp	.+62     	; 0x19ca <APP_vCalculatorLCD+0x2c2>
    198c:	fe 01       	movw	r30, r28
    198e:	e9 5a       	subi	r30, 0xA9	; 169
    1990:	ff 4f       	sbci	r31, 0xFF	; 255
    1992:	80 e9       	ldi	r24, 0x90	; 144
    1994:	91 e0       	ldi	r25, 0x01	; 1
    1996:	91 83       	std	Z+1, r25	; 0x01
    1998:	80 83       	st	Z, r24
    199a:	fe 01       	movw	r30, r28
    199c:	e9 5a       	subi	r30, 0xA9	; 169
    199e:	ff 4f       	sbci	r31, 0xFF	; 255
    19a0:	80 81       	ld	r24, Z
    19a2:	91 81       	ldd	r25, Z+1	; 0x01
    19a4:	01 97       	sbiw	r24, 0x01	; 1
    19a6:	f1 f7       	brne	.-4      	; 0x19a4 <APP_vCalculatorLCD+0x29c>
    19a8:	fe 01       	movw	r30, r28
    19aa:	e9 5a       	subi	r30, 0xA9	; 169
    19ac:	ff 4f       	sbci	r31, 0xFF	; 255
    19ae:	91 83       	std	Z+1, r25	; 0x01
    19b0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19b2:	de 01       	movw	r26, r28
    19b4:	a7 5a       	subi	r26, 0xA7	; 167
    19b6:	bf 4f       	sbci	r27, 0xFF	; 255
    19b8:	fe 01       	movw	r30, r28
    19ba:	e7 5a       	subi	r30, 0xA7	; 167
    19bc:	ff 4f       	sbci	r31, 0xFF	; 255
    19be:	80 81       	ld	r24, Z
    19c0:	91 81       	ldd	r25, Z+1	; 0x01
    19c2:	01 97       	sbiw	r24, 0x01	; 1
    19c4:	11 96       	adiw	r26, 0x01	; 1
    19c6:	9c 93       	st	X, r25
    19c8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19ca:	fe 01       	movw	r30, r28
    19cc:	e7 5a       	subi	r30, 0xA7	; 167
    19ce:	ff 4f       	sbci	r31, 0xFF	; 255
    19d0:	80 81       	ld	r24, Z
    19d2:	91 81       	ldd	r25, Z+1	; 0x01
    19d4:	00 97       	sbiw	r24, 0x00	; 0
    19d6:	d1 f6       	brne	.-76     	; 0x198c <APP_vCalculatorLCD+0x284>
    19d8:	27 c0       	rjmp	.+78     	; 0x1a28 <APP_vCalculatorLCD+0x320>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19da:	8e 01       	movw	r16, r28
    19dc:	07 5a       	subi	r16, 0xA7	; 167
    19de:	1f 4f       	sbci	r17, 0xFF	; 255
    19e0:	fe 01       	movw	r30, r28
    19e2:	e5 5a       	subi	r30, 0xA5	; 165
    19e4:	ff 4f       	sbci	r31, 0xFF	; 255
    19e6:	60 81       	ld	r22, Z
    19e8:	71 81       	ldd	r23, Z+1	; 0x01
    19ea:	82 81       	ldd	r24, Z+2	; 0x02
    19ec:	93 81       	ldd	r25, Z+3	; 0x03
    19ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19f2:	dc 01       	movw	r26, r24
    19f4:	cb 01       	movw	r24, r22
    19f6:	f8 01       	movw	r30, r16
    19f8:	91 83       	std	Z+1, r25	; 0x01
    19fa:	80 83       	st	Z, r24
    19fc:	de 01       	movw	r26, r28
    19fe:	ab 5a       	subi	r26, 0xAB	; 171
    1a00:	bf 4f       	sbci	r27, 0xFF	; 255
    1a02:	fe 01       	movw	r30, r28
    1a04:	e7 5a       	subi	r30, 0xA7	; 167
    1a06:	ff 4f       	sbci	r31, 0xFF	; 255
    1a08:	80 81       	ld	r24, Z
    1a0a:	91 81       	ldd	r25, Z+1	; 0x01
    1a0c:	8d 93       	st	X+, r24
    1a0e:	9c 93       	st	X, r25
    1a10:	fe 01       	movw	r30, r28
    1a12:	eb 5a       	subi	r30, 0xAB	; 171
    1a14:	ff 4f       	sbci	r31, 0xFF	; 255
    1a16:	80 81       	ld	r24, Z
    1a18:	91 81       	ldd	r25, Z+1	; 0x01
    1a1a:	01 97       	sbiw	r24, 0x01	; 1
    1a1c:	f1 f7       	brne	.-4      	; 0x1a1a <APP_vCalculatorLCD+0x312>
    1a1e:	fe 01       	movw	r30, r28
    1a20:	eb 5a       	subi	r30, 0xAB	; 171
    1a22:	ff 4f       	sbci	r31, 0xFF	; 255
    1a24:	91 83       	std	Z+1, r25	; 0x01
    1a26:	80 83       	st	Z, r24
			break;
		}
	}
	_delay_ms(50);
	KAYPAD_vInit();
    1a28:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <KAYPAD_vInit>
	//--- delete all while 1 and replace it with if that take v and it count
	while(1){
		Loc_u8Symbol1=KAYPAD_u8GetKey();
    1a2c:	0e 94 50 1f 	call	0x3ea0	; 0x3ea0 <KAYPAD_u8GetKey>
    1a30:	fe 01       	movw	r30, r28
    1a32:	ed 58       	subi	r30, 0x8D	; 141
    1a34:	ff 4f       	sbci	r31, 0xFF	; 255
    1a36:	80 83       	st	Z, r24
    1a38:	fe 01       	movw	r30, r28
    1a3a:	ef 5a       	subi	r30, 0xAF	; 175
    1a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3e:	80 e0       	ldi	r24, 0x00	; 0
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	a8 e4       	ldi	r26, 0x48	; 72
    1a44:	b2 e4       	ldi	r27, 0x42	; 66
    1a46:	80 83       	st	Z, r24
    1a48:	91 83       	std	Z+1, r25	; 0x01
    1a4a:	a2 83       	std	Z+2, r26	; 0x02
    1a4c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a4e:	8e 01       	movw	r16, r28
    1a50:	03 5b       	subi	r16, 0xB3	; 179
    1a52:	1f 4f       	sbci	r17, 0xFF	; 255
    1a54:	fe 01       	movw	r30, r28
    1a56:	ef 5a       	subi	r30, 0xAF	; 175
    1a58:	ff 4f       	sbci	r31, 0xFF	; 255
    1a5a:	60 81       	ld	r22, Z
    1a5c:	71 81       	ldd	r23, Z+1	; 0x01
    1a5e:	82 81       	ldd	r24, Z+2	; 0x02
    1a60:	93 81       	ldd	r25, Z+3	; 0x03
    1a62:	20 e0       	ldi	r18, 0x00	; 0
    1a64:	30 e0       	ldi	r19, 0x00	; 0
    1a66:	4a e7       	ldi	r20, 0x7A	; 122
    1a68:	55 e4       	ldi	r21, 0x45	; 69
    1a6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a6e:	dc 01       	movw	r26, r24
    1a70:	cb 01       	movw	r24, r22
    1a72:	f8 01       	movw	r30, r16
    1a74:	80 83       	st	Z, r24
    1a76:	91 83       	std	Z+1, r25	; 0x01
    1a78:	a2 83       	std	Z+2, r26	; 0x02
    1a7a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a7c:	fe 01       	movw	r30, r28
    1a7e:	e3 5b       	subi	r30, 0xB3	; 179
    1a80:	ff 4f       	sbci	r31, 0xFF	; 255
    1a82:	60 81       	ld	r22, Z
    1a84:	71 81       	ldd	r23, Z+1	; 0x01
    1a86:	82 81       	ldd	r24, Z+2	; 0x02
    1a88:	93 81       	ldd	r25, Z+3	; 0x03
    1a8a:	20 e0       	ldi	r18, 0x00	; 0
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	40 e8       	ldi	r20, 0x80	; 128
    1a90:	5f e3       	ldi	r21, 0x3F	; 63
    1a92:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a96:	88 23       	and	r24, r24
    1a98:	44 f4       	brge	.+16     	; 0x1aaa <APP_vCalculatorLCD+0x3a2>
		__ticks = 1;
    1a9a:	fe 01       	movw	r30, r28
    1a9c:	e5 5b       	subi	r30, 0xB5	; 181
    1a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa0:	81 e0       	ldi	r24, 0x01	; 1
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	91 83       	std	Z+1, r25	; 0x01
    1aa6:	80 83       	st	Z, r24
    1aa8:	64 c0       	rjmp	.+200    	; 0x1b72 <APP_vCalculatorLCD+0x46a>
	else if (__tmp > 65535)
    1aaa:	fe 01       	movw	r30, r28
    1aac:	e3 5b       	subi	r30, 0xB3	; 179
    1aae:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab0:	60 81       	ld	r22, Z
    1ab2:	71 81       	ldd	r23, Z+1	; 0x01
    1ab4:	82 81       	ldd	r24, Z+2	; 0x02
    1ab6:	93 81       	ldd	r25, Z+3	; 0x03
    1ab8:	20 e0       	ldi	r18, 0x00	; 0
    1aba:	3f ef       	ldi	r19, 0xFF	; 255
    1abc:	4f e7       	ldi	r20, 0x7F	; 127
    1abe:	57 e4       	ldi	r21, 0x47	; 71
    1ac0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ac4:	18 16       	cp	r1, r24
    1ac6:	0c f0       	brlt	.+2      	; 0x1aca <APP_vCalculatorLCD+0x3c2>
    1ac8:	43 c0       	rjmp	.+134    	; 0x1b50 <APP_vCalculatorLCD+0x448>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aca:	fe 01       	movw	r30, r28
    1acc:	ef 5a       	subi	r30, 0xAF	; 175
    1ace:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad0:	60 81       	ld	r22, Z
    1ad2:	71 81       	ldd	r23, Z+1	; 0x01
    1ad4:	82 81       	ldd	r24, Z+2	; 0x02
    1ad6:	93 81       	ldd	r25, Z+3	; 0x03
    1ad8:	20 e0       	ldi	r18, 0x00	; 0
    1ada:	30 e0       	ldi	r19, 0x00	; 0
    1adc:	40 e2       	ldi	r20, 0x20	; 32
    1ade:	51 e4       	ldi	r21, 0x41	; 65
    1ae0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ae4:	dc 01       	movw	r26, r24
    1ae6:	cb 01       	movw	r24, r22
    1ae8:	8e 01       	movw	r16, r28
    1aea:	05 5b       	subi	r16, 0xB5	; 181
    1aec:	1f 4f       	sbci	r17, 0xFF	; 255
    1aee:	bc 01       	movw	r22, r24
    1af0:	cd 01       	movw	r24, r26
    1af2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1af6:	dc 01       	movw	r26, r24
    1af8:	cb 01       	movw	r24, r22
    1afa:	f8 01       	movw	r30, r16
    1afc:	91 83       	std	Z+1, r25	; 0x01
    1afe:	80 83       	st	Z, r24
    1b00:	1f c0       	rjmp	.+62     	; 0x1b40 <APP_vCalculatorLCD+0x438>
    1b02:	fe 01       	movw	r30, r28
    1b04:	e7 5b       	subi	r30, 0xB7	; 183
    1b06:	ff 4f       	sbci	r31, 0xFF	; 255
    1b08:	80 e9       	ldi	r24, 0x90	; 144
    1b0a:	91 e0       	ldi	r25, 0x01	; 1
    1b0c:	91 83       	std	Z+1, r25	; 0x01
    1b0e:	80 83       	st	Z, r24
    1b10:	fe 01       	movw	r30, r28
    1b12:	e7 5b       	subi	r30, 0xB7	; 183
    1b14:	ff 4f       	sbci	r31, 0xFF	; 255
    1b16:	80 81       	ld	r24, Z
    1b18:	91 81       	ldd	r25, Z+1	; 0x01
    1b1a:	01 97       	sbiw	r24, 0x01	; 1
    1b1c:	f1 f7       	brne	.-4      	; 0x1b1a <APP_vCalculatorLCD+0x412>
    1b1e:	fe 01       	movw	r30, r28
    1b20:	e7 5b       	subi	r30, 0xB7	; 183
    1b22:	ff 4f       	sbci	r31, 0xFF	; 255
    1b24:	91 83       	std	Z+1, r25	; 0x01
    1b26:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b28:	de 01       	movw	r26, r28
    1b2a:	a5 5b       	subi	r26, 0xB5	; 181
    1b2c:	bf 4f       	sbci	r27, 0xFF	; 255
    1b2e:	fe 01       	movw	r30, r28
    1b30:	e5 5b       	subi	r30, 0xB5	; 181
    1b32:	ff 4f       	sbci	r31, 0xFF	; 255
    1b34:	80 81       	ld	r24, Z
    1b36:	91 81       	ldd	r25, Z+1	; 0x01
    1b38:	01 97       	sbiw	r24, 0x01	; 1
    1b3a:	11 96       	adiw	r26, 0x01	; 1
    1b3c:	9c 93       	st	X, r25
    1b3e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b40:	fe 01       	movw	r30, r28
    1b42:	e5 5b       	subi	r30, 0xB5	; 181
    1b44:	ff 4f       	sbci	r31, 0xFF	; 255
    1b46:	80 81       	ld	r24, Z
    1b48:	91 81       	ldd	r25, Z+1	; 0x01
    1b4a:	00 97       	sbiw	r24, 0x00	; 0
    1b4c:	d1 f6       	brne	.-76     	; 0x1b02 <APP_vCalculatorLCD+0x3fa>
    1b4e:	28 c0       	rjmp	.+80     	; 0x1ba0 <APP_vCalculatorLCD+0x498>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b50:	8e 01       	movw	r16, r28
    1b52:	05 5b       	subi	r16, 0xB5	; 181
    1b54:	1f 4f       	sbci	r17, 0xFF	; 255
    1b56:	fe 01       	movw	r30, r28
    1b58:	e3 5b       	subi	r30, 0xB3	; 179
    1b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5c:	60 81       	ld	r22, Z
    1b5e:	71 81       	ldd	r23, Z+1	; 0x01
    1b60:	82 81       	ldd	r24, Z+2	; 0x02
    1b62:	93 81       	ldd	r25, Z+3	; 0x03
    1b64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b68:	dc 01       	movw	r26, r24
    1b6a:	cb 01       	movw	r24, r22
    1b6c:	f8 01       	movw	r30, r16
    1b6e:	91 83       	std	Z+1, r25	; 0x01
    1b70:	80 83       	st	Z, r24
    1b72:	de 01       	movw	r26, r28
    1b74:	a9 5b       	subi	r26, 0xB9	; 185
    1b76:	bf 4f       	sbci	r27, 0xFF	; 255
    1b78:	fe 01       	movw	r30, r28
    1b7a:	e5 5b       	subi	r30, 0xB5	; 181
    1b7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7e:	80 81       	ld	r24, Z
    1b80:	91 81       	ldd	r25, Z+1	; 0x01
    1b82:	11 96       	adiw	r26, 0x01	; 1
    1b84:	9c 93       	st	X, r25
    1b86:	8e 93       	st	-X, r24
    1b88:	fe 01       	movw	r30, r28
    1b8a:	e9 5b       	subi	r30, 0xB9	; 185
    1b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8e:	80 81       	ld	r24, Z
    1b90:	91 81       	ldd	r25, Z+1	; 0x01
    1b92:	01 97       	sbiw	r24, 0x01	; 1
    1b94:	f1 f7       	brne	.-4      	; 0x1b92 <APP_vCalculatorLCD+0x48a>
    1b96:	fe 01       	movw	r30, r28
    1b98:	e9 5b       	subi	r30, 0xB9	; 185
    1b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9c:	91 83       	std	Z+1, r25	; 0x01
    1b9e:	80 83       	st	Z, r24
		_delay_ms(50);
		if(Loc_u8Symbol1=='/'||Loc_u8Symbol1=='*'||Loc_u8Symbol1=='-'||Loc_u8Symbol1=='+'||Loc_u8Symbol1=='%'){
    1ba0:	fe 01       	movw	r30, r28
    1ba2:	ed 58       	subi	r30, 0x8D	; 141
    1ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba6:	80 81       	ld	r24, Z
    1ba8:	8f 32       	cpi	r24, 0x2F	; 47
    1baa:	c9 f0       	breq	.+50     	; 0x1bde <APP_vCalculatorLCD+0x4d6>
    1bac:	fe 01       	movw	r30, r28
    1bae:	ed 58       	subi	r30, 0x8D	; 141
    1bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb2:	80 81       	ld	r24, Z
    1bb4:	8a 32       	cpi	r24, 0x2A	; 42
    1bb6:	99 f0       	breq	.+38     	; 0x1bde <APP_vCalculatorLCD+0x4d6>
    1bb8:	fe 01       	movw	r30, r28
    1bba:	ed 58       	subi	r30, 0x8D	; 141
    1bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bbe:	80 81       	ld	r24, Z
    1bc0:	8d 32       	cpi	r24, 0x2D	; 45
    1bc2:	69 f0       	breq	.+26     	; 0x1bde <APP_vCalculatorLCD+0x4d6>
    1bc4:	fe 01       	movw	r30, r28
    1bc6:	ed 58       	subi	r30, 0x8D	; 141
    1bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bca:	80 81       	ld	r24, Z
    1bcc:	8b 32       	cpi	r24, 0x2B	; 43
    1bce:	39 f0       	breq	.+14     	; 0x1bde <APP_vCalculatorLCD+0x4d6>
    1bd0:	fe 01       	movw	r30, r28
    1bd2:	ed 58       	subi	r30, 0x8D	; 141
    1bd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd6:	80 81       	ld	r24, Z
    1bd8:	85 32       	cpi	r24, 0x25	; 37
    1bda:	09 f0       	breq	.+2      	; 0x1bde <APP_vCalculatorLCD+0x4d6>
    1bdc:	27 cf       	rjmp	.-434    	; 0x1a2c <APP_vCalculatorLCD+0x324>
			LCD_vInitWithOutClear();
    1bde:	0e 94 e6 23 	call	0x47cc	; 0x47cc <LCD_vInitWithOutClear>
			LCD_vGoTo(LineOne,1);
    1be2:	80 e8       	ldi	r24, 0x80	; 128
    1be4:	61 e0       	ldi	r22, 0x01	; 1
    1be6:	0e 94 17 27 	call	0x4e2e	; 0x4e2e <LCD_vGoTo>
			LCD_vWriteCharacter(Loc_u8Symbol1);
    1bea:	fe 01       	movw	r30, r28
    1bec:	ed 58       	subi	r30, 0x8D	; 141
    1bee:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf0:	80 81       	ld	r24, Z
    1bf2:	0e 94 ed 25 	call	0x4bda	; 0x4bda <LCD_vWriteCharacter>
    1bf6:	fe 01       	movw	r30, r28
    1bf8:	ed 5b       	subi	r30, 0xBD	; 189
    1bfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfc:	80 e0       	ldi	r24, 0x00	; 0
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	a8 e4       	ldi	r26, 0x48	; 72
    1c02:	b2 e4       	ldi	r27, 0x42	; 66
    1c04:	80 83       	st	Z, r24
    1c06:	91 83       	std	Z+1, r25	; 0x01
    1c08:	a2 83       	std	Z+2, r26	; 0x02
    1c0a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c0c:	8e 01       	movw	r16, r28
    1c0e:	01 5c       	subi	r16, 0xC1	; 193
    1c10:	1f 4f       	sbci	r17, 0xFF	; 255
    1c12:	fe 01       	movw	r30, r28
    1c14:	ed 5b       	subi	r30, 0xBD	; 189
    1c16:	ff 4f       	sbci	r31, 0xFF	; 255
    1c18:	60 81       	ld	r22, Z
    1c1a:	71 81       	ldd	r23, Z+1	; 0x01
    1c1c:	82 81       	ldd	r24, Z+2	; 0x02
    1c1e:	93 81       	ldd	r25, Z+3	; 0x03
    1c20:	20 e0       	ldi	r18, 0x00	; 0
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	4a e7       	ldi	r20, 0x7A	; 122
    1c26:	55 e4       	ldi	r21, 0x45	; 69
    1c28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c2c:	dc 01       	movw	r26, r24
    1c2e:	cb 01       	movw	r24, r22
    1c30:	f8 01       	movw	r30, r16
    1c32:	80 83       	st	Z, r24
    1c34:	91 83       	std	Z+1, r25	; 0x01
    1c36:	a2 83       	std	Z+2, r26	; 0x02
    1c38:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c3a:	fe 01       	movw	r30, r28
    1c3c:	ff 96       	adiw	r30, 0x3f	; 63
    1c3e:	60 81       	ld	r22, Z
    1c40:	71 81       	ldd	r23, Z+1	; 0x01
    1c42:	82 81       	ldd	r24, Z+2	; 0x02
    1c44:	93 81       	ldd	r25, Z+3	; 0x03
    1c46:	20 e0       	ldi	r18, 0x00	; 0
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	40 e8       	ldi	r20, 0x80	; 128
    1c4c:	5f e3       	ldi	r21, 0x3F	; 63
    1c4e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c52:	88 23       	and	r24, r24
    1c54:	2c f4       	brge	.+10     	; 0x1c60 <APP_vCalculatorLCD+0x558>
		__ticks = 1;
    1c56:	81 e0       	ldi	r24, 0x01	; 1
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	9e af       	std	Y+62, r25	; 0x3e
    1c5c:	8d af       	std	Y+61, r24	; 0x3d
    1c5e:	46 c0       	rjmp	.+140    	; 0x1cec <APP_vCalculatorLCD+0x5e4>
	else if (__tmp > 65535)
    1c60:	fe 01       	movw	r30, r28
    1c62:	ff 96       	adiw	r30, 0x3f	; 63
    1c64:	60 81       	ld	r22, Z
    1c66:	71 81       	ldd	r23, Z+1	; 0x01
    1c68:	82 81       	ldd	r24, Z+2	; 0x02
    1c6a:	93 81       	ldd	r25, Z+3	; 0x03
    1c6c:	20 e0       	ldi	r18, 0x00	; 0
    1c6e:	3f ef       	ldi	r19, 0xFF	; 255
    1c70:	4f e7       	ldi	r20, 0x7F	; 127
    1c72:	57 e4       	ldi	r21, 0x47	; 71
    1c74:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c78:	18 16       	cp	r1, r24
    1c7a:	64 f5       	brge	.+88     	; 0x1cd4 <APP_vCalculatorLCD+0x5cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c7c:	fe 01       	movw	r30, r28
    1c7e:	ed 5b       	subi	r30, 0xBD	; 189
    1c80:	ff 4f       	sbci	r31, 0xFF	; 255
    1c82:	60 81       	ld	r22, Z
    1c84:	71 81       	ldd	r23, Z+1	; 0x01
    1c86:	82 81       	ldd	r24, Z+2	; 0x02
    1c88:	93 81       	ldd	r25, Z+3	; 0x03
    1c8a:	20 e0       	ldi	r18, 0x00	; 0
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	40 e2       	ldi	r20, 0x20	; 32
    1c90:	51 e4       	ldi	r21, 0x41	; 65
    1c92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c96:	dc 01       	movw	r26, r24
    1c98:	cb 01       	movw	r24, r22
    1c9a:	bc 01       	movw	r22, r24
    1c9c:	cd 01       	movw	r24, r26
    1c9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ca2:	dc 01       	movw	r26, r24
    1ca4:	cb 01       	movw	r24, r22
    1ca6:	9e af       	std	Y+62, r25	; 0x3e
    1ca8:	8d af       	std	Y+61, r24	; 0x3d
    1caa:	0f c0       	rjmp	.+30     	; 0x1cca <APP_vCalculatorLCD+0x5c2>
    1cac:	80 e9       	ldi	r24, 0x90	; 144
    1cae:	91 e0       	ldi	r25, 0x01	; 1
    1cb0:	9c af       	std	Y+60, r25	; 0x3c
    1cb2:	8b af       	std	Y+59, r24	; 0x3b
    1cb4:	8b ad       	ldd	r24, Y+59	; 0x3b
    1cb6:	9c ad       	ldd	r25, Y+60	; 0x3c
    1cb8:	01 97       	sbiw	r24, 0x01	; 1
    1cba:	f1 f7       	brne	.-4      	; 0x1cb8 <APP_vCalculatorLCD+0x5b0>
    1cbc:	9c af       	std	Y+60, r25	; 0x3c
    1cbe:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cc0:	8d ad       	ldd	r24, Y+61	; 0x3d
    1cc2:	9e ad       	ldd	r25, Y+62	; 0x3e
    1cc4:	01 97       	sbiw	r24, 0x01	; 1
    1cc6:	9e af       	std	Y+62, r25	; 0x3e
    1cc8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cca:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ccc:	9e ad       	ldd	r25, Y+62	; 0x3e
    1cce:	00 97       	sbiw	r24, 0x00	; 0
    1cd0:	69 f7       	brne	.-38     	; 0x1cac <APP_vCalculatorLCD+0x5a4>
    1cd2:	16 c0       	rjmp	.+44     	; 0x1d00 <APP_vCalculatorLCD+0x5f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cd4:	fe 01       	movw	r30, r28
    1cd6:	ff 96       	adiw	r30, 0x3f	; 63
    1cd8:	60 81       	ld	r22, Z
    1cda:	71 81       	ldd	r23, Z+1	; 0x01
    1cdc:	82 81       	ldd	r24, Z+2	; 0x02
    1cde:	93 81       	ldd	r25, Z+3	; 0x03
    1ce0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce4:	dc 01       	movw	r26, r24
    1ce6:	cb 01       	movw	r24, r22
    1ce8:	9e af       	std	Y+62, r25	; 0x3e
    1cea:	8d af       	std	Y+61, r24	; 0x3d
    1cec:	8d ad       	ldd	r24, Y+61	; 0x3d
    1cee:	9e ad       	ldd	r25, Y+62	; 0x3e
    1cf0:	9a af       	std	Y+58, r25	; 0x3a
    1cf2:	89 af       	std	Y+57, r24	; 0x39
    1cf4:	89 ad       	ldd	r24, Y+57	; 0x39
    1cf6:	9a ad       	ldd	r25, Y+58	; 0x3a
    1cf8:	01 97       	sbiw	r24, 0x01	; 1
    1cfa:	f1 f7       	brne	.-4      	; 0x1cf8 <APP_vCalculatorLCD+0x5f0>
    1cfc:	9a af       	std	Y+58, r25	; 0x3a
    1cfe:	89 af       	std	Y+57, r24	; 0x39
			break;
		}
	}
	_delay_ms(50);
	KAYPAD_vInit();
    1d00:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <KAYPAD_vInit>
	while(1){
		Loc_u8Num2=KAYPAD_u8GetKey();
    1d04:	0e 94 50 1f 	call	0x3ea0	; 0x3ea0 <KAYPAD_u8GetKey>
    1d08:	fe 01       	movw	r30, r28
    1d0a:	ec 58       	subi	r30, 0x8C	; 140
    1d0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0e:	80 83       	st	Z, r24
    1d10:	80 e0       	ldi	r24, 0x00	; 0
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	a8 e4       	ldi	r26, 0x48	; 72
    1d16:	b2 e4       	ldi	r27, 0x42	; 66
    1d18:	8d ab       	std	Y+53, r24	; 0x35
    1d1a:	9e ab       	std	Y+54, r25	; 0x36
    1d1c:	af ab       	std	Y+55, r26	; 0x37
    1d1e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d20:	6d a9       	ldd	r22, Y+53	; 0x35
    1d22:	7e a9       	ldd	r23, Y+54	; 0x36
    1d24:	8f a9       	ldd	r24, Y+55	; 0x37
    1d26:	98 ad       	ldd	r25, Y+56	; 0x38
    1d28:	20 e0       	ldi	r18, 0x00	; 0
    1d2a:	30 e0       	ldi	r19, 0x00	; 0
    1d2c:	4a e7       	ldi	r20, 0x7A	; 122
    1d2e:	55 e4       	ldi	r21, 0x45	; 69
    1d30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d34:	dc 01       	movw	r26, r24
    1d36:	cb 01       	movw	r24, r22
    1d38:	89 ab       	std	Y+49, r24	; 0x31
    1d3a:	9a ab       	std	Y+50, r25	; 0x32
    1d3c:	ab ab       	std	Y+51, r26	; 0x33
    1d3e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1d40:	69 a9       	ldd	r22, Y+49	; 0x31
    1d42:	7a a9       	ldd	r23, Y+50	; 0x32
    1d44:	8b a9       	ldd	r24, Y+51	; 0x33
    1d46:	9c a9       	ldd	r25, Y+52	; 0x34
    1d48:	20 e0       	ldi	r18, 0x00	; 0
    1d4a:	30 e0       	ldi	r19, 0x00	; 0
    1d4c:	40 e8       	ldi	r20, 0x80	; 128
    1d4e:	5f e3       	ldi	r21, 0x3F	; 63
    1d50:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d54:	88 23       	and	r24, r24
    1d56:	2c f4       	brge	.+10     	; 0x1d62 <APP_vCalculatorLCD+0x65a>
		__ticks = 1;
    1d58:	81 e0       	ldi	r24, 0x01	; 1
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	98 ab       	std	Y+48, r25	; 0x30
    1d5e:	8f a7       	std	Y+47, r24	; 0x2f
    1d60:	3f c0       	rjmp	.+126    	; 0x1de0 <APP_vCalculatorLCD+0x6d8>
	else if (__tmp > 65535)
    1d62:	69 a9       	ldd	r22, Y+49	; 0x31
    1d64:	7a a9       	ldd	r23, Y+50	; 0x32
    1d66:	8b a9       	ldd	r24, Y+51	; 0x33
    1d68:	9c a9       	ldd	r25, Y+52	; 0x34
    1d6a:	20 e0       	ldi	r18, 0x00	; 0
    1d6c:	3f ef       	ldi	r19, 0xFF	; 255
    1d6e:	4f e7       	ldi	r20, 0x7F	; 127
    1d70:	57 e4       	ldi	r21, 0x47	; 71
    1d72:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d76:	18 16       	cp	r1, r24
    1d78:	4c f5       	brge	.+82     	; 0x1dcc <APP_vCalculatorLCD+0x6c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d7a:	6d a9       	ldd	r22, Y+53	; 0x35
    1d7c:	7e a9       	ldd	r23, Y+54	; 0x36
    1d7e:	8f a9       	ldd	r24, Y+55	; 0x37
    1d80:	98 ad       	ldd	r25, Y+56	; 0x38
    1d82:	20 e0       	ldi	r18, 0x00	; 0
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	40 e2       	ldi	r20, 0x20	; 32
    1d88:	51 e4       	ldi	r21, 0x41	; 65
    1d8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d8e:	dc 01       	movw	r26, r24
    1d90:	cb 01       	movw	r24, r22
    1d92:	bc 01       	movw	r22, r24
    1d94:	cd 01       	movw	r24, r26
    1d96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d9a:	dc 01       	movw	r26, r24
    1d9c:	cb 01       	movw	r24, r22
    1d9e:	98 ab       	std	Y+48, r25	; 0x30
    1da0:	8f a7       	std	Y+47, r24	; 0x2f
    1da2:	0f c0       	rjmp	.+30     	; 0x1dc2 <APP_vCalculatorLCD+0x6ba>
    1da4:	80 e9       	ldi	r24, 0x90	; 144
    1da6:	91 e0       	ldi	r25, 0x01	; 1
    1da8:	9e a7       	std	Y+46, r25	; 0x2e
    1daa:	8d a7       	std	Y+45, r24	; 0x2d
    1dac:	8d a5       	ldd	r24, Y+45	; 0x2d
    1dae:	9e a5       	ldd	r25, Y+46	; 0x2e
    1db0:	01 97       	sbiw	r24, 0x01	; 1
    1db2:	f1 f7       	brne	.-4      	; 0x1db0 <APP_vCalculatorLCD+0x6a8>
    1db4:	9e a7       	std	Y+46, r25	; 0x2e
    1db6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1db8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1dba:	98 a9       	ldd	r25, Y+48	; 0x30
    1dbc:	01 97       	sbiw	r24, 0x01	; 1
    1dbe:	98 ab       	std	Y+48, r25	; 0x30
    1dc0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dc2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1dc4:	98 a9       	ldd	r25, Y+48	; 0x30
    1dc6:	00 97       	sbiw	r24, 0x00	; 0
    1dc8:	69 f7       	brne	.-38     	; 0x1da4 <APP_vCalculatorLCD+0x69c>
    1dca:	14 c0       	rjmp	.+40     	; 0x1df4 <APP_vCalculatorLCD+0x6ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dcc:	69 a9       	ldd	r22, Y+49	; 0x31
    1dce:	7a a9       	ldd	r23, Y+50	; 0x32
    1dd0:	8b a9       	ldd	r24, Y+51	; 0x33
    1dd2:	9c a9       	ldd	r25, Y+52	; 0x34
    1dd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dd8:	dc 01       	movw	r26, r24
    1dda:	cb 01       	movw	r24, r22
    1ddc:	98 ab       	std	Y+48, r25	; 0x30
    1dde:	8f a7       	std	Y+47, r24	; 0x2f
    1de0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1de2:	98 a9       	ldd	r25, Y+48	; 0x30
    1de4:	9c a7       	std	Y+44, r25	; 0x2c
    1de6:	8b a7       	std	Y+43, r24	; 0x2b
    1de8:	8b a5       	ldd	r24, Y+43	; 0x2b
    1dea:	9c a5       	ldd	r25, Y+44	; 0x2c
    1dec:	01 97       	sbiw	r24, 0x01	; 1
    1dee:	f1 f7       	brne	.-4      	; 0x1dec <APP_vCalculatorLCD+0x6e4>
    1df0:	9c a7       	std	Y+44, r25	; 0x2c
    1df2:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(50);
		if(Loc_u8Num2!=0xff){
    1df4:	fe 01       	movw	r30, r28
    1df6:	ec 58       	subi	r30, 0x8C	; 140
    1df8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfa:	80 81       	ld	r24, Z
    1dfc:	8f 3f       	cpi	r24, 0xFF	; 255
    1dfe:	09 f4       	brne	.+2      	; 0x1e02 <APP_vCalculatorLCD+0x6fa>
    1e00:	81 cf       	rjmp	.-254    	; 0x1d04 <APP_vCalculatorLCD+0x5fc>
			LCD_vInitWithOutClear();
    1e02:	0e 94 e6 23 	call	0x47cc	; 0x47cc <LCD_vInitWithOutClear>
			LCD_vGoTo(LineOne,2);
    1e06:	80 e8       	ldi	r24, 0x80	; 128
    1e08:	62 e0       	ldi	r22, 0x02	; 2
    1e0a:	0e 94 17 27 	call	0x4e2e	; 0x4e2e <LCD_vGoTo>
			LCD_vWriteCharacter(Loc_u8Num2+48);
    1e0e:	fe 01       	movw	r30, r28
    1e10:	ec 58       	subi	r30, 0x8C	; 140
    1e12:	ff 4f       	sbci	r31, 0xFF	; 255
    1e14:	80 81       	ld	r24, Z
    1e16:	80 5d       	subi	r24, 0xD0	; 208
    1e18:	0e 94 ed 25 	call	0x4bda	; 0x4bda <LCD_vWriteCharacter>
    1e1c:	80 e0       	ldi	r24, 0x00	; 0
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	a8 e4       	ldi	r26, 0x48	; 72
    1e22:	b2 e4       	ldi	r27, 0x42	; 66
    1e24:	8f a3       	std	Y+39, r24	; 0x27
    1e26:	98 a7       	std	Y+40, r25	; 0x28
    1e28:	a9 a7       	std	Y+41, r26	; 0x29
    1e2a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e2c:	6f a1       	ldd	r22, Y+39	; 0x27
    1e2e:	78 a5       	ldd	r23, Y+40	; 0x28
    1e30:	89 a5       	ldd	r24, Y+41	; 0x29
    1e32:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e34:	20 e0       	ldi	r18, 0x00	; 0
    1e36:	30 e0       	ldi	r19, 0x00	; 0
    1e38:	4a e7       	ldi	r20, 0x7A	; 122
    1e3a:	55 e4       	ldi	r21, 0x45	; 69
    1e3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e40:	dc 01       	movw	r26, r24
    1e42:	cb 01       	movw	r24, r22
    1e44:	8b a3       	std	Y+35, r24	; 0x23
    1e46:	9c a3       	std	Y+36, r25	; 0x24
    1e48:	ad a3       	std	Y+37, r26	; 0x25
    1e4a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e4c:	6b a1       	ldd	r22, Y+35	; 0x23
    1e4e:	7c a1       	ldd	r23, Y+36	; 0x24
    1e50:	8d a1       	ldd	r24, Y+37	; 0x25
    1e52:	9e a1       	ldd	r25, Y+38	; 0x26
    1e54:	20 e0       	ldi	r18, 0x00	; 0
    1e56:	30 e0       	ldi	r19, 0x00	; 0
    1e58:	40 e8       	ldi	r20, 0x80	; 128
    1e5a:	5f e3       	ldi	r21, 0x3F	; 63
    1e5c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e60:	88 23       	and	r24, r24
    1e62:	2c f4       	brge	.+10     	; 0x1e6e <APP_vCalculatorLCD+0x766>
		__ticks = 1;
    1e64:	81 e0       	ldi	r24, 0x01	; 1
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	9a a3       	std	Y+34, r25	; 0x22
    1e6a:	89 a3       	std	Y+33, r24	; 0x21
    1e6c:	3f c0       	rjmp	.+126    	; 0x1eec <APP_vCalculatorLCD+0x7e4>
	else if (__tmp > 65535)
    1e6e:	6b a1       	ldd	r22, Y+35	; 0x23
    1e70:	7c a1       	ldd	r23, Y+36	; 0x24
    1e72:	8d a1       	ldd	r24, Y+37	; 0x25
    1e74:	9e a1       	ldd	r25, Y+38	; 0x26
    1e76:	20 e0       	ldi	r18, 0x00	; 0
    1e78:	3f ef       	ldi	r19, 0xFF	; 255
    1e7a:	4f e7       	ldi	r20, 0x7F	; 127
    1e7c:	57 e4       	ldi	r21, 0x47	; 71
    1e7e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e82:	18 16       	cp	r1, r24
    1e84:	4c f5       	brge	.+82     	; 0x1ed8 <APP_vCalculatorLCD+0x7d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e86:	6f a1       	ldd	r22, Y+39	; 0x27
    1e88:	78 a5       	ldd	r23, Y+40	; 0x28
    1e8a:	89 a5       	ldd	r24, Y+41	; 0x29
    1e8c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e8e:	20 e0       	ldi	r18, 0x00	; 0
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	40 e2       	ldi	r20, 0x20	; 32
    1e94:	51 e4       	ldi	r21, 0x41	; 65
    1e96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e9a:	dc 01       	movw	r26, r24
    1e9c:	cb 01       	movw	r24, r22
    1e9e:	bc 01       	movw	r22, r24
    1ea0:	cd 01       	movw	r24, r26
    1ea2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ea6:	dc 01       	movw	r26, r24
    1ea8:	cb 01       	movw	r24, r22
    1eaa:	9a a3       	std	Y+34, r25	; 0x22
    1eac:	89 a3       	std	Y+33, r24	; 0x21
    1eae:	0f c0       	rjmp	.+30     	; 0x1ece <APP_vCalculatorLCD+0x7c6>
    1eb0:	80 e9       	ldi	r24, 0x90	; 144
    1eb2:	91 e0       	ldi	r25, 0x01	; 1
    1eb4:	98 a3       	std	Y+32, r25	; 0x20
    1eb6:	8f 8f       	std	Y+31, r24	; 0x1f
    1eb8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1eba:	98 a1       	ldd	r25, Y+32	; 0x20
    1ebc:	01 97       	sbiw	r24, 0x01	; 1
    1ebe:	f1 f7       	brne	.-4      	; 0x1ebc <APP_vCalculatorLCD+0x7b4>
    1ec0:	98 a3       	std	Y+32, r25	; 0x20
    1ec2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ec4:	89 a1       	ldd	r24, Y+33	; 0x21
    1ec6:	9a a1       	ldd	r25, Y+34	; 0x22
    1ec8:	01 97       	sbiw	r24, 0x01	; 1
    1eca:	9a a3       	std	Y+34, r25	; 0x22
    1ecc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ece:	89 a1       	ldd	r24, Y+33	; 0x21
    1ed0:	9a a1       	ldd	r25, Y+34	; 0x22
    1ed2:	00 97       	sbiw	r24, 0x00	; 0
    1ed4:	69 f7       	brne	.-38     	; 0x1eb0 <APP_vCalculatorLCD+0x7a8>
    1ed6:	14 c0       	rjmp	.+40     	; 0x1f00 <APP_vCalculatorLCD+0x7f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ed8:	6b a1       	ldd	r22, Y+35	; 0x23
    1eda:	7c a1       	ldd	r23, Y+36	; 0x24
    1edc:	8d a1       	ldd	r24, Y+37	; 0x25
    1ede:	9e a1       	ldd	r25, Y+38	; 0x26
    1ee0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ee4:	dc 01       	movw	r26, r24
    1ee6:	cb 01       	movw	r24, r22
    1ee8:	9a a3       	std	Y+34, r25	; 0x22
    1eea:	89 a3       	std	Y+33, r24	; 0x21
    1eec:	89 a1       	ldd	r24, Y+33	; 0x21
    1eee:	9a a1       	ldd	r25, Y+34	; 0x22
    1ef0:	9e 8f       	std	Y+30, r25	; 0x1e
    1ef2:	8d 8f       	std	Y+29, r24	; 0x1d
    1ef4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ef6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ef8:	01 97       	sbiw	r24, 0x01	; 1
    1efa:	f1 f7       	brne	.-4      	; 0x1ef8 <APP_vCalculatorLCD+0x7f0>
    1efc:	9e 8f       	std	Y+30, r25	; 0x1e
    1efe:	8d 8f       	std	Y+29, r24	; 0x1d
			break;
		}
	}
	_delay_ms(50);
	KAYPAD_vInit();
    1f00:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <KAYPAD_vInit>
	while(1){
		Loc_u8Symbol2=KAYPAD_u8GetKey();
    1f04:	0e 94 50 1f 	call	0x3ea0	; 0x3ea0 <KAYPAD_u8GetKey>
    1f08:	fe 01       	movw	r30, r28
    1f0a:	ee 58       	subi	r30, 0x8E	; 142
    1f0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0e:	80 83       	st	Z, r24
    1f10:	80 e0       	ldi	r24, 0x00	; 0
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	a8 e4       	ldi	r26, 0x48	; 72
    1f16:	b2 e4       	ldi	r27, 0x42	; 66
    1f18:	89 8f       	std	Y+25, r24	; 0x19
    1f1a:	9a 8f       	std	Y+26, r25	; 0x1a
    1f1c:	ab 8f       	std	Y+27, r26	; 0x1b
    1f1e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f20:	69 8d       	ldd	r22, Y+25	; 0x19
    1f22:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f24:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f26:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f28:	20 e0       	ldi	r18, 0x00	; 0
    1f2a:	30 e0       	ldi	r19, 0x00	; 0
    1f2c:	4a e7       	ldi	r20, 0x7A	; 122
    1f2e:	55 e4       	ldi	r21, 0x45	; 69
    1f30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f34:	dc 01       	movw	r26, r24
    1f36:	cb 01       	movw	r24, r22
    1f38:	8d 8b       	std	Y+21, r24	; 0x15
    1f3a:	9e 8b       	std	Y+22, r25	; 0x16
    1f3c:	af 8b       	std	Y+23, r26	; 0x17
    1f3e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f40:	6d 89       	ldd	r22, Y+21	; 0x15
    1f42:	7e 89       	ldd	r23, Y+22	; 0x16
    1f44:	8f 89       	ldd	r24, Y+23	; 0x17
    1f46:	98 8d       	ldd	r25, Y+24	; 0x18
    1f48:	20 e0       	ldi	r18, 0x00	; 0
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	40 e8       	ldi	r20, 0x80	; 128
    1f4e:	5f e3       	ldi	r21, 0x3F	; 63
    1f50:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f54:	88 23       	and	r24, r24
    1f56:	2c f4       	brge	.+10     	; 0x1f62 <APP_vCalculatorLCD+0x85a>
		__ticks = 1;
    1f58:	81 e0       	ldi	r24, 0x01	; 1
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	9c 8b       	std	Y+20, r25	; 0x14
    1f5e:	8b 8b       	std	Y+19, r24	; 0x13
    1f60:	3f c0       	rjmp	.+126    	; 0x1fe0 <APP_vCalculatorLCD+0x8d8>
	else if (__tmp > 65535)
    1f62:	6d 89       	ldd	r22, Y+21	; 0x15
    1f64:	7e 89       	ldd	r23, Y+22	; 0x16
    1f66:	8f 89       	ldd	r24, Y+23	; 0x17
    1f68:	98 8d       	ldd	r25, Y+24	; 0x18
    1f6a:	20 e0       	ldi	r18, 0x00	; 0
    1f6c:	3f ef       	ldi	r19, 0xFF	; 255
    1f6e:	4f e7       	ldi	r20, 0x7F	; 127
    1f70:	57 e4       	ldi	r21, 0x47	; 71
    1f72:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f76:	18 16       	cp	r1, r24
    1f78:	4c f5       	brge	.+82     	; 0x1fcc <APP_vCalculatorLCD+0x8c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f7a:	69 8d       	ldd	r22, Y+25	; 0x19
    1f7c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f7e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f80:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f82:	20 e0       	ldi	r18, 0x00	; 0
    1f84:	30 e0       	ldi	r19, 0x00	; 0
    1f86:	40 e2       	ldi	r20, 0x20	; 32
    1f88:	51 e4       	ldi	r21, 0x41	; 65
    1f8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f8e:	dc 01       	movw	r26, r24
    1f90:	cb 01       	movw	r24, r22
    1f92:	bc 01       	movw	r22, r24
    1f94:	cd 01       	movw	r24, r26
    1f96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f9a:	dc 01       	movw	r26, r24
    1f9c:	cb 01       	movw	r24, r22
    1f9e:	9c 8b       	std	Y+20, r25	; 0x14
    1fa0:	8b 8b       	std	Y+19, r24	; 0x13
    1fa2:	0f c0       	rjmp	.+30     	; 0x1fc2 <APP_vCalculatorLCD+0x8ba>
    1fa4:	80 e9       	ldi	r24, 0x90	; 144
    1fa6:	91 e0       	ldi	r25, 0x01	; 1
    1fa8:	9a 8b       	std	Y+18, r25	; 0x12
    1faa:	89 8b       	std	Y+17, r24	; 0x11
    1fac:	89 89       	ldd	r24, Y+17	; 0x11
    1fae:	9a 89       	ldd	r25, Y+18	; 0x12
    1fb0:	01 97       	sbiw	r24, 0x01	; 1
    1fb2:	f1 f7       	brne	.-4      	; 0x1fb0 <APP_vCalculatorLCD+0x8a8>
    1fb4:	9a 8b       	std	Y+18, r25	; 0x12
    1fb6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fb8:	8b 89       	ldd	r24, Y+19	; 0x13
    1fba:	9c 89       	ldd	r25, Y+20	; 0x14
    1fbc:	01 97       	sbiw	r24, 0x01	; 1
    1fbe:	9c 8b       	std	Y+20, r25	; 0x14
    1fc0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fc2:	8b 89       	ldd	r24, Y+19	; 0x13
    1fc4:	9c 89       	ldd	r25, Y+20	; 0x14
    1fc6:	00 97       	sbiw	r24, 0x00	; 0
    1fc8:	69 f7       	brne	.-38     	; 0x1fa4 <APP_vCalculatorLCD+0x89c>
    1fca:	14 c0       	rjmp	.+40     	; 0x1ff4 <APP_vCalculatorLCD+0x8ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fcc:	6d 89       	ldd	r22, Y+21	; 0x15
    1fce:	7e 89       	ldd	r23, Y+22	; 0x16
    1fd0:	8f 89       	ldd	r24, Y+23	; 0x17
    1fd2:	98 8d       	ldd	r25, Y+24	; 0x18
    1fd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fd8:	dc 01       	movw	r26, r24
    1fda:	cb 01       	movw	r24, r22
    1fdc:	9c 8b       	std	Y+20, r25	; 0x14
    1fde:	8b 8b       	std	Y+19, r24	; 0x13
    1fe0:	8b 89       	ldd	r24, Y+19	; 0x13
    1fe2:	9c 89       	ldd	r25, Y+20	; 0x14
    1fe4:	98 8b       	std	Y+16, r25	; 0x10
    1fe6:	8f 87       	std	Y+15, r24	; 0x0f
    1fe8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fea:	98 89       	ldd	r25, Y+16	; 0x10
    1fec:	01 97       	sbiw	r24, 0x01	; 1
    1fee:	f1 f7       	brne	.-4      	; 0x1fec <APP_vCalculatorLCD+0x8e4>
    1ff0:	98 8b       	std	Y+16, r25	; 0x10
    1ff2:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(50);
		if(Loc_u8Symbol2=='='){
    1ff4:	fe 01       	movw	r30, r28
    1ff6:	ee 58       	subi	r30, 0x8E	; 142
    1ff8:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffa:	80 81       	ld	r24, Z
    1ffc:	8d 33       	cpi	r24, 0x3D	; 61
    1ffe:	09 f0       	breq	.+2      	; 0x2002 <APP_vCalculatorLCD+0x8fa>
    2000:	81 cf       	rjmp	.-254    	; 0x1f04 <APP_vCalculatorLCD+0x7fc>
			LCD_vInitWithOutClear();
    2002:	0e 94 e6 23 	call	0x47cc	; 0x47cc <LCD_vInitWithOutClear>
			LCD_vGoTo(LineOne,3);
    2006:	80 e8       	ldi	r24, 0x80	; 128
    2008:	63 e0       	ldi	r22, 0x03	; 3
    200a:	0e 94 17 27 	call	0x4e2e	; 0x4e2e <LCD_vGoTo>
			LCD_vWriteCharacter(Loc_u8Symbol2);
    200e:	fe 01       	movw	r30, r28
    2010:	ee 58       	subi	r30, 0x8E	; 142
    2012:	ff 4f       	sbci	r31, 0xFF	; 255
    2014:	80 81       	ld	r24, Z
    2016:	0e 94 ed 25 	call	0x4bda	; 0x4bda <LCD_vWriteCharacter>
			break;
		}
	}
	if(Loc_u8Symbol1=='+'){
    201a:	fe 01       	movw	r30, r28
    201c:	ed 58       	subi	r30, 0x8D	; 141
    201e:	ff 4f       	sbci	r31, 0xFF	; 255
    2020:	80 81       	ld	r24, Z
    2022:	8b 32       	cpi	r24, 0x2B	; 43
    2024:	79 f4       	brne	.+30     	; 0x2044 <APP_vCalculatorLCD+0x93c>
		Loc_u8sum=Loc_u8Num1+Loc_u8Num2;
    2026:	9e 01       	movw	r18, r28
    2028:	2f 58       	subi	r18, 0x8F	; 143
    202a:	3f 4f       	sbci	r19, 0xFF	; 255
    202c:	fe 01       	movw	r30, r28
    202e:	eb 58       	subi	r30, 0x8B	; 139
    2030:	ff 4f       	sbci	r31, 0xFF	; 255
    2032:	de 01       	movw	r26, r28
    2034:	ac 58       	subi	r26, 0x8C	; 140
    2036:	bf 4f       	sbci	r27, 0xFF	; 255
    2038:	90 81       	ld	r25, Z
    203a:	8c 91       	ld	r24, X
    203c:	89 0f       	add	r24, r25
    203e:	f9 01       	movw	r30, r18
    2040:	80 83       	st	Z, r24
    2042:	5c c0       	rjmp	.+184    	; 0x20fc <APP_vCalculatorLCD+0x9f4>
	}
	else if(Loc_u8Symbol1=='-'){
    2044:	fe 01       	movw	r30, r28
    2046:	ed 58       	subi	r30, 0x8D	; 141
    2048:	ff 4f       	sbci	r31, 0xFF	; 255
    204a:	80 81       	ld	r24, Z
    204c:	8d 32       	cpi	r24, 0x2D	; 45
    204e:	89 f4       	brne	.+34     	; 0x2072 <APP_vCalculatorLCD+0x96a>
		Loc_u8sum=Loc_u8Num1-Loc_u8Num2;
    2050:	9e 01       	movw	r18, r28
    2052:	2f 58       	subi	r18, 0x8F	; 143
    2054:	3f 4f       	sbci	r19, 0xFF	; 255
    2056:	fe 01       	movw	r30, r28
    2058:	eb 58       	subi	r30, 0x8B	; 139
    205a:	ff 4f       	sbci	r31, 0xFF	; 255
    205c:	de 01       	movw	r26, r28
    205e:	ac 58       	subi	r26, 0x8C	; 140
    2060:	bf 4f       	sbci	r27, 0xFF	; 255
    2062:	90 81       	ld	r25, Z
    2064:	8c 91       	ld	r24, X
    2066:	f9 2f       	mov	r31, r25
    2068:	f8 1b       	sub	r31, r24
    206a:	8f 2f       	mov	r24, r31
    206c:	f9 01       	movw	r30, r18
    206e:	80 83       	st	Z, r24
    2070:	45 c0       	rjmp	.+138    	; 0x20fc <APP_vCalculatorLCD+0x9f4>
	}
	else if(Loc_u8Symbol1=='/'){
    2072:	fe 01       	movw	r30, r28
    2074:	ed 58       	subi	r30, 0x8D	; 141
    2076:	ff 4f       	sbci	r31, 0xFF	; 255
    2078:	80 81       	ld	r24, Z
    207a:	8f 32       	cpi	r24, 0x2F	; 47
    207c:	89 f4       	brne	.+34     	; 0x20a0 <APP_vCalculatorLCD+0x998>
		Loc_u8sum=Loc_u8Num1/Loc_u8Num2;
    207e:	9e 01       	movw	r18, r28
    2080:	2f 58       	subi	r18, 0x8F	; 143
    2082:	3f 4f       	sbci	r19, 0xFF	; 255
    2084:	fe 01       	movw	r30, r28
    2086:	eb 58       	subi	r30, 0x8B	; 139
    2088:	ff 4f       	sbci	r31, 0xFF	; 255
    208a:	de 01       	movw	r26, r28
    208c:	ac 58       	subi	r26, 0x8C	; 140
    208e:	bf 4f       	sbci	r27, 0xFF	; 255
    2090:	80 81       	ld	r24, Z
    2092:	9c 91       	ld	r25, X
    2094:	69 2f       	mov	r22, r25
    2096:	0e 94 05 34 	call	0x680a	; 0x680a <__udivmodqi4>
    209a:	f9 01       	movw	r30, r18
    209c:	80 83       	st	Z, r24
    209e:	2e c0       	rjmp	.+92     	; 0x20fc <APP_vCalculatorLCD+0x9f4>
	}
	else if(Loc_u8Symbol1=='*'){
    20a0:	fe 01       	movw	r30, r28
    20a2:	ed 58       	subi	r30, 0x8D	; 141
    20a4:	ff 4f       	sbci	r31, 0xFF	; 255
    20a6:	80 81       	ld	r24, Z
    20a8:	8a 32       	cpi	r24, 0x2A	; 42
    20aa:	89 f4       	brne	.+34     	; 0x20ce <APP_vCalculatorLCD+0x9c6>
		Loc_u8sum=Loc_u8Num1*Loc_u8Num2;
    20ac:	9e 01       	movw	r18, r28
    20ae:	2f 58       	subi	r18, 0x8F	; 143
    20b0:	3f 4f       	sbci	r19, 0xFF	; 255
    20b2:	fe 01       	movw	r30, r28
    20b4:	eb 58       	subi	r30, 0x8B	; 139
    20b6:	ff 4f       	sbci	r31, 0xFF	; 255
    20b8:	de 01       	movw	r26, r28
    20ba:	ac 58       	subi	r26, 0x8C	; 140
    20bc:	bf 4f       	sbci	r27, 0xFF	; 255
    20be:	90 81       	ld	r25, Z
    20c0:	8c 91       	ld	r24, X
    20c2:	98 9f       	mul	r25, r24
    20c4:	80 2d       	mov	r24, r0
    20c6:	11 24       	eor	r1, r1
    20c8:	f9 01       	movw	r30, r18
    20ca:	80 83       	st	Z, r24
    20cc:	17 c0       	rjmp	.+46     	; 0x20fc <APP_vCalculatorLCD+0x9f4>
	}
	else if(Loc_u8Symbol1=='%'){
    20ce:	fe 01       	movw	r30, r28
    20d0:	ed 58       	subi	r30, 0x8D	; 141
    20d2:	ff 4f       	sbci	r31, 0xFF	; 255
    20d4:	80 81       	ld	r24, Z
    20d6:	85 32       	cpi	r24, 0x25	; 37
    20d8:	89 f4       	brne	.+34     	; 0x20fc <APP_vCalculatorLCD+0x9f4>
		Loc_u8sum=Loc_u8Num1%Loc_u8Num2;
    20da:	9e 01       	movw	r18, r28
    20dc:	2f 58       	subi	r18, 0x8F	; 143
    20de:	3f 4f       	sbci	r19, 0xFF	; 255
    20e0:	fe 01       	movw	r30, r28
    20e2:	eb 58       	subi	r30, 0x8B	; 139
    20e4:	ff 4f       	sbci	r31, 0xFF	; 255
    20e6:	de 01       	movw	r26, r28
    20e8:	ac 58       	subi	r26, 0x8C	; 140
    20ea:	bf 4f       	sbci	r27, 0xFF	; 255
    20ec:	80 81       	ld	r24, Z
    20ee:	9c 91       	ld	r25, X
    20f0:	69 2f       	mov	r22, r25
    20f2:	0e 94 05 34 	call	0x680a	; 0x680a <__udivmodqi4>
    20f6:	89 2f       	mov	r24, r25
    20f8:	f9 01       	movw	r30, r18
    20fa:	80 83       	st	Z, r24
	}
	else{
		//do nothing
	}
	LCD_vInitWithOutClear();
    20fc:	0e 94 e6 23 	call	0x47cc	; 0x47cc <LCD_vInitWithOutClear>
	LCD_vGoTo(LineOne,4);
    2100:	80 e8       	ldi	r24, 0x80	; 128
    2102:	64 e0       	ldi	r22, 0x04	; 4
    2104:	0e 94 17 27 	call	0x4e2e	; 0x4e2e <LCD_vGoTo>
	u8 arr[3];
	APP_vToString(arr,Loc_u8sum);
    2108:	fe 01       	movw	r30, r28
    210a:	ef 58       	subi	r30, 0x8F	; 143
    210c:	ff 4f       	sbci	r31, 0xFF	; 255
    210e:	80 81       	ld	r24, Z
    2110:	28 2f       	mov	r18, r24
    2112:	30 e0       	ldi	r19, 0x00	; 0
    2114:	ce 01       	movw	r24, r28
    2116:	8a 58       	subi	r24, 0x8A	; 138
    2118:	9f 4f       	sbci	r25, 0xFF	; 255
    211a:	b9 01       	movw	r22, r18
    211c:	0e 94 1e 0b 	call	0x163c	; 0x163c <APP_vToString>
	LCD_vWriteString(arr);
    2120:	ce 01       	movw	r24, r28
    2122:	8a 58       	subi	r24, 0x8A	; 138
    2124:	9f 4f       	sbci	r25, 0xFF	; 255
    2126:	0e 94 b0 27 	call	0x4f60	; 0x4f60 <LCD_vWriteString>
    212a:	80 e0       	ldi	r24, 0x00	; 0
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	a8 ec       	ldi	r26, 0xC8	; 200
    2130:	b2 e4       	ldi	r27, 0x42	; 66
    2132:	8b 87       	std	Y+11, r24	; 0x0b
    2134:	9c 87       	std	Y+12, r25	; 0x0c
    2136:	ad 87       	std	Y+13, r26	; 0x0d
    2138:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    213a:	6b 85       	ldd	r22, Y+11	; 0x0b
    213c:	7c 85       	ldd	r23, Y+12	; 0x0c
    213e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2140:	9e 85       	ldd	r25, Y+14	; 0x0e
    2142:	20 e0       	ldi	r18, 0x00	; 0
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	4a e7       	ldi	r20, 0x7A	; 122
    2148:	55 e4       	ldi	r21, 0x45	; 69
    214a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    214e:	dc 01       	movw	r26, r24
    2150:	cb 01       	movw	r24, r22
    2152:	8f 83       	std	Y+7, r24	; 0x07
    2154:	98 87       	std	Y+8, r25	; 0x08
    2156:	a9 87       	std	Y+9, r26	; 0x09
    2158:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    215a:	6f 81       	ldd	r22, Y+7	; 0x07
    215c:	78 85       	ldd	r23, Y+8	; 0x08
    215e:	89 85       	ldd	r24, Y+9	; 0x09
    2160:	9a 85       	ldd	r25, Y+10	; 0x0a
    2162:	20 e0       	ldi	r18, 0x00	; 0
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	40 e8       	ldi	r20, 0x80	; 128
    2168:	5f e3       	ldi	r21, 0x3F	; 63
    216a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    216e:	88 23       	and	r24, r24
    2170:	2c f4       	brge	.+10     	; 0x217c <APP_vCalculatorLCD+0xa74>
		__ticks = 1;
    2172:	81 e0       	ldi	r24, 0x01	; 1
    2174:	90 e0       	ldi	r25, 0x00	; 0
    2176:	9e 83       	std	Y+6, r25	; 0x06
    2178:	8d 83       	std	Y+5, r24	; 0x05
    217a:	3f c0       	rjmp	.+126    	; 0x21fa <APP_vCalculatorLCD+0xaf2>
	else if (__tmp > 65535)
    217c:	6f 81       	ldd	r22, Y+7	; 0x07
    217e:	78 85       	ldd	r23, Y+8	; 0x08
    2180:	89 85       	ldd	r24, Y+9	; 0x09
    2182:	9a 85       	ldd	r25, Y+10	; 0x0a
    2184:	20 e0       	ldi	r18, 0x00	; 0
    2186:	3f ef       	ldi	r19, 0xFF	; 255
    2188:	4f e7       	ldi	r20, 0x7F	; 127
    218a:	57 e4       	ldi	r21, 0x47	; 71
    218c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2190:	18 16       	cp	r1, r24
    2192:	4c f5       	brge	.+82     	; 0x21e6 <APP_vCalculatorLCD+0xade>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2194:	6b 85       	ldd	r22, Y+11	; 0x0b
    2196:	7c 85       	ldd	r23, Y+12	; 0x0c
    2198:	8d 85       	ldd	r24, Y+13	; 0x0d
    219a:	9e 85       	ldd	r25, Y+14	; 0x0e
    219c:	20 e0       	ldi	r18, 0x00	; 0
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	40 e2       	ldi	r20, 0x20	; 32
    21a2:	51 e4       	ldi	r21, 0x41	; 65
    21a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a8:	dc 01       	movw	r26, r24
    21aa:	cb 01       	movw	r24, r22
    21ac:	bc 01       	movw	r22, r24
    21ae:	cd 01       	movw	r24, r26
    21b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21b4:	dc 01       	movw	r26, r24
    21b6:	cb 01       	movw	r24, r22
    21b8:	9e 83       	std	Y+6, r25	; 0x06
    21ba:	8d 83       	std	Y+5, r24	; 0x05
    21bc:	0f c0       	rjmp	.+30     	; 0x21dc <APP_vCalculatorLCD+0xad4>
    21be:	80 e9       	ldi	r24, 0x90	; 144
    21c0:	91 e0       	ldi	r25, 0x01	; 1
    21c2:	9c 83       	std	Y+4, r25	; 0x04
    21c4:	8b 83       	std	Y+3, r24	; 0x03
    21c6:	8b 81       	ldd	r24, Y+3	; 0x03
    21c8:	9c 81       	ldd	r25, Y+4	; 0x04
    21ca:	01 97       	sbiw	r24, 0x01	; 1
    21cc:	f1 f7       	brne	.-4      	; 0x21ca <APP_vCalculatorLCD+0xac2>
    21ce:	9c 83       	std	Y+4, r25	; 0x04
    21d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21d2:	8d 81       	ldd	r24, Y+5	; 0x05
    21d4:	9e 81       	ldd	r25, Y+6	; 0x06
    21d6:	01 97       	sbiw	r24, 0x01	; 1
    21d8:	9e 83       	std	Y+6, r25	; 0x06
    21da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21dc:	8d 81       	ldd	r24, Y+5	; 0x05
    21de:	9e 81       	ldd	r25, Y+6	; 0x06
    21e0:	00 97       	sbiw	r24, 0x00	; 0
    21e2:	69 f7       	brne	.-38     	; 0x21be <APP_vCalculatorLCD+0xab6>
    21e4:	14 c0       	rjmp	.+40     	; 0x220e <APP_vCalculatorLCD+0xb06>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21e6:	6f 81       	ldd	r22, Y+7	; 0x07
    21e8:	78 85       	ldd	r23, Y+8	; 0x08
    21ea:	89 85       	ldd	r24, Y+9	; 0x09
    21ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21f2:	dc 01       	movw	r26, r24
    21f4:	cb 01       	movw	r24, r22
    21f6:	9e 83       	std	Y+6, r25	; 0x06
    21f8:	8d 83       	std	Y+5, r24	; 0x05
    21fa:	8d 81       	ldd	r24, Y+5	; 0x05
    21fc:	9e 81       	ldd	r25, Y+6	; 0x06
    21fe:	9a 83       	std	Y+2, r25	; 0x02
    2200:	89 83       	std	Y+1, r24	; 0x01
    2202:	89 81       	ldd	r24, Y+1	; 0x01
    2204:	9a 81       	ldd	r25, Y+2	; 0x02
    2206:	01 97       	sbiw	r24, 0x01	; 1
    2208:	f1 f7       	brne	.-4      	; 0x2206 <APP_vCalculatorLCD+0xafe>
    220a:	9a 83       	std	Y+2, r25	; 0x02
    220c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
}
    220e:	c8 58       	subi	r28, 0x88	; 136
    2210:	df 4f       	sbci	r29, 0xFF	; 255
    2212:	0f b6       	in	r0, 0x3f	; 63
    2214:	f8 94       	cli
    2216:	de bf       	out	0x3e, r29	; 62
    2218:	0f be       	out	0x3f, r0	; 63
    221a:	cd bf       	out	0x3d, r28	; 61
    221c:	cf 91       	pop	r28
    221e:	df 91       	pop	r29
    2220:	1f 91       	pop	r17
    2222:	0f 91       	pop	r16
    2224:	08 95       	ret

00002226 <APP_vLocker>:
//-----------------
void APP_vLocker(u8 *Loc_CorrectUserName4,u8 *Loc_CorrectPassword3){
    2226:	0f 93       	push	r16
    2228:	1f 93       	push	r17
    222a:	df 93       	push	r29
    222c:	cf 93       	push	r28
    222e:	cd b7       	in	r28, 0x3d	; 61
    2230:	de b7       	in	r29, 0x3e	; 62
    2232:	c6 5b       	subi	r28, 0xB6	; 182
    2234:	d0 40       	sbci	r29, 0x00	; 0
    2236:	0f b6       	in	r0, 0x3f	; 63
    2238:	f8 94       	cli
    223a:	de bf       	out	0x3e, r29	; 62
    223c:	0f be       	out	0x3f, r0	; 63
    223e:	cd bf       	out	0x3d, r28	; 61
    2240:	fe 01       	movw	r30, r28
    2242:	eb 56       	subi	r30, 0x6B	; 107
    2244:	ff 4f       	sbci	r31, 0xFF	; 255
    2246:	91 83       	std	Z+1, r25	; 0x01
    2248:	80 83       	st	Z, r24
    224a:	fe 01       	movw	r30, r28
    224c:	e9 56       	subi	r30, 0x69	; 105
    224e:	ff 4f       	sbci	r31, 0xFF	; 255
    2250:	71 83       	std	Z+1, r23	; 0x01
    2252:	60 83       	st	Z, r22
	u8 i;
	u8 user[4],pass[3];
	while(1){
		LCD_vInit();
    2254:	0e 94 51 21 	call	0x42a2	; 0x42a2 <LCD_vInit>
		u8 User[]="Enter UserNam";
    2258:	ce 01       	movw	r24, r28
    225a:	80 5b       	subi	r24, 0xB0	; 176
    225c:	9f 4f       	sbci	r25, 0xFF	; 255
    225e:	c7 56       	subi	r28, 0x67	; 103
    2260:	df 4f       	sbci	r29, 0xFF	; 255
    2262:	99 83       	std	Y+1, r25	; 0x01
    2264:	88 83       	st	Y, r24
    2266:	c9 59       	subi	r28, 0x99	; 153
    2268:	d0 40       	sbci	r29, 0x00	; 0
    226a:	80 e6       	ldi	r24, 0x60	; 96
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	c5 56       	subi	r28, 0x65	; 101
    2270:	df 4f       	sbci	r29, 0xFF	; 255
    2272:	99 83       	std	Y+1, r25	; 0x01
    2274:	88 83       	st	Y, r24
    2276:	cb 59       	subi	r28, 0x9B	; 155
    2278:	d0 40       	sbci	r29, 0x00	; 0
    227a:	9e e0       	ldi	r25, 0x0E	; 14
    227c:	c3 56       	subi	r28, 0x63	; 99
    227e:	df 4f       	sbci	r29, 0xFF	; 255
    2280:	98 83       	st	Y, r25
    2282:	cd 59       	subi	r28, 0x9D	; 157
    2284:	d0 40       	sbci	r29, 0x00	; 0
    2286:	c5 56       	subi	r28, 0x65	; 101
    2288:	df 4f       	sbci	r29, 0xFF	; 255
    228a:	e8 81       	ld	r30, Y
    228c:	f9 81       	ldd	r31, Y+1	; 0x01
    228e:	cb 59       	subi	r28, 0x9B	; 155
    2290:	d0 40       	sbci	r29, 0x00	; 0
    2292:	00 80       	ld	r0, Z
    2294:	c5 56       	subi	r28, 0x65	; 101
    2296:	df 4f       	sbci	r29, 0xFF	; 255
    2298:	88 81       	ld	r24, Y
    229a:	99 81       	ldd	r25, Y+1	; 0x01
    229c:	cb 59       	subi	r28, 0x9B	; 155
    229e:	d0 40       	sbci	r29, 0x00	; 0
    22a0:	01 96       	adiw	r24, 0x01	; 1
    22a2:	c5 56       	subi	r28, 0x65	; 101
    22a4:	df 4f       	sbci	r29, 0xFF	; 255
    22a6:	99 83       	std	Y+1, r25	; 0x01
    22a8:	88 83       	st	Y, r24
    22aa:	cb 59       	subi	r28, 0x9B	; 155
    22ac:	d0 40       	sbci	r29, 0x00	; 0
    22ae:	c7 56       	subi	r28, 0x67	; 103
    22b0:	df 4f       	sbci	r29, 0xFF	; 255
    22b2:	e8 81       	ld	r30, Y
    22b4:	f9 81       	ldd	r31, Y+1	; 0x01
    22b6:	c9 59       	subi	r28, 0x99	; 153
    22b8:	d0 40       	sbci	r29, 0x00	; 0
    22ba:	00 82       	st	Z, r0
    22bc:	c7 56       	subi	r28, 0x67	; 103
    22be:	df 4f       	sbci	r29, 0xFF	; 255
    22c0:	88 81       	ld	r24, Y
    22c2:	99 81       	ldd	r25, Y+1	; 0x01
    22c4:	c9 59       	subi	r28, 0x99	; 153
    22c6:	d0 40       	sbci	r29, 0x00	; 0
    22c8:	01 96       	adiw	r24, 0x01	; 1
    22ca:	c7 56       	subi	r28, 0x67	; 103
    22cc:	df 4f       	sbci	r29, 0xFF	; 255
    22ce:	99 83       	std	Y+1, r25	; 0x01
    22d0:	88 83       	st	Y, r24
    22d2:	c9 59       	subi	r28, 0x99	; 153
    22d4:	d0 40       	sbci	r29, 0x00	; 0
    22d6:	c3 56       	subi	r28, 0x63	; 99
    22d8:	df 4f       	sbci	r29, 0xFF	; 255
    22da:	98 81       	ld	r25, Y
    22dc:	cd 59       	subi	r28, 0x9D	; 157
    22de:	d0 40       	sbci	r29, 0x00	; 0
    22e0:	91 50       	subi	r25, 0x01	; 1
    22e2:	c3 56       	subi	r28, 0x63	; 99
    22e4:	df 4f       	sbci	r29, 0xFF	; 255
    22e6:	98 83       	st	Y, r25
    22e8:	cd 59       	subi	r28, 0x9D	; 157
    22ea:	d0 40       	sbci	r29, 0x00	; 0
    22ec:	c3 56       	subi	r28, 0x63	; 99
    22ee:	df 4f       	sbci	r29, 0xFF	; 255
    22f0:	e8 81       	ld	r30, Y
    22f2:	cd 59       	subi	r28, 0x9D	; 157
    22f4:	d0 40       	sbci	r29, 0x00	; 0
    22f6:	ee 23       	and	r30, r30
    22f8:	31 f6       	brne	.-116    	; 0x2286 <APP_vLocker+0x60>
		LCD_vWriteString(User);
    22fa:	ce 01       	movw	r24, r28
    22fc:	80 5b       	subi	r24, 0xB0	; 176
    22fe:	9f 4f       	sbci	r25, 0xFF	; 255
    2300:	0e 94 b0 27 	call	0x4f60	; 0x4f60 <LCD_vWriteString>
		for(i=0;i<4;i++){
    2304:	fe 01       	movw	r30, r28
    2306:	e8 5b       	subi	r30, 0xB8	; 184
    2308:	ff 4f       	sbci	r31, 0xFF	; 255
    230a:	10 82       	st	Z, r1
    230c:	c9 c0       	rjmp	.+402    	; 0x24a0 <APP_vLocker+0x27a>
			KAYPAD_vInit();
    230e:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <KAYPAD_vInit>
			while(1){
				user[i]=KAYPAD_u8GetKey();
    2312:	fe 01       	movw	r30, r28
    2314:	e8 5b       	subi	r30, 0xB8	; 184
    2316:	ff 4f       	sbci	r31, 0xFF	; 255
    2318:	80 81       	ld	r24, Z
    231a:	08 2f       	mov	r16, r24
    231c:	10 e0       	ldi	r17, 0x00	; 0
    231e:	0e 94 50 1f 	call	0x3ea0	; 0x3ea0 <KAYPAD_u8GetKey>
    2322:	28 2f       	mov	r18, r24
    2324:	ce 01       	movw	r24, r28
    2326:	87 5b       	subi	r24, 0xB7	; 183
    2328:	9f 4f       	sbci	r25, 0xFF	; 255
    232a:	fc 01       	movw	r30, r24
    232c:	e0 0f       	add	r30, r16
    232e:	f1 1f       	adc	r31, r17
    2330:	20 83       	st	Z, r18
    2332:	fe 01       	movw	r30, r28
    2334:	ed 5b       	subi	r30, 0xBD	; 189
    2336:	ff 4f       	sbci	r31, 0xFF	; 255
    2338:	80 e0       	ldi	r24, 0x00	; 0
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	a8 e4       	ldi	r26, 0x48	; 72
    233e:	b2 e4       	ldi	r27, 0x42	; 66
    2340:	80 83       	st	Z, r24
    2342:	91 83       	std	Z+1, r25	; 0x01
    2344:	a2 83       	std	Z+2, r26	; 0x02
    2346:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2348:	8e 01       	movw	r16, r28
    234a:	01 5c       	subi	r16, 0xC1	; 193
    234c:	1f 4f       	sbci	r17, 0xFF	; 255
    234e:	fe 01       	movw	r30, r28
    2350:	ed 5b       	subi	r30, 0xBD	; 189
    2352:	ff 4f       	sbci	r31, 0xFF	; 255
    2354:	60 81       	ld	r22, Z
    2356:	71 81       	ldd	r23, Z+1	; 0x01
    2358:	82 81       	ldd	r24, Z+2	; 0x02
    235a:	93 81       	ldd	r25, Z+3	; 0x03
    235c:	20 e0       	ldi	r18, 0x00	; 0
    235e:	30 e0       	ldi	r19, 0x00	; 0
    2360:	4a e7       	ldi	r20, 0x7A	; 122
    2362:	55 e4       	ldi	r21, 0x45	; 69
    2364:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2368:	dc 01       	movw	r26, r24
    236a:	cb 01       	movw	r24, r22
    236c:	f8 01       	movw	r30, r16
    236e:	80 83       	st	Z, r24
    2370:	91 83       	std	Z+1, r25	; 0x01
    2372:	a2 83       	std	Z+2, r26	; 0x02
    2374:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2376:	fe 01       	movw	r30, r28
    2378:	ff 96       	adiw	r30, 0x3f	; 63
    237a:	60 81       	ld	r22, Z
    237c:	71 81       	ldd	r23, Z+1	; 0x01
    237e:	82 81       	ldd	r24, Z+2	; 0x02
    2380:	93 81       	ldd	r25, Z+3	; 0x03
    2382:	20 e0       	ldi	r18, 0x00	; 0
    2384:	30 e0       	ldi	r19, 0x00	; 0
    2386:	40 e8       	ldi	r20, 0x80	; 128
    2388:	5f e3       	ldi	r21, 0x3F	; 63
    238a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    238e:	88 23       	and	r24, r24
    2390:	2c f4       	brge	.+10     	; 0x239c <APP_vLocker+0x176>
		__ticks = 1;
    2392:	81 e0       	ldi	r24, 0x01	; 1
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	9e af       	std	Y+62, r25	; 0x3e
    2398:	8d af       	std	Y+61, r24	; 0x3d
    239a:	46 c0       	rjmp	.+140    	; 0x2428 <APP_vLocker+0x202>
	else if (__tmp > 65535)
    239c:	fe 01       	movw	r30, r28
    239e:	ff 96       	adiw	r30, 0x3f	; 63
    23a0:	60 81       	ld	r22, Z
    23a2:	71 81       	ldd	r23, Z+1	; 0x01
    23a4:	82 81       	ldd	r24, Z+2	; 0x02
    23a6:	93 81       	ldd	r25, Z+3	; 0x03
    23a8:	20 e0       	ldi	r18, 0x00	; 0
    23aa:	3f ef       	ldi	r19, 0xFF	; 255
    23ac:	4f e7       	ldi	r20, 0x7F	; 127
    23ae:	57 e4       	ldi	r21, 0x47	; 71
    23b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23b4:	18 16       	cp	r1, r24
    23b6:	64 f5       	brge	.+88     	; 0x2410 <APP_vLocker+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23b8:	fe 01       	movw	r30, r28
    23ba:	ed 5b       	subi	r30, 0xBD	; 189
    23bc:	ff 4f       	sbci	r31, 0xFF	; 255
    23be:	60 81       	ld	r22, Z
    23c0:	71 81       	ldd	r23, Z+1	; 0x01
    23c2:	82 81       	ldd	r24, Z+2	; 0x02
    23c4:	93 81       	ldd	r25, Z+3	; 0x03
    23c6:	20 e0       	ldi	r18, 0x00	; 0
    23c8:	30 e0       	ldi	r19, 0x00	; 0
    23ca:	40 e2       	ldi	r20, 0x20	; 32
    23cc:	51 e4       	ldi	r21, 0x41	; 65
    23ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23d2:	dc 01       	movw	r26, r24
    23d4:	cb 01       	movw	r24, r22
    23d6:	bc 01       	movw	r22, r24
    23d8:	cd 01       	movw	r24, r26
    23da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23de:	dc 01       	movw	r26, r24
    23e0:	cb 01       	movw	r24, r22
    23e2:	9e af       	std	Y+62, r25	; 0x3e
    23e4:	8d af       	std	Y+61, r24	; 0x3d
    23e6:	0f c0       	rjmp	.+30     	; 0x2406 <APP_vLocker+0x1e0>
    23e8:	80 e9       	ldi	r24, 0x90	; 144
    23ea:	91 e0       	ldi	r25, 0x01	; 1
    23ec:	9c af       	std	Y+60, r25	; 0x3c
    23ee:	8b af       	std	Y+59, r24	; 0x3b
    23f0:	8b ad       	ldd	r24, Y+59	; 0x3b
    23f2:	9c ad       	ldd	r25, Y+60	; 0x3c
    23f4:	01 97       	sbiw	r24, 0x01	; 1
    23f6:	f1 f7       	brne	.-4      	; 0x23f4 <APP_vLocker+0x1ce>
    23f8:	9c af       	std	Y+60, r25	; 0x3c
    23fa:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23fc:	8d ad       	ldd	r24, Y+61	; 0x3d
    23fe:	9e ad       	ldd	r25, Y+62	; 0x3e
    2400:	01 97       	sbiw	r24, 0x01	; 1
    2402:	9e af       	std	Y+62, r25	; 0x3e
    2404:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2406:	8d ad       	ldd	r24, Y+61	; 0x3d
    2408:	9e ad       	ldd	r25, Y+62	; 0x3e
    240a:	00 97       	sbiw	r24, 0x00	; 0
    240c:	69 f7       	brne	.-38     	; 0x23e8 <APP_vLocker+0x1c2>
    240e:	16 c0       	rjmp	.+44     	; 0x243c <APP_vLocker+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2410:	fe 01       	movw	r30, r28
    2412:	ff 96       	adiw	r30, 0x3f	; 63
    2414:	60 81       	ld	r22, Z
    2416:	71 81       	ldd	r23, Z+1	; 0x01
    2418:	82 81       	ldd	r24, Z+2	; 0x02
    241a:	93 81       	ldd	r25, Z+3	; 0x03
    241c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2420:	dc 01       	movw	r26, r24
    2422:	cb 01       	movw	r24, r22
    2424:	9e af       	std	Y+62, r25	; 0x3e
    2426:	8d af       	std	Y+61, r24	; 0x3d
    2428:	8d ad       	ldd	r24, Y+61	; 0x3d
    242a:	9e ad       	ldd	r25, Y+62	; 0x3e
    242c:	9a af       	std	Y+58, r25	; 0x3a
    242e:	89 af       	std	Y+57, r24	; 0x39
    2430:	89 ad       	ldd	r24, Y+57	; 0x39
    2432:	9a ad       	ldd	r25, Y+58	; 0x3a
    2434:	01 97       	sbiw	r24, 0x01	; 1
    2436:	f1 f7       	brne	.-4      	; 0x2434 <APP_vLocker+0x20e>
    2438:	9a af       	std	Y+58, r25	; 0x3a
    243a:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(50);
				if(user[i]!=0xff){
    243c:	fe 01       	movw	r30, r28
    243e:	e8 5b       	subi	r30, 0xB8	; 184
    2440:	ff 4f       	sbci	r31, 0xFF	; 255
    2442:	80 81       	ld	r24, Z
    2444:	28 2f       	mov	r18, r24
    2446:	30 e0       	ldi	r19, 0x00	; 0
    2448:	ce 01       	movw	r24, r28
    244a:	87 5b       	subi	r24, 0xB7	; 183
    244c:	9f 4f       	sbci	r25, 0xFF	; 255
    244e:	fc 01       	movw	r30, r24
    2450:	e2 0f       	add	r30, r18
    2452:	f3 1f       	adc	r31, r19
    2454:	80 81       	ld	r24, Z
    2456:	8f 3f       	cpi	r24, 0xFF	; 255
    2458:	09 f4       	brne	.+2      	; 0x245c <APP_vLocker+0x236>
    245a:	5b cf       	rjmp	.-330    	; 0x2312 <APP_vLocker+0xec>
					LCD_vInitWithOutClear();
    245c:	0e 94 e6 23 	call	0x47cc	; 0x47cc <LCD_vInitWithOutClear>
					LCD_vGoTo(LineTwo,i);
    2460:	fe 01       	movw	r30, r28
    2462:	e8 5b       	subi	r30, 0xB8	; 184
    2464:	ff 4f       	sbci	r31, 0xFF	; 255
    2466:	80 ec       	ldi	r24, 0xC0	; 192
    2468:	60 81       	ld	r22, Z
    246a:	0e 94 17 27 	call	0x4e2e	; 0x4e2e <LCD_vGoTo>
					LCD_vWriteCharacter((user[i])+48);
    246e:	fe 01       	movw	r30, r28
    2470:	e8 5b       	subi	r30, 0xB8	; 184
    2472:	ff 4f       	sbci	r31, 0xFF	; 255
    2474:	80 81       	ld	r24, Z
    2476:	28 2f       	mov	r18, r24
    2478:	30 e0       	ldi	r19, 0x00	; 0
    247a:	ce 01       	movw	r24, r28
    247c:	87 5b       	subi	r24, 0xB7	; 183
    247e:	9f 4f       	sbci	r25, 0xFF	; 255
    2480:	fc 01       	movw	r30, r24
    2482:	e2 0f       	add	r30, r18
    2484:	f3 1f       	adc	r31, r19
    2486:	80 81       	ld	r24, Z
    2488:	80 5d       	subi	r24, 0xD0	; 208
    248a:	0e 94 ed 25 	call	0x4bda	; 0x4bda <LCD_vWriteCharacter>
	u8 user[4],pass[3];
	while(1){
		LCD_vInit();
		u8 User[]="Enter UserNam";
		LCD_vWriteString(User);
		for(i=0;i<4;i++){
    248e:	de 01       	movw	r26, r28
    2490:	a8 5b       	subi	r26, 0xB8	; 184
    2492:	bf 4f       	sbci	r27, 0xFF	; 255
    2494:	fe 01       	movw	r30, r28
    2496:	e8 5b       	subi	r30, 0xB8	; 184
    2498:	ff 4f       	sbci	r31, 0xFF	; 255
    249a:	80 81       	ld	r24, Z
    249c:	8f 5f       	subi	r24, 0xFF	; 255
    249e:	8c 93       	st	X, r24
    24a0:	fe 01       	movw	r30, r28
    24a2:	e8 5b       	subi	r30, 0xB8	; 184
    24a4:	ff 4f       	sbci	r31, 0xFF	; 255
    24a6:	80 81       	ld	r24, Z
    24a8:	84 30       	cpi	r24, 0x04	; 4
    24aa:	08 f4       	brcc	.+2      	; 0x24ae <APP_vLocker+0x288>
    24ac:	30 cf       	rjmp	.-416    	; 0x230e <APP_vLocker+0xe8>
					break;
				}
			}

		}
		if(APP_u8compareArray(Loc_CorrectUserName4,user,4)==0){
    24ae:	fe 01       	movw	r30, r28
    24b0:	eb 56       	subi	r30, 0x6B	; 107
    24b2:	ff 4f       	sbci	r31, 0xFF	; 255
    24b4:	80 81       	ld	r24, Z
    24b6:	91 81       	ldd	r25, Z+1	; 0x01
    24b8:	9e 01       	movw	r18, r28
    24ba:	27 5b       	subi	r18, 0xB7	; 183
    24bc:	3f 4f       	sbci	r19, 0xFF	; 255
    24be:	b9 01       	movw	r22, r18
    24c0:	44 e0       	ldi	r20, 0x04	; 4
    24c2:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <APP_u8compareArray>
    24c6:	88 23       	and	r24, r24
    24c8:	09 f0       	breq	.+2      	; 0x24cc <APP_vLocker+0x2a6>
    24ca:	cb c0       	rjmp	.+406    	; 0x2662 <APP_vLocker+0x43c>
			u8 Wrong[]="Wrong UserNam";
    24cc:	ce 01       	movw	r24, r28
    24ce:	82 5a       	subi	r24, 0xA2	; 162
    24d0:	9f 4f       	sbci	r25, 0xFF	; 255
    24d2:	c2 56       	subi	r28, 0x62	; 98
    24d4:	df 4f       	sbci	r29, 0xFF	; 255
    24d6:	99 83       	std	Y+1, r25	; 0x01
    24d8:	88 83       	st	Y, r24
    24da:	ce 59       	subi	r28, 0x9E	; 158
    24dc:	d0 40       	sbci	r29, 0x00	; 0
    24de:	8e e6       	ldi	r24, 0x6E	; 110
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	c0 56       	subi	r28, 0x60	; 96
    24e4:	df 4f       	sbci	r29, 0xFF	; 255
    24e6:	99 83       	std	Y+1, r25	; 0x01
    24e8:	88 83       	st	Y, r24
    24ea:	c0 5a       	subi	r28, 0xA0	; 160
    24ec:	d0 40       	sbci	r29, 0x00	; 0
    24ee:	9e e0       	ldi	r25, 0x0E	; 14
    24f0:	ce 55       	subi	r28, 0x5E	; 94
    24f2:	df 4f       	sbci	r29, 0xFF	; 255
    24f4:	98 83       	st	Y, r25
    24f6:	c2 5a       	subi	r28, 0xA2	; 162
    24f8:	d0 40       	sbci	r29, 0x00	; 0
    24fa:	c0 56       	subi	r28, 0x60	; 96
    24fc:	df 4f       	sbci	r29, 0xFF	; 255
    24fe:	e8 81       	ld	r30, Y
    2500:	f9 81       	ldd	r31, Y+1	; 0x01
    2502:	c0 5a       	subi	r28, 0xA0	; 160
    2504:	d0 40       	sbci	r29, 0x00	; 0
    2506:	00 80       	ld	r0, Z
    2508:	c0 56       	subi	r28, 0x60	; 96
    250a:	df 4f       	sbci	r29, 0xFF	; 255
    250c:	88 81       	ld	r24, Y
    250e:	99 81       	ldd	r25, Y+1	; 0x01
    2510:	c0 5a       	subi	r28, 0xA0	; 160
    2512:	d0 40       	sbci	r29, 0x00	; 0
    2514:	01 96       	adiw	r24, 0x01	; 1
    2516:	c0 56       	subi	r28, 0x60	; 96
    2518:	df 4f       	sbci	r29, 0xFF	; 255
    251a:	99 83       	std	Y+1, r25	; 0x01
    251c:	88 83       	st	Y, r24
    251e:	c0 5a       	subi	r28, 0xA0	; 160
    2520:	d0 40       	sbci	r29, 0x00	; 0
    2522:	c2 56       	subi	r28, 0x62	; 98
    2524:	df 4f       	sbci	r29, 0xFF	; 255
    2526:	e8 81       	ld	r30, Y
    2528:	f9 81       	ldd	r31, Y+1	; 0x01
    252a:	ce 59       	subi	r28, 0x9E	; 158
    252c:	d0 40       	sbci	r29, 0x00	; 0
    252e:	00 82       	st	Z, r0
    2530:	c2 56       	subi	r28, 0x62	; 98
    2532:	df 4f       	sbci	r29, 0xFF	; 255
    2534:	88 81       	ld	r24, Y
    2536:	99 81       	ldd	r25, Y+1	; 0x01
    2538:	ce 59       	subi	r28, 0x9E	; 158
    253a:	d0 40       	sbci	r29, 0x00	; 0
    253c:	01 96       	adiw	r24, 0x01	; 1
    253e:	c2 56       	subi	r28, 0x62	; 98
    2540:	df 4f       	sbci	r29, 0xFF	; 255
    2542:	99 83       	std	Y+1, r25	; 0x01
    2544:	88 83       	st	Y, r24
    2546:	ce 59       	subi	r28, 0x9E	; 158
    2548:	d0 40       	sbci	r29, 0x00	; 0
    254a:	ce 55       	subi	r28, 0x5E	; 94
    254c:	df 4f       	sbci	r29, 0xFF	; 255
    254e:	98 81       	ld	r25, Y
    2550:	c2 5a       	subi	r28, 0xA2	; 162
    2552:	d0 40       	sbci	r29, 0x00	; 0
    2554:	91 50       	subi	r25, 0x01	; 1
    2556:	ce 55       	subi	r28, 0x5E	; 94
    2558:	df 4f       	sbci	r29, 0xFF	; 255
    255a:	98 83       	st	Y, r25
    255c:	c2 5a       	subi	r28, 0xA2	; 162
    255e:	d0 40       	sbci	r29, 0x00	; 0
    2560:	ce 55       	subi	r28, 0x5E	; 94
    2562:	df 4f       	sbci	r29, 0xFF	; 255
    2564:	e8 81       	ld	r30, Y
    2566:	c2 5a       	subi	r28, 0xA2	; 162
    2568:	d0 40       	sbci	r29, 0x00	; 0
    256a:	ee 23       	and	r30, r30
    256c:	31 f6       	brne	.-116    	; 0x24fa <APP_vLocker+0x2d4>
			LCD_vInit();
    256e:	0e 94 51 21 	call	0x42a2	; 0x42a2 <LCD_vInit>
			LCD_vWriteString(Wrong);
    2572:	ce 01       	movw	r24, r28
    2574:	82 5a       	subi	r24, 0xA2	; 162
    2576:	9f 4f       	sbci	r25, 0xFF	; 255
    2578:	0e 94 b0 27 	call	0x4f60	; 0x4f60 <LCD_vWriteString>
    257c:	80 e0       	ldi	r24, 0x00	; 0
    257e:	90 e0       	ldi	r25, 0x00	; 0
    2580:	aa e7       	ldi	r26, 0x7A	; 122
    2582:	b3 e4       	ldi	r27, 0x43	; 67
    2584:	8d ab       	std	Y+53, r24	; 0x35
    2586:	9e ab       	std	Y+54, r25	; 0x36
    2588:	af ab       	std	Y+55, r26	; 0x37
    258a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    258c:	6d a9       	ldd	r22, Y+53	; 0x35
    258e:	7e a9       	ldd	r23, Y+54	; 0x36
    2590:	8f a9       	ldd	r24, Y+55	; 0x37
    2592:	98 ad       	ldd	r25, Y+56	; 0x38
    2594:	20 e0       	ldi	r18, 0x00	; 0
    2596:	30 e0       	ldi	r19, 0x00	; 0
    2598:	4a e7       	ldi	r20, 0x7A	; 122
    259a:	55 e4       	ldi	r21, 0x45	; 69
    259c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25a0:	dc 01       	movw	r26, r24
    25a2:	cb 01       	movw	r24, r22
    25a4:	89 ab       	std	Y+49, r24	; 0x31
    25a6:	9a ab       	std	Y+50, r25	; 0x32
    25a8:	ab ab       	std	Y+51, r26	; 0x33
    25aa:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    25ac:	69 a9       	ldd	r22, Y+49	; 0x31
    25ae:	7a a9       	ldd	r23, Y+50	; 0x32
    25b0:	8b a9       	ldd	r24, Y+51	; 0x33
    25b2:	9c a9       	ldd	r25, Y+52	; 0x34
    25b4:	20 e0       	ldi	r18, 0x00	; 0
    25b6:	30 e0       	ldi	r19, 0x00	; 0
    25b8:	40 e8       	ldi	r20, 0x80	; 128
    25ba:	5f e3       	ldi	r21, 0x3F	; 63
    25bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25c0:	88 23       	and	r24, r24
    25c2:	2c f4       	brge	.+10     	; 0x25ce <APP_vLocker+0x3a8>
		__ticks = 1;
    25c4:	81 e0       	ldi	r24, 0x01	; 1
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	98 ab       	std	Y+48, r25	; 0x30
    25ca:	8f a7       	std	Y+47, r24	; 0x2f
    25cc:	3f c0       	rjmp	.+126    	; 0x264c <APP_vLocker+0x426>
	else if (__tmp > 65535)
    25ce:	69 a9       	ldd	r22, Y+49	; 0x31
    25d0:	7a a9       	ldd	r23, Y+50	; 0x32
    25d2:	8b a9       	ldd	r24, Y+51	; 0x33
    25d4:	9c a9       	ldd	r25, Y+52	; 0x34
    25d6:	20 e0       	ldi	r18, 0x00	; 0
    25d8:	3f ef       	ldi	r19, 0xFF	; 255
    25da:	4f e7       	ldi	r20, 0x7F	; 127
    25dc:	57 e4       	ldi	r21, 0x47	; 71
    25de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25e2:	18 16       	cp	r1, r24
    25e4:	4c f5       	brge	.+82     	; 0x2638 <APP_vLocker+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25e6:	6d a9       	ldd	r22, Y+53	; 0x35
    25e8:	7e a9       	ldd	r23, Y+54	; 0x36
    25ea:	8f a9       	ldd	r24, Y+55	; 0x37
    25ec:	98 ad       	ldd	r25, Y+56	; 0x38
    25ee:	20 e0       	ldi	r18, 0x00	; 0
    25f0:	30 e0       	ldi	r19, 0x00	; 0
    25f2:	40 e2       	ldi	r20, 0x20	; 32
    25f4:	51 e4       	ldi	r21, 0x41	; 65
    25f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25fa:	dc 01       	movw	r26, r24
    25fc:	cb 01       	movw	r24, r22
    25fe:	bc 01       	movw	r22, r24
    2600:	cd 01       	movw	r24, r26
    2602:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2606:	dc 01       	movw	r26, r24
    2608:	cb 01       	movw	r24, r22
    260a:	98 ab       	std	Y+48, r25	; 0x30
    260c:	8f a7       	std	Y+47, r24	; 0x2f
    260e:	0f c0       	rjmp	.+30     	; 0x262e <APP_vLocker+0x408>
    2610:	80 e9       	ldi	r24, 0x90	; 144
    2612:	91 e0       	ldi	r25, 0x01	; 1
    2614:	9e a7       	std	Y+46, r25	; 0x2e
    2616:	8d a7       	std	Y+45, r24	; 0x2d
    2618:	8d a5       	ldd	r24, Y+45	; 0x2d
    261a:	9e a5       	ldd	r25, Y+46	; 0x2e
    261c:	01 97       	sbiw	r24, 0x01	; 1
    261e:	f1 f7       	brne	.-4      	; 0x261c <APP_vLocker+0x3f6>
    2620:	9e a7       	std	Y+46, r25	; 0x2e
    2622:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2624:	8f a5       	ldd	r24, Y+47	; 0x2f
    2626:	98 a9       	ldd	r25, Y+48	; 0x30
    2628:	01 97       	sbiw	r24, 0x01	; 1
    262a:	98 ab       	std	Y+48, r25	; 0x30
    262c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    262e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2630:	98 a9       	ldd	r25, Y+48	; 0x30
    2632:	00 97       	sbiw	r24, 0x00	; 0
    2634:	69 f7       	brne	.-38     	; 0x2610 <APP_vLocker+0x3ea>
    2636:	0e ce       	rjmp	.-996    	; 0x2254 <APP_vLocker+0x2e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2638:	69 a9       	ldd	r22, Y+49	; 0x31
    263a:	7a a9       	ldd	r23, Y+50	; 0x32
    263c:	8b a9       	ldd	r24, Y+51	; 0x33
    263e:	9c a9       	ldd	r25, Y+52	; 0x34
    2640:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2644:	dc 01       	movw	r26, r24
    2646:	cb 01       	movw	r24, r22
    2648:	98 ab       	std	Y+48, r25	; 0x30
    264a:	8f a7       	std	Y+47, r24	; 0x2f
    264c:	8f a5       	ldd	r24, Y+47	; 0x2f
    264e:	98 a9       	ldd	r25, Y+48	; 0x30
    2650:	9c a7       	std	Y+44, r25	; 0x2c
    2652:	8b a7       	std	Y+43, r24	; 0x2b
    2654:	8b a5       	ldd	r24, Y+43	; 0x2b
    2656:	9c a5       	ldd	r25, Y+44	; 0x2c
    2658:	01 97       	sbiw	r24, 0x01	; 1
    265a:	f1 f7       	brne	.-4      	; 0x2658 <APP_vLocker+0x432>
    265c:	9c a7       	std	Y+44, r25	; 0x2c
    265e:	8b a7       	std	Y+43, r24	; 0x2b
    2660:	f9 cd       	rjmp	.-1038   	; 0x2254 <APP_vLocker+0x2e>
			_delay_ms(250);
		}
		else if(APP_u8compareArray(Loc_CorrectUserName4,user,4)==1){
    2662:	fe 01       	movw	r30, r28
    2664:	eb 56       	subi	r30, 0x6B	; 107
    2666:	ff 4f       	sbci	r31, 0xFF	; 255
    2668:	80 81       	ld	r24, Z
    266a:	91 81       	ldd	r25, Z+1	; 0x01
    266c:	9e 01       	movw	r18, r28
    266e:	27 5b       	subi	r18, 0xB7	; 183
    2670:	3f 4f       	sbci	r19, 0xFF	; 255
    2672:	b9 01       	movw	r22, r18
    2674:	44 e0       	ldi	r20, 0x04	; 4
    2676:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <APP_u8compareArray>
    267a:	81 30       	cpi	r24, 0x01	; 1
    267c:	09 f0       	breq	.+2      	; 0x2680 <APP_vLocker+0x45a>
    267e:	ea cd       	rjmp	.-1068   	; 0x2254 <APP_vLocker+0x2e>
		else{
			//do nothing
		}
	}
	u8 WrongPassCounter ;
	for(WrongPassCounter=0;WrongPassCounter<3;WrongPassCounter++){
    2680:	fe 01       	movw	r30, r28
    2682:	e9 5b       	subi	r30, 0xB9	; 185
    2684:	ff 4f       	sbci	r31, 0xFF	; 255
    2686:	10 82       	st	Z, r1
    2688:	ce c2       	rjmp	.+1436   	; 0x2c26 <APP_vLocker+0xa00>
		LCD_vInit();
    268a:	0e 94 51 21 	call	0x42a2	; 0x42a2 <LCD_vInit>
		u8 Pass[]="Enter Pass";
    268e:	ce 01       	movw	r24, r28
    2690:	84 59       	subi	r24, 0x94	; 148
    2692:	9f 4f       	sbci	r25, 0xFF	; 255
    2694:	cd 55       	subi	r28, 0x5D	; 93
    2696:	df 4f       	sbci	r29, 0xFF	; 255
    2698:	99 83       	std	Y+1, r25	; 0x01
    269a:	88 83       	st	Y, r24
    269c:	c3 5a       	subi	r28, 0xA3	; 163
    269e:	d0 40       	sbci	r29, 0x00	; 0
    26a0:	8c e7       	ldi	r24, 0x7C	; 124
    26a2:	90 e0       	ldi	r25, 0x00	; 0
    26a4:	cb 55       	subi	r28, 0x5B	; 91
    26a6:	df 4f       	sbci	r29, 0xFF	; 255
    26a8:	99 83       	std	Y+1, r25	; 0x01
    26aa:	88 83       	st	Y, r24
    26ac:	c5 5a       	subi	r28, 0xA5	; 165
    26ae:	d0 40       	sbci	r29, 0x00	; 0
    26b0:	9b e0       	ldi	r25, 0x0B	; 11
    26b2:	c9 55       	subi	r28, 0x59	; 89
    26b4:	df 4f       	sbci	r29, 0xFF	; 255
    26b6:	98 83       	st	Y, r25
    26b8:	c7 5a       	subi	r28, 0xA7	; 167
    26ba:	d0 40       	sbci	r29, 0x00	; 0
    26bc:	cb 55       	subi	r28, 0x5B	; 91
    26be:	df 4f       	sbci	r29, 0xFF	; 255
    26c0:	e8 81       	ld	r30, Y
    26c2:	f9 81       	ldd	r31, Y+1	; 0x01
    26c4:	c5 5a       	subi	r28, 0xA5	; 165
    26c6:	d0 40       	sbci	r29, 0x00	; 0
    26c8:	00 80       	ld	r0, Z
    26ca:	cb 55       	subi	r28, 0x5B	; 91
    26cc:	df 4f       	sbci	r29, 0xFF	; 255
    26ce:	88 81       	ld	r24, Y
    26d0:	99 81       	ldd	r25, Y+1	; 0x01
    26d2:	c5 5a       	subi	r28, 0xA5	; 165
    26d4:	d0 40       	sbci	r29, 0x00	; 0
    26d6:	01 96       	adiw	r24, 0x01	; 1
    26d8:	cb 55       	subi	r28, 0x5B	; 91
    26da:	df 4f       	sbci	r29, 0xFF	; 255
    26dc:	99 83       	std	Y+1, r25	; 0x01
    26de:	88 83       	st	Y, r24
    26e0:	c5 5a       	subi	r28, 0xA5	; 165
    26e2:	d0 40       	sbci	r29, 0x00	; 0
    26e4:	cd 55       	subi	r28, 0x5D	; 93
    26e6:	df 4f       	sbci	r29, 0xFF	; 255
    26e8:	e8 81       	ld	r30, Y
    26ea:	f9 81       	ldd	r31, Y+1	; 0x01
    26ec:	c3 5a       	subi	r28, 0xA3	; 163
    26ee:	d0 40       	sbci	r29, 0x00	; 0
    26f0:	00 82       	st	Z, r0
    26f2:	cd 55       	subi	r28, 0x5D	; 93
    26f4:	df 4f       	sbci	r29, 0xFF	; 255
    26f6:	88 81       	ld	r24, Y
    26f8:	99 81       	ldd	r25, Y+1	; 0x01
    26fa:	c3 5a       	subi	r28, 0xA3	; 163
    26fc:	d0 40       	sbci	r29, 0x00	; 0
    26fe:	01 96       	adiw	r24, 0x01	; 1
    2700:	cd 55       	subi	r28, 0x5D	; 93
    2702:	df 4f       	sbci	r29, 0xFF	; 255
    2704:	99 83       	std	Y+1, r25	; 0x01
    2706:	88 83       	st	Y, r24
    2708:	c3 5a       	subi	r28, 0xA3	; 163
    270a:	d0 40       	sbci	r29, 0x00	; 0
    270c:	c9 55       	subi	r28, 0x59	; 89
    270e:	df 4f       	sbci	r29, 0xFF	; 255
    2710:	98 81       	ld	r25, Y
    2712:	c7 5a       	subi	r28, 0xA7	; 167
    2714:	d0 40       	sbci	r29, 0x00	; 0
    2716:	91 50       	subi	r25, 0x01	; 1
    2718:	c9 55       	subi	r28, 0x59	; 89
    271a:	df 4f       	sbci	r29, 0xFF	; 255
    271c:	98 83       	st	Y, r25
    271e:	c7 5a       	subi	r28, 0xA7	; 167
    2720:	d0 40       	sbci	r29, 0x00	; 0
    2722:	c9 55       	subi	r28, 0x59	; 89
    2724:	df 4f       	sbci	r29, 0xFF	; 255
    2726:	e8 81       	ld	r30, Y
    2728:	c7 5a       	subi	r28, 0xA7	; 167
    272a:	d0 40       	sbci	r29, 0x00	; 0
    272c:	ee 23       	and	r30, r30
    272e:	31 f6       	brne	.-116    	; 0x26bc <APP_vLocker+0x496>
		LCD_vWriteString(Pass);
    2730:	ce 01       	movw	r24, r28
    2732:	84 59       	subi	r24, 0x94	; 148
    2734:	9f 4f       	sbci	r25, 0xFF	; 255
    2736:	0e 94 b0 27 	call	0x4f60	; 0x4f60 <LCD_vWriteString>
		LCD_vGoTo(LineTwo,0);
    273a:	80 ec       	ldi	r24, 0xC0	; 192
    273c:	60 e0       	ldi	r22, 0x00	; 0
    273e:	0e 94 17 27 	call	0x4e2e	; 0x4e2e <LCD_vGoTo>
		for(i=0;i<3;i++){
    2742:	fe 01       	movw	r30, r28
    2744:	e8 5b       	subi	r30, 0xB8	; 184
    2746:	ff 4f       	sbci	r31, 0xFF	; 255
    2748:	10 82       	st	Z, r1
    274a:	a9 c0       	rjmp	.+338    	; 0x289e <APP_vLocker+0x678>
			KAYPAD_vInit();
    274c:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <KAYPAD_vInit>
			while(1){
				pass[i]=KAYPAD_u8GetKey();
    2750:	fe 01       	movw	r30, r28
    2752:	e8 5b       	subi	r30, 0xB8	; 184
    2754:	ff 4f       	sbci	r31, 0xFF	; 255
    2756:	80 81       	ld	r24, Z
    2758:	08 2f       	mov	r16, r24
    275a:	10 e0       	ldi	r17, 0x00	; 0
    275c:	0e 94 50 1f 	call	0x3ea0	; 0x3ea0 <KAYPAD_u8GetKey>
    2760:	28 2f       	mov	r18, r24
    2762:	ce 01       	movw	r24, r28
    2764:	83 5b       	subi	r24, 0xB3	; 179
    2766:	9f 4f       	sbci	r25, 0xFF	; 255
    2768:	fc 01       	movw	r30, r24
    276a:	e0 0f       	add	r30, r16
    276c:	f1 1f       	adc	r31, r17
    276e:	20 83       	st	Z, r18
    2770:	80 e0       	ldi	r24, 0x00	; 0
    2772:	90 e0       	ldi	r25, 0x00	; 0
    2774:	a8 e4       	ldi	r26, 0x48	; 72
    2776:	b2 e4       	ldi	r27, 0x42	; 66
    2778:	8f a3       	std	Y+39, r24	; 0x27
    277a:	98 a7       	std	Y+40, r25	; 0x28
    277c:	a9 a7       	std	Y+41, r26	; 0x29
    277e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2780:	6f a1       	ldd	r22, Y+39	; 0x27
    2782:	78 a5       	ldd	r23, Y+40	; 0x28
    2784:	89 a5       	ldd	r24, Y+41	; 0x29
    2786:	9a a5       	ldd	r25, Y+42	; 0x2a
    2788:	20 e0       	ldi	r18, 0x00	; 0
    278a:	30 e0       	ldi	r19, 0x00	; 0
    278c:	4a e7       	ldi	r20, 0x7A	; 122
    278e:	55 e4       	ldi	r21, 0x45	; 69
    2790:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2794:	dc 01       	movw	r26, r24
    2796:	cb 01       	movw	r24, r22
    2798:	8b a3       	std	Y+35, r24	; 0x23
    279a:	9c a3       	std	Y+36, r25	; 0x24
    279c:	ad a3       	std	Y+37, r26	; 0x25
    279e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    27a0:	6b a1       	ldd	r22, Y+35	; 0x23
    27a2:	7c a1       	ldd	r23, Y+36	; 0x24
    27a4:	8d a1       	ldd	r24, Y+37	; 0x25
    27a6:	9e a1       	ldd	r25, Y+38	; 0x26
    27a8:	20 e0       	ldi	r18, 0x00	; 0
    27aa:	30 e0       	ldi	r19, 0x00	; 0
    27ac:	40 e8       	ldi	r20, 0x80	; 128
    27ae:	5f e3       	ldi	r21, 0x3F	; 63
    27b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27b4:	88 23       	and	r24, r24
    27b6:	2c f4       	brge	.+10     	; 0x27c2 <APP_vLocker+0x59c>
		__ticks = 1;
    27b8:	81 e0       	ldi	r24, 0x01	; 1
    27ba:	90 e0       	ldi	r25, 0x00	; 0
    27bc:	9a a3       	std	Y+34, r25	; 0x22
    27be:	89 a3       	std	Y+33, r24	; 0x21
    27c0:	3f c0       	rjmp	.+126    	; 0x2840 <APP_vLocker+0x61a>
	else if (__tmp > 65535)
    27c2:	6b a1       	ldd	r22, Y+35	; 0x23
    27c4:	7c a1       	ldd	r23, Y+36	; 0x24
    27c6:	8d a1       	ldd	r24, Y+37	; 0x25
    27c8:	9e a1       	ldd	r25, Y+38	; 0x26
    27ca:	20 e0       	ldi	r18, 0x00	; 0
    27cc:	3f ef       	ldi	r19, 0xFF	; 255
    27ce:	4f e7       	ldi	r20, 0x7F	; 127
    27d0:	57 e4       	ldi	r21, 0x47	; 71
    27d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27d6:	18 16       	cp	r1, r24
    27d8:	4c f5       	brge	.+82     	; 0x282c <APP_vLocker+0x606>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27da:	6f a1       	ldd	r22, Y+39	; 0x27
    27dc:	78 a5       	ldd	r23, Y+40	; 0x28
    27de:	89 a5       	ldd	r24, Y+41	; 0x29
    27e0:	9a a5       	ldd	r25, Y+42	; 0x2a
    27e2:	20 e0       	ldi	r18, 0x00	; 0
    27e4:	30 e0       	ldi	r19, 0x00	; 0
    27e6:	40 e2       	ldi	r20, 0x20	; 32
    27e8:	51 e4       	ldi	r21, 0x41	; 65
    27ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ee:	dc 01       	movw	r26, r24
    27f0:	cb 01       	movw	r24, r22
    27f2:	bc 01       	movw	r22, r24
    27f4:	cd 01       	movw	r24, r26
    27f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27fa:	dc 01       	movw	r26, r24
    27fc:	cb 01       	movw	r24, r22
    27fe:	9a a3       	std	Y+34, r25	; 0x22
    2800:	89 a3       	std	Y+33, r24	; 0x21
    2802:	0f c0       	rjmp	.+30     	; 0x2822 <APP_vLocker+0x5fc>
    2804:	80 e9       	ldi	r24, 0x90	; 144
    2806:	91 e0       	ldi	r25, 0x01	; 1
    2808:	98 a3       	std	Y+32, r25	; 0x20
    280a:	8f 8f       	std	Y+31, r24	; 0x1f
    280c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    280e:	98 a1       	ldd	r25, Y+32	; 0x20
    2810:	01 97       	sbiw	r24, 0x01	; 1
    2812:	f1 f7       	brne	.-4      	; 0x2810 <APP_vLocker+0x5ea>
    2814:	98 a3       	std	Y+32, r25	; 0x20
    2816:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2818:	89 a1       	ldd	r24, Y+33	; 0x21
    281a:	9a a1       	ldd	r25, Y+34	; 0x22
    281c:	01 97       	sbiw	r24, 0x01	; 1
    281e:	9a a3       	std	Y+34, r25	; 0x22
    2820:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2822:	89 a1       	ldd	r24, Y+33	; 0x21
    2824:	9a a1       	ldd	r25, Y+34	; 0x22
    2826:	00 97       	sbiw	r24, 0x00	; 0
    2828:	69 f7       	brne	.-38     	; 0x2804 <APP_vLocker+0x5de>
    282a:	14 c0       	rjmp	.+40     	; 0x2854 <APP_vLocker+0x62e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    282c:	6b a1       	ldd	r22, Y+35	; 0x23
    282e:	7c a1       	ldd	r23, Y+36	; 0x24
    2830:	8d a1       	ldd	r24, Y+37	; 0x25
    2832:	9e a1       	ldd	r25, Y+38	; 0x26
    2834:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2838:	dc 01       	movw	r26, r24
    283a:	cb 01       	movw	r24, r22
    283c:	9a a3       	std	Y+34, r25	; 0x22
    283e:	89 a3       	std	Y+33, r24	; 0x21
    2840:	89 a1       	ldd	r24, Y+33	; 0x21
    2842:	9a a1       	ldd	r25, Y+34	; 0x22
    2844:	9e 8f       	std	Y+30, r25	; 0x1e
    2846:	8d 8f       	std	Y+29, r24	; 0x1d
    2848:	8d 8d       	ldd	r24, Y+29	; 0x1d
    284a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    284c:	01 97       	sbiw	r24, 0x01	; 1
    284e:	f1 f7       	brne	.-4      	; 0x284c <APP_vLocker+0x626>
    2850:	9e 8f       	std	Y+30, r25	; 0x1e
    2852:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(50);
				if(pass[i]!=0xff){
    2854:	fe 01       	movw	r30, r28
    2856:	e8 5b       	subi	r30, 0xB8	; 184
    2858:	ff 4f       	sbci	r31, 0xFF	; 255
    285a:	80 81       	ld	r24, Z
    285c:	28 2f       	mov	r18, r24
    285e:	30 e0       	ldi	r19, 0x00	; 0
    2860:	ce 01       	movw	r24, r28
    2862:	83 5b       	subi	r24, 0xB3	; 179
    2864:	9f 4f       	sbci	r25, 0xFF	; 255
    2866:	fc 01       	movw	r30, r24
    2868:	e2 0f       	add	r30, r18
    286a:	f3 1f       	adc	r31, r19
    286c:	80 81       	ld	r24, Z
    286e:	8f 3f       	cpi	r24, 0xFF	; 255
    2870:	09 f4       	brne	.+2      	; 0x2874 <APP_vLocker+0x64e>
    2872:	6e cf       	rjmp	.-292    	; 0x2750 <APP_vLocker+0x52a>
					LCD_vInitWithOutClear();
    2874:	0e 94 e6 23 	call	0x47cc	; 0x47cc <LCD_vInitWithOutClear>
					LCD_vGoTo(LineTwo,i);
    2878:	fe 01       	movw	r30, r28
    287a:	e8 5b       	subi	r30, 0xB8	; 184
    287c:	ff 4f       	sbci	r31, 0xFF	; 255
    287e:	80 ec       	ldi	r24, 0xC0	; 192
    2880:	60 81       	ld	r22, Z
    2882:	0e 94 17 27 	call	0x4e2e	; 0x4e2e <LCD_vGoTo>
					LCD_vWriteCharacter('*');
    2886:	8a e2       	ldi	r24, 0x2A	; 42
    2888:	0e 94 ed 25 	call	0x4bda	; 0x4bda <LCD_vWriteCharacter>
	for(WrongPassCounter=0;WrongPassCounter<3;WrongPassCounter++){
		LCD_vInit();
		u8 Pass[]="Enter Pass";
		LCD_vWriteString(Pass);
		LCD_vGoTo(LineTwo,0);
		for(i=0;i<3;i++){
    288c:	de 01       	movw	r26, r28
    288e:	a8 5b       	subi	r26, 0xB8	; 184
    2890:	bf 4f       	sbci	r27, 0xFF	; 255
    2892:	fe 01       	movw	r30, r28
    2894:	e8 5b       	subi	r30, 0xB8	; 184
    2896:	ff 4f       	sbci	r31, 0xFF	; 255
    2898:	80 81       	ld	r24, Z
    289a:	8f 5f       	subi	r24, 0xFF	; 255
    289c:	8c 93       	st	X, r24
    289e:	fe 01       	movw	r30, r28
    28a0:	e8 5b       	subi	r30, 0xB8	; 184
    28a2:	ff 4f       	sbci	r31, 0xFF	; 255
    28a4:	80 81       	ld	r24, Z
    28a6:	83 30       	cpi	r24, 0x03	; 3
    28a8:	08 f4       	brcc	.+2      	; 0x28ac <APP_vLocker+0x686>
    28aa:	50 cf       	rjmp	.-352    	; 0x274c <APP_vLocker+0x526>
					LCD_vWriteCharacter('*');
					break;
				}
			}
		}
		if(APP_u8compareArray(Loc_CorrectPassword3,pass,3)==0){
    28ac:	fe 01       	movw	r30, r28
    28ae:	e9 56       	subi	r30, 0x69	; 105
    28b0:	ff 4f       	sbci	r31, 0xFF	; 255
    28b2:	80 81       	ld	r24, Z
    28b4:	91 81       	ldd	r25, Z+1	; 0x01
    28b6:	9e 01       	movw	r18, r28
    28b8:	23 5b       	subi	r18, 0xB3	; 179
    28ba:	3f 4f       	sbci	r19, 0xFF	; 255
    28bc:	b9 01       	movw	r22, r18
    28be:	43 e0       	ldi	r20, 0x03	; 3
    28c0:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <APP_u8compareArray>
    28c4:	88 23       	and	r24, r24
    28c6:	09 f0       	breq	.+2      	; 0x28ca <APP_vLocker+0x6a4>
    28c8:	cb c0       	rjmp	.+406    	; 0x2a60 <APP_vLocker+0x83a>
			LCD_vInit();
    28ca:	0e 94 51 21 	call	0x42a2	; 0x42a2 <LCD_vInit>
			u8 Wrong[]="Wrong Pass";
    28ce:	ce 01       	movw	r24, r28
    28d0:	89 58       	subi	r24, 0x89	; 137
    28d2:	9f 4f       	sbci	r25, 0xFF	; 255
    28d4:	c8 55       	subi	r28, 0x58	; 88
    28d6:	df 4f       	sbci	r29, 0xFF	; 255
    28d8:	99 83       	std	Y+1, r25	; 0x01
    28da:	88 83       	st	Y, r24
    28dc:	c8 5a       	subi	r28, 0xA8	; 168
    28de:	d0 40       	sbci	r29, 0x00	; 0
    28e0:	87 e8       	ldi	r24, 0x87	; 135
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	c6 55       	subi	r28, 0x56	; 86
    28e6:	df 4f       	sbci	r29, 0xFF	; 255
    28e8:	99 83       	std	Y+1, r25	; 0x01
    28ea:	88 83       	st	Y, r24
    28ec:	ca 5a       	subi	r28, 0xAA	; 170
    28ee:	d0 40       	sbci	r29, 0x00	; 0
    28f0:	9b e0       	ldi	r25, 0x0B	; 11
    28f2:	c4 55       	subi	r28, 0x54	; 84
    28f4:	df 4f       	sbci	r29, 0xFF	; 255
    28f6:	98 83       	st	Y, r25
    28f8:	cc 5a       	subi	r28, 0xAC	; 172
    28fa:	d0 40       	sbci	r29, 0x00	; 0
    28fc:	c6 55       	subi	r28, 0x56	; 86
    28fe:	df 4f       	sbci	r29, 0xFF	; 255
    2900:	e8 81       	ld	r30, Y
    2902:	f9 81       	ldd	r31, Y+1	; 0x01
    2904:	ca 5a       	subi	r28, 0xAA	; 170
    2906:	d0 40       	sbci	r29, 0x00	; 0
    2908:	00 80       	ld	r0, Z
    290a:	c6 55       	subi	r28, 0x56	; 86
    290c:	df 4f       	sbci	r29, 0xFF	; 255
    290e:	88 81       	ld	r24, Y
    2910:	99 81       	ldd	r25, Y+1	; 0x01
    2912:	ca 5a       	subi	r28, 0xAA	; 170
    2914:	d0 40       	sbci	r29, 0x00	; 0
    2916:	01 96       	adiw	r24, 0x01	; 1
    2918:	c6 55       	subi	r28, 0x56	; 86
    291a:	df 4f       	sbci	r29, 0xFF	; 255
    291c:	99 83       	std	Y+1, r25	; 0x01
    291e:	88 83       	st	Y, r24
    2920:	ca 5a       	subi	r28, 0xAA	; 170
    2922:	d0 40       	sbci	r29, 0x00	; 0
    2924:	c8 55       	subi	r28, 0x58	; 88
    2926:	df 4f       	sbci	r29, 0xFF	; 255
    2928:	e8 81       	ld	r30, Y
    292a:	f9 81       	ldd	r31, Y+1	; 0x01
    292c:	c8 5a       	subi	r28, 0xA8	; 168
    292e:	d0 40       	sbci	r29, 0x00	; 0
    2930:	00 82       	st	Z, r0
    2932:	c8 55       	subi	r28, 0x58	; 88
    2934:	df 4f       	sbci	r29, 0xFF	; 255
    2936:	88 81       	ld	r24, Y
    2938:	99 81       	ldd	r25, Y+1	; 0x01
    293a:	c8 5a       	subi	r28, 0xA8	; 168
    293c:	d0 40       	sbci	r29, 0x00	; 0
    293e:	01 96       	adiw	r24, 0x01	; 1
    2940:	c8 55       	subi	r28, 0x58	; 88
    2942:	df 4f       	sbci	r29, 0xFF	; 255
    2944:	99 83       	std	Y+1, r25	; 0x01
    2946:	88 83       	st	Y, r24
    2948:	c8 5a       	subi	r28, 0xA8	; 168
    294a:	d0 40       	sbci	r29, 0x00	; 0
    294c:	c4 55       	subi	r28, 0x54	; 84
    294e:	df 4f       	sbci	r29, 0xFF	; 255
    2950:	98 81       	ld	r25, Y
    2952:	cc 5a       	subi	r28, 0xAC	; 172
    2954:	d0 40       	sbci	r29, 0x00	; 0
    2956:	91 50       	subi	r25, 0x01	; 1
    2958:	c4 55       	subi	r28, 0x54	; 84
    295a:	df 4f       	sbci	r29, 0xFF	; 255
    295c:	98 83       	st	Y, r25
    295e:	cc 5a       	subi	r28, 0xAC	; 172
    2960:	d0 40       	sbci	r29, 0x00	; 0
    2962:	c4 55       	subi	r28, 0x54	; 84
    2964:	df 4f       	sbci	r29, 0xFF	; 255
    2966:	e8 81       	ld	r30, Y
    2968:	cc 5a       	subi	r28, 0xAC	; 172
    296a:	d0 40       	sbci	r29, 0x00	; 0
    296c:	ee 23       	and	r30, r30
    296e:	31 f6       	brne	.-116    	; 0x28fc <APP_vLocker+0x6d6>
			LCD_vWriteString(Wrong);
    2970:	ce 01       	movw	r24, r28
    2972:	89 58       	subi	r24, 0x89	; 137
    2974:	9f 4f       	sbci	r25, 0xFF	; 255
    2976:	0e 94 b0 27 	call	0x4f60	; 0x4f60 <LCD_vWriteString>
    297a:	80 e0       	ldi	r24, 0x00	; 0
    297c:	90 e0       	ldi	r25, 0x00	; 0
    297e:	aa e7       	ldi	r26, 0x7A	; 122
    2980:	b3 e4       	ldi	r27, 0x43	; 67
    2982:	89 8f       	std	Y+25, r24	; 0x19
    2984:	9a 8f       	std	Y+26, r25	; 0x1a
    2986:	ab 8f       	std	Y+27, r26	; 0x1b
    2988:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    298a:	69 8d       	ldd	r22, Y+25	; 0x19
    298c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    298e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2990:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2992:	20 e0       	ldi	r18, 0x00	; 0
    2994:	30 e0       	ldi	r19, 0x00	; 0
    2996:	4a e7       	ldi	r20, 0x7A	; 122
    2998:	55 e4       	ldi	r21, 0x45	; 69
    299a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    299e:	dc 01       	movw	r26, r24
    29a0:	cb 01       	movw	r24, r22
    29a2:	8d 8b       	std	Y+21, r24	; 0x15
    29a4:	9e 8b       	std	Y+22, r25	; 0x16
    29a6:	af 8b       	std	Y+23, r26	; 0x17
    29a8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    29aa:	6d 89       	ldd	r22, Y+21	; 0x15
    29ac:	7e 89       	ldd	r23, Y+22	; 0x16
    29ae:	8f 89       	ldd	r24, Y+23	; 0x17
    29b0:	98 8d       	ldd	r25, Y+24	; 0x18
    29b2:	20 e0       	ldi	r18, 0x00	; 0
    29b4:	30 e0       	ldi	r19, 0x00	; 0
    29b6:	40 e8       	ldi	r20, 0x80	; 128
    29b8:	5f e3       	ldi	r21, 0x3F	; 63
    29ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29be:	88 23       	and	r24, r24
    29c0:	2c f4       	brge	.+10     	; 0x29cc <APP_vLocker+0x7a6>
		__ticks = 1;
    29c2:	81 e0       	ldi	r24, 0x01	; 1
    29c4:	90 e0       	ldi	r25, 0x00	; 0
    29c6:	9c 8b       	std	Y+20, r25	; 0x14
    29c8:	8b 8b       	std	Y+19, r24	; 0x13
    29ca:	3f c0       	rjmp	.+126    	; 0x2a4a <APP_vLocker+0x824>
	else if (__tmp > 65535)
    29cc:	6d 89       	ldd	r22, Y+21	; 0x15
    29ce:	7e 89       	ldd	r23, Y+22	; 0x16
    29d0:	8f 89       	ldd	r24, Y+23	; 0x17
    29d2:	98 8d       	ldd	r25, Y+24	; 0x18
    29d4:	20 e0       	ldi	r18, 0x00	; 0
    29d6:	3f ef       	ldi	r19, 0xFF	; 255
    29d8:	4f e7       	ldi	r20, 0x7F	; 127
    29da:	57 e4       	ldi	r21, 0x47	; 71
    29dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29e0:	18 16       	cp	r1, r24
    29e2:	4c f5       	brge	.+82     	; 0x2a36 <APP_vLocker+0x810>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29e4:	69 8d       	ldd	r22, Y+25	; 0x19
    29e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29ec:	20 e0       	ldi	r18, 0x00	; 0
    29ee:	30 e0       	ldi	r19, 0x00	; 0
    29f0:	40 e2       	ldi	r20, 0x20	; 32
    29f2:	51 e4       	ldi	r21, 0x41	; 65
    29f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29f8:	dc 01       	movw	r26, r24
    29fa:	cb 01       	movw	r24, r22
    29fc:	bc 01       	movw	r22, r24
    29fe:	cd 01       	movw	r24, r26
    2a00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a04:	dc 01       	movw	r26, r24
    2a06:	cb 01       	movw	r24, r22
    2a08:	9c 8b       	std	Y+20, r25	; 0x14
    2a0a:	8b 8b       	std	Y+19, r24	; 0x13
    2a0c:	0f c0       	rjmp	.+30     	; 0x2a2c <APP_vLocker+0x806>
    2a0e:	80 e9       	ldi	r24, 0x90	; 144
    2a10:	91 e0       	ldi	r25, 0x01	; 1
    2a12:	9a 8b       	std	Y+18, r25	; 0x12
    2a14:	89 8b       	std	Y+17, r24	; 0x11
    2a16:	89 89       	ldd	r24, Y+17	; 0x11
    2a18:	9a 89       	ldd	r25, Y+18	; 0x12
    2a1a:	01 97       	sbiw	r24, 0x01	; 1
    2a1c:	f1 f7       	brne	.-4      	; 0x2a1a <APP_vLocker+0x7f4>
    2a1e:	9a 8b       	std	Y+18, r25	; 0x12
    2a20:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a22:	8b 89       	ldd	r24, Y+19	; 0x13
    2a24:	9c 89       	ldd	r25, Y+20	; 0x14
    2a26:	01 97       	sbiw	r24, 0x01	; 1
    2a28:	9c 8b       	std	Y+20, r25	; 0x14
    2a2a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a2c:	8b 89       	ldd	r24, Y+19	; 0x13
    2a2e:	9c 89       	ldd	r25, Y+20	; 0x14
    2a30:	00 97       	sbiw	r24, 0x00	; 0
    2a32:	69 f7       	brne	.-38     	; 0x2a0e <APP_vLocker+0x7e8>
    2a34:	ef c0       	rjmp	.+478    	; 0x2c14 <APP_vLocker+0x9ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a36:	6d 89       	ldd	r22, Y+21	; 0x15
    2a38:	7e 89       	ldd	r23, Y+22	; 0x16
    2a3a:	8f 89       	ldd	r24, Y+23	; 0x17
    2a3c:	98 8d       	ldd	r25, Y+24	; 0x18
    2a3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a42:	dc 01       	movw	r26, r24
    2a44:	cb 01       	movw	r24, r22
    2a46:	9c 8b       	std	Y+20, r25	; 0x14
    2a48:	8b 8b       	std	Y+19, r24	; 0x13
    2a4a:	8b 89       	ldd	r24, Y+19	; 0x13
    2a4c:	9c 89       	ldd	r25, Y+20	; 0x14
    2a4e:	98 8b       	std	Y+16, r25	; 0x10
    2a50:	8f 87       	std	Y+15, r24	; 0x0f
    2a52:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a54:	98 89       	ldd	r25, Y+16	; 0x10
    2a56:	01 97       	sbiw	r24, 0x01	; 1
    2a58:	f1 f7       	brne	.-4      	; 0x2a56 <APP_vLocker+0x830>
    2a5a:	98 8b       	std	Y+16, r25	; 0x10
    2a5c:	8f 87       	std	Y+15, r24	; 0x0f
    2a5e:	da c0       	rjmp	.+436    	; 0x2c14 <APP_vLocker+0x9ee>
			_delay_ms(250);
		}
		else if(APP_u8compareArray(Loc_CorrectPassword3,pass,3)==1){
    2a60:	fe 01       	movw	r30, r28
    2a62:	e9 56       	subi	r30, 0x69	; 105
    2a64:	ff 4f       	sbci	r31, 0xFF	; 255
    2a66:	80 81       	ld	r24, Z
    2a68:	91 81       	ldd	r25, Z+1	; 0x01
    2a6a:	9e 01       	movw	r18, r28
    2a6c:	23 5b       	subi	r18, 0xB3	; 179
    2a6e:	3f 4f       	sbci	r19, 0xFF	; 255
    2a70:	b9 01       	movw	r22, r18
    2a72:	43 e0       	ldi	r20, 0x03	; 3
    2a74:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <APP_u8compareArray>
    2a78:	81 30       	cpi	r24, 0x01	; 1
    2a7a:	09 f0       	breq	.+2      	; 0x2a7e <APP_vLocker+0x858>
    2a7c:	cb c0       	rjmp	.+406    	; 0x2c14 <APP_vLocker+0x9ee>
			LCD_vInit();
    2a7e:	0e 94 51 21 	call	0x42a2	; 0x42a2 <LCD_vInit>
			u8 Welcome[]="Welcome";
    2a82:	ce 01       	movw	r24, r28
    2a84:	8e 57       	subi	r24, 0x7E	; 126
    2a86:	9f 4f       	sbci	r25, 0xFF	; 255
    2a88:	c3 55       	subi	r28, 0x53	; 83
    2a8a:	df 4f       	sbci	r29, 0xFF	; 255
    2a8c:	99 83       	std	Y+1, r25	; 0x01
    2a8e:	88 83       	st	Y, r24
    2a90:	cd 5a       	subi	r28, 0xAD	; 173
    2a92:	d0 40       	sbci	r29, 0x00	; 0
    2a94:	82 e9       	ldi	r24, 0x92	; 146
    2a96:	90 e0       	ldi	r25, 0x00	; 0
    2a98:	c1 55       	subi	r28, 0x51	; 81
    2a9a:	df 4f       	sbci	r29, 0xFF	; 255
    2a9c:	99 83       	std	Y+1, r25	; 0x01
    2a9e:	88 83       	st	Y, r24
    2aa0:	cf 5a       	subi	r28, 0xAF	; 175
    2aa2:	d0 40       	sbci	r29, 0x00	; 0
    2aa4:	98 e0       	ldi	r25, 0x08	; 8
    2aa6:	cf 54       	subi	r28, 0x4F	; 79
    2aa8:	df 4f       	sbci	r29, 0xFF	; 255
    2aaa:	98 83       	st	Y, r25
    2aac:	c1 5b       	subi	r28, 0xB1	; 177
    2aae:	d0 40       	sbci	r29, 0x00	; 0
    2ab0:	c1 55       	subi	r28, 0x51	; 81
    2ab2:	df 4f       	sbci	r29, 0xFF	; 255
    2ab4:	e8 81       	ld	r30, Y
    2ab6:	f9 81       	ldd	r31, Y+1	; 0x01
    2ab8:	cf 5a       	subi	r28, 0xAF	; 175
    2aba:	d0 40       	sbci	r29, 0x00	; 0
    2abc:	00 80       	ld	r0, Z
    2abe:	c1 55       	subi	r28, 0x51	; 81
    2ac0:	df 4f       	sbci	r29, 0xFF	; 255
    2ac2:	88 81       	ld	r24, Y
    2ac4:	99 81       	ldd	r25, Y+1	; 0x01
    2ac6:	cf 5a       	subi	r28, 0xAF	; 175
    2ac8:	d0 40       	sbci	r29, 0x00	; 0
    2aca:	01 96       	adiw	r24, 0x01	; 1
    2acc:	c1 55       	subi	r28, 0x51	; 81
    2ace:	df 4f       	sbci	r29, 0xFF	; 255
    2ad0:	99 83       	std	Y+1, r25	; 0x01
    2ad2:	88 83       	st	Y, r24
    2ad4:	cf 5a       	subi	r28, 0xAF	; 175
    2ad6:	d0 40       	sbci	r29, 0x00	; 0
    2ad8:	c3 55       	subi	r28, 0x53	; 83
    2ada:	df 4f       	sbci	r29, 0xFF	; 255
    2adc:	e8 81       	ld	r30, Y
    2ade:	f9 81       	ldd	r31, Y+1	; 0x01
    2ae0:	cd 5a       	subi	r28, 0xAD	; 173
    2ae2:	d0 40       	sbci	r29, 0x00	; 0
    2ae4:	00 82       	st	Z, r0
    2ae6:	c3 55       	subi	r28, 0x53	; 83
    2ae8:	df 4f       	sbci	r29, 0xFF	; 255
    2aea:	88 81       	ld	r24, Y
    2aec:	99 81       	ldd	r25, Y+1	; 0x01
    2aee:	cd 5a       	subi	r28, 0xAD	; 173
    2af0:	d0 40       	sbci	r29, 0x00	; 0
    2af2:	01 96       	adiw	r24, 0x01	; 1
    2af4:	c3 55       	subi	r28, 0x53	; 83
    2af6:	df 4f       	sbci	r29, 0xFF	; 255
    2af8:	99 83       	std	Y+1, r25	; 0x01
    2afa:	88 83       	st	Y, r24
    2afc:	cd 5a       	subi	r28, 0xAD	; 173
    2afe:	d0 40       	sbci	r29, 0x00	; 0
    2b00:	cf 54       	subi	r28, 0x4F	; 79
    2b02:	df 4f       	sbci	r29, 0xFF	; 255
    2b04:	98 81       	ld	r25, Y
    2b06:	c1 5b       	subi	r28, 0xB1	; 177
    2b08:	d0 40       	sbci	r29, 0x00	; 0
    2b0a:	91 50       	subi	r25, 0x01	; 1
    2b0c:	cf 54       	subi	r28, 0x4F	; 79
    2b0e:	df 4f       	sbci	r29, 0xFF	; 255
    2b10:	98 83       	st	Y, r25
    2b12:	c1 5b       	subi	r28, 0xB1	; 177
    2b14:	d0 40       	sbci	r29, 0x00	; 0
    2b16:	cf 54       	subi	r28, 0x4F	; 79
    2b18:	df 4f       	sbci	r29, 0xFF	; 255
    2b1a:	e8 81       	ld	r30, Y
    2b1c:	c1 5b       	subi	r28, 0xB1	; 177
    2b1e:	d0 40       	sbci	r29, 0x00	; 0
    2b20:	ee 23       	and	r30, r30
    2b22:	31 f6       	brne	.-116    	; 0x2ab0 <APP_vLocker+0x88a>
			LCD_vWriteString(Welcome);
    2b24:	ce 01       	movw	r24, r28
    2b26:	8e 57       	subi	r24, 0x7E	; 126
    2b28:	9f 4f       	sbci	r25, 0xFF	; 255
    2b2a:	0e 94 b0 27 	call	0x4f60	; 0x4f60 <LCD_vWriteString>
    2b2e:	80 e0       	ldi	r24, 0x00	; 0
    2b30:	90 e0       	ldi	r25, 0x00	; 0
    2b32:	aa e7       	ldi	r26, 0x7A	; 122
    2b34:	b3 e4       	ldi	r27, 0x43	; 67
    2b36:	8b 87       	std	Y+11, r24	; 0x0b
    2b38:	9c 87       	std	Y+12, r25	; 0x0c
    2b3a:	ad 87       	std	Y+13, r26	; 0x0d
    2b3c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b3e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b40:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b42:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b44:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b46:	20 e0       	ldi	r18, 0x00	; 0
    2b48:	30 e0       	ldi	r19, 0x00	; 0
    2b4a:	4a e7       	ldi	r20, 0x7A	; 122
    2b4c:	55 e4       	ldi	r21, 0x45	; 69
    2b4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b52:	dc 01       	movw	r26, r24
    2b54:	cb 01       	movw	r24, r22
    2b56:	8f 83       	std	Y+7, r24	; 0x07
    2b58:	98 87       	std	Y+8, r25	; 0x08
    2b5a:	a9 87       	std	Y+9, r26	; 0x09
    2b5c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b5e:	6f 81       	ldd	r22, Y+7	; 0x07
    2b60:	78 85       	ldd	r23, Y+8	; 0x08
    2b62:	89 85       	ldd	r24, Y+9	; 0x09
    2b64:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b66:	20 e0       	ldi	r18, 0x00	; 0
    2b68:	30 e0       	ldi	r19, 0x00	; 0
    2b6a:	40 e8       	ldi	r20, 0x80	; 128
    2b6c:	5f e3       	ldi	r21, 0x3F	; 63
    2b6e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b72:	88 23       	and	r24, r24
    2b74:	2c f4       	brge	.+10     	; 0x2b80 <APP_vLocker+0x95a>
		__ticks = 1;
    2b76:	81 e0       	ldi	r24, 0x01	; 1
    2b78:	90 e0       	ldi	r25, 0x00	; 0
    2b7a:	9e 83       	std	Y+6, r25	; 0x06
    2b7c:	8d 83       	std	Y+5, r24	; 0x05
    2b7e:	3f c0       	rjmp	.+126    	; 0x2bfe <APP_vLocker+0x9d8>
	else if (__tmp > 65535)
    2b80:	6f 81       	ldd	r22, Y+7	; 0x07
    2b82:	78 85       	ldd	r23, Y+8	; 0x08
    2b84:	89 85       	ldd	r24, Y+9	; 0x09
    2b86:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b88:	20 e0       	ldi	r18, 0x00	; 0
    2b8a:	3f ef       	ldi	r19, 0xFF	; 255
    2b8c:	4f e7       	ldi	r20, 0x7F	; 127
    2b8e:	57 e4       	ldi	r21, 0x47	; 71
    2b90:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b94:	18 16       	cp	r1, r24
    2b96:	4c f5       	brge	.+82     	; 0x2bea <APP_vLocker+0x9c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b98:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b9a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ba0:	20 e0       	ldi	r18, 0x00	; 0
    2ba2:	30 e0       	ldi	r19, 0x00	; 0
    2ba4:	40 e2       	ldi	r20, 0x20	; 32
    2ba6:	51 e4       	ldi	r21, 0x41	; 65
    2ba8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bac:	dc 01       	movw	r26, r24
    2bae:	cb 01       	movw	r24, r22
    2bb0:	bc 01       	movw	r22, r24
    2bb2:	cd 01       	movw	r24, r26
    2bb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bb8:	dc 01       	movw	r26, r24
    2bba:	cb 01       	movw	r24, r22
    2bbc:	9e 83       	std	Y+6, r25	; 0x06
    2bbe:	8d 83       	std	Y+5, r24	; 0x05
    2bc0:	0f c0       	rjmp	.+30     	; 0x2be0 <APP_vLocker+0x9ba>
    2bc2:	80 e9       	ldi	r24, 0x90	; 144
    2bc4:	91 e0       	ldi	r25, 0x01	; 1
    2bc6:	9c 83       	std	Y+4, r25	; 0x04
    2bc8:	8b 83       	std	Y+3, r24	; 0x03
    2bca:	8b 81       	ldd	r24, Y+3	; 0x03
    2bcc:	9c 81       	ldd	r25, Y+4	; 0x04
    2bce:	01 97       	sbiw	r24, 0x01	; 1
    2bd0:	f1 f7       	brne	.-4      	; 0x2bce <APP_vLocker+0x9a8>
    2bd2:	9c 83       	std	Y+4, r25	; 0x04
    2bd4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bd6:	8d 81       	ldd	r24, Y+5	; 0x05
    2bd8:	9e 81       	ldd	r25, Y+6	; 0x06
    2bda:	01 97       	sbiw	r24, 0x01	; 1
    2bdc:	9e 83       	std	Y+6, r25	; 0x06
    2bde:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2be0:	8d 81       	ldd	r24, Y+5	; 0x05
    2be2:	9e 81       	ldd	r25, Y+6	; 0x06
    2be4:	00 97       	sbiw	r24, 0x00	; 0
    2be6:	69 f7       	brne	.-38     	; 0x2bc2 <APP_vLocker+0x99c>
    2be8:	25 c0       	rjmp	.+74     	; 0x2c34 <APP_vLocker+0xa0e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bea:	6f 81       	ldd	r22, Y+7	; 0x07
    2bec:	78 85       	ldd	r23, Y+8	; 0x08
    2bee:	89 85       	ldd	r24, Y+9	; 0x09
    2bf0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bf2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bf6:	dc 01       	movw	r26, r24
    2bf8:	cb 01       	movw	r24, r22
    2bfa:	9e 83       	std	Y+6, r25	; 0x06
    2bfc:	8d 83       	std	Y+5, r24	; 0x05
    2bfe:	8d 81       	ldd	r24, Y+5	; 0x05
    2c00:	9e 81       	ldd	r25, Y+6	; 0x06
    2c02:	9a 83       	std	Y+2, r25	; 0x02
    2c04:	89 83       	std	Y+1, r24	; 0x01
    2c06:	89 81       	ldd	r24, Y+1	; 0x01
    2c08:	9a 81       	ldd	r25, Y+2	; 0x02
    2c0a:	01 97       	sbiw	r24, 0x01	; 1
    2c0c:	f1 f7       	brne	.-4      	; 0x2c0a <APP_vLocker+0x9e4>
    2c0e:	9a 83       	std	Y+2, r25	; 0x02
    2c10:	89 83       	std	Y+1, r24	; 0x01
    2c12:	10 c0       	rjmp	.+32     	; 0x2c34 <APP_vLocker+0xa0e>
		else{
			//do nothing
		}
	}
	u8 WrongPassCounter ;
	for(WrongPassCounter=0;WrongPassCounter<3;WrongPassCounter++){
    2c14:	de 01       	movw	r26, r28
    2c16:	a9 5b       	subi	r26, 0xB9	; 185
    2c18:	bf 4f       	sbci	r27, 0xFF	; 255
    2c1a:	fe 01       	movw	r30, r28
    2c1c:	e9 5b       	subi	r30, 0xB9	; 185
    2c1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c20:	80 81       	ld	r24, Z
    2c22:	8f 5f       	subi	r24, 0xFF	; 255
    2c24:	8c 93       	st	X, r24
    2c26:	fe 01       	movw	r30, r28
    2c28:	e9 5b       	subi	r30, 0xB9	; 185
    2c2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c2c:	80 81       	ld	r24, Z
    2c2e:	83 30       	cpi	r24, 0x03	; 3
    2c30:	08 f4       	brcc	.+2      	; 0x2c34 <APP_vLocker+0xa0e>
    2c32:	2b cd       	rjmp	.-1450   	; 0x268a <APP_vLocker+0x464>
		}
		else{
			//do nothing
		}
	}
	if(WrongPassCounter==3){
    2c34:	fe 01       	movw	r30, r28
    2c36:	e9 5b       	subi	r30, 0xB9	; 185
    2c38:	ff 4f       	sbci	r31, 0xFF	; 255
    2c3a:	80 81       	ld	r24, Z
    2c3c:	83 30       	cpi	r24, 0x03	; 3
    2c3e:	09 f0       	breq	.+2      	; 0x2c42 <APP_vLocker+0xa1c>
    2c40:	58 c0       	rjmp	.+176    	; 0x2cf2 <APP_vLocker+0xacc>
		LCD_vInit();
    2c42:	0e 94 51 21 	call	0x42a2	; 0x42a2 <LCD_vInit>
		u8 Wrong1[]="Try latter";
    2c46:	ce 01       	movw	r24, r28
    2c48:	86 57       	subi	r24, 0x76	; 118
    2c4a:	9f 4f       	sbci	r25, 0xFF	; 255
    2c4c:	ce 54       	subi	r28, 0x4E	; 78
    2c4e:	df 4f       	sbci	r29, 0xFF	; 255
    2c50:	99 83       	std	Y+1, r25	; 0x01
    2c52:	88 83       	st	Y, r24
    2c54:	c2 5b       	subi	r28, 0xB2	; 178
    2c56:	d0 40       	sbci	r29, 0x00	; 0
    2c58:	8a e9       	ldi	r24, 0x9A	; 154
    2c5a:	90 e0       	ldi	r25, 0x00	; 0
    2c5c:	cc 54       	subi	r28, 0x4C	; 76
    2c5e:	df 4f       	sbci	r29, 0xFF	; 255
    2c60:	99 83       	std	Y+1, r25	; 0x01
    2c62:	88 83       	st	Y, r24
    2c64:	c4 5b       	subi	r28, 0xB4	; 180
    2c66:	d0 40       	sbci	r29, 0x00	; 0
    2c68:	9b e0       	ldi	r25, 0x0B	; 11
    2c6a:	ca 54       	subi	r28, 0x4A	; 74
    2c6c:	df 4f       	sbci	r29, 0xFF	; 255
    2c6e:	98 83       	st	Y, r25
    2c70:	c6 5b       	subi	r28, 0xB6	; 182
    2c72:	d0 40       	sbci	r29, 0x00	; 0
    2c74:	cc 54       	subi	r28, 0x4C	; 76
    2c76:	df 4f       	sbci	r29, 0xFF	; 255
    2c78:	e8 81       	ld	r30, Y
    2c7a:	f9 81       	ldd	r31, Y+1	; 0x01
    2c7c:	c4 5b       	subi	r28, 0xB4	; 180
    2c7e:	d0 40       	sbci	r29, 0x00	; 0
    2c80:	00 80       	ld	r0, Z
    2c82:	cc 54       	subi	r28, 0x4C	; 76
    2c84:	df 4f       	sbci	r29, 0xFF	; 255
    2c86:	88 81       	ld	r24, Y
    2c88:	99 81       	ldd	r25, Y+1	; 0x01
    2c8a:	c4 5b       	subi	r28, 0xB4	; 180
    2c8c:	d0 40       	sbci	r29, 0x00	; 0
    2c8e:	01 96       	adiw	r24, 0x01	; 1
    2c90:	cc 54       	subi	r28, 0x4C	; 76
    2c92:	df 4f       	sbci	r29, 0xFF	; 255
    2c94:	99 83       	std	Y+1, r25	; 0x01
    2c96:	88 83       	st	Y, r24
    2c98:	c4 5b       	subi	r28, 0xB4	; 180
    2c9a:	d0 40       	sbci	r29, 0x00	; 0
    2c9c:	ce 54       	subi	r28, 0x4E	; 78
    2c9e:	df 4f       	sbci	r29, 0xFF	; 255
    2ca0:	e8 81       	ld	r30, Y
    2ca2:	f9 81       	ldd	r31, Y+1	; 0x01
    2ca4:	c2 5b       	subi	r28, 0xB2	; 178
    2ca6:	d0 40       	sbci	r29, 0x00	; 0
    2ca8:	00 82       	st	Z, r0
    2caa:	ce 54       	subi	r28, 0x4E	; 78
    2cac:	df 4f       	sbci	r29, 0xFF	; 255
    2cae:	88 81       	ld	r24, Y
    2cb0:	99 81       	ldd	r25, Y+1	; 0x01
    2cb2:	c2 5b       	subi	r28, 0xB2	; 178
    2cb4:	d0 40       	sbci	r29, 0x00	; 0
    2cb6:	01 96       	adiw	r24, 0x01	; 1
    2cb8:	ce 54       	subi	r28, 0x4E	; 78
    2cba:	df 4f       	sbci	r29, 0xFF	; 255
    2cbc:	99 83       	std	Y+1, r25	; 0x01
    2cbe:	88 83       	st	Y, r24
    2cc0:	c2 5b       	subi	r28, 0xB2	; 178
    2cc2:	d0 40       	sbci	r29, 0x00	; 0
    2cc4:	ca 54       	subi	r28, 0x4A	; 74
    2cc6:	df 4f       	sbci	r29, 0xFF	; 255
    2cc8:	98 81       	ld	r25, Y
    2cca:	c6 5b       	subi	r28, 0xB6	; 182
    2ccc:	d0 40       	sbci	r29, 0x00	; 0
    2cce:	91 50       	subi	r25, 0x01	; 1
    2cd0:	ca 54       	subi	r28, 0x4A	; 74
    2cd2:	df 4f       	sbci	r29, 0xFF	; 255
    2cd4:	98 83       	st	Y, r25
    2cd6:	c6 5b       	subi	r28, 0xB6	; 182
    2cd8:	d0 40       	sbci	r29, 0x00	; 0
    2cda:	ca 54       	subi	r28, 0x4A	; 74
    2cdc:	df 4f       	sbci	r29, 0xFF	; 255
    2cde:	e8 81       	ld	r30, Y
    2ce0:	c6 5b       	subi	r28, 0xB6	; 182
    2ce2:	d0 40       	sbci	r29, 0x00	; 0
    2ce4:	ee 23       	and	r30, r30
    2ce6:	31 f6       	brne	.-116    	; 0x2c74 <APP_vLocker+0xa4e>
		LCD_vWriteString(Wrong1);
    2ce8:	ce 01       	movw	r24, r28
    2cea:	86 57       	subi	r24, 0x76	; 118
    2cec:	9f 4f       	sbci	r25, 0xFF	; 255
    2cee:	0e 94 b0 27 	call	0x4f60	; 0x4f60 <LCD_vWriteString>
	}
	else{
		//do nothing
	}
}
    2cf2:	ca 54       	subi	r28, 0x4A	; 74
    2cf4:	df 4f       	sbci	r29, 0xFF	; 255
    2cf6:	0f b6       	in	r0, 0x3f	; 63
    2cf8:	f8 94       	cli
    2cfa:	de bf       	out	0x3e, r29	; 62
    2cfc:	0f be       	out	0x3f, r0	; 63
    2cfe:	cd bf       	out	0x3d, r28	; 61
    2d00:	cf 91       	pop	r28
    2d02:	df 91       	pop	r29
    2d04:	1f 91       	pop	r17
    2d06:	0f 91       	pop	r16
    2d08:	08 95       	ret

00002d0a <APP_u8compareArray>:
//----------------
u8 APP_u8compareArray(u8 *ptr1,u8 *ptr2,u8 size){
    2d0a:	df 93       	push	r29
    2d0c:	cf 93       	push	r28
    2d0e:	cd b7       	in	r28, 0x3d	; 61
    2d10:	de b7       	in	r29, 0x3e	; 62
    2d12:	27 97       	sbiw	r28, 0x07	; 7
    2d14:	0f b6       	in	r0, 0x3f	; 63
    2d16:	f8 94       	cli
    2d18:	de bf       	out	0x3e, r29	; 62
    2d1a:	0f be       	out	0x3f, r0	; 63
    2d1c:	cd bf       	out	0x3d, r28	; 61
    2d1e:	9b 83       	std	Y+3, r25	; 0x03
    2d20:	8a 83       	std	Y+2, r24	; 0x02
    2d22:	7d 83       	std	Y+5, r23	; 0x05
    2d24:	6c 83       	std	Y+4, r22	; 0x04
    2d26:	4e 83       	std	Y+6, r20	; 0x06
	u8 i;
	for(i=0;i<size;i++){
    2d28:	19 82       	std	Y+1, r1	; 0x01
    2d2a:	19 c0       	rjmp	.+50     	; 0x2d5e <APP_u8compareArray+0x54>
		if(ptr1[i]!=ptr2[i])
    2d2c:	89 81       	ldd	r24, Y+1	; 0x01
    2d2e:	28 2f       	mov	r18, r24
    2d30:	30 e0       	ldi	r19, 0x00	; 0
    2d32:	8a 81       	ldd	r24, Y+2	; 0x02
    2d34:	9b 81       	ldd	r25, Y+3	; 0x03
    2d36:	fc 01       	movw	r30, r24
    2d38:	e2 0f       	add	r30, r18
    2d3a:	f3 1f       	adc	r31, r19
    2d3c:	40 81       	ld	r20, Z
    2d3e:	89 81       	ldd	r24, Y+1	; 0x01
    2d40:	28 2f       	mov	r18, r24
    2d42:	30 e0       	ldi	r19, 0x00	; 0
    2d44:	8c 81       	ldd	r24, Y+4	; 0x04
    2d46:	9d 81       	ldd	r25, Y+5	; 0x05
    2d48:	fc 01       	movw	r30, r24
    2d4a:	e2 0f       	add	r30, r18
    2d4c:	f3 1f       	adc	r31, r19
    2d4e:	80 81       	ld	r24, Z
    2d50:	48 17       	cp	r20, r24
    2d52:	11 f0       	breq	.+4      	; 0x2d58 <APP_u8compareArray+0x4e>
			return 0;
    2d54:	1f 82       	std	Y+7, r1	; 0x07
    2d56:	09 c0       	rjmp	.+18     	; 0x2d6a <APP_u8compareArray+0x60>
	}
}
//----------------
u8 APP_u8compareArray(u8 *ptr1,u8 *ptr2,u8 size){
	u8 i;
	for(i=0;i<size;i++){
    2d58:	89 81       	ldd	r24, Y+1	; 0x01
    2d5a:	8f 5f       	subi	r24, 0xFF	; 255
    2d5c:	89 83       	std	Y+1, r24	; 0x01
    2d5e:	99 81       	ldd	r25, Y+1	; 0x01
    2d60:	8e 81       	ldd	r24, Y+6	; 0x06
    2d62:	98 17       	cp	r25, r24
    2d64:	18 f3       	brcs	.-58     	; 0x2d2c <APP_u8compareArray+0x22>
		if(ptr1[i]!=ptr2[i])
			return 0;
	}
	return 1;
    2d66:	81 e0       	ldi	r24, 0x01	; 1
    2d68:	8f 83       	std	Y+7, r24	; 0x07
    2d6a:	8f 81       	ldd	r24, Y+7	; 0x07
}
    2d6c:	27 96       	adiw	r28, 0x07	; 7
    2d6e:	0f b6       	in	r0, 0x3f	; 63
    2d70:	f8 94       	cli
    2d72:	de bf       	out	0x3e, r29	; 62
    2d74:	0f be       	out	0x3f, r0	; 63
    2d76:	cd bf       	out	0x3d, r28	; 61
    2d78:	cf 91       	pop	r28
    2d7a:	df 91       	pop	r29
    2d7c:	08 95       	ret

00002d7e <APP_vVolumeLCD>:
//------------------------
void APP_vVolumeLCD(){
    2d7e:	df 93       	push	r29
    2d80:	cf 93       	push	r28
    2d82:	cd b7       	in	r28, 0x3d	; 61
    2d84:	de b7       	in	r29, 0x3e	; 62
    2d86:	a8 97       	sbiw	r28, 0x28	; 40
    2d88:	0f b6       	in	r0, 0x3f	; 63
    2d8a:	f8 94       	cli
    2d8c:	de bf       	out	0x3e, r29	; 62
    2d8e:	0f be       	out	0x3f, r0	; 63
    2d90:	cd bf       	out	0x3d, r28	; 61
	LCD_vInit();
    2d92:	0e 94 51 21 	call	0x42a2	; 0x42a2 <LCD_vInit>
	u16 z;
	u8 counter=0,i,y;
    2d96:	19 8a       	std	Y+17, r1	; 0x11
	u8 chrr[8]={0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,0x1F};
    2d98:	ce 01       	movw	r24, r28
    2d9a:	44 96       	adiw	r24, 0x14	; 20
    2d9c:	9d a3       	std	Y+37, r25	; 0x25
    2d9e:	8c a3       	std	Y+36, r24	; 0x24
    2da0:	ad eb       	ldi	r26, 0xBD	; 189
    2da2:	b0 e0       	ldi	r27, 0x00	; 0
    2da4:	bf a3       	std	Y+39, r27	; 0x27
    2da6:	ae a3       	std	Y+38, r26	; 0x26
    2da8:	b8 e0       	ldi	r27, 0x08	; 8
    2daa:	b8 a7       	std	Y+40, r27	; 0x28
    2dac:	ee a1       	ldd	r30, Y+38	; 0x26
    2dae:	ff a1       	ldd	r31, Y+39	; 0x27
    2db0:	00 80       	ld	r0, Z
    2db2:	8e a1       	ldd	r24, Y+38	; 0x26
    2db4:	9f a1       	ldd	r25, Y+39	; 0x27
    2db6:	01 96       	adiw	r24, 0x01	; 1
    2db8:	9f a3       	std	Y+39, r25	; 0x27
    2dba:	8e a3       	std	Y+38, r24	; 0x26
    2dbc:	ac a1       	ldd	r26, Y+36	; 0x24
    2dbe:	bd a1       	ldd	r27, Y+37	; 0x25
    2dc0:	0c 92       	st	X, r0
    2dc2:	ec a1       	ldd	r30, Y+36	; 0x24
    2dc4:	fd a1       	ldd	r31, Y+37	; 0x25
    2dc6:	31 96       	adiw	r30, 0x01	; 1
    2dc8:	fd a3       	std	Y+37, r31	; 0x25
    2dca:	ec a3       	std	Y+36, r30	; 0x24
    2dcc:	f8 a5       	ldd	r31, Y+40	; 0x28
    2dce:	f1 50       	subi	r31, 0x01	; 1
    2dd0:	f8 a7       	std	Y+40, r31	; 0x28
    2dd2:	28 a5       	ldd	r18, Y+40	; 0x28
    2dd4:	22 23       	and	r18, r18
    2dd6:	51 f7       	brne	.-44     	; 0x2dac <APP_vVolumeLCD+0x2e>
	u8 chr0[8]={0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
    2dd8:	88 e0       	ldi	r24, 0x08	; 8
    2dda:	fe 01       	movw	r30, r28
    2ddc:	7c 96       	adiw	r30, 0x1c	; 28
    2dde:	df 01       	movw	r26, r30
    2de0:	28 2f       	mov	r18, r24
    2de2:	1d 92       	st	X+, r1
    2de4:	2a 95       	dec	r18
    2de6:	e9 f7       	brne	.-6      	; 0x2de2 <APP_vVolumeLCD+0x64>
	LCD_vCustomCharacter(chrr,0);
    2de8:	ce 01       	movw	r24, r28
    2dea:	44 96       	adiw	r24, 0x14	; 20
    2dec:	60 e0       	ldi	r22, 0x00	; 0
    2dee:	0e 94 d9 27 	call	0x4fb2	; 0x4fb2 <LCD_vCustomCharacter>
	LCD_vCustomCharacter(chr0,1);
    2df2:	ce 01       	movw	r24, r28
    2df4:	4c 96       	adiw	r24, 0x1c	; 28
    2df6:	61 e0       	ldi	r22, 0x01	; 1
    2df8:	0e 94 d9 27 	call	0x4fb2	; 0x4fb2 <LCD_vCustomCharacter>
	ADC_vInit(Polling,ADC1,FreeRunningMode);
    2dfc:	a7 e2       	ldi	r26, 0x27	; 39
    2dfe:	b0 e0       	ldi	r27, 0x00	; 0
    2e00:	e7 e2       	ldi	r30, 0x27	; 39
    2e02:	f0 e0       	ldi	r31, 0x00	; 0
    2e04:	80 81       	ld	r24, Z
    2e06:	81 60       	ori	r24, 0x01	; 1
    2e08:	8c 93       	st	X, r24
    2e0a:	8c 91       	ld	r24, X
    2e0c:	28 2f       	mov	r18, r24
    2e0e:	30 e0       	ldi	r19, 0x00	; 0
    2e10:	80 e0       	ldi	r24, 0x00	; 0
    2e12:	90 e0       	ldi	r25, 0x00	; 0
    2e14:	b9 01       	movw	r22, r18
    2e16:	41 e0       	ldi	r20, 0x01	; 1
    2e18:	50 e0       	ldi	r21, 0x00	; 0
    2e1a:	0e 94 a3 05 	call	0xb46	; 0xb46 <ADC_vInit>
	while(1){
		z=ADC_vGetVal(FreeRunningMode);
    2e1e:	81 e0       	ldi	r24, 0x01	; 1
    2e20:	90 e0       	ldi	r25, 0x00	; 0
    2e22:	0e 94 c2 05 	call	0xb84	; 0xb84 <ADC_vGetVal>
    2e26:	9b 8b       	std	Y+19, r25	; 0x13
    2e28:	8a 8b       	std	Y+18, r24	; 0x12
    2e2a:	09 c0       	rjmp	.+18     	; 0x2e3e <APP_vVolumeLCD+0xc0>
		while(z>311){
			z=z-311;
    2e2c:	8a 89       	ldd	r24, Y+18	; 0x12
    2e2e:	9b 89       	ldd	r25, Y+19	; 0x13
    2e30:	87 53       	subi	r24, 0x37	; 55
    2e32:	91 40       	sbci	r25, 0x01	; 1
    2e34:	9b 8b       	std	Y+19, r25	; 0x13
    2e36:	8a 8b       	std	Y+18, r24	; 0x12
			counter++;
    2e38:	89 89       	ldd	r24, Y+17	; 0x11
    2e3a:	8f 5f       	subi	r24, 0xFF	; 255
    2e3c:	89 8b       	std	Y+17, r24	; 0x11
	LCD_vCustomCharacter(chrr,0);
	LCD_vCustomCharacter(chr0,1);
	ADC_vInit(Polling,ADC1,FreeRunningMode);
	while(1){
		z=ADC_vGetVal(FreeRunningMode);
		while(z>311){
    2e3e:	8a 89       	ldd	r24, Y+18	; 0x12
    2e40:	9b 89       	ldd	r25, Y+19	; 0x13
    2e42:	a1 e0       	ldi	r26, 0x01	; 1
    2e44:	88 33       	cpi	r24, 0x38	; 56
    2e46:	9a 07       	cpc	r25, r26
    2e48:	88 f7       	brcc	.-30     	; 0x2e2c <APP_vVolumeLCD+0xae>
			z=z-311;
			counter++;
		}
		for(i=0;i<counter;i++){
    2e4a:	18 8a       	std	Y+16, r1	; 0x10
    2e4c:	06 c0       	rjmp	.+12     	; 0x2e5a <APP_vVolumeLCD+0xdc>
			LCD_vWriteCharacter(0);
    2e4e:	80 e0       	ldi	r24, 0x00	; 0
    2e50:	0e 94 ed 25 	call	0x4bda	; 0x4bda <LCD_vWriteCharacter>
		z=ADC_vGetVal(FreeRunningMode);
		while(z>311){
			z=z-311;
			counter++;
		}
		for(i=0;i<counter;i++){
    2e54:	88 89       	ldd	r24, Y+16	; 0x10
    2e56:	8f 5f       	subi	r24, 0xFF	; 255
    2e58:	88 8b       	std	Y+16, r24	; 0x10
    2e5a:	98 89       	ldd	r25, Y+16	; 0x10
    2e5c:	89 89       	ldd	r24, Y+17	; 0x11
    2e5e:	98 17       	cp	r25, r24
    2e60:	b0 f3       	brcs	.-20     	; 0x2e4e <APP_vVolumeLCD+0xd0>
			LCD_vWriteCharacter(0);
		}
		for(i=y;i>counter;i--){
    2e62:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e64:	88 8b       	std	Y+16, r24	; 0x10
    2e66:	0a c0       	rjmp	.+20     	; 0x2e7c <APP_vVolumeLCD+0xfe>
			LCD_vGoTo(LineOne,i);
    2e68:	80 e8       	ldi	r24, 0x80	; 128
    2e6a:	68 89       	ldd	r22, Y+16	; 0x10
    2e6c:	0e 94 17 27 	call	0x4e2e	; 0x4e2e <LCD_vGoTo>
			LCD_vWriteCharacter(1);
    2e70:	81 e0       	ldi	r24, 0x01	; 1
    2e72:	0e 94 ed 25 	call	0x4bda	; 0x4bda <LCD_vWriteCharacter>
			counter++;
		}
		for(i=0;i<counter;i++){
			LCD_vWriteCharacter(0);
		}
		for(i=y;i>counter;i--){
    2e76:	88 89       	ldd	r24, Y+16	; 0x10
    2e78:	81 50       	subi	r24, 0x01	; 1
    2e7a:	88 8b       	std	Y+16, r24	; 0x10
    2e7c:	98 89       	ldd	r25, Y+16	; 0x10
    2e7e:	89 89       	ldd	r24, Y+17	; 0x11
    2e80:	89 17       	cp	r24, r25
    2e82:	90 f3       	brcs	.-28     	; 0x2e68 <APP_vVolumeLCD+0xea>
			LCD_vGoTo(LineOne,i);
			LCD_vWriteCharacter(1);
		}
		y=counter;
    2e84:	89 89       	ldd	r24, Y+17	; 0x11
    2e86:	8f 87       	std	Y+15, r24	; 0x0f
		if(counter==16){
    2e88:	89 89       	ldd	r24, Y+17	; 0x11
    2e8a:	80 31       	cpi	r24, 0x10	; 16
    2e8c:	09 f0       	breq	.+2      	; 0x2e90 <APP_vVolumeLCD+0x112>
    2e8e:	76 c0       	rjmp	.+236    	; 0x2f7c <APP_vVolumeLCD+0x1fe>
			LedAndBuzzer_vBuzzerOpen();
    2e90:	0e 94 88 28 	call	0x5110	; 0x5110 <LedAndBuzzer_vBuzzerOpen>
    2e94:	80 e0       	ldi	r24, 0x00	; 0
    2e96:	90 e0       	ldi	r25, 0x00	; 0
    2e98:	aa e7       	ldi	r26, 0x7A	; 122
    2e9a:	b3 e4       	ldi	r27, 0x43	; 67
    2e9c:	8b 87       	std	Y+11, r24	; 0x0b
    2e9e:	9c 87       	std	Y+12, r25	; 0x0c
    2ea0:	ad 87       	std	Y+13, r26	; 0x0d
    2ea2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ea4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ea6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ea8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2eaa:	9e 85       	ldd	r25, Y+14	; 0x0e
    2eac:	20 e0       	ldi	r18, 0x00	; 0
    2eae:	30 e0       	ldi	r19, 0x00	; 0
    2eb0:	4a e7       	ldi	r20, 0x7A	; 122
    2eb2:	55 e4       	ldi	r21, 0x45	; 69
    2eb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eb8:	dc 01       	movw	r26, r24
    2eba:	cb 01       	movw	r24, r22
    2ebc:	8f 83       	std	Y+7, r24	; 0x07
    2ebe:	98 87       	std	Y+8, r25	; 0x08
    2ec0:	a9 87       	std	Y+9, r26	; 0x09
    2ec2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ec4:	6f 81       	ldd	r22, Y+7	; 0x07
    2ec6:	78 85       	ldd	r23, Y+8	; 0x08
    2ec8:	89 85       	ldd	r24, Y+9	; 0x09
    2eca:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ecc:	20 e0       	ldi	r18, 0x00	; 0
    2ece:	30 e0       	ldi	r19, 0x00	; 0
    2ed0:	40 e8       	ldi	r20, 0x80	; 128
    2ed2:	5f e3       	ldi	r21, 0x3F	; 63
    2ed4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ed8:	88 23       	and	r24, r24
    2eda:	2c f4       	brge	.+10     	; 0x2ee6 <APP_vVolumeLCD+0x168>
		__ticks = 1;
    2edc:	81 e0       	ldi	r24, 0x01	; 1
    2ede:	90 e0       	ldi	r25, 0x00	; 0
    2ee0:	9e 83       	std	Y+6, r25	; 0x06
    2ee2:	8d 83       	std	Y+5, r24	; 0x05
    2ee4:	3f c0       	rjmp	.+126    	; 0x2f64 <APP_vVolumeLCD+0x1e6>
	else if (__tmp > 65535)
    2ee6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ee8:	78 85       	ldd	r23, Y+8	; 0x08
    2eea:	89 85       	ldd	r24, Y+9	; 0x09
    2eec:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eee:	20 e0       	ldi	r18, 0x00	; 0
    2ef0:	3f ef       	ldi	r19, 0xFF	; 255
    2ef2:	4f e7       	ldi	r20, 0x7F	; 127
    2ef4:	57 e4       	ldi	r21, 0x47	; 71
    2ef6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2efa:	18 16       	cp	r1, r24
    2efc:	4c f5       	brge	.+82     	; 0x2f50 <APP_vVolumeLCD+0x1d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2efe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f00:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f02:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f04:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f06:	20 e0       	ldi	r18, 0x00	; 0
    2f08:	30 e0       	ldi	r19, 0x00	; 0
    2f0a:	40 e2       	ldi	r20, 0x20	; 32
    2f0c:	51 e4       	ldi	r21, 0x41	; 65
    2f0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f12:	dc 01       	movw	r26, r24
    2f14:	cb 01       	movw	r24, r22
    2f16:	bc 01       	movw	r22, r24
    2f18:	cd 01       	movw	r24, r26
    2f1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f1e:	dc 01       	movw	r26, r24
    2f20:	cb 01       	movw	r24, r22
    2f22:	9e 83       	std	Y+6, r25	; 0x06
    2f24:	8d 83       	std	Y+5, r24	; 0x05
    2f26:	0f c0       	rjmp	.+30     	; 0x2f46 <APP_vVolumeLCD+0x1c8>
    2f28:	80 e9       	ldi	r24, 0x90	; 144
    2f2a:	91 e0       	ldi	r25, 0x01	; 1
    2f2c:	9c 83       	std	Y+4, r25	; 0x04
    2f2e:	8b 83       	std	Y+3, r24	; 0x03
    2f30:	8b 81       	ldd	r24, Y+3	; 0x03
    2f32:	9c 81       	ldd	r25, Y+4	; 0x04
    2f34:	01 97       	sbiw	r24, 0x01	; 1
    2f36:	f1 f7       	brne	.-4      	; 0x2f34 <APP_vVolumeLCD+0x1b6>
    2f38:	9c 83       	std	Y+4, r25	; 0x04
    2f3a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f3c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f3e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f40:	01 97       	sbiw	r24, 0x01	; 1
    2f42:	9e 83       	std	Y+6, r25	; 0x06
    2f44:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f46:	8d 81       	ldd	r24, Y+5	; 0x05
    2f48:	9e 81       	ldd	r25, Y+6	; 0x06
    2f4a:	00 97       	sbiw	r24, 0x00	; 0
    2f4c:	69 f7       	brne	.-38     	; 0x2f28 <APP_vVolumeLCD+0x1aa>
    2f4e:	14 c0       	rjmp	.+40     	; 0x2f78 <APP_vVolumeLCD+0x1fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f50:	6f 81       	ldd	r22, Y+7	; 0x07
    2f52:	78 85       	ldd	r23, Y+8	; 0x08
    2f54:	89 85       	ldd	r24, Y+9	; 0x09
    2f56:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f5c:	dc 01       	movw	r26, r24
    2f5e:	cb 01       	movw	r24, r22
    2f60:	9e 83       	std	Y+6, r25	; 0x06
    2f62:	8d 83       	std	Y+5, r24	; 0x05
    2f64:	8d 81       	ldd	r24, Y+5	; 0x05
    2f66:	9e 81       	ldd	r25, Y+6	; 0x06
    2f68:	9a 83       	std	Y+2, r25	; 0x02
    2f6a:	89 83       	std	Y+1, r24	; 0x01
    2f6c:	89 81       	ldd	r24, Y+1	; 0x01
    2f6e:	9a 81       	ldd	r25, Y+2	; 0x02
    2f70:	01 97       	sbiw	r24, 0x01	; 1
    2f72:	f1 f7       	brne	.-4      	; 0x2f70 <APP_vVolumeLCD+0x1f2>
    2f74:	9a 83       	std	Y+2, r25	; 0x02
    2f76:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(250);
			LedAndBuzzer_vBuzzerClose();
    2f78:	0e 94 99 28 	call	0x5132	; 0x5132 <LedAndBuzzer_vBuzzerClose>
		}
		LCD_vGoTo(LineOne,0);
    2f7c:	80 e8       	ldi	r24, 0x80	; 128
    2f7e:	60 e0       	ldi	r22, 0x00	; 0
    2f80:	0e 94 17 27 	call	0x4e2e	; 0x4e2e <LCD_vGoTo>
		counter=0;
    2f84:	19 8a       	std	Y+17, r1	; 0x11
    2f86:	4b cf       	rjmp	.-362    	; 0x2e1e <APP_vVolumeLCD+0xa0>

00002f88 <APP_vVolumeVerticalLCD>:
	}
}
//-
void APP_vVolumeVerticalLCD(){
    2f88:	df 93       	push	r29
    2f8a:	cf 93       	push	r28
    2f8c:	cd b7       	in	r28, 0x3d	; 61
    2f8e:	de b7       	in	r29, 0x3e	; 62
    2f90:	c4 55       	subi	r28, 0x54	; 84
    2f92:	d0 40       	sbci	r29, 0x00	; 0
    2f94:	0f b6       	in	r0, 0x3f	; 63
    2f96:	f8 94       	cli
    2f98:	de bf       	out	0x3e, r29	; 62
    2f9a:	0f be       	out	0x3f, r0	; 63
    2f9c:	cd bf       	out	0x3d, r28	; 61
	LCD_vInit();
    2f9e:	0e 94 51 21 	call	0x42a2	; 0x42a2 <LCD_vInit>
	ADC_vInit();
    2fa2:	0e 94 a3 05 	call	0xb46	; 0xb46 <ADC_vInit>
	s16 z;
	s8 counter=0,i,j,y=0;
    2fa6:	1a 8a       	std	Y+18, r1	; 0x12
    2fa8:	1f 86       	std	Y+15, r1	; 0x0f
	u8 arr1[8][8];
	for(i=0;i<8;i++){
    2faa:	19 8a       	std	Y+17, r1	; 0x11
    2fac:	5d c0       	rjmp	.+186    	; 0x3068 <APP_vVolumeVerticalLCD+0xe0>
		for(j=i;j<8;j++){
    2fae:	89 89       	ldd	r24, Y+17	; 0x11
    2fb0:	88 8b       	std	Y+16, r24	; 0x10
    2fb2:	1e c0       	rjmp	.+60     	; 0x2ff0 <APP_vVolumeVerticalLCD+0x68>
			arr1[i][7-j]=0x00;
    2fb4:	89 89       	ldd	r24, Y+17	; 0x11
    2fb6:	68 2f       	mov	r22, r24
    2fb8:	70 e0       	ldi	r23, 0x00	; 0
    2fba:	88 89       	ldd	r24, Y+16	; 0x10
    2fbc:	28 2f       	mov	r18, r24
    2fbe:	30 e0       	ldi	r19, 0x00	; 0
    2fc0:	87 e0       	ldi	r24, 0x07	; 7
    2fc2:	90 e0       	ldi	r25, 0x00	; 0
    2fc4:	ac 01       	movw	r20, r24
    2fc6:	42 1b       	sub	r20, r18
    2fc8:	53 0b       	sbc	r21, r19
    2fca:	9b 01       	movw	r18, r22
    2fcc:	22 0f       	add	r18, r18
    2fce:	33 1f       	adc	r19, r19
    2fd0:	22 0f       	add	r18, r18
    2fd2:	33 1f       	adc	r19, r19
    2fd4:	22 0f       	add	r18, r18
    2fd6:	33 1f       	adc	r19, r19
    2fd8:	ce 01       	movw	r24, r28
    2fda:	01 96       	adiw	r24, 0x01	; 1
    2fdc:	82 0f       	add	r24, r18
    2fde:	93 1f       	adc	r25, r19
    2fe0:	84 0f       	add	r24, r20
    2fe2:	95 1f       	adc	r25, r21
    2fe4:	fc 01       	movw	r30, r24
    2fe6:	74 96       	adiw	r30, 0x14	; 20
    2fe8:	10 82       	st	Z, r1
	ADC_vInit();
	s16 z;
	s8 counter=0,i,j,y=0;
	u8 arr1[8][8];
	for(i=0;i<8;i++){
		for(j=i;j<8;j++){
    2fea:	88 89       	ldd	r24, Y+16	; 0x10
    2fec:	8f 5f       	subi	r24, 0xFF	; 255
    2fee:	88 8b       	std	Y+16, r24	; 0x10
    2ff0:	88 89       	ldd	r24, Y+16	; 0x10
    2ff2:	88 30       	cpi	r24, 0x08	; 8
    2ff4:	f8 f2       	brcs	.-66     	; 0x2fb4 <APP_vVolumeVerticalLCD+0x2c>
			arr1[i][7-j]=0x00;
		}
		for(j=0;j<=i;j++){
    2ff6:	18 8a       	std	Y+16, r1	; 0x10
    2ff8:	1f c0       	rjmp	.+62     	; 0x3038 <APP_vVolumeVerticalLCD+0xb0>
			arr1[i][7-j]=0x1F;
    2ffa:	89 89       	ldd	r24, Y+17	; 0x11
    2ffc:	68 2f       	mov	r22, r24
    2ffe:	70 e0       	ldi	r23, 0x00	; 0
    3000:	88 89       	ldd	r24, Y+16	; 0x10
    3002:	28 2f       	mov	r18, r24
    3004:	30 e0       	ldi	r19, 0x00	; 0
    3006:	87 e0       	ldi	r24, 0x07	; 7
    3008:	90 e0       	ldi	r25, 0x00	; 0
    300a:	ac 01       	movw	r20, r24
    300c:	42 1b       	sub	r20, r18
    300e:	53 0b       	sbc	r21, r19
    3010:	9b 01       	movw	r18, r22
    3012:	22 0f       	add	r18, r18
    3014:	33 1f       	adc	r19, r19
    3016:	22 0f       	add	r18, r18
    3018:	33 1f       	adc	r19, r19
    301a:	22 0f       	add	r18, r18
    301c:	33 1f       	adc	r19, r19
    301e:	ce 01       	movw	r24, r28
    3020:	01 96       	adiw	r24, 0x01	; 1
    3022:	82 0f       	add	r24, r18
    3024:	93 1f       	adc	r25, r19
    3026:	84 0f       	add	r24, r20
    3028:	95 1f       	adc	r25, r21
    302a:	fc 01       	movw	r30, r24
    302c:	74 96       	adiw	r30, 0x14	; 20
    302e:	8f e1       	ldi	r24, 0x1F	; 31
    3030:	80 83       	st	Z, r24
	u8 arr1[8][8];
	for(i=0;i<8;i++){
		for(j=i;j<8;j++){
			arr1[i][7-j]=0x00;
		}
		for(j=0;j<=i;j++){
    3032:	88 89       	ldd	r24, Y+16	; 0x10
    3034:	8f 5f       	subi	r24, 0xFF	; 255
    3036:	88 8b       	std	Y+16, r24	; 0x10
    3038:	98 89       	ldd	r25, Y+16	; 0x10
    303a:	89 89       	ldd	r24, Y+17	; 0x11
    303c:	89 17       	cp	r24, r25
    303e:	e8 f6       	brcc	.-70     	; 0x2ffa <APP_vVolumeVerticalLCD+0x72>
			arr1[i][7-j]=0x1F;
		}
		LCD_vCustomCharacter(arr1[i],i);
    3040:	9e 01       	movw	r18, r28
    3042:	2b 5e       	subi	r18, 0xEB	; 235
    3044:	3f 4f       	sbci	r19, 0xFF	; 255
    3046:	89 89       	ldd	r24, Y+17	; 0x11
    3048:	88 2f       	mov	r24, r24
    304a:	90 e0       	ldi	r25, 0x00	; 0
    304c:	88 0f       	add	r24, r24
    304e:	99 1f       	adc	r25, r25
    3050:	88 0f       	add	r24, r24
    3052:	99 1f       	adc	r25, r25
    3054:	88 0f       	add	r24, r24
    3056:	99 1f       	adc	r25, r25
    3058:	82 0f       	add	r24, r18
    305a:	93 1f       	adc	r25, r19
    305c:	69 89       	ldd	r22, Y+17	; 0x11
    305e:	0e 94 d9 27 	call	0x4fb2	; 0x4fb2 <LCD_vCustomCharacter>
	LCD_vInit();
	ADC_vInit();
	s16 z;
	s8 counter=0,i,j,y=0;
	u8 arr1[8][8];
	for(i=0;i<8;i++){
    3062:	89 89       	ldd	r24, Y+17	; 0x11
    3064:	8f 5f       	subi	r24, 0xFF	; 255
    3066:	89 8b       	std	Y+17, r24	; 0x11
    3068:	89 89       	ldd	r24, Y+17	; 0x11
    306a:	88 30       	cpi	r24, 0x08	; 8
    306c:	08 f4       	brcc	.+2      	; 0x3070 <APP_vVolumeVerticalLCD+0xe8>
    306e:	9f cf       	rjmp	.-194    	; 0x2fae <APP_vVolumeVerticalLCD+0x26>
			arr1[i][7-j]=0x1F;
		}
		LCD_vCustomCharacter(arr1[i],i);
	}
	while(1){
		z=ADC_vGetVal();
    3070:	0e 94 c2 05 	call	0xb84	; 0xb84 <ADC_vGetVal>
    3074:	9c 8b       	std	Y+20, r25	; 0x14
    3076:	8b 8b       	std	Y+19, r24	; 0x13
    3078:	09 c0       	rjmp	.+18     	; 0x308c <APP_vVolumeVerticalLCD+0x104>
		while(z>611){
			z=z-611;
    307a:	8b 89       	ldd	r24, Y+19	; 0x13
    307c:	9c 89       	ldd	r25, Y+20	; 0x14
    307e:	83 56       	subi	r24, 0x63	; 99
    3080:	92 40       	sbci	r25, 0x02	; 2
    3082:	9c 8b       	std	Y+20, r25	; 0x14
    3084:	8b 8b       	std	Y+19, r24	; 0x13
			counter++;
    3086:	8a 89       	ldd	r24, Y+18	; 0x12
    3088:	8f 5f       	subi	r24, 0xFF	; 255
    308a:	8a 8b       	std	Y+18, r24	; 0x12
		}
		LCD_vCustomCharacter(arr1[i],i);
	}
	while(1){
		z=ADC_vGetVal();
		while(z>611){
    308c:	8b 89       	ldd	r24, Y+19	; 0x13
    308e:	9c 89       	ldd	r25, Y+20	; 0x14
    3090:	22 e0       	ldi	r18, 0x02	; 2
    3092:	84 36       	cpi	r24, 0x64	; 100
    3094:	92 07       	cpc	r25, r18
    3096:	8c f7       	brge	.-30     	; 0x307a <APP_vVolumeVerticalLCD+0xf2>
			z=z-611;
			counter++;
		}
		for(i=y;i<counter;i++){
    3098:	8f 85       	ldd	r24, Y+15	; 0x0f
    309a:	89 8b       	std	Y+17, r24	; 0x11
    309c:	0a c0       	rjmp	.+20     	; 0x30b2 <APP_vVolumeVerticalLCD+0x12a>
			LCD_vGoTo(LineOne,i);
    309e:	80 e8       	ldi	r24, 0x80	; 128
    30a0:	69 89       	ldd	r22, Y+17	; 0x11
    30a2:	0e 94 17 27 	call	0x4e2e	; 0x4e2e <LCD_vGoTo>
			LCD_vWriteCharacter(i);
    30a6:	89 89       	ldd	r24, Y+17	; 0x11
    30a8:	0e 94 ed 25 	call	0x4bda	; 0x4bda <LCD_vWriteCharacter>
		z=ADC_vGetVal();
		while(z>611){
			z=z-611;
			counter++;
		}
		for(i=y;i<counter;i++){
    30ac:	89 89       	ldd	r24, Y+17	; 0x11
    30ae:	8f 5f       	subi	r24, 0xFF	; 255
    30b0:	89 8b       	std	Y+17, r24	; 0x11
    30b2:	99 89       	ldd	r25, Y+17	; 0x11
    30b4:	8a 89       	ldd	r24, Y+18	; 0x12
    30b6:	98 17       	cp	r25, r24
    30b8:	90 f3       	brcs	.-28     	; 0x309e <APP_vVolumeVerticalLCD+0x116>
			LCD_vGoTo(LineOne,i);
			LCD_vWriteCharacter(i);
		}
		for(i=y;i>counter;i--){
    30ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    30bc:	89 8b       	std	Y+17, r24	; 0x11
    30be:	0a c0       	rjmp	.+20     	; 0x30d4 <APP_vVolumeVerticalLCD+0x14c>
			LCD_vGoTo(LineOne,i);
    30c0:	80 e8       	ldi	r24, 0x80	; 128
    30c2:	69 89       	ldd	r22, Y+17	; 0x11
    30c4:	0e 94 17 27 	call	0x4e2e	; 0x4e2e <LCD_vGoTo>
			LCD_vWriteCharacter(0);
    30c8:	80 e0       	ldi	r24, 0x00	; 0
    30ca:	0e 94 ed 25 	call	0x4bda	; 0x4bda <LCD_vWriteCharacter>
		}
		for(i=y;i<counter;i++){
			LCD_vGoTo(LineOne,i);
			LCD_vWriteCharacter(i);
		}
		for(i=y;i>counter;i--){
    30ce:	89 89       	ldd	r24, Y+17	; 0x11
    30d0:	81 50       	subi	r24, 0x01	; 1
    30d2:	89 8b       	std	Y+17, r24	; 0x11
    30d4:	99 89       	ldd	r25, Y+17	; 0x11
    30d6:	8a 89       	ldd	r24, Y+18	; 0x12
    30d8:	89 17       	cp	r24, r25
    30da:	90 f3       	brcs	.-28     	; 0x30c0 <APP_vVolumeVerticalLCD+0x138>
			LCD_vGoTo(LineOne,i);
			LCD_vWriteCharacter(0);
		}
		y=counter;
    30dc:	8a 89       	ldd	r24, Y+18	; 0x12
    30de:	8f 87       	std	Y+15, r24	; 0x0f
		if(counter==8){
    30e0:	8a 89       	ldd	r24, Y+18	; 0x12
    30e2:	88 30       	cpi	r24, 0x08	; 8
    30e4:	09 f0       	breq	.+2      	; 0x30e8 <APP_vVolumeVerticalLCD+0x160>
    30e6:	76 c0       	rjmp	.+236    	; 0x31d4 <APP_vVolumeVerticalLCD+0x24c>
			LedAndBuzzer_vBuzzerOpen();
    30e8:	0e 94 88 28 	call	0x5110	; 0x5110 <LedAndBuzzer_vBuzzerOpen>
    30ec:	80 e0       	ldi	r24, 0x00	; 0
    30ee:	90 e0       	ldi	r25, 0x00	; 0
    30f0:	aa e7       	ldi	r26, 0x7A	; 122
    30f2:	b3 e4       	ldi	r27, 0x43	; 67
    30f4:	8b 87       	std	Y+11, r24	; 0x0b
    30f6:	9c 87       	std	Y+12, r25	; 0x0c
    30f8:	ad 87       	std	Y+13, r26	; 0x0d
    30fa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    30fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    3100:	8d 85       	ldd	r24, Y+13	; 0x0d
    3102:	9e 85       	ldd	r25, Y+14	; 0x0e
    3104:	20 e0       	ldi	r18, 0x00	; 0
    3106:	30 e0       	ldi	r19, 0x00	; 0
    3108:	4a e7       	ldi	r20, 0x7A	; 122
    310a:	55 e4       	ldi	r21, 0x45	; 69
    310c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3110:	dc 01       	movw	r26, r24
    3112:	cb 01       	movw	r24, r22
    3114:	8f 83       	std	Y+7, r24	; 0x07
    3116:	98 87       	std	Y+8, r25	; 0x08
    3118:	a9 87       	std	Y+9, r26	; 0x09
    311a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    311c:	6f 81       	ldd	r22, Y+7	; 0x07
    311e:	78 85       	ldd	r23, Y+8	; 0x08
    3120:	89 85       	ldd	r24, Y+9	; 0x09
    3122:	9a 85       	ldd	r25, Y+10	; 0x0a
    3124:	20 e0       	ldi	r18, 0x00	; 0
    3126:	30 e0       	ldi	r19, 0x00	; 0
    3128:	40 e8       	ldi	r20, 0x80	; 128
    312a:	5f e3       	ldi	r21, 0x3F	; 63
    312c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3130:	88 23       	and	r24, r24
    3132:	2c f4       	brge	.+10     	; 0x313e <APP_vVolumeVerticalLCD+0x1b6>
		__ticks = 1;
    3134:	81 e0       	ldi	r24, 0x01	; 1
    3136:	90 e0       	ldi	r25, 0x00	; 0
    3138:	9e 83       	std	Y+6, r25	; 0x06
    313a:	8d 83       	std	Y+5, r24	; 0x05
    313c:	3f c0       	rjmp	.+126    	; 0x31bc <APP_vVolumeVerticalLCD+0x234>
	else if (__tmp > 65535)
    313e:	6f 81       	ldd	r22, Y+7	; 0x07
    3140:	78 85       	ldd	r23, Y+8	; 0x08
    3142:	89 85       	ldd	r24, Y+9	; 0x09
    3144:	9a 85       	ldd	r25, Y+10	; 0x0a
    3146:	20 e0       	ldi	r18, 0x00	; 0
    3148:	3f ef       	ldi	r19, 0xFF	; 255
    314a:	4f e7       	ldi	r20, 0x7F	; 127
    314c:	57 e4       	ldi	r21, 0x47	; 71
    314e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3152:	18 16       	cp	r1, r24
    3154:	4c f5       	brge	.+82     	; 0x31a8 <APP_vVolumeVerticalLCD+0x220>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3156:	6b 85       	ldd	r22, Y+11	; 0x0b
    3158:	7c 85       	ldd	r23, Y+12	; 0x0c
    315a:	8d 85       	ldd	r24, Y+13	; 0x0d
    315c:	9e 85       	ldd	r25, Y+14	; 0x0e
    315e:	20 e0       	ldi	r18, 0x00	; 0
    3160:	30 e0       	ldi	r19, 0x00	; 0
    3162:	40 e2       	ldi	r20, 0x20	; 32
    3164:	51 e4       	ldi	r21, 0x41	; 65
    3166:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    316a:	dc 01       	movw	r26, r24
    316c:	cb 01       	movw	r24, r22
    316e:	bc 01       	movw	r22, r24
    3170:	cd 01       	movw	r24, r26
    3172:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3176:	dc 01       	movw	r26, r24
    3178:	cb 01       	movw	r24, r22
    317a:	9e 83       	std	Y+6, r25	; 0x06
    317c:	8d 83       	std	Y+5, r24	; 0x05
    317e:	0f c0       	rjmp	.+30     	; 0x319e <APP_vVolumeVerticalLCD+0x216>
    3180:	80 e9       	ldi	r24, 0x90	; 144
    3182:	91 e0       	ldi	r25, 0x01	; 1
    3184:	9c 83       	std	Y+4, r25	; 0x04
    3186:	8b 83       	std	Y+3, r24	; 0x03
    3188:	8b 81       	ldd	r24, Y+3	; 0x03
    318a:	9c 81       	ldd	r25, Y+4	; 0x04
    318c:	01 97       	sbiw	r24, 0x01	; 1
    318e:	f1 f7       	brne	.-4      	; 0x318c <APP_vVolumeVerticalLCD+0x204>
    3190:	9c 83       	std	Y+4, r25	; 0x04
    3192:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3194:	8d 81       	ldd	r24, Y+5	; 0x05
    3196:	9e 81       	ldd	r25, Y+6	; 0x06
    3198:	01 97       	sbiw	r24, 0x01	; 1
    319a:	9e 83       	std	Y+6, r25	; 0x06
    319c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    319e:	8d 81       	ldd	r24, Y+5	; 0x05
    31a0:	9e 81       	ldd	r25, Y+6	; 0x06
    31a2:	00 97       	sbiw	r24, 0x00	; 0
    31a4:	69 f7       	brne	.-38     	; 0x3180 <APP_vVolumeVerticalLCD+0x1f8>
    31a6:	14 c0       	rjmp	.+40     	; 0x31d0 <APP_vVolumeVerticalLCD+0x248>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31a8:	6f 81       	ldd	r22, Y+7	; 0x07
    31aa:	78 85       	ldd	r23, Y+8	; 0x08
    31ac:	89 85       	ldd	r24, Y+9	; 0x09
    31ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    31b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31b4:	dc 01       	movw	r26, r24
    31b6:	cb 01       	movw	r24, r22
    31b8:	9e 83       	std	Y+6, r25	; 0x06
    31ba:	8d 83       	std	Y+5, r24	; 0x05
    31bc:	8d 81       	ldd	r24, Y+5	; 0x05
    31be:	9e 81       	ldd	r25, Y+6	; 0x06
    31c0:	9a 83       	std	Y+2, r25	; 0x02
    31c2:	89 83       	std	Y+1, r24	; 0x01
    31c4:	89 81       	ldd	r24, Y+1	; 0x01
    31c6:	9a 81       	ldd	r25, Y+2	; 0x02
    31c8:	01 97       	sbiw	r24, 0x01	; 1
    31ca:	f1 f7       	brne	.-4      	; 0x31c8 <APP_vVolumeVerticalLCD+0x240>
    31cc:	9a 83       	std	Y+2, r25	; 0x02
    31ce:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(250);
			LedAndBuzzer_vBuzzerClose();
    31d0:	0e 94 99 28 	call	0x5132	; 0x5132 <LedAndBuzzer_vBuzzerClose>
		}

		counter=0;
    31d4:	1a 8a       	std	Y+18, r1	; 0x12
    31d6:	4c cf       	rjmp	.-360    	; 0x3070 <APP_vVolumeVerticalLCD+0xe8>

000031d8 <DIO_vSetPortDirection>:

 * \Parameters (in) : Loc_u8PortID   PORT wanted to change it's Direction
 * 					Loc_u8PortDirection	    choose direction Input or Output
 * \Parameters (out): None
 *******************************************************************************/
void DIO_vSetPortDirection(u8 Loc_u8PortID, u8 Loc_u8PortDirection){
    31d8:	df 93       	push	r29
    31da:	cf 93       	push	r28
    31dc:	00 d0       	rcall	.+0      	; 0x31de <DIO_vSetPortDirection+0x6>
    31de:	cd b7       	in	r28, 0x3d	; 61
    31e0:	de b7       	in	r29, 0x3e	; 62
    31e2:	89 83       	std	Y+1, r24	; 0x01
    31e4:	6a 83       	std	Y+2, r22	; 0x02
	if(Loc_u8PortID<=PortD){
    31e6:	89 81       	ldd	r24, Y+1	; 0x01
    31e8:	84 30       	cpi	r24, 0x04	; 4
    31ea:	f8 f4       	brcc	.+62     	; 0x322a <DIO_vSetPortDirection+0x52>
		if(Loc_u8PortID==PortA){
    31ec:	89 81       	ldd	r24, Y+1	; 0x01
    31ee:	88 23       	and	r24, r24
    31f0:	29 f4       	brne	.+10     	; 0x31fc <DIO_vSetPortDirection+0x24>
			DDRA = Loc_u8PortDirection;
    31f2:	ea e3       	ldi	r30, 0x3A	; 58
    31f4:	f0 e0       	ldi	r31, 0x00	; 0
    31f6:	8a 81       	ldd	r24, Y+2	; 0x02
    31f8:	80 83       	st	Z, r24
    31fa:	17 c0       	rjmp	.+46     	; 0x322a <DIO_vSetPortDirection+0x52>
		}
		else if(Loc_u8PortID==PortB){
    31fc:	89 81       	ldd	r24, Y+1	; 0x01
    31fe:	81 30       	cpi	r24, 0x01	; 1
    3200:	29 f4       	brne	.+10     	; 0x320c <DIO_vSetPortDirection+0x34>
			DDRB = Loc_u8PortDirection;
    3202:	e7 e3       	ldi	r30, 0x37	; 55
    3204:	f0 e0       	ldi	r31, 0x00	; 0
    3206:	8a 81       	ldd	r24, Y+2	; 0x02
    3208:	80 83       	st	Z, r24
    320a:	0f c0       	rjmp	.+30     	; 0x322a <DIO_vSetPortDirection+0x52>
		}
		else if(Loc_u8PortID==PortC){
    320c:	89 81       	ldd	r24, Y+1	; 0x01
    320e:	82 30       	cpi	r24, 0x02	; 2
    3210:	29 f4       	brne	.+10     	; 0x321c <DIO_vSetPortDirection+0x44>
			DDRC = Loc_u8PortDirection;
    3212:	e4 e3       	ldi	r30, 0x34	; 52
    3214:	f0 e0       	ldi	r31, 0x00	; 0
    3216:	8a 81       	ldd	r24, Y+2	; 0x02
    3218:	80 83       	st	Z, r24
    321a:	07 c0       	rjmp	.+14     	; 0x322a <DIO_vSetPortDirection+0x52>
		}
		else if(Loc_u8PortID==PortD){
    321c:	89 81       	ldd	r24, Y+1	; 0x01
    321e:	83 30       	cpi	r24, 0x03	; 3
    3220:	21 f4       	brne	.+8      	; 0x322a <DIO_vSetPortDirection+0x52>
			DDRD = Loc_u8PortDirection;
    3222:	e1 e3       	ldi	r30, 0x31	; 49
    3224:	f0 e0       	ldi	r31, 0x00	; 0
    3226:	8a 81       	ldd	r24, Y+2	; 0x02
    3228:	80 83       	st	Z, r24
		}
	}
	else{
		//do nothing
	}
}
    322a:	0f 90       	pop	r0
    322c:	0f 90       	pop	r0
    322e:	cf 91       	pop	r28
    3230:	df 91       	pop	r29
    3232:	08 95       	ret

00003234 <DIO_vSetPortValue>:

* \Parameters (in) : Loc_u8PortID   PORT wanted to change it's value
* 					Loc_u8PortDirection	    choose value High or Low
* \Parameters (out): None
*******************************************************************************/
void DIO_vSetPortValue(u8 Loc_u8PortID, u8 Loc_u8PortValue){
    3234:	df 93       	push	r29
    3236:	cf 93       	push	r28
    3238:	00 d0       	rcall	.+0      	; 0x323a <DIO_vSetPortValue+0x6>
    323a:	cd b7       	in	r28, 0x3d	; 61
    323c:	de b7       	in	r29, 0x3e	; 62
    323e:	89 83       	std	Y+1, r24	; 0x01
    3240:	6a 83       	std	Y+2, r22	; 0x02
	if(Loc_u8PortID<=PortD){
    3242:	89 81       	ldd	r24, Y+1	; 0x01
    3244:	84 30       	cpi	r24, 0x04	; 4
    3246:	f8 f4       	brcc	.+62     	; 0x3286 <DIO_vSetPortValue+0x52>
		if(Loc_u8PortID==PortA){
    3248:	89 81       	ldd	r24, Y+1	; 0x01
    324a:	88 23       	and	r24, r24
    324c:	29 f4       	brne	.+10     	; 0x3258 <DIO_vSetPortValue+0x24>
			PORTA = Loc_u8PortValue;
    324e:	eb e3       	ldi	r30, 0x3B	; 59
    3250:	f0 e0       	ldi	r31, 0x00	; 0
    3252:	8a 81       	ldd	r24, Y+2	; 0x02
    3254:	80 83       	st	Z, r24
    3256:	17 c0       	rjmp	.+46     	; 0x3286 <DIO_vSetPortValue+0x52>
		}
		else if(Loc_u8PortID==PortB){
    3258:	89 81       	ldd	r24, Y+1	; 0x01
    325a:	81 30       	cpi	r24, 0x01	; 1
    325c:	29 f4       	brne	.+10     	; 0x3268 <DIO_vSetPortValue+0x34>
			PORTB = Loc_u8PortValue;
    325e:	e8 e3       	ldi	r30, 0x38	; 56
    3260:	f0 e0       	ldi	r31, 0x00	; 0
    3262:	8a 81       	ldd	r24, Y+2	; 0x02
    3264:	80 83       	st	Z, r24
    3266:	0f c0       	rjmp	.+30     	; 0x3286 <DIO_vSetPortValue+0x52>
		}
		else if(Loc_u8PortID==PortC){
    3268:	89 81       	ldd	r24, Y+1	; 0x01
    326a:	82 30       	cpi	r24, 0x02	; 2
    326c:	29 f4       	brne	.+10     	; 0x3278 <DIO_vSetPortValue+0x44>
			PORTC = Loc_u8PortValue;
    326e:	e5 e3       	ldi	r30, 0x35	; 53
    3270:	f0 e0       	ldi	r31, 0x00	; 0
    3272:	8a 81       	ldd	r24, Y+2	; 0x02
    3274:	80 83       	st	Z, r24
    3276:	07 c0       	rjmp	.+14     	; 0x3286 <DIO_vSetPortValue+0x52>
		}
		else if(Loc_u8PortID==PortD){
    3278:	89 81       	ldd	r24, Y+1	; 0x01
    327a:	83 30       	cpi	r24, 0x03	; 3
    327c:	21 f4       	brne	.+8      	; 0x3286 <DIO_vSetPortValue+0x52>
			PORTD = Loc_u8PortValue;
    327e:	e2 e3       	ldi	r30, 0x32	; 50
    3280:	f0 e0       	ldi	r31, 0x00	; 0
    3282:	8a 81       	ldd	r24, Y+2	; 0x02
    3284:	80 83       	st	Z, r24
		}
	}
	else{
		//do nothing
	}
}
    3286:	0f 90       	pop	r0
    3288:	0f 90       	pop	r0
    328a:	cf 91       	pop	r28
    328c:	df 91       	pop	r29
    328e:	08 95       	ret

00003290 <DIO_u8PGetPortValue>:

* \Parameters (in) : Loc_u8PortID   PORT wanted to Read it's value
* \Parameters (out): PINx
*  \Return value:   : unsigned char
*******************************************************************************/
u8 DIO_u8PGetPortValue(u8 Loc_u8PortID){
    3290:	df 93       	push	r29
    3292:	cf 93       	push	r28
    3294:	00 d0       	rcall	.+0      	; 0x3296 <DIO_u8PGetPortValue+0x6>
    3296:	cd b7       	in	r28, 0x3d	; 61
    3298:	de b7       	in	r29, 0x3e	; 62
    329a:	89 83       	std	Y+1, r24	; 0x01
	if(Loc_u8PortID<=PortD){
    329c:	89 81       	ldd	r24, Y+1	; 0x01
    329e:	84 30       	cpi	r24, 0x04	; 4
    32a0:	00 f5       	brcc	.+64     	; 0x32e2 <DIO_u8PGetPortValue+0x52>
		if(Loc_u8PortID==PortA){
    32a2:	89 81       	ldd	r24, Y+1	; 0x01
    32a4:	88 23       	and	r24, r24
    32a6:	29 f4       	brne	.+10     	; 0x32b2 <DIO_u8PGetPortValue+0x22>
			return PINA;
    32a8:	e9 e3       	ldi	r30, 0x39	; 57
    32aa:	f0 e0       	ldi	r31, 0x00	; 0
    32ac:	80 81       	ld	r24, Z
    32ae:	8a 83       	std	Y+2, r24	; 0x02
    32b0:	1a c0       	rjmp	.+52     	; 0x32e6 <DIO_u8PGetPortValue+0x56>
		}
		else if(Loc_u8PortID==PortB){
    32b2:	89 81       	ldd	r24, Y+1	; 0x01
    32b4:	81 30       	cpi	r24, 0x01	; 1
    32b6:	29 f4       	brne	.+10     	; 0x32c2 <DIO_u8PGetPortValue+0x32>
			return PINB;
    32b8:	e6 e3       	ldi	r30, 0x36	; 54
    32ba:	f0 e0       	ldi	r31, 0x00	; 0
    32bc:	80 81       	ld	r24, Z
    32be:	8a 83       	std	Y+2, r24	; 0x02
    32c0:	12 c0       	rjmp	.+36     	; 0x32e6 <DIO_u8PGetPortValue+0x56>
		}
		else if(Loc_u8PortID==PortC){
    32c2:	89 81       	ldd	r24, Y+1	; 0x01
    32c4:	82 30       	cpi	r24, 0x02	; 2
    32c6:	29 f4       	brne	.+10     	; 0x32d2 <DIO_u8PGetPortValue+0x42>
			return PINC;
    32c8:	e3 e3       	ldi	r30, 0x33	; 51
    32ca:	f0 e0       	ldi	r31, 0x00	; 0
    32cc:	80 81       	ld	r24, Z
    32ce:	8a 83       	std	Y+2, r24	; 0x02
    32d0:	0a c0       	rjmp	.+20     	; 0x32e6 <DIO_u8PGetPortValue+0x56>
		}
		else if(Loc_u8PortID==PortD){
    32d2:	89 81       	ldd	r24, Y+1	; 0x01
    32d4:	83 30       	cpi	r24, 0x03	; 3
    32d6:	29 f4       	brne	.+10     	; 0x32e2 <DIO_u8PGetPortValue+0x52>
			return PIND;
    32d8:	e0 e3       	ldi	r30, 0x30	; 48
    32da:	f0 e0       	ldi	r31, 0x00	; 0
    32dc:	80 81       	ld	r24, Z
    32de:	8a 83       	std	Y+2, r24	; 0x02
    32e0:	02 c0       	rjmp	.+4      	; 0x32e6 <DIO_u8PGetPortValue+0x56>
		}
	}
	else{
		//do nothing
	}
	return 0xff;
    32e2:	8f ef       	ldi	r24, 0xFF	; 255
    32e4:	8a 83       	std	Y+2, r24	; 0x02
    32e6:	8a 81       	ldd	r24, Y+2	; 0x02
}
    32e8:	0f 90       	pop	r0
    32ea:	0f 90       	pop	r0
    32ec:	cf 91       	pop	r28
    32ee:	df 91       	pop	r29
    32f0:	08 95       	ret

000032f2 <DIO_vTogPortValue>:
*

* \Parameters (in) : Loc_u8PortID  PORT wanted to Toggle it's value
* \Parameters (out): None
*******************************************************************************/
void DIO_vTogPortValue(u8 Loc_u8PortID){
    32f2:	df 93       	push	r29
    32f4:	cf 93       	push	r28
    32f6:	0f 92       	push	r0
    32f8:	cd b7       	in	r28, 0x3d	; 61
    32fa:	de b7       	in	r29, 0x3e	; 62
    32fc:	89 83       	std	Y+1, r24	; 0x01
	if(Loc_u8PortID<=PortD){
    32fe:	89 81       	ldd	r24, Y+1	; 0x01
    3300:	84 30       	cpi	r24, 0x04	; 4
    3302:	58 f5       	brcc	.+86     	; 0x335a <DIO_vTogPortValue+0x68>
		if(Loc_u8PortID==PortA){
    3304:	89 81       	ldd	r24, Y+1	; 0x01
    3306:	88 23       	and	r24, r24
    3308:	41 f4       	brne	.+16     	; 0x331a <DIO_vTogPortValue+0x28>
			PORTA = ~PORTA;
    330a:	ab e3       	ldi	r26, 0x3B	; 59
    330c:	b0 e0       	ldi	r27, 0x00	; 0
    330e:	eb e3       	ldi	r30, 0x3B	; 59
    3310:	f0 e0       	ldi	r31, 0x00	; 0
    3312:	80 81       	ld	r24, Z
    3314:	80 95       	com	r24
    3316:	8c 93       	st	X, r24
    3318:	20 c0       	rjmp	.+64     	; 0x335a <DIO_vTogPortValue+0x68>
		}
		else if(Loc_u8PortID==PortB){
    331a:	89 81       	ldd	r24, Y+1	; 0x01
    331c:	81 30       	cpi	r24, 0x01	; 1
    331e:	41 f4       	brne	.+16     	; 0x3330 <DIO_vTogPortValue+0x3e>
			PORTB = ~PORTB;
    3320:	a8 e3       	ldi	r26, 0x38	; 56
    3322:	b0 e0       	ldi	r27, 0x00	; 0
    3324:	e8 e3       	ldi	r30, 0x38	; 56
    3326:	f0 e0       	ldi	r31, 0x00	; 0
    3328:	80 81       	ld	r24, Z
    332a:	80 95       	com	r24
    332c:	8c 93       	st	X, r24
    332e:	15 c0       	rjmp	.+42     	; 0x335a <DIO_vTogPortValue+0x68>
		}
		else if(Loc_u8PortID==PortC){
    3330:	89 81       	ldd	r24, Y+1	; 0x01
    3332:	82 30       	cpi	r24, 0x02	; 2
    3334:	41 f4       	brne	.+16     	; 0x3346 <DIO_vTogPortValue+0x54>
			PORTC = ~PORTC;
    3336:	a5 e3       	ldi	r26, 0x35	; 53
    3338:	b0 e0       	ldi	r27, 0x00	; 0
    333a:	e5 e3       	ldi	r30, 0x35	; 53
    333c:	f0 e0       	ldi	r31, 0x00	; 0
    333e:	80 81       	ld	r24, Z
    3340:	80 95       	com	r24
    3342:	8c 93       	st	X, r24
    3344:	0a c0       	rjmp	.+20     	; 0x335a <DIO_vTogPortValue+0x68>
		}
		else if(Loc_u8PortID==PortD){
    3346:	89 81       	ldd	r24, Y+1	; 0x01
    3348:	83 30       	cpi	r24, 0x03	; 3
    334a:	39 f4       	brne	.+14     	; 0x335a <DIO_vTogPortValue+0x68>
			PORTD = ~PORTD;
    334c:	a2 e3       	ldi	r26, 0x32	; 50
    334e:	b0 e0       	ldi	r27, 0x00	; 0
    3350:	e2 e3       	ldi	r30, 0x32	; 50
    3352:	f0 e0       	ldi	r31, 0x00	; 0
    3354:	80 81       	ld	r24, Z
    3356:	80 95       	com	r24
    3358:	8c 93       	st	X, r24
		}
	}
	else{
		//do nothing
	}
}
    335a:	0f 90       	pop	r0
    335c:	cf 91       	pop	r28
    335e:	df 91       	pop	r29
    3360:	08 95       	ret

00003362 <DIO_vSetPinDirection>:
* \Parameters (in) : Loc_u8PortID   PIN PORT
* 					Loc_u8PinID		PIN wanted to change it's direction
* 					Loc_u8PinDirection  choose PIN direction (InPut,OutPut)
* \Parameters (out): None
*******************************************************************************/
void DIO_vSetPinDirection(u8 Loc_u8PortID, u8 Loc_u8PinID, u8 Loc_u8PinDirection){
    3362:	df 93       	push	r29
    3364:	cf 93       	push	r28
    3366:	00 d0       	rcall	.+0      	; 0x3368 <DIO_vSetPinDirection+0x6>
    3368:	0f 92       	push	r0
    336a:	cd b7       	in	r28, 0x3d	; 61
    336c:	de b7       	in	r29, 0x3e	; 62
    336e:	89 83       	std	Y+1, r24	; 0x01
    3370:	6a 83       	std	Y+2, r22	; 0x02
    3372:	4b 83       	std	Y+3, r20	; 0x03
	if (Loc_u8PinDirection==Pin_OutPut){
    3374:	8b 81       	ldd	r24, Y+3	; 0x03
    3376:	81 30       	cpi	r24, 0x01	; 1
    3378:	09 f0       	breq	.+2      	; 0x337c <DIO_vSetPinDirection+0x1a>
    337a:	75 c0       	rjmp	.+234    	; 0x3466 <DIO_vSetPinDirection+0x104>

		if(Loc_u8PortID<=PortD){
    337c:	89 81       	ldd	r24, Y+1	; 0x01
    337e:	84 30       	cpi	r24, 0x04	; 4
    3380:	08 f0       	brcs	.+2      	; 0x3384 <DIO_vSetPinDirection+0x22>
    3382:	ec c0       	rjmp	.+472    	; 0x355c <DIO_vSetPinDirection+0x1fa>
			if(Loc_u8PortID==PortA){
    3384:	89 81       	ldd	r24, Y+1	; 0x01
    3386:	88 23       	and	r24, r24
    3388:	c9 f4       	brne	.+50     	; 0x33bc <DIO_vSetPinDirection+0x5a>
				DDRA = SET_BIT(DDRA, Loc_u8PinID);
    338a:	4a e3       	ldi	r20, 0x3A	; 58
    338c:	50 e0       	ldi	r21, 0x00	; 0
    338e:	aa e3       	ldi	r26, 0x3A	; 58
    3390:	b0 e0       	ldi	r27, 0x00	; 0
    3392:	ea e3       	ldi	r30, 0x3A	; 58
    3394:	f0 e0       	ldi	r31, 0x00	; 0
    3396:	80 81       	ld	r24, Z
    3398:	68 2f       	mov	r22, r24
    339a:	8a 81       	ldd	r24, Y+2	; 0x02
    339c:	28 2f       	mov	r18, r24
    339e:	30 e0       	ldi	r19, 0x00	; 0
    33a0:	81 e0       	ldi	r24, 0x01	; 1
    33a2:	90 e0       	ldi	r25, 0x00	; 0
    33a4:	02 2e       	mov	r0, r18
    33a6:	02 c0       	rjmp	.+4      	; 0x33ac <DIO_vSetPinDirection+0x4a>
    33a8:	88 0f       	add	r24, r24
    33aa:	99 1f       	adc	r25, r25
    33ac:	0a 94       	dec	r0
    33ae:	e2 f7       	brpl	.-8      	; 0x33a8 <DIO_vSetPinDirection+0x46>
    33b0:	86 2b       	or	r24, r22
    33b2:	8c 93       	st	X, r24
    33b4:	8c 91       	ld	r24, X
    33b6:	fa 01       	movw	r30, r20
    33b8:	80 83       	st	Z, r24
    33ba:	d0 c0       	rjmp	.+416    	; 0x355c <DIO_vSetPinDirection+0x1fa>
			}
			else if(Loc_u8PortID==PortB){
    33bc:	89 81       	ldd	r24, Y+1	; 0x01
    33be:	81 30       	cpi	r24, 0x01	; 1
    33c0:	c9 f4       	brne	.+50     	; 0x33f4 <DIO_vSetPinDirection+0x92>
				DDRB = SET_BIT(DDRB, Loc_u8PinID);
    33c2:	47 e3       	ldi	r20, 0x37	; 55
    33c4:	50 e0       	ldi	r21, 0x00	; 0
    33c6:	a7 e3       	ldi	r26, 0x37	; 55
    33c8:	b0 e0       	ldi	r27, 0x00	; 0
    33ca:	e7 e3       	ldi	r30, 0x37	; 55
    33cc:	f0 e0       	ldi	r31, 0x00	; 0
    33ce:	80 81       	ld	r24, Z
    33d0:	68 2f       	mov	r22, r24
    33d2:	8a 81       	ldd	r24, Y+2	; 0x02
    33d4:	28 2f       	mov	r18, r24
    33d6:	30 e0       	ldi	r19, 0x00	; 0
    33d8:	81 e0       	ldi	r24, 0x01	; 1
    33da:	90 e0       	ldi	r25, 0x00	; 0
    33dc:	02 2e       	mov	r0, r18
    33de:	02 c0       	rjmp	.+4      	; 0x33e4 <DIO_vSetPinDirection+0x82>
    33e0:	88 0f       	add	r24, r24
    33e2:	99 1f       	adc	r25, r25
    33e4:	0a 94       	dec	r0
    33e6:	e2 f7       	brpl	.-8      	; 0x33e0 <DIO_vSetPinDirection+0x7e>
    33e8:	86 2b       	or	r24, r22
    33ea:	8c 93       	st	X, r24
    33ec:	8c 91       	ld	r24, X
    33ee:	fa 01       	movw	r30, r20
    33f0:	80 83       	st	Z, r24
    33f2:	b4 c0       	rjmp	.+360    	; 0x355c <DIO_vSetPinDirection+0x1fa>
			}
			else if(Loc_u8PortID==PortC){
    33f4:	89 81       	ldd	r24, Y+1	; 0x01
    33f6:	82 30       	cpi	r24, 0x02	; 2
    33f8:	c9 f4       	brne	.+50     	; 0x342c <DIO_vSetPinDirection+0xca>
				DDRC = SET_BIT(DDRC, Loc_u8PinID);
    33fa:	44 e3       	ldi	r20, 0x34	; 52
    33fc:	50 e0       	ldi	r21, 0x00	; 0
    33fe:	a4 e3       	ldi	r26, 0x34	; 52
    3400:	b0 e0       	ldi	r27, 0x00	; 0
    3402:	e4 e3       	ldi	r30, 0x34	; 52
    3404:	f0 e0       	ldi	r31, 0x00	; 0
    3406:	80 81       	ld	r24, Z
    3408:	68 2f       	mov	r22, r24
    340a:	8a 81       	ldd	r24, Y+2	; 0x02
    340c:	28 2f       	mov	r18, r24
    340e:	30 e0       	ldi	r19, 0x00	; 0
    3410:	81 e0       	ldi	r24, 0x01	; 1
    3412:	90 e0       	ldi	r25, 0x00	; 0
    3414:	02 2e       	mov	r0, r18
    3416:	02 c0       	rjmp	.+4      	; 0x341c <DIO_vSetPinDirection+0xba>
    3418:	88 0f       	add	r24, r24
    341a:	99 1f       	adc	r25, r25
    341c:	0a 94       	dec	r0
    341e:	e2 f7       	brpl	.-8      	; 0x3418 <DIO_vSetPinDirection+0xb6>
    3420:	86 2b       	or	r24, r22
    3422:	8c 93       	st	X, r24
    3424:	8c 91       	ld	r24, X
    3426:	fa 01       	movw	r30, r20
    3428:	80 83       	st	Z, r24
    342a:	98 c0       	rjmp	.+304    	; 0x355c <DIO_vSetPinDirection+0x1fa>
			}
			else if(Loc_u8PortID==PortD){
    342c:	89 81       	ldd	r24, Y+1	; 0x01
    342e:	83 30       	cpi	r24, 0x03	; 3
    3430:	09 f0       	breq	.+2      	; 0x3434 <DIO_vSetPinDirection+0xd2>
    3432:	94 c0       	rjmp	.+296    	; 0x355c <DIO_vSetPinDirection+0x1fa>
				DDRD = SET_BIT(DDRD, Loc_u8PinID);
    3434:	41 e3       	ldi	r20, 0x31	; 49
    3436:	50 e0       	ldi	r21, 0x00	; 0
    3438:	a1 e3       	ldi	r26, 0x31	; 49
    343a:	b0 e0       	ldi	r27, 0x00	; 0
    343c:	e1 e3       	ldi	r30, 0x31	; 49
    343e:	f0 e0       	ldi	r31, 0x00	; 0
    3440:	80 81       	ld	r24, Z
    3442:	68 2f       	mov	r22, r24
    3444:	8a 81       	ldd	r24, Y+2	; 0x02
    3446:	28 2f       	mov	r18, r24
    3448:	30 e0       	ldi	r19, 0x00	; 0
    344a:	81 e0       	ldi	r24, 0x01	; 1
    344c:	90 e0       	ldi	r25, 0x00	; 0
    344e:	02 2e       	mov	r0, r18
    3450:	02 c0       	rjmp	.+4      	; 0x3456 <DIO_vSetPinDirection+0xf4>
    3452:	88 0f       	add	r24, r24
    3454:	99 1f       	adc	r25, r25
    3456:	0a 94       	dec	r0
    3458:	e2 f7       	brpl	.-8      	; 0x3452 <DIO_vSetPinDirection+0xf0>
    345a:	86 2b       	or	r24, r22
    345c:	8c 93       	st	X, r24
    345e:	8c 91       	ld	r24, X
    3460:	fa 01       	movw	r30, r20
    3462:	80 83       	st	Z, r24
    3464:	7b c0       	rjmp	.+246    	; 0x355c <DIO_vSetPinDirection+0x1fa>
		else{
			//do nothing
		}

	}
	else if(Loc_u8PinDirection==Pin_InPut){
    3466:	8b 81       	ldd	r24, Y+3	; 0x03
    3468:	88 23       	and	r24, r24
    346a:	09 f0       	breq	.+2      	; 0x346e <DIO_vSetPinDirection+0x10c>
    346c:	77 c0       	rjmp	.+238    	; 0x355c <DIO_vSetPinDirection+0x1fa>

		if(Loc_u8PortID<=PortD){
    346e:	89 81       	ldd	r24, Y+1	; 0x01
    3470:	84 30       	cpi	r24, 0x04	; 4
    3472:	08 f0       	brcs	.+2      	; 0x3476 <DIO_vSetPinDirection+0x114>
    3474:	73 c0       	rjmp	.+230    	; 0x355c <DIO_vSetPinDirection+0x1fa>
			if(Loc_u8PortID==PortA){
    3476:	89 81       	ldd	r24, Y+1	; 0x01
    3478:	88 23       	and	r24, r24
    347a:	d1 f4       	brne	.+52     	; 0x34b0 <DIO_vSetPinDirection+0x14e>
				DDRA = CLR_BIT(DDRA, Loc_u8PinID);
    347c:	4a e3       	ldi	r20, 0x3A	; 58
    347e:	50 e0       	ldi	r21, 0x00	; 0
    3480:	aa e3       	ldi	r26, 0x3A	; 58
    3482:	b0 e0       	ldi	r27, 0x00	; 0
    3484:	ea e3       	ldi	r30, 0x3A	; 58
    3486:	f0 e0       	ldi	r31, 0x00	; 0
    3488:	80 81       	ld	r24, Z
    348a:	68 2f       	mov	r22, r24
    348c:	8a 81       	ldd	r24, Y+2	; 0x02
    348e:	28 2f       	mov	r18, r24
    3490:	30 e0       	ldi	r19, 0x00	; 0
    3492:	81 e0       	ldi	r24, 0x01	; 1
    3494:	90 e0       	ldi	r25, 0x00	; 0
    3496:	02 2e       	mov	r0, r18
    3498:	02 c0       	rjmp	.+4      	; 0x349e <DIO_vSetPinDirection+0x13c>
    349a:	88 0f       	add	r24, r24
    349c:	99 1f       	adc	r25, r25
    349e:	0a 94       	dec	r0
    34a0:	e2 f7       	brpl	.-8      	; 0x349a <DIO_vSetPinDirection+0x138>
    34a2:	80 95       	com	r24
    34a4:	86 23       	and	r24, r22
    34a6:	8c 93       	st	X, r24
    34a8:	8c 91       	ld	r24, X
    34aa:	fa 01       	movw	r30, r20
    34ac:	80 83       	st	Z, r24
    34ae:	56 c0       	rjmp	.+172    	; 0x355c <DIO_vSetPinDirection+0x1fa>
			}
			else if(Loc_u8PortID==PortB){
    34b0:	89 81       	ldd	r24, Y+1	; 0x01
    34b2:	81 30       	cpi	r24, 0x01	; 1
    34b4:	d1 f4       	brne	.+52     	; 0x34ea <DIO_vSetPinDirection+0x188>
				DDRB = CLR_BIT(DDRB, Loc_u8PinID);
    34b6:	47 e3       	ldi	r20, 0x37	; 55
    34b8:	50 e0       	ldi	r21, 0x00	; 0
    34ba:	a7 e3       	ldi	r26, 0x37	; 55
    34bc:	b0 e0       	ldi	r27, 0x00	; 0
    34be:	e7 e3       	ldi	r30, 0x37	; 55
    34c0:	f0 e0       	ldi	r31, 0x00	; 0
    34c2:	80 81       	ld	r24, Z
    34c4:	68 2f       	mov	r22, r24
    34c6:	8a 81       	ldd	r24, Y+2	; 0x02
    34c8:	28 2f       	mov	r18, r24
    34ca:	30 e0       	ldi	r19, 0x00	; 0
    34cc:	81 e0       	ldi	r24, 0x01	; 1
    34ce:	90 e0       	ldi	r25, 0x00	; 0
    34d0:	02 2e       	mov	r0, r18
    34d2:	02 c0       	rjmp	.+4      	; 0x34d8 <DIO_vSetPinDirection+0x176>
    34d4:	88 0f       	add	r24, r24
    34d6:	99 1f       	adc	r25, r25
    34d8:	0a 94       	dec	r0
    34da:	e2 f7       	brpl	.-8      	; 0x34d4 <DIO_vSetPinDirection+0x172>
    34dc:	80 95       	com	r24
    34de:	86 23       	and	r24, r22
    34e0:	8c 93       	st	X, r24
    34e2:	8c 91       	ld	r24, X
    34e4:	fa 01       	movw	r30, r20
    34e6:	80 83       	st	Z, r24
    34e8:	39 c0       	rjmp	.+114    	; 0x355c <DIO_vSetPinDirection+0x1fa>
			}
			else if(Loc_u8PortID==PortC){
    34ea:	89 81       	ldd	r24, Y+1	; 0x01
    34ec:	82 30       	cpi	r24, 0x02	; 2
    34ee:	d1 f4       	brne	.+52     	; 0x3524 <DIO_vSetPinDirection+0x1c2>
				DDRC = CLR_BIT(DDRC, Loc_u8PinID);
    34f0:	44 e3       	ldi	r20, 0x34	; 52
    34f2:	50 e0       	ldi	r21, 0x00	; 0
    34f4:	a4 e3       	ldi	r26, 0x34	; 52
    34f6:	b0 e0       	ldi	r27, 0x00	; 0
    34f8:	e4 e3       	ldi	r30, 0x34	; 52
    34fa:	f0 e0       	ldi	r31, 0x00	; 0
    34fc:	80 81       	ld	r24, Z
    34fe:	68 2f       	mov	r22, r24
    3500:	8a 81       	ldd	r24, Y+2	; 0x02
    3502:	28 2f       	mov	r18, r24
    3504:	30 e0       	ldi	r19, 0x00	; 0
    3506:	81 e0       	ldi	r24, 0x01	; 1
    3508:	90 e0       	ldi	r25, 0x00	; 0
    350a:	02 2e       	mov	r0, r18
    350c:	02 c0       	rjmp	.+4      	; 0x3512 <DIO_vSetPinDirection+0x1b0>
    350e:	88 0f       	add	r24, r24
    3510:	99 1f       	adc	r25, r25
    3512:	0a 94       	dec	r0
    3514:	e2 f7       	brpl	.-8      	; 0x350e <DIO_vSetPinDirection+0x1ac>
    3516:	80 95       	com	r24
    3518:	86 23       	and	r24, r22
    351a:	8c 93       	st	X, r24
    351c:	8c 91       	ld	r24, X
    351e:	fa 01       	movw	r30, r20
    3520:	80 83       	st	Z, r24
    3522:	1c c0       	rjmp	.+56     	; 0x355c <DIO_vSetPinDirection+0x1fa>
			}
			else if(Loc_u8PortID==PortD){
    3524:	89 81       	ldd	r24, Y+1	; 0x01
    3526:	83 30       	cpi	r24, 0x03	; 3
    3528:	c9 f4       	brne	.+50     	; 0x355c <DIO_vSetPinDirection+0x1fa>
				DDRD = CLR_BIT(DDRD, Loc_u8PinID);
    352a:	41 e3       	ldi	r20, 0x31	; 49
    352c:	50 e0       	ldi	r21, 0x00	; 0
    352e:	a1 e3       	ldi	r26, 0x31	; 49
    3530:	b0 e0       	ldi	r27, 0x00	; 0
    3532:	e1 e3       	ldi	r30, 0x31	; 49
    3534:	f0 e0       	ldi	r31, 0x00	; 0
    3536:	80 81       	ld	r24, Z
    3538:	68 2f       	mov	r22, r24
    353a:	8a 81       	ldd	r24, Y+2	; 0x02
    353c:	28 2f       	mov	r18, r24
    353e:	30 e0       	ldi	r19, 0x00	; 0
    3540:	81 e0       	ldi	r24, 0x01	; 1
    3542:	90 e0       	ldi	r25, 0x00	; 0
    3544:	02 2e       	mov	r0, r18
    3546:	02 c0       	rjmp	.+4      	; 0x354c <DIO_vSetPinDirection+0x1ea>
    3548:	88 0f       	add	r24, r24
    354a:	99 1f       	adc	r25, r25
    354c:	0a 94       	dec	r0
    354e:	e2 f7       	brpl	.-8      	; 0x3548 <DIO_vSetPinDirection+0x1e6>
    3550:	80 95       	com	r24
    3552:	86 23       	and	r24, r22
    3554:	8c 93       	st	X, r24
    3556:	8c 91       	ld	r24, X
    3558:	fa 01       	movw	r30, r20
    355a:	80 83       	st	Z, r24
	}
	else{
		//do nothing
	}

}
    355c:	0f 90       	pop	r0
    355e:	0f 90       	pop	r0
    3560:	0f 90       	pop	r0
    3562:	cf 91       	pop	r28
    3564:	df 91       	pop	r29
    3566:	08 95       	ret

00003568 <DIO_vSetPinValue>:
* \Parameters (in) : Loc_u8PortID   PIN PORT
* 					Loc_u8PinID		PIN wanted to change it's value
* 					Loc_u8PinDirection  choose PIN value (Pin_High,Pin_Low)
* \Parameters (out): None
*******************************************************************************/
void DIO_vSetPinValue(u8 Loc_u8PortID, u8 Loc_u8PinID, u8 Loc_u8PinValue){
    3568:	df 93       	push	r29
    356a:	cf 93       	push	r28
    356c:	00 d0       	rcall	.+0      	; 0x356e <DIO_vSetPinValue+0x6>
    356e:	0f 92       	push	r0
    3570:	cd b7       	in	r28, 0x3d	; 61
    3572:	de b7       	in	r29, 0x3e	; 62
    3574:	89 83       	std	Y+1, r24	; 0x01
    3576:	6a 83       	std	Y+2, r22	; 0x02
    3578:	4b 83       	std	Y+3, r20	; 0x03
	if(Loc_u8PinValue==Pin_High){
    357a:	8b 81       	ldd	r24, Y+3	; 0x03
    357c:	81 30       	cpi	r24, 0x01	; 1
    357e:	09 f0       	breq	.+2      	; 0x3582 <DIO_vSetPinValue+0x1a>
    3580:	61 c0       	rjmp	.+194    	; 0x3644 <DIO_vSetPinValue+0xdc>
		if(Loc_u8PortID<=PortD){
    3582:	89 81       	ldd	r24, Y+1	; 0x01
    3584:	84 30       	cpi	r24, 0x04	; 4
    3586:	08 f0       	brcs	.+2      	; 0x358a <DIO_vSetPinValue+0x22>
    3588:	c4 c0       	rjmp	.+392    	; 0x3712 <DIO_vSetPinValue+0x1aa>
			if(Loc_u8PortID==PortA){
    358a:	89 81       	ldd	r24, Y+1	; 0x01
    358c:	88 23       	and	r24, r24
    358e:	a1 f4       	brne	.+40     	; 0x35b8 <DIO_vSetPinValue+0x50>
				SET_BIT(PORTA, Loc_u8PinID);
    3590:	ab e3       	ldi	r26, 0x3B	; 59
    3592:	b0 e0       	ldi	r27, 0x00	; 0
    3594:	eb e3       	ldi	r30, 0x3B	; 59
    3596:	f0 e0       	ldi	r31, 0x00	; 0
    3598:	80 81       	ld	r24, Z
    359a:	48 2f       	mov	r20, r24
    359c:	8a 81       	ldd	r24, Y+2	; 0x02
    359e:	28 2f       	mov	r18, r24
    35a0:	30 e0       	ldi	r19, 0x00	; 0
    35a2:	81 e0       	ldi	r24, 0x01	; 1
    35a4:	90 e0       	ldi	r25, 0x00	; 0
    35a6:	02 2e       	mov	r0, r18
    35a8:	02 c0       	rjmp	.+4      	; 0x35ae <DIO_vSetPinValue+0x46>
    35aa:	88 0f       	add	r24, r24
    35ac:	99 1f       	adc	r25, r25
    35ae:	0a 94       	dec	r0
    35b0:	e2 f7       	brpl	.-8      	; 0x35aa <DIO_vSetPinValue+0x42>
    35b2:	84 2b       	or	r24, r20
    35b4:	8c 93       	st	X, r24
    35b6:	ad c0       	rjmp	.+346    	; 0x3712 <DIO_vSetPinValue+0x1aa>
			}
			else if(Loc_u8PortID==PortB){
    35b8:	89 81       	ldd	r24, Y+1	; 0x01
    35ba:	81 30       	cpi	r24, 0x01	; 1
    35bc:	a1 f4       	brne	.+40     	; 0x35e6 <DIO_vSetPinValue+0x7e>
				SET_BIT(PORTB, Loc_u8PinID);
    35be:	a8 e3       	ldi	r26, 0x38	; 56
    35c0:	b0 e0       	ldi	r27, 0x00	; 0
    35c2:	e8 e3       	ldi	r30, 0x38	; 56
    35c4:	f0 e0       	ldi	r31, 0x00	; 0
    35c6:	80 81       	ld	r24, Z
    35c8:	48 2f       	mov	r20, r24
    35ca:	8a 81       	ldd	r24, Y+2	; 0x02
    35cc:	28 2f       	mov	r18, r24
    35ce:	30 e0       	ldi	r19, 0x00	; 0
    35d0:	81 e0       	ldi	r24, 0x01	; 1
    35d2:	90 e0       	ldi	r25, 0x00	; 0
    35d4:	02 2e       	mov	r0, r18
    35d6:	02 c0       	rjmp	.+4      	; 0x35dc <DIO_vSetPinValue+0x74>
    35d8:	88 0f       	add	r24, r24
    35da:	99 1f       	adc	r25, r25
    35dc:	0a 94       	dec	r0
    35de:	e2 f7       	brpl	.-8      	; 0x35d8 <DIO_vSetPinValue+0x70>
    35e0:	84 2b       	or	r24, r20
    35e2:	8c 93       	st	X, r24
    35e4:	96 c0       	rjmp	.+300    	; 0x3712 <DIO_vSetPinValue+0x1aa>
			}
			else if(Loc_u8PortID==PortC){
    35e6:	89 81       	ldd	r24, Y+1	; 0x01
    35e8:	82 30       	cpi	r24, 0x02	; 2
    35ea:	a1 f4       	brne	.+40     	; 0x3614 <DIO_vSetPinValue+0xac>
				SET_BIT(PORTC, Loc_u8PinID);
    35ec:	a5 e3       	ldi	r26, 0x35	; 53
    35ee:	b0 e0       	ldi	r27, 0x00	; 0
    35f0:	e5 e3       	ldi	r30, 0x35	; 53
    35f2:	f0 e0       	ldi	r31, 0x00	; 0
    35f4:	80 81       	ld	r24, Z
    35f6:	48 2f       	mov	r20, r24
    35f8:	8a 81       	ldd	r24, Y+2	; 0x02
    35fa:	28 2f       	mov	r18, r24
    35fc:	30 e0       	ldi	r19, 0x00	; 0
    35fe:	81 e0       	ldi	r24, 0x01	; 1
    3600:	90 e0       	ldi	r25, 0x00	; 0
    3602:	02 2e       	mov	r0, r18
    3604:	02 c0       	rjmp	.+4      	; 0x360a <DIO_vSetPinValue+0xa2>
    3606:	88 0f       	add	r24, r24
    3608:	99 1f       	adc	r25, r25
    360a:	0a 94       	dec	r0
    360c:	e2 f7       	brpl	.-8      	; 0x3606 <DIO_vSetPinValue+0x9e>
    360e:	84 2b       	or	r24, r20
    3610:	8c 93       	st	X, r24
    3612:	7f c0       	rjmp	.+254    	; 0x3712 <DIO_vSetPinValue+0x1aa>
			}
			else if(Loc_u8PortID==PortD){
    3614:	89 81       	ldd	r24, Y+1	; 0x01
    3616:	83 30       	cpi	r24, 0x03	; 3
    3618:	09 f0       	breq	.+2      	; 0x361c <DIO_vSetPinValue+0xb4>
    361a:	7b c0       	rjmp	.+246    	; 0x3712 <DIO_vSetPinValue+0x1aa>
				SET_BIT(PORTD, Loc_u8PinID);
    361c:	a2 e3       	ldi	r26, 0x32	; 50
    361e:	b0 e0       	ldi	r27, 0x00	; 0
    3620:	e2 e3       	ldi	r30, 0x32	; 50
    3622:	f0 e0       	ldi	r31, 0x00	; 0
    3624:	80 81       	ld	r24, Z
    3626:	48 2f       	mov	r20, r24
    3628:	8a 81       	ldd	r24, Y+2	; 0x02
    362a:	28 2f       	mov	r18, r24
    362c:	30 e0       	ldi	r19, 0x00	; 0
    362e:	81 e0       	ldi	r24, 0x01	; 1
    3630:	90 e0       	ldi	r25, 0x00	; 0
    3632:	02 2e       	mov	r0, r18
    3634:	02 c0       	rjmp	.+4      	; 0x363a <DIO_vSetPinValue+0xd2>
    3636:	88 0f       	add	r24, r24
    3638:	99 1f       	adc	r25, r25
    363a:	0a 94       	dec	r0
    363c:	e2 f7       	brpl	.-8      	; 0x3636 <DIO_vSetPinValue+0xce>
    363e:	84 2b       	or	r24, r20
    3640:	8c 93       	st	X, r24
    3642:	67 c0       	rjmp	.+206    	; 0x3712 <DIO_vSetPinValue+0x1aa>
		}
		else{
			//do nothing
		}
	}
	else if(Loc_u8PinValue==Pin_Low){
    3644:	8b 81       	ldd	r24, Y+3	; 0x03
    3646:	88 23       	and	r24, r24
    3648:	09 f0       	breq	.+2      	; 0x364c <DIO_vSetPinValue+0xe4>
    364a:	63 c0       	rjmp	.+198    	; 0x3712 <DIO_vSetPinValue+0x1aa>

		if(Loc_u8PortID<=PortD){
    364c:	89 81       	ldd	r24, Y+1	; 0x01
    364e:	84 30       	cpi	r24, 0x04	; 4
    3650:	08 f0       	brcs	.+2      	; 0x3654 <DIO_vSetPinValue+0xec>
    3652:	5f c0       	rjmp	.+190    	; 0x3712 <DIO_vSetPinValue+0x1aa>
			if(Loc_u8PortID==PortA){
    3654:	89 81       	ldd	r24, Y+1	; 0x01
    3656:	88 23       	and	r24, r24
    3658:	a9 f4       	brne	.+42     	; 0x3684 <DIO_vSetPinValue+0x11c>
				CLR_BIT(PORTA, Loc_u8PinID);
    365a:	ab e3       	ldi	r26, 0x3B	; 59
    365c:	b0 e0       	ldi	r27, 0x00	; 0
    365e:	eb e3       	ldi	r30, 0x3B	; 59
    3660:	f0 e0       	ldi	r31, 0x00	; 0
    3662:	80 81       	ld	r24, Z
    3664:	48 2f       	mov	r20, r24
    3666:	8a 81       	ldd	r24, Y+2	; 0x02
    3668:	28 2f       	mov	r18, r24
    366a:	30 e0       	ldi	r19, 0x00	; 0
    366c:	81 e0       	ldi	r24, 0x01	; 1
    366e:	90 e0       	ldi	r25, 0x00	; 0
    3670:	02 2e       	mov	r0, r18
    3672:	02 c0       	rjmp	.+4      	; 0x3678 <DIO_vSetPinValue+0x110>
    3674:	88 0f       	add	r24, r24
    3676:	99 1f       	adc	r25, r25
    3678:	0a 94       	dec	r0
    367a:	e2 f7       	brpl	.-8      	; 0x3674 <DIO_vSetPinValue+0x10c>
    367c:	80 95       	com	r24
    367e:	84 23       	and	r24, r20
    3680:	8c 93       	st	X, r24
    3682:	47 c0       	rjmp	.+142    	; 0x3712 <DIO_vSetPinValue+0x1aa>
			}
			else if(Loc_u8PortID==PortB){
    3684:	89 81       	ldd	r24, Y+1	; 0x01
    3686:	81 30       	cpi	r24, 0x01	; 1
    3688:	a9 f4       	brne	.+42     	; 0x36b4 <DIO_vSetPinValue+0x14c>
				CLR_BIT(PORTB, Loc_u8PinID);
    368a:	a8 e3       	ldi	r26, 0x38	; 56
    368c:	b0 e0       	ldi	r27, 0x00	; 0
    368e:	e8 e3       	ldi	r30, 0x38	; 56
    3690:	f0 e0       	ldi	r31, 0x00	; 0
    3692:	80 81       	ld	r24, Z
    3694:	48 2f       	mov	r20, r24
    3696:	8a 81       	ldd	r24, Y+2	; 0x02
    3698:	28 2f       	mov	r18, r24
    369a:	30 e0       	ldi	r19, 0x00	; 0
    369c:	81 e0       	ldi	r24, 0x01	; 1
    369e:	90 e0       	ldi	r25, 0x00	; 0
    36a0:	02 2e       	mov	r0, r18
    36a2:	02 c0       	rjmp	.+4      	; 0x36a8 <DIO_vSetPinValue+0x140>
    36a4:	88 0f       	add	r24, r24
    36a6:	99 1f       	adc	r25, r25
    36a8:	0a 94       	dec	r0
    36aa:	e2 f7       	brpl	.-8      	; 0x36a4 <DIO_vSetPinValue+0x13c>
    36ac:	80 95       	com	r24
    36ae:	84 23       	and	r24, r20
    36b0:	8c 93       	st	X, r24
    36b2:	2f c0       	rjmp	.+94     	; 0x3712 <DIO_vSetPinValue+0x1aa>
			}
			else if(Loc_u8PortID==PortC){
    36b4:	89 81       	ldd	r24, Y+1	; 0x01
    36b6:	82 30       	cpi	r24, 0x02	; 2
    36b8:	a9 f4       	brne	.+42     	; 0x36e4 <DIO_vSetPinValue+0x17c>
				CLR_BIT(PORTC, Loc_u8PinID);
    36ba:	a5 e3       	ldi	r26, 0x35	; 53
    36bc:	b0 e0       	ldi	r27, 0x00	; 0
    36be:	e5 e3       	ldi	r30, 0x35	; 53
    36c0:	f0 e0       	ldi	r31, 0x00	; 0
    36c2:	80 81       	ld	r24, Z
    36c4:	48 2f       	mov	r20, r24
    36c6:	8a 81       	ldd	r24, Y+2	; 0x02
    36c8:	28 2f       	mov	r18, r24
    36ca:	30 e0       	ldi	r19, 0x00	; 0
    36cc:	81 e0       	ldi	r24, 0x01	; 1
    36ce:	90 e0       	ldi	r25, 0x00	; 0
    36d0:	02 2e       	mov	r0, r18
    36d2:	02 c0       	rjmp	.+4      	; 0x36d8 <DIO_vSetPinValue+0x170>
    36d4:	88 0f       	add	r24, r24
    36d6:	99 1f       	adc	r25, r25
    36d8:	0a 94       	dec	r0
    36da:	e2 f7       	brpl	.-8      	; 0x36d4 <DIO_vSetPinValue+0x16c>
    36dc:	80 95       	com	r24
    36de:	84 23       	and	r24, r20
    36e0:	8c 93       	st	X, r24
    36e2:	17 c0       	rjmp	.+46     	; 0x3712 <DIO_vSetPinValue+0x1aa>
			}
			else if(Loc_u8PortID==PortD){
    36e4:	89 81       	ldd	r24, Y+1	; 0x01
    36e6:	83 30       	cpi	r24, 0x03	; 3
    36e8:	a1 f4       	brne	.+40     	; 0x3712 <DIO_vSetPinValue+0x1aa>
				CLR_BIT(PORTD, Loc_u8PinID);
    36ea:	a2 e3       	ldi	r26, 0x32	; 50
    36ec:	b0 e0       	ldi	r27, 0x00	; 0
    36ee:	e2 e3       	ldi	r30, 0x32	; 50
    36f0:	f0 e0       	ldi	r31, 0x00	; 0
    36f2:	80 81       	ld	r24, Z
    36f4:	48 2f       	mov	r20, r24
    36f6:	8a 81       	ldd	r24, Y+2	; 0x02
    36f8:	28 2f       	mov	r18, r24
    36fa:	30 e0       	ldi	r19, 0x00	; 0
    36fc:	81 e0       	ldi	r24, 0x01	; 1
    36fe:	90 e0       	ldi	r25, 0x00	; 0
    3700:	02 2e       	mov	r0, r18
    3702:	02 c0       	rjmp	.+4      	; 0x3708 <DIO_vSetPinValue+0x1a0>
    3704:	88 0f       	add	r24, r24
    3706:	99 1f       	adc	r25, r25
    3708:	0a 94       	dec	r0
    370a:	e2 f7       	brpl	.-8      	; 0x3704 <DIO_vSetPinValue+0x19c>
    370c:	80 95       	com	r24
    370e:	84 23       	and	r24, r20
    3710:	8c 93       	st	X, r24
		}
		else{
			//do nothing
		}
	}
}
    3712:	0f 90       	pop	r0
    3714:	0f 90       	pop	r0
    3716:	0f 90       	pop	r0
    3718:	cf 91       	pop	r28
    371a:	df 91       	pop	r29
    371c:	08 95       	ret

0000371e <DIO_u8PGetPinValue>:
* \Parameters (in) : Loc_u8PortID   PIN PORT
* 					Loc_u8PinID		PIN wanted to read it's value
* \Parameters (out): PINx  value(0,1)
*  \Return value:   : unsigned char
*******************************************************************************/
u8 DIO_u8PGetPinValue(u8 Loc_u8PortID, u8 Loc_u8PinID){
    371e:	df 93       	push	r29
    3720:	cf 93       	push	r28
    3722:	00 d0       	rcall	.+0      	; 0x3724 <DIO_u8PGetPinValue+0x6>
    3724:	0f 92       	push	r0
    3726:	cd b7       	in	r28, 0x3d	; 61
    3728:	de b7       	in	r29, 0x3e	; 62
    372a:	89 83       	std	Y+1, r24	; 0x01
    372c:	6a 83       	std	Y+2, r22	; 0x02
	if(Loc_u8PortID<=PortD){
    372e:	89 81       	ldd	r24, Y+1	; 0x01
    3730:	84 30       	cpi	r24, 0x04	; 4
    3732:	08 f0       	brcs	.+2      	; 0x3736 <DIO_u8PGetPinValue+0x18>
    3734:	58 c0       	rjmp	.+176    	; 0x37e6 <DIO_u8PGetPinValue+0xc8>
		if(Loc_u8PortID==PortA){
    3736:	89 81       	ldd	r24, Y+1	; 0x01
    3738:	88 23       	and	r24, r24
    373a:	99 f4       	brne	.+38     	; 0x3762 <DIO_u8PGetPinValue+0x44>
			return GET_BIT(PINA, Loc_u8PinID);
    373c:	e9 e3       	ldi	r30, 0x39	; 57
    373e:	f0 e0       	ldi	r31, 0x00	; 0
    3740:	80 81       	ld	r24, Z
    3742:	28 2f       	mov	r18, r24
    3744:	30 e0       	ldi	r19, 0x00	; 0
    3746:	8a 81       	ldd	r24, Y+2	; 0x02
    3748:	88 2f       	mov	r24, r24
    374a:	90 e0       	ldi	r25, 0x00	; 0
    374c:	a9 01       	movw	r20, r18
    374e:	02 c0       	rjmp	.+4      	; 0x3754 <DIO_u8PGetPinValue+0x36>
    3750:	55 95       	asr	r21
    3752:	47 95       	ror	r20
    3754:	8a 95       	dec	r24
    3756:	e2 f7       	brpl	.-8      	; 0x3750 <DIO_u8PGetPinValue+0x32>
    3758:	ca 01       	movw	r24, r20
    375a:	58 2f       	mov	r21, r24
    375c:	51 70       	andi	r21, 0x01	; 1
    375e:	5b 83       	std	Y+3, r21	; 0x03
    3760:	44 c0       	rjmp	.+136    	; 0x37ea <DIO_u8PGetPinValue+0xcc>
		}
		else if(Loc_u8PortID==PortB){
    3762:	89 81       	ldd	r24, Y+1	; 0x01
    3764:	81 30       	cpi	r24, 0x01	; 1
    3766:	99 f4       	brne	.+38     	; 0x378e <DIO_u8PGetPinValue+0x70>
			return GET_BIT(PINB, Loc_u8PinID);
    3768:	e6 e3       	ldi	r30, 0x36	; 54
    376a:	f0 e0       	ldi	r31, 0x00	; 0
    376c:	80 81       	ld	r24, Z
    376e:	28 2f       	mov	r18, r24
    3770:	30 e0       	ldi	r19, 0x00	; 0
    3772:	8a 81       	ldd	r24, Y+2	; 0x02
    3774:	88 2f       	mov	r24, r24
    3776:	90 e0       	ldi	r25, 0x00	; 0
    3778:	a9 01       	movw	r20, r18
    377a:	02 c0       	rjmp	.+4      	; 0x3780 <DIO_u8PGetPinValue+0x62>
    377c:	55 95       	asr	r21
    377e:	47 95       	ror	r20
    3780:	8a 95       	dec	r24
    3782:	e2 f7       	brpl	.-8      	; 0x377c <DIO_u8PGetPinValue+0x5e>
    3784:	ca 01       	movw	r24, r20
    3786:	58 2f       	mov	r21, r24
    3788:	51 70       	andi	r21, 0x01	; 1
    378a:	5b 83       	std	Y+3, r21	; 0x03
    378c:	2e c0       	rjmp	.+92     	; 0x37ea <DIO_u8PGetPinValue+0xcc>
		}
		else if(Loc_u8PortID==PortC){
    378e:	89 81       	ldd	r24, Y+1	; 0x01
    3790:	82 30       	cpi	r24, 0x02	; 2
    3792:	99 f4       	brne	.+38     	; 0x37ba <DIO_u8PGetPinValue+0x9c>
			return GET_BIT(PINC, Loc_u8PinID);
    3794:	e3 e3       	ldi	r30, 0x33	; 51
    3796:	f0 e0       	ldi	r31, 0x00	; 0
    3798:	80 81       	ld	r24, Z
    379a:	28 2f       	mov	r18, r24
    379c:	30 e0       	ldi	r19, 0x00	; 0
    379e:	8a 81       	ldd	r24, Y+2	; 0x02
    37a0:	88 2f       	mov	r24, r24
    37a2:	90 e0       	ldi	r25, 0x00	; 0
    37a4:	a9 01       	movw	r20, r18
    37a6:	02 c0       	rjmp	.+4      	; 0x37ac <DIO_u8PGetPinValue+0x8e>
    37a8:	55 95       	asr	r21
    37aa:	47 95       	ror	r20
    37ac:	8a 95       	dec	r24
    37ae:	e2 f7       	brpl	.-8      	; 0x37a8 <DIO_u8PGetPinValue+0x8a>
    37b0:	ca 01       	movw	r24, r20
    37b2:	58 2f       	mov	r21, r24
    37b4:	51 70       	andi	r21, 0x01	; 1
    37b6:	5b 83       	std	Y+3, r21	; 0x03
    37b8:	18 c0       	rjmp	.+48     	; 0x37ea <DIO_u8PGetPinValue+0xcc>
		}
		else if(Loc_u8PortID==PortD){
    37ba:	89 81       	ldd	r24, Y+1	; 0x01
    37bc:	83 30       	cpi	r24, 0x03	; 3
    37be:	99 f4       	brne	.+38     	; 0x37e6 <DIO_u8PGetPinValue+0xc8>
			return GET_BIT(PIND, Loc_u8PinID);
    37c0:	e0 e3       	ldi	r30, 0x30	; 48
    37c2:	f0 e0       	ldi	r31, 0x00	; 0
    37c4:	80 81       	ld	r24, Z
    37c6:	28 2f       	mov	r18, r24
    37c8:	30 e0       	ldi	r19, 0x00	; 0
    37ca:	8a 81       	ldd	r24, Y+2	; 0x02
    37cc:	88 2f       	mov	r24, r24
    37ce:	90 e0       	ldi	r25, 0x00	; 0
    37d0:	a9 01       	movw	r20, r18
    37d2:	02 c0       	rjmp	.+4      	; 0x37d8 <DIO_u8PGetPinValue+0xba>
    37d4:	55 95       	asr	r21
    37d6:	47 95       	ror	r20
    37d8:	8a 95       	dec	r24
    37da:	e2 f7       	brpl	.-8      	; 0x37d4 <DIO_u8PGetPinValue+0xb6>
    37dc:	ca 01       	movw	r24, r20
    37de:	58 2f       	mov	r21, r24
    37e0:	51 70       	andi	r21, 0x01	; 1
    37e2:	5b 83       	std	Y+3, r21	; 0x03
    37e4:	02 c0       	rjmp	.+4      	; 0x37ea <DIO_u8PGetPinValue+0xcc>
		}
	}
	else{
		//do nothing
	}
	return 0xff;
    37e6:	8f ef       	ldi	r24, 0xFF	; 255
    37e8:	8b 83       	std	Y+3, r24	; 0x03
    37ea:	8b 81       	ldd	r24, Y+3	; 0x03
}
    37ec:	0f 90       	pop	r0
    37ee:	0f 90       	pop	r0
    37f0:	0f 90       	pop	r0
    37f2:	cf 91       	pop	r28
    37f4:	df 91       	pop	r29
    37f6:	08 95       	ret

000037f8 <DIO_vTogPinValue>:
*
* \Parameters (in) : Loc_u8PortID   PIN PORT
* 					Loc_u8PinID		PIN wanted to Toggle it's value
* \Parameters (out): None
*******************************************************************************/
void DIO_vTogPinValue(u8 Loc_u8PortID, u8 Loc_u8PinID){
    37f8:	df 93       	push	r29
    37fa:	cf 93       	push	r28
    37fc:	00 d0       	rcall	.+0      	; 0x37fe <DIO_vTogPinValue+0x6>
    37fe:	cd b7       	in	r28, 0x3d	; 61
    3800:	de b7       	in	r29, 0x3e	; 62
    3802:	89 83       	std	Y+1, r24	; 0x01
    3804:	6a 83       	std	Y+2, r22	; 0x02
	if(Loc_u8PortID<=PortD){
    3806:	89 81       	ldd	r24, Y+1	; 0x01
    3808:	84 30       	cpi	r24, 0x04	; 4
    380a:	08 f0       	brcs	.+2      	; 0x380e <DIO_vTogPinValue+0x16>
    380c:	5b c0       	rjmp	.+182    	; 0x38c4 <DIO_vTogPinValue+0xcc>
		if(Loc_u8PortID==PortA){
    380e:	89 81       	ldd	r24, Y+1	; 0x01
    3810:	88 23       	and	r24, r24
    3812:	a1 f4       	brne	.+40     	; 0x383c <DIO_vTogPinValue+0x44>
			TOG_BIT(PORTA, Loc_u8PinID);
    3814:	ab e3       	ldi	r26, 0x3B	; 59
    3816:	b0 e0       	ldi	r27, 0x00	; 0
    3818:	eb e3       	ldi	r30, 0x3B	; 59
    381a:	f0 e0       	ldi	r31, 0x00	; 0
    381c:	80 81       	ld	r24, Z
    381e:	48 2f       	mov	r20, r24
    3820:	8a 81       	ldd	r24, Y+2	; 0x02
    3822:	28 2f       	mov	r18, r24
    3824:	30 e0       	ldi	r19, 0x00	; 0
    3826:	81 e0       	ldi	r24, 0x01	; 1
    3828:	90 e0       	ldi	r25, 0x00	; 0
    382a:	02 2e       	mov	r0, r18
    382c:	02 c0       	rjmp	.+4      	; 0x3832 <DIO_vTogPinValue+0x3a>
    382e:	88 0f       	add	r24, r24
    3830:	99 1f       	adc	r25, r25
    3832:	0a 94       	dec	r0
    3834:	e2 f7       	brpl	.-8      	; 0x382e <DIO_vTogPinValue+0x36>
    3836:	84 27       	eor	r24, r20
    3838:	8c 93       	st	X, r24
    383a:	44 c0       	rjmp	.+136    	; 0x38c4 <DIO_vTogPinValue+0xcc>
		}
		else if(Loc_u8PortID==PortB){
    383c:	89 81       	ldd	r24, Y+1	; 0x01
    383e:	81 30       	cpi	r24, 0x01	; 1
    3840:	a1 f4       	brne	.+40     	; 0x386a <DIO_vTogPinValue+0x72>
			TOG_BIT(PORTB, Loc_u8PinID);
    3842:	a8 e3       	ldi	r26, 0x38	; 56
    3844:	b0 e0       	ldi	r27, 0x00	; 0
    3846:	e8 e3       	ldi	r30, 0x38	; 56
    3848:	f0 e0       	ldi	r31, 0x00	; 0
    384a:	80 81       	ld	r24, Z
    384c:	48 2f       	mov	r20, r24
    384e:	8a 81       	ldd	r24, Y+2	; 0x02
    3850:	28 2f       	mov	r18, r24
    3852:	30 e0       	ldi	r19, 0x00	; 0
    3854:	81 e0       	ldi	r24, 0x01	; 1
    3856:	90 e0       	ldi	r25, 0x00	; 0
    3858:	02 2e       	mov	r0, r18
    385a:	02 c0       	rjmp	.+4      	; 0x3860 <DIO_vTogPinValue+0x68>
    385c:	88 0f       	add	r24, r24
    385e:	99 1f       	adc	r25, r25
    3860:	0a 94       	dec	r0
    3862:	e2 f7       	brpl	.-8      	; 0x385c <DIO_vTogPinValue+0x64>
    3864:	84 27       	eor	r24, r20
    3866:	8c 93       	st	X, r24
    3868:	2d c0       	rjmp	.+90     	; 0x38c4 <DIO_vTogPinValue+0xcc>
		}
		else if(Loc_u8PortID==PortC){
    386a:	89 81       	ldd	r24, Y+1	; 0x01
    386c:	82 30       	cpi	r24, 0x02	; 2
    386e:	a1 f4       	brne	.+40     	; 0x3898 <DIO_vTogPinValue+0xa0>
			TOG_BIT(PORTC, Loc_u8PinID);
    3870:	a5 e3       	ldi	r26, 0x35	; 53
    3872:	b0 e0       	ldi	r27, 0x00	; 0
    3874:	e5 e3       	ldi	r30, 0x35	; 53
    3876:	f0 e0       	ldi	r31, 0x00	; 0
    3878:	80 81       	ld	r24, Z
    387a:	48 2f       	mov	r20, r24
    387c:	8a 81       	ldd	r24, Y+2	; 0x02
    387e:	28 2f       	mov	r18, r24
    3880:	30 e0       	ldi	r19, 0x00	; 0
    3882:	81 e0       	ldi	r24, 0x01	; 1
    3884:	90 e0       	ldi	r25, 0x00	; 0
    3886:	02 2e       	mov	r0, r18
    3888:	02 c0       	rjmp	.+4      	; 0x388e <DIO_vTogPinValue+0x96>
    388a:	88 0f       	add	r24, r24
    388c:	99 1f       	adc	r25, r25
    388e:	0a 94       	dec	r0
    3890:	e2 f7       	brpl	.-8      	; 0x388a <DIO_vTogPinValue+0x92>
    3892:	84 27       	eor	r24, r20
    3894:	8c 93       	st	X, r24
    3896:	16 c0       	rjmp	.+44     	; 0x38c4 <DIO_vTogPinValue+0xcc>
		}
		else if(Loc_u8PortID==PortD){
    3898:	89 81       	ldd	r24, Y+1	; 0x01
    389a:	83 30       	cpi	r24, 0x03	; 3
    389c:	99 f4       	brne	.+38     	; 0x38c4 <DIO_vTogPinValue+0xcc>
			TOG_BIT(PORTD, Loc_u8PinID);
    389e:	a2 e3       	ldi	r26, 0x32	; 50
    38a0:	b0 e0       	ldi	r27, 0x00	; 0
    38a2:	e2 e3       	ldi	r30, 0x32	; 50
    38a4:	f0 e0       	ldi	r31, 0x00	; 0
    38a6:	80 81       	ld	r24, Z
    38a8:	48 2f       	mov	r20, r24
    38aa:	8a 81       	ldd	r24, Y+2	; 0x02
    38ac:	28 2f       	mov	r18, r24
    38ae:	30 e0       	ldi	r19, 0x00	; 0
    38b0:	81 e0       	ldi	r24, 0x01	; 1
    38b2:	90 e0       	ldi	r25, 0x00	; 0
    38b4:	02 2e       	mov	r0, r18
    38b6:	02 c0       	rjmp	.+4      	; 0x38bc <DIO_vTogPinValue+0xc4>
    38b8:	88 0f       	add	r24, r24
    38ba:	99 1f       	adc	r25, r25
    38bc:	0a 94       	dec	r0
    38be:	e2 f7       	brpl	.-8      	; 0x38b8 <DIO_vTogPinValue+0xc0>
    38c0:	84 27       	eor	r24, r20
    38c2:	8c 93       	st	X, r24
		}
	}
	else{
		//do nothing
	}
}
    38c4:	0f 90       	pop	r0
    38c6:	0f 90       	pop	r0
    38c8:	cf 91       	pop	r28
    38ca:	df 91       	pop	r29
    38cc:	08 95       	ret

000038ce <EXTI_vEnableGIE>:
#include "EXTI.h"

void(*Gptr0)(void)='\0';
void(*Gptr1)(void)='\0';
void(*Gptr2)(void)='\0';
void EXTI_vEnableGIE(void){
    38ce:	df 93       	push	r29
    38d0:	cf 93       	push	r28
    38d2:	cd b7       	in	r28, 0x3d	; 61
    38d4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
    38d6:	af e5       	ldi	r26, 0x5F	; 95
    38d8:	b0 e0       	ldi	r27, 0x00	; 0
    38da:	ef e5       	ldi	r30, 0x5F	; 95
    38dc:	f0 e0       	ldi	r31, 0x00	; 0
    38de:	80 81       	ld	r24, Z
    38e0:	80 68       	ori	r24, 0x80	; 128
    38e2:	8c 93       	st	X, r24
}
    38e4:	cf 91       	pop	r28
    38e6:	df 91       	pop	r29
    38e8:	08 95       	ret

000038ea <EXTI_vEnablePIE>:
void EXTI_vEnablePIE(u8 Loc_u8InterruptNumber){
    38ea:	df 93       	push	r29
    38ec:	cf 93       	push	r28
    38ee:	0f 92       	push	r0
    38f0:	cd b7       	in	r28, 0x3d	; 61
    38f2:	de b7       	in	r29, 0x3e	; 62
    38f4:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8InterruptNumber<=INT2){
    38f6:	89 81       	ldd	r24, Y+1	; 0x01
    38f8:	83 30       	cpi	r24, 0x03	; 3
    38fa:	00 f5       	brcc	.+64     	; 0x393c <EXTI_vEnablePIE+0x52>
		if(Loc_u8InterruptNumber==INT0){
    38fc:	89 81       	ldd	r24, Y+1	; 0x01
    38fe:	88 23       	and	r24, r24
    3900:	41 f4       	brne	.+16     	; 0x3912 <EXTI_vEnablePIE+0x28>
			SET_BIT(GICR,6);
    3902:	ab e5       	ldi	r26, 0x5B	; 91
    3904:	b0 e0       	ldi	r27, 0x00	; 0
    3906:	eb e5       	ldi	r30, 0x5B	; 91
    3908:	f0 e0       	ldi	r31, 0x00	; 0
    390a:	80 81       	ld	r24, Z
    390c:	80 64       	ori	r24, 0x40	; 64
    390e:	8c 93       	st	X, r24
    3910:	15 c0       	rjmp	.+42     	; 0x393c <EXTI_vEnablePIE+0x52>
		}
		else if(Loc_u8InterruptNumber==INT1){
    3912:	89 81       	ldd	r24, Y+1	; 0x01
    3914:	81 30       	cpi	r24, 0x01	; 1
    3916:	41 f4       	brne	.+16     	; 0x3928 <EXTI_vEnablePIE+0x3e>
			SET_BIT(GICR,7);
    3918:	ab e5       	ldi	r26, 0x5B	; 91
    391a:	b0 e0       	ldi	r27, 0x00	; 0
    391c:	eb e5       	ldi	r30, 0x5B	; 91
    391e:	f0 e0       	ldi	r31, 0x00	; 0
    3920:	80 81       	ld	r24, Z
    3922:	80 68       	ori	r24, 0x80	; 128
    3924:	8c 93       	st	X, r24
    3926:	0a c0       	rjmp	.+20     	; 0x393c <EXTI_vEnablePIE+0x52>
		}
		else if(Loc_u8InterruptNumber==INT2){
    3928:	89 81       	ldd	r24, Y+1	; 0x01
    392a:	82 30       	cpi	r24, 0x02	; 2
    392c:	39 f4       	brne	.+14     	; 0x393c <EXTI_vEnablePIE+0x52>
			SET_BIT(GICR,5);
    392e:	ab e5       	ldi	r26, 0x5B	; 91
    3930:	b0 e0       	ldi	r27, 0x00	; 0
    3932:	eb e5       	ldi	r30, 0x5B	; 91
    3934:	f0 e0       	ldi	r31, 0x00	; 0
    3936:	80 81       	ld	r24, Z
    3938:	80 62       	ori	r24, 0x20	; 32
    393a:	8c 93       	st	X, r24
		}
	}
	else {
		//do nothing
	}
}
    393c:	0f 90       	pop	r0
    393e:	cf 91       	pop	r28
    3940:	df 91       	pop	r29
    3942:	08 95       	ret

00003944 <EXIT_vReadPIF>:
u8 EXIT_vReadPIF(u8 Loc_u8InterruptNumber){
    3944:	df 93       	push	r29
    3946:	cf 93       	push	r28
    3948:	00 d0       	rcall	.+0      	; 0x394a <EXIT_vReadPIF+0x6>
    394a:	cd b7       	in	r28, 0x3d	; 61
    394c:	de b7       	in	r29, 0x3e	; 62
    394e:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8InterruptNumber<=INT2){
    3950:	89 81       	ldd	r24, Y+1	; 0x01
    3952:	83 30       	cpi	r24, 0x03	; 3
    3954:	38 f5       	brcc	.+78     	; 0x39a4 <EXIT_vReadPIF+0x60>
			if(Loc_u8InterruptNumber==INT0){
    3956:	89 81       	ldd	r24, Y+1	; 0x01
    3958:	88 23       	and	r24, r24
    395a:	59 f4       	brne	.+22     	; 0x3972 <EXIT_vReadPIF+0x2e>
				return GET_BIT(GIFR,6);
    395c:	ea e5       	ldi	r30, 0x5A	; 90
    395e:	f0 e0       	ldi	r31, 0x00	; 0
    3960:	80 81       	ld	r24, Z
    3962:	82 95       	swap	r24
    3964:	86 95       	lsr	r24
    3966:	86 95       	lsr	r24
    3968:	83 70       	andi	r24, 0x03	; 3
    396a:	98 2f       	mov	r25, r24
    396c:	91 70       	andi	r25, 0x01	; 1
    396e:	9a 83       	std	Y+2, r25	; 0x02
    3970:	1b c0       	rjmp	.+54     	; 0x39a8 <EXIT_vReadPIF+0x64>
			}
			else if(Loc_u8InterruptNumber==INT1){
    3972:	89 81       	ldd	r24, Y+1	; 0x01
    3974:	81 30       	cpi	r24, 0x01	; 1
    3976:	49 f4       	brne	.+18     	; 0x398a <EXIT_vReadPIF+0x46>
				return GET_BIT(GIFR,7);
    3978:	ea e5       	ldi	r30, 0x5A	; 90
    397a:	f0 e0       	ldi	r31, 0x00	; 0
    397c:	80 81       	ld	r24, Z
    397e:	98 2f       	mov	r25, r24
    3980:	99 1f       	adc	r25, r25
    3982:	99 27       	eor	r25, r25
    3984:	99 1f       	adc	r25, r25
    3986:	9a 83       	std	Y+2, r25	; 0x02
    3988:	0f c0       	rjmp	.+30     	; 0x39a8 <EXIT_vReadPIF+0x64>
			}
			else if(Loc_u8InterruptNumber==INT2){
    398a:	89 81       	ldd	r24, Y+1	; 0x01
    398c:	82 30       	cpi	r24, 0x02	; 2
    398e:	51 f4       	brne	.+20     	; 0x39a4 <EXIT_vReadPIF+0x60>
				return GET_BIT(GIFR,5);
    3990:	ea e5       	ldi	r30, 0x5A	; 90
    3992:	f0 e0       	ldi	r31, 0x00	; 0
    3994:	80 81       	ld	r24, Z
    3996:	82 95       	swap	r24
    3998:	86 95       	lsr	r24
    399a:	87 70       	andi	r24, 0x07	; 7
    399c:	98 2f       	mov	r25, r24
    399e:	91 70       	andi	r25, 0x01	; 1
    39a0:	9a 83       	std	Y+2, r25	; 0x02
    39a2:	02 c0       	rjmp	.+4      	; 0x39a8 <EXIT_vReadPIF+0x64>
			}
		}
		else {
			//do nothing
		}
	return 0xff;
    39a4:	8f ef       	ldi	r24, 0xFF	; 255
    39a6:	8a 83       	std	Y+2, r24	; 0x02
    39a8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    39aa:	0f 90       	pop	r0
    39ac:	0f 90       	pop	r0
    39ae:	cf 91       	pop	r28
    39b0:	df 91       	pop	r29
    39b2:	08 95       	ret

000039b4 <EXTI_vSenseControl>:
void EXTI_vSenseControl(u8 Loc_u8InterruptNumber,u8 Loc_u8Mode){
    39b4:	df 93       	push	r29
    39b6:	cf 93       	push	r28
    39b8:	00 d0       	rcall	.+0      	; 0x39ba <EXTI_vSenseControl+0x6>
    39ba:	cd b7       	in	r28, 0x3d	; 61
    39bc:	de b7       	in	r29, 0x3e	; 62
    39be:	89 83       	std	Y+1, r24	; 0x01
    39c0:	6a 83       	std	Y+2, r22	; 0x02

	if (Loc_u8InterruptNumber<=INT2){
    39c2:	89 81       	ldd	r24, Y+1	; 0x01
    39c4:	83 30       	cpi	r24, 0x03	; 3
    39c6:	08 f0       	brcs	.+2      	; 0x39ca <EXTI_vSenseControl+0x16>
    39c8:	bf c0       	rjmp	.+382    	; 0x3b48 <EXTI_vSenseControl+0x194>
		if(Loc_u8InterruptNumber==INT0){
    39ca:	89 81       	ldd	r24, Y+1	; 0x01
    39cc:	88 23       	and	r24, r24
    39ce:	09 f0       	breq	.+2      	; 0x39d2 <EXTI_vSenseControl+0x1e>
    39d0:	4d c0       	rjmp	.+154    	; 0x3a6c <EXTI_vSenseControl+0xb8>
			if(Loc_u8Mode<=Falling_Edge){
    39d2:	8a 81       	ldd	r24, Y+2	; 0x02
    39d4:	84 30       	cpi	r24, 0x04	; 4
    39d6:	08 f0       	brcs	.+2      	; 0x39da <EXTI_vSenseControl+0x26>
    39d8:	b7 c0       	rjmp	.+366    	; 0x3b48 <EXTI_vSenseControl+0x194>
				if(Loc_u8Mode==Low_Level){
    39da:	8a 81       	ldd	r24, Y+2	; 0x02
    39dc:	88 23       	and	r24, r24
    39de:	79 f4       	brne	.+30     	; 0x39fe <EXTI_vSenseControl+0x4a>
					CLR_BIT(MCUCR,0);
    39e0:	a5 e5       	ldi	r26, 0x55	; 85
    39e2:	b0 e0       	ldi	r27, 0x00	; 0
    39e4:	e5 e5       	ldi	r30, 0x55	; 85
    39e6:	f0 e0       	ldi	r31, 0x00	; 0
    39e8:	80 81       	ld	r24, Z
    39ea:	8e 7f       	andi	r24, 0xFE	; 254
    39ec:	8c 93       	st	X, r24
					CLR_BIT(MCUCR,1);
    39ee:	a5 e5       	ldi	r26, 0x55	; 85
    39f0:	b0 e0       	ldi	r27, 0x00	; 0
    39f2:	e5 e5       	ldi	r30, 0x55	; 85
    39f4:	f0 e0       	ldi	r31, 0x00	; 0
    39f6:	80 81       	ld	r24, Z
    39f8:	8d 7f       	andi	r24, 0xFD	; 253
    39fa:	8c 93       	st	X, r24
    39fc:	a5 c0       	rjmp	.+330    	; 0x3b48 <EXTI_vSenseControl+0x194>
				}
				else if(Loc_u8Mode==Any_Change){
    39fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3a00:	81 30       	cpi	r24, 0x01	; 1
    3a02:	79 f4       	brne	.+30     	; 0x3a22 <EXTI_vSenseControl+0x6e>
					SET_BIT(MCUCR,0);
    3a04:	a5 e5       	ldi	r26, 0x55	; 85
    3a06:	b0 e0       	ldi	r27, 0x00	; 0
    3a08:	e5 e5       	ldi	r30, 0x55	; 85
    3a0a:	f0 e0       	ldi	r31, 0x00	; 0
    3a0c:	80 81       	ld	r24, Z
    3a0e:	81 60       	ori	r24, 0x01	; 1
    3a10:	8c 93       	st	X, r24
					CLR_BIT(MCUCR,1);
    3a12:	a5 e5       	ldi	r26, 0x55	; 85
    3a14:	b0 e0       	ldi	r27, 0x00	; 0
    3a16:	e5 e5       	ldi	r30, 0x55	; 85
    3a18:	f0 e0       	ldi	r31, 0x00	; 0
    3a1a:	80 81       	ld	r24, Z
    3a1c:	8d 7f       	andi	r24, 0xFD	; 253
    3a1e:	8c 93       	st	X, r24
    3a20:	93 c0       	rjmp	.+294    	; 0x3b48 <EXTI_vSenseControl+0x194>
				}
				else if(Loc_u8Mode==Rising_Egde){
    3a22:	8a 81       	ldd	r24, Y+2	; 0x02
    3a24:	82 30       	cpi	r24, 0x02	; 2
    3a26:	79 f4       	brne	.+30     	; 0x3a46 <EXTI_vSenseControl+0x92>
					SET_BIT(MCUCR,0);
    3a28:	a5 e5       	ldi	r26, 0x55	; 85
    3a2a:	b0 e0       	ldi	r27, 0x00	; 0
    3a2c:	e5 e5       	ldi	r30, 0x55	; 85
    3a2e:	f0 e0       	ldi	r31, 0x00	; 0
    3a30:	80 81       	ld	r24, Z
    3a32:	81 60       	ori	r24, 0x01	; 1
    3a34:	8c 93       	st	X, r24
					SET_BIT(MCUCR,1);
    3a36:	a5 e5       	ldi	r26, 0x55	; 85
    3a38:	b0 e0       	ldi	r27, 0x00	; 0
    3a3a:	e5 e5       	ldi	r30, 0x55	; 85
    3a3c:	f0 e0       	ldi	r31, 0x00	; 0
    3a3e:	80 81       	ld	r24, Z
    3a40:	82 60       	ori	r24, 0x02	; 2
    3a42:	8c 93       	st	X, r24
    3a44:	81 c0       	rjmp	.+258    	; 0x3b48 <EXTI_vSenseControl+0x194>
				}
				else if(Loc_u8Mode==Falling_Edge){
    3a46:	8a 81       	ldd	r24, Y+2	; 0x02
    3a48:	83 30       	cpi	r24, 0x03	; 3
    3a4a:	09 f0       	breq	.+2      	; 0x3a4e <EXTI_vSenseControl+0x9a>
    3a4c:	7d c0       	rjmp	.+250    	; 0x3b48 <EXTI_vSenseControl+0x194>
					CLR_BIT(MCUCR,0);
    3a4e:	a5 e5       	ldi	r26, 0x55	; 85
    3a50:	b0 e0       	ldi	r27, 0x00	; 0
    3a52:	e5 e5       	ldi	r30, 0x55	; 85
    3a54:	f0 e0       	ldi	r31, 0x00	; 0
    3a56:	80 81       	ld	r24, Z
    3a58:	8e 7f       	andi	r24, 0xFE	; 254
    3a5a:	8c 93       	st	X, r24
					SET_BIT(MCUCR,1);
    3a5c:	a5 e5       	ldi	r26, 0x55	; 85
    3a5e:	b0 e0       	ldi	r27, 0x00	; 0
    3a60:	e5 e5       	ldi	r30, 0x55	; 85
    3a62:	f0 e0       	ldi	r31, 0x00	; 0
    3a64:	80 81       	ld	r24, Z
    3a66:	82 60       	ori	r24, 0x02	; 2
    3a68:	8c 93       	st	X, r24
    3a6a:	6e c0       	rjmp	.+220    	; 0x3b48 <EXTI_vSenseControl+0x194>
			else{
				//do nothing
			}
		}

		else if(Loc_u8InterruptNumber==INT1){
    3a6c:	89 81       	ldd	r24, Y+1	; 0x01
    3a6e:	81 30       	cpi	r24, 0x01	; 1
    3a70:	09 f0       	breq	.+2      	; 0x3a74 <EXTI_vSenseControl+0xc0>
    3a72:	4c c0       	rjmp	.+152    	; 0x3b0c <EXTI_vSenseControl+0x158>
			if(Loc_u8Mode<=Falling_Edge){
    3a74:	8a 81       	ldd	r24, Y+2	; 0x02
    3a76:	84 30       	cpi	r24, 0x04	; 4
    3a78:	08 f0       	brcs	.+2      	; 0x3a7c <EXTI_vSenseControl+0xc8>
    3a7a:	66 c0       	rjmp	.+204    	; 0x3b48 <EXTI_vSenseControl+0x194>
				if(Loc_u8Mode==Low_Level){
    3a7c:	8a 81       	ldd	r24, Y+2	; 0x02
    3a7e:	88 23       	and	r24, r24
    3a80:	79 f4       	brne	.+30     	; 0x3aa0 <EXTI_vSenseControl+0xec>
					CLR_BIT(MCUCR,2);
    3a82:	a5 e5       	ldi	r26, 0x55	; 85
    3a84:	b0 e0       	ldi	r27, 0x00	; 0
    3a86:	e5 e5       	ldi	r30, 0x55	; 85
    3a88:	f0 e0       	ldi	r31, 0x00	; 0
    3a8a:	80 81       	ld	r24, Z
    3a8c:	8b 7f       	andi	r24, 0xFB	; 251
    3a8e:	8c 93       	st	X, r24
					CLR_BIT(MCUCR,3);
    3a90:	a5 e5       	ldi	r26, 0x55	; 85
    3a92:	b0 e0       	ldi	r27, 0x00	; 0
    3a94:	e5 e5       	ldi	r30, 0x55	; 85
    3a96:	f0 e0       	ldi	r31, 0x00	; 0
    3a98:	80 81       	ld	r24, Z
    3a9a:	87 7f       	andi	r24, 0xF7	; 247
    3a9c:	8c 93       	st	X, r24
    3a9e:	54 c0       	rjmp	.+168    	; 0x3b48 <EXTI_vSenseControl+0x194>
				}
				else if(Loc_u8Mode==Any_Change){
    3aa0:	8a 81       	ldd	r24, Y+2	; 0x02
    3aa2:	81 30       	cpi	r24, 0x01	; 1
    3aa4:	79 f4       	brne	.+30     	; 0x3ac4 <EXTI_vSenseControl+0x110>
					SET_BIT(MCUCR,2);
    3aa6:	a5 e5       	ldi	r26, 0x55	; 85
    3aa8:	b0 e0       	ldi	r27, 0x00	; 0
    3aaa:	e5 e5       	ldi	r30, 0x55	; 85
    3aac:	f0 e0       	ldi	r31, 0x00	; 0
    3aae:	80 81       	ld	r24, Z
    3ab0:	84 60       	ori	r24, 0x04	; 4
    3ab2:	8c 93       	st	X, r24
					CLR_BIT(MCUCR,3);
    3ab4:	a5 e5       	ldi	r26, 0x55	; 85
    3ab6:	b0 e0       	ldi	r27, 0x00	; 0
    3ab8:	e5 e5       	ldi	r30, 0x55	; 85
    3aba:	f0 e0       	ldi	r31, 0x00	; 0
    3abc:	80 81       	ld	r24, Z
    3abe:	87 7f       	andi	r24, 0xF7	; 247
    3ac0:	8c 93       	st	X, r24
    3ac2:	42 c0       	rjmp	.+132    	; 0x3b48 <EXTI_vSenseControl+0x194>
				}
				else if(Loc_u8Mode==Rising_Egde){
    3ac4:	8a 81       	ldd	r24, Y+2	; 0x02
    3ac6:	82 30       	cpi	r24, 0x02	; 2
    3ac8:	79 f4       	brne	.+30     	; 0x3ae8 <EXTI_vSenseControl+0x134>
					SET_BIT(MCUCR,2);
    3aca:	a5 e5       	ldi	r26, 0x55	; 85
    3acc:	b0 e0       	ldi	r27, 0x00	; 0
    3ace:	e5 e5       	ldi	r30, 0x55	; 85
    3ad0:	f0 e0       	ldi	r31, 0x00	; 0
    3ad2:	80 81       	ld	r24, Z
    3ad4:	84 60       	ori	r24, 0x04	; 4
    3ad6:	8c 93       	st	X, r24
					SET_BIT(MCUCR,3);
    3ad8:	a5 e5       	ldi	r26, 0x55	; 85
    3ada:	b0 e0       	ldi	r27, 0x00	; 0
    3adc:	e5 e5       	ldi	r30, 0x55	; 85
    3ade:	f0 e0       	ldi	r31, 0x00	; 0
    3ae0:	80 81       	ld	r24, Z
    3ae2:	88 60       	ori	r24, 0x08	; 8
    3ae4:	8c 93       	st	X, r24
    3ae6:	30 c0       	rjmp	.+96     	; 0x3b48 <EXTI_vSenseControl+0x194>
				}
				else if(Loc_u8Mode==Falling_Edge){
    3ae8:	8a 81       	ldd	r24, Y+2	; 0x02
    3aea:	83 30       	cpi	r24, 0x03	; 3
    3aec:	69 f5       	brne	.+90     	; 0x3b48 <EXTI_vSenseControl+0x194>
					CLR_BIT(MCUCR,2);
    3aee:	a5 e5       	ldi	r26, 0x55	; 85
    3af0:	b0 e0       	ldi	r27, 0x00	; 0
    3af2:	e5 e5       	ldi	r30, 0x55	; 85
    3af4:	f0 e0       	ldi	r31, 0x00	; 0
    3af6:	80 81       	ld	r24, Z
    3af8:	8b 7f       	andi	r24, 0xFB	; 251
    3afa:	8c 93       	st	X, r24
					SET_BIT(MCUCR,3);
    3afc:	a5 e5       	ldi	r26, 0x55	; 85
    3afe:	b0 e0       	ldi	r27, 0x00	; 0
    3b00:	e5 e5       	ldi	r30, 0x55	; 85
    3b02:	f0 e0       	ldi	r31, 0x00	; 0
    3b04:	80 81       	ld	r24, Z
    3b06:	88 60       	ori	r24, 0x08	; 8
    3b08:	8c 93       	st	X, r24
    3b0a:	1e c0       	rjmp	.+60     	; 0x3b48 <EXTI_vSenseControl+0x194>
			}
			else{
				//do nothing
			}
		}
		else if(Loc_u8InterruptNumber==INT2){
    3b0c:	89 81       	ldd	r24, Y+1	; 0x01
    3b0e:	82 30       	cpi	r24, 0x02	; 2
    3b10:	d9 f4       	brne	.+54     	; 0x3b48 <EXTI_vSenseControl+0x194>
			if(Loc_u8Mode==Falling_Edge||Loc_u8Mode==Rising_Egde){
    3b12:	8a 81       	ldd	r24, Y+2	; 0x02
    3b14:	83 30       	cpi	r24, 0x03	; 3
    3b16:	19 f0       	breq	.+6      	; 0x3b1e <EXTI_vSenseControl+0x16a>
    3b18:	8a 81       	ldd	r24, Y+2	; 0x02
    3b1a:	82 30       	cpi	r24, 0x02	; 2
    3b1c:	a9 f4       	brne	.+42     	; 0x3b48 <EXTI_vSenseControl+0x194>
				if(Loc_u8Mode==Rising_Egde){
    3b1e:	8a 81       	ldd	r24, Y+2	; 0x02
    3b20:	82 30       	cpi	r24, 0x02	; 2
    3b22:	41 f4       	brne	.+16     	; 0x3b34 <EXTI_vSenseControl+0x180>
					SET_BIT(MCUCSR,6);
    3b24:	a4 e5       	ldi	r26, 0x54	; 84
    3b26:	b0 e0       	ldi	r27, 0x00	; 0
    3b28:	e4 e5       	ldi	r30, 0x54	; 84
    3b2a:	f0 e0       	ldi	r31, 0x00	; 0
    3b2c:	80 81       	ld	r24, Z
    3b2e:	80 64       	ori	r24, 0x40	; 64
    3b30:	8c 93       	st	X, r24
    3b32:	0a c0       	rjmp	.+20     	; 0x3b48 <EXTI_vSenseControl+0x194>
				}
				else if(Loc_u8Mode==Falling_Edge){
    3b34:	8a 81       	ldd	r24, Y+2	; 0x02
    3b36:	83 30       	cpi	r24, 0x03	; 3
    3b38:	39 f4       	brne	.+14     	; 0x3b48 <EXTI_vSenseControl+0x194>
					CLR_BIT(MCUCSR,6);
    3b3a:	a4 e5       	ldi	r26, 0x54	; 84
    3b3c:	b0 e0       	ldi	r27, 0x00	; 0
    3b3e:	e4 e5       	ldi	r30, 0x54	; 84
    3b40:	f0 e0       	ldi	r31, 0x00	; 0
    3b42:	80 81       	ld	r24, Z
    3b44:	8f 7b       	andi	r24, 0xBF	; 191
    3b46:	8c 93       	st	X, r24
	}
	else{
		//do nothing
	}

}
    3b48:	0f 90       	pop	r0
    3b4a:	0f 90       	pop	r0
    3b4c:	cf 91       	pop	r28
    3b4e:	df 91       	pop	r29
    3b50:	08 95       	ret

00003b52 <EXTI_INT0CallBack>:
void EXTI_INT0CallBack(void(*ptr)(void)){
    3b52:	df 93       	push	r29
    3b54:	cf 93       	push	r28
    3b56:	00 d0       	rcall	.+0      	; 0x3b58 <EXTI_INT0CallBack+0x6>
    3b58:	cd b7       	in	r28, 0x3d	; 61
    3b5a:	de b7       	in	r29, 0x3e	; 62
    3b5c:	9a 83       	std	Y+2, r25	; 0x02
    3b5e:	89 83       	std	Y+1, r24	; 0x01
	if(ptr!='\0'){
    3b60:	89 81       	ldd	r24, Y+1	; 0x01
    3b62:	9a 81       	ldd	r25, Y+2	; 0x02
    3b64:	00 97       	sbiw	r24, 0x00	; 0
    3b66:	31 f0       	breq	.+12     	; 0x3b74 <EXTI_INT0CallBack+0x22>
		Gptr0=ptr;
    3b68:	89 81       	ldd	r24, Y+1	; 0x01
    3b6a:	9a 81       	ldd	r25, Y+2	; 0x02
    3b6c:	90 93 c9 00 	sts	0x00C9, r25
    3b70:	80 93 c8 00 	sts	0x00C8, r24
	}
}
    3b74:	0f 90       	pop	r0
    3b76:	0f 90       	pop	r0
    3b78:	cf 91       	pop	r28
    3b7a:	df 91       	pop	r29
    3b7c:	08 95       	ret

00003b7e <EXTI_INT1CallBack>:
void EXTI_INT1CallBack(void(*ptr)(void)){
    3b7e:	df 93       	push	r29
    3b80:	cf 93       	push	r28
    3b82:	00 d0       	rcall	.+0      	; 0x3b84 <EXTI_INT1CallBack+0x6>
    3b84:	cd b7       	in	r28, 0x3d	; 61
    3b86:	de b7       	in	r29, 0x3e	; 62
    3b88:	9a 83       	std	Y+2, r25	; 0x02
    3b8a:	89 83       	std	Y+1, r24	; 0x01
	if(ptr!='\0'){
    3b8c:	89 81       	ldd	r24, Y+1	; 0x01
    3b8e:	9a 81       	ldd	r25, Y+2	; 0x02
    3b90:	00 97       	sbiw	r24, 0x00	; 0
    3b92:	31 f0       	breq	.+12     	; 0x3ba0 <EXTI_INT1CallBack+0x22>
		Gptr1=ptr;
    3b94:	89 81       	ldd	r24, Y+1	; 0x01
    3b96:	9a 81       	ldd	r25, Y+2	; 0x02
    3b98:	90 93 cb 00 	sts	0x00CB, r25
    3b9c:	80 93 ca 00 	sts	0x00CA, r24
	}
}
    3ba0:	0f 90       	pop	r0
    3ba2:	0f 90       	pop	r0
    3ba4:	cf 91       	pop	r28
    3ba6:	df 91       	pop	r29
    3ba8:	08 95       	ret

00003baa <EXTI_INT2CallBack>:
void EXTI_INT2CallBack(void(*ptr)(void)){
    3baa:	df 93       	push	r29
    3bac:	cf 93       	push	r28
    3bae:	00 d0       	rcall	.+0      	; 0x3bb0 <EXTI_INT2CallBack+0x6>
    3bb0:	cd b7       	in	r28, 0x3d	; 61
    3bb2:	de b7       	in	r29, 0x3e	; 62
    3bb4:	9a 83       	std	Y+2, r25	; 0x02
    3bb6:	89 83       	std	Y+1, r24	; 0x01
	if(ptr!='\0'){
    3bb8:	89 81       	ldd	r24, Y+1	; 0x01
    3bba:	9a 81       	ldd	r25, Y+2	; 0x02
    3bbc:	00 97       	sbiw	r24, 0x00	; 0
    3bbe:	31 f0       	breq	.+12     	; 0x3bcc <EXTI_INT2CallBack+0x22>
		Gptr2=ptr;
    3bc0:	89 81       	ldd	r24, Y+1	; 0x01
    3bc2:	9a 81       	ldd	r25, Y+2	; 0x02
    3bc4:	90 93 cd 00 	sts	0x00CD, r25
    3bc8:	80 93 cc 00 	sts	0x00CC, r24
	}
}
    3bcc:	0f 90       	pop	r0
    3bce:	0f 90       	pop	r0
    3bd0:	cf 91       	pop	r28
    3bd2:	df 91       	pop	r29
    3bd4:	08 95       	ret

00003bd6 <__vector_1>:
ISR(INT0_vect){
    3bd6:	1f 92       	push	r1
    3bd8:	0f 92       	push	r0
    3bda:	0f b6       	in	r0, 0x3f	; 63
    3bdc:	0f 92       	push	r0
    3bde:	11 24       	eor	r1, r1
    3be0:	2f 93       	push	r18
    3be2:	3f 93       	push	r19
    3be4:	4f 93       	push	r20
    3be6:	5f 93       	push	r21
    3be8:	6f 93       	push	r22
    3bea:	7f 93       	push	r23
    3bec:	8f 93       	push	r24
    3bee:	9f 93       	push	r25
    3bf0:	af 93       	push	r26
    3bf2:	bf 93       	push	r27
    3bf4:	ef 93       	push	r30
    3bf6:	ff 93       	push	r31
    3bf8:	df 93       	push	r29
    3bfa:	cf 93       	push	r28
    3bfc:	cd b7       	in	r28, 0x3d	; 61
    3bfe:	de b7       	in	r29, 0x3e	; 62
	if(Gptr0!='\0'){
    3c00:	80 91 c8 00 	lds	r24, 0x00C8
    3c04:	90 91 c9 00 	lds	r25, 0x00C9
    3c08:	00 97       	sbiw	r24, 0x00	; 0
    3c0a:	29 f0       	breq	.+10     	; 0x3c16 <__vector_1+0x40>
		Gptr0();
    3c0c:	e0 91 c8 00 	lds	r30, 0x00C8
    3c10:	f0 91 c9 00 	lds	r31, 0x00C9
    3c14:	09 95       	icall
	}
}
    3c16:	cf 91       	pop	r28
    3c18:	df 91       	pop	r29
    3c1a:	ff 91       	pop	r31
    3c1c:	ef 91       	pop	r30
    3c1e:	bf 91       	pop	r27
    3c20:	af 91       	pop	r26
    3c22:	9f 91       	pop	r25
    3c24:	8f 91       	pop	r24
    3c26:	7f 91       	pop	r23
    3c28:	6f 91       	pop	r22
    3c2a:	5f 91       	pop	r21
    3c2c:	4f 91       	pop	r20
    3c2e:	3f 91       	pop	r19
    3c30:	2f 91       	pop	r18
    3c32:	0f 90       	pop	r0
    3c34:	0f be       	out	0x3f, r0	; 63
    3c36:	0f 90       	pop	r0
    3c38:	1f 90       	pop	r1
    3c3a:	18 95       	reti

00003c3c <__vector_2>:
ISR(INT1_vect){
    3c3c:	1f 92       	push	r1
    3c3e:	0f 92       	push	r0
    3c40:	0f b6       	in	r0, 0x3f	; 63
    3c42:	0f 92       	push	r0
    3c44:	11 24       	eor	r1, r1
    3c46:	2f 93       	push	r18
    3c48:	3f 93       	push	r19
    3c4a:	4f 93       	push	r20
    3c4c:	5f 93       	push	r21
    3c4e:	6f 93       	push	r22
    3c50:	7f 93       	push	r23
    3c52:	8f 93       	push	r24
    3c54:	9f 93       	push	r25
    3c56:	af 93       	push	r26
    3c58:	bf 93       	push	r27
    3c5a:	ef 93       	push	r30
    3c5c:	ff 93       	push	r31
    3c5e:	df 93       	push	r29
    3c60:	cf 93       	push	r28
    3c62:	cd b7       	in	r28, 0x3d	; 61
    3c64:	de b7       	in	r29, 0x3e	; 62
	if(Gptr1!='\0'){
    3c66:	80 91 ca 00 	lds	r24, 0x00CA
    3c6a:	90 91 cb 00 	lds	r25, 0x00CB
    3c6e:	00 97       	sbiw	r24, 0x00	; 0
    3c70:	29 f0       	breq	.+10     	; 0x3c7c <__vector_2+0x40>
		Gptr1();
    3c72:	e0 91 ca 00 	lds	r30, 0x00CA
    3c76:	f0 91 cb 00 	lds	r31, 0x00CB
    3c7a:	09 95       	icall
	}
}
    3c7c:	cf 91       	pop	r28
    3c7e:	df 91       	pop	r29
    3c80:	ff 91       	pop	r31
    3c82:	ef 91       	pop	r30
    3c84:	bf 91       	pop	r27
    3c86:	af 91       	pop	r26
    3c88:	9f 91       	pop	r25
    3c8a:	8f 91       	pop	r24
    3c8c:	7f 91       	pop	r23
    3c8e:	6f 91       	pop	r22
    3c90:	5f 91       	pop	r21
    3c92:	4f 91       	pop	r20
    3c94:	3f 91       	pop	r19
    3c96:	2f 91       	pop	r18
    3c98:	0f 90       	pop	r0
    3c9a:	0f be       	out	0x3f, r0	; 63
    3c9c:	0f 90       	pop	r0
    3c9e:	1f 90       	pop	r1
    3ca0:	18 95       	reti

00003ca2 <INT2_vect>:
ISR(INT2_vect){
    3ca2:	1f 92       	push	r1
    3ca4:	0f 92       	push	r0
    3ca6:	0f b6       	in	r0, 0x3f	; 63
    3ca8:	0f 92       	push	r0
    3caa:	11 24       	eor	r1, r1
    3cac:	2f 93       	push	r18
    3cae:	3f 93       	push	r19
    3cb0:	4f 93       	push	r20
    3cb2:	5f 93       	push	r21
    3cb4:	6f 93       	push	r22
    3cb6:	7f 93       	push	r23
    3cb8:	8f 93       	push	r24
    3cba:	9f 93       	push	r25
    3cbc:	af 93       	push	r26
    3cbe:	bf 93       	push	r27
    3cc0:	ef 93       	push	r30
    3cc2:	ff 93       	push	r31
    3cc4:	df 93       	push	r29
    3cc6:	cf 93       	push	r28
    3cc8:	cd b7       	in	r28, 0x3d	; 61
    3cca:	de b7       	in	r29, 0x3e	; 62
	if(Gptr2!='\0'){
    3ccc:	80 91 cc 00 	lds	r24, 0x00CC
    3cd0:	90 91 cd 00 	lds	r25, 0x00CD
    3cd4:	00 97       	sbiw	r24, 0x00	; 0
    3cd6:	29 f0       	breq	.+10     	; 0x3ce2 <INT2_vect+0x40>
		Gptr2();
    3cd8:	e0 91 cc 00 	lds	r30, 0x00CC
    3cdc:	f0 91 cd 00 	lds	r31, 0x00CD
    3ce0:	09 95       	icall
	}
}
    3ce2:	cf 91       	pop	r28
    3ce4:	df 91       	pop	r29
    3ce6:	ff 91       	pop	r31
    3ce8:	ef 91       	pop	r30
    3cea:	bf 91       	pop	r27
    3cec:	af 91       	pop	r26
    3cee:	9f 91       	pop	r25
    3cf0:	8f 91       	pop	r24
    3cf2:	7f 91       	pop	r23
    3cf4:	6f 91       	pop	r22
    3cf6:	5f 91       	pop	r21
    3cf8:	4f 91       	pop	r20
    3cfa:	3f 91       	pop	r19
    3cfc:	2f 91       	pop	r18
    3cfe:	0f 90       	pop	r0
    3d00:	0f be       	out	0x3f, r0	; 63
    3d02:	0f 90       	pop	r0
    3d04:	1f 90       	pop	r1
    3d06:	18 95       	reti

00003d08 <H_Bridge_vInit>:
 *
 *  Created on: Jan 18, 2023
 *      Author: a7med
 */
#include "H_Bridge.h"
void H_Bridge_vInit(){
    3d08:	df 93       	push	r29
    3d0a:	cf 93       	push	r28
    3d0c:	cd b7       	in	r28, 0x3d	; 61
    3d0e:	de b7       	in	r29, 0x3e	; 62
	//----------- on this part motor1 is connected to 3y and VCC and motor2 is connected to 4y and Ground
	SET_BIT(DDRD,5);	//---- EN1
    3d10:	a1 e3       	ldi	r26, 0x31	; 49
    3d12:	b0 e0       	ldi	r27, 0x00	; 0
    3d14:	e1 e3       	ldi	r30, 0x31	; 49
    3d16:	f0 e0       	ldi	r31, 0x00	; 0
    3d18:	80 81       	ld	r24, Z
    3d1a:	80 62       	ori	r24, 0x20	; 32
    3d1c:	8c 93       	st	X, r24
	SET_BIT(DDRC,5);	//--- 3A
    3d1e:	a4 e3       	ldi	r26, 0x34	; 52
    3d20:	b0 e0       	ldi	r27, 0x00	; 0
    3d22:	e4 e3       	ldi	r30, 0x34	; 52
    3d24:	f0 e0       	ldi	r31, 0x00	; 0
    3d26:	80 81       	ld	r24, Z
    3d28:	80 62       	ori	r24, 0x20	; 32
    3d2a:	8c 93       	st	X, r24
	SET_BIT(DDRC,6);	//--- 4A
    3d2c:	a4 e3       	ldi	r26, 0x34	; 52
    3d2e:	b0 e0       	ldi	r27, 0x00	; 0
    3d30:	e4 e3       	ldi	r30, 0x34	; 52
    3d32:	f0 e0       	ldi	r31, 0x00	; 0
    3d34:	80 81       	ld	r24, Z
    3d36:	80 64       	ori	r24, 0x40	; 64
    3d38:	8c 93       	st	X, r24
	//------- on this part the two motors are connected to 1Y and 2Y
	SET_BIT(DDRD,4);	//--- EN2
    3d3a:	a1 e3       	ldi	r26, 0x31	; 49
    3d3c:	b0 e0       	ldi	r27, 0x00	; 0
    3d3e:	e1 e3       	ldi	r30, 0x31	; 49
    3d40:	f0 e0       	ldi	r31, 0x00	; 0
    3d42:	80 81       	ld	r24, Z
    3d44:	80 61       	ori	r24, 0x10	; 16
    3d46:	8c 93       	st	X, r24
	SET_BIT(DDRC,3);	//--- 1A
    3d48:	a4 e3       	ldi	r26, 0x34	; 52
    3d4a:	b0 e0       	ldi	r27, 0x00	; 0
    3d4c:	e4 e3       	ldi	r30, 0x34	; 52
    3d4e:	f0 e0       	ldi	r31, 0x00	; 0
    3d50:	80 81       	ld	r24, Z
    3d52:	88 60       	ori	r24, 0x08	; 8
    3d54:	8c 93       	st	X, r24
	SET_BIT(DDRC,4);	//--- 2A
    3d56:	a4 e3       	ldi	r26, 0x34	; 52
    3d58:	b0 e0       	ldi	r27, 0x00	; 0
    3d5a:	e4 e3       	ldi	r30, 0x34	; 52
    3d5c:	f0 e0       	ldi	r31, 0x00	; 0
    3d5e:	80 81       	ld	r24, Z
    3d60:	80 61       	ori	r24, 0x10	; 16
    3d62:	8c 93       	st	X, r24
}
    3d64:	cf 91       	pop	r28
    3d66:	df 91       	pop	r29
    3d68:	08 95       	ret

00003d6a <H_Bridge_vRunM1AndStopM2>:
/* ---- Following 3 Functions if for ConnectionsToGroundAndVoltage ----*/
void H_Bridge_vRunM1AndStopM2(){
    3d6a:	df 93       	push	r29
    3d6c:	cf 93       	push	r28
    3d6e:	cd b7       	in	r28, 0x3d	; 61
    3d70:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(PORTD,5);	//---EN1 High
    3d72:	a2 e3       	ldi	r26, 0x32	; 50
    3d74:	b0 e0       	ldi	r27, 0x00	; 0
    3d76:	e2 e3       	ldi	r30, 0x32	; 50
    3d78:	f0 e0       	ldi	r31, 0x00	; 0
    3d7a:	80 81       	ld	r24, Z
    3d7c:	80 62       	ori	r24, 0x20	; 32
    3d7e:	8c 93       	st	X, r24
	CLR_BIT(PORTC,5);	//---3A Low
    3d80:	a5 e3       	ldi	r26, 0x35	; 53
    3d82:	b0 e0       	ldi	r27, 0x00	; 0
    3d84:	e5 e3       	ldi	r30, 0x35	; 53
    3d86:	f0 e0       	ldi	r31, 0x00	; 0
    3d88:	80 81       	ld	r24, Z
    3d8a:	8f 7d       	andi	r24, 0xDF	; 223
    3d8c:	8c 93       	st	X, r24
	CLR_BIT(PORTC,6);	//---4A Low
    3d8e:	a5 e3       	ldi	r26, 0x35	; 53
    3d90:	b0 e0       	ldi	r27, 0x00	; 0
    3d92:	e5 e3       	ldi	r30, 0x35	; 53
    3d94:	f0 e0       	ldi	r31, 0x00	; 0
    3d96:	80 81       	ld	r24, Z
    3d98:	8f 7b       	andi	r24, 0xBF	; 191
    3d9a:	8c 93       	st	X, r24
}
    3d9c:	cf 91       	pop	r28
    3d9e:	df 91       	pop	r29
    3da0:	08 95       	ret

00003da2 <H_Bridge_vRunM2AndStopM1>:
void H_Bridge_vRunM2AndStopM1(){
    3da2:	df 93       	push	r29
    3da4:	cf 93       	push	r28
    3da6:	cd b7       	in	r28, 0x3d	; 61
    3da8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(PORTD,5);	//---EN1 High
    3daa:	a2 e3       	ldi	r26, 0x32	; 50
    3dac:	b0 e0       	ldi	r27, 0x00	; 0
    3dae:	e2 e3       	ldi	r30, 0x32	; 50
    3db0:	f0 e0       	ldi	r31, 0x00	; 0
    3db2:	80 81       	ld	r24, Z
    3db4:	80 62       	ori	r24, 0x20	; 32
    3db6:	8c 93       	st	X, r24
	SET_BIT(PORTC,5);	//---3A High
    3db8:	a5 e3       	ldi	r26, 0x35	; 53
    3dba:	b0 e0       	ldi	r27, 0x00	; 0
    3dbc:	e5 e3       	ldi	r30, 0x35	; 53
    3dbe:	f0 e0       	ldi	r31, 0x00	; 0
    3dc0:	80 81       	ld	r24, Z
    3dc2:	80 62       	ori	r24, 0x20	; 32
    3dc4:	8c 93       	st	X, r24
	SET_BIT(PORTC,6);	//---4A High
    3dc6:	a5 e3       	ldi	r26, 0x35	; 53
    3dc8:	b0 e0       	ldi	r27, 0x00	; 0
    3dca:	e5 e3       	ldi	r30, 0x35	; 53
    3dcc:	f0 e0       	ldi	r31, 0x00	; 0
    3dce:	80 81       	ld	r24, Z
    3dd0:	80 64       	ori	r24, 0x40	; 64
    3dd2:	8c 93       	st	X, r24
}
    3dd4:	cf 91       	pop	r28
    3dd6:	df 91       	pop	r29
    3dd8:	08 95       	ret

00003dda <H_Bridge_vM1AndM2FreeRuningStop>:
void H_Bridge_vM1AndM2FreeRuningStop(){
    3dda:	df 93       	push	r29
    3ddc:	cf 93       	push	r28
    3dde:	cd b7       	in	r28, 0x3d	; 61
    3de0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(PORTD,5);	//---EN1 Low
    3de2:	a2 e3       	ldi	r26, 0x32	; 50
    3de4:	b0 e0       	ldi	r27, 0x00	; 0
    3de6:	e2 e3       	ldi	r30, 0x32	; 50
    3de8:	f0 e0       	ldi	r31, 0x00	; 0
    3dea:	80 81       	ld	r24, Z
    3dec:	8f 7d       	andi	r24, 0xDF	; 223
    3dee:	8c 93       	st	X, r24
}
    3df0:	cf 91       	pop	r28
    3df2:	df 91       	pop	r29
    3df4:	08 95       	ret

00003df6 <H_Bridge_vM1AndM2TurnRight>:
/* ---- Following Functions if for BidirectionalDCMotorControl ----*/
void H_Bridge_vM1AndM2TurnRight(){
    3df6:	df 93       	push	r29
    3df8:	cf 93       	push	r28
    3dfa:	cd b7       	in	r28, 0x3d	; 61
    3dfc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(PORTD,4);	//--- EN2 High
    3dfe:	a2 e3       	ldi	r26, 0x32	; 50
    3e00:	b0 e0       	ldi	r27, 0x00	; 0
    3e02:	e2 e3       	ldi	r30, 0x32	; 50
    3e04:	f0 e0       	ldi	r31, 0x00	; 0
    3e06:	80 81       	ld	r24, Z
    3e08:	80 61       	ori	r24, 0x10	; 16
    3e0a:	8c 93       	st	X, r24
	CLR_BIT(PORTC,3);	//--- 1A Low
    3e0c:	a5 e3       	ldi	r26, 0x35	; 53
    3e0e:	b0 e0       	ldi	r27, 0x00	; 0
    3e10:	e5 e3       	ldi	r30, 0x35	; 53
    3e12:	f0 e0       	ldi	r31, 0x00	; 0
    3e14:	80 81       	ld	r24, Z
    3e16:	87 7f       	andi	r24, 0xF7	; 247
    3e18:	8c 93       	st	X, r24
	SET_BIT(PORTC,4);	//--- 2A High
    3e1a:	a5 e3       	ldi	r26, 0x35	; 53
    3e1c:	b0 e0       	ldi	r27, 0x00	; 0
    3e1e:	e5 e3       	ldi	r30, 0x35	; 53
    3e20:	f0 e0       	ldi	r31, 0x00	; 0
    3e22:	80 81       	ld	r24, Z
    3e24:	80 61       	ori	r24, 0x10	; 16
    3e26:	8c 93       	st	X, r24
}
    3e28:	cf 91       	pop	r28
    3e2a:	df 91       	pop	r29
    3e2c:	08 95       	ret

00003e2e <H_Bridge_vM1AndM2TurnLeft>:
void H_Bridge_vM1AndM2TurnLeft(){
    3e2e:	df 93       	push	r29
    3e30:	cf 93       	push	r28
    3e32:	cd b7       	in	r28, 0x3d	; 61
    3e34:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(PORTD,4);	//--- EN2 High
    3e36:	a2 e3       	ldi	r26, 0x32	; 50
    3e38:	b0 e0       	ldi	r27, 0x00	; 0
    3e3a:	e2 e3       	ldi	r30, 0x32	; 50
    3e3c:	f0 e0       	ldi	r31, 0x00	; 0
    3e3e:	80 81       	ld	r24, Z
    3e40:	80 61       	ori	r24, 0x10	; 16
    3e42:	8c 93       	st	X, r24
	SET_BIT(PORTC,3);	//--- 1A High
    3e44:	a5 e3       	ldi	r26, 0x35	; 53
    3e46:	b0 e0       	ldi	r27, 0x00	; 0
    3e48:	e5 e3       	ldi	r30, 0x35	; 53
    3e4a:	f0 e0       	ldi	r31, 0x00	; 0
    3e4c:	80 81       	ld	r24, Z
    3e4e:	88 60       	ori	r24, 0x08	; 8
    3e50:	8c 93       	st	X, r24
	CLR_BIT(PORTC,4);	//--- 2A Low
    3e52:	a5 e3       	ldi	r26, 0x35	; 53
    3e54:	b0 e0       	ldi	r27, 0x00	; 0
    3e56:	e5 e3       	ldi	r30, 0x35	; 53
    3e58:	f0 e0       	ldi	r31, 0x00	; 0
    3e5a:	80 81       	ld	r24, Z
    3e5c:	8f 7e       	andi	r24, 0xEF	; 239
    3e5e:	8c 93       	st	X, r24
}
    3e60:	cf 91       	pop	r28
    3e62:	df 91       	pop	r29
    3e64:	08 95       	ret

00003e66 <H_Bridge_vM1AndM2FastStop>:
void H_Bridge_vM1AndM2FastStop(){
    3e66:	df 93       	push	r29
    3e68:	cf 93       	push	r28
    3e6a:	cd b7       	in	r28, 0x3d	; 61
    3e6c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(PORTD,4);	//--- EN2 Low
    3e6e:	a2 e3       	ldi	r26, 0x32	; 50
    3e70:	b0 e0       	ldi	r27, 0x00	; 0
    3e72:	e2 e3       	ldi	r30, 0x32	; 50
    3e74:	f0 e0       	ldi	r31, 0x00	; 0
    3e76:	80 81       	ld	r24, Z
    3e78:	8f 7e       	andi	r24, 0xEF	; 239
    3e7a:	8c 93       	st	X, r24
}
    3e7c:	cf 91       	pop	r28
    3e7e:	df 91       	pop	r29
    3e80:	08 95       	ret

00003e82 <KAYPAD_vInit>:
* \Parameters (in) : None
* \Parameters (out): None
* \Return value:   : void  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void KAYPAD_vInit(){
    3e82:	df 93       	push	r29
    3e84:	cf 93       	push	r28
    3e86:	cd b7       	in	r28, 0x3d	; 61
    3e88:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPortDirection(KEYPAD_PORT,KEYPAD_DIRECTION);
    3e8a:	81 e0       	ldi	r24, 0x01	; 1
    3e8c:	6f e0       	ldi	r22, 0x0F	; 15
    3e8e:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <DIO_vSetPortDirection>
	DIO_vSetPortValue(KEYPAD_PORT,KEYPAD_VALUE);
    3e92:	81 e0       	ldi	r24, 0x01	; 1
    3e94:	6f ef       	ldi	r22, 0xFF	; 255
    3e96:	0e 94 1a 19 	call	0x3234	; 0x3234 <DIO_vSetPortValue>

}
    3e9a:	cf 91       	pop	r28
    3e9c:	df 91       	pop	r29
    3e9e:	08 95       	ret

00003ea0 <KAYPAD_u8GetKey>:
* \Parameters (in) : None
* \Parameters (out): None
* \Return value:   : unsigned char  E_OK
*                                    E_NOT_OK
*******************************************************************************/
u8 KAYPAD_u8GetKey(){
    3ea0:	df 93       	push	r29
    3ea2:	cf 93       	push	r28
    3ea4:	cd b7       	in	r28, 0x3d	; 61
    3ea6:	de b7       	in	r29, 0x3e	; 62
    3ea8:	65 97       	sbiw	r28, 0x15	; 21
    3eaa:	0f b6       	in	r0, 0x3f	; 63
    3eac:	f8 94       	cli
    3eae:	de bf       	out	0x3e, r29	; 62
    3eb0:	0f be       	out	0x3f, r0	; 63
    3eb2:	cd bf       	out	0x3d, r28	; 61
	u8 Loc_u8RowCounter, Loc_u8CoulomsCounter;
	u8 row , coulom, temp;
	coulom=3;
    3eb4:	83 e0       	ldi	r24, 0x03	; 3
    3eb6:	89 8b       	std	Y+17, r24	; 0x11
	u8 value=9;
    3eb8:	89 e0       	ldi	r24, 0x09	; 9
    3eba:	8f 87       	std	Y+15, r24	; 0x0f
	for(Loc_u8CoulomsCounter=0;Loc_u8CoulomsCounter<4;Loc_u8CoulomsCounter++){
    3ebc:	1b 8a       	std	Y+19, r1	; 0x13
    3ebe:	b7 c0       	rjmp	.+366    	; 0x402e <KAYPAD_u8GetKey+0x18e>
		DIO_vSetPinValue(KEYPAD_PORT,Loc_u8CoulomsCounter,Pin_Low);
    3ec0:	81 e0       	ldi	r24, 0x01	; 1
    3ec2:	6b 89       	ldd	r22, Y+19	; 0x13
    3ec4:	40 e0       	ldi	r20, 0x00	; 0
    3ec6:	0e 94 b4 1a 	call	0x3568	; 0x3568 <DIO_vSetPinValue>
		row=3;
    3eca:	83 e0       	ldi	r24, 0x03	; 3
    3ecc:	8a 8b       	std	Y+18, r24	; 0x12
		for(Loc_u8RowCounter=4;Loc_u8RowCounter<8;Loc_u8RowCounter++){
    3ece:	84 e0       	ldi	r24, 0x04	; 4
    3ed0:	8c 8b       	std	Y+20, r24	; 0x14
    3ed2:	9e c0       	rjmp	.+316    	; 0x4010 <KAYPAD_u8GetKey+0x170>
			temp=DIO_u8PGetPinValue(KEYPAD_PORT,Loc_u8RowCounter);
    3ed4:	81 e0       	ldi	r24, 0x01	; 1
    3ed6:	6c 89       	ldd	r22, Y+20	; 0x14
    3ed8:	0e 94 8f 1b 	call	0x371e	; 0x371e <DIO_u8PGetPinValue>
    3edc:	88 8b       	std	Y+16, r24	; 0x10
			if(temp==0){
    3ede:	88 89       	ldd	r24, Y+16	; 0x10
    3ee0:	88 23       	and	r24, r24
    3ee2:	09 f0       	breq	.+2      	; 0x3ee6 <KAYPAD_u8GetKey+0x46>
    3ee4:	8f c0       	rjmp	.+286    	; 0x4004 <KAYPAD_u8GetKey+0x164>
    3ee6:	80 e0       	ldi	r24, 0x00	; 0
    3ee8:	90 e0       	ldi	r25, 0x00	; 0
    3eea:	a8 ec       	ldi	r26, 0xC8	; 200
    3eec:	b1 e4       	ldi	r27, 0x41	; 65
    3eee:	8b 87       	std	Y+11, r24	; 0x0b
    3ef0:	9c 87       	std	Y+12, r25	; 0x0c
    3ef2:	ad 87       	std	Y+13, r26	; 0x0d
    3ef4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ef6:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ef8:	7c 85       	ldd	r23, Y+12	; 0x0c
    3efa:	8d 85       	ldd	r24, Y+13	; 0x0d
    3efc:	9e 85       	ldd	r25, Y+14	; 0x0e
    3efe:	20 e0       	ldi	r18, 0x00	; 0
    3f00:	30 e0       	ldi	r19, 0x00	; 0
    3f02:	4a e7       	ldi	r20, 0x7A	; 122
    3f04:	55 e4       	ldi	r21, 0x45	; 69
    3f06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f0a:	dc 01       	movw	r26, r24
    3f0c:	cb 01       	movw	r24, r22
    3f0e:	8f 83       	std	Y+7, r24	; 0x07
    3f10:	98 87       	std	Y+8, r25	; 0x08
    3f12:	a9 87       	std	Y+9, r26	; 0x09
    3f14:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3f16:	6f 81       	ldd	r22, Y+7	; 0x07
    3f18:	78 85       	ldd	r23, Y+8	; 0x08
    3f1a:	89 85       	ldd	r24, Y+9	; 0x09
    3f1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f1e:	20 e0       	ldi	r18, 0x00	; 0
    3f20:	30 e0       	ldi	r19, 0x00	; 0
    3f22:	40 e8       	ldi	r20, 0x80	; 128
    3f24:	5f e3       	ldi	r21, 0x3F	; 63
    3f26:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3f2a:	88 23       	and	r24, r24
    3f2c:	2c f4       	brge	.+10     	; 0x3f38 <KAYPAD_u8GetKey+0x98>
		__ticks = 1;
    3f2e:	81 e0       	ldi	r24, 0x01	; 1
    3f30:	90 e0       	ldi	r25, 0x00	; 0
    3f32:	9e 83       	std	Y+6, r25	; 0x06
    3f34:	8d 83       	std	Y+5, r24	; 0x05
    3f36:	3f c0       	rjmp	.+126    	; 0x3fb6 <KAYPAD_u8GetKey+0x116>
	else if (__tmp > 65535)
    3f38:	6f 81       	ldd	r22, Y+7	; 0x07
    3f3a:	78 85       	ldd	r23, Y+8	; 0x08
    3f3c:	89 85       	ldd	r24, Y+9	; 0x09
    3f3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f40:	20 e0       	ldi	r18, 0x00	; 0
    3f42:	3f ef       	ldi	r19, 0xFF	; 255
    3f44:	4f e7       	ldi	r20, 0x7F	; 127
    3f46:	57 e4       	ldi	r21, 0x47	; 71
    3f48:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3f4c:	18 16       	cp	r1, r24
    3f4e:	4c f5       	brge	.+82     	; 0x3fa2 <KAYPAD_u8GetKey+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f50:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f52:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f54:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f56:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f58:	20 e0       	ldi	r18, 0x00	; 0
    3f5a:	30 e0       	ldi	r19, 0x00	; 0
    3f5c:	40 e2       	ldi	r20, 0x20	; 32
    3f5e:	51 e4       	ldi	r21, 0x41	; 65
    3f60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f64:	dc 01       	movw	r26, r24
    3f66:	cb 01       	movw	r24, r22
    3f68:	bc 01       	movw	r22, r24
    3f6a:	cd 01       	movw	r24, r26
    3f6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f70:	dc 01       	movw	r26, r24
    3f72:	cb 01       	movw	r24, r22
    3f74:	9e 83       	std	Y+6, r25	; 0x06
    3f76:	8d 83       	std	Y+5, r24	; 0x05
    3f78:	0f c0       	rjmp	.+30     	; 0x3f98 <KAYPAD_u8GetKey+0xf8>
    3f7a:	80 e9       	ldi	r24, 0x90	; 144
    3f7c:	91 e0       	ldi	r25, 0x01	; 1
    3f7e:	9c 83       	std	Y+4, r25	; 0x04
    3f80:	8b 83       	std	Y+3, r24	; 0x03
    3f82:	8b 81       	ldd	r24, Y+3	; 0x03
    3f84:	9c 81       	ldd	r25, Y+4	; 0x04
    3f86:	01 97       	sbiw	r24, 0x01	; 1
    3f88:	f1 f7       	brne	.-4      	; 0x3f86 <KAYPAD_u8GetKey+0xe6>
    3f8a:	9c 83       	std	Y+4, r25	; 0x04
    3f8c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f8e:	8d 81       	ldd	r24, Y+5	; 0x05
    3f90:	9e 81       	ldd	r25, Y+6	; 0x06
    3f92:	01 97       	sbiw	r24, 0x01	; 1
    3f94:	9e 83       	std	Y+6, r25	; 0x06
    3f96:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f98:	8d 81       	ldd	r24, Y+5	; 0x05
    3f9a:	9e 81       	ldd	r25, Y+6	; 0x06
    3f9c:	00 97       	sbiw	r24, 0x00	; 0
    3f9e:	69 f7       	brne	.-38     	; 0x3f7a <KAYPAD_u8GetKey+0xda>
    3fa0:	14 c0       	rjmp	.+40     	; 0x3fca <KAYPAD_u8GetKey+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fa2:	6f 81       	ldd	r22, Y+7	; 0x07
    3fa4:	78 85       	ldd	r23, Y+8	; 0x08
    3fa6:	89 85       	ldd	r24, Y+9	; 0x09
    3fa8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3faa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fae:	dc 01       	movw	r26, r24
    3fb0:	cb 01       	movw	r24, r22
    3fb2:	9e 83       	std	Y+6, r25	; 0x06
    3fb4:	8d 83       	std	Y+5, r24	; 0x05
    3fb6:	8d 81       	ldd	r24, Y+5	; 0x05
    3fb8:	9e 81       	ldd	r25, Y+6	; 0x06
    3fba:	9a 83       	std	Y+2, r25	; 0x02
    3fbc:	89 83       	std	Y+1, r24	; 0x01
    3fbe:	89 81       	ldd	r24, Y+1	; 0x01
    3fc0:	9a 81       	ldd	r25, Y+2	; 0x02
    3fc2:	01 97       	sbiw	r24, 0x01	; 1
    3fc4:	f1 f7       	brne	.-4      	; 0x3fc2 <KAYPAD_u8GetKey+0x122>
    3fc6:	9a 83       	std	Y+2, r25	; 0x02
    3fc8:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(25);
				temp=DIO_u8PGetPinValue(KEYPAD_PORT,Loc_u8RowCounter);
    3fca:	81 e0       	ldi	r24, 0x01	; 1
    3fcc:	6c 89       	ldd	r22, Y+20	; 0x14
    3fce:	0e 94 8f 1b 	call	0x371e	; 0x371e <DIO_u8PGetPinValue>
    3fd2:	88 8b       	std	Y+16, r24	; 0x10
				if(temp==0){
    3fd4:	88 89       	ldd	r24, Y+16	; 0x10
    3fd6:	88 23       	and	r24, r24
    3fd8:	a9 f4       	brne	.+42     	; 0x4004 <KAYPAD_u8GetKey+0x164>
					value=arr[row][coulom];
    3fda:	8a 89       	ldd	r24, Y+18	; 0x12
    3fdc:	48 2f       	mov	r20, r24
    3fde:	50 e0       	ldi	r21, 0x00	; 0
    3fe0:	89 89       	ldd	r24, Y+17	; 0x11
    3fe2:	28 2f       	mov	r18, r24
    3fe4:	30 e0       	ldi	r19, 0x00	; 0
    3fe6:	ca 01       	movw	r24, r20
    3fe8:	88 0f       	add	r24, r24
    3fea:	99 1f       	adc	r25, r25
    3fec:	88 0f       	add	r24, r24
    3fee:	99 1f       	adc	r25, r25
    3ff0:	82 0f       	add	r24, r18
    3ff2:	93 1f       	adc	r25, r19
    3ff4:	fc 01       	movw	r30, r24
    3ff6:	e3 55       	subi	r30, 0x53	; 83
    3ff8:	ff 4f       	sbci	r31, 0xFF	; 255
    3ffa:	80 81       	ld	r24, Z
    3ffc:	8f 87       	std	Y+15, r24	; 0x0f
					return value;
    3ffe:	8f 85       	ldd	r24, Y+15	; 0x0f
    4000:	8d 8b       	std	Y+21, r24	; 0x15
    4002:	1b c0       	rjmp	.+54     	; 0x403a <KAYPAD_u8GetKey+0x19a>
				}
			}
			row--;
    4004:	8a 89       	ldd	r24, Y+18	; 0x12
    4006:	81 50       	subi	r24, 0x01	; 1
    4008:	8a 8b       	std	Y+18, r24	; 0x12
	coulom=3;
	u8 value=9;
	for(Loc_u8CoulomsCounter=0;Loc_u8CoulomsCounter<4;Loc_u8CoulomsCounter++){
		DIO_vSetPinValue(KEYPAD_PORT,Loc_u8CoulomsCounter,Pin_Low);
		row=3;
		for(Loc_u8RowCounter=4;Loc_u8RowCounter<8;Loc_u8RowCounter++){
    400a:	8c 89       	ldd	r24, Y+20	; 0x14
    400c:	8f 5f       	subi	r24, 0xFF	; 255
    400e:	8c 8b       	std	Y+20, r24	; 0x14
    4010:	8c 89       	ldd	r24, Y+20	; 0x14
    4012:	88 30       	cpi	r24, 0x08	; 8
    4014:	08 f4       	brcc	.+2      	; 0x4018 <KAYPAD_u8GetKey+0x178>
    4016:	5e cf       	rjmp	.-324    	; 0x3ed4 <KAYPAD_u8GetKey+0x34>
					return value;
				}
			}
			row--;
		}
		coulom--;
    4018:	89 89       	ldd	r24, Y+17	; 0x11
    401a:	81 50       	subi	r24, 0x01	; 1
    401c:	89 8b       	std	Y+17, r24	; 0x11
		DIO_vSetPinValue(KEYPAD_PORT,Loc_u8CoulomsCounter,Pin_High);
    401e:	81 e0       	ldi	r24, 0x01	; 1
    4020:	6b 89       	ldd	r22, Y+19	; 0x13
    4022:	41 e0       	ldi	r20, 0x01	; 1
    4024:	0e 94 b4 1a 	call	0x3568	; 0x3568 <DIO_vSetPinValue>
u8 KAYPAD_u8GetKey(){
	u8 Loc_u8RowCounter, Loc_u8CoulomsCounter;
	u8 row , coulom, temp;
	coulom=3;
	u8 value=9;
	for(Loc_u8CoulomsCounter=0;Loc_u8CoulomsCounter<4;Loc_u8CoulomsCounter++){
    4028:	8b 89       	ldd	r24, Y+19	; 0x13
    402a:	8f 5f       	subi	r24, 0xFF	; 255
    402c:	8b 8b       	std	Y+19, r24	; 0x13
    402e:	8b 89       	ldd	r24, Y+19	; 0x13
    4030:	84 30       	cpi	r24, 0x04	; 4
    4032:	08 f4       	brcc	.+2      	; 0x4036 <KAYPAD_u8GetKey+0x196>
    4034:	45 cf       	rjmp	.-374    	; 0x3ec0 <KAYPAD_u8GetKey+0x20>
		}
		coulom--;
		DIO_vSetPinValue(KEYPAD_PORT,Loc_u8CoulomsCounter,Pin_High);
	}

	return 0xff;
    4036:	8f ef       	ldi	r24, 0xFF	; 255
    4038:	8d 8b       	std	Y+21, r24	; 0x15
    403a:	8d 89       	ldd	r24, Y+21	; 0x15
}
    403c:	65 96       	adiw	r28, 0x15	; 21
    403e:	0f b6       	in	r0, 0x3f	; 63
    4040:	f8 94       	cli
    4042:	de bf       	out	0x3e, r29	; 62
    4044:	0f be       	out	0x3f, r0	; 63
    4046:	cd bf       	out	0x3d, r28	; 61
    4048:	cf 91       	pop	r28
    404a:	df 91       	pop	r29
    404c:	08 95       	ret

0000404e <LCD_vSendCommand>:
 *
 *  Created on: Dec 30, 2022
 *      Author: a7med
 */
#include "LCD.h"
void LCD_vSendCommand(u8 Loc_u8Command){
    404e:	df 93       	push	r29
    4050:	cf 93       	push	r28
    4052:	cd b7       	in	r28, 0x3d	; 61
    4054:	de b7       	in	r29, 0x3e	; 62
    4056:	6d 97       	sbiw	r28, 0x1d	; 29
    4058:	0f b6       	in	r0, 0x3f	; 63
    405a:	f8 94       	cli
    405c:	de bf       	out	0x3e, r29	; 62
    405e:	0f be       	out	0x3f, r0	; 63
    4060:	cd bf       	out	0x3d, r28	; 61
    4062:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_vSetPinValue(PortB, Pin1, Pin_Low);
    4064:	81 e0       	ldi	r24, 0x01	; 1
    4066:	61 e0       	ldi	r22, 0x01	; 1
    4068:	40 e0       	ldi	r20, 0x00	; 0
    406a:	0e 94 b4 1a 	call	0x3568	; 0x3568 <DIO_vSetPinValue>
	DIO_vSetPinValue(PortB, Pin2, Pin_Low);
    406e:	81 e0       	ldi	r24, 0x01	; 1
    4070:	62 e0       	ldi	r22, 0x02	; 2
    4072:	40 e0       	ldi	r20, 0x00	; 0
    4074:	0e 94 b4 1a 	call	0x3568	; 0x3568 <DIO_vSetPinValue>
	DIO_vSetPinValue(PortB, Pin3, Pin_Low);
    4078:	81 e0       	ldi	r24, 0x01	; 1
    407a:	63 e0       	ldi	r22, 0x03	; 3
    407c:	40 e0       	ldi	r20, 0x00	; 0
    407e:	0e 94 b4 1a 	call	0x3568	; 0x3568 <DIO_vSetPinValue>
	//------Send command-------
	DIO_vSetPortValue(PortA,(Loc_u8Command)&0xF0);
    4082:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4084:	98 2f       	mov	r25, r24
    4086:	90 7f       	andi	r25, 0xF0	; 240
    4088:	80 e0       	ldi	r24, 0x00	; 0
    408a:	69 2f       	mov	r22, r25
    408c:	0e 94 1a 19 	call	0x3234	; 0x3234 <DIO_vSetPortValue>
	DIO_vSetPinValue(PortB, Pin3, Pin_High);
    4090:	81 e0       	ldi	r24, 0x01	; 1
    4092:	63 e0       	ldi	r22, 0x03	; 3
    4094:	41 e0       	ldi	r20, 0x01	; 1
    4096:	0e 94 b4 1a 	call	0x3568	; 0x3568 <DIO_vSetPinValue>
    409a:	80 e0       	ldi	r24, 0x00	; 0
    409c:	90 e0       	ldi	r25, 0x00	; 0
    409e:	a0 e2       	ldi	r26, 0x20	; 32
    40a0:	b1 e4       	ldi	r27, 0x41	; 65
    40a2:	89 8f       	std	Y+25, r24	; 0x19
    40a4:	9a 8f       	std	Y+26, r25	; 0x1a
    40a6:	ab 8f       	std	Y+27, r26	; 0x1b
    40a8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40aa:	69 8d       	ldd	r22, Y+25	; 0x19
    40ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    40ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    40b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    40b2:	20 e0       	ldi	r18, 0x00	; 0
    40b4:	30 e0       	ldi	r19, 0x00	; 0
    40b6:	4a e7       	ldi	r20, 0x7A	; 122
    40b8:	55 e4       	ldi	r21, 0x45	; 69
    40ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40be:	dc 01       	movw	r26, r24
    40c0:	cb 01       	movw	r24, r22
    40c2:	8d 8b       	std	Y+21, r24	; 0x15
    40c4:	9e 8b       	std	Y+22, r25	; 0x16
    40c6:	af 8b       	std	Y+23, r26	; 0x17
    40c8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    40ca:	6d 89       	ldd	r22, Y+21	; 0x15
    40cc:	7e 89       	ldd	r23, Y+22	; 0x16
    40ce:	8f 89       	ldd	r24, Y+23	; 0x17
    40d0:	98 8d       	ldd	r25, Y+24	; 0x18
    40d2:	20 e0       	ldi	r18, 0x00	; 0
    40d4:	30 e0       	ldi	r19, 0x00	; 0
    40d6:	40 e8       	ldi	r20, 0x80	; 128
    40d8:	5f e3       	ldi	r21, 0x3F	; 63
    40da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    40de:	88 23       	and	r24, r24
    40e0:	2c f4       	brge	.+10     	; 0x40ec <LCD_vSendCommand+0x9e>
		__ticks = 1;
    40e2:	81 e0       	ldi	r24, 0x01	; 1
    40e4:	90 e0       	ldi	r25, 0x00	; 0
    40e6:	9c 8b       	std	Y+20, r25	; 0x14
    40e8:	8b 8b       	std	Y+19, r24	; 0x13
    40ea:	3f c0       	rjmp	.+126    	; 0x416a <LCD_vSendCommand+0x11c>
	else if (__tmp > 65535)
    40ec:	6d 89       	ldd	r22, Y+21	; 0x15
    40ee:	7e 89       	ldd	r23, Y+22	; 0x16
    40f0:	8f 89       	ldd	r24, Y+23	; 0x17
    40f2:	98 8d       	ldd	r25, Y+24	; 0x18
    40f4:	20 e0       	ldi	r18, 0x00	; 0
    40f6:	3f ef       	ldi	r19, 0xFF	; 255
    40f8:	4f e7       	ldi	r20, 0x7F	; 127
    40fa:	57 e4       	ldi	r21, 0x47	; 71
    40fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4100:	18 16       	cp	r1, r24
    4102:	4c f5       	brge	.+82     	; 0x4156 <LCD_vSendCommand+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4104:	69 8d       	ldd	r22, Y+25	; 0x19
    4106:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4108:	8b 8d       	ldd	r24, Y+27	; 0x1b
    410a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    410c:	20 e0       	ldi	r18, 0x00	; 0
    410e:	30 e0       	ldi	r19, 0x00	; 0
    4110:	40 e2       	ldi	r20, 0x20	; 32
    4112:	51 e4       	ldi	r21, 0x41	; 65
    4114:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4118:	dc 01       	movw	r26, r24
    411a:	cb 01       	movw	r24, r22
    411c:	bc 01       	movw	r22, r24
    411e:	cd 01       	movw	r24, r26
    4120:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4124:	dc 01       	movw	r26, r24
    4126:	cb 01       	movw	r24, r22
    4128:	9c 8b       	std	Y+20, r25	; 0x14
    412a:	8b 8b       	std	Y+19, r24	; 0x13
    412c:	0f c0       	rjmp	.+30     	; 0x414c <LCD_vSendCommand+0xfe>
    412e:	80 e9       	ldi	r24, 0x90	; 144
    4130:	91 e0       	ldi	r25, 0x01	; 1
    4132:	9a 8b       	std	Y+18, r25	; 0x12
    4134:	89 8b       	std	Y+17, r24	; 0x11
    4136:	89 89       	ldd	r24, Y+17	; 0x11
    4138:	9a 89       	ldd	r25, Y+18	; 0x12
    413a:	01 97       	sbiw	r24, 0x01	; 1
    413c:	f1 f7       	brne	.-4      	; 0x413a <LCD_vSendCommand+0xec>
    413e:	9a 8b       	std	Y+18, r25	; 0x12
    4140:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4142:	8b 89       	ldd	r24, Y+19	; 0x13
    4144:	9c 89       	ldd	r25, Y+20	; 0x14
    4146:	01 97       	sbiw	r24, 0x01	; 1
    4148:	9c 8b       	std	Y+20, r25	; 0x14
    414a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    414c:	8b 89       	ldd	r24, Y+19	; 0x13
    414e:	9c 89       	ldd	r25, Y+20	; 0x14
    4150:	00 97       	sbiw	r24, 0x00	; 0
    4152:	69 f7       	brne	.-38     	; 0x412e <LCD_vSendCommand+0xe0>
    4154:	14 c0       	rjmp	.+40     	; 0x417e <LCD_vSendCommand+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4156:	6d 89       	ldd	r22, Y+21	; 0x15
    4158:	7e 89       	ldd	r23, Y+22	; 0x16
    415a:	8f 89       	ldd	r24, Y+23	; 0x17
    415c:	98 8d       	ldd	r25, Y+24	; 0x18
    415e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4162:	dc 01       	movw	r26, r24
    4164:	cb 01       	movw	r24, r22
    4166:	9c 8b       	std	Y+20, r25	; 0x14
    4168:	8b 8b       	std	Y+19, r24	; 0x13
    416a:	8b 89       	ldd	r24, Y+19	; 0x13
    416c:	9c 89       	ldd	r25, Y+20	; 0x14
    416e:	98 8b       	std	Y+16, r25	; 0x10
    4170:	8f 87       	std	Y+15, r24	; 0x0f
    4172:	8f 85       	ldd	r24, Y+15	; 0x0f
    4174:	98 89       	ldd	r25, Y+16	; 0x10
    4176:	01 97       	sbiw	r24, 0x01	; 1
    4178:	f1 f7       	brne	.-4      	; 0x4176 <LCD_vSendCommand+0x128>
    417a:	98 8b       	std	Y+16, r25	; 0x10
    417c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	DIO_vSetPinValue(PortB, Pin3, Pin_Low);
    417e:	81 e0       	ldi	r24, 0x01	; 1
    4180:	63 e0       	ldi	r22, 0x03	; 3
    4182:	40 e0       	ldi	r20, 0x00	; 0
    4184:	0e 94 b4 1a 	call	0x3568	; 0x3568 <DIO_vSetPinValue>
	DIO_vSetPortValue(PortA,(Loc_u8Command<<4));
    4188:	8d 8d       	ldd	r24, Y+29	; 0x1d
    418a:	98 2f       	mov	r25, r24
    418c:	92 95       	swap	r25
    418e:	90 7f       	andi	r25, 0xF0	; 240
    4190:	80 e0       	ldi	r24, 0x00	; 0
    4192:	69 2f       	mov	r22, r25
    4194:	0e 94 1a 19 	call	0x3234	; 0x3234 <DIO_vSetPortValue>
	DIO_vSetPinValue(PortB, Pin3, Pin_High);
    4198:	81 e0       	ldi	r24, 0x01	; 1
    419a:	63 e0       	ldi	r22, 0x03	; 3
    419c:	41 e0       	ldi	r20, 0x01	; 1
    419e:	0e 94 b4 1a 	call	0x3568	; 0x3568 <DIO_vSetPinValue>
    41a2:	80 e0       	ldi	r24, 0x00	; 0
    41a4:	90 e0       	ldi	r25, 0x00	; 0
    41a6:	a0 e2       	ldi	r26, 0x20	; 32
    41a8:	b1 e4       	ldi	r27, 0x41	; 65
    41aa:	8b 87       	std	Y+11, r24	; 0x0b
    41ac:	9c 87       	std	Y+12, r25	; 0x0c
    41ae:	ad 87       	std	Y+13, r26	; 0x0d
    41b0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    41b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    41b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    41b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    41ba:	20 e0       	ldi	r18, 0x00	; 0
    41bc:	30 e0       	ldi	r19, 0x00	; 0
    41be:	4a e7       	ldi	r20, 0x7A	; 122
    41c0:	55 e4       	ldi	r21, 0x45	; 69
    41c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41c6:	dc 01       	movw	r26, r24
    41c8:	cb 01       	movw	r24, r22
    41ca:	8f 83       	std	Y+7, r24	; 0x07
    41cc:	98 87       	std	Y+8, r25	; 0x08
    41ce:	a9 87       	std	Y+9, r26	; 0x09
    41d0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    41d2:	6f 81       	ldd	r22, Y+7	; 0x07
    41d4:	78 85       	ldd	r23, Y+8	; 0x08
    41d6:	89 85       	ldd	r24, Y+9	; 0x09
    41d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    41da:	20 e0       	ldi	r18, 0x00	; 0
    41dc:	30 e0       	ldi	r19, 0x00	; 0
    41de:	40 e8       	ldi	r20, 0x80	; 128
    41e0:	5f e3       	ldi	r21, 0x3F	; 63
    41e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    41e6:	88 23       	and	r24, r24
    41e8:	2c f4       	brge	.+10     	; 0x41f4 <LCD_vSendCommand+0x1a6>
		__ticks = 1;
    41ea:	81 e0       	ldi	r24, 0x01	; 1
    41ec:	90 e0       	ldi	r25, 0x00	; 0
    41ee:	9e 83       	std	Y+6, r25	; 0x06
    41f0:	8d 83       	std	Y+5, r24	; 0x05
    41f2:	3f c0       	rjmp	.+126    	; 0x4272 <LCD_vSendCommand+0x224>
	else if (__tmp > 65535)
    41f4:	6f 81       	ldd	r22, Y+7	; 0x07
    41f6:	78 85       	ldd	r23, Y+8	; 0x08
    41f8:	89 85       	ldd	r24, Y+9	; 0x09
    41fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    41fc:	20 e0       	ldi	r18, 0x00	; 0
    41fe:	3f ef       	ldi	r19, 0xFF	; 255
    4200:	4f e7       	ldi	r20, 0x7F	; 127
    4202:	57 e4       	ldi	r21, 0x47	; 71
    4204:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4208:	18 16       	cp	r1, r24
    420a:	4c f5       	brge	.+82     	; 0x425e <LCD_vSendCommand+0x210>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    420c:	6b 85       	ldd	r22, Y+11	; 0x0b
    420e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4210:	8d 85       	ldd	r24, Y+13	; 0x0d
    4212:	9e 85       	ldd	r25, Y+14	; 0x0e
    4214:	20 e0       	ldi	r18, 0x00	; 0
    4216:	30 e0       	ldi	r19, 0x00	; 0
    4218:	40 e2       	ldi	r20, 0x20	; 32
    421a:	51 e4       	ldi	r21, 0x41	; 65
    421c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4220:	dc 01       	movw	r26, r24
    4222:	cb 01       	movw	r24, r22
    4224:	bc 01       	movw	r22, r24
    4226:	cd 01       	movw	r24, r26
    4228:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    422c:	dc 01       	movw	r26, r24
    422e:	cb 01       	movw	r24, r22
    4230:	9e 83       	std	Y+6, r25	; 0x06
    4232:	8d 83       	std	Y+5, r24	; 0x05
    4234:	0f c0       	rjmp	.+30     	; 0x4254 <LCD_vSendCommand+0x206>
    4236:	80 e9       	ldi	r24, 0x90	; 144
    4238:	91 e0       	ldi	r25, 0x01	; 1
    423a:	9c 83       	std	Y+4, r25	; 0x04
    423c:	8b 83       	std	Y+3, r24	; 0x03
    423e:	8b 81       	ldd	r24, Y+3	; 0x03
    4240:	9c 81       	ldd	r25, Y+4	; 0x04
    4242:	01 97       	sbiw	r24, 0x01	; 1
    4244:	f1 f7       	brne	.-4      	; 0x4242 <LCD_vSendCommand+0x1f4>
    4246:	9c 83       	std	Y+4, r25	; 0x04
    4248:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    424a:	8d 81       	ldd	r24, Y+5	; 0x05
    424c:	9e 81       	ldd	r25, Y+6	; 0x06
    424e:	01 97       	sbiw	r24, 0x01	; 1
    4250:	9e 83       	std	Y+6, r25	; 0x06
    4252:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4254:	8d 81       	ldd	r24, Y+5	; 0x05
    4256:	9e 81       	ldd	r25, Y+6	; 0x06
    4258:	00 97       	sbiw	r24, 0x00	; 0
    425a:	69 f7       	brne	.-38     	; 0x4236 <LCD_vSendCommand+0x1e8>
    425c:	14 c0       	rjmp	.+40     	; 0x4286 <LCD_vSendCommand+0x238>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    425e:	6f 81       	ldd	r22, Y+7	; 0x07
    4260:	78 85       	ldd	r23, Y+8	; 0x08
    4262:	89 85       	ldd	r24, Y+9	; 0x09
    4264:	9a 85       	ldd	r25, Y+10	; 0x0a
    4266:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    426a:	dc 01       	movw	r26, r24
    426c:	cb 01       	movw	r24, r22
    426e:	9e 83       	std	Y+6, r25	; 0x06
    4270:	8d 83       	std	Y+5, r24	; 0x05
    4272:	8d 81       	ldd	r24, Y+5	; 0x05
    4274:	9e 81       	ldd	r25, Y+6	; 0x06
    4276:	9a 83       	std	Y+2, r25	; 0x02
    4278:	89 83       	std	Y+1, r24	; 0x01
    427a:	89 81       	ldd	r24, Y+1	; 0x01
    427c:	9a 81       	ldd	r25, Y+2	; 0x02
    427e:	01 97       	sbiw	r24, 0x01	; 1
    4280:	f1 f7       	brne	.-4      	; 0x427e <LCD_vSendCommand+0x230>
    4282:	9a 83       	std	Y+2, r25	; 0x02
    4284:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	DIO_vSetPinValue(PortB, Pin3, Pin_Low);
    4286:	81 e0       	ldi	r24, 0x01	; 1
    4288:	63 e0       	ldi	r22, 0x03	; 3
    428a:	40 e0       	ldi	r20, 0x00	; 0
    428c:	0e 94 b4 1a 	call	0x3568	; 0x3568 <DIO_vSetPinValue>


}
    4290:	6d 96       	adiw	r28, 0x1d	; 29
    4292:	0f b6       	in	r0, 0x3f	; 63
    4294:	f8 94       	cli
    4296:	de bf       	out	0x3e, r29	; 62
    4298:	0f be       	out	0x3f, r0	; 63
    429a:	cd bf       	out	0x3d, r28	; 61
    429c:	cf 91       	pop	r28
    429e:	df 91       	pop	r29
    42a0:	08 95       	ret

000042a2 <LCD_vInit>:
void LCD_vInit(){
    42a2:	0f 93       	push	r16
    42a4:	1f 93       	push	r17
    42a6:	df 93       	push	r29
    42a8:	cf 93       	push	r28
    42aa:	cd b7       	in	r28, 0x3d	; 61
    42ac:	de b7       	in	r29, 0x3e	; 62
    42ae:	c6 54       	subi	r28, 0x46	; 70
    42b0:	d0 40       	sbci	r29, 0x00	; 0
    42b2:	0f b6       	in	r0, 0x3f	; 63
    42b4:	f8 94       	cli
    42b6:	de bf       	out	0x3e, r29	; 62
    42b8:	0f be       	out	0x3f, r0	; 63
    42ba:	cd bf       	out	0x3d, r28	; 61
	//------Set used pins as output-----
	DIO_vSetPinDirection(PortB, Pin1, Pin_OutPut);
    42bc:	81 e0       	ldi	r24, 0x01	; 1
    42be:	61 e0       	ldi	r22, 0x01	; 1
    42c0:	41 e0       	ldi	r20, 0x01	; 1
    42c2:	0e 94 b1 19 	call	0x3362	; 0x3362 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PortB, Pin3, Pin_OutPut);
    42c6:	81 e0       	ldi	r24, 0x01	; 1
    42c8:	63 e0       	ldi	r22, 0x03	; 3
    42ca:	41 e0       	ldi	r20, 0x01	; 1
    42cc:	0e 94 b1 19 	call	0x3362	; 0x3362 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PortB, Pin2, Pin_OutPut);
    42d0:	81 e0       	ldi	r24, 0x01	; 1
    42d2:	62 e0       	ldi	r22, 0x02	; 2
    42d4:	41 e0       	ldi	r20, 0x01	; 1
    42d6:	0e 94 b1 19 	call	0x3362	; 0x3362 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PortA, Pin4, Pin_OutPut);
    42da:	80 e0       	ldi	r24, 0x00	; 0
    42dc:	64 e0       	ldi	r22, 0x04	; 4
    42de:	41 e0       	ldi	r20, 0x01	; 1
    42e0:	0e 94 b1 19 	call	0x3362	; 0x3362 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PortA, Pin5, Pin_OutPut);
    42e4:	80 e0       	ldi	r24, 0x00	; 0
    42e6:	65 e0       	ldi	r22, 0x05	; 5
    42e8:	41 e0       	ldi	r20, 0x01	; 1
    42ea:	0e 94 b1 19 	call	0x3362	; 0x3362 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PortA, Pin6, Pin_OutPut);
    42ee:	80 e0       	ldi	r24, 0x00	; 0
    42f0:	66 e0       	ldi	r22, 0x06	; 6
    42f2:	41 e0       	ldi	r20, 0x01	; 1
    42f4:	0e 94 b1 19 	call	0x3362	; 0x3362 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PortA, Pin7, Pin_OutPut);
    42f8:	80 e0       	ldi	r24, 0x00	; 0
    42fa:	67 e0       	ldi	r22, 0x07	; 7
    42fc:	41 e0       	ldi	r20, 0x01	; 1
    42fe:	0e 94 b1 19 	call	0x3362	; 0x3362 <DIO_vSetPinDirection>
    4302:	fe 01       	movw	r30, r28
    4304:	ed 5b       	subi	r30, 0xBD	; 189
    4306:	ff 4f       	sbci	r31, 0xFF	; 255
    4308:	80 e0       	ldi	r24, 0x00	; 0
    430a:	90 e0       	ldi	r25, 0x00	; 0
    430c:	a8 e4       	ldi	r26, 0x48	; 72
    430e:	b2 e4       	ldi	r27, 0x42	; 66
    4310:	80 83       	st	Z, r24
    4312:	91 83       	std	Z+1, r25	; 0x01
    4314:	a2 83       	std	Z+2, r26	; 0x02
    4316:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4318:	8e 01       	movw	r16, r28
    431a:	01 5c       	subi	r16, 0xC1	; 193
    431c:	1f 4f       	sbci	r17, 0xFF	; 255
    431e:	fe 01       	movw	r30, r28
    4320:	ed 5b       	subi	r30, 0xBD	; 189
    4322:	ff 4f       	sbci	r31, 0xFF	; 255
    4324:	60 81       	ld	r22, Z
    4326:	71 81       	ldd	r23, Z+1	; 0x01
    4328:	82 81       	ldd	r24, Z+2	; 0x02
    432a:	93 81       	ldd	r25, Z+3	; 0x03
    432c:	20 e0       	ldi	r18, 0x00	; 0
    432e:	30 e0       	ldi	r19, 0x00	; 0
    4330:	4a e7       	ldi	r20, 0x7A	; 122
    4332:	55 e4       	ldi	r21, 0x45	; 69
    4334:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4338:	dc 01       	movw	r26, r24
    433a:	cb 01       	movw	r24, r22
    433c:	f8 01       	movw	r30, r16
    433e:	80 83       	st	Z, r24
    4340:	91 83       	std	Z+1, r25	; 0x01
    4342:	a2 83       	std	Z+2, r26	; 0x02
    4344:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4346:	fe 01       	movw	r30, r28
    4348:	ff 96       	adiw	r30, 0x3f	; 63
    434a:	60 81       	ld	r22, Z
    434c:	71 81       	ldd	r23, Z+1	; 0x01
    434e:	82 81       	ldd	r24, Z+2	; 0x02
    4350:	93 81       	ldd	r25, Z+3	; 0x03
    4352:	20 e0       	ldi	r18, 0x00	; 0
    4354:	30 e0       	ldi	r19, 0x00	; 0
    4356:	40 e8       	ldi	r20, 0x80	; 128
    4358:	5f e3       	ldi	r21, 0x3F	; 63
    435a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    435e:	88 23       	and	r24, r24
    4360:	2c f4       	brge	.+10     	; 0x436c <LCD_vInit+0xca>
		__ticks = 1;
    4362:	81 e0       	ldi	r24, 0x01	; 1
    4364:	90 e0       	ldi	r25, 0x00	; 0
    4366:	9e af       	std	Y+62, r25	; 0x3e
    4368:	8d af       	std	Y+61, r24	; 0x3d
    436a:	46 c0       	rjmp	.+140    	; 0x43f8 <LCD_vInit+0x156>
	else if (__tmp > 65535)
    436c:	fe 01       	movw	r30, r28
    436e:	ff 96       	adiw	r30, 0x3f	; 63
    4370:	60 81       	ld	r22, Z
    4372:	71 81       	ldd	r23, Z+1	; 0x01
    4374:	82 81       	ldd	r24, Z+2	; 0x02
    4376:	93 81       	ldd	r25, Z+3	; 0x03
    4378:	20 e0       	ldi	r18, 0x00	; 0
    437a:	3f ef       	ldi	r19, 0xFF	; 255
    437c:	4f e7       	ldi	r20, 0x7F	; 127
    437e:	57 e4       	ldi	r21, 0x47	; 71
    4380:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4384:	18 16       	cp	r1, r24
    4386:	64 f5       	brge	.+88     	; 0x43e0 <LCD_vInit+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4388:	fe 01       	movw	r30, r28
    438a:	ed 5b       	subi	r30, 0xBD	; 189
    438c:	ff 4f       	sbci	r31, 0xFF	; 255
    438e:	60 81       	ld	r22, Z
    4390:	71 81       	ldd	r23, Z+1	; 0x01
    4392:	82 81       	ldd	r24, Z+2	; 0x02
    4394:	93 81       	ldd	r25, Z+3	; 0x03
    4396:	20 e0       	ldi	r18, 0x00	; 0
    4398:	30 e0       	ldi	r19, 0x00	; 0
    439a:	40 e2       	ldi	r20, 0x20	; 32
    439c:	51 e4       	ldi	r21, 0x41	; 65
    439e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43a2:	dc 01       	movw	r26, r24
    43a4:	cb 01       	movw	r24, r22
    43a6:	bc 01       	movw	r22, r24
    43a8:	cd 01       	movw	r24, r26
    43aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43ae:	dc 01       	movw	r26, r24
    43b0:	cb 01       	movw	r24, r22
    43b2:	9e af       	std	Y+62, r25	; 0x3e
    43b4:	8d af       	std	Y+61, r24	; 0x3d
    43b6:	0f c0       	rjmp	.+30     	; 0x43d6 <LCD_vInit+0x134>
    43b8:	80 e9       	ldi	r24, 0x90	; 144
    43ba:	91 e0       	ldi	r25, 0x01	; 1
    43bc:	9c af       	std	Y+60, r25	; 0x3c
    43be:	8b af       	std	Y+59, r24	; 0x3b
    43c0:	8b ad       	ldd	r24, Y+59	; 0x3b
    43c2:	9c ad       	ldd	r25, Y+60	; 0x3c
    43c4:	01 97       	sbiw	r24, 0x01	; 1
    43c6:	f1 f7       	brne	.-4      	; 0x43c4 <LCD_vInit+0x122>
    43c8:	9c af       	std	Y+60, r25	; 0x3c
    43ca:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43cc:	8d ad       	ldd	r24, Y+61	; 0x3d
    43ce:	9e ad       	ldd	r25, Y+62	; 0x3e
    43d0:	01 97       	sbiw	r24, 0x01	; 1
    43d2:	9e af       	std	Y+62, r25	; 0x3e
    43d4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43d6:	8d ad       	ldd	r24, Y+61	; 0x3d
    43d8:	9e ad       	ldd	r25, Y+62	; 0x3e
    43da:	00 97       	sbiw	r24, 0x00	; 0
    43dc:	69 f7       	brne	.-38     	; 0x43b8 <LCD_vInit+0x116>
    43de:	16 c0       	rjmp	.+44     	; 0x440c <LCD_vInit+0x16a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43e0:	fe 01       	movw	r30, r28
    43e2:	ff 96       	adiw	r30, 0x3f	; 63
    43e4:	60 81       	ld	r22, Z
    43e6:	71 81       	ldd	r23, Z+1	; 0x01
    43e8:	82 81       	ldd	r24, Z+2	; 0x02
    43ea:	93 81       	ldd	r25, Z+3	; 0x03
    43ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43f0:	dc 01       	movw	r26, r24
    43f2:	cb 01       	movw	r24, r22
    43f4:	9e af       	std	Y+62, r25	; 0x3e
    43f6:	8d af       	std	Y+61, r24	; 0x3d
    43f8:	8d ad       	ldd	r24, Y+61	; 0x3d
    43fa:	9e ad       	ldd	r25, Y+62	; 0x3e
    43fc:	9a af       	std	Y+58, r25	; 0x3a
    43fe:	89 af       	std	Y+57, r24	; 0x39
    4400:	89 ad       	ldd	r24, Y+57	; 0x39
    4402:	9a ad       	ldd	r25, Y+58	; 0x3a
    4404:	01 97       	sbiw	r24, 0x01	; 1
    4406:	f1 f7       	brne	.-4      	; 0x4404 <LCD_vInit+0x162>
    4408:	9a af       	std	Y+58, r25	; 0x3a
    440a:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(50);
	LCD_vSendCommand(FunctionSet);
    440c:	88 e2       	ldi	r24, 0x28	; 40
    440e:	0e 94 27 20 	call	0x404e	; 0x404e <LCD_vSendCommand>
    4412:	80 e0       	ldi	r24, 0x00	; 0
    4414:	90 e0       	ldi	r25, 0x00	; 0
    4416:	a0 e0       	ldi	r26, 0x00	; 0
    4418:	b0 e4       	ldi	r27, 0x40	; 64
    441a:	8d ab       	std	Y+53, r24	; 0x35
    441c:	9e ab       	std	Y+54, r25	; 0x36
    441e:	af ab       	std	Y+55, r26	; 0x37
    4420:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4422:	6d a9       	ldd	r22, Y+53	; 0x35
    4424:	7e a9       	ldd	r23, Y+54	; 0x36
    4426:	8f a9       	ldd	r24, Y+55	; 0x37
    4428:	98 ad       	ldd	r25, Y+56	; 0x38
    442a:	20 e0       	ldi	r18, 0x00	; 0
    442c:	30 e0       	ldi	r19, 0x00	; 0
    442e:	4a e7       	ldi	r20, 0x7A	; 122
    4430:	55 e4       	ldi	r21, 0x45	; 69
    4432:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4436:	dc 01       	movw	r26, r24
    4438:	cb 01       	movw	r24, r22
    443a:	89 ab       	std	Y+49, r24	; 0x31
    443c:	9a ab       	std	Y+50, r25	; 0x32
    443e:	ab ab       	std	Y+51, r26	; 0x33
    4440:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4442:	69 a9       	ldd	r22, Y+49	; 0x31
    4444:	7a a9       	ldd	r23, Y+50	; 0x32
    4446:	8b a9       	ldd	r24, Y+51	; 0x33
    4448:	9c a9       	ldd	r25, Y+52	; 0x34
    444a:	20 e0       	ldi	r18, 0x00	; 0
    444c:	30 e0       	ldi	r19, 0x00	; 0
    444e:	40 e8       	ldi	r20, 0x80	; 128
    4450:	5f e3       	ldi	r21, 0x3F	; 63
    4452:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4456:	88 23       	and	r24, r24
    4458:	2c f4       	brge	.+10     	; 0x4464 <LCD_vInit+0x1c2>
		__ticks = 1;
    445a:	81 e0       	ldi	r24, 0x01	; 1
    445c:	90 e0       	ldi	r25, 0x00	; 0
    445e:	98 ab       	std	Y+48, r25	; 0x30
    4460:	8f a7       	std	Y+47, r24	; 0x2f
    4462:	3f c0       	rjmp	.+126    	; 0x44e2 <LCD_vInit+0x240>
	else if (__tmp > 65535)
    4464:	69 a9       	ldd	r22, Y+49	; 0x31
    4466:	7a a9       	ldd	r23, Y+50	; 0x32
    4468:	8b a9       	ldd	r24, Y+51	; 0x33
    446a:	9c a9       	ldd	r25, Y+52	; 0x34
    446c:	20 e0       	ldi	r18, 0x00	; 0
    446e:	3f ef       	ldi	r19, 0xFF	; 255
    4470:	4f e7       	ldi	r20, 0x7F	; 127
    4472:	57 e4       	ldi	r21, 0x47	; 71
    4474:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4478:	18 16       	cp	r1, r24
    447a:	4c f5       	brge	.+82     	; 0x44ce <LCD_vInit+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    447c:	6d a9       	ldd	r22, Y+53	; 0x35
    447e:	7e a9       	ldd	r23, Y+54	; 0x36
    4480:	8f a9       	ldd	r24, Y+55	; 0x37
    4482:	98 ad       	ldd	r25, Y+56	; 0x38
    4484:	20 e0       	ldi	r18, 0x00	; 0
    4486:	30 e0       	ldi	r19, 0x00	; 0
    4488:	40 e2       	ldi	r20, 0x20	; 32
    448a:	51 e4       	ldi	r21, 0x41	; 65
    448c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4490:	dc 01       	movw	r26, r24
    4492:	cb 01       	movw	r24, r22
    4494:	bc 01       	movw	r22, r24
    4496:	cd 01       	movw	r24, r26
    4498:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    449c:	dc 01       	movw	r26, r24
    449e:	cb 01       	movw	r24, r22
    44a0:	98 ab       	std	Y+48, r25	; 0x30
    44a2:	8f a7       	std	Y+47, r24	; 0x2f
    44a4:	0f c0       	rjmp	.+30     	; 0x44c4 <LCD_vInit+0x222>
    44a6:	80 e9       	ldi	r24, 0x90	; 144
    44a8:	91 e0       	ldi	r25, 0x01	; 1
    44aa:	9e a7       	std	Y+46, r25	; 0x2e
    44ac:	8d a7       	std	Y+45, r24	; 0x2d
    44ae:	8d a5       	ldd	r24, Y+45	; 0x2d
    44b0:	9e a5       	ldd	r25, Y+46	; 0x2e
    44b2:	01 97       	sbiw	r24, 0x01	; 1
    44b4:	f1 f7       	brne	.-4      	; 0x44b2 <LCD_vInit+0x210>
    44b6:	9e a7       	std	Y+46, r25	; 0x2e
    44b8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    44bc:	98 a9       	ldd	r25, Y+48	; 0x30
    44be:	01 97       	sbiw	r24, 0x01	; 1
    44c0:	98 ab       	std	Y+48, r25	; 0x30
    44c2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    44c6:	98 a9       	ldd	r25, Y+48	; 0x30
    44c8:	00 97       	sbiw	r24, 0x00	; 0
    44ca:	69 f7       	brne	.-38     	; 0x44a6 <LCD_vInit+0x204>
    44cc:	14 c0       	rjmp	.+40     	; 0x44f6 <LCD_vInit+0x254>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44ce:	69 a9       	ldd	r22, Y+49	; 0x31
    44d0:	7a a9       	ldd	r23, Y+50	; 0x32
    44d2:	8b a9       	ldd	r24, Y+51	; 0x33
    44d4:	9c a9       	ldd	r25, Y+52	; 0x34
    44d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44da:	dc 01       	movw	r26, r24
    44dc:	cb 01       	movw	r24, r22
    44de:	98 ab       	std	Y+48, r25	; 0x30
    44e0:	8f a7       	std	Y+47, r24	; 0x2f
    44e2:	8f a5       	ldd	r24, Y+47	; 0x2f
    44e4:	98 a9       	ldd	r25, Y+48	; 0x30
    44e6:	9c a7       	std	Y+44, r25	; 0x2c
    44e8:	8b a7       	std	Y+43, r24	; 0x2b
    44ea:	8b a5       	ldd	r24, Y+43	; 0x2b
    44ec:	9c a5       	ldd	r25, Y+44	; 0x2c
    44ee:	01 97       	sbiw	r24, 0x01	; 1
    44f0:	f1 f7       	brne	.-4      	; 0x44ee <LCD_vInit+0x24c>
    44f2:	9c a7       	std	Y+44, r25	; 0x2c
    44f4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	LCD_vSendCommand(DisplayOnControl);
    44f6:	8e e0       	ldi	r24, 0x0E	; 14
    44f8:	0e 94 27 20 	call	0x404e	; 0x404e <LCD_vSendCommand>
    44fc:	80 e0       	ldi	r24, 0x00	; 0
    44fe:	90 e0       	ldi	r25, 0x00	; 0
    4500:	a0 e0       	ldi	r26, 0x00	; 0
    4502:	b0 e4       	ldi	r27, 0x40	; 64
    4504:	8f a3       	std	Y+39, r24	; 0x27
    4506:	98 a7       	std	Y+40, r25	; 0x28
    4508:	a9 a7       	std	Y+41, r26	; 0x29
    450a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    450c:	6f a1       	ldd	r22, Y+39	; 0x27
    450e:	78 a5       	ldd	r23, Y+40	; 0x28
    4510:	89 a5       	ldd	r24, Y+41	; 0x29
    4512:	9a a5       	ldd	r25, Y+42	; 0x2a
    4514:	20 e0       	ldi	r18, 0x00	; 0
    4516:	30 e0       	ldi	r19, 0x00	; 0
    4518:	4a e7       	ldi	r20, 0x7A	; 122
    451a:	55 e4       	ldi	r21, 0x45	; 69
    451c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4520:	dc 01       	movw	r26, r24
    4522:	cb 01       	movw	r24, r22
    4524:	8b a3       	std	Y+35, r24	; 0x23
    4526:	9c a3       	std	Y+36, r25	; 0x24
    4528:	ad a3       	std	Y+37, r26	; 0x25
    452a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    452c:	6b a1       	ldd	r22, Y+35	; 0x23
    452e:	7c a1       	ldd	r23, Y+36	; 0x24
    4530:	8d a1       	ldd	r24, Y+37	; 0x25
    4532:	9e a1       	ldd	r25, Y+38	; 0x26
    4534:	20 e0       	ldi	r18, 0x00	; 0
    4536:	30 e0       	ldi	r19, 0x00	; 0
    4538:	40 e8       	ldi	r20, 0x80	; 128
    453a:	5f e3       	ldi	r21, 0x3F	; 63
    453c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4540:	88 23       	and	r24, r24
    4542:	2c f4       	brge	.+10     	; 0x454e <LCD_vInit+0x2ac>
		__ticks = 1;
    4544:	81 e0       	ldi	r24, 0x01	; 1
    4546:	90 e0       	ldi	r25, 0x00	; 0
    4548:	9a a3       	std	Y+34, r25	; 0x22
    454a:	89 a3       	std	Y+33, r24	; 0x21
    454c:	3f c0       	rjmp	.+126    	; 0x45cc <LCD_vInit+0x32a>
	else if (__tmp > 65535)
    454e:	6b a1       	ldd	r22, Y+35	; 0x23
    4550:	7c a1       	ldd	r23, Y+36	; 0x24
    4552:	8d a1       	ldd	r24, Y+37	; 0x25
    4554:	9e a1       	ldd	r25, Y+38	; 0x26
    4556:	20 e0       	ldi	r18, 0x00	; 0
    4558:	3f ef       	ldi	r19, 0xFF	; 255
    455a:	4f e7       	ldi	r20, 0x7F	; 127
    455c:	57 e4       	ldi	r21, 0x47	; 71
    455e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4562:	18 16       	cp	r1, r24
    4564:	4c f5       	brge	.+82     	; 0x45b8 <LCD_vInit+0x316>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4566:	6f a1       	ldd	r22, Y+39	; 0x27
    4568:	78 a5       	ldd	r23, Y+40	; 0x28
    456a:	89 a5       	ldd	r24, Y+41	; 0x29
    456c:	9a a5       	ldd	r25, Y+42	; 0x2a
    456e:	20 e0       	ldi	r18, 0x00	; 0
    4570:	30 e0       	ldi	r19, 0x00	; 0
    4572:	40 e2       	ldi	r20, 0x20	; 32
    4574:	51 e4       	ldi	r21, 0x41	; 65
    4576:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    457a:	dc 01       	movw	r26, r24
    457c:	cb 01       	movw	r24, r22
    457e:	bc 01       	movw	r22, r24
    4580:	cd 01       	movw	r24, r26
    4582:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4586:	dc 01       	movw	r26, r24
    4588:	cb 01       	movw	r24, r22
    458a:	9a a3       	std	Y+34, r25	; 0x22
    458c:	89 a3       	std	Y+33, r24	; 0x21
    458e:	0f c0       	rjmp	.+30     	; 0x45ae <LCD_vInit+0x30c>
    4590:	80 e9       	ldi	r24, 0x90	; 144
    4592:	91 e0       	ldi	r25, 0x01	; 1
    4594:	98 a3       	std	Y+32, r25	; 0x20
    4596:	8f 8f       	std	Y+31, r24	; 0x1f
    4598:	8f 8d       	ldd	r24, Y+31	; 0x1f
    459a:	98 a1       	ldd	r25, Y+32	; 0x20
    459c:	01 97       	sbiw	r24, 0x01	; 1
    459e:	f1 f7       	brne	.-4      	; 0x459c <LCD_vInit+0x2fa>
    45a0:	98 a3       	std	Y+32, r25	; 0x20
    45a2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45a4:	89 a1       	ldd	r24, Y+33	; 0x21
    45a6:	9a a1       	ldd	r25, Y+34	; 0x22
    45a8:	01 97       	sbiw	r24, 0x01	; 1
    45aa:	9a a3       	std	Y+34, r25	; 0x22
    45ac:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45ae:	89 a1       	ldd	r24, Y+33	; 0x21
    45b0:	9a a1       	ldd	r25, Y+34	; 0x22
    45b2:	00 97       	sbiw	r24, 0x00	; 0
    45b4:	69 f7       	brne	.-38     	; 0x4590 <LCD_vInit+0x2ee>
    45b6:	14 c0       	rjmp	.+40     	; 0x45e0 <LCD_vInit+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45b8:	6b a1       	ldd	r22, Y+35	; 0x23
    45ba:	7c a1       	ldd	r23, Y+36	; 0x24
    45bc:	8d a1       	ldd	r24, Y+37	; 0x25
    45be:	9e a1       	ldd	r25, Y+38	; 0x26
    45c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45c4:	dc 01       	movw	r26, r24
    45c6:	cb 01       	movw	r24, r22
    45c8:	9a a3       	std	Y+34, r25	; 0x22
    45ca:	89 a3       	std	Y+33, r24	; 0x21
    45cc:	89 a1       	ldd	r24, Y+33	; 0x21
    45ce:	9a a1       	ldd	r25, Y+34	; 0x22
    45d0:	9e 8f       	std	Y+30, r25	; 0x1e
    45d2:	8d 8f       	std	Y+29, r24	; 0x1d
    45d4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    45d6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    45d8:	01 97       	sbiw	r24, 0x01	; 1
    45da:	f1 f7       	brne	.-4      	; 0x45d8 <LCD_vInit+0x336>
    45dc:	9e 8f       	std	Y+30, r25	; 0x1e
    45de:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	LCD_vSendCommand(DisplayClear);
    45e0:	81 e0       	ldi	r24, 0x01	; 1
    45e2:	0e 94 27 20 	call	0x404e	; 0x404e <LCD_vSendCommand>
    45e6:	80 e0       	ldi	r24, 0x00	; 0
    45e8:	90 e0       	ldi	r25, 0x00	; 0
    45ea:	a0 e0       	ldi	r26, 0x00	; 0
    45ec:	b0 e4       	ldi	r27, 0x40	; 64
    45ee:	89 8f       	std	Y+25, r24	; 0x19
    45f0:	9a 8f       	std	Y+26, r25	; 0x1a
    45f2:	ab 8f       	std	Y+27, r26	; 0x1b
    45f4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45f6:	69 8d       	ldd	r22, Y+25	; 0x19
    45f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    45fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    45fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    45fe:	20 e0       	ldi	r18, 0x00	; 0
    4600:	30 e0       	ldi	r19, 0x00	; 0
    4602:	4a e7       	ldi	r20, 0x7A	; 122
    4604:	55 e4       	ldi	r21, 0x45	; 69
    4606:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    460a:	dc 01       	movw	r26, r24
    460c:	cb 01       	movw	r24, r22
    460e:	8d 8b       	std	Y+21, r24	; 0x15
    4610:	9e 8b       	std	Y+22, r25	; 0x16
    4612:	af 8b       	std	Y+23, r26	; 0x17
    4614:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4616:	6d 89       	ldd	r22, Y+21	; 0x15
    4618:	7e 89       	ldd	r23, Y+22	; 0x16
    461a:	8f 89       	ldd	r24, Y+23	; 0x17
    461c:	98 8d       	ldd	r25, Y+24	; 0x18
    461e:	20 e0       	ldi	r18, 0x00	; 0
    4620:	30 e0       	ldi	r19, 0x00	; 0
    4622:	40 e8       	ldi	r20, 0x80	; 128
    4624:	5f e3       	ldi	r21, 0x3F	; 63
    4626:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    462a:	88 23       	and	r24, r24
    462c:	2c f4       	brge	.+10     	; 0x4638 <LCD_vInit+0x396>
		__ticks = 1;
    462e:	81 e0       	ldi	r24, 0x01	; 1
    4630:	90 e0       	ldi	r25, 0x00	; 0
    4632:	9c 8b       	std	Y+20, r25	; 0x14
    4634:	8b 8b       	std	Y+19, r24	; 0x13
    4636:	3f c0       	rjmp	.+126    	; 0x46b6 <LCD_vInit+0x414>
	else if (__tmp > 65535)
    4638:	6d 89       	ldd	r22, Y+21	; 0x15
    463a:	7e 89       	ldd	r23, Y+22	; 0x16
    463c:	8f 89       	ldd	r24, Y+23	; 0x17
    463e:	98 8d       	ldd	r25, Y+24	; 0x18
    4640:	20 e0       	ldi	r18, 0x00	; 0
    4642:	3f ef       	ldi	r19, 0xFF	; 255
    4644:	4f e7       	ldi	r20, 0x7F	; 127
    4646:	57 e4       	ldi	r21, 0x47	; 71
    4648:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    464c:	18 16       	cp	r1, r24
    464e:	4c f5       	brge	.+82     	; 0x46a2 <LCD_vInit+0x400>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4650:	69 8d       	ldd	r22, Y+25	; 0x19
    4652:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4654:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4656:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4658:	20 e0       	ldi	r18, 0x00	; 0
    465a:	30 e0       	ldi	r19, 0x00	; 0
    465c:	40 e2       	ldi	r20, 0x20	; 32
    465e:	51 e4       	ldi	r21, 0x41	; 65
    4660:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4664:	dc 01       	movw	r26, r24
    4666:	cb 01       	movw	r24, r22
    4668:	bc 01       	movw	r22, r24
    466a:	cd 01       	movw	r24, r26
    466c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4670:	dc 01       	movw	r26, r24
    4672:	cb 01       	movw	r24, r22
    4674:	9c 8b       	std	Y+20, r25	; 0x14
    4676:	8b 8b       	std	Y+19, r24	; 0x13
    4678:	0f c0       	rjmp	.+30     	; 0x4698 <LCD_vInit+0x3f6>
    467a:	80 e9       	ldi	r24, 0x90	; 144
    467c:	91 e0       	ldi	r25, 0x01	; 1
    467e:	9a 8b       	std	Y+18, r25	; 0x12
    4680:	89 8b       	std	Y+17, r24	; 0x11
    4682:	89 89       	ldd	r24, Y+17	; 0x11
    4684:	9a 89       	ldd	r25, Y+18	; 0x12
    4686:	01 97       	sbiw	r24, 0x01	; 1
    4688:	f1 f7       	brne	.-4      	; 0x4686 <LCD_vInit+0x3e4>
    468a:	9a 8b       	std	Y+18, r25	; 0x12
    468c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    468e:	8b 89       	ldd	r24, Y+19	; 0x13
    4690:	9c 89       	ldd	r25, Y+20	; 0x14
    4692:	01 97       	sbiw	r24, 0x01	; 1
    4694:	9c 8b       	std	Y+20, r25	; 0x14
    4696:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4698:	8b 89       	ldd	r24, Y+19	; 0x13
    469a:	9c 89       	ldd	r25, Y+20	; 0x14
    469c:	00 97       	sbiw	r24, 0x00	; 0
    469e:	69 f7       	brne	.-38     	; 0x467a <LCD_vInit+0x3d8>
    46a0:	14 c0       	rjmp	.+40     	; 0x46ca <LCD_vInit+0x428>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46a2:	6d 89       	ldd	r22, Y+21	; 0x15
    46a4:	7e 89       	ldd	r23, Y+22	; 0x16
    46a6:	8f 89       	ldd	r24, Y+23	; 0x17
    46a8:	98 8d       	ldd	r25, Y+24	; 0x18
    46aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46ae:	dc 01       	movw	r26, r24
    46b0:	cb 01       	movw	r24, r22
    46b2:	9c 8b       	std	Y+20, r25	; 0x14
    46b4:	8b 8b       	std	Y+19, r24	; 0x13
    46b6:	8b 89       	ldd	r24, Y+19	; 0x13
    46b8:	9c 89       	ldd	r25, Y+20	; 0x14
    46ba:	98 8b       	std	Y+16, r25	; 0x10
    46bc:	8f 87       	std	Y+15, r24	; 0x0f
    46be:	8f 85       	ldd	r24, Y+15	; 0x0f
    46c0:	98 89       	ldd	r25, Y+16	; 0x10
    46c2:	01 97       	sbiw	r24, 0x01	; 1
    46c4:	f1 f7       	brne	.-4      	; 0x46c2 <LCD_vInit+0x420>
    46c6:	98 8b       	std	Y+16, r25	; 0x10
    46c8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	LCD_vSendCommand(EnrtyMode);
    46ca:	86 e0       	ldi	r24, 0x06	; 6
    46cc:	0e 94 27 20 	call	0x404e	; 0x404e <LCD_vSendCommand>
    46d0:	80 e0       	ldi	r24, 0x00	; 0
    46d2:	90 e0       	ldi	r25, 0x00	; 0
    46d4:	a0 e0       	ldi	r26, 0x00	; 0
    46d6:	b0 e4       	ldi	r27, 0x40	; 64
    46d8:	8b 87       	std	Y+11, r24	; 0x0b
    46da:	9c 87       	std	Y+12, r25	; 0x0c
    46dc:	ad 87       	std	Y+13, r26	; 0x0d
    46de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    46e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    46e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    46e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    46e8:	20 e0       	ldi	r18, 0x00	; 0
    46ea:	30 e0       	ldi	r19, 0x00	; 0
    46ec:	4a e7       	ldi	r20, 0x7A	; 122
    46ee:	55 e4       	ldi	r21, 0x45	; 69
    46f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46f4:	dc 01       	movw	r26, r24
    46f6:	cb 01       	movw	r24, r22
    46f8:	8f 83       	std	Y+7, r24	; 0x07
    46fa:	98 87       	std	Y+8, r25	; 0x08
    46fc:	a9 87       	std	Y+9, r26	; 0x09
    46fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4700:	6f 81       	ldd	r22, Y+7	; 0x07
    4702:	78 85       	ldd	r23, Y+8	; 0x08
    4704:	89 85       	ldd	r24, Y+9	; 0x09
    4706:	9a 85       	ldd	r25, Y+10	; 0x0a
    4708:	20 e0       	ldi	r18, 0x00	; 0
    470a:	30 e0       	ldi	r19, 0x00	; 0
    470c:	40 e8       	ldi	r20, 0x80	; 128
    470e:	5f e3       	ldi	r21, 0x3F	; 63
    4710:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4714:	88 23       	and	r24, r24
    4716:	2c f4       	brge	.+10     	; 0x4722 <LCD_vInit+0x480>
		__ticks = 1;
    4718:	81 e0       	ldi	r24, 0x01	; 1
    471a:	90 e0       	ldi	r25, 0x00	; 0
    471c:	9e 83       	std	Y+6, r25	; 0x06
    471e:	8d 83       	std	Y+5, r24	; 0x05
    4720:	3f c0       	rjmp	.+126    	; 0x47a0 <LCD_vInit+0x4fe>
	else if (__tmp > 65535)
    4722:	6f 81       	ldd	r22, Y+7	; 0x07
    4724:	78 85       	ldd	r23, Y+8	; 0x08
    4726:	89 85       	ldd	r24, Y+9	; 0x09
    4728:	9a 85       	ldd	r25, Y+10	; 0x0a
    472a:	20 e0       	ldi	r18, 0x00	; 0
    472c:	3f ef       	ldi	r19, 0xFF	; 255
    472e:	4f e7       	ldi	r20, 0x7F	; 127
    4730:	57 e4       	ldi	r21, 0x47	; 71
    4732:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4736:	18 16       	cp	r1, r24
    4738:	4c f5       	brge	.+82     	; 0x478c <LCD_vInit+0x4ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    473a:	6b 85       	ldd	r22, Y+11	; 0x0b
    473c:	7c 85       	ldd	r23, Y+12	; 0x0c
    473e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4740:	9e 85       	ldd	r25, Y+14	; 0x0e
    4742:	20 e0       	ldi	r18, 0x00	; 0
    4744:	30 e0       	ldi	r19, 0x00	; 0
    4746:	40 e2       	ldi	r20, 0x20	; 32
    4748:	51 e4       	ldi	r21, 0x41	; 65
    474a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    474e:	dc 01       	movw	r26, r24
    4750:	cb 01       	movw	r24, r22
    4752:	bc 01       	movw	r22, r24
    4754:	cd 01       	movw	r24, r26
    4756:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    475a:	dc 01       	movw	r26, r24
    475c:	cb 01       	movw	r24, r22
    475e:	9e 83       	std	Y+6, r25	; 0x06
    4760:	8d 83       	std	Y+5, r24	; 0x05
    4762:	0f c0       	rjmp	.+30     	; 0x4782 <LCD_vInit+0x4e0>
    4764:	80 e9       	ldi	r24, 0x90	; 144
    4766:	91 e0       	ldi	r25, 0x01	; 1
    4768:	9c 83       	std	Y+4, r25	; 0x04
    476a:	8b 83       	std	Y+3, r24	; 0x03
    476c:	8b 81       	ldd	r24, Y+3	; 0x03
    476e:	9c 81       	ldd	r25, Y+4	; 0x04
    4770:	01 97       	sbiw	r24, 0x01	; 1
    4772:	f1 f7       	brne	.-4      	; 0x4770 <LCD_vInit+0x4ce>
    4774:	9c 83       	std	Y+4, r25	; 0x04
    4776:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4778:	8d 81       	ldd	r24, Y+5	; 0x05
    477a:	9e 81       	ldd	r25, Y+6	; 0x06
    477c:	01 97       	sbiw	r24, 0x01	; 1
    477e:	9e 83       	std	Y+6, r25	; 0x06
    4780:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4782:	8d 81       	ldd	r24, Y+5	; 0x05
    4784:	9e 81       	ldd	r25, Y+6	; 0x06
    4786:	00 97       	sbiw	r24, 0x00	; 0
    4788:	69 f7       	brne	.-38     	; 0x4764 <LCD_vInit+0x4c2>
    478a:	14 c0       	rjmp	.+40     	; 0x47b4 <LCD_vInit+0x512>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    478c:	6f 81       	ldd	r22, Y+7	; 0x07
    478e:	78 85       	ldd	r23, Y+8	; 0x08
    4790:	89 85       	ldd	r24, Y+9	; 0x09
    4792:	9a 85       	ldd	r25, Y+10	; 0x0a
    4794:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4798:	dc 01       	movw	r26, r24
    479a:	cb 01       	movw	r24, r22
    479c:	9e 83       	std	Y+6, r25	; 0x06
    479e:	8d 83       	std	Y+5, r24	; 0x05
    47a0:	8d 81       	ldd	r24, Y+5	; 0x05
    47a2:	9e 81       	ldd	r25, Y+6	; 0x06
    47a4:	9a 83       	std	Y+2, r25	; 0x02
    47a6:	89 83       	std	Y+1, r24	; 0x01
    47a8:	89 81       	ldd	r24, Y+1	; 0x01
    47aa:	9a 81       	ldd	r25, Y+2	; 0x02
    47ac:	01 97       	sbiw	r24, 0x01	; 1
    47ae:	f1 f7       	brne	.-4      	; 0x47ac <LCD_vInit+0x50a>
    47b0:	9a 83       	std	Y+2, r25	; 0x02
    47b2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

}
    47b4:	ca 5b       	subi	r28, 0xBA	; 186
    47b6:	df 4f       	sbci	r29, 0xFF	; 255
    47b8:	0f b6       	in	r0, 0x3f	; 63
    47ba:	f8 94       	cli
    47bc:	de bf       	out	0x3e, r29	; 62
    47be:	0f be       	out	0x3f, r0	; 63
    47c0:	cd bf       	out	0x3d, r28	; 61
    47c2:	cf 91       	pop	r28
    47c4:	df 91       	pop	r29
    47c6:	1f 91       	pop	r17
    47c8:	0f 91       	pop	r16
    47ca:	08 95       	ret

000047cc <LCD_vInitWithOutClear>:
void LCD_vInitWithOutClear(){
    47cc:	df 93       	push	r29
    47ce:	cf 93       	push	r28
    47d0:	cd b7       	in	r28, 0x3d	; 61
    47d2:	de b7       	in	r29, 0x3e	; 62
    47d4:	e8 97       	sbiw	r28, 0x38	; 56
    47d6:	0f b6       	in	r0, 0x3f	; 63
    47d8:	f8 94       	cli
    47da:	de bf       	out	0x3e, r29	; 62
    47dc:	0f be       	out	0x3f, r0	; 63
    47de:	cd bf       	out	0x3d, r28	; 61
	DIO_vSetPinDirection(PortB, Pin1, Pin_OutPut);
    47e0:	81 e0       	ldi	r24, 0x01	; 1
    47e2:	61 e0       	ldi	r22, 0x01	; 1
    47e4:	41 e0       	ldi	r20, 0x01	; 1
    47e6:	0e 94 b1 19 	call	0x3362	; 0x3362 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PortB, Pin3, Pin_OutPut);
    47ea:	81 e0       	ldi	r24, 0x01	; 1
    47ec:	63 e0       	ldi	r22, 0x03	; 3
    47ee:	41 e0       	ldi	r20, 0x01	; 1
    47f0:	0e 94 b1 19 	call	0x3362	; 0x3362 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PortB, Pin2, Pin_OutPut);
    47f4:	81 e0       	ldi	r24, 0x01	; 1
    47f6:	62 e0       	ldi	r22, 0x02	; 2
    47f8:	41 e0       	ldi	r20, 0x01	; 1
    47fa:	0e 94 b1 19 	call	0x3362	; 0x3362 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PortA, Pin4, Pin_OutPut);
    47fe:	80 e0       	ldi	r24, 0x00	; 0
    4800:	64 e0       	ldi	r22, 0x04	; 4
    4802:	41 e0       	ldi	r20, 0x01	; 1
    4804:	0e 94 b1 19 	call	0x3362	; 0x3362 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PortA, Pin5, Pin_OutPut);
    4808:	80 e0       	ldi	r24, 0x00	; 0
    480a:	65 e0       	ldi	r22, 0x05	; 5
    480c:	41 e0       	ldi	r20, 0x01	; 1
    480e:	0e 94 b1 19 	call	0x3362	; 0x3362 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PortA, Pin6, Pin_OutPut);
    4812:	80 e0       	ldi	r24, 0x00	; 0
    4814:	66 e0       	ldi	r22, 0x06	; 6
    4816:	41 e0       	ldi	r20, 0x01	; 1
    4818:	0e 94 b1 19 	call	0x3362	; 0x3362 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PortA, Pin7, Pin_OutPut);
    481c:	80 e0       	ldi	r24, 0x00	; 0
    481e:	67 e0       	ldi	r22, 0x07	; 7
    4820:	41 e0       	ldi	r20, 0x01	; 1
    4822:	0e 94 b1 19 	call	0x3362	; 0x3362 <DIO_vSetPinDirection>
    4826:	80 e0       	ldi	r24, 0x00	; 0
    4828:	90 e0       	ldi	r25, 0x00	; 0
    482a:	a8 e4       	ldi	r26, 0x48	; 72
    482c:	b2 e4       	ldi	r27, 0x42	; 66
    482e:	8d ab       	std	Y+53, r24	; 0x35
    4830:	9e ab       	std	Y+54, r25	; 0x36
    4832:	af ab       	std	Y+55, r26	; 0x37
    4834:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4836:	6d a9       	ldd	r22, Y+53	; 0x35
    4838:	7e a9       	ldd	r23, Y+54	; 0x36
    483a:	8f a9       	ldd	r24, Y+55	; 0x37
    483c:	98 ad       	ldd	r25, Y+56	; 0x38
    483e:	20 e0       	ldi	r18, 0x00	; 0
    4840:	30 e0       	ldi	r19, 0x00	; 0
    4842:	4a e7       	ldi	r20, 0x7A	; 122
    4844:	55 e4       	ldi	r21, 0x45	; 69
    4846:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    484a:	dc 01       	movw	r26, r24
    484c:	cb 01       	movw	r24, r22
    484e:	89 ab       	std	Y+49, r24	; 0x31
    4850:	9a ab       	std	Y+50, r25	; 0x32
    4852:	ab ab       	std	Y+51, r26	; 0x33
    4854:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4856:	69 a9       	ldd	r22, Y+49	; 0x31
    4858:	7a a9       	ldd	r23, Y+50	; 0x32
    485a:	8b a9       	ldd	r24, Y+51	; 0x33
    485c:	9c a9       	ldd	r25, Y+52	; 0x34
    485e:	20 e0       	ldi	r18, 0x00	; 0
    4860:	30 e0       	ldi	r19, 0x00	; 0
    4862:	40 e8       	ldi	r20, 0x80	; 128
    4864:	5f e3       	ldi	r21, 0x3F	; 63
    4866:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    486a:	88 23       	and	r24, r24
    486c:	2c f4       	brge	.+10     	; 0x4878 <LCD_vInitWithOutClear+0xac>
		__ticks = 1;
    486e:	81 e0       	ldi	r24, 0x01	; 1
    4870:	90 e0       	ldi	r25, 0x00	; 0
    4872:	98 ab       	std	Y+48, r25	; 0x30
    4874:	8f a7       	std	Y+47, r24	; 0x2f
    4876:	3f c0       	rjmp	.+126    	; 0x48f6 <LCD_vInitWithOutClear+0x12a>
	else if (__tmp > 65535)
    4878:	69 a9       	ldd	r22, Y+49	; 0x31
    487a:	7a a9       	ldd	r23, Y+50	; 0x32
    487c:	8b a9       	ldd	r24, Y+51	; 0x33
    487e:	9c a9       	ldd	r25, Y+52	; 0x34
    4880:	20 e0       	ldi	r18, 0x00	; 0
    4882:	3f ef       	ldi	r19, 0xFF	; 255
    4884:	4f e7       	ldi	r20, 0x7F	; 127
    4886:	57 e4       	ldi	r21, 0x47	; 71
    4888:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    488c:	18 16       	cp	r1, r24
    488e:	4c f5       	brge	.+82     	; 0x48e2 <LCD_vInitWithOutClear+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4890:	6d a9       	ldd	r22, Y+53	; 0x35
    4892:	7e a9       	ldd	r23, Y+54	; 0x36
    4894:	8f a9       	ldd	r24, Y+55	; 0x37
    4896:	98 ad       	ldd	r25, Y+56	; 0x38
    4898:	20 e0       	ldi	r18, 0x00	; 0
    489a:	30 e0       	ldi	r19, 0x00	; 0
    489c:	40 e2       	ldi	r20, 0x20	; 32
    489e:	51 e4       	ldi	r21, 0x41	; 65
    48a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48a4:	dc 01       	movw	r26, r24
    48a6:	cb 01       	movw	r24, r22
    48a8:	bc 01       	movw	r22, r24
    48aa:	cd 01       	movw	r24, r26
    48ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48b0:	dc 01       	movw	r26, r24
    48b2:	cb 01       	movw	r24, r22
    48b4:	98 ab       	std	Y+48, r25	; 0x30
    48b6:	8f a7       	std	Y+47, r24	; 0x2f
    48b8:	0f c0       	rjmp	.+30     	; 0x48d8 <LCD_vInitWithOutClear+0x10c>
    48ba:	80 e9       	ldi	r24, 0x90	; 144
    48bc:	91 e0       	ldi	r25, 0x01	; 1
    48be:	9e a7       	std	Y+46, r25	; 0x2e
    48c0:	8d a7       	std	Y+45, r24	; 0x2d
    48c2:	8d a5       	ldd	r24, Y+45	; 0x2d
    48c4:	9e a5       	ldd	r25, Y+46	; 0x2e
    48c6:	01 97       	sbiw	r24, 0x01	; 1
    48c8:	f1 f7       	brne	.-4      	; 0x48c6 <LCD_vInitWithOutClear+0xfa>
    48ca:	9e a7       	std	Y+46, r25	; 0x2e
    48cc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    48d0:	98 a9       	ldd	r25, Y+48	; 0x30
    48d2:	01 97       	sbiw	r24, 0x01	; 1
    48d4:	98 ab       	std	Y+48, r25	; 0x30
    48d6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    48da:	98 a9       	ldd	r25, Y+48	; 0x30
    48dc:	00 97       	sbiw	r24, 0x00	; 0
    48de:	69 f7       	brne	.-38     	; 0x48ba <LCD_vInitWithOutClear+0xee>
    48e0:	14 c0       	rjmp	.+40     	; 0x490a <LCD_vInitWithOutClear+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48e2:	69 a9       	ldd	r22, Y+49	; 0x31
    48e4:	7a a9       	ldd	r23, Y+50	; 0x32
    48e6:	8b a9       	ldd	r24, Y+51	; 0x33
    48e8:	9c a9       	ldd	r25, Y+52	; 0x34
    48ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48ee:	dc 01       	movw	r26, r24
    48f0:	cb 01       	movw	r24, r22
    48f2:	98 ab       	std	Y+48, r25	; 0x30
    48f4:	8f a7       	std	Y+47, r24	; 0x2f
    48f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    48f8:	98 a9       	ldd	r25, Y+48	; 0x30
    48fa:	9c a7       	std	Y+44, r25	; 0x2c
    48fc:	8b a7       	std	Y+43, r24	; 0x2b
    48fe:	8b a5       	ldd	r24, Y+43	; 0x2b
    4900:	9c a5       	ldd	r25, Y+44	; 0x2c
    4902:	01 97       	sbiw	r24, 0x01	; 1
    4904:	f1 f7       	brne	.-4      	; 0x4902 <LCD_vInitWithOutClear+0x136>
    4906:	9c a7       	std	Y+44, r25	; 0x2c
    4908:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(50);
	LCD_vSendCommand(FunctionSet);
    490a:	88 e2       	ldi	r24, 0x28	; 40
    490c:	0e 94 27 20 	call	0x404e	; 0x404e <LCD_vSendCommand>
    4910:	80 e0       	ldi	r24, 0x00	; 0
    4912:	90 e0       	ldi	r25, 0x00	; 0
    4914:	a0 e0       	ldi	r26, 0x00	; 0
    4916:	b0 e4       	ldi	r27, 0x40	; 64
    4918:	8f a3       	std	Y+39, r24	; 0x27
    491a:	98 a7       	std	Y+40, r25	; 0x28
    491c:	a9 a7       	std	Y+41, r26	; 0x29
    491e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4920:	6f a1       	ldd	r22, Y+39	; 0x27
    4922:	78 a5       	ldd	r23, Y+40	; 0x28
    4924:	89 a5       	ldd	r24, Y+41	; 0x29
    4926:	9a a5       	ldd	r25, Y+42	; 0x2a
    4928:	20 e0       	ldi	r18, 0x00	; 0
    492a:	30 e0       	ldi	r19, 0x00	; 0
    492c:	4a e7       	ldi	r20, 0x7A	; 122
    492e:	55 e4       	ldi	r21, 0x45	; 69
    4930:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4934:	dc 01       	movw	r26, r24
    4936:	cb 01       	movw	r24, r22
    4938:	8b a3       	std	Y+35, r24	; 0x23
    493a:	9c a3       	std	Y+36, r25	; 0x24
    493c:	ad a3       	std	Y+37, r26	; 0x25
    493e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4940:	6b a1       	ldd	r22, Y+35	; 0x23
    4942:	7c a1       	ldd	r23, Y+36	; 0x24
    4944:	8d a1       	ldd	r24, Y+37	; 0x25
    4946:	9e a1       	ldd	r25, Y+38	; 0x26
    4948:	20 e0       	ldi	r18, 0x00	; 0
    494a:	30 e0       	ldi	r19, 0x00	; 0
    494c:	40 e8       	ldi	r20, 0x80	; 128
    494e:	5f e3       	ldi	r21, 0x3F	; 63
    4950:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4954:	88 23       	and	r24, r24
    4956:	2c f4       	brge	.+10     	; 0x4962 <LCD_vInitWithOutClear+0x196>
		__ticks = 1;
    4958:	81 e0       	ldi	r24, 0x01	; 1
    495a:	90 e0       	ldi	r25, 0x00	; 0
    495c:	9a a3       	std	Y+34, r25	; 0x22
    495e:	89 a3       	std	Y+33, r24	; 0x21
    4960:	3f c0       	rjmp	.+126    	; 0x49e0 <LCD_vInitWithOutClear+0x214>
	else if (__tmp > 65535)
    4962:	6b a1       	ldd	r22, Y+35	; 0x23
    4964:	7c a1       	ldd	r23, Y+36	; 0x24
    4966:	8d a1       	ldd	r24, Y+37	; 0x25
    4968:	9e a1       	ldd	r25, Y+38	; 0x26
    496a:	20 e0       	ldi	r18, 0x00	; 0
    496c:	3f ef       	ldi	r19, 0xFF	; 255
    496e:	4f e7       	ldi	r20, 0x7F	; 127
    4970:	57 e4       	ldi	r21, 0x47	; 71
    4972:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4976:	18 16       	cp	r1, r24
    4978:	4c f5       	brge	.+82     	; 0x49cc <LCD_vInitWithOutClear+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    497a:	6f a1       	ldd	r22, Y+39	; 0x27
    497c:	78 a5       	ldd	r23, Y+40	; 0x28
    497e:	89 a5       	ldd	r24, Y+41	; 0x29
    4980:	9a a5       	ldd	r25, Y+42	; 0x2a
    4982:	20 e0       	ldi	r18, 0x00	; 0
    4984:	30 e0       	ldi	r19, 0x00	; 0
    4986:	40 e2       	ldi	r20, 0x20	; 32
    4988:	51 e4       	ldi	r21, 0x41	; 65
    498a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    498e:	dc 01       	movw	r26, r24
    4990:	cb 01       	movw	r24, r22
    4992:	bc 01       	movw	r22, r24
    4994:	cd 01       	movw	r24, r26
    4996:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    499a:	dc 01       	movw	r26, r24
    499c:	cb 01       	movw	r24, r22
    499e:	9a a3       	std	Y+34, r25	; 0x22
    49a0:	89 a3       	std	Y+33, r24	; 0x21
    49a2:	0f c0       	rjmp	.+30     	; 0x49c2 <LCD_vInitWithOutClear+0x1f6>
    49a4:	80 e9       	ldi	r24, 0x90	; 144
    49a6:	91 e0       	ldi	r25, 0x01	; 1
    49a8:	98 a3       	std	Y+32, r25	; 0x20
    49aa:	8f 8f       	std	Y+31, r24	; 0x1f
    49ac:	8f 8d       	ldd	r24, Y+31	; 0x1f
    49ae:	98 a1       	ldd	r25, Y+32	; 0x20
    49b0:	01 97       	sbiw	r24, 0x01	; 1
    49b2:	f1 f7       	brne	.-4      	; 0x49b0 <LCD_vInitWithOutClear+0x1e4>
    49b4:	98 a3       	std	Y+32, r25	; 0x20
    49b6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49b8:	89 a1       	ldd	r24, Y+33	; 0x21
    49ba:	9a a1       	ldd	r25, Y+34	; 0x22
    49bc:	01 97       	sbiw	r24, 0x01	; 1
    49be:	9a a3       	std	Y+34, r25	; 0x22
    49c0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49c2:	89 a1       	ldd	r24, Y+33	; 0x21
    49c4:	9a a1       	ldd	r25, Y+34	; 0x22
    49c6:	00 97       	sbiw	r24, 0x00	; 0
    49c8:	69 f7       	brne	.-38     	; 0x49a4 <LCD_vInitWithOutClear+0x1d8>
    49ca:	14 c0       	rjmp	.+40     	; 0x49f4 <LCD_vInitWithOutClear+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49cc:	6b a1       	ldd	r22, Y+35	; 0x23
    49ce:	7c a1       	ldd	r23, Y+36	; 0x24
    49d0:	8d a1       	ldd	r24, Y+37	; 0x25
    49d2:	9e a1       	ldd	r25, Y+38	; 0x26
    49d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49d8:	dc 01       	movw	r26, r24
    49da:	cb 01       	movw	r24, r22
    49dc:	9a a3       	std	Y+34, r25	; 0x22
    49de:	89 a3       	std	Y+33, r24	; 0x21
    49e0:	89 a1       	ldd	r24, Y+33	; 0x21
    49e2:	9a a1       	ldd	r25, Y+34	; 0x22
    49e4:	9e 8f       	std	Y+30, r25	; 0x1e
    49e6:	8d 8f       	std	Y+29, r24	; 0x1d
    49e8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    49ea:	9e 8d       	ldd	r25, Y+30	; 0x1e
    49ec:	01 97       	sbiw	r24, 0x01	; 1
    49ee:	f1 f7       	brne	.-4      	; 0x49ec <LCD_vInitWithOutClear+0x220>
    49f0:	9e 8f       	std	Y+30, r25	; 0x1e
    49f2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	LCD_vSendCommand(DisplayOnControl);
    49f4:	8e e0       	ldi	r24, 0x0E	; 14
    49f6:	0e 94 27 20 	call	0x404e	; 0x404e <LCD_vSendCommand>
    49fa:	80 e0       	ldi	r24, 0x00	; 0
    49fc:	90 e0       	ldi	r25, 0x00	; 0
    49fe:	a0 e0       	ldi	r26, 0x00	; 0
    4a00:	b0 e4       	ldi	r27, 0x40	; 64
    4a02:	89 8f       	std	Y+25, r24	; 0x19
    4a04:	9a 8f       	std	Y+26, r25	; 0x1a
    4a06:	ab 8f       	std	Y+27, r26	; 0x1b
    4a08:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a0a:	69 8d       	ldd	r22, Y+25	; 0x19
    4a0c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4a0e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4a10:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4a12:	20 e0       	ldi	r18, 0x00	; 0
    4a14:	30 e0       	ldi	r19, 0x00	; 0
    4a16:	4a e7       	ldi	r20, 0x7A	; 122
    4a18:	55 e4       	ldi	r21, 0x45	; 69
    4a1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a1e:	dc 01       	movw	r26, r24
    4a20:	cb 01       	movw	r24, r22
    4a22:	8d 8b       	std	Y+21, r24	; 0x15
    4a24:	9e 8b       	std	Y+22, r25	; 0x16
    4a26:	af 8b       	std	Y+23, r26	; 0x17
    4a28:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4a2a:	6d 89       	ldd	r22, Y+21	; 0x15
    4a2c:	7e 89       	ldd	r23, Y+22	; 0x16
    4a2e:	8f 89       	ldd	r24, Y+23	; 0x17
    4a30:	98 8d       	ldd	r25, Y+24	; 0x18
    4a32:	20 e0       	ldi	r18, 0x00	; 0
    4a34:	30 e0       	ldi	r19, 0x00	; 0
    4a36:	40 e8       	ldi	r20, 0x80	; 128
    4a38:	5f e3       	ldi	r21, 0x3F	; 63
    4a3a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4a3e:	88 23       	and	r24, r24
    4a40:	2c f4       	brge	.+10     	; 0x4a4c <LCD_vInitWithOutClear+0x280>
		__ticks = 1;
    4a42:	81 e0       	ldi	r24, 0x01	; 1
    4a44:	90 e0       	ldi	r25, 0x00	; 0
    4a46:	9c 8b       	std	Y+20, r25	; 0x14
    4a48:	8b 8b       	std	Y+19, r24	; 0x13
    4a4a:	3f c0       	rjmp	.+126    	; 0x4aca <LCD_vInitWithOutClear+0x2fe>
	else if (__tmp > 65535)
    4a4c:	6d 89       	ldd	r22, Y+21	; 0x15
    4a4e:	7e 89       	ldd	r23, Y+22	; 0x16
    4a50:	8f 89       	ldd	r24, Y+23	; 0x17
    4a52:	98 8d       	ldd	r25, Y+24	; 0x18
    4a54:	20 e0       	ldi	r18, 0x00	; 0
    4a56:	3f ef       	ldi	r19, 0xFF	; 255
    4a58:	4f e7       	ldi	r20, 0x7F	; 127
    4a5a:	57 e4       	ldi	r21, 0x47	; 71
    4a5c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4a60:	18 16       	cp	r1, r24
    4a62:	4c f5       	brge	.+82     	; 0x4ab6 <LCD_vInitWithOutClear+0x2ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a64:	69 8d       	ldd	r22, Y+25	; 0x19
    4a66:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4a68:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4a6a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4a6c:	20 e0       	ldi	r18, 0x00	; 0
    4a6e:	30 e0       	ldi	r19, 0x00	; 0
    4a70:	40 e2       	ldi	r20, 0x20	; 32
    4a72:	51 e4       	ldi	r21, 0x41	; 65
    4a74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a78:	dc 01       	movw	r26, r24
    4a7a:	cb 01       	movw	r24, r22
    4a7c:	bc 01       	movw	r22, r24
    4a7e:	cd 01       	movw	r24, r26
    4a80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a84:	dc 01       	movw	r26, r24
    4a86:	cb 01       	movw	r24, r22
    4a88:	9c 8b       	std	Y+20, r25	; 0x14
    4a8a:	8b 8b       	std	Y+19, r24	; 0x13
    4a8c:	0f c0       	rjmp	.+30     	; 0x4aac <LCD_vInitWithOutClear+0x2e0>
    4a8e:	80 e9       	ldi	r24, 0x90	; 144
    4a90:	91 e0       	ldi	r25, 0x01	; 1
    4a92:	9a 8b       	std	Y+18, r25	; 0x12
    4a94:	89 8b       	std	Y+17, r24	; 0x11
    4a96:	89 89       	ldd	r24, Y+17	; 0x11
    4a98:	9a 89       	ldd	r25, Y+18	; 0x12
    4a9a:	01 97       	sbiw	r24, 0x01	; 1
    4a9c:	f1 f7       	brne	.-4      	; 0x4a9a <LCD_vInitWithOutClear+0x2ce>
    4a9e:	9a 8b       	std	Y+18, r25	; 0x12
    4aa0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4aa2:	8b 89       	ldd	r24, Y+19	; 0x13
    4aa4:	9c 89       	ldd	r25, Y+20	; 0x14
    4aa6:	01 97       	sbiw	r24, 0x01	; 1
    4aa8:	9c 8b       	std	Y+20, r25	; 0x14
    4aaa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4aac:	8b 89       	ldd	r24, Y+19	; 0x13
    4aae:	9c 89       	ldd	r25, Y+20	; 0x14
    4ab0:	00 97       	sbiw	r24, 0x00	; 0
    4ab2:	69 f7       	brne	.-38     	; 0x4a8e <LCD_vInitWithOutClear+0x2c2>
    4ab4:	14 c0       	rjmp	.+40     	; 0x4ade <LCD_vInitWithOutClear+0x312>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ab6:	6d 89       	ldd	r22, Y+21	; 0x15
    4ab8:	7e 89       	ldd	r23, Y+22	; 0x16
    4aba:	8f 89       	ldd	r24, Y+23	; 0x17
    4abc:	98 8d       	ldd	r25, Y+24	; 0x18
    4abe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ac2:	dc 01       	movw	r26, r24
    4ac4:	cb 01       	movw	r24, r22
    4ac6:	9c 8b       	std	Y+20, r25	; 0x14
    4ac8:	8b 8b       	std	Y+19, r24	; 0x13
    4aca:	8b 89       	ldd	r24, Y+19	; 0x13
    4acc:	9c 89       	ldd	r25, Y+20	; 0x14
    4ace:	98 8b       	std	Y+16, r25	; 0x10
    4ad0:	8f 87       	std	Y+15, r24	; 0x0f
    4ad2:	8f 85       	ldd	r24, Y+15	; 0x0f
    4ad4:	98 89       	ldd	r25, Y+16	; 0x10
    4ad6:	01 97       	sbiw	r24, 0x01	; 1
    4ad8:	f1 f7       	brne	.-4      	; 0x4ad6 <LCD_vInitWithOutClear+0x30a>
    4ada:	98 8b       	std	Y+16, r25	; 0x10
    4adc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	LCD_vSendCommand(EnrtyMode);
    4ade:	86 e0       	ldi	r24, 0x06	; 6
    4ae0:	0e 94 27 20 	call	0x404e	; 0x404e <LCD_vSendCommand>
    4ae4:	80 e0       	ldi	r24, 0x00	; 0
    4ae6:	90 e0       	ldi	r25, 0x00	; 0
    4ae8:	a0 e0       	ldi	r26, 0x00	; 0
    4aea:	b0 e4       	ldi	r27, 0x40	; 64
    4aec:	8b 87       	std	Y+11, r24	; 0x0b
    4aee:	9c 87       	std	Y+12, r25	; 0x0c
    4af0:	ad 87       	std	Y+13, r26	; 0x0d
    4af2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4af4:	6b 85       	ldd	r22, Y+11	; 0x0b
    4af6:	7c 85       	ldd	r23, Y+12	; 0x0c
    4af8:	8d 85       	ldd	r24, Y+13	; 0x0d
    4afa:	9e 85       	ldd	r25, Y+14	; 0x0e
    4afc:	20 e0       	ldi	r18, 0x00	; 0
    4afe:	30 e0       	ldi	r19, 0x00	; 0
    4b00:	4a e7       	ldi	r20, 0x7A	; 122
    4b02:	55 e4       	ldi	r21, 0x45	; 69
    4b04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b08:	dc 01       	movw	r26, r24
    4b0a:	cb 01       	movw	r24, r22
    4b0c:	8f 83       	std	Y+7, r24	; 0x07
    4b0e:	98 87       	std	Y+8, r25	; 0x08
    4b10:	a9 87       	std	Y+9, r26	; 0x09
    4b12:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4b14:	6f 81       	ldd	r22, Y+7	; 0x07
    4b16:	78 85       	ldd	r23, Y+8	; 0x08
    4b18:	89 85       	ldd	r24, Y+9	; 0x09
    4b1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b1c:	20 e0       	ldi	r18, 0x00	; 0
    4b1e:	30 e0       	ldi	r19, 0x00	; 0
    4b20:	40 e8       	ldi	r20, 0x80	; 128
    4b22:	5f e3       	ldi	r21, 0x3F	; 63
    4b24:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4b28:	88 23       	and	r24, r24
    4b2a:	2c f4       	brge	.+10     	; 0x4b36 <LCD_vInitWithOutClear+0x36a>
		__ticks = 1;
    4b2c:	81 e0       	ldi	r24, 0x01	; 1
    4b2e:	90 e0       	ldi	r25, 0x00	; 0
    4b30:	9e 83       	std	Y+6, r25	; 0x06
    4b32:	8d 83       	std	Y+5, r24	; 0x05
    4b34:	3f c0       	rjmp	.+126    	; 0x4bb4 <LCD_vInitWithOutClear+0x3e8>
	else if (__tmp > 65535)
    4b36:	6f 81       	ldd	r22, Y+7	; 0x07
    4b38:	78 85       	ldd	r23, Y+8	; 0x08
    4b3a:	89 85       	ldd	r24, Y+9	; 0x09
    4b3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b3e:	20 e0       	ldi	r18, 0x00	; 0
    4b40:	3f ef       	ldi	r19, 0xFF	; 255
    4b42:	4f e7       	ldi	r20, 0x7F	; 127
    4b44:	57 e4       	ldi	r21, 0x47	; 71
    4b46:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4b4a:	18 16       	cp	r1, r24
    4b4c:	4c f5       	brge	.+82     	; 0x4ba0 <LCD_vInitWithOutClear+0x3d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b4e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4b50:	7c 85       	ldd	r23, Y+12	; 0x0c
    4b52:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b54:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b56:	20 e0       	ldi	r18, 0x00	; 0
    4b58:	30 e0       	ldi	r19, 0x00	; 0
    4b5a:	40 e2       	ldi	r20, 0x20	; 32
    4b5c:	51 e4       	ldi	r21, 0x41	; 65
    4b5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b62:	dc 01       	movw	r26, r24
    4b64:	cb 01       	movw	r24, r22
    4b66:	bc 01       	movw	r22, r24
    4b68:	cd 01       	movw	r24, r26
    4b6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b6e:	dc 01       	movw	r26, r24
    4b70:	cb 01       	movw	r24, r22
    4b72:	9e 83       	std	Y+6, r25	; 0x06
    4b74:	8d 83       	std	Y+5, r24	; 0x05
    4b76:	0f c0       	rjmp	.+30     	; 0x4b96 <LCD_vInitWithOutClear+0x3ca>
    4b78:	80 e9       	ldi	r24, 0x90	; 144
    4b7a:	91 e0       	ldi	r25, 0x01	; 1
    4b7c:	9c 83       	std	Y+4, r25	; 0x04
    4b7e:	8b 83       	std	Y+3, r24	; 0x03
    4b80:	8b 81       	ldd	r24, Y+3	; 0x03
    4b82:	9c 81       	ldd	r25, Y+4	; 0x04
    4b84:	01 97       	sbiw	r24, 0x01	; 1
    4b86:	f1 f7       	brne	.-4      	; 0x4b84 <LCD_vInitWithOutClear+0x3b8>
    4b88:	9c 83       	std	Y+4, r25	; 0x04
    4b8a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b8c:	8d 81       	ldd	r24, Y+5	; 0x05
    4b8e:	9e 81       	ldd	r25, Y+6	; 0x06
    4b90:	01 97       	sbiw	r24, 0x01	; 1
    4b92:	9e 83       	std	Y+6, r25	; 0x06
    4b94:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b96:	8d 81       	ldd	r24, Y+5	; 0x05
    4b98:	9e 81       	ldd	r25, Y+6	; 0x06
    4b9a:	00 97       	sbiw	r24, 0x00	; 0
    4b9c:	69 f7       	brne	.-38     	; 0x4b78 <LCD_vInitWithOutClear+0x3ac>
    4b9e:	14 c0       	rjmp	.+40     	; 0x4bc8 <LCD_vInitWithOutClear+0x3fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ba0:	6f 81       	ldd	r22, Y+7	; 0x07
    4ba2:	78 85       	ldd	r23, Y+8	; 0x08
    4ba4:	89 85       	ldd	r24, Y+9	; 0x09
    4ba6:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ba8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bac:	dc 01       	movw	r26, r24
    4bae:	cb 01       	movw	r24, r22
    4bb0:	9e 83       	std	Y+6, r25	; 0x06
    4bb2:	8d 83       	std	Y+5, r24	; 0x05
    4bb4:	8d 81       	ldd	r24, Y+5	; 0x05
    4bb6:	9e 81       	ldd	r25, Y+6	; 0x06
    4bb8:	9a 83       	std	Y+2, r25	; 0x02
    4bba:	89 83       	std	Y+1, r24	; 0x01
    4bbc:	89 81       	ldd	r24, Y+1	; 0x01
    4bbe:	9a 81       	ldd	r25, Y+2	; 0x02
    4bc0:	01 97       	sbiw	r24, 0x01	; 1
    4bc2:	f1 f7       	brne	.-4      	; 0x4bc0 <LCD_vInitWithOutClear+0x3f4>
    4bc4:	9a 83       	std	Y+2, r25	; 0x02
    4bc6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    4bc8:	e8 96       	adiw	r28, 0x38	; 56
    4bca:	0f b6       	in	r0, 0x3f	; 63
    4bcc:	f8 94       	cli
    4bce:	de bf       	out	0x3e, r29	; 62
    4bd0:	0f be       	out	0x3f, r0	; 63
    4bd2:	cd bf       	out	0x3d, r28	; 61
    4bd4:	cf 91       	pop	r28
    4bd6:	df 91       	pop	r29
    4bd8:	08 95       	ret

00004bda <LCD_vWriteCharacter>:
void LCD_vWriteCharacter(u8 Loc_u8Character){
    4bda:	df 93       	push	r29
    4bdc:	cf 93       	push	r28
    4bde:	cd b7       	in	r28, 0x3d	; 61
    4be0:	de b7       	in	r29, 0x3e	; 62
    4be2:	6d 97       	sbiw	r28, 0x1d	; 29
    4be4:	0f b6       	in	r0, 0x3f	; 63
    4be6:	f8 94       	cli
    4be8:	de bf       	out	0x3e, r29	; 62
    4bea:	0f be       	out	0x3f, r0	; 63
    4bec:	cd bf       	out	0x3d, r28	; 61
    4bee:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_vSetPinValue(PortB, Pin1, Pin_High);
    4bf0:	81 e0       	ldi	r24, 0x01	; 1
    4bf2:	61 e0       	ldi	r22, 0x01	; 1
    4bf4:	41 e0       	ldi	r20, 0x01	; 1
    4bf6:	0e 94 b4 1a 	call	0x3568	; 0x3568 <DIO_vSetPinValue>
	DIO_vSetPinValue(PortB, Pin2, Pin_Low);
    4bfa:	81 e0       	ldi	r24, 0x01	; 1
    4bfc:	62 e0       	ldi	r22, 0x02	; 2
    4bfe:	40 e0       	ldi	r20, 0x00	; 0
    4c00:	0e 94 b4 1a 	call	0x3568	; 0x3568 <DIO_vSetPinValue>
	DIO_vSetPinValue(PortB, Pin3, Pin_Low);
    4c04:	81 e0       	ldi	r24, 0x01	; 1
    4c06:	63 e0       	ldi	r22, 0x03	; 3
    4c08:	40 e0       	ldi	r20, 0x00	; 0
    4c0a:	0e 94 b4 1a 	call	0x3568	; 0x3568 <DIO_vSetPinValue>
	//------Send command-------
	DIO_vSetPortValue(PortA,(Loc_u8Character)&0xF0);
    4c0e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4c10:	98 2f       	mov	r25, r24
    4c12:	90 7f       	andi	r25, 0xF0	; 240
    4c14:	80 e0       	ldi	r24, 0x00	; 0
    4c16:	69 2f       	mov	r22, r25
    4c18:	0e 94 1a 19 	call	0x3234	; 0x3234 <DIO_vSetPortValue>
	DIO_vSetPinValue(PortB, Pin3, Pin_High);
    4c1c:	81 e0       	ldi	r24, 0x01	; 1
    4c1e:	63 e0       	ldi	r22, 0x03	; 3
    4c20:	41 e0       	ldi	r20, 0x01	; 1
    4c22:	0e 94 b4 1a 	call	0x3568	; 0x3568 <DIO_vSetPinValue>
    4c26:	80 e0       	ldi	r24, 0x00	; 0
    4c28:	90 e0       	ldi	r25, 0x00	; 0
    4c2a:	a0 e2       	ldi	r26, 0x20	; 32
    4c2c:	b1 e4       	ldi	r27, 0x41	; 65
    4c2e:	89 8f       	std	Y+25, r24	; 0x19
    4c30:	9a 8f       	std	Y+26, r25	; 0x1a
    4c32:	ab 8f       	std	Y+27, r26	; 0x1b
    4c34:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c36:	69 8d       	ldd	r22, Y+25	; 0x19
    4c38:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4c3a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4c3c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4c3e:	20 e0       	ldi	r18, 0x00	; 0
    4c40:	30 e0       	ldi	r19, 0x00	; 0
    4c42:	4a e7       	ldi	r20, 0x7A	; 122
    4c44:	55 e4       	ldi	r21, 0x45	; 69
    4c46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c4a:	dc 01       	movw	r26, r24
    4c4c:	cb 01       	movw	r24, r22
    4c4e:	8d 8b       	std	Y+21, r24	; 0x15
    4c50:	9e 8b       	std	Y+22, r25	; 0x16
    4c52:	af 8b       	std	Y+23, r26	; 0x17
    4c54:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4c56:	6d 89       	ldd	r22, Y+21	; 0x15
    4c58:	7e 89       	ldd	r23, Y+22	; 0x16
    4c5a:	8f 89       	ldd	r24, Y+23	; 0x17
    4c5c:	98 8d       	ldd	r25, Y+24	; 0x18
    4c5e:	20 e0       	ldi	r18, 0x00	; 0
    4c60:	30 e0       	ldi	r19, 0x00	; 0
    4c62:	40 e8       	ldi	r20, 0x80	; 128
    4c64:	5f e3       	ldi	r21, 0x3F	; 63
    4c66:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4c6a:	88 23       	and	r24, r24
    4c6c:	2c f4       	brge	.+10     	; 0x4c78 <LCD_vWriteCharacter+0x9e>
		__ticks = 1;
    4c6e:	81 e0       	ldi	r24, 0x01	; 1
    4c70:	90 e0       	ldi	r25, 0x00	; 0
    4c72:	9c 8b       	std	Y+20, r25	; 0x14
    4c74:	8b 8b       	std	Y+19, r24	; 0x13
    4c76:	3f c0       	rjmp	.+126    	; 0x4cf6 <LCD_vWriteCharacter+0x11c>
	else if (__tmp > 65535)
    4c78:	6d 89       	ldd	r22, Y+21	; 0x15
    4c7a:	7e 89       	ldd	r23, Y+22	; 0x16
    4c7c:	8f 89       	ldd	r24, Y+23	; 0x17
    4c7e:	98 8d       	ldd	r25, Y+24	; 0x18
    4c80:	20 e0       	ldi	r18, 0x00	; 0
    4c82:	3f ef       	ldi	r19, 0xFF	; 255
    4c84:	4f e7       	ldi	r20, 0x7F	; 127
    4c86:	57 e4       	ldi	r21, 0x47	; 71
    4c88:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4c8c:	18 16       	cp	r1, r24
    4c8e:	4c f5       	brge	.+82     	; 0x4ce2 <LCD_vWriteCharacter+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c90:	69 8d       	ldd	r22, Y+25	; 0x19
    4c92:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4c94:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4c96:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4c98:	20 e0       	ldi	r18, 0x00	; 0
    4c9a:	30 e0       	ldi	r19, 0x00	; 0
    4c9c:	40 e2       	ldi	r20, 0x20	; 32
    4c9e:	51 e4       	ldi	r21, 0x41	; 65
    4ca0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ca4:	dc 01       	movw	r26, r24
    4ca6:	cb 01       	movw	r24, r22
    4ca8:	bc 01       	movw	r22, r24
    4caa:	cd 01       	movw	r24, r26
    4cac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cb0:	dc 01       	movw	r26, r24
    4cb2:	cb 01       	movw	r24, r22
    4cb4:	9c 8b       	std	Y+20, r25	; 0x14
    4cb6:	8b 8b       	std	Y+19, r24	; 0x13
    4cb8:	0f c0       	rjmp	.+30     	; 0x4cd8 <LCD_vWriteCharacter+0xfe>
    4cba:	80 e9       	ldi	r24, 0x90	; 144
    4cbc:	91 e0       	ldi	r25, 0x01	; 1
    4cbe:	9a 8b       	std	Y+18, r25	; 0x12
    4cc0:	89 8b       	std	Y+17, r24	; 0x11
    4cc2:	89 89       	ldd	r24, Y+17	; 0x11
    4cc4:	9a 89       	ldd	r25, Y+18	; 0x12
    4cc6:	01 97       	sbiw	r24, 0x01	; 1
    4cc8:	f1 f7       	brne	.-4      	; 0x4cc6 <LCD_vWriteCharacter+0xec>
    4cca:	9a 8b       	std	Y+18, r25	; 0x12
    4ccc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4cce:	8b 89       	ldd	r24, Y+19	; 0x13
    4cd0:	9c 89       	ldd	r25, Y+20	; 0x14
    4cd2:	01 97       	sbiw	r24, 0x01	; 1
    4cd4:	9c 8b       	std	Y+20, r25	; 0x14
    4cd6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4cd8:	8b 89       	ldd	r24, Y+19	; 0x13
    4cda:	9c 89       	ldd	r25, Y+20	; 0x14
    4cdc:	00 97       	sbiw	r24, 0x00	; 0
    4cde:	69 f7       	brne	.-38     	; 0x4cba <LCD_vWriteCharacter+0xe0>
    4ce0:	14 c0       	rjmp	.+40     	; 0x4d0a <LCD_vWriteCharacter+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ce2:	6d 89       	ldd	r22, Y+21	; 0x15
    4ce4:	7e 89       	ldd	r23, Y+22	; 0x16
    4ce6:	8f 89       	ldd	r24, Y+23	; 0x17
    4ce8:	98 8d       	ldd	r25, Y+24	; 0x18
    4cea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cee:	dc 01       	movw	r26, r24
    4cf0:	cb 01       	movw	r24, r22
    4cf2:	9c 8b       	std	Y+20, r25	; 0x14
    4cf4:	8b 8b       	std	Y+19, r24	; 0x13
    4cf6:	8b 89       	ldd	r24, Y+19	; 0x13
    4cf8:	9c 89       	ldd	r25, Y+20	; 0x14
    4cfa:	98 8b       	std	Y+16, r25	; 0x10
    4cfc:	8f 87       	std	Y+15, r24	; 0x0f
    4cfe:	8f 85       	ldd	r24, Y+15	; 0x0f
    4d00:	98 89       	ldd	r25, Y+16	; 0x10
    4d02:	01 97       	sbiw	r24, 0x01	; 1
    4d04:	f1 f7       	brne	.-4      	; 0x4d02 <LCD_vWriteCharacter+0x128>
    4d06:	98 8b       	std	Y+16, r25	; 0x10
    4d08:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	DIO_vSetPinValue(PortB, Pin3, Pin_Low);
    4d0a:	81 e0       	ldi	r24, 0x01	; 1
    4d0c:	63 e0       	ldi	r22, 0x03	; 3
    4d0e:	40 e0       	ldi	r20, 0x00	; 0
    4d10:	0e 94 b4 1a 	call	0x3568	; 0x3568 <DIO_vSetPinValue>
	DIO_vSetPortValue(PortA,(Loc_u8Character<<4));
    4d14:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4d16:	98 2f       	mov	r25, r24
    4d18:	92 95       	swap	r25
    4d1a:	90 7f       	andi	r25, 0xF0	; 240
    4d1c:	80 e0       	ldi	r24, 0x00	; 0
    4d1e:	69 2f       	mov	r22, r25
    4d20:	0e 94 1a 19 	call	0x3234	; 0x3234 <DIO_vSetPortValue>
	DIO_vSetPinValue(PortB, Pin3, Pin_High);
    4d24:	81 e0       	ldi	r24, 0x01	; 1
    4d26:	63 e0       	ldi	r22, 0x03	; 3
    4d28:	41 e0       	ldi	r20, 0x01	; 1
    4d2a:	0e 94 b4 1a 	call	0x3568	; 0x3568 <DIO_vSetPinValue>
    4d2e:	80 e0       	ldi	r24, 0x00	; 0
    4d30:	90 e0       	ldi	r25, 0x00	; 0
    4d32:	a0 e2       	ldi	r26, 0x20	; 32
    4d34:	b1 e4       	ldi	r27, 0x41	; 65
    4d36:	8b 87       	std	Y+11, r24	; 0x0b
    4d38:	9c 87       	std	Y+12, r25	; 0x0c
    4d3a:	ad 87       	std	Y+13, r26	; 0x0d
    4d3c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d3e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4d40:	7c 85       	ldd	r23, Y+12	; 0x0c
    4d42:	8d 85       	ldd	r24, Y+13	; 0x0d
    4d44:	9e 85       	ldd	r25, Y+14	; 0x0e
    4d46:	20 e0       	ldi	r18, 0x00	; 0
    4d48:	30 e0       	ldi	r19, 0x00	; 0
    4d4a:	4a e7       	ldi	r20, 0x7A	; 122
    4d4c:	55 e4       	ldi	r21, 0x45	; 69
    4d4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d52:	dc 01       	movw	r26, r24
    4d54:	cb 01       	movw	r24, r22
    4d56:	8f 83       	std	Y+7, r24	; 0x07
    4d58:	98 87       	std	Y+8, r25	; 0x08
    4d5a:	a9 87       	std	Y+9, r26	; 0x09
    4d5c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4d5e:	6f 81       	ldd	r22, Y+7	; 0x07
    4d60:	78 85       	ldd	r23, Y+8	; 0x08
    4d62:	89 85       	ldd	r24, Y+9	; 0x09
    4d64:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d66:	20 e0       	ldi	r18, 0x00	; 0
    4d68:	30 e0       	ldi	r19, 0x00	; 0
    4d6a:	40 e8       	ldi	r20, 0x80	; 128
    4d6c:	5f e3       	ldi	r21, 0x3F	; 63
    4d6e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4d72:	88 23       	and	r24, r24
    4d74:	2c f4       	brge	.+10     	; 0x4d80 <LCD_vWriteCharacter+0x1a6>
		__ticks = 1;
    4d76:	81 e0       	ldi	r24, 0x01	; 1
    4d78:	90 e0       	ldi	r25, 0x00	; 0
    4d7a:	9e 83       	std	Y+6, r25	; 0x06
    4d7c:	8d 83       	std	Y+5, r24	; 0x05
    4d7e:	3f c0       	rjmp	.+126    	; 0x4dfe <LCD_vWriteCharacter+0x224>
	else if (__tmp > 65535)
    4d80:	6f 81       	ldd	r22, Y+7	; 0x07
    4d82:	78 85       	ldd	r23, Y+8	; 0x08
    4d84:	89 85       	ldd	r24, Y+9	; 0x09
    4d86:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d88:	20 e0       	ldi	r18, 0x00	; 0
    4d8a:	3f ef       	ldi	r19, 0xFF	; 255
    4d8c:	4f e7       	ldi	r20, 0x7F	; 127
    4d8e:	57 e4       	ldi	r21, 0x47	; 71
    4d90:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4d94:	18 16       	cp	r1, r24
    4d96:	4c f5       	brge	.+82     	; 0x4dea <LCD_vWriteCharacter+0x210>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d98:	6b 85       	ldd	r22, Y+11	; 0x0b
    4d9a:	7c 85       	ldd	r23, Y+12	; 0x0c
    4d9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    4d9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4da0:	20 e0       	ldi	r18, 0x00	; 0
    4da2:	30 e0       	ldi	r19, 0x00	; 0
    4da4:	40 e2       	ldi	r20, 0x20	; 32
    4da6:	51 e4       	ldi	r21, 0x41	; 65
    4da8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4dac:	dc 01       	movw	r26, r24
    4dae:	cb 01       	movw	r24, r22
    4db0:	bc 01       	movw	r22, r24
    4db2:	cd 01       	movw	r24, r26
    4db4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4db8:	dc 01       	movw	r26, r24
    4dba:	cb 01       	movw	r24, r22
    4dbc:	9e 83       	std	Y+6, r25	; 0x06
    4dbe:	8d 83       	std	Y+5, r24	; 0x05
    4dc0:	0f c0       	rjmp	.+30     	; 0x4de0 <LCD_vWriteCharacter+0x206>
    4dc2:	80 e9       	ldi	r24, 0x90	; 144
    4dc4:	91 e0       	ldi	r25, 0x01	; 1
    4dc6:	9c 83       	std	Y+4, r25	; 0x04
    4dc8:	8b 83       	std	Y+3, r24	; 0x03
    4dca:	8b 81       	ldd	r24, Y+3	; 0x03
    4dcc:	9c 81       	ldd	r25, Y+4	; 0x04
    4dce:	01 97       	sbiw	r24, 0x01	; 1
    4dd0:	f1 f7       	brne	.-4      	; 0x4dce <LCD_vWriteCharacter+0x1f4>
    4dd2:	9c 83       	std	Y+4, r25	; 0x04
    4dd4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4dd6:	8d 81       	ldd	r24, Y+5	; 0x05
    4dd8:	9e 81       	ldd	r25, Y+6	; 0x06
    4dda:	01 97       	sbiw	r24, 0x01	; 1
    4ddc:	9e 83       	std	Y+6, r25	; 0x06
    4dde:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4de0:	8d 81       	ldd	r24, Y+5	; 0x05
    4de2:	9e 81       	ldd	r25, Y+6	; 0x06
    4de4:	00 97       	sbiw	r24, 0x00	; 0
    4de6:	69 f7       	brne	.-38     	; 0x4dc2 <LCD_vWriteCharacter+0x1e8>
    4de8:	14 c0       	rjmp	.+40     	; 0x4e12 <LCD_vWriteCharacter+0x238>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4dea:	6f 81       	ldd	r22, Y+7	; 0x07
    4dec:	78 85       	ldd	r23, Y+8	; 0x08
    4dee:	89 85       	ldd	r24, Y+9	; 0x09
    4df0:	9a 85       	ldd	r25, Y+10	; 0x0a
    4df2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4df6:	dc 01       	movw	r26, r24
    4df8:	cb 01       	movw	r24, r22
    4dfa:	9e 83       	std	Y+6, r25	; 0x06
    4dfc:	8d 83       	std	Y+5, r24	; 0x05
    4dfe:	8d 81       	ldd	r24, Y+5	; 0x05
    4e00:	9e 81       	ldd	r25, Y+6	; 0x06
    4e02:	9a 83       	std	Y+2, r25	; 0x02
    4e04:	89 83       	std	Y+1, r24	; 0x01
    4e06:	89 81       	ldd	r24, Y+1	; 0x01
    4e08:	9a 81       	ldd	r25, Y+2	; 0x02
    4e0a:	01 97       	sbiw	r24, 0x01	; 1
    4e0c:	f1 f7       	brne	.-4      	; 0x4e0a <LCD_vWriteCharacter+0x230>
    4e0e:	9a 83       	std	Y+2, r25	; 0x02
    4e10:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	DIO_vSetPinValue(PortB, Pin3, Pin_Low);
    4e12:	81 e0       	ldi	r24, 0x01	; 1
    4e14:	63 e0       	ldi	r22, 0x03	; 3
    4e16:	40 e0       	ldi	r20, 0x00	; 0
    4e18:	0e 94 b4 1a 	call	0x3568	; 0x3568 <DIO_vSetPinValue>



}
    4e1c:	6d 96       	adiw	r28, 0x1d	; 29
    4e1e:	0f b6       	in	r0, 0x3f	; 63
    4e20:	f8 94       	cli
    4e22:	de bf       	out	0x3e, r29	; 62
    4e24:	0f be       	out	0x3f, r0	; 63
    4e26:	cd bf       	out	0x3d, r28	; 61
    4e28:	cf 91       	pop	r28
    4e2a:	df 91       	pop	r29
    4e2c:	08 95       	ret

00004e2e <LCD_vGoTo>:
void LCD_vGoTo(u8 Loc_u8Line, u8 Loc_u8CharPos){
    4e2e:	df 93       	push	r29
    4e30:	cf 93       	push	r28
    4e32:	00 d0       	rcall	.+0      	; 0x4e34 <LCD_vGoTo+0x6>
    4e34:	cd b7       	in	r28, 0x3d	; 61
    4e36:	de b7       	in	r29, 0x3e	; 62
    4e38:	89 83       	std	Y+1, r24	; 0x01
    4e3a:	6a 83       	std	Y+2, r22	; 0x02
	LCD_vSendCommand(Loc_u8Line|Loc_u8CharPos);
    4e3c:	89 81       	ldd	r24, Y+1	; 0x01
    4e3e:	9a 81       	ldd	r25, Y+2	; 0x02
    4e40:	89 2b       	or	r24, r25
    4e42:	0e 94 27 20 	call	0x404e	; 0x404e <LCD_vSendCommand>
}
    4e46:	0f 90       	pop	r0
    4e48:	0f 90       	pop	r0
    4e4a:	cf 91       	pop	r28
    4e4c:	df 91       	pop	r29
    4e4e:	08 95       	ret

00004e50 <LCD_vClear>:
void LCD_vClear(){
    4e50:	df 93       	push	r29
    4e52:	cf 93       	push	r28
    4e54:	cd b7       	in	r28, 0x3d	; 61
    4e56:	de b7       	in	r29, 0x3e	; 62
    4e58:	2e 97       	sbiw	r28, 0x0e	; 14
    4e5a:	0f b6       	in	r0, 0x3f	; 63
    4e5c:	f8 94       	cli
    4e5e:	de bf       	out	0x3e, r29	; 62
    4e60:	0f be       	out	0x3f, r0	; 63
    4e62:	cd bf       	out	0x3d, r28	; 61
	LCD_vSendCommand(DisplayClear);
    4e64:	81 e0       	ldi	r24, 0x01	; 1
    4e66:	0e 94 27 20 	call	0x404e	; 0x404e <LCD_vSendCommand>
    4e6a:	80 e0       	ldi	r24, 0x00	; 0
    4e6c:	90 e0       	ldi	r25, 0x00	; 0
    4e6e:	a0 e0       	ldi	r26, 0x00	; 0
    4e70:	b0 e4       	ldi	r27, 0x40	; 64
    4e72:	8b 87       	std	Y+11, r24	; 0x0b
    4e74:	9c 87       	std	Y+12, r25	; 0x0c
    4e76:	ad 87       	std	Y+13, r26	; 0x0d
    4e78:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    4e7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    4e7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e80:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e82:	20 e0       	ldi	r18, 0x00	; 0
    4e84:	30 e0       	ldi	r19, 0x00	; 0
    4e86:	4a e7       	ldi	r20, 0x7A	; 122
    4e88:	55 e4       	ldi	r21, 0x45	; 69
    4e8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e8e:	dc 01       	movw	r26, r24
    4e90:	cb 01       	movw	r24, r22
    4e92:	8f 83       	std	Y+7, r24	; 0x07
    4e94:	98 87       	std	Y+8, r25	; 0x08
    4e96:	a9 87       	std	Y+9, r26	; 0x09
    4e98:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4e9a:	6f 81       	ldd	r22, Y+7	; 0x07
    4e9c:	78 85       	ldd	r23, Y+8	; 0x08
    4e9e:	89 85       	ldd	r24, Y+9	; 0x09
    4ea0:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ea2:	20 e0       	ldi	r18, 0x00	; 0
    4ea4:	30 e0       	ldi	r19, 0x00	; 0
    4ea6:	40 e8       	ldi	r20, 0x80	; 128
    4ea8:	5f e3       	ldi	r21, 0x3F	; 63
    4eaa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4eae:	88 23       	and	r24, r24
    4eb0:	2c f4       	brge	.+10     	; 0x4ebc <LCD_vClear+0x6c>
		__ticks = 1;
    4eb2:	81 e0       	ldi	r24, 0x01	; 1
    4eb4:	90 e0       	ldi	r25, 0x00	; 0
    4eb6:	9e 83       	std	Y+6, r25	; 0x06
    4eb8:	8d 83       	std	Y+5, r24	; 0x05
    4eba:	3f c0       	rjmp	.+126    	; 0x4f3a <LCD_vClear+0xea>
	else if (__tmp > 65535)
    4ebc:	6f 81       	ldd	r22, Y+7	; 0x07
    4ebe:	78 85       	ldd	r23, Y+8	; 0x08
    4ec0:	89 85       	ldd	r24, Y+9	; 0x09
    4ec2:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ec4:	20 e0       	ldi	r18, 0x00	; 0
    4ec6:	3f ef       	ldi	r19, 0xFF	; 255
    4ec8:	4f e7       	ldi	r20, 0x7F	; 127
    4eca:	57 e4       	ldi	r21, 0x47	; 71
    4ecc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4ed0:	18 16       	cp	r1, r24
    4ed2:	4c f5       	brge	.+82     	; 0x4f26 <LCD_vClear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ed4:	6b 85       	ldd	r22, Y+11	; 0x0b
    4ed6:	7c 85       	ldd	r23, Y+12	; 0x0c
    4ed8:	8d 85       	ldd	r24, Y+13	; 0x0d
    4eda:	9e 85       	ldd	r25, Y+14	; 0x0e
    4edc:	20 e0       	ldi	r18, 0x00	; 0
    4ede:	30 e0       	ldi	r19, 0x00	; 0
    4ee0:	40 e2       	ldi	r20, 0x20	; 32
    4ee2:	51 e4       	ldi	r21, 0x41	; 65
    4ee4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ee8:	dc 01       	movw	r26, r24
    4eea:	cb 01       	movw	r24, r22
    4eec:	bc 01       	movw	r22, r24
    4eee:	cd 01       	movw	r24, r26
    4ef0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ef4:	dc 01       	movw	r26, r24
    4ef6:	cb 01       	movw	r24, r22
    4ef8:	9e 83       	std	Y+6, r25	; 0x06
    4efa:	8d 83       	std	Y+5, r24	; 0x05
    4efc:	0f c0       	rjmp	.+30     	; 0x4f1c <LCD_vClear+0xcc>
    4efe:	80 e9       	ldi	r24, 0x90	; 144
    4f00:	91 e0       	ldi	r25, 0x01	; 1
    4f02:	9c 83       	std	Y+4, r25	; 0x04
    4f04:	8b 83       	std	Y+3, r24	; 0x03
    4f06:	8b 81       	ldd	r24, Y+3	; 0x03
    4f08:	9c 81       	ldd	r25, Y+4	; 0x04
    4f0a:	01 97       	sbiw	r24, 0x01	; 1
    4f0c:	f1 f7       	brne	.-4      	; 0x4f0a <LCD_vClear+0xba>
    4f0e:	9c 83       	std	Y+4, r25	; 0x04
    4f10:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f12:	8d 81       	ldd	r24, Y+5	; 0x05
    4f14:	9e 81       	ldd	r25, Y+6	; 0x06
    4f16:	01 97       	sbiw	r24, 0x01	; 1
    4f18:	9e 83       	std	Y+6, r25	; 0x06
    4f1a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f1c:	8d 81       	ldd	r24, Y+5	; 0x05
    4f1e:	9e 81       	ldd	r25, Y+6	; 0x06
    4f20:	00 97       	sbiw	r24, 0x00	; 0
    4f22:	69 f7       	brne	.-38     	; 0x4efe <LCD_vClear+0xae>
    4f24:	14 c0       	rjmp	.+40     	; 0x4f4e <LCD_vClear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f26:	6f 81       	ldd	r22, Y+7	; 0x07
    4f28:	78 85       	ldd	r23, Y+8	; 0x08
    4f2a:	89 85       	ldd	r24, Y+9	; 0x09
    4f2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f32:	dc 01       	movw	r26, r24
    4f34:	cb 01       	movw	r24, r22
    4f36:	9e 83       	std	Y+6, r25	; 0x06
    4f38:	8d 83       	std	Y+5, r24	; 0x05
    4f3a:	8d 81       	ldd	r24, Y+5	; 0x05
    4f3c:	9e 81       	ldd	r25, Y+6	; 0x06
    4f3e:	9a 83       	std	Y+2, r25	; 0x02
    4f40:	89 83       	std	Y+1, r24	; 0x01
    4f42:	89 81       	ldd	r24, Y+1	; 0x01
    4f44:	9a 81       	ldd	r25, Y+2	; 0x02
    4f46:	01 97       	sbiw	r24, 0x01	; 1
    4f48:	f1 f7       	brne	.-4      	; 0x4f46 <LCD_vClear+0xf6>
    4f4a:	9a 83       	std	Y+2, r25	; 0x02
    4f4c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    4f4e:	2e 96       	adiw	r28, 0x0e	; 14
    4f50:	0f b6       	in	r0, 0x3f	; 63
    4f52:	f8 94       	cli
    4f54:	de bf       	out	0x3e, r29	; 62
    4f56:	0f be       	out	0x3f, r0	; 63
    4f58:	cd bf       	out	0x3d, r28	; 61
    4f5a:	cf 91       	pop	r28
    4f5c:	df 91       	pop	r29
    4f5e:	08 95       	ret

00004f60 <LCD_vWriteString>:
void LCD_vWriteString(u8 *ptr){
    4f60:	df 93       	push	r29
    4f62:	cf 93       	push	r28
    4f64:	00 d0       	rcall	.+0      	; 0x4f66 <LCD_vWriteString+0x6>
    4f66:	0f 92       	push	r0
    4f68:	cd b7       	in	r28, 0x3d	; 61
    4f6a:	de b7       	in	r29, 0x3e	; 62
    4f6c:	9b 83       	std	Y+3, r25	; 0x03
    4f6e:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
    4f70:	19 82       	std	Y+1, r1	; 0x01
    4f72:	0e c0       	rjmp	.+28     	; 0x4f90 <LCD_vWriteString+0x30>
	while(ptr[i]!='\0'){
		LCD_vWriteCharacter(ptr[i]);
    4f74:	89 81       	ldd	r24, Y+1	; 0x01
    4f76:	28 2f       	mov	r18, r24
    4f78:	30 e0       	ldi	r19, 0x00	; 0
    4f7a:	8a 81       	ldd	r24, Y+2	; 0x02
    4f7c:	9b 81       	ldd	r25, Y+3	; 0x03
    4f7e:	fc 01       	movw	r30, r24
    4f80:	e2 0f       	add	r30, r18
    4f82:	f3 1f       	adc	r31, r19
    4f84:	80 81       	ld	r24, Z
    4f86:	0e 94 ed 25 	call	0x4bda	; 0x4bda <LCD_vWriteCharacter>
		i++;
    4f8a:	89 81       	ldd	r24, Y+1	; 0x01
    4f8c:	8f 5f       	subi	r24, 0xFF	; 255
    4f8e:	89 83       	std	Y+1, r24	; 0x01
	LCD_vSendCommand(DisplayClear);
	_delay_ms(2);
}
void LCD_vWriteString(u8 *ptr){
	u8 i=0;
	while(ptr[i]!='\0'){
    4f90:	89 81       	ldd	r24, Y+1	; 0x01
    4f92:	28 2f       	mov	r18, r24
    4f94:	30 e0       	ldi	r19, 0x00	; 0
    4f96:	8a 81       	ldd	r24, Y+2	; 0x02
    4f98:	9b 81       	ldd	r25, Y+3	; 0x03
    4f9a:	fc 01       	movw	r30, r24
    4f9c:	e2 0f       	add	r30, r18
    4f9e:	f3 1f       	adc	r31, r19
    4fa0:	80 81       	ld	r24, Z
    4fa2:	88 23       	and	r24, r24
    4fa4:	39 f7       	brne	.-50     	; 0x4f74 <LCD_vWriteString+0x14>
		LCD_vWriteCharacter(ptr[i]);
		i++;
	}
}
    4fa6:	0f 90       	pop	r0
    4fa8:	0f 90       	pop	r0
    4faa:	0f 90       	pop	r0
    4fac:	cf 91       	pop	r28
    4fae:	df 91       	pop	r29
    4fb0:	08 95       	ret

00004fb2 <LCD_vCustomCharacter>:
void LCD_vCustomCharacter(u8 *ptr,u8 Location){
    4fb2:	df 93       	push	r29
    4fb4:	cf 93       	push	r28
    4fb6:	00 d0       	rcall	.+0      	; 0x4fb8 <LCD_vCustomCharacter+0x6>
    4fb8:	00 d0       	rcall	.+0      	; 0x4fba <LCD_vCustomCharacter+0x8>
    4fba:	cd b7       	in	r28, 0x3d	; 61
    4fbc:	de b7       	in	r29, 0x3e	; 62
    4fbe:	9b 83       	std	Y+3, r25	; 0x03
    4fc0:	8a 83       	std	Y+2, r24	; 0x02
    4fc2:	6c 83       	std	Y+4, r22	; 0x04
	u8 i;
	LCD_vSendCommand((0x40)+(Location*8));
    4fc4:	8c 81       	ldd	r24, Y+4	; 0x04
    4fc6:	88 2f       	mov	r24, r24
    4fc8:	90 e0       	ldi	r25, 0x00	; 0
    4fca:	08 96       	adiw	r24, 0x08	; 8
    4fcc:	88 0f       	add	r24, r24
    4fce:	99 1f       	adc	r25, r25
    4fd0:	88 0f       	add	r24, r24
    4fd2:	99 1f       	adc	r25, r25
    4fd4:	88 0f       	add	r24, r24
    4fd6:	99 1f       	adc	r25, r25
    4fd8:	0e 94 27 20 	call	0x404e	; 0x404e <LCD_vSendCommand>
	for(i=0;i<8;i++){
    4fdc:	19 82       	std	Y+1, r1	; 0x01
    4fde:	0e c0       	rjmp	.+28     	; 0x4ffc <LCD_vCustomCharacter+0x4a>
		LCD_vWriteCharacter(ptr[i]);
    4fe0:	89 81       	ldd	r24, Y+1	; 0x01
    4fe2:	28 2f       	mov	r18, r24
    4fe4:	30 e0       	ldi	r19, 0x00	; 0
    4fe6:	8a 81       	ldd	r24, Y+2	; 0x02
    4fe8:	9b 81       	ldd	r25, Y+3	; 0x03
    4fea:	fc 01       	movw	r30, r24
    4fec:	e2 0f       	add	r30, r18
    4fee:	f3 1f       	adc	r31, r19
    4ff0:	80 81       	ld	r24, Z
    4ff2:	0e 94 ed 25 	call	0x4bda	; 0x4bda <LCD_vWriteCharacter>
	}
}
void LCD_vCustomCharacter(u8 *ptr,u8 Location){
	u8 i;
	LCD_vSendCommand((0x40)+(Location*8));
	for(i=0;i<8;i++){
    4ff6:	89 81       	ldd	r24, Y+1	; 0x01
    4ff8:	8f 5f       	subi	r24, 0xFF	; 255
    4ffa:	89 83       	std	Y+1, r24	; 0x01
    4ffc:	89 81       	ldd	r24, Y+1	; 0x01
    4ffe:	88 30       	cpi	r24, 0x08	; 8
    5000:	78 f3       	brcs	.-34     	; 0x4fe0 <LCD_vCustomCharacter+0x2e>
		LCD_vWriteCharacter(ptr[i]);
	}


}
    5002:	0f 90       	pop	r0
    5004:	0f 90       	pop	r0
    5006:	0f 90       	pop	r0
    5008:	0f 90       	pop	r0
    500a:	cf 91       	pop	r28
    500c:	df 91       	pop	r29
    500e:	08 95       	ret

00005010 <LCD_vCLearOneChar>:
void LCD_vCLearOneChar(u8 Loc_u8Line,u8 Loc_u8CharPos){
    5010:	df 93       	push	r29
    5012:	cf 93       	push	r28
    5014:	cd b7       	in	r28, 0x3d	; 61
    5016:	de b7       	in	r29, 0x3e	; 62
    5018:	2a 97       	sbiw	r28, 0x0a	; 10
    501a:	0f b6       	in	r0, 0x3f	; 63
    501c:	f8 94       	cli
    501e:	de bf       	out	0x3e, r29	; 62
    5020:	0f be       	out	0x3f, r0	; 63
    5022:	cd bf       	out	0x3d, r28	; 61
    5024:	89 87       	std	Y+9, r24	; 0x09
    5026:	6a 87       	std	Y+10, r22	; 0x0a
	u8 chr0[8]={0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
    5028:	88 e0       	ldi	r24, 0x08	; 8
    502a:	fe 01       	movw	r30, r28
    502c:	31 96       	adiw	r30, 0x01	; 1
    502e:	df 01       	movw	r26, r30
    5030:	98 2f       	mov	r25, r24
    5032:	1d 92       	st	X+, r1
    5034:	9a 95       	dec	r25
    5036:	e9 f7       	brne	.-6      	; 0x5032 <LCD_vCLearOneChar+0x22>
	LCD_vCustomCharacter(chr0,1);
    5038:	ce 01       	movw	r24, r28
    503a:	01 96       	adiw	r24, 0x01	; 1
    503c:	61 e0       	ldi	r22, 0x01	; 1
    503e:	0e 94 d9 27 	call	0x4fb2	; 0x4fb2 <LCD_vCustomCharacter>
	LCD_vGoTo(Loc_u8Line,Loc_u8CharPos);
    5042:	89 85       	ldd	r24, Y+9	; 0x09
    5044:	6a 85       	ldd	r22, Y+10	; 0x0a
    5046:	0e 94 17 27 	call	0x4e2e	; 0x4e2e <LCD_vGoTo>
	LCD_vWriteCharacter(1);
    504a:	81 e0       	ldi	r24, 0x01	; 1
    504c:	0e 94 ed 25 	call	0x4bda	; 0x4bda <LCD_vWriteCharacter>
}
    5050:	2a 96       	adiw	r28, 0x0a	; 10
    5052:	0f b6       	in	r0, 0x3f	; 63
    5054:	f8 94       	cli
    5056:	de bf       	out	0x3e, r29	; 62
    5058:	0f be       	out	0x3f, r0	; 63
    505a:	cd bf       	out	0x3d, r28	; 61
    505c:	cf 91       	pop	r28
    505e:	df 91       	pop	r29
    5060:	08 95       	ret

00005062 <LedAndBuzzer_vLed0Open>:
* \Description     : this function is used to open the led0 which is connected to PortC Pin2
*
* \Parameters (in) : None
* \Parameters (out): None
*******************************************************************************/
void LedAndBuzzer_vLed0Open(){
    5062:	df 93       	push	r29
    5064:	cf 93       	push	r28
    5066:	cd b7       	in	r28, 0x3d	; 61
    5068:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPinDirection(PortC, Pin2, Pin_OutPut);
    506a:	82 e0       	ldi	r24, 0x02	; 2
    506c:	62 e0       	ldi	r22, 0x02	; 2
    506e:	41 e0       	ldi	r20, 0x01	; 1
    5070:	0e 94 b1 19 	call	0x3362	; 0x3362 <DIO_vSetPinDirection>
	DIO_vSetPinValue(PortC, Pin2, Pin_High);
    5074:	82 e0       	ldi	r24, 0x02	; 2
    5076:	62 e0       	ldi	r22, 0x02	; 2
    5078:	41 e0       	ldi	r20, 0x01	; 1
    507a:	0e 94 b4 1a 	call	0x3568	; 0x3568 <DIO_vSetPinValue>
}
    507e:	cf 91       	pop	r28
    5080:	df 91       	pop	r29
    5082:	08 95       	ret

00005084 <LedAndBuzzer_vLed0Close>:
* \Description     : this function is used to Close the led0 which is connected to PortC Pin2
*
* \Parameters (in) : None
* \Parameters (out): None
*******************************************************************************/
void LedAndBuzzer_vLed0Close(){
    5084:	df 93       	push	r29
    5086:	cf 93       	push	r28
    5088:	cd b7       	in	r28, 0x3d	; 61
    508a:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPinValue(PortC, Pin2, Pin_Low);
    508c:	82 e0       	ldi	r24, 0x02	; 2
    508e:	62 e0       	ldi	r22, 0x02	; 2
    5090:	40 e0       	ldi	r20, 0x00	; 0
    5092:	0e 94 b4 1a 	call	0x3568	; 0x3568 <DIO_vSetPinValue>
}
    5096:	cf 91       	pop	r28
    5098:	df 91       	pop	r29
    509a:	08 95       	ret

0000509c <LedAndBuzzer_vLed1Open>:
* \Description     : this function is used to open the led1 which is connected to PortC Pin7
*
* \Parameters (in) : None
* \Parameters (out): None
*******************************************************************************/
void LedAndBuzzer_vLed1Open(){
    509c:	df 93       	push	r29
    509e:	cf 93       	push	r28
    50a0:	cd b7       	in	r28, 0x3d	; 61
    50a2:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPinDirection(PortC, Pin7, Pin_OutPut);
    50a4:	82 e0       	ldi	r24, 0x02	; 2
    50a6:	67 e0       	ldi	r22, 0x07	; 7
    50a8:	41 e0       	ldi	r20, 0x01	; 1
    50aa:	0e 94 b1 19 	call	0x3362	; 0x3362 <DIO_vSetPinDirection>
	DIO_vSetPinValue(PortC, Pin7, Pin_High);
    50ae:	82 e0       	ldi	r24, 0x02	; 2
    50b0:	67 e0       	ldi	r22, 0x07	; 7
    50b2:	41 e0       	ldi	r20, 0x01	; 1
    50b4:	0e 94 b4 1a 	call	0x3568	; 0x3568 <DIO_vSetPinValue>
}
    50b8:	cf 91       	pop	r28
    50ba:	df 91       	pop	r29
    50bc:	08 95       	ret

000050be <LedAndBuzzer_vLed1Close>:
* \Description     : this function is used to Close the led1 which is connected to PortC Pin7
*
* \Parameters (in) : None
* \Parameters (out): None
*******************************************************************************/
void LedAndBuzzer_vLed1Close(){
    50be:	df 93       	push	r29
    50c0:	cf 93       	push	r28
    50c2:	cd b7       	in	r28, 0x3d	; 61
    50c4:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPinValue(PortC, Pin7, Pin_Low);
    50c6:	82 e0       	ldi	r24, 0x02	; 2
    50c8:	67 e0       	ldi	r22, 0x07	; 7
    50ca:	40 e0       	ldi	r20, 0x00	; 0
    50cc:	0e 94 b4 1a 	call	0x3568	; 0x3568 <DIO_vSetPinValue>
}
    50d0:	cf 91       	pop	r28
    50d2:	df 91       	pop	r29
    50d4:	08 95       	ret

000050d6 <LedAndBuzzer_vLed2Open>:
* \Description     : this function is used to open the led2 which is connected to PortD Pin3
*
* \Parameters (in) : None
* \Parameters (out): None
*******************************************************************************/
void LedAndBuzzer_vLed2Open(){
    50d6:	df 93       	push	r29
    50d8:	cf 93       	push	r28
    50da:	cd b7       	in	r28, 0x3d	; 61
    50dc:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPinDirection(PortD, Pin3, Pin_OutPut);
    50de:	83 e0       	ldi	r24, 0x03	; 3
    50e0:	63 e0       	ldi	r22, 0x03	; 3
    50e2:	41 e0       	ldi	r20, 0x01	; 1
    50e4:	0e 94 b1 19 	call	0x3362	; 0x3362 <DIO_vSetPinDirection>
	DIO_vSetPinValue(PortD, Pin3, Pin_High);
    50e8:	83 e0       	ldi	r24, 0x03	; 3
    50ea:	63 e0       	ldi	r22, 0x03	; 3
    50ec:	41 e0       	ldi	r20, 0x01	; 1
    50ee:	0e 94 b4 1a 	call	0x3568	; 0x3568 <DIO_vSetPinValue>
}
    50f2:	cf 91       	pop	r28
    50f4:	df 91       	pop	r29
    50f6:	08 95       	ret

000050f8 <LedAndBuzzer_vLed2Close>:
* \Description     : this function is used to Close the led2 which is connected to PortD Pin3
*
* \Parameters (in) : None
* \Parameters (out): None
*******************************************************************************/
void LedAndBuzzer_vLed2Close(){
    50f8:	df 93       	push	r29
    50fa:	cf 93       	push	r28
    50fc:	cd b7       	in	r28, 0x3d	; 61
    50fe:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPinValue(PortD, Pin3, Pin_Low);
    5100:	83 e0       	ldi	r24, 0x03	; 3
    5102:	63 e0       	ldi	r22, 0x03	; 3
    5104:	40 e0       	ldi	r20, 0x00	; 0
    5106:	0e 94 b4 1a 	call	0x3568	; 0x3568 <DIO_vSetPinValue>
}
    510a:	cf 91       	pop	r28
    510c:	df 91       	pop	r29
    510e:	08 95       	ret

00005110 <LedAndBuzzer_vBuzzerOpen>:
* \Description     : this function is used to open the Buzzer which is connected to PortA Pin3
*
* \Parameters (in) : None
* \Parameters (out): None
*******************************************************************************/
void LedAndBuzzer_vBuzzerOpen(){
    5110:	df 93       	push	r29
    5112:	cf 93       	push	r28
    5114:	cd b7       	in	r28, 0x3d	; 61
    5116:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPinDirection(PortA, Pin3, Pin_OutPut);
    5118:	80 e0       	ldi	r24, 0x00	; 0
    511a:	63 e0       	ldi	r22, 0x03	; 3
    511c:	41 e0       	ldi	r20, 0x01	; 1
    511e:	0e 94 b1 19 	call	0x3362	; 0x3362 <DIO_vSetPinDirection>
	DIO_vSetPinValue(PortA, Pin3, Pin_High);
    5122:	80 e0       	ldi	r24, 0x00	; 0
    5124:	63 e0       	ldi	r22, 0x03	; 3
    5126:	41 e0       	ldi	r20, 0x01	; 1
    5128:	0e 94 b4 1a 	call	0x3568	; 0x3568 <DIO_vSetPinValue>
}
    512c:	cf 91       	pop	r28
    512e:	df 91       	pop	r29
    5130:	08 95       	ret

00005132 <LedAndBuzzer_vBuzzerClose>:
* \Description     : this function is used to Close the Buzzer which is connected to PortA Pin3
*
* \Parameters (in) : None
* \Parameters (out): None
*******************************************************************************/
void LedAndBuzzer_vBuzzerClose(){
    5132:	df 93       	push	r29
    5134:	cf 93       	push	r28
    5136:	cd b7       	in	r28, 0x3d	; 61
    5138:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPinValue(PortA, Pin3, Pin_Low);
    513a:	80 e0       	ldi	r24, 0x00	; 0
    513c:	63 e0       	ldi	r22, 0x03	; 3
    513e:	40 e0       	ldi	r20, 0x00	; 0
    5140:	0e 94 b4 1a 	call	0x3568	; 0x3568 <DIO_vSetPinValue>
}
    5144:	cf 91       	pop	r28
    5146:	df 91       	pop	r29
    5148:	08 95       	ret

0000514a <LedAndBuzzer_vFlash>:
* \Description     : this function is used to turn on the LEDs and Buzzer for .25sec number of times
*
* \Parameters (in) : u8 Loc_vNumberOfFlashes	Number of LEDs and Buzzer WILL on and off
* \Parameters (out): None
*******************************************************************************/
void LedAndBuzzer_vFlash(u8 Loc_vNumberOfFlashes){
    514a:	df 93       	push	r29
    514c:	cf 93       	push	r28
    514e:	cd b7       	in	r28, 0x3d	; 61
    5150:	de b7       	in	r29, 0x3e	; 62
    5152:	6e 97       	sbiw	r28, 0x1e	; 30
    5154:	0f b6       	in	r0, 0x3f	; 63
    5156:	f8 94       	cli
    5158:	de bf       	out	0x3e, r29	; 62
    515a:	0f be       	out	0x3f, r0	; 63
    515c:	cd bf       	out	0x3d, r28	; 61
    515e:	8e 8f       	std	Y+30, r24	; 0x1e
	u8 count;
	for(count=0;count<Loc_vNumberOfFlashes;count++){
    5160:	1d 8e       	std	Y+29, r1	; 0x1d
    5162:	f7 c0       	rjmp	.+494    	; 0x5352 <LedAndBuzzer_vFlash+0x208>
		LedAndBuzzer_vBuzzerOpen();
    5164:	0e 94 88 28 	call	0x5110	; 0x5110 <LedAndBuzzer_vBuzzerOpen>
		LedAndBuzzer_vLed0Open();
    5168:	0e 94 31 28 	call	0x5062	; 0x5062 <LedAndBuzzer_vLed0Open>
		LedAndBuzzer_vLed1Open();
    516c:	0e 94 4e 28 	call	0x509c	; 0x509c <LedAndBuzzer_vLed1Open>
		LedAndBuzzer_vLed2Open();
    5170:	0e 94 6b 28 	call	0x50d6	; 0x50d6 <LedAndBuzzer_vLed2Open>
    5174:	80 e0       	ldi	r24, 0x00	; 0
    5176:	90 e0       	ldi	r25, 0x00	; 0
    5178:	aa e7       	ldi	r26, 0x7A	; 122
    517a:	b3 e4       	ldi	r27, 0x43	; 67
    517c:	89 8f       	std	Y+25, r24	; 0x19
    517e:	9a 8f       	std	Y+26, r25	; 0x1a
    5180:	ab 8f       	std	Y+27, r26	; 0x1b
    5182:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5184:	69 8d       	ldd	r22, Y+25	; 0x19
    5186:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5188:	8b 8d       	ldd	r24, Y+27	; 0x1b
    518a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    518c:	20 e0       	ldi	r18, 0x00	; 0
    518e:	30 e0       	ldi	r19, 0x00	; 0
    5190:	4a e7       	ldi	r20, 0x7A	; 122
    5192:	55 e4       	ldi	r21, 0x45	; 69
    5194:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5198:	dc 01       	movw	r26, r24
    519a:	cb 01       	movw	r24, r22
    519c:	8d 8b       	std	Y+21, r24	; 0x15
    519e:	9e 8b       	std	Y+22, r25	; 0x16
    51a0:	af 8b       	std	Y+23, r26	; 0x17
    51a2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    51a4:	6d 89       	ldd	r22, Y+21	; 0x15
    51a6:	7e 89       	ldd	r23, Y+22	; 0x16
    51a8:	8f 89       	ldd	r24, Y+23	; 0x17
    51aa:	98 8d       	ldd	r25, Y+24	; 0x18
    51ac:	20 e0       	ldi	r18, 0x00	; 0
    51ae:	30 e0       	ldi	r19, 0x00	; 0
    51b0:	40 e8       	ldi	r20, 0x80	; 128
    51b2:	5f e3       	ldi	r21, 0x3F	; 63
    51b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    51b8:	88 23       	and	r24, r24
    51ba:	2c f4       	brge	.+10     	; 0x51c6 <LedAndBuzzer_vFlash+0x7c>
		__ticks = 1;
    51bc:	81 e0       	ldi	r24, 0x01	; 1
    51be:	90 e0       	ldi	r25, 0x00	; 0
    51c0:	9c 8b       	std	Y+20, r25	; 0x14
    51c2:	8b 8b       	std	Y+19, r24	; 0x13
    51c4:	3f c0       	rjmp	.+126    	; 0x5244 <LedAndBuzzer_vFlash+0xfa>
	else if (__tmp > 65535)
    51c6:	6d 89       	ldd	r22, Y+21	; 0x15
    51c8:	7e 89       	ldd	r23, Y+22	; 0x16
    51ca:	8f 89       	ldd	r24, Y+23	; 0x17
    51cc:	98 8d       	ldd	r25, Y+24	; 0x18
    51ce:	20 e0       	ldi	r18, 0x00	; 0
    51d0:	3f ef       	ldi	r19, 0xFF	; 255
    51d2:	4f e7       	ldi	r20, 0x7F	; 127
    51d4:	57 e4       	ldi	r21, 0x47	; 71
    51d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    51da:	18 16       	cp	r1, r24
    51dc:	4c f5       	brge	.+82     	; 0x5230 <LedAndBuzzer_vFlash+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    51de:	69 8d       	ldd	r22, Y+25	; 0x19
    51e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    51e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    51e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    51e6:	20 e0       	ldi	r18, 0x00	; 0
    51e8:	30 e0       	ldi	r19, 0x00	; 0
    51ea:	40 e2       	ldi	r20, 0x20	; 32
    51ec:	51 e4       	ldi	r21, 0x41	; 65
    51ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    51f2:	dc 01       	movw	r26, r24
    51f4:	cb 01       	movw	r24, r22
    51f6:	bc 01       	movw	r22, r24
    51f8:	cd 01       	movw	r24, r26
    51fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51fe:	dc 01       	movw	r26, r24
    5200:	cb 01       	movw	r24, r22
    5202:	9c 8b       	std	Y+20, r25	; 0x14
    5204:	8b 8b       	std	Y+19, r24	; 0x13
    5206:	0f c0       	rjmp	.+30     	; 0x5226 <LedAndBuzzer_vFlash+0xdc>
    5208:	80 e9       	ldi	r24, 0x90	; 144
    520a:	91 e0       	ldi	r25, 0x01	; 1
    520c:	9a 8b       	std	Y+18, r25	; 0x12
    520e:	89 8b       	std	Y+17, r24	; 0x11
    5210:	89 89       	ldd	r24, Y+17	; 0x11
    5212:	9a 89       	ldd	r25, Y+18	; 0x12
    5214:	01 97       	sbiw	r24, 0x01	; 1
    5216:	f1 f7       	brne	.-4      	; 0x5214 <LedAndBuzzer_vFlash+0xca>
    5218:	9a 8b       	std	Y+18, r25	; 0x12
    521a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    521c:	8b 89       	ldd	r24, Y+19	; 0x13
    521e:	9c 89       	ldd	r25, Y+20	; 0x14
    5220:	01 97       	sbiw	r24, 0x01	; 1
    5222:	9c 8b       	std	Y+20, r25	; 0x14
    5224:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5226:	8b 89       	ldd	r24, Y+19	; 0x13
    5228:	9c 89       	ldd	r25, Y+20	; 0x14
    522a:	00 97       	sbiw	r24, 0x00	; 0
    522c:	69 f7       	brne	.-38     	; 0x5208 <LedAndBuzzer_vFlash+0xbe>
    522e:	14 c0       	rjmp	.+40     	; 0x5258 <LedAndBuzzer_vFlash+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5230:	6d 89       	ldd	r22, Y+21	; 0x15
    5232:	7e 89       	ldd	r23, Y+22	; 0x16
    5234:	8f 89       	ldd	r24, Y+23	; 0x17
    5236:	98 8d       	ldd	r25, Y+24	; 0x18
    5238:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    523c:	dc 01       	movw	r26, r24
    523e:	cb 01       	movw	r24, r22
    5240:	9c 8b       	std	Y+20, r25	; 0x14
    5242:	8b 8b       	std	Y+19, r24	; 0x13
    5244:	8b 89       	ldd	r24, Y+19	; 0x13
    5246:	9c 89       	ldd	r25, Y+20	; 0x14
    5248:	98 8b       	std	Y+16, r25	; 0x10
    524a:	8f 87       	std	Y+15, r24	; 0x0f
    524c:	8f 85       	ldd	r24, Y+15	; 0x0f
    524e:	98 89       	ldd	r25, Y+16	; 0x10
    5250:	01 97       	sbiw	r24, 0x01	; 1
    5252:	f1 f7       	brne	.-4      	; 0x5250 <LedAndBuzzer_vFlash+0x106>
    5254:	98 8b       	std	Y+16, r25	; 0x10
    5256:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(250);
		LedAndBuzzer_vBuzzerClose();
    5258:	0e 94 99 28 	call	0x5132	; 0x5132 <LedAndBuzzer_vBuzzerClose>
		LedAndBuzzer_vLed2Close();
    525c:	0e 94 7c 28 	call	0x50f8	; 0x50f8 <LedAndBuzzer_vLed2Close>
		LedAndBuzzer_vLed0Close();
    5260:	0e 94 42 28 	call	0x5084	; 0x5084 <LedAndBuzzer_vLed0Close>
		LedAndBuzzer_vLed1Close();
    5264:	0e 94 5f 28 	call	0x50be	; 0x50be <LedAndBuzzer_vLed1Close>
    5268:	80 e0       	ldi	r24, 0x00	; 0
    526a:	90 e0       	ldi	r25, 0x00	; 0
    526c:	aa e7       	ldi	r26, 0x7A	; 122
    526e:	b3 e4       	ldi	r27, 0x43	; 67
    5270:	8b 87       	std	Y+11, r24	; 0x0b
    5272:	9c 87       	std	Y+12, r25	; 0x0c
    5274:	ad 87       	std	Y+13, r26	; 0x0d
    5276:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5278:	6b 85       	ldd	r22, Y+11	; 0x0b
    527a:	7c 85       	ldd	r23, Y+12	; 0x0c
    527c:	8d 85       	ldd	r24, Y+13	; 0x0d
    527e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5280:	20 e0       	ldi	r18, 0x00	; 0
    5282:	30 e0       	ldi	r19, 0x00	; 0
    5284:	4a e7       	ldi	r20, 0x7A	; 122
    5286:	55 e4       	ldi	r21, 0x45	; 69
    5288:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    528c:	dc 01       	movw	r26, r24
    528e:	cb 01       	movw	r24, r22
    5290:	8f 83       	std	Y+7, r24	; 0x07
    5292:	98 87       	std	Y+8, r25	; 0x08
    5294:	a9 87       	std	Y+9, r26	; 0x09
    5296:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5298:	6f 81       	ldd	r22, Y+7	; 0x07
    529a:	78 85       	ldd	r23, Y+8	; 0x08
    529c:	89 85       	ldd	r24, Y+9	; 0x09
    529e:	9a 85       	ldd	r25, Y+10	; 0x0a
    52a0:	20 e0       	ldi	r18, 0x00	; 0
    52a2:	30 e0       	ldi	r19, 0x00	; 0
    52a4:	40 e8       	ldi	r20, 0x80	; 128
    52a6:	5f e3       	ldi	r21, 0x3F	; 63
    52a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    52ac:	88 23       	and	r24, r24
    52ae:	2c f4       	brge	.+10     	; 0x52ba <LedAndBuzzer_vFlash+0x170>
		__ticks = 1;
    52b0:	81 e0       	ldi	r24, 0x01	; 1
    52b2:	90 e0       	ldi	r25, 0x00	; 0
    52b4:	9e 83       	std	Y+6, r25	; 0x06
    52b6:	8d 83       	std	Y+5, r24	; 0x05
    52b8:	3f c0       	rjmp	.+126    	; 0x5338 <LedAndBuzzer_vFlash+0x1ee>
	else if (__tmp > 65535)
    52ba:	6f 81       	ldd	r22, Y+7	; 0x07
    52bc:	78 85       	ldd	r23, Y+8	; 0x08
    52be:	89 85       	ldd	r24, Y+9	; 0x09
    52c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    52c2:	20 e0       	ldi	r18, 0x00	; 0
    52c4:	3f ef       	ldi	r19, 0xFF	; 255
    52c6:	4f e7       	ldi	r20, 0x7F	; 127
    52c8:	57 e4       	ldi	r21, 0x47	; 71
    52ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    52ce:	18 16       	cp	r1, r24
    52d0:	4c f5       	brge	.+82     	; 0x5324 <LedAndBuzzer_vFlash+0x1da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    52d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    52d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    52d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    52d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    52da:	20 e0       	ldi	r18, 0x00	; 0
    52dc:	30 e0       	ldi	r19, 0x00	; 0
    52de:	40 e2       	ldi	r20, 0x20	; 32
    52e0:	51 e4       	ldi	r21, 0x41	; 65
    52e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52e6:	dc 01       	movw	r26, r24
    52e8:	cb 01       	movw	r24, r22
    52ea:	bc 01       	movw	r22, r24
    52ec:	cd 01       	movw	r24, r26
    52ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52f2:	dc 01       	movw	r26, r24
    52f4:	cb 01       	movw	r24, r22
    52f6:	9e 83       	std	Y+6, r25	; 0x06
    52f8:	8d 83       	std	Y+5, r24	; 0x05
    52fa:	0f c0       	rjmp	.+30     	; 0x531a <LedAndBuzzer_vFlash+0x1d0>
    52fc:	80 e9       	ldi	r24, 0x90	; 144
    52fe:	91 e0       	ldi	r25, 0x01	; 1
    5300:	9c 83       	std	Y+4, r25	; 0x04
    5302:	8b 83       	std	Y+3, r24	; 0x03
    5304:	8b 81       	ldd	r24, Y+3	; 0x03
    5306:	9c 81       	ldd	r25, Y+4	; 0x04
    5308:	01 97       	sbiw	r24, 0x01	; 1
    530a:	f1 f7       	brne	.-4      	; 0x5308 <LedAndBuzzer_vFlash+0x1be>
    530c:	9c 83       	std	Y+4, r25	; 0x04
    530e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5310:	8d 81       	ldd	r24, Y+5	; 0x05
    5312:	9e 81       	ldd	r25, Y+6	; 0x06
    5314:	01 97       	sbiw	r24, 0x01	; 1
    5316:	9e 83       	std	Y+6, r25	; 0x06
    5318:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    531a:	8d 81       	ldd	r24, Y+5	; 0x05
    531c:	9e 81       	ldd	r25, Y+6	; 0x06
    531e:	00 97       	sbiw	r24, 0x00	; 0
    5320:	69 f7       	brne	.-38     	; 0x52fc <LedAndBuzzer_vFlash+0x1b2>
    5322:	14 c0       	rjmp	.+40     	; 0x534c <LedAndBuzzer_vFlash+0x202>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5324:	6f 81       	ldd	r22, Y+7	; 0x07
    5326:	78 85       	ldd	r23, Y+8	; 0x08
    5328:	89 85       	ldd	r24, Y+9	; 0x09
    532a:	9a 85       	ldd	r25, Y+10	; 0x0a
    532c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5330:	dc 01       	movw	r26, r24
    5332:	cb 01       	movw	r24, r22
    5334:	9e 83       	std	Y+6, r25	; 0x06
    5336:	8d 83       	std	Y+5, r24	; 0x05
    5338:	8d 81       	ldd	r24, Y+5	; 0x05
    533a:	9e 81       	ldd	r25, Y+6	; 0x06
    533c:	9a 83       	std	Y+2, r25	; 0x02
    533e:	89 83       	std	Y+1, r24	; 0x01
    5340:	89 81       	ldd	r24, Y+1	; 0x01
    5342:	9a 81       	ldd	r25, Y+2	; 0x02
    5344:	01 97       	sbiw	r24, 0x01	; 1
    5346:	f1 f7       	brne	.-4      	; 0x5344 <LedAndBuzzer_vFlash+0x1fa>
    5348:	9a 83       	std	Y+2, r25	; 0x02
    534a:	89 83       	std	Y+1, r24	; 0x01
* \Parameters (in) : u8 Loc_vNumberOfFlashes	Number of LEDs and Buzzer WILL on and off
* \Parameters (out): None
*******************************************************************************/
void LedAndBuzzer_vFlash(u8 Loc_vNumberOfFlashes){
	u8 count;
	for(count=0;count<Loc_vNumberOfFlashes;count++){
    534c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    534e:	8f 5f       	subi	r24, 0xFF	; 255
    5350:	8d 8f       	std	Y+29, r24	; 0x1d
    5352:	9d 8d       	ldd	r25, Y+29	; 0x1d
    5354:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5356:	98 17       	cp	r25, r24
    5358:	08 f4       	brcc	.+2      	; 0x535c <LedAndBuzzer_vFlash+0x212>
    535a:	04 cf       	rjmp	.-504    	; 0x5164 <LedAndBuzzer_vFlash+0x1a>
		LedAndBuzzer_vLed2Close();
		LedAndBuzzer_vLed0Close();
		LedAndBuzzer_vLed1Close();
		_delay_ms(250);
	}
}
    535c:	6e 96       	adiw	r28, 0x1e	; 30
    535e:	0f b6       	in	r0, 0x3f	; 63
    5360:	f8 94       	cli
    5362:	de bf       	out	0x3e, r29	; 62
    5364:	0f be       	out	0x3f, r0	; 63
    5366:	cd bf       	out	0x3d, r28	; 61
    5368:	cf 91       	pop	r28
    536a:	df 91       	pop	r29
    536c:	08 95       	ret

0000536e <PushButton_u8Button0>:
*
* \Parameters (in) : None
* \Parameters (out): u8
* \Return value:   : 0 or 1
*******************************************************************************/
u8 PushButton_u8Button0(){
    536e:	df 93       	push	r29
    5370:	cf 93       	push	r28
    5372:	cd b7       	in	r28, 0x3d	; 61
    5374:	de b7       	in	r29, 0x3e	; 62
    5376:	2f 97       	sbiw	r28, 0x0f	; 15
    5378:	0f b6       	in	r0, 0x3f	; 63
    537a:	f8 94       	cli
    537c:	de bf       	out	0x3e, r29	; 62
    537e:	0f be       	out	0x3f, r0	; 63
    5380:	cd bf       	out	0x3d, r28	; 61
	DIO_vSetPinDirection(PortB, Pin0, Pin_InPut);
    5382:	81 e0       	ldi	r24, 0x01	; 1
    5384:	60 e0       	ldi	r22, 0x00	; 0
    5386:	40 e0       	ldi	r20, 0x00	; 0
    5388:	0e 94 b1 19 	call	0x3362	; 0x3362 <DIO_vSetPinDirection>
	if(DIO_u8PGetPinValue(PortB,Pin0)){
    538c:	81 e0       	ldi	r24, 0x01	; 1
    538e:	60 e0       	ldi	r22, 0x00	; 0
    5390:	0e 94 8f 1b 	call	0x371e	; 0x371e <DIO_u8PGetPinValue>
    5394:	88 23       	and	r24, r24
    5396:	09 f4       	brne	.+2      	; 0x539a <PushButton_u8Button0+0x2c>
    5398:	7b c0       	rjmp	.+246    	; 0x5490 <PushButton_u8Button0+0x122>
    539a:	80 e0       	ldi	r24, 0x00	; 0
    539c:	90 e0       	ldi	r25, 0x00	; 0
    539e:	a8 ec       	ldi	r26, 0xC8	; 200
    53a0:	b1 e4       	ldi	r27, 0x41	; 65
    53a2:	8b 87       	std	Y+11, r24	; 0x0b
    53a4:	9c 87       	std	Y+12, r25	; 0x0c
    53a6:	ad 87       	std	Y+13, r26	; 0x0d
    53a8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    53aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    53ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    53ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    53b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    53b2:	20 e0       	ldi	r18, 0x00	; 0
    53b4:	30 e0       	ldi	r19, 0x00	; 0
    53b6:	4a e7       	ldi	r20, 0x7A	; 122
    53b8:	55 e4       	ldi	r21, 0x45	; 69
    53ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53be:	dc 01       	movw	r26, r24
    53c0:	cb 01       	movw	r24, r22
    53c2:	8f 83       	std	Y+7, r24	; 0x07
    53c4:	98 87       	std	Y+8, r25	; 0x08
    53c6:	a9 87       	std	Y+9, r26	; 0x09
    53c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    53ca:	6f 81       	ldd	r22, Y+7	; 0x07
    53cc:	78 85       	ldd	r23, Y+8	; 0x08
    53ce:	89 85       	ldd	r24, Y+9	; 0x09
    53d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    53d2:	20 e0       	ldi	r18, 0x00	; 0
    53d4:	30 e0       	ldi	r19, 0x00	; 0
    53d6:	40 e8       	ldi	r20, 0x80	; 128
    53d8:	5f e3       	ldi	r21, 0x3F	; 63
    53da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    53de:	88 23       	and	r24, r24
    53e0:	2c f4       	brge	.+10     	; 0x53ec <PushButton_u8Button0+0x7e>
		__ticks = 1;
    53e2:	81 e0       	ldi	r24, 0x01	; 1
    53e4:	90 e0       	ldi	r25, 0x00	; 0
    53e6:	9e 83       	std	Y+6, r25	; 0x06
    53e8:	8d 83       	std	Y+5, r24	; 0x05
    53ea:	3f c0       	rjmp	.+126    	; 0x546a <PushButton_u8Button0+0xfc>
	else if (__tmp > 65535)
    53ec:	6f 81       	ldd	r22, Y+7	; 0x07
    53ee:	78 85       	ldd	r23, Y+8	; 0x08
    53f0:	89 85       	ldd	r24, Y+9	; 0x09
    53f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    53f4:	20 e0       	ldi	r18, 0x00	; 0
    53f6:	3f ef       	ldi	r19, 0xFF	; 255
    53f8:	4f e7       	ldi	r20, 0x7F	; 127
    53fa:	57 e4       	ldi	r21, 0x47	; 71
    53fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5400:	18 16       	cp	r1, r24
    5402:	4c f5       	brge	.+82     	; 0x5456 <PushButton_u8Button0+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5404:	6b 85       	ldd	r22, Y+11	; 0x0b
    5406:	7c 85       	ldd	r23, Y+12	; 0x0c
    5408:	8d 85       	ldd	r24, Y+13	; 0x0d
    540a:	9e 85       	ldd	r25, Y+14	; 0x0e
    540c:	20 e0       	ldi	r18, 0x00	; 0
    540e:	30 e0       	ldi	r19, 0x00	; 0
    5410:	40 e2       	ldi	r20, 0x20	; 32
    5412:	51 e4       	ldi	r21, 0x41	; 65
    5414:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5418:	dc 01       	movw	r26, r24
    541a:	cb 01       	movw	r24, r22
    541c:	bc 01       	movw	r22, r24
    541e:	cd 01       	movw	r24, r26
    5420:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5424:	dc 01       	movw	r26, r24
    5426:	cb 01       	movw	r24, r22
    5428:	9e 83       	std	Y+6, r25	; 0x06
    542a:	8d 83       	std	Y+5, r24	; 0x05
    542c:	0f c0       	rjmp	.+30     	; 0x544c <PushButton_u8Button0+0xde>
    542e:	80 e9       	ldi	r24, 0x90	; 144
    5430:	91 e0       	ldi	r25, 0x01	; 1
    5432:	9c 83       	std	Y+4, r25	; 0x04
    5434:	8b 83       	std	Y+3, r24	; 0x03
    5436:	8b 81       	ldd	r24, Y+3	; 0x03
    5438:	9c 81       	ldd	r25, Y+4	; 0x04
    543a:	01 97       	sbiw	r24, 0x01	; 1
    543c:	f1 f7       	brne	.-4      	; 0x543a <PushButton_u8Button0+0xcc>
    543e:	9c 83       	std	Y+4, r25	; 0x04
    5440:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5442:	8d 81       	ldd	r24, Y+5	; 0x05
    5444:	9e 81       	ldd	r25, Y+6	; 0x06
    5446:	01 97       	sbiw	r24, 0x01	; 1
    5448:	9e 83       	std	Y+6, r25	; 0x06
    544a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    544c:	8d 81       	ldd	r24, Y+5	; 0x05
    544e:	9e 81       	ldd	r25, Y+6	; 0x06
    5450:	00 97       	sbiw	r24, 0x00	; 0
    5452:	69 f7       	brne	.-38     	; 0x542e <PushButton_u8Button0+0xc0>
    5454:	14 c0       	rjmp	.+40     	; 0x547e <PushButton_u8Button0+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5456:	6f 81       	ldd	r22, Y+7	; 0x07
    5458:	78 85       	ldd	r23, Y+8	; 0x08
    545a:	89 85       	ldd	r24, Y+9	; 0x09
    545c:	9a 85       	ldd	r25, Y+10	; 0x0a
    545e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5462:	dc 01       	movw	r26, r24
    5464:	cb 01       	movw	r24, r22
    5466:	9e 83       	std	Y+6, r25	; 0x06
    5468:	8d 83       	std	Y+5, r24	; 0x05
    546a:	8d 81       	ldd	r24, Y+5	; 0x05
    546c:	9e 81       	ldd	r25, Y+6	; 0x06
    546e:	9a 83       	std	Y+2, r25	; 0x02
    5470:	89 83       	std	Y+1, r24	; 0x01
    5472:	89 81       	ldd	r24, Y+1	; 0x01
    5474:	9a 81       	ldd	r25, Y+2	; 0x02
    5476:	01 97       	sbiw	r24, 0x01	; 1
    5478:	f1 f7       	brne	.-4      	; 0x5476 <PushButton_u8Button0+0x108>
    547a:	9a 83       	std	Y+2, r25	; 0x02
    547c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(25);
		if(DIO_u8PGetPinValue(PortB,Pin0)){
    547e:	81 e0       	ldi	r24, 0x01	; 1
    5480:	60 e0       	ldi	r22, 0x00	; 0
    5482:	0e 94 8f 1b 	call	0x371e	; 0x371e <DIO_u8PGetPinValue>
    5486:	88 23       	and	r24, r24
    5488:	19 f0       	breq	.+6      	; 0x5490 <PushButton_u8Button0+0x122>
			return 1;
    548a:	81 e0       	ldi	r24, 0x01	; 1
    548c:	8f 87       	std	Y+15, r24	; 0x0f
    548e:	01 c0       	rjmp	.+2      	; 0x5492 <PushButton_u8Button0+0x124>
		}
	}
	return 0;
    5490:	1f 86       	std	Y+15, r1	; 0x0f
    5492:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    5494:	2f 96       	adiw	r28, 0x0f	; 15
    5496:	0f b6       	in	r0, 0x3f	; 63
    5498:	f8 94       	cli
    549a:	de bf       	out	0x3e, r29	; 62
    549c:	0f be       	out	0x3f, r0	; 63
    549e:	cd bf       	out	0x3d, r28	; 61
    54a0:	cf 91       	pop	r28
    54a2:	df 91       	pop	r29
    54a4:	08 95       	ret

000054a6 <PushButton_u8Button1>:
*
* \Parameters (in) : None
* \Parameters (out): u8
* \Return value:   : 0 or 1
*******************************************************************************/
u8 PushButton_u8Button1(){
    54a6:	df 93       	push	r29
    54a8:	cf 93       	push	r28
    54aa:	cd b7       	in	r28, 0x3d	; 61
    54ac:	de b7       	in	r29, 0x3e	; 62
    54ae:	2f 97       	sbiw	r28, 0x0f	; 15
    54b0:	0f b6       	in	r0, 0x3f	; 63
    54b2:	f8 94       	cli
    54b4:	de bf       	out	0x3e, r29	; 62
    54b6:	0f be       	out	0x3f, r0	; 63
    54b8:	cd bf       	out	0x3d, r28	; 61
	DIO_vSetPinDirection(PortD, Pin6, Pin_InPut);
    54ba:	83 e0       	ldi	r24, 0x03	; 3
    54bc:	66 e0       	ldi	r22, 0x06	; 6
    54be:	40 e0       	ldi	r20, 0x00	; 0
    54c0:	0e 94 b1 19 	call	0x3362	; 0x3362 <DIO_vSetPinDirection>
	if(DIO_u8PGetPinValue(PortD,Pin6)){
    54c4:	83 e0       	ldi	r24, 0x03	; 3
    54c6:	66 e0       	ldi	r22, 0x06	; 6
    54c8:	0e 94 8f 1b 	call	0x371e	; 0x371e <DIO_u8PGetPinValue>
    54cc:	88 23       	and	r24, r24
    54ce:	09 f4       	brne	.+2      	; 0x54d2 <PushButton_u8Button1+0x2c>
    54d0:	7b c0       	rjmp	.+246    	; 0x55c8 <PushButton_u8Button1+0x122>
    54d2:	80 e0       	ldi	r24, 0x00	; 0
    54d4:	90 e0       	ldi	r25, 0x00	; 0
    54d6:	a8 ec       	ldi	r26, 0xC8	; 200
    54d8:	b1 e4       	ldi	r27, 0x41	; 65
    54da:	8b 87       	std	Y+11, r24	; 0x0b
    54dc:	9c 87       	std	Y+12, r25	; 0x0c
    54de:	ad 87       	std	Y+13, r26	; 0x0d
    54e0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    54e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    54e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    54e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    54e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    54ea:	20 e0       	ldi	r18, 0x00	; 0
    54ec:	30 e0       	ldi	r19, 0x00	; 0
    54ee:	4a e7       	ldi	r20, 0x7A	; 122
    54f0:	55 e4       	ldi	r21, 0x45	; 69
    54f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    54f6:	dc 01       	movw	r26, r24
    54f8:	cb 01       	movw	r24, r22
    54fa:	8f 83       	std	Y+7, r24	; 0x07
    54fc:	98 87       	std	Y+8, r25	; 0x08
    54fe:	a9 87       	std	Y+9, r26	; 0x09
    5500:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5502:	6f 81       	ldd	r22, Y+7	; 0x07
    5504:	78 85       	ldd	r23, Y+8	; 0x08
    5506:	89 85       	ldd	r24, Y+9	; 0x09
    5508:	9a 85       	ldd	r25, Y+10	; 0x0a
    550a:	20 e0       	ldi	r18, 0x00	; 0
    550c:	30 e0       	ldi	r19, 0x00	; 0
    550e:	40 e8       	ldi	r20, 0x80	; 128
    5510:	5f e3       	ldi	r21, 0x3F	; 63
    5512:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5516:	88 23       	and	r24, r24
    5518:	2c f4       	brge	.+10     	; 0x5524 <PushButton_u8Button1+0x7e>
		__ticks = 1;
    551a:	81 e0       	ldi	r24, 0x01	; 1
    551c:	90 e0       	ldi	r25, 0x00	; 0
    551e:	9e 83       	std	Y+6, r25	; 0x06
    5520:	8d 83       	std	Y+5, r24	; 0x05
    5522:	3f c0       	rjmp	.+126    	; 0x55a2 <PushButton_u8Button1+0xfc>
	else if (__tmp > 65535)
    5524:	6f 81       	ldd	r22, Y+7	; 0x07
    5526:	78 85       	ldd	r23, Y+8	; 0x08
    5528:	89 85       	ldd	r24, Y+9	; 0x09
    552a:	9a 85       	ldd	r25, Y+10	; 0x0a
    552c:	20 e0       	ldi	r18, 0x00	; 0
    552e:	3f ef       	ldi	r19, 0xFF	; 255
    5530:	4f e7       	ldi	r20, 0x7F	; 127
    5532:	57 e4       	ldi	r21, 0x47	; 71
    5534:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5538:	18 16       	cp	r1, r24
    553a:	4c f5       	brge	.+82     	; 0x558e <PushButton_u8Button1+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    553c:	6b 85       	ldd	r22, Y+11	; 0x0b
    553e:	7c 85       	ldd	r23, Y+12	; 0x0c
    5540:	8d 85       	ldd	r24, Y+13	; 0x0d
    5542:	9e 85       	ldd	r25, Y+14	; 0x0e
    5544:	20 e0       	ldi	r18, 0x00	; 0
    5546:	30 e0       	ldi	r19, 0x00	; 0
    5548:	40 e2       	ldi	r20, 0x20	; 32
    554a:	51 e4       	ldi	r21, 0x41	; 65
    554c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5550:	dc 01       	movw	r26, r24
    5552:	cb 01       	movw	r24, r22
    5554:	bc 01       	movw	r22, r24
    5556:	cd 01       	movw	r24, r26
    5558:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    555c:	dc 01       	movw	r26, r24
    555e:	cb 01       	movw	r24, r22
    5560:	9e 83       	std	Y+6, r25	; 0x06
    5562:	8d 83       	std	Y+5, r24	; 0x05
    5564:	0f c0       	rjmp	.+30     	; 0x5584 <PushButton_u8Button1+0xde>
    5566:	80 e9       	ldi	r24, 0x90	; 144
    5568:	91 e0       	ldi	r25, 0x01	; 1
    556a:	9c 83       	std	Y+4, r25	; 0x04
    556c:	8b 83       	std	Y+3, r24	; 0x03
    556e:	8b 81       	ldd	r24, Y+3	; 0x03
    5570:	9c 81       	ldd	r25, Y+4	; 0x04
    5572:	01 97       	sbiw	r24, 0x01	; 1
    5574:	f1 f7       	brne	.-4      	; 0x5572 <PushButton_u8Button1+0xcc>
    5576:	9c 83       	std	Y+4, r25	; 0x04
    5578:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    557a:	8d 81       	ldd	r24, Y+5	; 0x05
    557c:	9e 81       	ldd	r25, Y+6	; 0x06
    557e:	01 97       	sbiw	r24, 0x01	; 1
    5580:	9e 83       	std	Y+6, r25	; 0x06
    5582:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5584:	8d 81       	ldd	r24, Y+5	; 0x05
    5586:	9e 81       	ldd	r25, Y+6	; 0x06
    5588:	00 97       	sbiw	r24, 0x00	; 0
    558a:	69 f7       	brne	.-38     	; 0x5566 <PushButton_u8Button1+0xc0>
    558c:	14 c0       	rjmp	.+40     	; 0x55b6 <PushButton_u8Button1+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    558e:	6f 81       	ldd	r22, Y+7	; 0x07
    5590:	78 85       	ldd	r23, Y+8	; 0x08
    5592:	89 85       	ldd	r24, Y+9	; 0x09
    5594:	9a 85       	ldd	r25, Y+10	; 0x0a
    5596:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    559a:	dc 01       	movw	r26, r24
    559c:	cb 01       	movw	r24, r22
    559e:	9e 83       	std	Y+6, r25	; 0x06
    55a0:	8d 83       	std	Y+5, r24	; 0x05
    55a2:	8d 81       	ldd	r24, Y+5	; 0x05
    55a4:	9e 81       	ldd	r25, Y+6	; 0x06
    55a6:	9a 83       	std	Y+2, r25	; 0x02
    55a8:	89 83       	std	Y+1, r24	; 0x01
    55aa:	89 81       	ldd	r24, Y+1	; 0x01
    55ac:	9a 81       	ldd	r25, Y+2	; 0x02
    55ae:	01 97       	sbiw	r24, 0x01	; 1
    55b0:	f1 f7       	brne	.-4      	; 0x55ae <PushButton_u8Button1+0x108>
    55b2:	9a 83       	std	Y+2, r25	; 0x02
    55b4:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(25);
		if(DIO_u8PGetPinValue(PortD,Pin6)){
    55b6:	83 e0       	ldi	r24, 0x03	; 3
    55b8:	66 e0       	ldi	r22, 0x06	; 6
    55ba:	0e 94 8f 1b 	call	0x371e	; 0x371e <DIO_u8PGetPinValue>
    55be:	88 23       	and	r24, r24
    55c0:	19 f0       	breq	.+6      	; 0x55c8 <PushButton_u8Button1+0x122>
			return 1;
    55c2:	81 e0       	ldi	r24, 0x01	; 1
    55c4:	8f 87       	std	Y+15, r24	; 0x0f
    55c6:	01 c0       	rjmp	.+2      	; 0x55ca <PushButton_u8Button1+0x124>
		}
	}
	return 0;
    55c8:	1f 86       	std	Y+15, r1	; 0x0f
    55ca:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    55cc:	2f 96       	adiw	r28, 0x0f	; 15
    55ce:	0f b6       	in	r0, 0x3f	; 63
    55d0:	f8 94       	cli
    55d2:	de bf       	out	0x3e, r29	; 62
    55d4:	0f be       	out	0x3f, r0	; 63
    55d6:	cd bf       	out	0x3d, r28	; 61
    55d8:	cf 91       	pop	r28
    55da:	df 91       	pop	r29
    55dc:	08 95       	ret

000055de <PushButton_u8Button2>:
*
* \Parameters (in) : None
* \Parameters (out): u8
* \Return value:   : 0 or 1
*******************************************************************************/
u8 PushButton_u8Button2(){
    55de:	df 93       	push	r29
    55e0:	cf 93       	push	r28
    55e2:	cd b7       	in	r28, 0x3d	; 61
    55e4:	de b7       	in	r29, 0x3e	; 62
    55e6:	2f 97       	sbiw	r28, 0x0f	; 15
    55e8:	0f b6       	in	r0, 0x3f	; 63
    55ea:	f8 94       	cli
    55ec:	de bf       	out	0x3e, r29	; 62
    55ee:	0f be       	out	0x3f, r0	; 63
    55f0:	cd bf       	out	0x3d, r28	; 61
	DIO_vSetPinDirection(PortD, Pin2, Pin_InPut);
    55f2:	83 e0       	ldi	r24, 0x03	; 3
    55f4:	62 e0       	ldi	r22, 0x02	; 2
    55f6:	40 e0       	ldi	r20, 0x00	; 0
    55f8:	0e 94 b1 19 	call	0x3362	; 0x3362 <DIO_vSetPinDirection>
	if(DIO_u8PGetPinValue(PortD,Pin2)){
    55fc:	83 e0       	ldi	r24, 0x03	; 3
    55fe:	62 e0       	ldi	r22, 0x02	; 2
    5600:	0e 94 8f 1b 	call	0x371e	; 0x371e <DIO_u8PGetPinValue>
    5604:	88 23       	and	r24, r24
    5606:	09 f4       	brne	.+2      	; 0x560a <PushButton_u8Button2+0x2c>
    5608:	7b c0       	rjmp	.+246    	; 0x5700 <PushButton_u8Button2+0x122>
    560a:	80 e0       	ldi	r24, 0x00	; 0
    560c:	90 e0       	ldi	r25, 0x00	; 0
    560e:	a8 ec       	ldi	r26, 0xC8	; 200
    5610:	b1 e4       	ldi	r27, 0x41	; 65
    5612:	8b 87       	std	Y+11, r24	; 0x0b
    5614:	9c 87       	std	Y+12, r25	; 0x0c
    5616:	ad 87       	std	Y+13, r26	; 0x0d
    5618:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    561a:	6b 85       	ldd	r22, Y+11	; 0x0b
    561c:	7c 85       	ldd	r23, Y+12	; 0x0c
    561e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5620:	9e 85       	ldd	r25, Y+14	; 0x0e
    5622:	20 e0       	ldi	r18, 0x00	; 0
    5624:	30 e0       	ldi	r19, 0x00	; 0
    5626:	4a e7       	ldi	r20, 0x7A	; 122
    5628:	55 e4       	ldi	r21, 0x45	; 69
    562a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    562e:	dc 01       	movw	r26, r24
    5630:	cb 01       	movw	r24, r22
    5632:	8f 83       	std	Y+7, r24	; 0x07
    5634:	98 87       	std	Y+8, r25	; 0x08
    5636:	a9 87       	std	Y+9, r26	; 0x09
    5638:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    563a:	6f 81       	ldd	r22, Y+7	; 0x07
    563c:	78 85       	ldd	r23, Y+8	; 0x08
    563e:	89 85       	ldd	r24, Y+9	; 0x09
    5640:	9a 85       	ldd	r25, Y+10	; 0x0a
    5642:	20 e0       	ldi	r18, 0x00	; 0
    5644:	30 e0       	ldi	r19, 0x00	; 0
    5646:	40 e8       	ldi	r20, 0x80	; 128
    5648:	5f e3       	ldi	r21, 0x3F	; 63
    564a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    564e:	88 23       	and	r24, r24
    5650:	2c f4       	brge	.+10     	; 0x565c <PushButton_u8Button2+0x7e>
		__ticks = 1;
    5652:	81 e0       	ldi	r24, 0x01	; 1
    5654:	90 e0       	ldi	r25, 0x00	; 0
    5656:	9e 83       	std	Y+6, r25	; 0x06
    5658:	8d 83       	std	Y+5, r24	; 0x05
    565a:	3f c0       	rjmp	.+126    	; 0x56da <PushButton_u8Button2+0xfc>
	else if (__tmp > 65535)
    565c:	6f 81       	ldd	r22, Y+7	; 0x07
    565e:	78 85       	ldd	r23, Y+8	; 0x08
    5660:	89 85       	ldd	r24, Y+9	; 0x09
    5662:	9a 85       	ldd	r25, Y+10	; 0x0a
    5664:	20 e0       	ldi	r18, 0x00	; 0
    5666:	3f ef       	ldi	r19, 0xFF	; 255
    5668:	4f e7       	ldi	r20, 0x7F	; 127
    566a:	57 e4       	ldi	r21, 0x47	; 71
    566c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5670:	18 16       	cp	r1, r24
    5672:	4c f5       	brge	.+82     	; 0x56c6 <PushButton_u8Button2+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5674:	6b 85       	ldd	r22, Y+11	; 0x0b
    5676:	7c 85       	ldd	r23, Y+12	; 0x0c
    5678:	8d 85       	ldd	r24, Y+13	; 0x0d
    567a:	9e 85       	ldd	r25, Y+14	; 0x0e
    567c:	20 e0       	ldi	r18, 0x00	; 0
    567e:	30 e0       	ldi	r19, 0x00	; 0
    5680:	40 e2       	ldi	r20, 0x20	; 32
    5682:	51 e4       	ldi	r21, 0x41	; 65
    5684:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5688:	dc 01       	movw	r26, r24
    568a:	cb 01       	movw	r24, r22
    568c:	bc 01       	movw	r22, r24
    568e:	cd 01       	movw	r24, r26
    5690:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5694:	dc 01       	movw	r26, r24
    5696:	cb 01       	movw	r24, r22
    5698:	9e 83       	std	Y+6, r25	; 0x06
    569a:	8d 83       	std	Y+5, r24	; 0x05
    569c:	0f c0       	rjmp	.+30     	; 0x56bc <PushButton_u8Button2+0xde>
    569e:	80 e9       	ldi	r24, 0x90	; 144
    56a0:	91 e0       	ldi	r25, 0x01	; 1
    56a2:	9c 83       	std	Y+4, r25	; 0x04
    56a4:	8b 83       	std	Y+3, r24	; 0x03
    56a6:	8b 81       	ldd	r24, Y+3	; 0x03
    56a8:	9c 81       	ldd	r25, Y+4	; 0x04
    56aa:	01 97       	sbiw	r24, 0x01	; 1
    56ac:	f1 f7       	brne	.-4      	; 0x56aa <PushButton_u8Button2+0xcc>
    56ae:	9c 83       	std	Y+4, r25	; 0x04
    56b0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    56b2:	8d 81       	ldd	r24, Y+5	; 0x05
    56b4:	9e 81       	ldd	r25, Y+6	; 0x06
    56b6:	01 97       	sbiw	r24, 0x01	; 1
    56b8:	9e 83       	std	Y+6, r25	; 0x06
    56ba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    56bc:	8d 81       	ldd	r24, Y+5	; 0x05
    56be:	9e 81       	ldd	r25, Y+6	; 0x06
    56c0:	00 97       	sbiw	r24, 0x00	; 0
    56c2:	69 f7       	brne	.-38     	; 0x569e <PushButton_u8Button2+0xc0>
    56c4:	14 c0       	rjmp	.+40     	; 0x56ee <PushButton_u8Button2+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    56c6:	6f 81       	ldd	r22, Y+7	; 0x07
    56c8:	78 85       	ldd	r23, Y+8	; 0x08
    56ca:	89 85       	ldd	r24, Y+9	; 0x09
    56cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    56ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    56d2:	dc 01       	movw	r26, r24
    56d4:	cb 01       	movw	r24, r22
    56d6:	9e 83       	std	Y+6, r25	; 0x06
    56d8:	8d 83       	std	Y+5, r24	; 0x05
    56da:	8d 81       	ldd	r24, Y+5	; 0x05
    56dc:	9e 81       	ldd	r25, Y+6	; 0x06
    56de:	9a 83       	std	Y+2, r25	; 0x02
    56e0:	89 83       	std	Y+1, r24	; 0x01
    56e2:	89 81       	ldd	r24, Y+1	; 0x01
    56e4:	9a 81       	ldd	r25, Y+2	; 0x02
    56e6:	01 97       	sbiw	r24, 0x01	; 1
    56e8:	f1 f7       	brne	.-4      	; 0x56e6 <PushButton_u8Button2+0x108>
    56ea:	9a 83       	std	Y+2, r25	; 0x02
    56ec:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(25);
		if(DIO_u8PGetPinValue(PortD,Pin2)){
    56ee:	83 e0       	ldi	r24, 0x03	; 3
    56f0:	62 e0       	ldi	r22, 0x02	; 2
    56f2:	0e 94 8f 1b 	call	0x371e	; 0x371e <DIO_u8PGetPinValue>
    56f6:	88 23       	and	r24, r24
    56f8:	19 f0       	breq	.+6      	; 0x5700 <PushButton_u8Button2+0x122>
			return 1;
    56fa:	81 e0       	ldi	r24, 0x01	; 1
    56fc:	8f 87       	std	Y+15, r24	; 0x0f
    56fe:	01 c0       	rjmp	.+2      	; 0x5702 <PushButton_u8Button2+0x124>
		}
	}
	return 0;
    5700:	1f 86       	std	Y+15, r1	; 0x0f
    5702:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    5704:	2f 96       	adiw	r28, 0x0f	; 15
    5706:	0f b6       	in	r0, 0x3f	; 63
    5708:	f8 94       	cli
    570a:	de bf       	out	0x3e, r29	; 62
    570c:	0f be       	out	0x3f, r0	; 63
    570e:	cd bf       	out	0x3d, r28	; 61
    5710:	cf 91       	pop	r28
    5712:	df 91       	pop	r29
    5714:	08 95       	ret

00005716 <PushButton_u8Button1LonPress>:
*
* \Parameters (in) : None
* \Parameters (out): u8
* \Return value:   : 0 or 1
*******************************************************************************/
u8 PushButton_u8Button1LonPress(){
    5716:	df 93       	push	r29
    5718:	cf 93       	push	r28
    571a:	cd b7       	in	r28, 0x3d	; 61
    571c:	de b7       	in	r29, 0x3e	; 62
    571e:	2f 97       	sbiw	r28, 0x0f	; 15
    5720:	0f b6       	in	r0, 0x3f	; 63
    5722:	f8 94       	cli
    5724:	de bf       	out	0x3e, r29	; 62
    5726:	0f be       	out	0x3f, r0	; 63
    5728:	cd bf       	out	0x3d, r28	; 61
	if(PushButton_u8Button1()){
    572a:	0e 94 53 2a 	call	0x54a6	; 0x54a6 <PushButton_u8Button1>
    572e:	88 23       	and	r24, r24
    5730:	09 f4       	brne	.+2      	; 0x5734 <PushButton_u8Button1LonPress+0x1e>
    5732:	7b c0       	rjmp	.+246    	; 0x582a <PushButton_u8Button1LonPress+0x114>
    5734:	72 c0       	rjmp	.+228    	; 0x581a <PushButton_u8Button1LonPress+0x104>
		while(PushButton_u8Button1()){
    5736:	80 e0       	ldi	r24, 0x00	; 0
    5738:	90 e0       	ldi	r25, 0x00	; 0
    573a:	a0 e2       	ldi	r26, 0x20	; 32
    573c:	b1 e4       	ldi	r27, 0x41	; 65
    573e:	8b 87       	std	Y+11, r24	; 0x0b
    5740:	9c 87       	std	Y+12, r25	; 0x0c
    5742:	ad 87       	std	Y+13, r26	; 0x0d
    5744:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5746:	6b 85       	ldd	r22, Y+11	; 0x0b
    5748:	7c 85       	ldd	r23, Y+12	; 0x0c
    574a:	8d 85       	ldd	r24, Y+13	; 0x0d
    574c:	9e 85       	ldd	r25, Y+14	; 0x0e
    574e:	20 e0       	ldi	r18, 0x00	; 0
    5750:	30 e0       	ldi	r19, 0x00	; 0
    5752:	4a e7       	ldi	r20, 0x7A	; 122
    5754:	55 e4       	ldi	r21, 0x45	; 69
    5756:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    575a:	dc 01       	movw	r26, r24
    575c:	cb 01       	movw	r24, r22
    575e:	8f 83       	std	Y+7, r24	; 0x07
    5760:	98 87       	std	Y+8, r25	; 0x08
    5762:	a9 87       	std	Y+9, r26	; 0x09
    5764:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5766:	6f 81       	ldd	r22, Y+7	; 0x07
    5768:	78 85       	ldd	r23, Y+8	; 0x08
    576a:	89 85       	ldd	r24, Y+9	; 0x09
    576c:	9a 85       	ldd	r25, Y+10	; 0x0a
    576e:	20 e0       	ldi	r18, 0x00	; 0
    5770:	30 e0       	ldi	r19, 0x00	; 0
    5772:	40 e8       	ldi	r20, 0x80	; 128
    5774:	5f e3       	ldi	r21, 0x3F	; 63
    5776:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    577a:	88 23       	and	r24, r24
    577c:	2c f4       	brge	.+10     	; 0x5788 <PushButton_u8Button1LonPress+0x72>
		__ticks = 1;
    577e:	81 e0       	ldi	r24, 0x01	; 1
    5780:	90 e0       	ldi	r25, 0x00	; 0
    5782:	9e 83       	std	Y+6, r25	; 0x06
    5784:	8d 83       	std	Y+5, r24	; 0x05
    5786:	3f c0       	rjmp	.+126    	; 0x5806 <PushButton_u8Button1LonPress+0xf0>
	else if (__tmp > 65535)
    5788:	6f 81       	ldd	r22, Y+7	; 0x07
    578a:	78 85       	ldd	r23, Y+8	; 0x08
    578c:	89 85       	ldd	r24, Y+9	; 0x09
    578e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5790:	20 e0       	ldi	r18, 0x00	; 0
    5792:	3f ef       	ldi	r19, 0xFF	; 255
    5794:	4f e7       	ldi	r20, 0x7F	; 127
    5796:	57 e4       	ldi	r21, 0x47	; 71
    5798:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    579c:	18 16       	cp	r1, r24
    579e:	4c f5       	brge	.+82     	; 0x57f2 <PushButton_u8Button1LonPress+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    57a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    57a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    57a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    57a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    57a8:	20 e0       	ldi	r18, 0x00	; 0
    57aa:	30 e0       	ldi	r19, 0x00	; 0
    57ac:	40 e2       	ldi	r20, 0x20	; 32
    57ae:	51 e4       	ldi	r21, 0x41	; 65
    57b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    57b4:	dc 01       	movw	r26, r24
    57b6:	cb 01       	movw	r24, r22
    57b8:	bc 01       	movw	r22, r24
    57ba:	cd 01       	movw	r24, r26
    57bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57c0:	dc 01       	movw	r26, r24
    57c2:	cb 01       	movw	r24, r22
    57c4:	9e 83       	std	Y+6, r25	; 0x06
    57c6:	8d 83       	std	Y+5, r24	; 0x05
    57c8:	0f c0       	rjmp	.+30     	; 0x57e8 <PushButton_u8Button1LonPress+0xd2>
    57ca:	80 e9       	ldi	r24, 0x90	; 144
    57cc:	91 e0       	ldi	r25, 0x01	; 1
    57ce:	9c 83       	std	Y+4, r25	; 0x04
    57d0:	8b 83       	std	Y+3, r24	; 0x03
    57d2:	8b 81       	ldd	r24, Y+3	; 0x03
    57d4:	9c 81       	ldd	r25, Y+4	; 0x04
    57d6:	01 97       	sbiw	r24, 0x01	; 1
    57d8:	f1 f7       	brne	.-4      	; 0x57d6 <PushButton_u8Button1LonPress+0xc0>
    57da:	9c 83       	std	Y+4, r25	; 0x04
    57dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    57de:	8d 81       	ldd	r24, Y+5	; 0x05
    57e0:	9e 81       	ldd	r25, Y+6	; 0x06
    57e2:	01 97       	sbiw	r24, 0x01	; 1
    57e4:	9e 83       	std	Y+6, r25	; 0x06
    57e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    57e8:	8d 81       	ldd	r24, Y+5	; 0x05
    57ea:	9e 81       	ldd	r25, Y+6	; 0x06
    57ec:	00 97       	sbiw	r24, 0x00	; 0
    57ee:	69 f7       	brne	.-38     	; 0x57ca <PushButton_u8Button1LonPress+0xb4>
    57f0:	14 c0       	rjmp	.+40     	; 0x581a <PushButton_u8Button1LonPress+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    57f2:	6f 81       	ldd	r22, Y+7	; 0x07
    57f4:	78 85       	ldd	r23, Y+8	; 0x08
    57f6:	89 85       	ldd	r24, Y+9	; 0x09
    57f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    57fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57fe:	dc 01       	movw	r26, r24
    5800:	cb 01       	movw	r24, r22
    5802:	9e 83       	std	Y+6, r25	; 0x06
    5804:	8d 83       	std	Y+5, r24	; 0x05
    5806:	8d 81       	ldd	r24, Y+5	; 0x05
    5808:	9e 81       	ldd	r25, Y+6	; 0x06
    580a:	9a 83       	std	Y+2, r25	; 0x02
    580c:	89 83       	std	Y+1, r24	; 0x01
    580e:	89 81       	ldd	r24, Y+1	; 0x01
    5810:	9a 81       	ldd	r25, Y+2	; 0x02
    5812:	01 97       	sbiw	r24, 0x01	; 1
    5814:	f1 f7       	brne	.-4      	; 0x5812 <PushButton_u8Button1LonPress+0xfc>
    5816:	9a 83       	std	Y+2, r25	; 0x02
    5818:	89 83       	std	Y+1, r24	; 0x01
    581a:	0e 94 53 2a 	call	0x54a6	; 0x54a6 <PushButton_u8Button1>
    581e:	88 23       	and	r24, r24
    5820:	09 f0       	breq	.+2      	; 0x5824 <PushButton_u8Button1LonPress+0x10e>
    5822:	89 cf       	rjmp	.-238    	; 0x5736 <PushButton_u8Button1LonPress+0x20>
			_delay_ms(10);
		}
		return 1;
    5824:	81 e0       	ldi	r24, 0x01	; 1
    5826:	8f 87       	std	Y+15, r24	; 0x0f
    5828:	01 c0       	rjmp	.+2      	; 0x582c <PushButton_u8Button1LonPress+0x116>
	}
	else{
		return 0;
    582a:	1f 86       	std	Y+15, r1	; 0x0f
    582c:	8f 85       	ldd	r24, Y+15	; 0x0f
	}
}
    582e:	2f 96       	adiw	r28, 0x0f	; 15
    5830:	0f b6       	in	r0, 0x3f	; 63
    5832:	f8 94       	cli
    5834:	de bf       	out	0x3e, r29	; 62
    5836:	0f be       	out	0x3f, r0	; 63
    5838:	cd bf       	out	0x3d, r28	; 61
    583a:	cf 91       	pop	r28
    583c:	df 91       	pop	r29
    583e:	08 95       	ret

00005840 <PushButton_u8Button2OneSec>:
*
* \Parameters (in) : None
* \Parameters (out): u8
* \Return value:   : 0 or 1
*******************************************************************************/
u8 PushButton_u8Button2OneSec(){
    5840:	df 93       	push	r29
    5842:	cf 93       	push	r28
    5844:	cd b7       	in	r28, 0x3d	; 61
    5846:	de b7       	in	r29, 0x3e	; 62
    5848:	60 97       	sbiw	r28, 0x10	; 16
    584a:	0f b6       	in	r0, 0x3f	; 63
    584c:	f8 94       	cli
    584e:	de bf       	out	0x3e, r29	; 62
    5850:	0f be       	out	0x3f, r0	; 63
    5852:	cd bf       	out	0x3d, r28	; 61
	u8 Delay=0;
    5854:	1f 86       	std	Y+15, r1	; 0x0f
    5856:	75 c0       	rjmp	.+234    	; 0x5942 <PushButton_u8Button2OneSec+0x102>
	while(PushButton_u8Button2()){
    5858:	80 e0       	ldi	r24, 0x00	; 0
    585a:	90 e0       	ldi	r25, 0x00	; 0
    585c:	a0 e2       	ldi	r26, 0x20	; 32
    585e:	b1 e4       	ldi	r27, 0x41	; 65
    5860:	8b 87       	std	Y+11, r24	; 0x0b
    5862:	9c 87       	std	Y+12, r25	; 0x0c
    5864:	ad 87       	std	Y+13, r26	; 0x0d
    5866:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5868:	6b 85       	ldd	r22, Y+11	; 0x0b
    586a:	7c 85       	ldd	r23, Y+12	; 0x0c
    586c:	8d 85       	ldd	r24, Y+13	; 0x0d
    586e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5870:	20 e0       	ldi	r18, 0x00	; 0
    5872:	30 e0       	ldi	r19, 0x00	; 0
    5874:	4a e7       	ldi	r20, 0x7A	; 122
    5876:	55 e4       	ldi	r21, 0x45	; 69
    5878:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    587c:	dc 01       	movw	r26, r24
    587e:	cb 01       	movw	r24, r22
    5880:	8f 83       	std	Y+7, r24	; 0x07
    5882:	98 87       	std	Y+8, r25	; 0x08
    5884:	a9 87       	std	Y+9, r26	; 0x09
    5886:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5888:	6f 81       	ldd	r22, Y+7	; 0x07
    588a:	78 85       	ldd	r23, Y+8	; 0x08
    588c:	89 85       	ldd	r24, Y+9	; 0x09
    588e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5890:	20 e0       	ldi	r18, 0x00	; 0
    5892:	30 e0       	ldi	r19, 0x00	; 0
    5894:	40 e8       	ldi	r20, 0x80	; 128
    5896:	5f e3       	ldi	r21, 0x3F	; 63
    5898:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    589c:	88 23       	and	r24, r24
    589e:	2c f4       	brge	.+10     	; 0x58aa <PushButton_u8Button2OneSec+0x6a>
		__ticks = 1;
    58a0:	81 e0       	ldi	r24, 0x01	; 1
    58a2:	90 e0       	ldi	r25, 0x00	; 0
    58a4:	9e 83       	std	Y+6, r25	; 0x06
    58a6:	8d 83       	std	Y+5, r24	; 0x05
    58a8:	3f c0       	rjmp	.+126    	; 0x5928 <PushButton_u8Button2OneSec+0xe8>
	else if (__tmp > 65535)
    58aa:	6f 81       	ldd	r22, Y+7	; 0x07
    58ac:	78 85       	ldd	r23, Y+8	; 0x08
    58ae:	89 85       	ldd	r24, Y+9	; 0x09
    58b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    58b2:	20 e0       	ldi	r18, 0x00	; 0
    58b4:	3f ef       	ldi	r19, 0xFF	; 255
    58b6:	4f e7       	ldi	r20, 0x7F	; 127
    58b8:	57 e4       	ldi	r21, 0x47	; 71
    58ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    58be:	18 16       	cp	r1, r24
    58c0:	4c f5       	brge	.+82     	; 0x5914 <PushButton_u8Button2OneSec+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    58c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    58c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    58c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    58c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    58ca:	20 e0       	ldi	r18, 0x00	; 0
    58cc:	30 e0       	ldi	r19, 0x00	; 0
    58ce:	40 e2       	ldi	r20, 0x20	; 32
    58d0:	51 e4       	ldi	r21, 0x41	; 65
    58d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    58d6:	dc 01       	movw	r26, r24
    58d8:	cb 01       	movw	r24, r22
    58da:	bc 01       	movw	r22, r24
    58dc:	cd 01       	movw	r24, r26
    58de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    58e2:	dc 01       	movw	r26, r24
    58e4:	cb 01       	movw	r24, r22
    58e6:	9e 83       	std	Y+6, r25	; 0x06
    58e8:	8d 83       	std	Y+5, r24	; 0x05
    58ea:	0f c0       	rjmp	.+30     	; 0x590a <PushButton_u8Button2OneSec+0xca>
    58ec:	80 e9       	ldi	r24, 0x90	; 144
    58ee:	91 e0       	ldi	r25, 0x01	; 1
    58f0:	9c 83       	std	Y+4, r25	; 0x04
    58f2:	8b 83       	std	Y+3, r24	; 0x03
    58f4:	8b 81       	ldd	r24, Y+3	; 0x03
    58f6:	9c 81       	ldd	r25, Y+4	; 0x04
    58f8:	01 97       	sbiw	r24, 0x01	; 1
    58fa:	f1 f7       	brne	.-4      	; 0x58f8 <PushButton_u8Button2OneSec+0xb8>
    58fc:	9c 83       	std	Y+4, r25	; 0x04
    58fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5900:	8d 81       	ldd	r24, Y+5	; 0x05
    5902:	9e 81       	ldd	r25, Y+6	; 0x06
    5904:	01 97       	sbiw	r24, 0x01	; 1
    5906:	9e 83       	std	Y+6, r25	; 0x06
    5908:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    590a:	8d 81       	ldd	r24, Y+5	; 0x05
    590c:	9e 81       	ldd	r25, Y+6	; 0x06
    590e:	00 97       	sbiw	r24, 0x00	; 0
    5910:	69 f7       	brne	.-38     	; 0x58ec <PushButton_u8Button2OneSec+0xac>
    5912:	14 c0       	rjmp	.+40     	; 0x593c <PushButton_u8Button2OneSec+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5914:	6f 81       	ldd	r22, Y+7	; 0x07
    5916:	78 85       	ldd	r23, Y+8	; 0x08
    5918:	89 85       	ldd	r24, Y+9	; 0x09
    591a:	9a 85       	ldd	r25, Y+10	; 0x0a
    591c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5920:	dc 01       	movw	r26, r24
    5922:	cb 01       	movw	r24, r22
    5924:	9e 83       	std	Y+6, r25	; 0x06
    5926:	8d 83       	std	Y+5, r24	; 0x05
    5928:	8d 81       	ldd	r24, Y+5	; 0x05
    592a:	9e 81       	ldd	r25, Y+6	; 0x06
    592c:	9a 83       	std	Y+2, r25	; 0x02
    592e:	89 83       	std	Y+1, r24	; 0x01
    5930:	89 81       	ldd	r24, Y+1	; 0x01
    5932:	9a 81       	ldd	r25, Y+2	; 0x02
    5934:	01 97       	sbiw	r24, 0x01	; 1
    5936:	f1 f7       	brne	.-4      	; 0x5934 <PushButton_u8Button2OneSec+0xf4>
    5938:	9a 83       	std	Y+2, r25	; 0x02
    593a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		Delay++;
    593c:	8f 85       	ldd	r24, Y+15	; 0x0f
    593e:	8f 5f       	subi	r24, 0xFF	; 255
    5940:	8f 87       	std	Y+15, r24	; 0x0f
* \Parameters (out): u8
* \Return value:   : 0 or 1
*******************************************************************************/
u8 PushButton_u8Button2OneSec(){
	u8 Delay=0;
	while(PushButton_u8Button2()){
    5942:	0e 94 ef 2a 	call	0x55de	; 0x55de <PushButton_u8Button2>
    5946:	88 23       	and	r24, r24
    5948:	09 f0       	breq	.+2      	; 0x594c <PushButton_u8Button2OneSec+0x10c>
    594a:	86 cf       	rjmp	.-244    	; 0x5858 <PushButton_u8Button2OneSec+0x18>
		_delay_ms(10);
		Delay++;
	}
	if(Delay>29){
    594c:	8f 85       	ldd	r24, Y+15	; 0x0f
    594e:	8e 31       	cpi	r24, 0x1E	; 30
    5950:	18 f0       	brcs	.+6      	; 0x5958 <PushButton_u8Button2OneSec+0x118>
		return 1;
    5952:	81 e0       	ldi	r24, 0x01	; 1
    5954:	88 8b       	std	Y+16, r24	; 0x10
    5956:	01 c0       	rjmp	.+2      	; 0x595a <PushButton_u8Button2OneSec+0x11a>
	}
	else{
		return 0;
    5958:	18 8a       	std	Y+16, r1	; 0x10
    595a:	88 89       	ldd	r24, Y+16	; 0x10
	}
}
    595c:	60 96       	adiw	r28, 0x10	; 16
    595e:	0f b6       	in	r0, 0x3f	; 63
    5960:	f8 94       	cli
    5962:	de bf       	out	0x3e, r29	; 62
    5964:	0f be       	out	0x3f, r0	; 63
    5966:	cd bf       	out	0x3d, r28	; 61
    5968:	cf 91       	pop	r28
    596a:	df 91       	pop	r29
    596c:	08 95       	ret

0000596e <SPI_vInit>:
 */
#include "SPI.h"

void(*Sptr)(void)='\0';

void SPI_vInit(){
    596e:	df 93       	push	r29
    5970:	cf 93       	push	r28
    5972:	cd b7       	in	r28, 0x3d	; 61
    5974:	de b7       	in	r29, 0x3e	; 62
		CLR_BIT(DDRB,4);
		CLR_BIT(DDRB,5);
		SET_BIT(DDRB,6);
		CLR_BIT(DDRB,7);
	#elif SPIMode==SPIMaster
		SPCR=0b00110100;
    5976:	ed e2       	ldi	r30, 0x2D	; 45
    5978:	f0 e0       	ldi	r31, 0x00	; 0
    597a:	84 e3       	ldi	r24, 0x34	; 52
    597c:	80 83       	st	Z, r24
		CLR_BIT(SPSR,0);
    597e:	ae e2       	ldi	r26, 0x2E	; 46
    5980:	b0 e0       	ldi	r27, 0x00	; 0
    5982:	ee e2       	ldi	r30, 0x2E	; 46
    5984:	f0 e0       	ldi	r31, 0x00	; 0
    5986:	80 81       	ld	r24, Z
    5988:	8e 7f       	andi	r24, 0xFE	; 254
    598a:	8c 93       	st	X, r24
		SET_BIT(DDRB,4);
    598c:	a7 e3       	ldi	r26, 0x37	; 55
    598e:	b0 e0       	ldi	r27, 0x00	; 0
    5990:	e7 e3       	ldi	r30, 0x37	; 55
    5992:	f0 e0       	ldi	r31, 0x00	; 0
    5994:	80 81       	ld	r24, Z
    5996:	80 61       	ori	r24, 0x10	; 16
    5998:	8c 93       	st	X, r24
		SET_BIT(DDRB,5);
    599a:	a7 e3       	ldi	r26, 0x37	; 55
    599c:	b0 e0       	ldi	r27, 0x00	; 0
    599e:	e7 e3       	ldi	r30, 0x37	; 55
    59a0:	f0 e0       	ldi	r31, 0x00	; 0
    59a2:	80 81       	ld	r24, Z
    59a4:	80 62       	ori	r24, 0x20	; 32
    59a6:	8c 93       	st	X, r24
		CLR_BIT(DDRB,6);
    59a8:	a7 e3       	ldi	r26, 0x37	; 55
    59aa:	b0 e0       	ldi	r27, 0x00	; 0
    59ac:	e7 e3       	ldi	r30, 0x37	; 55
    59ae:	f0 e0       	ldi	r31, 0x00	; 0
    59b0:	80 81       	ld	r24, Z
    59b2:	8f 7b       	andi	r24, 0xBF	; 191
    59b4:	8c 93       	st	X, r24
		SET_BIT(DDRB,7);
    59b6:	a7 e3       	ldi	r26, 0x37	; 55
    59b8:	b0 e0       	ldi	r27, 0x00	; 0
    59ba:	e7 e3       	ldi	r30, 0x37	; 55
    59bc:	f0 e0       	ldi	r31, 0x00	; 0
    59be:	80 81       	ld	r24, Z
    59c0:	80 68       	ori	r24, 0x80	; 128
    59c2:	8c 93       	st	X, r24

		SET_BIT(SPCR,6);
    59c4:	ad e2       	ldi	r26, 0x2D	; 45
    59c6:	b0 e0       	ldi	r27, 0x00	; 0
    59c8:	ed e2       	ldi	r30, 0x2D	; 45
    59ca:	f0 e0       	ldi	r31, 0x00	; 0
    59cc:	80 81       	ld	r24, Z
    59ce:	80 64       	ori	r24, 0x40	; 64
    59d0:	8c 93       	st	X, r24
		CLR_BIT(DDRB,6);
		SET_BIT(DDRB,7);
	#endif
#endif

}
    59d2:	cf 91       	pop	r28
    59d4:	df 91       	pop	r29
    59d6:	08 95       	ret

000059d8 <SPI_vMasterWrite>:
void SPI_vMasterWrite(u8 Loc_WriteData){
    59d8:	df 93       	push	r29
    59da:	cf 93       	push	r28
    59dc:	0f 92       	push	r0
    59de:	cd b7       	in	r28, 0x3d	; 61
    59e0:	de b7       	in	r29, 0x3e	; 62
    59e2:	89 83       	std	Y+1, r24	; 0x01
	SPDR=Loc_WriteData;
    59e4:	ef e2       	ldi	r30, 0x2F	; 47
    59e6:	f0 e0       	ldi	r31, 0x00	; 0
    59e8:	89 81       	ldd	r24, Y+1	; 0x01
    59ea:	80 83       	st	Z, r24
	while(!GET_BIT(SPSR,7));
    59ec:	ee e2       	ldi	r30, 0x2E	; 46
    59ee:	f0 e0       	ldi	r31, 0x00	; 0
    59f0:	80 81       	ld	r24, Z
    59f2:	88 23       	and	r24, r24
    59f4:	dc f7       	brge	.-10     	; 0x59ec <SPI_vMasterWrite+0x14>
}
    59f6:	0f 90       	pop	r0
    59f8:	cf 91       	pop	r28
    59fa:	df 91       	pop	r29
    59fc:	08 95       	ret

000059fe <SPI_vMasterReadWrite>:

void SPI_vMasterReadWrite(u8 Loc_WriteData,u8 *Loc_ReadData){
    59fe:	df 93       	push	r29
    5a00:	cf 93       	push	r28
    5a02:	00 d0       	rcall	.+0      	; 0x5a04 <SPI_vMasterReadWrite+0x6>
    5a04:	0f 92       	push	r0
    5a06:	cd b7       	in	r28, 0x3d	; 61
    5a08:	de b7       	in	r29, 0x3e	; 62
    5a0a:	89 83       	std	Y+1, r24	; 0x01
    5a0c:	7b 83       	std	Y+3, r23	; 0x03
    5a0e:	6a 83       	std	Y+2, r22	; 0x02
	SPDR=Loc_WriteData;
    5a10:	ef e2       	ldi	r30, 0x2F	; 47
    5a12:	f0 e0       	ldi	r31, 0x00	; 0
    5a14:	89 81       	ldd	r24, Y+1	; 0x01
    5a16:	80 83       	st	Z, r24
	while(!GET_BIT(SPSR,7));
    5a18:	ee e2       	ldi	r30, 0x2E	; 46
    5a1a:	f0 e0       	ldi	r31, 0x00	; 0
    5a1c:	80 81       	ld	r24, Z
    5a1e:	88 23       	and	r24, r24
    5a20:	dc f7       	brge	.-10     	; 0x5a18 <SPI_vMasterReadWrite+0x1a>
	*Loc_ReadData = SPDR;
    5a22:	ef e2       	ldi	r30, 0x2F	; 47
    5a24:	f0 e0       	ldi	r31, 0x00	; 0
    5a26:	80 81       	ld	r24, Z
    5a28:	ea 81       	ldd	r30, Y+2	; 0x02
    5a2a:	fb 81       	ldd	r31, Y+3	; 0x03
    5a2c:	80 83       	st	Z, r24
}
    5a2e:	0f 90       	pop	r0
    5a30:	0f 90       	pop	r0
    5a32:	0f 90       	pop	r0
    5a34:	cf 91       	pop	r28
    5a36:	df 91       	pop	r29
    5a38:	08 95       	ret

00005a3a <SPI_vSlaveRead>:

void SPI_vSlaveRead(u8 *Loc_ReadData){
    5a3a:	df 93       	push	r29
    5a3c:	cf 93       	push	r28
    5a3e:	00 d0       	rcall	.+0      	; 0x5a40 <SPI_vSlaveRead+0x6>
    5a40:	cd b7       	in	r28, 0x3d	; 61
    5a42:	de b7       	in	r29, 0x3e	; 62
    5a44:	9a 83       	std	Y+2, r25	; 0x02
    5a46:	89 83       	std	Y+1, r24	; 0x01
	while(!GET_BIT(SPSR,7));
    5a48:	ee e2       	ldi	r30, 0x2E	; 46
    5a4a:	f0 e0       	ldi	r31, 0x00	; 0
    5a4c:	80 81       	ld	r24, Z
    5a4e:	88 23       	and	r24, r24
    5a50:	dc f7       	brge	.-10     	; 0x5a48 <SPI_vSlaveRead+0xe>
	*Loc_ReadData = SPDR;
    5a52:	ef e2       	ldi	r30, 0x2F	; 47
    5a54:	f0 e0       	ldi	r31, 0x00	; 0
    5a56:	80 81       	ld	r24, Z
    5a58:	e9 81       	ldd	r30, Y+1	; 0x01
    5a5a:	fa 81       	ldd	r31, Y+2	; 0x02
    5a5c:	80 83       	st	Z, r24
}
    5a5e:	0f 90       	pop	r0
    5a60:	0f 90       	pop	r0
    5a62:	cf 91       	pop	r28
    5a64:	df 91       	pop	r29
    5a66:	08 95       	ret

00005a68 <SPI_vTransferCompleteInterruptEnable>:
void SPI_vTransferCompleteInterruptEnable(void(*ptr)(void)){
    5a68:	df 93       	push	r29
    5a6a:	cf 93       	push	r28
    5a6c:	00 d0       	rcall	.+0      	; 0x5a6e <SPI_vTransferCompleteInterruptEnable+0x6>
    5a6e:	cd b7       	in	r28, 0x3d	; 61
    5a70:	de b7       	in	r29, 0x3e	; 62
    5a72:	9a 83       	std	Y+2, r25	; 0x02
    5a74:	89 83       	std	Y+1, r24	; 0x01
	if(ptr!='\0'){
    5a76:	89 81       	ldd	r24, Y+1	; 0x01
    5a78:	9a 81       	ldd	r25, Y+2	; 0x02
    5a7a:	00 97       	sbiw	r24, 0x00	; 0
    5a7c:	31 f0       	breq	.+12     	; 0x5a8a <SPI_vTransferCompleteInterruptEnable+0x22>
		Sptr=ptr;
    5a7e:	89 81       	ldd	r24, Y+1	; 0x01
    5a80:	9a 81       	ldd	r25, Y+2	; 0x02
    5a82:	90 93 cf 00 	sts	0x00CF, r25
    5a86:	80 93 ce 00 	sts	0x00CE, r24
	}
}
    5a8a:	0f 90       	pop	r0
    5a8c:	0f 90       	pop	r0
    5a8e:	cf 91       	pop	r28
    5a90:	df 91       	pop	r29
    5a92:	08 95       	ret

00005a94 <__vector_12>:
ISR(SPI_STC_vect){
    5a94:	1f 92       	push	r1
    5a96:	0f 92       	push	r0
    5a98:	0f b6       	in	r0, 0x3f	; 63
    5a9a:	0f 92       	push	r0
    5a9c:	11 24       	eor	r1, r1
    5a9e:	2f 93       	push	r18
    5aa0:	3f 93       	push	r19
    5aa2:	4f 93       	push	r20
    5aa4:	5f 93       	push	r21
    5aa6:	6f 93       	push	r22
    5aa8:	7f 93       	push	r23
    5aaa:	8f 93       	push	r24
    5aac:	9f 93       	push	r25
    5aae:	af 93       	push	r26
    5ab0:	bf 93       	push	r27
    5ab2:	ef 93       	push	r30
    5ab4:	ff 93       	push	r31
    5ab6:	df 93       	push	r29
    5ab8:	cf 93       	push	r28
    5aba:	cd b7       	in	r28, 0x3d	; 61
    5abc:	de b7       	in	r29, 0x3e	; 62
	if(Sptr!='\0'){
    5abe:	80 91 ce 00 	lds	r24, 0x00CE
    5ac2:	90 91 cf 00 	lds	r25, 0x00CF
    5ac6:	00 97       	sbiw	r24, 0x00	; 0
    5ac8:	29 f0       	breq	.+10     	; 0x5ad4 <__vector_12+0x40>
		Sptr();
    5aca:	e0 91 ce 00 	lds	r30, 0x00CE
    5ace:	f0 91 cf 00 	lds	r31, 0x00CF
    5ad2:	09 95       	icall
	}
}
    5ad4:	cf 91       	pop	r28
    5ad6:	df 91       	pop	r29
    5ad8:	ff 91       	pop	r31
    5ada:	ef 91       	pop	r30
    5adc:	bf 91       	pop	r27
    5ade:	af 91       	pop	r26
    5ae0:	9f 91       	pop	r25
    5ae2:	8f 91       	pop	r24
    5ae4:	7f 91       	pop	r23
    5ae6:	6f 91       	pop	r22
    5ae8:	5f 91       	pop	r21
    5aea:	4f 91       	pop	r20
    5aec:	3f 91       	pop	r19
    5aee:	2f 91       	pop	r18
    5af0:	0f 90       	pop	r0
    5af2:	0f be       	out	0x3f, r0	; 63
    5af4:	0f 90       	pop	r0
    5af6:	1f 90       	pop	r1
    5af8:	18 95       	reti

00005afa <Timer0_vInit>:
 *      Author: a7med
 */
#include "Timer0.h"
void(*Tptr1)(void)='\0';
void(*Tptr2)(void)='\0';
void Timer0_vInit(){
    5afa:	df 93       	push	r29
    5afc:	cf 93       	push	r28
    5afe:	cd b7       	in	r28, 0x3d	; 61
    5b00:	de b7       	in	r29, 0x3e	; 62
#if Timer0_Mode==T0NormalMode
	TCCR0= 0x00|Timer0Prescaler;

#elif Timer0_Mode==T0CTCMode
	TCCR0=0x08|Timer0Prescaler;
    5b02:	e3 e5       	ldi	r30, 0x53	; 83
    5b04:	f0 e0       	ldi	r31, 0x00	; 0
    5b06:	8b e0       	ldi	r24, 0x0B	; 11
    5b08:	80 83       	st	Z, r24
#elif Timer0_Mode==T0PWMFastMode
	TCCR0= 0x44|Timer0Prescaler;
#elif Timer0_Mode==T0PWMPhaseCorrectMode
	TCCR0= 0x40|Timer0Prescaler;
#endif
}
    5b0a:	cf 91       	pop	r28
    5b0c:	df 91       	pop	r29
    5b0e:	08 95       	ret

00005b10 <Timer0_vEnableCompareInterrupt>:
void Timer0_vEnableCompareInterrupt(){
    5b10:	df 93       	push	r29
    5b12:	cf 93       	push	r28
    5b14:	cd b7       	in	r28, 0x3d	; 61
    5b16:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,1);
    5b18:	a9 e5       	ldi	r26, 0x59	; 89
    5b1a:	b0 e0       	ldi	r27, 0x00	; 0
    5b1c:	e9 e5       	ldi	r30, 0x59	; 89
    5b1e:	f0 e0       	ldi	r31, 0x00	; 0
    5b20:	80 81       	ld	r24, Z
    5b22:	82 60       	ori	r24, 0x02	; 2
    5b24:	8c 93       	st	X, r24
}
    5b26:	cf 91       	pop	r28
    5b28:	df 91       	pop	r29
    5b2a:	08 95       	ret

00005b2c <Timer0_vEnableOverflowInterrupt>:
void Timer0_vEnableOverflowInterrupt(){
    5b2c:	df 93       	push	r29
    5b2e:	cf 93       	push	r28
    5b30:	cd b7       	in	r28, 0x3d	; 61
    5b32:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,0);
    5b34:	a9 e5       	ldi	r26, 0x59	; 89
    5b36:	b0 e0       	ldi	r27, 0x00	; 0
    5b38:	e9 e5       	ldi	r30, 0x59	; 89
    5b3a:	f0 e0       	ldi	r31, 0x00	; 0
    5b3c:	80 81       	ld	r24, Z
    5b3e:	81 60       	ori	r24, 0x01	; 1
    5b40:	8c 93       	st	X, r24
}
    5b42:	cf 91       	pop	r28
    5b44:	df 91       	pop	r29
    5b46:	08 95       	ret

00005b48 <Timer0_u8ReadCompareFlag>:
u8 Timer0_u8ReadCompareFlag(){
    5b48:	df 93       	push	r29
    5b4a:	cf 93       	push	r28
    5b4c:	cd b7       	in	r28, 0x3d	; 61
    5b4e:	de b7       	in	r29, 0x3e	; 62
	return GET_BIT(TIFR,1);
    5b50:	e8 e5       	ldi	r30, 0x58	; 88
    5b52:	f0 e0       	ldi	r31, 0x00	; 0
    5b54:	80 81       	ld	r24, Z
    5b56:	86 95       	lsr	r24
    5b58:	81 70       	andi	r24, 0x01	; 1
}
    5b5a:	cf 91       	pop	r28
    5b5c:	df 91       	pop	r29
    5b5e:	08 95       	ret

00005b60 <Timer0_u8ReadOverflowFlag>:
u8 Timer0_u8ReadOverflowFlag(){
    5b60:	df 93       	push	r29
    5b62:	cf 93       	push	r28
    5b64:	cd b7       	in	r28, 0x3d	; 61
    5b66:	de b7       	in	r29, 0x3e	; 62
	return GET_BIT(TIFR,0);
    5b68:	e8 e5       	ldi	r30, 0x58	; 88
    5b6a:	f0 e0       	ldi	r31, 0x00	; 0
    5b6c:	80 81       	ld	r24, Z
    5b6e:	81 70       	andi	r24, 0x01	; 1
}
    5b70:	cf 91       	pop	r28
    5b72:	df 91       	pop	r29
    5b74:	08 95       	ret

00005b76 <Timer0_vCounterRegister>:
void Timer0_vCounterRegister(u8 Loc_u8CounterVal){
    5b76:	df 93       	push	r29
    5b78:	cf 93       	push	r28
    5b7a:	0f 92       	push	r0
    5b7c:	cd b7       	in	r28, 0x3d	; 61
    5b7e:	de b7       	in	r29, 0x3e	; 62
    5b80:	89 83       	std	Y+1, r24	; 0x01
	TCNT0= Loc_u8CounterVal;
    5b82:	e2 e5       	ldi	r30, 0x52	; 82
    5b84:	f0 e0       	ldi	r31, 0x00	; 0
    5b86:	89 81       	ldd	r24, Y+1	; 0x01
    5b88:	80 83       	st	Z, r24
}
    5b8a:	0f 90       	pop	r0
    5b8c:	cf 91       	pop	r28
    5b8e:	df 91       	pop	r29
    5b90:	08 95       	ret

00005b92 <Timer0_vCompareRegister>:
void Timer0_vCompareRegister(u8 Loc_u8CompareVal){
    5b92:	df 93       	push	r29
    5b94:	cf 93       	push	r28
    5b96:	0f 92       	push	r0
    5b98:	cd b7       	in	r28, 0x3d	; 61
    5b9a:	de b7       	in	r29, 0x3e	; 62
    5b9c:	89 83       	std	Y+1, r24	; 0x01
	OCR0=Loc_u8CompareVal;
    5b9e:	ec e5       	ldi	r30, 0x5C	; 92
    5ba0:	f0 e0       	ldi	r31, 0x00	; 0
    5ba2:	89 81       	ldd	r24, Y+1	; 0x01
    5ba4:	80 83       	st	Z, r24
}
    5ba6:	0f 90       	pop	r0
    5ba8:	cf 91       	pop	r28
    5baa:	df 91       	pop	r29
    5bac:	08 95       	ret

00005bae <Timer0_vCompareCallBack>:
void Timer0_vCompareCallBack(void(*ptr)(void)){
    5bae:	df 93       	push	r29
    5bb0:	cf 93       	push	r28
    5bb2:	00 d0       	rcall	.+0      	; 0x5bb4 <Timer0_vCompareCallBack+0x6>
    5bb4:	cd b7       	in	r28, 0x3d	; 61
    5bb6:	de b7       	in	r29, 0x3e	; 62
    5bb8:	9a 83       	std	Y+2, r25	; 0x02
    5bba:	89 83       	std	Y+1, r24	; 0x01
	if(ptr!='\0'){
    5bbc:	89 81       	ldd	r24, Y+1	; 0x01
    5bbe:	9a 81       	ldd	r25, Y+2	; 0x02
    5bc0:	00 97       	sbiw	r24, 0x00	; 0
    5bc2:	31 f0       	breq	.+12     	; 0x5bd0 <Timer0_vCompareCallBack+0x22>
		Tptr1=ptr;
    5bc4:	89 81       	ldd	r24, Y+1	; 0x01
    5bc6:	9a 81       	ldd	r25, Y+2	; 0x02
    5bc8:	90 93 d1 00 	sts	0x00D1, r25
    5bcc:	80 93 d0 00 	sts	0x00D0, r24
	}
}
    5bd0:	0f 90       	pop	r0
    5bd2:	0f 90       	pop	r0
    5bd4:	cf 91       	pop	r28
    5bd6:	df 91       	pop	r29
    5bd8:	08 95       	ret

00005bda <Timer0_vOverflowCallBack>:
void Timer0_vOverflowCallBack(void(*ptr)(void)){
    5bda:	df 93       	push	r29
    5bdc:	cf 93       	push	r28
    5bde:	00 d0       	rcall	.+0      	; 0x5be0 <Timer0_vOverflowCallBack+0x6>
    5be0:	cd b7       	in	r28, 0x3d	; 61
    5be2:	de b7       	in	r29, 0x3e	; 62
    5be4:	9a 83       	std	Y+2, r25	; 0x02
    5be6:	89 83       	std	Y+1, r24	; 0x01
	if(ptr!='\0'){
    5be8:	89 81       	ldd	r24, Y+1	; 0x01
    5bea:	9a 81       	ldd	r25, Y+2	; 0x02
    5bec:	00 97       	sbiw	r24, 0x00	; 0
    5bee:	31 f0       	breq	.+12     	; 0x5bfc <Timer0_vOverflowCallBack+0x22>
		Tptr2=ptr;
    5bf0:	89 81       	ldd	r24, Y+1	; 0x01
    5bf2:	9a 81       	ldd	r25, Y+2	; 0x02
    5bf4:	90 93 d3 00 	sts	0x00D3, r25
    5bf8:	80 93 d2 00 	sts	0x00D2, r24
	}
}
    5bfc:	0f 90       	pop	r0
    5bfe:	0f 90       	pop	r0
    5c00:	cf 91       	pop	r28
    5c02:	df 91       	pop	r29
    5c04:	08 95       	ret

00005c06 <__vector_10>:
ISR(TIMER0_COMP_vect){
    5c06:	1f 92       	push	r1
    5c08:	0f 92       	push	r0
    5c0a:	0f b6       	in	r0, 0x3f	; 63
    5c0c:	0f 92       	push	r0
    5c0e:	11 24       	eor	r1, r1
    5c10:	2f 93       	push	r18
    5c12:	3f 93       	push	r19
    5c14:	4f 93       	push	r20
    5c16:	5f 93       	push	r21
    5c18:	6f 93       	push	r22
    5c1a:	7f 93       	push	r23
    5c1c:	8f 93       	push	r24
    5c1e:	9f 93       	push	r25
    5c20:	af 93       	push	r26
    5c22:	bf 93       	push	r27
    5c24:	ef 93       	push	r30
    5c26:	ff 93       	push	r31
    5c28:	df 93       	push	r29
    5c2a:	cf 93       	push	r28
    5c2c:	cd b7       	in	r28, 0x3d	; 61
    5c2e:	de b7       	in	r29, 0x3e	; 62
	if(Tptr1!='\0'){
    5c30:	80 91 d0 00 	lds	r24, 0x00D0
    5c34:	90 91 d1 00 	lds	r25, 0x00D1
    5c38:	00 97       	sbiw	r24, 0x00	; 0
    5c3a:	29 f0       	breq	.+10     	; 0x5c46 <__vector_10+0x40>
		Tptr1();
    5c3c:	e0 91 d0 00 	lds	r30, 0x00D0
    5c40:	f0 91 d1 00 	lds	r31, 0x00D1
    5c44:	09 95       	icall
	}
}
    5c46:	cf 91       	pop	r28
    5c48:	df 91       	pop	r29
    5c4a:	ff 91       	pop	r31
    5c4c:	ef 91       	pop	r30
    5c4e:	bf 91       	pop	r27
    5c50:	af 91       	pop	r26
    5c52:	9f 91       	pop	r25
    5c54:	8f 91       	pop	r24
    5c56:	7f 91       	pop	r23
    5c58:	6f 91       	pop	r22
    5c5a:	5f 91       	pop	r21
    5c5c:	4f 91       	pop	r20
    5c5e:	3f 91       	pop	r19
    5c60:	2f 91       	pop	r18
    5c62:	0f 90       	pop	r0
    5c64:	0f be       	out	0x3f, r0	; 63
    5c66:	0f 90       	pop	r0
    5c68:	1f 90       	pop	r1
    5c6a:	18 95       	reti

00005c6c <__vector_11>:
ISR(TIMER0_OVF_vect){
    5c6c:	1f 92       	push	r1
    5c6e:	0f 92       	push	r0
    5c70:	0f b6       	in	r0, 0x3f	; 63
    5c72:	0f 92       	push	r0
    5c74:	11 24       	eor	r1, r1
    5c76:	2f 93       	push	r18
    5c78:	3f 93       	push	r19
    5c7a:	4f 93       	push	r20
    5c7c:	5f 93       	push	r21
    5c7e:	6f 93       	push	r22
    5c80:	7f 93       	push	r23
    5c82:	8f 93       	push	r24
    5c84:	9f 93       	push	r25
    5c86:	af 93       	push	r26
    5c88:	bf 93       	push	r27
    5c8a:	ef 93       	push	r30
    5c8c:	ff 93       	push	r31
    5c8e:	df 93       	push	r29
    5c90:	cf 93       	push	r28
    5c92:	cd b7       	in	r28, 0x3d	; 61
    5c94:	de b7       	in	r29, 0x3e	; 62
	if(Tptr2!='\0'){
    5c96:	80 91 d2 00 	lds	r24, 0x00D2
    5c9a:	90 91 d3 00 	lds	r25, 0x00D3
    5c9e:	00 97       	sbiw	r24, 0x00	; 0
    5ca0:	29 f0       	breq	.+10     	; 0x5cac <__vector_11+0x40>
		Tptr2();
    5ca2:	e0 91 d2 00 	lds	r30, 0x00D2
    5ca6:	f0 91 d3 00 	lds	r31, 0x00D3
    5caa:	09 95       	icall
	}
}
    5cac:	cf 91       	pop	r28
    5cae:	df 91       	pop	r29
    5cb0:	ff 91       	pop	r31
    5cb2:	ef 91       	pop	r30
    5cb4:	bf 91       	pop	r27
    5cb6:	af 91       	pop	r26
    5cb8:	9f 91       	pop	r25
    5cba:	8f 91       	pop	r24
    5cbc:	7f 91       	pop	r23
    5cbe:	6f 91       	pop	r22
    5cc0:	5f 91       	pop	r21
    5cc2:	4f 91       	pop	r20
    5cc4:	3f 91       	pop	r19
    5cc6:	2f 91       	pop	r18
    5cc8:	0f 90       	pop	r0
    5cca:	0f be       	out	0x3f, r0	; 63
    5ccc:	0f 90       	pop	r0
    5cce:	1f 90       	pop	r1
    5cd0:	18 95       	reti

00005cd2 <Timer1_vInit>:
u16 T1TimeOn;
u8 T1OnCounts;
u16 T1TimeTotal;
u8 T1TotalCounts;

void Timer1_vInit(){
    5cd2:	df 93       	push	r29
    5cd4:	cf 93       	push	r28
    5cd6:	cd b7       	in	r28, 0x3d	; 61
    5cd8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(DDRD,5); // Set Channel A Pin as OutPut
    5cda:	a1 e3       	ldi	r26, 0x31	; 49
    5cdc:	b0 e0       	ldi	r27, 0x00	; 0
    5cde:	e1 e3       	ldi	r30, 0x31	; 49
    5ce0:	f0 e0       	ldi	r31, 0x00	; 0
    5ce2:	80 81       	ld	r24, Z
    5ce4:	80 62       	ori	r24, 0x20	; 32
    5ce6:	8c 93       	st	X, r24
	SET_BIT(DDRD,4); // Set Channel B Pin as OutPut
    5ce8:	a1 e3       	ldi	r26, 0x31	; 49
    5cea:	b0 e0       	ldi	r27, 0x00	; 0
    5cec:	e1 e3       	ldi	r30, 0x31	; 49
    5cee:	f0 e0       	ldi	r31, 0x00	; 0
    5cf0:	80 81       	ld	r24, Z
    5cf2:	80 61       	ori	r24, 0x10	; 16
    5cf4:	8c 93       	st	X, r24
	TCCR1B=0b00011000|Timer1Prescaler;
#elif Timer1_Mode==T1FastPWMICR1
	TCCR1A=0b10100010;
	TCCR1B=0b00011000|Timer1Prescaler;   // prescaler 8Bits
#elif Timer1_Mode==T1PhaseCorrectPWMICR1
	TCCR1A=0b10100010;
    5cf6:	ef e4       	ldi	r30, 0x4F	; 79
    5cf8:	f0 e0       	ldi	r31, 0x00	; 0
    5cfa:	82 ea       	ldi	r24, 0xA2	; 162
    5cfc:	80 83       	st	Z, r24
	TCCR1B=0b00010000|Timer1Prescaler;
    5cfe:	ee e4       	ldi	r30, 0x4E	; 78
    5d00:	f0 e0       	ldi	r31, 0x00	; 0
    5d02:	85 e1       	ldi	r24, 0x15	; 21
    5d04:	80 83       	st	Z, r24
	Timer1_vOverflowCallBack(Timer1_vOverflowCounter);
	Timer1_vIputCaptureCallBack(Timer1_vInputCaptureCal);
	CLR_BIT(DDRD,6); // Make Pin6 PortD Input
	SET_BIT(TCCR1B,6);  // Capture At rising Edge
#endif
}
    5d06:	cf 91       	pop	r28
    5d08:	df 91       	pop	r29
    5d0a:	08 95       	ret

00005d0c <Timer1_vIputCaptureUnit>:
void Timer1_vIputCaptureUnit(u32* duty,u32* Frequency){
    5d0c:	ef 92       	push	r14
    5d0e:	ff 92       	push	r15
    5d10:	0f 93       	push	r16
    5d12:	1f 93       	push	r17
    5d14:	df 93       	push	r29
    5d16:	cf 93       	push	r28
    5d18:	00 d0       	rcall	.+0      	; 0x5d1a <Timer1_vIputCaptureUnit+0xe>
    5d1a:	00 d0       	rcall	.+0      	; 0x5d1c <Timer1_vIputCaptureUnit+0x10>
    5d1c:	cd b7       	in	r28, 0x3d	; 61
    5d1e:	de b7       	in	r29, 0x3e	; 62
    5d20:	9a 83       	std	Y+2, r25	; 0x02
    5d22:	89 83       	std	Y+1, r24	; 0x01
    5d24:	7c 83       	std	Y+4, r23	; 0x04
    5d26:	6b 83       	std	Y+3, r22	; 0x03
	if(T1Flag==3){
    5d28:	80 91 dc 00 	lds	r24, 0x00DC
    5d2c:	83 30       	cpi	r24, 0x03	; 3
    5d2e:	09 f0       	breq	.+2      	; 0x5d32 <Timer1_vIputCaptureUnit+0x26>
    5d30:	6f c0       	rjmp	.+222    	; 0x5e10 <Timer1_vIputCaptureUnit+0x104>
		*duty=(u32)(((T1TimeOn+(T1OnCounts*65536))*100)/(T1TimeTotal)+(T1TotalCounts*65536));
    5d32:	80 91 e4 00 	lds	r24, 0x00E4
    5d36:	90 91 e5 00 	lds	r25, 0x00E5
    5d3a:	9c 01       	movw	r18, r24
    5d3c:	40 e0       	ldi	r20, 0x00	; 0
    5d3e:	50 e0       	ldi	r21, 0x00	; 0
    5d40:	80 91 e8 00 	lds	r24, 0x00E8
    5d44:	88 2f       	mov	r24, r24
    5d46:	90 e0       	ldi	r25, 0x00	; 0
    5d48:	a0 e0       	ldi	r26, 0x00	; 0
    5d4a:	b0 e0       	ldi	r27, 0x00	; 0
    5d4c:	dc 01       	movw	r26, r24
    5d4e:	99 27       	eor	r25, r25
    5d50:	88 27       	eor	r24, r24
    5d52:	82 0f       	add	r24, r18
    5d54:	93 1f       	adc	r25, r19
    5d56:	a4 1f       	adc	r26, r20
    5d58:	b5 1f       	adc	r27, r21
    5d5a:	24 e6       	ldi	r18, 0x64	; 100
    5d5c:	30 e0       	ldi	r19, 0x00	; 0
    5d5e:	40 e0       	ldi	r20, 0x00	; 0
    5d60:	50 e0       	ldi	r21, 0x00	; 0
    5d62:	bc 01       	movw	r22, r24
    5d64:	cd 01       	movw	r24, r26
    5d66:	0e 94 e6 33 	call	0x67cc	; 0x67cc <__mulsi3>
    5d6a:	7b 01       	movw	r14, r22
    5d6c:	8c 01       	movw	r16, r24
    5d6e:	80 91 e6 00 	lds	r24, 0x00E6
    5d72:	90 91 e7 00 	lds	r25, 0x00E7
    5d76:	9c 01       	movw	r18, r24
    5d78:	40 e0       	ldi	r20, 0x00	; 0
    5d7a:	50 e0       	ldi	r21, 0x00	; 0
    5d7c:	c8 01       	movw	r24, r16
    5d7e:	b7 01       	movw	r22, r14
    5d80:	0e 94 38 34 	call	0x6870	; 0x6870 <__divmodsi4>
    5d84:	da 01       	movw	r26, r20
    5d86:	c9 01       	movw	r24, r18
    5d88:	9c 01       	movw	r18, r24
    5d8a:	ad 01       	movw	r20, r26
    5d8c:	80 91 e3 00 	lds	r24, 0x00E3
    5d90:	88 2f       	mov	r24, r24
    5d92:	90 e0       	ldi	r25, 0x00	; 0
    5d94:	a0 e0       	ldi	r26, 0x00	; 0
    5d96:	b0 e0       	ldi	r27, 0x00	; 0
    5d98:	dc 01       	movw	r26, r24
    5d9a:	99 27       	eor	r25, r25
    5d9c:	88 27       	eor	r24, r24
    5d9e:	82 0f       	add	r24, r18
    5da0:	93 1f       	adc	r25, r19
    5da2:	a4 1f       	adc	r26, r20
    5da4:	b5 1f       	adc	r27, r21
    5da6:	e9 81       	ldd	r30, Y+1	; 0x01
    5da8:	fa 81       	ldd	r31, Y+2	; 0x02
    5daa:	80 83       	st	Z, r24
    5dac:	91 83       	std	Z+1, r25	; 0x01
    5dae:	a2 83       	std	Z+2, r26	; 0x02
    5db0:	b3 83       	std	Z+3, r27	; 0x03
		*Frequency=(u32)(T1SystemFrequency/((T1TimeTotal+(T1TotalCounts*65536))*T1Prescaler));
    5db2:	80 91 e6 00 	lds	r24, 0x00E6
    5db6:	90 91 e7 00 	lds	r25, 0x00E7
    5dba:	9c 01       	movw	r18, r24
    5dbc:	40 e0       	ldi	r20, 0x00	; 0
    5dbe:	50 e0       	ldi	r21, 0x00	; 0
    5dc0:	80 91 e3 00 	lds	r24, 0x00E3
    5dc4:	88 2f       	mov	r24, r24
    5dc6:	90 e0       	ldi	r25, 0x00	; 0
    5dc8:	a0 e0       	ldi	r26, 0x00	; 0
    5dca:	b0 e0       	ldi	r27, 0x00	; 0
    5dcc:	dc 01       	movw	r26, r24
    5dce:	99 27       	eor	r25, r25
    5dd0:	88 27       	eor	r24, r24
    5dd2:	82 0f       	add	r24, r18
    5dd4:	93 1f       	adc	r25, r19
    5dd6:	a4 1f       	adc	r26, r20
    5dd8:	b5 1f       	adc	r27, r21
    5dda:	9c 01       	movw	r18, r24
    5ddc:	ad 01       	movw	r20, r26
    5dde:	01 2e       	mov	r0, r17
    5de0:	1a e0       	ldi	r17, 0x0A	; 10
    5de2:	22 0f       	add	r18, r18
    5de4:	33 1f       	adc	r19, r19
    5de6:	44 1f       	adc	r20, r20
    5de8:	55 1f       	adc	r21, r21
    5dea:	1a 95       	dec	r17
    5dec:	d1 f7       	brne	.-12     	; 0x5de2 <Timer1_vIputCaptureUnit+0xd6>
    5dee:	10 2d       	mov	r17, r0
    5df0:	80 e0       	ldi	r24, 0x00	; 0
    5df2:	94 e2       	ldi	r25, 0x24	; 36
    5df4:	a4 ef       	ldi	r26, 0xF4	; 244
    5df6:	b0 e0       	ldi	r27, 0x00	; 0
    5df8:	bc 01       	movw	r22, r24
    5dfa:	cd 01       	movw	r24, r26
    5dfc:	0e 94 38 34 	call	0x6870	; 0x6870 <__divmodsi4>
    5e00:	da 01       	movw	r26, r20
    5e02:	c9 01       	movw	r24, r18
    5e04:	eb 81       	ldd	r30, Y+3	; 0x03
    5e06:	fc 81       	ldd	r31, Y+4	; 0x04
    5e08:	80 83       	st	Z, r24
    5e0a:	91 83       	std	Z+1, r25	; 0x01
    5e0c:	a2 83       	std	Z+2, r26	; 0x02
    5e0e:	b3 83       	std	Z+3, r27	; 0x03
	}
}
    5e10:	0f 90       	pop	r0
    5e12:	0f 90       	pop	r0
    5e14:	0f 90       	pop	r0
    5e16:	0f 90       	pop	r0
    5e18:	cf 91       	pop	r28
    5e1a:	df 91       	pop	r29
    5e1c:	1f 91       	pop	r17
    5e1e:	0f 91       	pop	r16
    5e20:	ff 90       	pop	r15
    5e22:	ef 90       	pop	r14
    5e24:	08 95       	ret

00005e26 <Timer1_vOverflowCounter>:
void Timer1_vOverflowCounter(){
    5e26:	df 93       	push	r29
    5e28:	cf 93       	push	r28
    5e2a:	cd b7       	in	r28, 0x3d	; 61
    5e2c:	de b7       	in	r29, 0x3e	; 62
	T1Counter++;
    5e2e:	80 91 e9 00 	lds	r24, 0x00E9
    5e32:	8f 5f       	subi	r24, 0xFF	; 255
    5e34:	80 93 e9 00 	sts	0x00E9, r24
}
    5e38:	cf 91       	pop	r28
    5e3a:	df 91       	pop	r29
    5e3c:	08 95       	ret

00005e3e <Timer1_vInputCaptureCal>:
void Timer1_vInputCaptureCal(){
    5e3e:	df 93       	push	r29
    5e40:	cf 93       	push	r28
    5e42:	cd b7       	in	r28, 0x3d	; 61
    5e44:	de b7       	in	r29, 0x3e	; 62
	if(T1Flag==0){
    5e46:	80 91 dc 00 	lds	r24, 0x00DC
    5e4a:	88 23       	and	r24, r24
    5e4c:	f9 f4       	brne	.+62     	; 0x5e8c <Timer1_vInputCaptureCal+0x4e>
		Timer1_vPreLoadResgister(0);
    5e4e:	80 e0       	ldi	r24, 0x00	; 0
    5e50:	90 e0       	ldi	r25, 0x00	; 0
    5e52:	0e 94 17 30 	call	0x602e	; 0x602e <Timer1_vPreLoadResgister>
		T1TimeOn=0;
    5e56:	10 92 e5 00 	sts	0x00E5, r1
    5e5a:	10 92 e4 00 	sts	0x00E4, r1
		T1OnCounts=0;
    5e5e:	10 92 e8 00 	sts	0x00E8, r1
		T1TimeTotal=0;
    5e62:	10 92 e7 00 	sts	0x00E7, r1
    5e66:	10 92 e6 00 	sts	0x00E6, r1
		T1TotalCounts=0;
    5e6a:	10 92 e3 00 	sts	0x00E3, r1
		T1Counter=0;
    5e6e:	10 92 e9 00 	sts	0x00E9, r1
		CLR_BIT(TCCR1B,6);
    5e72:	ae e4       	ldi	r26, 0x4E	; 78
    5e74:	b0 e0       	ldi	r27, 0x00	; 0
    5e76:	ee e4       	ldi	r30, 0x4E	; 78
    5e78:	f0 e0       	ldi	r31, 0x00	; 0
    5e7a:	80 81       	ld	r24, Z
    5e7c:	8f 7b       	andi	r24, 0xBF	; 191
    5e7e:	8c 93       	st	X, r24
		T1Flag++;
    5e80:	80 91 dc 00 	lds	r24, 0x00DC
    5e84:	8f 5f       	subi	r24, 0xFF	; 255
    5e86:	80 93 dc 00 	sts	0x00DC, r24
    5e8a:	2e c0       	rjmp	.+92     	; 0x5ee8 <Timer1_vInputCaptureCal+0xaa>
	}
	else if(T1Flag==1){
    5e8c:	80 91 dc 00 	lds	r24, 0x00DC
    5e90:	81 30       	cpi	r24, 0x01	; 1
    5e92:	b9 f4       	brne	.+46     	; 0x5ec2 <Timer1_vInputCaptureCal+0x84>
		T1TimeOn=Timer1_vReadTCNT1();
    5e94:	0e 94 d7 2f 	call	0x5fae	; 0x5fae <Timer1_vReadTCNT1>
    5e98:	90 93 e5 00 	sts	0x00E5, r25
    5e9c:	80 93 e4 00 	sts	0x00E4, r24
		T1OnCounts=T1Counter;
    5ea0:	80 91 e9 00 	lds	r24, 0x00E9
    5ea4:	80 93 e8 00 	sts	0x00E8, r24
		SET_BIT(TCCR1B,6);
    5ea8:	ae e4       	ldi	r26, 0x4E	; 78
    5eaa:	b0 e0       	ldi	r27, 0x00	; 0
    5eac:	ee e4       	ldi	r30, 0x4E	; 78
    5eae:	f0 e0       	ldi	r31, 0x00	; 0
    5eb0:	80 81       	ld	r24, Z
    5eb2:	80 64       	ori	r24, 0x40	; 64
    5eb4:	8c 93       	st	X, r24
		T1Flag++;
    5eb6:	80 91 dc 00 	lds	r24, 0x00DC
    5eba:	8f 5f       	subi	r24, 0xFF	; 255
    5ebc:	80 93 dc 00 	sts	0x00DC, r24
    5ec0:	13 c0       	rjmp	.+38     	; 0x5ee8 <Timer1_vInputCaptureCal+0xaa>
	}
	else if(T1Flag==2){
    5ec2:	80 91 dc 00 	lds	r24, 0x00DC
    5ec6:	82 30       	cpi	r24, 0x02	; 2
    5ec8:	79 f4       	brne	.+30     	; 0x5ee8 <Timer1_vInputCaptureCal+0xaa>
		T1TimeTotal=Timer1_vReadTCNT1();
    5eca:	0e 94 d7 2f 	call	0x5fae	; 0x5fae <Timer1_vReadTCNT1>
    5ece:	90 93 e7 00 	sts	0x00E7, r25
    5ed2:	80 93 e6 00 	sts	0x00E6, r24
		T1TotalCounts=T1Counter;
    5ed6:	80 91 e9 00 	lds	r24, 0x00E9
    5eda:	80 93 e3 00 	sts	0x00E3, r24
		T1Flag++;
    5ede:	80 91 dc 00 	lds	r24, 0x00DC
    5ee2:	8f 5f       	subi	r24, 0xFF	; 255
    5ee4:	80 93 dc 00 	sts	0x00DC, r24
	}
}
    5ee8:	cf 91       	pop	r28
    5eea:	df 91       	pop	r29
    5eec:	08 95       	ret

00005eee <Timer1_vIputCaptureInterruptEnable>:
void Timer1_vIputCaptureInterruptEnable(){
    5eee:	df 93       	push	r29
    5ef0:	cf 93       	push	r28
    5ef2:	cd b7       	in	r28, 0x3d	; 61
    5ef4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,5);
    5ef6:	a9 e5       	ldi	r26, 0x59	; 89
    5ef8:	b0 e0       	ldi	r27, 0x00	; 0
    5efa:	e9 e5       	ldi	r30, 0x59	; 89
    5efc:	f0 e0       	ldi	r31, 0x00	; 0
    5efe:	80 81       	ld	r24, Z
    5f00:	80 62       	ori	r24, 0x20	; 32
    5f02:	8c 93       	st	X, r24
}
    5f04:	cf 91       	pop	r28
    5f06:	df 91       	pop	r29
    5f08:	08 95       	ret

00005f0a <Timer1_vCompareChannelAInterruptEnable>:
void Timer1_vCompareChannelAInterruptEnable(){
    5f0a:	df 93       	push	r29
    5f0c:	cf 93       	push	r28
    5f0e:	cd b7       	in	r28, 0x3d	; 61
    5f10:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,4);
    5f12:	a9 e5       	ldi	r26, 0x59	; 89
    5f14:	b0 e0       	ldi	r27, 0x00	; 0
    5f16:	e9 e5       	ldi	r30, 0x59	; 89
    5f18:	f0 e0       	ldi	r31, 0x00	; 0
    5f1a:	80 81       	ld	r24, Z
    5f1c:	80 61       	ori	r24, 0x10	; 16
    5f1e:	8c 93       	st	X, r24
}
    5f20:	cf 91       	pop	r28
    5f22:	df 91       	pop	r29
    5f24:	08 95       	ret

00005f26 <Timer1_vCompareChannelBInterruptEnable>:
void Timer1_vCompareChannelBInterruptEnable(){
    5f26:	df 93       	push	r29
    5f28:	cf 93       	push	r28
    5f2a:	cd b7       	in	r28, 0x3d	; 61
    5f2c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,3);
    5f2e:	a9 e5       	ldi	r26, 0x59	; 89
    5f30:	b0 e0       	ldi	r27, 0x00	; 0
    5f32:	e9 e5       	ldi	r30, 0x59	; 89
    5f34:	f0 e0       	ldi	r31, 0x00	; 0
    5f36:	80 81       	ld	r24, Z
    5f38:	88 60       	ori	r24, 0x08	; 8
    5f3a:	8c 93       	st	X, r24
}
    5f3c:	cf 91       	pop	r28
    5f3e:	df 91       	pop	r29
    5f40:	08 95       	ret

00005f42 <Timer1_vOverflowInterruptEnable>:
void Timer1_vOverflowInterruptEnable(){
    5f42:	df 93       	push	r29
    5f44:	cf 93       	push	r28
    5f46:	cd b7       	in	r28, 0x3d	; 61
    5f48:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,2);
    5f4a:	a9 e5       	ldi	r26, 0x59	; 89
    5f4c:	b0 e0       	ldi	r27, 0x00	; 0
    5f4e:	e9 e5       	ldi	r30, 0x59	; 89
    5f50:	f0 e0       	ldi	r31, 0x00	; 0
    5f52:	80 81       	ld	r24, Z
    5f54:	84 60       	ori	r24, 0x04	; 4
    5f56:	8c 93       	st	X, r24
}
    5f58:	cf 91       	pop	r28
    5f5a:	df 91       	pop	r29
    5f5c:	08 95       	ret

00005f5e <Timer1_vReadCompareChannelAFlag>:
u8 Timer1_vReadCompareChannelAFlag(){
    5f5e:	df 93       	push	r29
    5f60:	cf 93       	push	r28
    5f62:	cd b7       	in	r28, 0x3d	; 61
    5f64:	de b7       	in	r29, 0x3e	; 62
	return GET_BIT(TIFR,4);
    5f66:	e8 e5       	ldi	r30, 0x58	; 88
    5f68:	f0 e0       	ldi	r31, 0x00	; 0
    5f6a:	80 81       	ld	r24, Z
    5f6c:	82 95       	swap	r24
    5f6e:	8f 70       	andi	r24, 0x0F	; 15
    5f70:	81 70       	andi	r24, 0x01	; 1
}
    5f72:	cf 91       	pop	r28
    5f74:	df 91       	pop	r29
    5f76:	08 95       	ret

00005f78 <Timer1_vReadCompareChannelBFlag>:
u8 Timer1_vReadCompareChannelBFlag(){
    5f78:	df 93       	push	r29
    5f7a:	cf 93       	push	r28
    5f7c:	cd b7       	in	r28, 0x3d	; 61
    5f7e:	de b7       	in	r29, 0x3e	; 62
	return GET_BIT(TIFR,3);
    5f80:	e8 e5       	ldi	r30, 0x58	; 88
    5f82:	f0 e0       	ldi	r31, 0x00	; 0
    5f84:	80 81       	ld	r24, Z
    5f86:	86 95       	lsr	r24
    5f88:	86 95       	lsr	r24
    5f8a:	86 95       	lsr	r24
    5f8c:	81 70       	andi	r24, 0x01	; 1
}
    5f8e:	cf 91       	pop	r28
    5f90:	df 91       	pop	r29
    5f92:	08 95       	ret

00005f94 <Timer1_vReadOverflowFlag>:
u8 Timer1_vReadOverflowFlag(){
    5f94:	df 93       	push	r29
    5f96:	cf 93       	push	r28
    5f98:	cd b7       	in	r28, 0x3d	; 61
    5f9a:	de b7       	in	r29, 0x3e	; 62
	return GET_BIT(TIFR,2);
    5f9c:	e8 e5       	ldi	r30, 0x58	; 88
    5f9e:	f0 e0       	ldi	r31, 0x00	; 0
    5fa0:	80 81       	ld	r24, Z
    5fa2:	86 95       	lsr	r24
    5fa4:	86 95       	lsr	r24
    5fa6:	81 70       	andi	r24, 0x01	; 1
}
    5fa8:	cf 91       	pop	r28
    5faa:	df 91       	pop	r29
    5fac:	08 95       	ret

00005fae <Timer1_vReadTCNT1>:
u16 Timer1_vReadTCNT1(){
    5fae:	df 93       	push	r29
    5fb0:	cf 93       	push	r28
    5fb2:	00 d0       	rcall	.+0      	; 0x5fb4 <Timer1_vReadTCNT1+0x6>
    5fb4:	cd b7       	in	r28, 0x3d	; 61
    5fb6:	de b7       	in	r29, 0x3e	; 62
	u16 Read;
	Read=(((u16)TCNT1H)<<8);
    5fb8:	ed e4       	ldi	r30, 0x4D	; 77
    5fba:	f0 e0       	ldi	r31, 0x00	; 0
    5fbc:	80 81       	ld	r24, Z
    5fbe:	88 2f       	mov	r24, r24
    5fc0:	90 e0       	ldi	r25, 0x00	; 0
    5fc2:	98 2f       	mov	r25, r24
    5fc4:	88 27       	eor	r24, r24
    5fc6:	9a 83       	std	Y+2, r25	; 0x02
    5fc8:	89 83       	std	Y+1, r24	; 0x01
	Read=Read|((u16)TCNT1L);
    5fca:	ec e4       	ldi	r30, 0x4C	; 76
    5fcc:	f0 e0       	ldi	r31, 0x00	; 0
    5fce:	80 81       	ld	r24, Z
    5fd0:	28 2f       	mov	r18, r24
    5fd2:	30 e0       	ldi	r19, 0x00	; 0
    5fd4:	89 81       	ldd	r24, Y+1	; 0x01
    5fd6:	9a 81       	ldd	r25, Y+2	; 0x02
    5fd8:	82 2b       	or	r24, r18
    5fda:	93 2b       	or	r25, r19
    5fdc:	9a 83       	std	Y+2, r25	; 0x02
    5fde:	89 83       	std	Y+1, r24	; 0x01
	return Read;
    5fe0:	89 81       	ldd	r24, Y+1	; 0x01
    5fe2:	9a 81       	ldd	r25, Y+2	; 0x02
}
    5fe4:	0f 90       	pop	r0
    5fe6:	0f 90       	pop	r0
    5fe8:	cf 91       	pop	r28
    5fea:	df 91       	pop	r29
    5fec:	08 95       	ret

00005fee <Timer1_vReadInputCaptureRegister>:
u16 Timer1_vReadInputCaptureRegister(){
    5fee:	df 93       	push	r29
    5ff0:	cf 93       	push	r28
    5ff2:	00 d0       	rcall	.+0      	; 0x5ff4 <Timer1_vReadInputCaptureRegister+0x6>
    5ff4:	cd b7       	in	r28, 0x3d	; 61
    5ff6:	de b7       	in	r29, 0x3e	; 62
	u16 Read;
	Read=(((u16)ICR1H)<<8);
    5ff8:	e7 e4       	ldi	r30, 0x47	; 71
    5ffa:	f0 e0       	ldi	r31, 0x00	; 0
    5ffc:	80 81       	ld	r24, Z
    5ffe:	88 2f       	mov	r24, r24
    6000:	90 e0       	ldi	r25, 0x00	; 0
    6002:	98 2f       	mov	r25, r24
    6004:	88 27       	eor	r24, r24
    6006:	9a 83       	std	Y+2, r25	; 0x02
    6008:	89 83       	std	Y+1, r24	; 0x01
	Read=Read|((u16)ICR1L);
    600a:	e6 e4       	ldi	r30, 0x46	; 70
    600c:	f0 e0       	ldi	r31, 0x00	; 0
    600e:	80 81       	ld	r24, Z
    6010:	28 2f       	mov	r18, r24
    6012:	30 e0       	ldi	r19, 0x00	; 0
    6014:	89 81       	ldd	r24, Y+1	; 0x01
    6016:	9a 81       	ldd	r25, Y+2	; 0x02
    6018:	82 2b       	or	r24, r18
    601a:	93 2b       	or	r25, r19
    601c:	9a 83       	std	Y+2, r25	; 0x02
    601e:	89 83       	std	Y+1, r24	; 0x01
	return Read;
    6020:	89 81       	ldd	r24, Y+1	; 0x01
    6022:	9a 81       	ldd	r25, Y+2	; 0x02
}
    6024:	0f 90       	pop	r0
    6026:	0f 90       	pop	r0
    6028:	cf 91       	pop	r28
    602a:	df 91       	pop	r29
    602c:	08 95       	ret

0000602e <Timer1_vPreLoadResgister>:

void Timer1_vPreLoadResgister(u16 Loc_val){
    602e:	df 93       	push	r29
    6030:	cf 93       	push	r28
    6032:	00 d0       	rcall	.+0      	; 0x6034 <Timer1_vPreLoadResgister+0x6>
    6034:	cd b7       	in	r28, 0x3d	; 61
    6036:	de b7       	in	r29, 0x3e	; 62
    6038:	9a 83       	std	Y+2, r25	; 0x02
    603a:	89 83       	std	Y+1, r24	; 0x01
	TCNT1H=(Loc_val>>8);
    603c:	ed e4       	ldi	r30, 0x4D	; 77
    603e:	f0 e0       	ldi	r31, 0x00	; 0
    6040:	89 81       	ldd	r24, Y+1	; 0x01
    6042:	9a 81       	ldd	r25, Y+2	; 0x02
    6044:	89 2f       	mov	r24, r25
    6046:	99 27       	eor	r25, r25
    6048:	80 83       	st	Z, r24
	TCNT1L=Loc_val;
    604a:	ec e4       	ldi	r30, 0x4C	; 76
    604c:	f0 e0       	ldi	r31, 0x00	; 0
    604e:	89 81       	ldd	r24, Y+1	; 0x01
    6050:	80 83       	st	Z, r24
}
    6052:	0f 90       	pop	r0
    6054:	0f 90       	pop	r0
    6056:	cf 91       	pop	r28
    6058:	df 91       	pop	r29
    605a:	08 95       	ret

0000605c <Timer1_vChannelACopmareRegister>:
void Timer1_vChannelACopmareRegister(u16 Loc_val){
    605c:	df 93       	push	r29
    605e:	cf 93       	push	r28
    6060:	00 d0       	rcall	.+0      	; 0x6062 <Timer1_vChannelACopmareRegister+0x6>
    6062:	cd b7       	in	r28, 0x3d	; 61
    6064:	de b7       	in	r29, 0x3e	; 62
    6066:	9a 83       	std	Y+2, r25	; 0x02
    6068:	89 83       	std	Y+1, r24	; 0x01
	OCR1AH=(Loc_val>>8);
    606a:	eb e4       	ldi	r30, 0x4B	; 75
    606c:	f0 e0       	ldi	r31, 0x00	; 0
    606e:	89 81       	ldd	r24, Y+1	; 0x01
    6070:	9a 81       	ldd	r25, Y+2	; 0x02
    6072:	89 2f       	mov	r24, r25
    6074:	99 27       	eor	r25, r25
    6076:	80 83       	st	Z, r24
	OCR1AL=Loc_val;
    6078:	ea e4       	ldi	r30, 0x4A	; 74
    607a:	f0 e0       	ldi	r31, 0x00	; 0
    607c:	89 81       	ldd	r24, Y+1	; 0x01
    607e:	80 83       	st	Z, r24
}
    6080:	0f 90       	pop	r0
    6082:	0f 90       	pop	r0
    6084:	cf 91       	pop	r28
    6086:	df 91       	pop	r29
    6088:	08 95       	ret

0000608a <Timer1_vChannelBCopmareRegister>:
void Timer1_vChannelBCopmareRegister(u16 Loc_val){
    608a:	df 93       	push	r29
    608c:	cf 93       	push	r28
    608e:	00 d0       	rcall	.+0      	; 0x6090 <Timer1_vChannelBCopmareRegister+0x6>
    6090:	cd b7       	in	r28, 0x3d	; 61
    6092:	de b7       	in	r29, 0x3e	; 62
    6094:	9a 83       	std	Y+2, r25	; 0x02
    6096:	89 83       	std	Y+1, r24	; 0x01
	OCR1BH=(Loc_val>>8);
    6098:	e9 e4       	ldi	r30, 0x49	; 73
    609a:	f0 e0       	ldi	r31, 0x00	; 0
    609c:	89 81       	ldd	r24, Y+1	; 0x01
    609e:	9a 81       	ldd	r25, Y+2	; 0x02
    60a0:	89 2f       	mov	r24, r25
    60a2:	99 27       	eor	r25, r25
    60a4:	80 83       	st	Z, r24
	OCR1BL=Loc_val;
    60a6:	e8 e4       	ldi	r30, 0x48	; 72
    60a8:	f0 e0       	ldi	r31, 0x00	; 0
    60aa:	89 81       	ldd	r24, Y+1	; 0x01
    60ac:	80 83       	st	Z, r24
}
    60ae:	0f 90       	pop	r0
    60b0:	0f 90       	pop	r0
    60b2:	cf 91       	pop	r28
    60b4:	df 91       	pop	r29
    60b6:	08 95       	ret

000060b8 <Timer1_vOverflowCallBack>:
void Timer1_vOverflowCallBack(void(*ptr1)(void)){
    60b8:	df 93       	push	r29
    60ba:	cf 93       	push	r28
    60bc:	00 d0       	rcall	.+0      	; 0x60be <Timer1_vOverflowCallBack+0x6>
    60be:	cd b7       	in	r28, 0x3d	; 61
    60c0:	de b7       	in	r29, 0x3e	; 62
    60c2:	9a 83       	std	Y+2, r25	; 0x02
    60c4:	89 83       	std	Y+1, r24	; 0x01
	if(ptr1!='\0'){
    60c6:	89 81       	ldd	r24, Y+1	; 0x01
    60c8:	9a 81       	ldd	r25, Y+2	; 0x02
    60ca:	00 97       	sbiw	r24, 0x00	; 0
    60cc:	31 f0       	breq	.+12     	; 0x60da <Timer1_vOverflowCallBack+0x22>
		T1Ptr1=ptr1;
    60ce:	89 81       	ldd	r24, Y+1	; 0x01
    60d0:	9a 81       	ldd	r25, Y+2	; 0x02
    60d2:	90 93 d5 00 	sts	0x00D5, r25
    60d6:	80 93 d4 00 	sts	0x00D4, r24
	}
}
    60da:	0f 90       	pop	r0
    60dc:	0f 90       	pop	r0
    60de:	cf 91       	pop	r28
    60e0:	df 91       	pop	r29
    60e2:	08 95       	ret

000060e4 <Timer1_vChannelACompareCallBack>:
void Timer1_vChannelACompareCallBack(void(*ptr2)(void)){
    60e4:	df 93       	push	r29
    60e6:	cf 93       	push	r28
    60e8:	00 d0       	rcall	.+0      	; 0x60ea <Timer1_vChannelACompareCallBack+0x6>
    60ea:	cd b7       	in	r28, 0x3d	; 61
    60ec:	de b7       	in	r29, 0x3e	; 62
    60ee:	9a 83       	std	Y+2, r25	; 0x02
    60f0:	89 83       	std	Y+1, r24	; 0x01
	if(ptr2!='\0'){
    60f2:	89 81       	ldd	r24, Y+1	; 0x01
    60f4:	9a 81       	ldd	r25, Y+2	; 0x02
    60f6:	00 97       	sbiw	r24, 0x00	; 0
    60f8:	31 f0       	breq	.+12     	; 0x6106 <Timer1_vChannelACompareCallBack+0x22>
		T1Ptr2=ptr2;
    60fa:	89 81       	ldd	r24, Y+1	; 0x01
    60fc:	9a 81       	ldd	r25, Y+2	; 0x02
    60fe:	90 93 d7 00 	sts	0x00D7, r25
    6102:	80 93 d6 00 	sts	0x00D6, r24
	}
}
    6106:	0f 90       	pop	r0
    6108:	0f 90       	pop	r0
    610a:	cf 91       	pop	r28
    610c:	df 91       	pop	r29
    610e:	08 95       	ret

00006110 <Timer1_vChannelBCompareCallBack>:
void Timer1_vChannelBCompareCallBack(void(*ptr3)(void)){
    6110:	df 93       	push	r29
    6112:	cf 93       	push	r28
    6114:	00 d0       	rcall	.+0      	; 0x6116 <Timer1_vChannelBCompareCallBack+0x6>
    6116:	cd b7       	in	r28, 0x3d	; 61
    6118:	de b7       	in	r29, 0x3e	; 62
    611a:	9a 83       	std	Y+2, r25	; 0x02
    611c:	89 83       	std	Y+1, r24	; 0x01
	if(ptr3!='\0'){
    611e:	89 81       	ldd	r24, Y+1	; 0x01
    6120:	9a 81       	ldd	r25, Y+2	; 0x02
    6122:	00 97       	sbiw	r24, 0x00	; 0
    6124:	31 f0       	breq	.+12     	; 0x6132 <Timer1_vChannelBCompareCallBack+0x22>
		T1Ptr3=ptr3;
    6126:	89 81       	ldd	r24, Y+1	; 0x01
    6128:	9a 81       	ldd	r25, Y+2	; 0x02
    612a:	90 93 d9 00 	sts	0x00D9, r25
    612e:	80 93 d8 00 	sts	0x00D8, r24
	}
}
    6132:	0f 90       	pop	r0
    6134:	0f 90       	pop	r0
    6136:	cf 91       	pop	r28
    6138:	df 91       	pop	r29
    613a:	08 95       	ret

0000613c <Timer1_vIputCaptureCallBack>:
void Timer1_vIputCaptureCallBack(void(*ptr4)(void)){
    613c:	df 93       	push	r29
    613e:	cf 93       	push	r28
    6140:	00 d0       	rcall	.+0      	; 0x6142 <Timer1_vIputCaptureCallBack+0x6>
    6142:	cd b7       	in	r28, 0x3d	; 61
    6144:	de b7       	in	r29, 0x3e	; 62
    6146:	9a 83       	std	Y+2, r25	; 0x02
    6148:	89 83       	std	Y+1, r24	; 0x01
	if(ptr4!='\0'){
    614a:	89 81       	ldd	r24, Y+1	; 0x01
    614c:	9a 81       	ldd	r25, Y+2	; 0x02
    614e:	00 97       	sbiw	r24, 0x00	; 0
    6150:	31 f0       	breq	.+12     	; 0x615e <Timer1_vIputCaptureCallBack+0x22>
		T1Ptr4=ptr4;
    6152:	89 81       	ldd	r24, Y+1	; 0x01
    6154:	9a 81       	ldd	r25, Y+2	; 0x02
    6156:	90 93 db 00 	sts	0x00DB, r25
    615a:	80 93 da 00 	sts	0x00DA, r24
	}
}
    615e:	0f 90       	pop	r0
    6160:	0f 90       	pop	r0
    6162:	cf 91       	pop	r28
    6164:	df 91       	pop	r29
    6166:	08 95       	ret

00006168 <__vector_7>:
ISR(TIMER1_COMPA_vect){
    6168:	1f 92       	push	r1
    616a:	0f 92       	push	r0
    616c:	0f b6       	in	r0, 0x3f	; 63
    616e:	0f 92       	push	r0
    6170:	11 24       	eor	r1, r1
    6172:	2f 93       	push	r18
    6174:	3f 93       	push	r19
    6176:	4f 93       	push	r20
    6178:	5f 93       	push	r21
    617a:	6f 93       	push	r22
    617c:	7f 93       	push	r23
    617e:	8f 93       	push	r24
    6180:	9f 93       	push	r25
    6182:	af 93       	push	r26
    6184:	bf 93       	push	r27
    6186:	ef 93       	push	r30
    6188:	ff 93       	push	r31
    618a:	df 93       	push	r29
    618c:	cf 93       	push	r28
    618e:	cd b7       	in	r28, 0x3d	; 61
    6190:	de b7       	in	r29, 0x3e	; 62
	if(T1Ptr2!='\0'){
    6192:	80 91 d6 00 	lds	r24, 0x00D6
    6196:	90 91 d7 00 	lds	r25, 0x00D7
    619a:	00 97       	sbiw	r24, 0x00	; 0
    619c:	29 f0       	breq	.+10     	; 0x61a8 <__vector_7+0x40>
		T1Ptr2();
    619e:	e0 91 d6 00 	lds	r30, 0x00D6
    61a2:	f0 91 d7 00 	lds	r31, 0x00D7
    61a6:	09 95       	icall
	}
}
    61a8:	cf 91       	pop	r28
    61aa:	df 91       	pop	r29
    61ac:	ff 91       	pop	r31
    61ae:	ef 91       	pop	r30
    61b0:	bf 91       	pop	r27
    61b2:	af 91       	pop	r26
    61b4:	9f 91       	pop	r25
    61b6:	8f 91       	pop	r24
    61b8:	7f 91       	pop	r23
    61ba:	6f 91       	pop	r22
    61bc:	5f 91       	pop	r21
    61be:	4f 91       	pop	r20
    61c0:	3f 91       	pop	r19
    61c2:	2f 91       	pop	r18
    61c4:	0f 90       	pop	r0
    61c6:	0f be       	out	0x3f, r0	; 63
    61c8:	0f 90       	pop	r0
    61ca:	1f 90       	pop	r1
    61cc:	18 95       	reti

000061ce <__vector_8>:
ISR(TIMER1_COMPB_vect){
    61ce:	1f 92       	push	r1
    61d0:	0f 92       	push	r0
    61d2:	0f b6       	in	r0, 0x3f	; 63
    61d4:	0f 92       	push	r0
    61d6:	11 24       	eor	r1, r1
    61d8:	2f 93       	push	r18
    61da:	3f 93       	push	r19
    61dc:	4f 93       	push	r20
    61de:	5f 93       	push	r21
    61e0:	6f 93       	push	r22
    61e2:	7f 93       	push	r23
    61e4:	8f 93       	push	r24
    61e6:	9f 93       	push	r25
    61e8:	af 93       	push	r26
    61ea:	bf 93       	push	r27
    61ec:	ef 93       	push	r30
    61ee:	ff 93       	push	r31
    61f0:	df 93       	push	r29
    61f2:	cf 93       	push	r28
    61f4:	cd b7       	in	r28, 0x3d	; 61
    61f6:	de b7       	in	r29, 0x3e	; 62
	if(T1Ptr3!='\0'){
    61f8:	80 91 d8 00 	lds	r24, 0x00D8
    61fc:	90 91 d9 00 	lds	r25, 0x00D9
    6200:	00 97       	sbiw	r24, 0x00	; 0
    6202:	29 f0       	breq	.+10     	; 0x620e <__vector_8+0x40>
		T1Ptr3();
    6204:	e0 91 d8 00 	lds	r30, 0x00D8
    6208:	f0 91 d9 00 	lds	r31, 0x00D9
    620c:	09 95       	icall
	}
}
    620e:	cf 91       	pop	r28
    6210:	df 91       	pop	r29
    6212:	ff 91       	pop	r31
    6214:	ef 91       	pop	r30
    6216:	bf 91       	pop	r27
    6218:	af 91       	pop	r26
    621a:	9f 91       	pop	r25
    621c:	8f 91       	pop	r24
    621e:	7f 91       	pop	r23
    6220:	6f 91       	pop	r22
    6222:	5f 91       	pop	r21
    6224:	4f 91       	pop	r20
    6226:	3f 91       	pop	r19
    6228:	2f 91       	pop	r18
    622a:	0f 90       	pop	r0
    622c:	0f be       	out	0x3f, r0	; 63
    622e:	0f 90       	pop	r0
    6230:	1f 90       	pop	r1
    6232:	18 95       	reti

00006234 <__vector_9>:
ISR(TIMER1_OVF_vect){
    6234:	1f 92       	push	r1
    6236:	0f 92       	push	r0
    6238:	0f b6       	in	r0, 0x3f	; 63
    623a:	0f 92       	push	r0
    623c:	11 24       	eor	r1, r1
    623e:	2f 93       	push	r18
    6240:	3f 93       	push	r19
    6242:	4f 93       	push	r20
    6244:	5f 93       	push	r21
    6246:	6f 93       	push	r22
    6248:	7f 93       	push	r23
    624a:	8f 93       	push	r24
    624c:	9f 93       	push	r25
    624e:	af 93       	push	r26
    6250:	bf 93       	push	r27
    6252:	ef 93       	push	r30
    6254:	ff 93       	push	r31
    6256:	df 93       	push	r29
    6258:	cf 93       	push	r28
    625a:	cd b7       	in	r28, 0x3d	; 61
    625c:	de b7       	in	r29, 0x3e	; 62
	if(T1Ptr1!='\0'){
    625e:	80 91 d4 00 	lds	r24, 0x00D4
    6262:	90 91 d5 00 	lds	r25, 0x00D5
    6266:	00 97       	sbiw	r24, 0x00	; 0
    6268:	29 f0       	breq	.+10     	; 0x6274 <__vector_9+0x40>
		T1Ptr1();
    626a:	e0 91 d4 00 	lds	r30, 0x00D4
    626e:	f0 91 d5 00 	lds	r31, 0x00D5
    6272:	09 95       	icall
	}
}
    6274:	cf 91       	pop	r28
    6276:	df 91       	pop	r29
    6278:	ff 91       	pop	r31
    627a:	ef 91       	pop	r30
    627c:	bf 91       	pop	r27
    627e:	af 91       	pop	r26
    6280:	9f 91       	pop	r25
    6282:	8f 91       	pop	r24
    6284:	7f 91       	pop	r23
    6286:	6f 91       	pop	r22
    6288:	5f 91       	pop	r21
    628a:	4f 91       	pop	r20
    628c:	3f 91       	pop	r19
    628e:	2f 91       	pop	r18
    6290:	0f 90       	pop	r0
    6292:	0f be       	out	0x3f, r0	; 63
    6294:	0f 90       	pop	r0
    6296:	1f 90       	pop	r1
    6298:	18 95       	reti

0000629a <__vector_6>:
ISR(TIMER1_CAPT_vect){
    629a:	1f 92       	push	r1
    629c:	0f 92       	push	r0
    629e:	0f b6       	in	r0, 0x3f	; 63
    62a0:	0f 92       	push	r0
    62a2:	11 24       	eor	r1, r1
    62a4:	2f 93       	push	r18
    62a6:	3f 93       	push	r19
    62a8:	4f 93       	push	r20
    62aa:	5f 93       	push	r21
    62ac:	6f 93       	push	r22
    62ae:	7f 93       	push	r23
    62b0:	8f 93       	push	r24
    62b2:	9f 93       	push	r25
    62b4:	af 93       	push	r26
    62b6:	bf 93       	push	r27
    62b8:	ef 93       	push	r30
    62ba:	ff 93       	push	r31
    62bc:	df 93       	push	r29
    62be:	cf 93       	push	r28
    62c0:	cd b7       	in	r28, 0x3d	; 61
    62c2:	de b7       	in	r29, 0x3e	; 62
	if(T1Ptr4!='\0'){
    62c4:	80 91 da 00 	lds	r24, 0x00DA
    62c8:	90 91 db 00 	lds	r25, 0x00DB
    62cc:	00 97       	sbiw	r24, 0x00	; 0
    62ce:	29 f0       	breq	.+10     	; 0x62da <__vector_6+0x40>
		T1Ptr4();
    62d0:	e0 91 da 00 	lds	r30, 0x00DA
    62d4:	f0 91 db 00 	lds	r31, 0x00DB
    62d8:	09 95       	icall
	}
}
    62da:	cf 91       	pop	r28
    62dc:	df 91       	pop	r29
    62de:	ff 91       	pop	r31
    62e0:	ef 91       	pop	r30
    62e2:	bf 91       	pop	r27
    62e4:	af 91       	pop	r26
    62e6:	9f 91       	pop	r25
    62e8:	8f 91       	pop	r24
    62ea:	7f 91       	pop	r23
    62ec:	6f 91       	pop	r22
    62ee:	5f 91       	pop	r21
    62f0:	4f 91       	pop	r20
    62f2:	3f 91       	pop	r19
    62f4:	2f 91       	pop	r18
    62f6:	0f 90       	pop	r0
    62f8:	0f be       	out	0x3f, r0	; 63
    62fa:	0f 90       	pop	r0
    62fc:	1f 90       	pop	r1
    62fe:	18 95       	reti

00006300 <UART_vInit>:

void(*Uptr1)(void)='\0';
void(*Uptr2)(void)='\0';
void(*Uptr3)(void)='\0';

void UART_vInit(){
    6300:	df 93       	push	r29
    6302:	cf 93       	push	r28
    6304:	cd b7       	in	r28, 0x3d	; 61
    6306:	de b7       	in	r29, 0x3e	; 62
	UBRRL=103;
    6308:	e9 e2       	ldi	r30, 0x29	; 41
    630a:	f0 e0       	ldi	r31, 0x00	; 0
    630c:	87 e6       	ldi	r24, 0x67	; 103
    630e:	80 83       	st	Z, r24
	SET_BIT(UCSRB,3);
    6310:	aa e2       	ldi	r26, 0x2A	; 42
    6312:	b0 e0       	ldi	r27, 0x00	; 0
    6314:	ea e2       	ldi	r30, 0x2A	; 42
    6316:	f0 e0       	ldi	r31, 0x00	; 0
    6318:	80 81       	ld	r24, Z
    631a:	88 60       	ori	r24, 0x08	; 8
    631c:	8c 93       	st	X, r24
	SET_BIT(UCSRB,4);
    631e:	aa e2       	ldi	r26, 0x2A	; 42
    6320:	b0 e0       	ldi	r27, 0x00	; 0
    6322:	ea e2       	ldi	r30, 0x2A	; 42
    6324:	f0 e0       	ldi	r31, 0x00	; 0
    6326:	80 81       	ld	r24, Z
    6328:	80 61       	ori	r24, 0x10	; 16
    632a:	8c 93       	st	X, r24
	UCSRC=0b10000110;
    632c:	e0 e4       	ldi	r30, 0x40	; 64
    632e:	f0 e0       	ldi	r31, 0x00	; 0
    6330:	86 e8       	ldi	r24, 0x86	; 134
    6332:	80 83       	st	Z, r24
}
    6334:	cf 91       	pop	r28
    6336:	df 91       	pop	r29
    6338:	08 95       	ret

0000633a <UART_vSendChar>:
void UART_vSendChar(u8 Loc_SendChar){
    633a:	df 93       	push	r29
    633c:	cf 93       	push	r28
    633e:	0f 92       	push	r0
    6340:	cd b7       	in	r28, 0x3d	; 61
    6342:	de b7       	in	r29, 0x3e	; 62
    6344:	89 83       	std	Y+1, r24	; 0x01
	while(GET_BIT(UCSRA,6));
    6346:	ea e2       	ldi	r30, 0x2A	; 42
    6348:	f0 e0       	ldi	r31, 0x00	; 0
    634a:	80 81       	ld	r24, Z
    634c:	82 95       	swap	r24
    634e:	86 95       	lsr	r24
    6350:	86 95       	lsr	r24
    6352:	83 70       	andi	r24, 0x03	; 3
    6354:	88 2f       	mov	r24, r24
    6356:	90 e0       	ldi	r25, 0x00	; 0
    6358:	81 70       	andi	r24, 0x01	; 1
    635a:	90 70       	andi	r25, 0x00	; 0
    635c:	88 23       	and	r24, r24
    635e:	99 f7       	brne	.-26     	; 0x6346 <UART_vSendChar+0xc>
	UDR=Loc_SendChar;
    6360:	ec e2       	ldi	r30, 0x2C	; 44
    6362:	f0 e0       	ldi	r31, 0x00	; 0
    6364:	89 81       	ldd	r24, Y+1	; 0x01
    6366:	80 83       	st	Z, r24
}
    6368:	0f 90       	pop	r0
    636a:	cf 91       	pop	r28
    636c:	df 91       	pop	r29
    636e:	08 95       	ret

00006370 <UART_u8RecieveChar>:
u8 UART_u8RecieveChar(){
    6370:	df 93       	push	r29
    6372:	cf 93       	push	r28
    6374:	cd b7       	in	r28, 0x3d	; 61
    6376:	de b7       	in	r29, 0x3e	; 62
	while(!(GET_BIT(UCSRA,7)));
    6378:	ea e2       	ldi	r30, 0x2A	; 42
    637a:	f0 e0       	ldi	r31, 0x00	; 0
    637c:	80 81       	ld	r24, Z
    637e:	88 23       	and	r24, r24
    6380:	dc f7       	brge	.-10     	; 0x6378 <UART_u8RecieveChar+0x8>
	return UDR;
    6382:	ec e2       	ldi	r30, 0x2C	; 44
    6384:	f0 e0       	ldi	r31, 0x00	; 0
    6386:	80 81       	ld	r24, Z
}
    6388:	cf 91       	pop	r28
    638a:	df 91       	pop	r29
    638c:	08 95       	ret

0000638e <UART_vRXCompleteInterruptEnable>:
void UART_vRXCompleteInterruptEnable(){
    638e:	df 93       	push	r29
    6390:	cf 93       	push	r28
    6392:	cd b7       	in	r28, 0x3d	; 61
    6394:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,7);
    6396:	aa e2       	ldi	r26, 0x2A	; 42
    6398:	b0 e0       	ldi	r27, 0x00	; 0
    639a:	ea e2       	ldi	r30, 0x2A	; 42
    639c:	f0 e0       	ldi	r31, 0x00	; 0
    639e:	80 81       	ld	r24, Z
    63a0:	80 68       	ori	r24, 0x80	; 128
    63a2:	8c 93       	st	X, r24
}
    63a4:	cf 91       	pop	r28
    63a6:	df 91       	pop	r29
    63a8:	08 95       	ret

000063aa <UART_vTXCompleteInterruptEnable>:
void UART_vTXCompleteInterruptEnable(){
    63aa:	df 93       	push	r29
    63ac:	cf 93       	push	r28
    63ae:	cd b7       	in	r28, 0x3d	; 61
    63b0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,6);
    63b2:	aa e2       	ldi	r26, 0x2A	; 42
    63b4:	b0 e0       	ldi	r27, 0x00	; 0
    63b6:	ea e2       	ldi	r30, 0x2A	; 42
    63b8:	f0 e0       	ldi	r31, 0x00	; 0
    63ba:	80 81       	ld	r24, Z
    63bc:	80 64       	ori	r24, 0x40	; 64
    63be:	8c 93       	st	X, r24
}
    63c0:	cf 91       	pop	r28
    63c2:	df 91       	pop	r29
    63c4:	08 95       	ret

000063c6 <UART_vDataRegisterEmptyInterruptEnable>:
void UART_vDataRegisterEmptyInterruptEnable(){
    63c6:	df 93       	push	r29
    63c8:	cf 93       	push	r28
    63ca:	cd b7       	in	r28, 0x3d	; 61
    63cc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,5);
    63ce:	aa e2       	ldi	r26, 0x2A	; 42
    63d0:	b0 e0       	ldi	r27, 0x00	; 0
    63d2:	ea e2       	ldi	r30, 0x2A	; 42
    63d4:	f0 e0       	ldi	r31, 0x00	; 0
    63d6:	80 81       	ld	r24, Z
    63d8:	80 62       	ori	r24, 0x20	; 32
    63da:	8c 93       	st	X, r24
}
    63dc:	cf 91       	pop	r28
    63de:	df 91       	pop	r29
    63e0:	08 95       	ret

000063e2 <UART_RXCompleteCallBack>:
void UART_RXCompleteCallBack(void(*ptr1)(void)){
    63e2:	df 93       	push	r29
    63e4:	cf 93       	push	r28
    63e6:	00 d0       	rcall	.+0      	; 0x63e8 <UART_RXCompleteCallBack+0x6>
    63e8:	cd b7       	in	r28, 0x3d	; 61
    63ea:	de b7       	in	r29, 0x3e	; 62
    63ec:	9a 83       	std	Y+2, r25	; 0x02
    63ee:	89 83       	std	Y+1, r24	; 0x01
	if(ptr1!='\0'){
    63f0:	89 81       	ldd	r24, Y+1	; 0x01
    63f2:	9a 81       	ldd	r25, Y+2	; 0x02
    63f4:	00 97       	sbiw	r24, 0x00	; 0
    63f6:	31 f0       	breq	.+12     	; 0x6404 <UART_RXCompleteCallBack+0x22>
		Uptr1=ptr1;
    63f8:	89 81       	ldd	r24, Y+1	; 0x01
    63fa:	9a 81       	ldd	r25, Y+2	; 0x02
    63fc:	90 93 de 00 	sts	0x00DE, r25
    6400:	80 93 dd 00 	sts	0x00DD, r24
	}
}
    6404:	0f 90       	pop	r0
    6406:	0f 90       	pop	r0
    6408:	cf 91       	pop	r28
    640a:	df 91       	pop	r29
    640c:	08 95       	ret

0000640e <UART_TXCompleteCallBack>:
void UART_TXCompleteCallBack(void(*ptr2)(void)){
    640e:	df 93       	push	r29
    6410:	cf 93       	push	r28
    6412:	00 d0       	rcall	.+0      	; 0x6414 <UART_TXCompleteCallBack+0x6>
    6414:	cd b7       	in	r28, 0x3d	; 61
    6416:	de b7       	in	r29, 0x3e	; 62
    6418:	9a 83       	std	Y+2, r25	; 0x02
    641a:	89 83       	std	Y+1, r24	; 0x01
	if(ptr2!='\0'){
    641c:	89 81       	ldd	r24, Y+1	; 0x01
    641e:	9a 81       	ldd	r25, Y+2	; 0x02
    6420:	00 97       	sbiw	r24, 0x00	; 0
    6422:	31 f0       	breq	.+12     	; 0x6430 <UART_TXCompleteCallBack+0x22>
		Uptr2=ptr2;
    6424:	89 81       	ldd	r24, Y+1	; 0x01
    6426:	9a 81       	ldd	r25, Y+2	; 0x02
    6428:	90 93 e0 00 	sts	0x00E0, r25
    642c:	80 93 df 00 	sts	0x00DF, r24
	}
}
    6430:	0f 90       	pop	r0
    6432:	0f 90       	pop	r0
    6434:	cf 91       	pop	r28
    6436:	df 91       	pop	r29
    6438:	08 95       	ret

0000643a <UAART_DataRegisterEmptyCallBack>:
void UAART_DataRegisterEmptyCallBack(void(*ptr3)(void)){
    643a:	df 93       	push	r29
    643c:	cf 93       	push	r28
    643e:	00 d0       	rcall	.+0      	; 0x6440 <UAART_DataRegisterEmptyCallBack+0x6>
    6440:	cd b7       	in	r28, 0x3d	; 61
    6442:	de b7       	in	r29, 0x3e	; 62
    6444:	9a 83       	std	Y+2, r25	; 0x02
    6446:	89 83       	std	Y+1, r24	; 0x01
	if(ptr3!='\0'){
    6448:	89 81       	ldd	r24, Y+1	; 0x01
    644a:	9a 81       	ldd	r25, Y+2	; 0x02
    644c:	00 97       	sbiw	r24, 0x00	; 0
    644e:	31 f0       	breq	.+12     	; 0x645c <UAART_DataRegisterEmptyCallBack+0x22>
		Uptr3=ptr3;
    6450:	89 81       	ldd	r24, Y+1	; 0x01
    6452:	9a 81       	ldd	r25, Y+2	; 0x02
    6454:	90 93 e2 00 	sts	0x00E2, r25
    6458:	80 93 e1 00 	sts	0x00E1, r24
	}
}
    645c:	0f 90       	pop	r0
    645e:	0f 90       	pop	r0
    6460:	cf 91       	pop	r28
    6462:	df 91       	pop	r29
    6464:	08 95       	ret

00006466 <__vector_13>:
ISR(USART_RXC_vect){
    6466:	1f 92       	push	r1
    6468:	0f 92       	push	r0
    646a:	0f b6       	in	r0, 0x3f	; 63
    646c:	0f 92       	push	r0
    646e:	11 24       	eor	r1, r1
    6470:	2f 93       	push	r18
    6472:	3f 93       	push	r19
    6474:	4f 93       	push	r20
    6476:	5f 93       	push	r21
    6478:	6f 93       	push	r22
    647a:	7f 93       	push	r23
    647c:	8f 93       	push	r24
    647e:	9f 93       	push	r25
    6480:	af 93       	push	r26
    6482:	bf 93       	push	r27
    6484:	ef 93       	push	r30
    6486:	ff 93       	push	r31
    6488:	df 93       	push	r29
    648a:	cf 93       	push	r28
    648c:	cd b7       	in	r28, 0x3d	; 61
    648e:	de b7       	in	r29, 0x3e	; 62
	if(Uptr1!='\0'){
    6490:	80 91 dd 00 	lds	r24, 0x00DD
    6494:	90 91 de 00 	lds	r25, 0x00DE
    6498:	00 97       	sbiw	r24, 0x00	; 0
    649a:	29 f0       	breq	.+10     	; 0x64a6 <__vector_13+0x40>
		Uptr1();
    649c:	e0 91 dd 00 	lds	r30, 0x00DD
    64a0:	f0 91 de 00 	lds	r31, 0x00DE
    64a4:	09 95       	icall
	}
}
    64a6:	cf 91       	pop	r28
    64a8:	df 91       	pop	r29
    64aa:	ff 91       	pop	r31
    64ac:	ef 91       	pop	r30
    64ae:	bf 91       	pop	r27
    64b0:	af 91       	pop	r26
    64b2:	9f 91       	pop	r25
    64b4:	8f 91       	pop	r24
    64b6:	7f 91       	pop	r23
    64b8:	6f 91       	pop	r22
    64ba:	5f 91       	pop	r21
    64bc:	4f 91       	pop	r20
    64be:	3f 91       	pop	r19
    64c0:	2f 91       	pop	r18
    64c2:	0f 90       	pop	r0
    64c4:	0f be       	out	0x3f, r0	; 63
    64c6:	0f 90       	pop	r0
    64c8:	1f 90       	pop	r1
    64ca:	18 95       	reti

000064cc <__vector_14>:
ISR(USART_UDRE_vect){
    64cc:	1f 92       	push	r1
    64ce:	0f 92       	push	r0
    64d0:	0f b6       	in	r0, 0x3f	; 63
    64d2:	0f 92       	push	r0
    64d4:	11 24       	eor	r1, r1
    64d6:	2f 93       	push	r18
    64d8:	3f 93       	push	r19
    64da:	4f 93       	push	r20
    64dc:	5f 93       	push	r21
    64de:	6f 93       	push	r22
    64e0:	7f 93       	push	r23
    64e2:	8f 93       	push	r24
    64e4:	9f 93       	push	r25
    64e6:	af 93       	push	r26
    64e8:	bf 93       	push	r27
    64ea:	ef 93       	push	r30
    64ec:	ff 93       	push	r31
    64ee:	df 93       	push	r29
    64f0:	cf 93       	push	r28
    64f2:	cd b7       	in	r28, 0x3d	; 61
    64f4:	de b7       	in	r29, 0x3e	; 62
	if(Uptr2!='\0'){
    64f6:	80 91 df 00 	lds	r24, 0x00DF
    64fa:	90 91 e0 00 	lds	r25, 0x00E0
    64fe:	00 97       	sbiw	r24, 0x00	; 0
    6500:	29 f0       	breq	.+10     	; 0x650c <__vector_14+0x40>
		Uptr2();
    6502:	e0 91 df 00 	lds	r30, 0x00DF
    6506:	f0 91 e0 00 	lds	r31, 0x00E0
    650a:	09 95       	icall
	}
}
    650c:	cf 91       	pop	r28
    650e:	df 91       	pop	r29
    6510:	ff 91       	pop	r31
    6512:	ef 91       	pop	r30
    6514:	bf 91       	pop	r27
    6516:	af 91       	pop	r26
    6518:	9f 91       	pop	r25
    651a:	8f 91       	pop	r24
    651c:	7f 91       	pop	r23
    651e:	6f 91       	pop	r22
    6520:	5f 91       	pop	r21
    6522:	4f 91       	pop	r20
    6524:	3f 91       	pop	r19
    6526:	2f 91       	pop	r18
    6528:	0f 90       	pop	r0
    652a:	0f be       	out	0x3f, r0	; 63
    652c:	0f 90       	pop	r0
    652e:	1f 90       	pop	r1
    6530:	18 95       	reti

00006532 <__vector_15>:
ISR(USART_TXC_vect){
    6532:	1f 92       	push	r1
    6534:	0f 92       	push	r0
    6536:	0f b6       	in	r0, 0x3f	; 63
    6538:	0f 92       	push	r0
    653a:	11 24       	eor	r1, r1
    653c:	2f 93       	push	r18
    653e:	3f 93       	push	r19
    6540:	4f 93       	push	r20
    6542:	5f 93       	push	r21
    6544:	6f 93       	push	r22
    6546:	7f 93       	push	r23
    6548:	8f 93       	push	r24
    654a:	9f 93       	push	r25
    654c:	af 93       	push	r26
    654e:	bf 93       	push	r27
    6550:	ef 93       	push	r30
    6552:	ff 93       	push	r31
    6554:	df 93       	push	r29
    6556:	cf 93       	push	r28
    6558:	cd b7       	in	r28, 0x3d	; 61
    655a:	de b7       	in	r29, 0x3e	; 62
	if(Uptr3!='\0'){
    655c:	80 91 e1 00 	lds	r24, 0x00E1
    6560:	90 91 e2 00 	lds	r25, 0x00E2
    6564:	00 97       	sbiw	r24, 0x00	; 0
    6566:	29 f0       	breq	.+10     	; 0x6572 <__vector_15+0x40>
		Uptr3();
    6568:	e0 91 e1 00 	lds	r30, 0x00E1
    656c:	f0 91 e2 00 	lds	r31, 0x00E2
    6570:	09 95       	icall
	}
}
    6572:	cf 91       	pop	r28
    6574:	df 91       	pop	r29
    6576:	ff 91       	pop	r31
    6578:	ef 91       	pop	r30
    657a:	bf 91       	pop	r27
    657c:	af 91       	pop	r26
    657e:	9f 91       	pop	r25
    6580:	8f 91       	pop	r24
    6582:	7f 91       	pop	r23
    6584:	6f 91       	pop	r22
    6586:	5f 91       	pop	r21
    6588:	4f 91       	pop	r20
    658a:	3f 91       	pop	r19
    658c:	2f 91       	pop	r18
    658e:	0f 90       	pop	r0
    6590:	0f be       	out	0x3f, r0	; 63
    6592:	0f 90       	pop	r0
    6594:	1f 90       	pop	r1
    6596:	18 95       	reti

00006598 <_7Segma_vInit>:
 *      and PortA Pin4, Pin5, Pin6, and Pin7 is used to show number .
 */

#include "_7Segma.h"
//------------ SET pins connected to the 7segma as out puts
void _7Segma_vInit(){
    6598:	df 93       	push	r29
    659a:	cf 93       	push	r28
    659c:	cd b7       	in	r28, 0x3d	; 61
    659e:	de b7       	in	r29, 0x3e	; 62
	/*----------7SEG_A-->PORTA .4
				7SEG_B-->PORTA .5
				7SEG_C-->PORTA .6
				7SEG_D-->PORTA .7*/
	DIO_vSetPinDirection(PortA, Pin4, Pin_OutPut);
    65a0:	80 e0       	ldi	r24, 0x00	; 0
    65a2:	64 e0       	ldi	r22, 0x04	; 4
    65a4:	41 e0       	ldi	r20, 0x01	; 1
    65a6:	0e 94 b1 19 	call	0x3362	; 0x3362 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PortA, Pin5, Pin_OutPut);
    65aa:	80 e0       	ldi	r24, 0x00	; 0
    65ac:	65 e0       	ldi	r22, 0x05	; 5
    65ae:	41 e0       	ldi	r20, 0x01	; 1
    65b0:	0e 94 b1 19 	call	0x3362	; 0x3362 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PortA, Pin6, Pin_OutPut);
    65b4:	80 e0       	ldi	r24, 0x00	; 0
    65b6:	66 e0       	ldi	r22, 0x06	; 6
    65b8:	41 e0       	ldi	r20, 0x01	; 1
    65ba:	0e 94 b1 19 	call	0x3362	; 0x3362 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PortA, Pin7, Pin_OutPut);
    65be:	80 e0       	ldi	r24, 0x00	; 0
    65c0:	67 e0       	ldi	r22, 0x07	; 7
    65c2:	41 e0       	ldi	r20, 0x01	; 1
    65c4:	0e 94 b1 19 	call	0x3362	; 0x3362 <DIO_vSetPinDirection>
	//-------------ENABLE LINES PINS ----------------
	DIO_vSetPinDirection(PortB, Pin2, Pin_OutPut);
    65c8:	81 e0       	ldi	r24, 0x01	; 1
    65ca:	62 e0       	ldi	r22, 0x02	; 2
    65cc:	41 e0       	ldi	r20, 0x01	; 1
    65ce:	0e 94 b1 19 	call	0x3362	; 0x3362 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PortB, Pin1, Pin_OutPut);
    65d2:	81 e0       	ldi	r24, 0x01	; 1
    65d4:	61 e0       	ldi	r22, 0x01	; 1
    65d6:	41 e0       	ldi	r20, 0x01	; 1
    65d8:	0e 94 b1 19 	call	0x3362	; 0x3362 <DIO_vSetPinDirection>
}
    65dc:	cf 91       	pop	r28
    65de:	df 91       	pop	r29
    65e0:	08 95       	ret

000065e2 <_7Segma_vEnable1>:
//-----------enable 7Segma 1 -----------
void _7Segma_vEnable1(){
    65e2:	df 93       	push	r29
    65e4:	cf 93       	push	r28
    65e6:	cd b7       	in	r28, 0x3d	; 61
    65e8:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPinValue(PortB, Pin1, Pin_High);
    65ea:	81 e0       	ldi	r24, 0x01	; 1
    65ec:	61 e0       	ldi	r22, 0x01	; 1
    65ee:	41 e0       	ldi	r20, 0x01	; 1
    65f0:	0e 94 b4 1a 	call	0x3568	; 0x3568 <DIO_vSetPinValue>
}
    65f4:	cf 91       	pop	r28
    65f6:	df 91       	pop	r29
    65f8:	08 95       	ret

000065fa <_7Segma_vEnable2>:
//-----------enable 7Segma 2 -----------
void _7Segma_vEnable2(){
    65fa:	df 93       	push	r29
    65fc:	cf 93       	push	r28
    65fe:	cd b7       	in	r28, 0x3d	; 61
    6600:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPinValue(PortB, Pin2, Pin_High);
    6602:	81 e0       	ldi	r24, 0x01	; 1
    6604:	62 e0       	ldi	r22, 0x02	; 2
    6606:	41 e0       	ldi	r20, 0x01	; 1
    6608:	0e 94 b4 1a 	call	0x3568	; 0x3568 <DIO_vSetPinValue>
}
    660c:	cf 91       	pop	r28
    660e:	df 91       	pop	r29
    6610:	08 95       	ret

00006612 <_7Segma_vDisable1>:
//-----------Disable 7Segma 1
void _7Segma_vDisable1(){
    6612:	df 93       	push	r29
    6614:	cf 93       	push	r28
    6616:	cd b7       	in	r28, 0x3d	; 61
    6618:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPinValue(PortB, Pin1, Pin_Low);
    661a:	81 e0       	ldi	r24, 0x01	; 1
    661c:	61 e0       	ldi	r22, 0x01	; 1
    661e:	40 e0       	ldi	r20, 0x00	; 0
    6620:	0e 94 b4 1a 	call	0x3568	; 0x3568 <DIO_vSetPinValue>
}
    6624:	cf 91       	pop	r28
    6626:	df 91       	pop	r29
    6628:	08 95       	ret

0000662a <_7Segma_vDisable2>:
//-----------Disable 7Segma 2
void _7Segma_vDisable2(){
    662a:	df 93       	push	r29
    662c:	cf 93       	push	r28
    662e:	cd b7       	in	r28, 0x3d	; 61
    6630:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPinValue(PortB, Pin2, Pin_Low);
    6632:	81 e0       	ldi	r24, 0x01	; 1
    6634:	62 e0       	ldi	r22, 0x02	; 2
    6636:	40 e0       	ldi	r20, 0x00	; 0
    6638:	0e 94 b4 1a 	call	0x3568	; 0x3568 <DIO_vSetPinValue>
}
    663c:	cf 91       	pop	r28
    663e:	df 91       	pop	r29
    6640:	08 95       	ret

00006642 <_7Segma_vEnableDot>:
//------------enable 7Segma Dot
void _7Segma_vEnableDot(){
    6642:	df 93       	push	r29
    6644:	cf 93       	push	r28
    6646:	cd b7       	in	r28, 0x3d	; 61
    6648:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPinValue(PortB, Pin3, Pin_High);
    664a:	81 e0       	ldi	r24, 0x01	; 1
    664c:	63 e0       	ldi	r22, 0x03	; 3
    664e:	41 e0       	ldi	r20, 0x01	; 1
    6650:	0e 94 b4 1a 	call	0x3568	; 0x3568 <DIO_vSetPinValue>
}
    6654:	cf 91       	pop	r28
    6656:	df 91       	pop	r29
    6658:	08 95       	ret

0000665a <_7Segma_vDisbleDot>:
//------------Disable 7Segma Dot
void _7Segma_vDisbleDot(){
    665a:	df 93       	push	r29
    665c:	cf 93       	push	r28
    665e:	cd b7       	in	r28, 0x3d	; 61
    6660:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPinValue(PortB, Pin3, Pin_Low);
    6662:	81 e0       	ldi	r24, 0x01	; 1
    6664:	63 e0       	ldi	r22, 0x03	; 3
    6666:	40 e0       	ldi	r20, 0x00	; 0
    6668:	0e 94 b4 1a 	call	0x3568	; 0x3568 <DIO_vSetPinValue>
}
    666c:	cf 91       	pop	r28
    666e:	df 91       	pop	r29
    6670:	08 95       	ret

00006672 <_7Segma_vShow>:
//----------Show Value on 7Segma ----------
void _7Segma_vShow(u8 loc_u8SegmaShowNumber){
    6672:	df 93       	push	r29
    6674:	cf 93       	push	r28
    6676:	0f 92       	push	r0
    6678:	cd b7       	in	r28, 0x3d	; 61
    667a:	de b7       	in	r29, 0x3e	; 62
    667c:	89 83       	std	Y+1, r24	; 0x01
	loc_u8SegmaShowNumber= (loc_u8SegmaShowNumber<<4);
    667e:	89 81       	ldd	r24, Y+1	; 0x01
    6680:	82 95       	swap	r24
    6682:	80 7f       	andi	r24, 0xF0	; 240
    6684:	89 83       	std	Y+1, r24	; 0x01
	DIO_vSetPortValue(PortA, loc_u8SegmaShowNumber);
    6686:	80 e0       	ldi	r24, 0x00	; 0
    6688:	69 81       	ldd	r22, Y+1	; 0x01
    668a:	0e 94 1a 19 	call	0x3234	; 0x3234 <DIO_vSetPortValue>
}
    668e:	0f 90       	pop	r0
    6690:	cf 91       	pop	r28
    6692:	df 91       	pop	r29
    6694:	08 95       	ret

00006696 <_7Segma_vPrintNumber1>:
//------------ this function take a u8 number and print it on the left 7Segme------
void _7Segma_vPrintNumber1(u8 loc_u8SegmaPrintNumber){
    6696:	df 93       	push	r29
    6698:	cf 93       	push	r28
    669a:	0f 92       	push	r0
    669c:	cd b7       	in	r28, 0x3d	; 61
    669e:	de b7       	in	r29, 0x3e	; 62
    66a0:	89 83       	std	Y+1, r24	; 0x01
	_7Segma_vEnable1();
    66a2:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <_7Segma_vEnable1>
	_7Segma_vShow(loc_u8SegmaPrintNumber);
    66a6:	89 81       	ldd	r24, Y+1	; 0x01
    66a8:	0e 94 39 33 	call	0x6672	; 0x6672 <_7Segma_vShow>
	_7Segma_vDisable1();
    66ac:	0e 94 09 33 	call	0x6612	; 0x6612 <_7Segma_vDisable1>
}
    66b0:	0f 90       	pop	r0
    66b2:	cf 91       	pop	r28
    66b4:	df 91       	pop	r29
    66b6:	08 95       	ret

000066b8 <_7Segma_vPrintNumber2>:
//------------ this function take a u8 number and print it on the right 7Segme-----
void _7Segma_vPrintNumber2(u8 loc_u8SegmaPrintNumber){
    66b8:	df 93       	push	r29
    66ba:	cf 93       	push	r28
    66bc:	0f 92       	push	r0
    66be:	cd b7       	in	r28, 0x3d	; 61
    66c0:	de b7       	in	r29, 0x3e	; 62
    66c2:	89 83       	std	Y+1, r24	; 0x01
	_7Segma_vEnable2();
    66c4:	0e 94 fd 32 	call	0x65fa	; 0x65fa <_7Segma_vEnable2>
	_7Segma_vShow(loc_u8SegmaPrintNumber);
    66c8:	89 81       	ldd	r24, Y+1	; 0x01
    66ca:	0e 94 39 33 	call	0x6672	; 0x6672 <_7Segma_vShow>
	_7Segma_vDisable2();
    66ce:	0e 94 15 33 	call	0x662a	; 0x662a <_7Segma_vDisable2>
}
    66d2:	0f 90       	pop	r0
    66d4:	cf 91       	pop	r28
    66d6:	df 91       	pop	r29
    66d8:	08 95       	ret

000066da <main>:
/*void TEST();
u16 z;
u8 arr[6];*/
/*void Test2();
u16 counter=0;*/
int main(void){
    66da:	df 93       	push	r29
    66dc:	cf 93       	push	r28
    66de:	cd b7       	in	r28, 0x3d	; 61
    66e0:	de b7       	in	r29, 0x3e	; 62
	//SET_BIT(DDRC,1);
	//SET_BIT(DDRC,0);

//	SET_BIT(TWCR,6);
	CLR_BIT(TWSR,0);
    66e2:	a1 e2       	ldi	r26, 0x21	; 33
    66e4:	b0 e0       	ldi	r27, 0x00	; 0
    66e6:	e1 e2       	ldi	r30, 0x21	; 33
    66e8:	f0 e0       	ldi	r31, 0x00	; 0
    66ea:	80 81       	ld	r24, Z
    66ec:	8e 7f       	andi	r24, 0xFE	; 254
    66ee:	8c 93       	st	X, r24
	CLR_BIT(TWSR,1);
    66f0:	a1 e2       	ldi	r26, 0x21	; 33
    66f2:	b0 e0       	ldi	r27, 0x00	; 0
    66f4:	e1 e2       	ldi	r30, 0x21	; 33
    66f6:	f0 e0       	ldi	r31, 0x00	; 0
    66f8:	80 81       	ld	r24, Z
    66fa:	8d 7f       	andi	r24, 0xFD	; 253
    66fc:	8c 93       	st	X, r24
	TWBR=0x0C;
    66fe:	e0 e2       	ldi	r30, 0x20	; 32
    6700:	f0 e0       	ldi	r31, 0x00	; 0
    6702:	8c e0       	ldi	r24, 0x0C	; 12
    6704:	80 83       	st	Z, r24
	while(1){
		while((GET_BIT(TWCR,7) !=0));
    6706:	e6 e5       	ldi	r30, 0x56	; 86
    6708:	f0 e0       	ldi	r31, 0x00	; 0
    670a:	80 81       	ld	r24, Z
    670c:	88 23       	and	r24, r24
    670e:	dc f3       	brlt	.-10     	; 0x6706 <main+0x2c>
		SET_BIT(TWCR,2);
    6710:	a6 e5       	ldi	r26, 0x56	; 86
    6712:	b0 e0       	ldi	r27, 0x00	; 0
    6714:	e6 e5       	ldi	r30, 0x56	; 86
    6716:	f0 e0       	ldi	r31, 0x00	; 0
    6718:	80 81       	ld	r24, Z
    671a:	84 60       	ori	r24, 0x04	; 4
    671c:	8c 93       	st	X, r24

		SET_BIT(TWCR,5);
    671e:	a6 e5       	ldi	r26, 0x56	; 86
    6720:	b0 e0       	ldi	r27, 0x00	; 0
    6722:	e6 e5       	ldi	r30, 0x56	; 86
    6724:	f0 e0       	ldi	r31, 0x00	; 0
    6726:	80 81       	ld	r24, Z
    6728:	80 62       	ori	r24, 0x20	; 32
    672a:	8c 93       	st	X, r24
		CLR_BIT(TWCR,7);
    672c:	a6 e5       	ldi	r26, 0x56	; 86
    672e:	b0 e0       	ldi	r27, 0x00	; 0
    6730:	e6 e5       	ldi	r30, 0x56	; 86
    6732:	f0 e0       	ldi	r31, 0x00	; 0
    6734:	80 81       	ld	r24, Z
    6736:	8f 77       	andi	r24, 0x7F	; 127
    6738:	8c 93       	st	X, r24
		while((GET_BIT(TWCR,7) !=0));
    673a:	e6 e5       	ldi	r30, 0x56	; 86
    673c:	f0 e0       	ldi	r31, 0x00	; 0
    673e:	80 81       	ld	r24, Z
    6740:	88 23       	and	r24, r24
    6742:	dc f3       	brlt	.-10     	; 0x673a <main+0x60>
		SET_BIT(TWCR,2);
    6744:	a6 e5       	ldi	r26, 0x56	; 86
    6746:	b0 e0       	ldi	r27, 0x00	; 0
    6748:	e6 e5       	ldi	r30, 0x56	; 86
    674a:	f0 e0       	ldi	r31, 0x00	; 0
    674c:	80 81       	ld	r24, Z
    674e:	84 60       	ori	r24, 0x04	; 4
    6750:	8c 93       	st	X, r24

		TWDR=0b00000010; //frist bit is for read or write
    6752:	e3 e2       	ldi	r30, 0x23	; 35
    6754:	f0 e0       	ldi	r31, 0x00	; 0
    6756:	82 e0       	ldi	r24, 0x02	; 2
    6758:	80 83       	st	Z, r24
		CLR_BIT(TWCR,7);
    675a:	a6 e5       	ldi	r26, 0x56	; 86
    675c:	b0 e0       	ldi	r27, 0x00	; 0
    675e:	e6 e5       	ldi	r30, 0x56	; 86
    6760:	f0 e0       	ldi	r31, 0x00	; 0
    6762:	80 81       	ld	r24, Z
    6764:	8f 77       	andi	r24, 0x7F	; 127
    6766:	8c 93       	st	X, r24
		while((GET_BIT(TWCR,7) !=0));
    6768:	e6 e5       	ldi	r30, 0x56	; 86
    676a:	f0 e0       	ldi	r31, 0x00	; 0
    676c:	80 81       	ld	r24, Z
    676e:	88 23       	and	r24, r24
    6770:	dc f3       	brlt	.-10     	; 0x6768 <main+0x8e>
		SET_BIT(TWCR,2);
    6772:	a6 e5       	ldi	r26, 0x56	; 86
    6774:	b0 e0       	ldi	r27, 0x00	; 0
    6776:	e6 e5       	ldi	r30, 0x56	; 86
    6778:	f0 e0       	ldi	r31, 0x00	; 0
    677a:	80 81       	ld	r24, Z
    677c:	84 60       	ori	r24, 0x04	; 4
    677e:	8c 93       	st	X, r24

		TWDR='A';
    6780:	e3 e2       	ldi	r30, 0x23	; 35
    6782:	f0 e0       	ldi	r31, 0x00	; 0
    6784:	81 e4       	ldi	r24, 0x41	; 65
    6786:	80 83       	st	Z, r24
		CLR_BIT(TWCR,7);
    6788:	a6 e5       	ldi	r26, 0x56	; 86
    678a:	b0 e0       	ldi	r27, 0x00	; 0
    678c:	e6 e5       	ldi	r30, 0x56	; 86
    678e:	f0 e0       	ldi	r31, 0x00	; 0
    6790:	80 81       	ld	r24, Z
    6792:	8f 77       	andi	r24, 0x7F	; 127
    6794:	8c 93       	st	X, r24
		while((GET_BIT(TWCR,7) !=0));
    6796:	e6 e5       	ldi	r30, 0x56	; 86
    6798:	f0 e0       	ldi	r31, 0x00	; 0
    679a:	80 81       	ld	r24, Z
    679c:	88 23       	and	r24, r24
    679e:	dc f3       	brlt	.-10     	; 0x6796 <main+0xbc>
		SET_BIT(TWCR,2);
    67a0:	a6 e5       	ldi	r26, 0x56	; 86
    67a2:	b0 e0       	ldi	r27, 0x00	; 0
    67a4:	e6 e5       	ldi	r30, 0x56	; 86
    67a6:	f0 e0       	ldi	r31, 0x00	; 0
    67a8:	80 81       	ld	r24, Z
    67aa:	84 60       	ori	r24, 0x04	; 4
    67ac:	8c 93       	st	X, r24

		SET_BIT(TWCR,4);
    67ae:	a6 e5       	ldi	r26, 0x56	; 86
    67b0:	b0 e0       	ldi	r27, 0x00	; 0
    67b2:	e6 e5       	ldi	r30, 0x56	; 86
    67b4:	f0 e0       	ldi	r31, 0x00	; 0
    67b6:	80 81       	ld	r24, Z
    67b8:	80 61       	ori	r24, 0x10	; 16
    67ba:	8c 93       	st	X, r24
		CLR_BIT(TWCR,7);
    67bc:	a6 e5       	ldi	r26, 0x56	; 86
    67be:	b0 e0       	ldi	r27, 0x00	; 0
    67c0:	e6 e5       	ldi	r30, 0x56	; 86
    67c2:	f0 e0       	ldi	r31, 0x00	; 0
    67c4:	80 81       	ld	r24, Z
    67c6:	8f 77       	andi	r24, 0x7F	; 127
    67c8:	8c 93       	st	X, r24
    67ca:	9d cf       	rjmp	.-198    	; 0x6706 <main+0x2c>

000067cc <__mulsi3>:
    67cc:	62 9f       	mul	r22, r18
    67ce:	d0 01       	movw	r26, r0
    67d0:	73 9f       	mul	r23, r19
    67d2:	f0 01       	movw	r30, r0
    67d4:	82 9f       	mul	r24, r18
    67d6:	e0 0d       	add	r30, r0
    67d8:	f1 1d       	adc	r31, r1
    67da:	64 9f       	mul	r22, r20
    67dc:	e0 0d       	add	r30, r0
    67de:	f1 1d       	adc	r31, r1
    67e0:	92 9f       	mul	r25, r18
    67e2:	f0 0d       	add	r31, r0
    67e4:	83 9f       	mul	r24, r19
    67e6:	f0 0d       	add	r31, r0
    67e8:	74 9f       	mul	r23, r20
    67ea:	f0 0d       	add	r31, r0
    67ec:	65 9f       	mul	r22, r21
    67ee:	f0 0d       	add	r31, r0
    67f0:	99 27       	eor	r25, r25
    67f2:	72 9f       	mul	r23, r18
    67f4:	b0 0d       	add	r27, r0
    67f6:	e1 1d       	adc	r30, r1
    67f8:	f9 1f       	adc	r31, r25
    67fa:	63 9f       	mul	r22, r19
    67fc:	b0 0d       	add	r27, r0
    67fe:	e1 1d       	adc	r30, r1
    6800:	f9 1f       	adc	r31, r25
    6802:	bd 01       	movw	r22, r26
    6804:	cf 01       	movw	r24, r30
    6806:	11 24       	eor	r1, r1
    6808:	08 95       	ret

0000680a <__udivmodqi4>:
    680a:	99 1b       	sub	r25, r25
    680c:	79 e0       	ldi	r23, 0x09	; 9
    680e:	04 c0       	rjmp	.+8      	; 0x6818 <__udivmodqi4_ep>

00006810 <__udivmodqi4_loop>:
    6810:	99 1f       	adc	r25, r25
    6812:	96 17       	cp	r25, r22
    6814:	08 f0       	brcs	.+2      	; 0x6818 <__udivmodqi4_ep>
    6816:	96 1b       	sub	r25, r22

00006818 <__udivmodqi4_ep>:
    6818:	88 1f       	adc	r24, r24
    681a:	7a 95       	dec	r23
    681c:	c9 f7       	brne	.-14     	; 0x6810 <__udivmodqi4_loop>
    681e:	80 95       	com	r24
    6820:	08 95       	ret

00006822 <__udivmodhi4>:
    6822:	aa 1b       	sub	r26, r26
    6824:	bb 1b       	sub	r27, r27
    6826:	51 e1       	ldi	r21, 0x11	; 17
    6828:	07 c0       	rjmp	.+14     	; 0x6838 <__udivmodhi4_ep>

0000682a <__udivmodhi4_loop>:
    682a:	aa 1f       	adc	r26, r26
    682c:	bb 1f       	adc	r27, r27
    682e:	a6 17       	cp	r26, r22
    6830:	b7 07       	cpc	r27, r23
    6832:	10 f0       	brcs	.+4      	; 0x6838 <__udivmodhi4_ep>
    6834:	a6 1b       	sub	r26, r22
    6836:	b7 0b       	sbc	r27, r23

00006838 <__udivmodhi4_ep>:
    6838:	88 1f       	adc	r24, r24
    683a:	99 1f       	adc	r25, r25
    683c:	5a 95       	dec	r21
    683e:	a9 f7       	brne	.-22     	; 0x682a <__udivmodhi4_loop>
    6840:	80 95       	com	r24
    6842:	90 95       	com	r25
    6844:	bc 01       	movw	r22, r24
    6846:	cd 01       	movw	r24, r26
    6848:	08 95       	ret

0000684a <__divmodhi4>:
    684a:	97 fb       	bst	r25, 7
    684c:	09 2e       	mov	r0, r25
    684e:	07 26       	eor	r0, r23
    6850:	0a d0       	rcall	.+20     	; 0x6866 <__divmodhi4_neg1>
    6852:	77 fd       	sbrc	r23, 7
    6854:	04 d0       	rcall	.+8      	; 0x685e <__divmodhi4_neg2>
    6856:	e5 df       	rcall	.-54     	; 0x6822 <__udivmodhi4>
    6858:	06 d0       	rcall	.+12     	; 0x6866 <__divmodhi4_neg1>
    685a:	00 20       	and	r0, r0
    685c:	1a f4       	brpl	.+6      	; 0x6864 <__divmodhi4_exit>

0000685e <__divmodhi4_neg2>:
    685e:	70 95       	com	r23
    6860:	61 95       	neg	r22
    6862:	7f 4f       	sbci	r23, 0xFF	; 255

00006864 <__divmodhi4_exit>:
    6864:	08 95       	ret

00006866 <__divmodhi4_neg1>:
    6866:	f6 f7       	brtc	.-4      	; 0x6864 <__divmodhi4_exit>
    6868:	90 95       	com	r25
    686a:	81 95       	neg	r24
    686c:	9f 4f       	sbci	r25, 0xFF	; 255
    686e:	08 95       	ret

00006870 <__divmodsi4>:
    6870:	97 fb       	bst	r25, 7
    6872:	09 2e       	mov	r0, r25
    6874:	05 26       	eor	r0, r21
    6876:	0e d0       	rcall	.+28     	; 0x6894 <__divmodsi4_neg1>
    6878:	57 fd       	sbrc	r21, 7
    687a:	04 d0       	rcall	.+8      	; 0x6884 <__divmodsi4_neg2>
    687c:	14 d0       	rcall	.+40     	; 0x68a6 <__udivmodsi4>
    687e:	0a d0       	rcall	.+20     	; 0x6894 <__divmodsi4_neg1>
    6880:	00 1c       	adc	r0, r0
    6882:	38 f4       	brcc	.+14     	; 0x6892 <__divmodsi4_exit>

00006884 <__divmodsi4_neg2>:
    6884:	50 95       	com	r21
    6886:	40 95       	com	r20
    6888:	30 95       	com	r19
    688a:	21 95       	neg	r18
    688c:	3f 4f       	sbci	r19, 0xFF	; 255
    688e:	4f 4f       	sbci	r20, 0xFF	; 255
    6890:	5f 4f       	sbci	r21, 0xFF	; 255

00006892 <__divmodsi4_exit>:
    6892:	08 95       	ret

00006894 <__divmodsi4_neg1>:
    6894:	f6 f7       	brtc	.-4      	; 0x6892 <__divmodsi4_exit>
    6896:	90 95       	com	r25
    6898:	80 95       	com	r24
    689a:	70 95       	com	r23
    689c:	61 95       	neg	r22
    689e:	7f 4f       	sbci	r23, 0xFF	; 255
    68a0:	8f 4f       	sbci	r24, 0xFF	; 255
    68a2:	9f 4f       	sbci	r25, 0xFF	; 255
    68a4:	08 95       	ret

000068a6 <__udivmodsi4>:
    68a6:	a1 e2       	ldi	r26, 0x21	; 33
    68a8:	1a 2e       	mov	r1, r26
    68aa:	aa 1b       	sub	r26, r26
    68ac:	bb 1b       	sub	r27, r27
    68ae:	fd 01       	movw	r30, r26
    68b0:	0d c0       	rjmp	.+26     	; 0x68cc <__udivmodsi4_ep>

000068b2 <__udivmodsi4_loop>:
    68b2:	aa 1f       	adc	r26, r26
    68b4:	bb 1f       	adc	r27, r27
    68b6:	ee 1f       	adc	r30, r30
    68b8:	ff 1f       	adc	r31, r31
    68ba:	a2 17       	cp	r26, r18
    68bc:	b3 07       	cpc	r27, r19
    68be:	e4 07       	cpc	r30, r20
    68c0:	f5 07       	cpc	r31, r21
    68c2:	20 f0       	brcs	.+8      	; 0x68cc <__udivmodsi4_ep>
    68c4:	a2 1b       	sub	r26, r18
    68c6:	b3 0b       	sbc	r27, r19
    68c8:	e4 0b       	sbc	r30, r20
    68ca:	f5 0b       	sbc	r31, r21

000068cc <__udivmodsi4_ep>:
    68cc:	66 1f       	adc	r22, r22
    68ce:	77 1f       	adc	r23, r23
    68d0:	88 1f       	adc	r24, r24
    68d2:	99 1f       	adc	r25, r25
    68d4:	1a 94       	dec	r1
    68d6:	69 f7       	brne	.-38     	; 0x68b2 <__udivmodsi4_loop>
    68d8:	60 95       	com	r22
    68da:	70 95       	com	r23
    68dc:	80 95       	com	r24
    68de:	90 95       	com	r25
    68e0:	9b 01       	movw	r18, r22
    68e2:	ac 01       	movw	r20, r24
    68e4:	bd 01       	movw	r22, r26
    68e6:	cf 01       	movw	r24, r30
    68e8:	08 95       	ret

000068ea <__prologue_saves__>:
    68ea:	2f 92       	push	r2
    68ec:	3f 92       	push	r3
    68ee:	4f 92       	push	r4
    68f0:	5f 92       	push	r5
    68f2:	6f 92       	push	r6
    68f4:	7f 92       	push	r7
    68f6:	8f 92       	push	r8
    68f8:	9f 92       	push	r9
    68fa:	af 92       	push	r10
    68fc:	bf 92       	push	r11
    68fe:	cf 92       	push	r12
    6900:	df 92       	push	r13
    6902:	ef 92       	push	r14
    6904:	ff 92       	push	r15
    6906:	0f 93       	push	r16
    6908:	1f 93       	push	r17
    690a:	cf 93       	push	r28
    690c:	df 93       	push	r29
    690e:	cd b7       	in	r28, 0x3d	; 61
    6910:	de b7       	in	r29, 0x3e	; 62
    6912:	ca 1b       	sub	r28, r26
    6914:	db 0b       	sbc	r29, r27
    6916:	0f b6       	in	r0, 0x3f	; 63
    6918:	f8 94       	cli
    691a:	de bf       	out	0x3e, r29	; 62
    691c:	0f be       	out	0x3f, r0	; 63
    691e:	cd bf       	out	0x3d, r28	; 61
    6920:	09 94       	ijmp

00006922 <__epilogue_restores__>:
    6922:	2a 88       	ldd	r2, Y+18	; 0x12
    6924:	39 88       	ldd	r3, Y+17	; 0x11
    6926:	48 88       	ldd	r4, Y+16	; 0x10
    6928:	5f 84       	ldd	r5, Y+15	; 0x0f
    692a:	6e 84       	ldd	r6, Y+14	; 0x0e
    692c:	7d 84       	ldd	r7, Y+13	; 0x0d
    692e:	8c 84       	ldd	r8, Y+12	; 0x0c
    6930:	9b 84       	ldd	r9, Y+11	; 0x0b
    6932:	aa 84       	ldd	r10, Y+10	; 0x0a
    6934:	b9 84       	ldd	r11, Y+9	; 0x09
    6936:	c8 84       	ldd	r12, Y+8	; 0x08
    6938:	df 80       	ldd	r13, Y+7	; 0x07
    693a:	ee 80       	ldd	r14, Y+6	; 0x06
    693c:	fd 80       	ldd	r15, Y+5	; 0x05
    693e:	0c 81       	ldd	r16, Y+4	; 0x04
    6940:	1b 81       	ldd	r17, Y+3	; 0x03
    6942:	aa 81       	ldd	r26, Y+2	; 0x02
    6944:	b9 81       	ldd	r27, Y+1	; 0x01
    6946:	ce 0f       	add	r28, r30
    6948:	d1 1d       	adc	r29, r1
    694a:	0f b6       	in	r0, 0x3f	; 63
    694c:	f8 94       	cli
    694e:	de bf       	out	0x3e, r29	; 62
    6950:	0f be       	out	0x3f, r0	; 63
    6952:	cd bf       	out	0x3d, r28	; 61
    6954:	ed 01       	movw	r28, r26
    6956:	08 95       	ret

00006958 <_exit>:
    6958:	f8 94       	cli

0000695a <__stop_program>:
    695a:	ff cf       	rjmp	.-2      	; 0x695a <__stop_program>
