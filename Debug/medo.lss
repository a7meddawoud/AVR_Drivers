
medo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006b3c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000066  00800060  00006b3c  00006bd0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000026  008000c6  008000c6  00006c36  2**0
                  ALLOC
  3 .stab         000079ec  00000000  00000000  00006c38  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002ca6  00000000  00000000  0000e624  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000112ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0001140a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0001157a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000131c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000140ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00014e5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00014fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00015249  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00015a17  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3e 0e 	jmp	0x1c7c	; 0x1c7c <__vector_1>
       8:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 a9 09 	jmp	0x1352	; 0x1352 <__vector_6>
      1c:	0c 94 10 09 	jmp	0x1220	; 0x1220 <__vector_7>
      20:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__vector_8>
      24:	0c 94 76 09 	jmp	0x12ec	; 0x12ec <__vector_9>
      28:	0c 94 62 0a 	jmp	0x14c4	; 0x14c4 <__vector_10>
      2c:	0c 94 95 0a 	jmp	0x152a	; 0x152a <__vector_11>
      30:	0c 94 5b 0b 	jmp	0x16b6	; 0x16b6 <__vector_12>
      34:	0c 94 2c 06 	jmp	0xc58	; 0xc58 <__vector_13>
      38:	0c 94 5f 06 	jmp	0xcbe	; 0xcbe <__vector_14>
      3c:	0c 94 92 06 	jmp	0xd24	; 0xd24 <__vector_15>
      40:	0c 94 4e 13 	jmp	0x269c	; 0x269c <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 87 0c 	jmp	0x190e	; 0x190e <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e3       	ldi	r30, 0x3C	; 60
      68:	fb e6       	ldi	r31, 0x6B	; 107
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3c       	cpi	r26, 0xC6	; 198
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 ec       	ldi	r26, 0xC6	; 198
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 3e       	cpi	r26, 0xEC	; 236
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6f 34 	call	0x68de	; 0x68de <main>
      8a:	0c 94 9c 35 	jmp	0x6b38	; 0x6b38 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 65 35 	jmp	0x6aca	; 0x6aca <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 ea       	ldi	r26, 0xA5	; 165
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 81 35 	jmp	0x6b02	; 0x6b02 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 71 35 	jmp	0x6ae2	; 0x6ae2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 8d 35 	jmp	0x6b1a	; 0x6b1a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 71 35 	jmp	0x6ae2	; 0x6ae2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 8d 35 	jmp	0x6b1a	; 0x6b1a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 65 35 	jmp	0x6aca	; 0x6aca <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	85 ea       	ldi	r24, 0xA5	; 165
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 81 35 	jmp	0x6b02	; 0x6b02 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 71 35 	jmp	0x6ae2	; 0x6ae2 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 8d 35 	jmp	0x6b1a	; 0x6b1a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 71 35 	jmp	0x6ae2	; 0x6ae2 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 8d 35 	jmp	0x6b1a	; 0x6b1a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 71 35 	jmp	0x6ae2	; 0x6ae2 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 8d 35 	jmp	0x6b1a	; 0x6b1a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 75 35 	jmp	0x6aea	; 0x6aea <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 91 35 	jmp	0x6b22	; 0x6b22 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_vInit>:

void(*Uptr1)(void)='\0';
void(*Uptr2)(void)='\0';
void(*Uptr3)(void)='\0';

void UART_vInit(){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62

	SET_BIT(UCSRB,7);
	SET_BIT(UCSRB,6);
	SET_BIT(UCSRB,5);
#elif UARTMode==UARTPolling
	UBRRL=BaudRateRegisters;
     b4e:	e9 e2       	ldi	r30, 0x29	; 41
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	87 e6       	ldi	r24, 0x67	; 103
     b54:	80 83       	st	Z, r24
	SET_BIT(UCSRB,3);
     b56:	aa e2       	ldi	r26, 0x2A	; 42
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	ea e2       	ldi	r30, 0x2A	; 42
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	80 81       	ld	r24, Z
     b60:	88 60       	ori	r24, 0x08	; 8
     b62:	8c 93       	st	X, r24
	SET_BIT(UCSRB,4);
     b64:	aa e2       	ldi	r26, 0x2A	; 42
     b66:	b0 e0       	ldi	r27, 0x00	; 0
     b68:	ea e2       	ldi	r30, 0x2A	; 42
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	80 81       	ld	r24, Z
     b6e:	80 61       	ori	r24, 0x10	; 16
     b70:	8c 93       	st	X, r24
	UCSRC=0b10000110;
     b72:	e0 e4       	ldi	r30, 0x40	; 64
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	86 e8       	ldi	r24, 0x86	; 134
     b78:	80 83       	st	Z, r24
#endif
}
     b7a:	cf 91       	pop	r28
     b7c:	df 91       	pop	r29
     b7e:	08 95       	ret

00000b80 <UART_vSendChar>:
void UART_vSendChar(u8 Loc_SendChar){
     b80:	df 93       	push	r29
     b82:	cf 93       	push	r28
     b84:	0f 92       	push	r0
     b86:	cd b7       	in	r28, 0x3d	; 61
     b88:	de b7       	in	r29, 0x3e	; 62
     b8a:	89 83       	std	Y+1, r24	; 0x01
	while(GET_BIT(UCSRA,6));
     b8c:	ea e2       	ldi	r30, 0x2A	; 42
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	80 81       	ld	r24, Z
     b92:	82 95       	swap	r24
     b94:	86 95       	lsr	r24
     b96:	86 95       	lsr	r24
     b98:	83 70       	andi	r24, 0x03	; 3
     b9a:	88 2f       	mov	r24, r24
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	81 70       	andi	r24, 0x01	; 1
     ba0:	90 70       	andi	r25, 0x00	; 0
     ba2:	88 23       	and	r24, r24
     ba4:	99 f7       	brne	.-26     	; 0xb8c <UART_vSendChar+0xc>
	UDR=Loc_SendChar;
     ba6:	ec e2       	ldi	r30, 0x2C	; 44
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	89 81       	ldd	r24, Y+1	; 0x01
     bac:	80 83       	st	Z, r24
}
     bae:	0f 90       	pop	r0
     bb0:	cf 91       	pop	r28
     bb2:	df 91       	pop	r29
     bb4:	08 95       	ret

00000bb6 <UART_u8RecieveChar>:
u8 UART_u8RecieveChar(){
     bb6:	df 93       	push	r29
     bb8:	cf 93       	push	r28
     bba:	cd b7       	in	r28, 0x3d	; 61
     bbc:	de b7       	in	r29, 0x3e	; 62
	while(!(GET_BIT(UCSRA,7)));
     bbe:	ea e2       	ldi	r30, 0x2A	; 42
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	80 81       	ld	r24, Z
     bc4:	88 23       	and	r24, r24
     bc6:	dc f7       	brge	.-10     	; 0xbbe <UART_u8RecieveChar+0x8>
	return UDR;
     bc8:	ec e2       	ldi	r30, 0x2C	; 44
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	80 81       	ld	r24, Z
}
     bce:	cf 91       	pop	r28
     bd0:	df 91       	pop	r29
     bd2:	08 95       	ret

00000bd4 <UART_RXCompleteCallBack>:
void UART_RXCompleteCallBack(void(*ptr1)(void)){
     bd4:	df 93       	push	r29
     bd6:	cf 93       	push	r28
     bd8:	00 d0       	rcall	.+0      	; 0xbda <UART_RXCompleteCallBack+0x6>
     bda:	cd b7       	in	r28, 0x3d	; 61
     bdc:	de b7       	in	r29, 0x3e	; 62
     bde:	9a 83       	std	Y+2, r25	; 0x02
     be0:	89 83       	std	Y+1, r24	; 0x01
	if(ptr1!='\0'){
     be2:	89 81       	ldd	r24, Y+1	; 0x01
     be4:	9a 81       	ldd	r25, Y+2	; 0x02
     be6:	00 97       	sbiw	r24, 0x00	; 0
     be8:	31 f0       	breq	.+12     	; 0xbf6 <UART_RXCompleteCallBack+0x22>
		Uptr1=ptr1;
     bea:	89 81       	ldd	r24, Y+1	; 0x01
     bec:	9a 81       	ldd	r25, Y+2	; 0x02
     bee:	90 93 c7 00 	sts	0x00C7, r25
     bf2:	80 93 c6 00 	sts	0x00C6, r24
	}
}
     bf6:	0f 90       	pop	r0
     bf8:	0f 90       	pop	r0
     bfa:	cf 91       	pop	r28
     bfc:	df 91       	pop	r29
     bfe:	08 95       	ret

00000c00 <UART_TXCompleteCallBack>:
void UART_TXCompleteCallBack(void(*ptr2)(void)){
     c00:	df 93       	push	r29
     c02:	cf 93       	push	r28
     c04:	00 d0       	rcall	.+0      	; 0xc06 <UART_TXCompleteCallBack+0x6>
     c06:	cd b7       	in	r28, 0x3d	; 61
     c08:	de b7       	in	r29, 0x3e	; 62
     c0a:	9a 83       	std	Y+2, r25	; 0x02
     c0c:	89 83       	std	Y+1, r24	; 0x01
	if(ptr2!='\0'){
     c0e:	89 81       	ldd	r24, Y+1	; 0x01
     c10:	9a 81       	ldd	r25, Y+2	; 0x02
     c12:	00 97       	sbiw	r24, 0x00	; 0
     c14:	31 f0       	breq	.+12     	; 0xc22 <UART_TXCompleteCallBack+0x22>
		Uptr2=ptr2;
     c16:	89 81       	ldd	r24, Y+1	; 0x01
     c18:	9a 81       	ldd	r25, Y+2	; 0x02
     c1a:	90 93 c9 00 	sts	0x00C9, r25
     c1e:	80 93 c8 00 	sts	0x00C8, r24
	}
}
     c22:	0f 90       	pop	r0
     c24:	0f 90       	pop	r0
     c26:	cf 91       	pop	r28
     c28:	df 91       	pop	r29
     c2a:	08 95       	ret

00000c2c <UAART_DataRegisterEmptyCallBack>:
void UAART_DataRegisterEmptyCallBack(void(*ptr3)(void)){
     c2c:	df 93       	push	r29
     c2e:	cf 93       	push	r28
     c30:	00 d0       	rcall	.+0      	; 0xc32 <UAART_DataRegisterEmptyCallBack+0x6>
     c32:	cd b7       	in	r28, 0x3d	; 61
     c34:	de b7       	in	r29, 0x3e	; 62
     c36:	9a 83       	std	Y+2, r25	; 0x02
     c38:	89 83       	std	Y+1, r24	; 0x01
	if(ptr3!='\0'){
     c3a:	89 81       	ldd	r24, Y+1	; 0x01
     c3c:	9a 81       	ldd	r25, Y+2	; 0x02
     c3e:	00 97       	sbiw	r24, 0x00	; 0
     c40:	31 f0       	breq	.+12     	; 0xc4e <UAART_DataRegisterEmptyCallBack+0x22>
		Uptr3=ptr3;
     c42:	89 81       	ldd	r24, Y+1	; 0x01
     c44:	9a 81       	ldd	r25, Y+2	; 0x02
     c46:	90 93 cb 00 	sts	0x00CB, r25
     c4a:	80 93 ca 00 	sts	0x00CA, r24
	}
}
     c4e:	0f 90       	pop	r0
     c50:	0f 90       	pop	r0
     c52:	cf 91       	pop	r28
     c54:	df 91       	pop	r29
     c56:	08 95       	ret

00000c58 <__vector_13>:
ISR(USART_RXC_vect){
     c58:	1f 92       	push	r1
     c5a:	0f 92       	push	r0
     c5c:	0f b6       	in	r0, 0x3f	; 63
     c5e:	0f 92       	push	r0
     c60:	11 24       	eor	r1, r1
     c62:	2f 93       	push	r18
     c64:	3f 93       	push	r19
     c66:	4f 93       	push	r20
     c68:	5f 93       	push	r21
     c6a:	6f 93       	push	r22
     c6c:	7f 93       	push	r23
     c6e:	8f 93       	push	r24
     c70:	9f 93       	push	r25
     c72:	af 93       	push	r26
     c74:	bf 93       	push	r27
     c76:	ef 93       	push	r30
     c78:	ff 93       	push	r31
     c7a:	df 93       	push	r29
     c7c:	cf 93       	push	r28
     c7e:	cd b7       	in	r28, 0x3d	; 61
     c80:	de b7       	in	r29, 0x3e	; 62
	if(Uptr1!='\0'){
     c82:	80 91 c6 00 	lds	r24, 0x00C6
     c86:	90 91 c7 00 	lds	r25, 0x00C7
     c8a:	00 97       	sbiw	r24, 0x00	; 0
     c8c:	29 f0       	breq	.+10     	; 0xc98 <__vector_13+0x40>
		Uptr1();
     c8e:	e0 91 c6 00 	lds	r30, 0x00C6
     c92:	f0 91 c7 00 	lds	r31, 0x00C7
     c96:	09 95       	icall
	}
}
     c98:	cf 91       	pop	r28
     c9a:	df 91       	pop	r29
     c9c:	ff 91       	pop	r31
     c9e:	ef 91       	pop	r30
     ca0:	bf 91       	pop	r27
     ca2:	af 91       	pop	r26
     ca4:	9f 91       	pop	r25
     ca6:	8f 91       	pop	r24
     ca8:	7f 91       	pop	r23
     caa:	6f 91       	pop	r22
     cac:	5f 91       	pop	r21
     cae:	4f 91       	pop	r20
     cb0:	3f 91       	pop	r19
     cb2:	2f 91       	pop	r18
     cb4:	0f 90       	pop	r0
     cb6:	0f be       	out	0x3f, r0	; 63
     cb8:	0f 90       	pop	r0
     cba:	1f 90       	pop	r1
     cbc:	18 95       	reti

00000cbe <__vector_14>:
ISR(USART_UDRE_vect){
     cbe:	1f 92       	push	r1
     cc0:	0f 92       	push	r0
     cc2:	0f b6       	in	r0, 0x3f	; 63
     cc4:	0f 92       	push	r0
     cc6:	11 24       	eor	r1, r1
     cc8:	2f 93       	push	r18
     cca:	3f 93       	push	r19
     ccc:	4f 93       	push	r20
     cce:	5f 93       	push	r21
     cd0:	6f 93       	push	r22
     cd2:	7f 93       	push	r23
     cd4:	8f 93       	push	r24
     cd6:	9f 93       	push	r25
     cd8:	af 93       	push	r26
     cda:	bf 93       	push	r27
     cdc:	ef 93       	push	r30
     cde:	ff 93       	push	r31
     ce0:	df 93       	push	r29
     ce2:	cf 93       	push	r28
     ce4:	cd b7       	in	r28, 0x3d	; 61
     ce6:	de b7       	in	r29, 0x3e	; 62
	if(Uptr2!='\0'){
     ce8:	80 91 c8 00 	lds	r24, 0x00C8
     cec:	90 91 c9 00 	lds	r25, 0x00C9
     cf0:	00 97       	sbiw	r24, 0x00	; 0
     cf2:	29 f0       	breq	.+10     	; 0xcfe <__vector_14+0x40>
		Uptr2();
     cf4:	e0 91 c8 00 	lds	r30, 0x00C8
     cf8:	f0 91 c9 00 	lds	r31, 0x00C9
     cfc:	09 95       	icall
	}
}
     cfe:	cf 91       	pop	r28
     d00:	df 91       	pop	r29
     d02:	ff 91       	pop	r31
     d04:	ef 91       	pop	r30
     d06:	bf 91       	pop	r27
     d08:	af 91       	pop	r26
     d0a:	9f 91       	pop	r25
     d0c:	8f 91       	pop	r24
     d0e:	7f 91       	pop	r23
     d10:	6f 91       	pop	r22
     d12:	5f 91       	pop	r21
     d14:	4f 91       	pop	r20
     d16:	3f 91       	pop	r19
     d18:	2f 91       	pop	r18
     d1a:	0f 90       	pop	r0
     d1c:	0f be       	out	0x3f, r0	; 63
     d1e:	0f 90       	pop	r0
     d20:	1f 90       	pop	r1
     d22:	18 95       	reti

00000d24 <__vector_15>:
ISR(USART_TXC_vect){
     d24:	1f 92       	push	r1
     d26:	0f 92       	push	r0
     d28:	0f b6       	in	r0, 0x3f	; 63
     d2a:	0f 92       	push	r0
     d2c:	11 24       	eor	r1, r1
     d2e:	2f 93       	push	r18
     d30:	3f 93       	push	r19
     d32:	4f 93       	push	r20
     d34:	5f 93       	push	r21
     d36:	6f 93       	push	r22
     d38:	7f 93       	push	r23
     d3a:	8f 93       	push	r24
     d3c:	9f 93       	push	r25
     d3e:	af 93       	push	r26
     d40:	bf 93       	push	r27
     d42:	ef 93       	push	r30
     d44:	ff 93       	push	r31
     d46:	df 93       	push	r29
     d48:	cf 93       	push	r28
     d4a:	cd b7       	in	r28, 0x3d	; 61
     d4c:	de b7       	in	r29, 0x3e	; 62
	if(Uptr3!='\0'){
     d4e:	80 91 ca 00 	lds	r24, 0x00CA
     d52:	90 91 cb 00 	lds	r25, 0x00CB
     d56:	00 97       	sbiw	r24, 0x00	; 0
     d58:	29 f0       	breq	.+10     	; 0xd64 <__vector_15+0x40>
		Uptr3();
     d5a:	e0 91 ca 00 	lds	r30, 0x00CA
     d5e:	f0 91 cb 00 	lds	r31, 0x00CB
     d62:	09 95       	icall
	}
}
     d64:	cf 91       	pop	r28
     d66:	df 91       	pop	r29
     d68:	ff 91       	pop	r31
     d6a:	ef 91       	pop	r30
     d6c:	bf 91       	pop	r27
     d6e:	af 91       	pop	r26
     d70:	9f 91       	pop	r25
     d72:	8f 91       	pop	r24
     d74:	7f 91       	pop	r23
     d76:	6f 91       	pop	r22
     d78:	5f 91       	pop	r21
     d7a:	4f 91       	pop	r20
     d7c:	3f 91       	pop	r19
     d7e:	2f 91       	pop	r18
     d80:	0f 90       	pop	r0
     d82:	0f be       	out	0x3f, r0	; 63
     d84:	0f 90       	pop	r0
     d86:	1f 90       	pop	r1
     d88:	18 95       	reti

00000d8a <Timer1_vInit>:
u16 T1TimeOn;
u8 T1OnCounts;
u16 T1TimeTotal;
u8 T1TotalCounts;

void Timer1_vInit(){
     d8a:	df 93       	push	r29
     d8c:	cf 93       	push	r28
     d8e:	cd b7       	in	r28, 0x3d	; 61
     d90:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(DDRD,5); // Set Channel A Pin as OutPut
     d92:	a1 e3       	ldi	r26, 0x31	; 49
     d94:	b0 e0       	ldi	r27, 0x00	; 0
     d96:	e1 e3       	ldi	r30, 0x31	; 49
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	80 81       	ld	r24, Z
     d9c:	80 62       	ori	r24, 0x20	; 32
     d9e:	8c 93       	st	X, r24
	SET_BIT(DDRD,4); // Set Channel B Pin as OutPut
     da0:	a1 e3       	ldi	r26, 0x31	; 49
     da2:	b0 e0       	ldi	r27, 0x00	; 0
     da4:	e1 e3       	ldi	r30, 0x31	; 49
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	80 81       	ld	r24, Z
     daa:	80 61       	ori	r24, 0x10	; 16
     dac:	8c 93       	st	X, r24
	TCCR1B=0b00011000|Timer1Prescaler;
#elif Timer1_Mode==T1FastPWMICR1
	TCCR1A=0b10100010;
	TCCR1B=0b00011000|Timer1Prescaler;   // prescaler 8Bits
#elif Timer1_Mode==T1PhaseCorrectPWMICR1
	TCCR1A=0b10100010;
     dae:	ef e4       	ldi	r30, 0x4F	; 79
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	82 ea       	ldi	r24, 0xA2	; 162
     db4:	80 83       	st	Z, r24
	TCCR1B=0b00010000|Timer1Prescaler;
     db6:	ee e4       	ldi	r30, 0x4E	; 78
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	85 e1       	ldi	r24, 0x15	; 21
     dbc:	80 83       	st	Z, r24
	Timer1_vOverflowCallBack(Timer1_vOverflowCounter);
	Timer1_vIputCaptureCallBack(Timer1_vInputCaptureCal);
	CLR_BIT(DDRD,6); // Make Pin6 PortD Input
	SET_BIT(TCCR1B,6);  // Capture At rising Edge
#endif
}
     dbe:	cf 91       	pop	r28
     dc0:	df 91       	pop	r29
     dc2:	08 95       	ret

00000dc4 <Timer1_vIputCaptureUnit>:
void Timer1_vIputCaptureUnit(u32* duty,u32* Frequency){
     dc4:	ef 92       	push	r14
     dc6:	ff 92       	push	r15
     dc8:	0f 93       	push	r16
     dca:	1f 93       	push	r17
     dcc:	df 93       	push	r29
     dce:	cf 93       	push	r28
     dd0:	00 d0       	rcall	.+0      	; 0xdd2 <Timer1_vIputCaptureUnit+0xe>
     dd2:	00 d0       	rcall	.+0      	; 0xdd4 <Timer1_vIputCaptureUnit+0x10>
     dd4:	cd b7       	in	r28, 0x3d	; 61
     dd6:	de b7       	in	r29, 0x3e	; 62
     dd8:	9a 83       	std	Y+2, r25	; 0x02
     dda:	89 83       	std	Y+1, r24	; 0x01
     ddc:	7c 83       	std	Y+4, r23	; 0x04
     dde:	6b 83       	std	Y+3, r22	; 0x03
	if(T1Flag==3){
     de0:	80 91 d4 00 	lds	r24, 0x00D4
     de4:	83 30       	cpi	r24, 0x03	; 3
     de6:	09 f0       	breq	.+2      	; 0xdea <Timer1_vIputCaptureUnit+0x26>
     de8:	6f c0       	rjmp	.+222    	; 0xec8 <Timer1_vIputCaptureUnit+0x104>
		*duty=(u32)(((T1TimeOn+(T1OnCounts*65536))*100)/(T1TimeTotal)+(T1TotalCounts*65536));
     dea:	80 91 e6 00 	lds	r24, 0x00E6
     dee:	90 91 e7 00 	lds	r25, 0x00E7
     df2:	9c 01       	movw	r18, r24
     df4:	40 e0       	ldi	r20, 0x00	; 0
     df6:	50 e0       	ldi	r21, 0x00	; 0
     df8:	80 91 ea 00 	lds	r24, 0x00EA
     dfc:	88 2f       	mov	r24, r24
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	a0 e0       	ldi	r26, 0x00	; 0
     e02:	b0 e0       	ldi	r27, 0x00	; 0
     e04:	dc 01       	movw	r26, r24
     e06:	99 27       	eor	r25, r25
     e08:	88 27       	eor	r24, r24
     e0a:	82 0f       	add	r24, r18
     e0c:	93 1f       	adc	r25, r19
     e0e:	a4 1f       	adc	r26, r20
     e10:	b5 1f       	adc	r27, r21
     e12:	24 e6       	ldi	r18, 0x64	; 100
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	40 e0       	ldi	r20, 0x00	; 0
     e18:	50 e0       	ldi	r21, 0x00	; 0
     e1a:	bc 01       	movw	r22, r24
     e1c:	cd 01       	movw	r24, r26
     e1e:	0e 94 d6 34 	call	0x69ac	; 0x69ac <__mulsi3>
     e22:	7b 01       	movw	r14, r22
     e24:	8c 01       	movw	r16, r24
     e26:	80 91 e8 00 	lds	r24, 0x00E8
     e2a:	90 91 e9 00 	lds	r25, 0x00E9
     e2e:	9c 01       	movw	r18, r24
     e30:	40 e0       	ldi	r20, 0x00	; 0
     e32:	50 e0       	ldi	r21, 0x00	; 0
     e34:	c8 01       	movw	r24, r16
     e36:	b7 01       	movw	r22, r14
     e38:	0e 94 28 35 	call	0x6a50	; 0x6a50 <__divmodsi4>
     e3c:	da 01       	movw	r26, r20
     e3e:	c9 01       	movw	r24, r18
     e40:	9c 01       	movw	r18, r24
     e42:	ad 01       	movw	r20, r26
     e44:	80 91 e5 00 	lds	r24, 0x00E5
     e48:	88 2f       	mov	r24, r24
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	a0 e0       	ldi	r26, 0x00	; 0
     e4e:	b0 e0       	ldi	r27, 0x00	; 0
     e50:	dc 01       	movw	r26, r24
     e52:	99 27       	eor	r25, r25
     e54:	88 27       	eor	r24, r24
     e56:	82 0f       	add	r24, r18
     e58:	93 1f       	adc	r25, r19
     e5a:	a4 1f       	adc	r26, r20
     e5c:	b5 1f       	adc	r27, r21
     e5e:	e9 81       	ldd	r30, Y+1	; 0x01
     e60:	fa 81       	ldd	r31, Y+2	; 0x02
     e62:	80 83       	st	Z, r24
     e64:	91 83       	std	Z+1, r25	; 0x01
     e66:	a2 83       	std	Z+2, r26	; 0x02
     e68:	b3 83       	std	Z+3, r27	; 0x03
		*Frequency=(u32)(T1SystemFrequency/((T1TimeTotal+(T1TotalCounts*65536))*T1Prescaler));
     e6a:	80 91 e8 00 	lds	r24, 0x00E8
     e6e:	90 91 e9 00 	lds	r25, 0x00E9
     e72:	9c 01       	movw	r18, r24
     e74:	40 e0       	ldi	r20, 0x00	; 0
     e76:	50 e0       	ldi	r21, 0x00	; 0
     e78:	80 91 e5 00 	lds	r24, 0x00E5
     e7c:	88 2f       	mov	r24, r24
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	a0 e0       	ldi	r26, 0x00	; 0
     e82:	b0 e0       	ldi	r27, 0x00	; 0
     e84:	dc 01       	movw	r26, r24
     e86:	99 27       	eor	r25, r25
     e88:	88 27       	eor	r24, r24
     e8a:	82 0f       	add	r24, r18
     e8c:	93 1f       	adc	r25, r19
     e8e:	a4 1f       	adc	r26, r20
     e90:	b5 1f       	adc	r27, r21
     e92:	9c 01       	movw	r18, r24
     e94:	ad 01       	movw	r20, r26
     e96:	01 2e       	mov	r0, r17
     e98:	1a e0       	ldi	r17, 0x0A	; 10
     e9a:	22 0f       	add	r18, r18
     e9c:	33 1f       	adc	r19, r19
     e9e:	44 1f       	adc	r20, r20
     ea0:	55 1f       	adc	r21, r21
     ea2:	1a 95       	dec	r17
     ea4:	d1 f7       	brne	.-12     	; 0xe9a <Timer1_vIputCaptureUnit+0xd6>
     ea6:	10 2d       	mov	r17, r0
     ea8:	80 e0       	ldi	r24, 0x00	; 0
     eaa:	94 e2       	ldi	r25, 0x24	; 36
     eac:	a4 ef       	ldi	r26, 0xF4	; 244
     eae:	b0 e0       	ldi	r27, 0x00	; 0
     eb0:	bc 01       	movw	r22, r24
     eb2:	cd 01       	movw	r24, r26
     eb4:	0e 94 28 35 	call	0x6a50	; 0x6a50 <__divmodsi4>
     eb8:	da 01       	movw	r26, r20
     eba:	c9 01       	movw	r24, r18
     ebc:	eb 81       	ldd	r30, Y+3	; 0x03
     ebe:	fc 81       	ldd	r31, Y+4	; 0x04
     ec0:	80 83       	st	Z, r24
     ec2:	91 83       	std	Z+1, r25	; 0x01
     ec4:	a2 83       	std	Z+2, r26	; 0x02
     ec6:	b3 83       	std	Z+3, r27	; 0x03
	}
}
     ec8:	0f 90       	pop	r0
     eca:	0f 90       	pop	r0
     ecc:	0f 90       	pop	r0
     ece:	0f 90       	pop	r0
     ed0:	cf 91       	pop	r28
     ed2:	df 91       	pop	r29
     ed4:	1f 91       	pop	r17
     ed6:	0f 91       	pop	r16
     ed8:	ff 90       	pop	r15
     eda:	ef 90       	pop	r14
     edc:	08 95       	ret

00000ede <Timer1_vOverflowCounter>:
void Timer1_vOverflowCounter(){
     ede:	df 93       	push	r29
     ee0:	cf 93       	push	r28
     ee2:	cd b7       	in	r28, 0x3d	; 61
     ee4:	de b7       	in	r29, 0x3e	; 62
	T1Counter++;
     ee6:	80 91 eb 00 	lds	r24, 0x00EB
     eea:	8f 5f       	subi	r24, 0xFF	; 255
     eec:	80 93 eb 00 	sts	0x00EB, r24
}
     ef0:	cf 91       	pop	r28
     ef2:	df 91       	pop	r29
     ef4:	08 95       	ret

00000ef6 <Timer1_vInputCaptureCal>:
void Timer1_vInputCaptureCal(){
     ef6:	df 93       	push	r29
     ef8:	cf 93       	push	r28
     efa:	cd b7       	in	r28, 0x3d	; 61
     efc:	de b7       	in	r29, 0x3e	; 62
	if(T1Flag==0){
     efe:	80 91 d4 00 	lds	r24, 0x00D4
     f02:	88 23       	and	r24, r24
     f04:	f9 f4       	brne	.+62     	; 0xf44 <Timer1_vInputCaptureCal+0x4e>
		Timer1_vPreLoadResgister(0);
     f06:	80 e0       	ldi	r24, 0x00	; 0
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	0e 94 73 08 	call	0x10e6	; 0x10e6 <Timer1_vPreLoadResgister>
		T1TimeOn=0;
     f0e:	10 92 e7 00 	sts	0x00E7, r1
     f12:	10 92 e6 00 	sts	0x00E6, r1
		T1OnCounts=0;
     f16:	10 92 ea 00 	sts	0x00EA, r1
		T1TimeTotal=0;
     f1a:	10 92 e9 00 	sts	0x00E9, r1
     f1e:	10 92 e8 00 	sts	0x00E8, r1
		T1TotalCounts=0;
     f22:	10 92 e5 00 	sts	0x00E5, r1
		T1Counter=0;
     f26:	10 92 eb 00 	sts	0x00EB, r1
		CLR_BIT(TCCR1B,6);
     f2a:	ae e4       	ldi	r26, 0x4E	; 78
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	ee e4       	ldi	r30, 0x4E	; 78
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	8f 7b       	andi	r24, 0xBF	; 191
     f36:	8c 93       	st	X, r24
		T1Flag++;
     f38:	80 91 d4 00 	lds	r24, 0x00D4
     f3c:	8f 5f       	subi	r24, 0xFF	; 255
     f3e:	80 93 d4 00 	sts	0x00D4, r24
     f42:	2e c0       	rjmp	.+92     	; 0xfa0 <Timer1_vInputCaptureCal+0xaa>
	}
	else if(T1Flag==1){
     f44:	80 91 d4 00 	lds	r24, 0x00D4
     f48:	81 30       	cpi	r24, 0x01	; 1
     f4a:	b9 f4       	brne	.+46     	; 0xf7a <Timer1_vInputCaptureCal+0x84>
		T1TimeOn=Timer1_vReadTCNT1();
     f4c:	0e 94 33 08 	call	0x1066	; 0x1066 <Timer1_vReadTCNT1>
     f50:	90 93 e7 00 	sts	0x00E7, r25
     f54:	80 93 e6 00 	sts	0x00E6, r24
		T1OnCounts=T1Counter;
     f58:	80 91 eb 00 	lds	r24, 0x00EB
     f5c:	80 93 ea 00 	sts	0x00EA, r24
		SET_BIT(TCCR1B,6);
     f60:	ae e4       	ldi	r26, 0x4E	; 78
     f62:	b0 e0       	ldi	r27, 0x00	; 0
     f64:	ee e4       	ldi	r30, 0x4E	; 78
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	80 64       	ori	r24, 0x40	; 64
     f6c:	8c 93       	st	X, r24
		T1Flag++;
     f6e:	80 91 d4 00 	lds	r24, 0x00D4
     f72:	8f 5f       	subi	r24, 0xFF	; 255
     f74:	80 93 d4 00 	sts	0x00D4, r24
     f78:	13 c0       	rjmp	.+38     	; 0xfa0 <Timer1_vInputCaptureCal+0xaa>
	}
	else if(T1Flag==2){
     f7a:	80 91 d4 00 	lds	r24, 0x00D4
     f7e:	82 30       	cpi	r24, 0x02	; 2
     f80:	79 f4       	brne	.+30     	; 0xfa0 <Timer1_vInputCaptureCal+0xaa>
		T1TimeTotal=Timer1_vReadTCNT1();
     f82:	0e 94 33 08 	call	0x1066	; 0x1066 <Timer1_vReadTCNT1>
     f86:	90 93 e9 00 	sts	0x00E9, r25
     f8a:	80 93 e8 00 	sts	0x00E8, r24
		T1TotalCounts=T1Counter;
     f8e:	80 91 eb 00 	lds	r24, 0x00EB
     f92:	80 93 e5 00 	sts	0x00E5, r24
		T1Flag++;
     f96:	80 91 d4 00 	lds	r24, 0x00D4
     f9a:	8f 5f       	subi	r24, 0xFF	; 255
     f9c:	80 93 d4 00 	sts	0x00D4, r24
	}
}
     fa0:	cf 91       	pop	r28
     fa2:	df 91       	pop	r29
     fa4:	08 95       	ret

00000fa6 <Timer1_vIputCaptureInterruptEnable>:
void Timer1_vIputCaptureInterruptEnable(){
     fa6:	df 93       	push	r29
     fa8:	cf 93       	push	r28
     faa:	cd b7       	in	r28, 0x3d	; 61
     fac:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,5);
     fae:	a9 e5       	ldi	r26, 0x59	; 89
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	e9 e5       	ldi	r30, 0x59	; 89
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	80 62       	ori	r24, 0x20	; 32
     fba:	8c 93       	st	X, r24
}
     fbc:	cf 91       	pop	r28
     fbe:	df 91       	pop	r29
     fc0:	08 95       	ret

00000fc2 <Timer1_vCompareChannelAInterruptEnable>:
void Timer1_vCompareChannelAInterruptEnable(){
     fc2:	df 93       	push	r29
     fc4:	cf 93       	push	r28
     fc6:	cd b7       	in	r28, 0x3d	; 61
     fc8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,4);
     fca:	a9 e5       	ldi	r26, 0x59	; 89
     fcc:	b0 e0       	ldi	r27, 0x00	; 0
     fce:	e9 e5       	ldi	r30, 0x59	; 89
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	80 81       	ld	r24, Z
     fd4:	80 61       	ori	r24, 0x10	; 16
     fd6:	8c 93       	st	X, r24
}
     fd8:	cf 91       	pop	r28
     fda:	df 91       	pop	r29
     fdc:	08 95       	ret

00000fde <Timer1_vCompareChannelBInterruptEnable>:
void Timer1_vCompareChannelBInterruptEnable(){
     fde:	df 93       	push	r29
     fe0:	cf 93       	push	r28
     fe2:	cd b7       	in	r28, 0x3d	; 61
     fe4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,3);
     fe6:	a9 e5       	ldi	r26, 0x59	; 89
     fe8:	b0 e0       	ldi	r27, 0x00	; 0
     fea:	e9 e5       	ldi	r30, 0x59	; 89
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 81       	ld	r24, Z
     ff0:	88 60       	ori	r24, 0x08	; 8
     ff2:	8c 93       	st	X, r24
}
     ff4:	cf 91       	pop	r28
     ff6:	df 91       	pop	r29
     ff8:	08 95       	ret

00000ffa <Timer1_vOverflowInterruptEnable>:
void Timer1_vOverflowInterruptEnable(){
     ffa:	df 93       	push	r29
     ffc:	cf 93       	push	r28
     ffe:	cd b7       	in	r28, 0x3d	; 61
    1000:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,2);
    1002:	a9 e5       	ldi	r26, 0x59	; 89
    1004:	b0 e0       	ldi	r27, 0x00	; 0
    1006:	e9 e5       	ldi	r30, 0x59	; 89
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	84 60       	ori	r24, 0x04	; 4
    100e:	8c 93       	st	X, r24
}
    1010:	cf 91       	pop	r28
    1012:	df 91       	pop	r29
    1014:	08 95       	ret

00001016 <Timer1_vReadCompareChannelAFlag>:
u8 Timer1_vReadCompareChannelAFlag(){
    1016:	df 93       	push	r29
    1018:	cf 93       	push	r28
    101a:	cd b7       	in	r28, 0x3d	; 61
    101c:	de b7       	in	r29, 0x3e	; 62
	return GET_BIT(TIFR,4);
    101e:	e8 e5       	ldi	r30, 0x58	; 88
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	82 95       	swap	r24
    1026:	8f 70       	andi	r24, 0x0F	; 15
    1028:	81 70       	andi	r24, 0x01	; 1
}
    102a:	cf 91       	pop	r28
    102c:	df 91       	pop	r29
    102e:	08 95       	ret

00001030 <Timer1_vReadCompareChannelBFlag>:
u8 Timer1_vReadCompareChannelBFlag(){
    1030:	df 93       	push	r29
    1032:	cf 93       	push	r28
    1034:	cd b7       	in	r28, 0x3d	; 61
    1036:	de b7       	in	r29, 0x3e	; 62
	return GET_BIT(TIFR,3);
    1038:	e8 e5       	ldi	r30, 0x58	; 88
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	86 95       	lsr	r24
    1040:	86 95       	lsr	r24
    1042:	86 95       	lsr	r24
    1044:	81 70       	andi	r24, 0x01	; 1
}
    1046:	cf 91       	pop	r28
    1048:	df 91       	pop	r29
    104a:	08 95       	ret

0000104c <Timer1_vReadOverflowFlag>:
u8 Timer1_vReadOverflowFlag(){
    104c:	df 93       	push	r29
    104e:	cf 93       	push	r28
    1050:	cd b7       	in	r28, 0x3d	; 61
    1052:	de b7       	in	r29, 0x3e	; 62
	return GET_BIT(TIFR,2);
    1054:	e8 e5       	ldi	r30, 0x58	; 88
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	86 95       	lsr	r24
    105c:	86 95       	lsr	r24
    105e:	81 70       	andi	r24, 0x01	; 1
}
    1060:	cf 91       	pop	r28
    1062:	df 91       	pop	r29
    1064:	08 95       	ret

00001066 <Timer1_vReadTCNT1>:
u16 Timer1_vReadTCNT1(){
    1066:	df 93       	push	r29
    1068:	cf 93       	push	r28
    106a:	00 d0       	rcall	.+0      	; 0x106c <Timer1_vReadTCNT1+0x6>
    106c:	cd b7       	in	r28, 0x3d	; 61
    106e:	de b7       	in	r29, 0x3e	; 62
	u16 Read;
	Read=(((u16)TCNT1H)<<8);
    1070:	ed e4       	ldi	r30, 0x4D	; 77
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	88 2f       	mov	r24, r24
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	98 2f       	mov	r25, r24
    107c:	88 27       	eor	r24, r24
    107e:	9a 83       	std	Y+2, r25	; 0x02
    1080:	89 83       	std	Y+1, r24	; 0x01
	Read=Read|((u16)TCNT1L);
    1082:	ec e4       	ldi	r30, 0x4C	; 76
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	80 81       	ld	r24, Z
    1088:	28 2f       	mov	r18, r24
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	89 81       	ldd	r24, Y+1	; 0x01
    108e:	9a 81       	ldd	r25, Y+2	; 0x02
    1090:	82 2b       	or	r24, r18
    1092:	93 2b       	or	r25, r19
    1094:	9a 83       	std	Y+2, r25	; 0x02
    1096:	89 83       	std	Y+1, r24	; 0x01
	return Read;
    1098:	89 81       	ldd	r24, Y+1	; 0x01
    109a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    109c:	0f 90       	pop	r0
    109e:	0f 90       	pop	r0
    10a0:	cf 91       	pop	r28
    10a2:	df 91       	pop	r29
    10a4:	08 95       	ret

000010a6 <Timer1_vReadInputCaptureRegister>:
u16 Timer1_vReadInputCaptureRegister(){
    10a6:	df 93       	push	r29
    10a8:	cf 93       	push	r28
    10aa:	00 d0       	rcall	.+0      	; 0x10ac <Timer1_vReadInputCaptureRegister+0x6>
    10ac:	cd b7       	in	r28, 0x3d	; 61
    10ae:	de b7       	in	r29, 0x3e	; 62
	u16 Read;
	Read=(((u16)ICR1H)<<8);
    10b0:	e7 e4       	ldi	r30, 0x47	; 71
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	80 81       	ld	r24, Z
    10b6:	88 2f       	mov	r24, r24
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	98 2f       	mov	r25, r24
    10bc:	88 27       	eor	r24, r24
    10be:	9a 83       	std	Y+2, r25	; 0x02
    10c0:	89 83       	std	Y+1, r24	; 0x01
	Read=Read|((u16)ICR1L);
    10c2:	e6 e4       	ldi	r30, 0x46	; 70
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	80 81       	ld	r24, Z
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	89 81       	ldd	r24, Y+1	; 0x01
    10ce:	9a 81       	ldd	r25, Y+2	; 0x02
    10d0:	82 2b       	or	r24, r18
    10d2:	93 2b       	or	r25, r19
    10d4:	9a 83       	std	Y+2, r25	; 0x02
    10d6:	89 83       	std	Y+1, r24	; 0x01
	return Read;
    10d8:	89 81       	ldd	r24, Y+1	; 0x01
    10da:	9a 81       	ldd	r25, Y+2	; 0x02
}
    10dc:	0f 90       	pop	r0
    10de:	0f 90       	pop	r0
    10e0:	cf 91       	pop	r28
    10e2:	df 91       	pop	r29
    10e4:	08 95       	ret

000010e6 <Timer1_vPreLoadResgister>:

void Timer1_vPreLoadResgister(u16 Loc_val){
    10e6:	df 93       	push	r29
    10e8:	cf 93       	push	r28
    10ea:	00 d0       	rcall	.+0      	; 0x10ec <Timer1_vPreLoadResgister+0x6>
    10ec:	cd b7       	in	r28, 0x3d	; 61
    10ee:	de b7       	in	r29, 0x3e	; 62
    10f0:	9a 83       	std	Y+2, r25	; 0x02
    10f2:	89 83       	std	Y+1, r24	; 0x01
	TCNT1H=(Loc_val>>8);
    10f4:	ed e4       	ldi	r30, 0x4D	; 77
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	89 81       	ldd	r24, Y+1	; 0x01
    10fa:	9a 81       	ldd	r25, Y+2	; 0x02
    10fc:	89 2f       	mov	r24, r25
    10fe:	99 27       	eor	r25, r25
    1100:	80 83       	st	Z, r24
	TCNT1L=Loc_val;
    1102:	ec e4       	ldi	r30, 0x4C	; 76
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	89 81       	ldd	r24, Y+1	; 0x01
    1108:	80 83       	st	Z, r24
}
    110a:	0f 90       	pop	r0
    110c:	0f 90       	pop	r0
    110e:	cf 91       	pop	r28
    1110:	df 91       	pop	r29
    1112:	08 95       	ret

00001114 <Timer1_vChannelACopmareRegister>:
void Timer1_vChannelACopmareRegister(u16 Loc_val){
    1114:	df 93       	push	r29
    1116:	cf 93       	push	r28
    1118:	00 d0       	rcall	.+0      	; 0x111a <Timer1_vChannelACopmareRegister+0x6>
    111a:	cd b7       	in	r28, 0x3d	; 61
    111c:	de b7       	in	r29, 0x3e	; 62
    111e:	9a 83       	std	Y+2, r25	; 0x02
    1120:	89 83       	std	Y+1, r24	; 0x01
	OCR1AH=(Loc_val>>8);
    1122:	eb e4       	ldi	r30, 0x4B	; 75
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	89 81       	ldd	r24, Y+1	; 0x01
    1128:	9a 81       	ldd	r25, Y+2	; 0x02
    112a:	89 2f       	mov	r24, r25
    112c:	99 27       	eor	r25, r25
    112e:	80 83       	st	Z, r24
	OCR1AL=Loc_val;
    1130:	ea e4       	ldi	r30, 0x4A	; 74
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	89 81       	ldd	r24, Y+1	; 0x01
    1136:	80 83       	st	Z, r24
}
    1138:	0f 90       	pop	r0
    113a:	0f 90       	pop	r0
    113c:	cf 91       	pop	r28
    113e:	df 91       	pop	r29
    1140:	08 95       	ret

00001142 <Timer1_vChannelBCopmareRegister>:
void Timer1_vChannelBCopmareRegister(u16 Loc_val){
    1142:	df 93       	push	r29
    1144:	cf 93       	push	r28
    1146:	00 d0       	rcall	.+0      	; 0x1148 <Timer1_vChannelBCopmareRegister+0x6>
    1148:	cd b7       	in	r28, 0x3d	; 61
    114a:	de b7       	in	r29, 0x3e	; 62
    114c:	9a 83       	std	Y+2, r25	; 0x02
    114e:	89 83       	std	Y+1, r24	; 0x01
	OCR1BH=(Loc_val>>8);
    1150:	e9 e4       	ldi	r30, 0x49	; 73
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	89 81       	ldd	r24, Y+1	; 0x01
    1156:	9a 81       	ldd	r25, Y+2	; 0x02
    1158:	89 2f       	mov	r24, r25
    115a:	99 27       	eor	r25, r25
    115c:	80 83       	st	Z, r24
	OCR1BL=Loc_val;
    115e:	e8 e4       	ldi	r30, 0x48	; 72
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	89 81       	ldd	r24, Y+1	; 0x01
    1164:	80 83       	st	Z, r24
}
    1166:	0f 90       	pop	r0
    1168:	0f 90       	pop	r0
    116a:	cf 91       	pop	r28
    116c:	df 91       	pop	r29
    116e:	08 95       	ret

00001170 <Timer1_vOverflowCallBack>:
void Timer1_vOverflowCallBack(void(*ptr1)(void)){
    1170:	df 93       	push	r29
    1172:	cf 93       	push	r28
    1174:	00 d0       	rcall	.+0      	; 0x1176 <Timer1_vOverflowCallBack+0x6>
    1176:	cd b7       	in	r28, 0x3d	; 61
    1178:	de b7       	in	r29, 0x3e	; 62
    117a:	9a 83       	std	Y+2, r25	; 0x02
    117c:	89 83       	std	Y+1, r24	; 0x01
	if(ptr1!='\0'){
    117e:	89 81       	ldd	r24, Y+1	; 0x01
    1180:	9a 81       	ldd	r25, Y+2	; 0x02
    1182:	00 97       	sbiw	r24, 0x00	; 0
    1184:	31 f0       	breq	.+12     	; 0x1192 <Timer1_vOverflowCallBack+0x22>
		T1Ptr1=ptr1;
    1186:	89 81       	ldd	r24, Y+1	; 0x01
    1188:	9a 81       	ldd	r25, Y+2	; 0x02
    118a:	90 93 cd 00 	sts	0x00CD, r25
    118e:	80 93 cc 00 	sts	0x00CC, r24
	}
}
    1192:	0f 90       	pop	r0
    1194:	0f 90       	pop	r0
    1196:	cf 91       	pop	r28
    1198:	df 91       	pop	r29
    119a:	08 95       	ret

0000119c <Timer1_vChannelACompareCallBack>:
void Timer1_vChannelACompareCallBack(void(*ptr2)(void)){
    119c:	df 93       	push	r29
    119e:	cf 93       	push	r28
    11a0:	00 d0       	rcall	.+0      	; 0x11a2 <Timer1_vChannelACompareCallBack+0x6>
    11a2:	cd b7       	in	r28, 0x3d	; 61
    11a4:	de b7       	in	r29, 0x3e	; 62
    11a6:	9a 83       	std	Y+2, r25	; 0x02
    11a8:	89 83       	std	Y+1, r24	; 0x01
	if(ptr2!='\0'){
    11aa:	89 81       	ldd	r24, Y+1	; 0x01
    11ac:	9a 81       	ldd	r25, Y+2	; 0x02
    11ae:	00 97       	sbiw	r24, 0x00	; 0
    11b0:	31 f0       	breq	.+12     	; 0x11be <Timer1_vChannelACompareCallBack+0x22>
		T1Ptr2=ptr2;
    11b2:	89 81       	ldd	r24, Y+1	; 0x01
    11b4:	9a 81       	ldd	r25, Y+2	; 0x02
    11b6:	90 93 cf 00 	sts	0x00CF, r25
    11ba:	80 93 ce 00 	sts	0x00CE, r24
	}
}
    11be:	0f 90       	pop	r0
    11c0:	0f 90       	pop	r0
    11c2:	cf 91       	pop	r28
    11c4:	df 91       	pop	r29
    11c6:	08 95       	ret

000011c8 <Timer1_vChannelBCompareCallBack>:
void Timer1_vChannelBCompareCallBack(void(*ptr3)(void)){
    11c8:	df 93       	push	r29
    11ca:	cf 93       	push	r28
    11cc:	00 d0       	rcall	.+0      	; 0x11ce <Timer1_vChannelBCompareCallBack+0x6>
    11ce:	cd b7       	in	r28, 0x3d	; 61
    11d0:	de b7       	in	r29, 0x3e	; 62
    11d2:	9a 83       	std	Y+2, r25	; 0x02
    11d4:	89 83       	std	Y+1, r24	; 0x01
	if(ptr3!='\0'){
    11d6:	89 81       	ldd	r24, Y+1	; 0x01
    11d8:	9a 81       	ldd	r25, Y+2	; 0x02
    11da:	00 97       	sbiw	r24, 0x00	; 0
    11dc:	31 f0       	breq	.+12     	; 0x11ea <Timer1_vChannelBCompareCallBack+0x22>
		T1Ptr3=ptr3;
    11de:	89 81       	ldd	r24, Y+1	; 0x01
    11e0:	9a 81       	ldd	r25, Y+2	; 0x02
    11e2:	90 93 d1 00 	sts	0x00D1, r25
    11e6:	80 93 d0 00 	sts	0x00D0, r24
	}
}
    11ea:	0f 90       	pop	r0
    11ec:	0f 90       	pop	r0
    11ee:	cf 91       	pop	r28
    11f0:	df 91       	pop	r29
    11f2:	08 95       	ret

000011f4 <Timer1_vIputCaptureCallBack>:
void Timer1_vIputCaptureCallBack(void(*ptr4)(void)){
    11f4:	df 93       	push	r29
    11f6:	cf 93       	push	r28
    11f8:	00 d0       	rcall	.+0      	; 0x11fa <Timer1_vIputCaptureCallBack+0x6>
    11fa:	cd b7       	in	r28, 0x3d	; 61
    11fc:	de b7       	in	r29, 0x3e	; 62
    11fe:	9a 83       	std	Y+2, r25	; 0x02
    1200:	89 83       	std	Y+1, r24	; 0x01
	if(ptr4!='\0'){
    1202:	89 81       	ldd	r24, Y+1	; 0x01
    1204:	9a 81       	ldd	r25, Y+2	; 0x02
    1206:	00 97       	sbiw	r24, 0x00	; 0
    1208:	31 f0       	breq	.+12     	; 0x1216 <Timer1_vIputCaptureCallBack+0x22>
		T1Ptr4=ptr4;
    120a:	89 81       	ldd	r24, Y+1	; 0x01
    120c:	9a 81       	ldd	r25, Y+2	; 0x02
    120e:	90 93 d3 00 	sts	0x00D3, r25
    1212:	80 93 d2 00 	sts	0x00D2, r24
	}
}
    1216:	0f 90       	pop	r0
    1218:	0f 90       	pop	r0
    121a:	cf 91       	pop	r28
    121c:	df 91       	pop	r29
    121e:	08 95       	ret

00001220 <__vector_7>:
ISR(TIMER1_COMPA_vect){
    1220:	1f 92       	push	r1
    1222:	0f 92       	push	r0
    1224:	0f b6       	in	r0, 0x3f	; 63
    1226:	0f 92       	push	r0
    1228:	11 24       	eor	r1, r1
    122a:	2f 93       	push	r18
    122c:	3f 93       	push	r19
    122e:	4f 93       	push	r20
    1230:	5f 93       	push	r21
    1232:	6f 93       	push	r22
    1234:	7f 93       	push	r23
    1236:	8f 93       	push	r24
    1238:	9f 93       	push	r25
    123a:	af 93       	push	r26
    123c:	bf 93       	push	r27
    123e:	ef 93       	push	r30
    1240:	ff 93       	push	r31
    1242:	df 93       	push	r29
    1244:	cf 93       	push	r28
    1246:	cd b7       	in	r28, 0x3d	; 61
    1248:	de b7       	in	r29, 0x3e	; 62
	if(T1Ptr2!='\0'){
    124a:	80 91 ce 00 	lds	r24, 0x00CE
    124e:	90 91 cf 00 	lds	r25, 0x00CF
    1252:	00 97       	sbiw	r24, 0x00	; 0
    1254:	29 f0       	breq	.+10     	; 0x1260 <__vector_7+0x40>
		T1Ptr2();
    1256:	e0 91 ce 00 	lds	r30, 0x00CE
    125a:	f0 91 cf 00 	lds	r31, 0x00CF
    125e:	09 95       	icall
	}
}
    1260:	cf 91       	pop	r28
    1262:	df 91       	pop	r29
    1264:	ff 91       	pop	r31
    1266:	ef 91       	pop	r30
    1268:	bf 91       	pop	r27
    126a:	af 91       	pop	r26
    126c:	9f 91       	pop	r25
    126e:	8f 91       	pop	r24
    1270:	7f 91       	pop	r23
    1272:	6f 91       	pop	r22
    1274:	5f 91       	pop	r21
    1276:	4f 91       	pop	r20
    1278:	3f 91       	pop	r19
    127a:	2f 91       	pop	r18
    127c:	0f 90       	pop	r0
    127e:	0f be       	out	0x3f, r0	; 63
    1280:	0f 90       	pop	r0
    1282:	1f 90       	pop	r1
    1284:	18 95       	reti

00001286 <__vector_8>:
ISR(TIMER1_COMPB_vect){
    1286:	1f 92       	push	r1
    1288:	0f 92       	push	r0
    128a:	0f b6       	in	r0, 0x3f	; 63
    128c:	0f 92       	push	r0
    128e:	11 24       	eor	r1, r1
    1290:	2f 93       	push	r18
    1292:	3f 93       	push	r19
    1294:	4f 93       	push	r20
    1296:	5f 93       	push	r21
    1298:	6f 93       	push	r22
    129a:	7f 93       	push	r23
    129c:	8f 93       	push	r24
    129e:	9f 93       	push	r25
    12a0:	af 93       	push	r26
    12a2:	bf 93       	push	r27
    12a4:	ef 93       	push	r30
    12a6:	ff 93       	push	r31
    12a8:	df 93       	push	r29
    12aa:	cf 93       	push	r28
    12ac:	cd b7       	in	r28, 0x3d	; 61
    12ae:	de b7       	in	r29, 0x3e	; 62
	if(T1Ptr3!='\0'){
    12b0:	80 91 d0 00 	lds	r24, 0x00D0
    12b4:	90 91 d1 00 	lds	r25, 0x00D1
    12b8:	00 97       	sbiw	r24, 0x00	; 0
    12ba:	29 f0       	breq	.+10     	; 0x12c6 <__vector_8+0x40>
		T1Ptr3();
    12bc:	e0 91 d0 00 	lds	r30, 0x00D0
    12c0:	f0 91 d1 00 	lds	r31, 0x00D1
    12c4:	09 95       	icall
	}
}
    12c6:	cf 91       	pop	r28
    12c8:	df 91       	pop	r29
    12ca:	ff 91       	pop	r31
    12cc:	ef 91       	pop	r30
    12ce:	bf 91       	pop	r27
    12d0:	af 91       	pop	r26
    12d2:	9f 91       	pop	r25
    12d4:	8f 91       	pop	r24
    12d6:	7f 91       	pop	r23
    12d8:	6f 91       	pop	r22
    12da:	5f 91       	pop	r21
    12dc:	4f 91       	pop	r20
    12de:	3f 91       	pop	r19
    12e0:	2f 91       	pop	r18
    12e2:	0f 90       	pop	r0
    12e4:	0f be       	out	0x3f, r0	; 63
    12e6:	0f 90       	pop	r0
    12e8:	1f 90       	pop	r1
    12ea:	18 95       	reti

000012ec <__vector_9>:
ISR(TIMER1_OVF_vect){
    12ec:	1f 92       	push	r1
    12ee:	0f 92       	push	r0
    12f0:	0f b6       	in	r0, 0x3f	; 63
    12f2:	0f 92       	push	r0
    12f4:	11 24       	eor	r1, r1
    12f6:	2f 93       	push	r18
    12f8:	3f 93       	push	r19
    12fa:	4f 93       	push	r20
    12fc:	5f 93       	push	r21
    12fe:	6f 93       	push	r22
    1300:	7f 93       	push	r23
    1302:	8f 93       	push	r24
    1304:	9f 93       	push	r25
    1306:	af 93       	push	r26
    1308:	bf 93       	push	r27
    130a:	ef 93       	push	r30
    130c:	ff 93       	push	r31
    130e:	df 93       	push	r29
    1310:	cf 93       	push	r28
    1312:	cd b7       	in	r28, 0x3d	; 61
    1314:	de b7       	in	r29, 0x3e	; 62
	if(T1Ptr1!='\0'){
    1316:	80 91 cc 00 	lds	r24, 0x00CC
    131a:	90 91 cd 00 	lds	r25, 0x00CD
    131e:	00 97       	sbiw	r24, 0x00	; 0
    1320:	29 f0       	breq	.+10     	; 0x132c <__vector_9+0x40>
		T1Ptr1();
    1322:	e0 91 cc 00 	lds	r30, 0x00CC
    1326:	f0 91 cd 00 	lds	r31, 0x00CD
    132a:	09 95       	icall
	}
}
    132c:	cf 91       	pop	r28
    132e:	df 91       	pop	r29
    1330:	ff 91       	pop	r31
    1332:	ef 91       	pop	r30
    1334:	bf 91       	pop	r27
    1336:	af 91       	pop	r26
    1338:	9f 91       	pop	r25
    133a:	8f 91       	pop	r24
    133c:	7f 91       	pop	r23
    133e:	6f 91       	pop	r22
    1340:	5f 91       	pop	r21
    1342:	4f 91       	pop	r20
    1344:	3f 91       	pop	r19
    1346:	2f 91       	pop	r18
    1348:	0f 90       	pop	r0
    134a:	0f be       	out	0x3f, r0	; 63
    134c:	0f 90       	pop	r0
    134e:	1f 90       	pop	r1
    1350:	18 95       	reti

00001352 <__vector_6>:
ISR(TIMER1_CAPT_vect){
    1352:	1f 92       	push	r1
    1354:	0f 92       	push	r0
    1356:	0f b6       	in	r0, 0x3f	; 63
    1358:	0f 92       	push	r0
    135a:	11 24       	eor	r1, r1
    135c:	2f 93       	push	r18
    135e:	3f 93       	push	r19
    1360:	4f 93       	push	r20
    1362:	5f 93       	push	r21
    1364:	6f 93       	push	r22
    1366:	7f 93       	push	r23
    1368:	8f 93       	push	r24
    136a:	9f 93       	push	r25
    136c:	af 93       	push	r26
    136e:	bf 93       	push	r27
    1370:	ef 93       	push	r30
    1372:	ff 93       	push	r31
    1374:	df 93       	push	r29
    1376:	cf 93       	push	r28
    1378:	cd b7       	in	r28, 0x3d	; 61
    137a:	de b7       	in	r29, 0x3e	; 62
	if(T1Ptr4!='\0'){
    137c:	80 91 d2 00 	lds	r24, 0x00D2
    1380:	90 91 d3 00 	lds	r25, 0x00D3
    1384:	00 97       	sbiw	r24, 0x00	; 0
    1386:	29 f0       	breq	.+10     	; 0x1392 <__vector_6+0x40>
		T1Ptr4();
    1388:	e0 91 d2 00 	lds	r30, 0x00D2
    138c:	f0 91 d3 00 	lds	r31, 0x00D3
    1390:	09 95       	icall
	}
}
    1392:	cf 91       	pop	r28
    1394:	df 91       	pop	r29
    1396:	ff 91       	pop	r31
    1398:	ef 91       	pop	r30
    139a:	bf 91       	pop	r27
    139c:	af 91       	pop	r26
    139e:	9f 91       	pop	r25
    13a0:	8f 91       	pop	r24
    13a2:	7f 91       	pop	r23
    13a4:	6f 91       	pop	r22
    13a6:	5f 91       	pop	r21
    13a8:	4f 91       	pop	r20
    13aa:	3f 91       	pop	r19
    13ac:	2f 91       	pop	r18
    13ae:	0f 90       	pop	r0
    13b0:	0f be       	out	0x3f, r0	; 63
    13b2:	0f 90       	pop	r0
    13b4:	1f 90       	pop	r1
    13b6:	18 95       	reti

000013b8 <Timer0_vInit>:
 *      Author: a7med
 */
#include "Timer0.h"
void(*Tptr1)(void)='\0';
void(*Tptr2)(void)='\0';
void Timer0_vInit(){
    13b8:	df 93       	push	r29
    13ba:	cf 93       	push	r28
    13bc:	cd b7       	in	r28, 0x3d	; 61
    13be:	de b7       	in	r29, 0x3e	; 62
#if Timer0_Mode==T0NormalMode
	TCCR0= 0x00|Timer0Prescaler;

#elif Timer0_Mode==T0CTCMode
	TCCR0=0x08|Timer0Prescaler;
    13c0:	e3 e5       	ldi	r30, 0x53	; 83
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	8b e0       	ldi	r24, 0x0B	; 11
    13c6:	80 83       	st	Z, r24
#elif Timer0_Mode==T0PWMFastMode
	TCCR0= 0x44|Timer0Prescaler;
#elif Timer0_Mode==T0PWMPhaseCorrectMode
	TCCR0= 0x40|Timer0Prescaler;
#endif
}
    13c8:	cf 91       	pop	r28
    13ca:	df 91       	pop	r29
    13cc:	08 95       	ret

000013ce <Timer0_vEnableCompareInterrupt>:
void Timer0_vEnableCompareInterrupt(){
    13ce:	df 93       	push	r29
    13d0:	cf 93       	push	r28
    13d2:	cd b7       	in	r28, 0x3d	; 61
    13d4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,1);
    13d6:	a9 e5       	ldi	r26, 0x59	; 89
    13d8:	b0 e0       	ldi	r27, 0x00	; 0
    13da:	e9 e5       	ldi	r30, 0x59	; 89
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	80 81       	ld	r24, Z
    13e0:	82 60       	ori	r24, 0x02	; 2
    13e2:	8c 93       	st	X, r24
}
    13e4:	cf 91       	pop	r28
    13e6:	df 91       	pop	r29
    13e8:	08 95       	ret

000013ea <Timer0_vEnableOverflowInterrupt>:
void Timer0_vEnableOverflowInterrupt(){
    13ea:	df 93       	push	r29
    13ec:	cf 93       	push	r28
    13ee:	cd b7       	in	r28, 0x3d	; 61
    13f0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,0);
    13f2:	a9 e5       	ldi	r26, 0x59	; 89
    13f4:	b0 e0       	ldi	r27, 0x00	; 0
    13f6:	e9 e5       	ldi	r30, 0x59	; 89
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	80 81       	ld	r24, Z
    13fc:	81 60       	ori	r24, 0x01	; 1
    13fe:	8c 93       	st	X, r24
}
    1400:	cf 91       	pop	r28
    1402:	df 91       	pop	r29
    1404:	08 95       	ret

00001406 <Timer0_u8ReadCompareFlag>:
u8 Timer0_u8ReadCompareFlag(){
    1406:	df 93       	push	r29
    1408:	cf 93       	push	r28
    140a:	cd b7       	in	r28, 0x3d	; 61
    140c:	de b7       	in	r29, 0x3e	; 62
	return GET_BIT(TIFR,1);
    140e:	e8 e5       	ldi	r30, 0x58	; 88
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	80 81       	ld	r24, Z
    1414:	86 95       	lsr	r24
    1416:	81 70       	andi	r24, 0x01	; 1
}
    1418:	cf 91       	pop	r28
    141a:	df 91       	pop	r29
    141c:	08 95       	ret

0000141e <Timer0_u8ReadOverflowFlag>:
u8 Timer0_u8ReadOverflowFlag(){
    141e:	df 93       	push	r29
    1420:	cf 93       	push	r28
    1422:	cd b7       	in	r28, 0x3d	; 61
    1424:	de b7       	in	r29, 0x3e	; 62
	return GET_BIT(TIFR,0);
    1426:	e8 e5       	ldi	r30, 0x58	; 88
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	80 81       	ld	r24, Z
    142c:	81 70       	andi	r24, 0x01	; 1
}
    142e:	cf 91       	pop	r28
    1430:	df 91       	pop	r29
    1432:	08 95       	ret

00001434 <Timer0_vCounterRegister>:
void Timer0_vCounterRegister(u8 Loc_u8CounterVal){
    1434:	df 93       	push	r29
    1436:	cf 93       	push	r28
    1438:	0f 92       	push	r0
    143a:	cd b7       	in	r28, 0x3d	; 61
    143c:	de b7       	in	r29, 0x3e	; 62
    143e:	89 83       	std	Y+1, r24	; 0x01
	TCNT0= Loc_u8CounterVal;
    1440:	e2 e5       	ldi	r30, 0x52	; 82
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	89 81       	ldd	r24, Y+1	; 0x01
    1446:	80 83       	st	Z, r24
}
    1448:	0f 90       	pop	r0
    144a:	cf 91       	pop	r28
    144c:	df 91       	pop	r29
    144e:	08 95       	ret

00001450 <Timer0_vCompareRegister>:
void Timer0_vCompareRegister(u8 Loc_u8CompareVal){
    1450:	df 93       	push	r29
    1452:	cf 93       	push	r28
    1454:	0f 92       	push	r0
    1456:	cd b7       	in	r28, 0x3d	; 61
    1458:	de b7       	in	r29, 0x3e	; 62
    145a:	89 83       	std	Y+1, r24	; 0x01
	OCR0=Loc_u8CompareVal;
    145c:	ec e5       	ldi	r30, 0x5C	; 92
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	89 81       	ldd	r24, Y+1	; 0x01
    1462:	80 83       	st	Z, r24
}
    1464:	0f 90       	pop	r0
    1466:	cf 91       	pop	r28
    1468:	df 91       	pop	r29
    146a:	08 95       	ret

0000146c <Timer0_vCompareCallBack>:
void Timer0_vCompareCallBack(void(*ptr)(void)){
    146c:	df 93       	push	r29
    146e:	cf 93       	push	r28
    1470:	00 d0       	rcall	.+0      	; 0x1472 <Timer0_vCompareCallBack+0x6>
    1472:	cd b7       	in	r28, 0x3d	; 61
    1474:	de b7       	in	r29, 0x3e	; 62
    1476:	9a 83       	std	Y+2, r25	; 0x02
    1478:	89 83       	std	Y+1, r24	; 0x01
	if(ptr!='\0'){
    147a:	89 81       	ldd	r24, Y+1	; 0x01
    147c:	9a 81       	ldd	r25, Y+2	; 0x02
    147e:	00 97       	sbiw	r24, 0x00	; 0
    1480:	31 f0       	breq	.+12     	; 0x148e <Timer0_vCompareCallBack+0x22>
		Tptr1=ptr;
    1482:	89 81       	ldd	r24, Y+1	; 0x01
    1484:	9a 81       	ldd	r25, Y+2	; 0x02
    1486:	90 93 d6 00 	sts	0x00D6, r25
    148a:	80 93 d5 00 	sts	0x00D5, r24
	}
}
    148e:	0f 90       	pop	r0
    1490:	0f 90       	pop	r0
    1492:	cf 91       	pop	r28
    1494:	df 91       	pop	r29
    1496:	08 95       	ret

00001498 <Timer0_vOverflowCallBack>:
void Timer0_vOverflowCallBack(void(*ptr)(void)){
    1498:	df 93       	push	r29
    149a:	cf 93       	push	r28
    149c:	00 d0       	rcall	.+0      	; 0x149e <Timer0_vOverflowCallBack+0x6>
    149e:	cd b7       	in	r28, 0x3d	; 61
    14a0:	de b7       	in	r29, 0x3e	; 62
    14a2:	9a 83       	std	Y+2, r25	; 0x02
    14a4:	89 83       	std	Y+1, r24	; 0x01
	if(ptr!='\0'){
    14a6:	89 81       	ldd	r24, Y+1	; 0x01
    14a8:	9a 81       	ldd	r25, Y+2	; 0x02
    14aa:	00 97       	sbiw	r24, 0x00	; 0
    14ac:	31 f0       	breq	.+12     	; 0x14ba <Timer0_vOverflowCallBack+0x22>
		Tptr2=ptr;
    14ae:	89 81       	ldd	r24, Y+1	; 0x01
    14b0:	9a 81       	ldd	r25, Y+2	; 0x02
    14b2:	90 93 d8 00 	sts	0x00D8, r25
    14b6:	80 93 d7 00 	sts	0x00D7, r24
	}
}
    14ba:	0f 90       	pop	r0
    14bc:	0f 90       	pop	r0
    14be:	cf 91       	pop	r28
    14c0:	df 91       	pop	r29
    14c2:	08 95       	ret

000014c4 <__vector_10>:
ISR(TIMER0_COMP_vect){
    14c4:	1f 92       	push	r1
    14c6:	0f 92       	push	r0
    14c8:	0f b6       	in	r0, 0x3f	; 63
    14ca:	0f 92       	push	r0
    14cc:	11 24       	eor	r1, r1
    14ce:	2f 93       	push	r18
    14d0:	3f 93       	push	r19
    14d2:	4f 93       	push	r20
    14d4:	5f 93       	push	r21
    14d6:	6f 93       	push	r22
    14d8:	7f 93       	push	r23
    14da:	8f 93       	push	r24
    14dc:	9f 93       	push	r25
    14de:	af 93       	push	r26
    14e0:	bf 93       	push	r27
    14e2:	ef 93       	push	r30
    14e4:	ff 93       	push	r31
    14e6:	df 93       	push	r29
    14e8:	cf 93       	push	r28
    14ea:	cd b7       	in	r28, 0x3d	; 61
    14ec:	de b7       	in	r29, 0x3e	; 62
	if(Tptr1!='\0'){
    14ee:	80 91 d5 00 	lds	r24, 0x00D5
    14f2:	90 91 d6 00 	lds	r25, 0x00D6
    14f6:	00 97       	sbiw	r24, 0x00	; 0
    14f8:	29 f0       	breq	.+10     	; 0x1504 <__vector_10+0x40>
		Tptr1();
    14fa:	e0 91 d5 00 	lds	r30, 0x00D5
    14fe:	f0 91 d6 00 	lds	r31, 0x00D6
    1502:	09 95       	icall
	}
}
    1504:	cf 91       	pop	r28
    1506:	df 91       	pop	r29
    1508:	ff 91       	pop	r31
    150a:	ef 91       	pop	r30
    150c:	bf 91       	pop	r27
    150e:	af 91       	pop	r26
    1510:	9f 91       	pop	r25
    1512:	8f 91       	pop	r24
    1514:	7f 91       	pop	r23
    1516:	6f 91       	pop	r22
    1518:	5f 91       	pop	r21
    151a:	4f 91       	pop	r20
    151c:	3f 91       	pop	r19
    151e:	2f 91       	pop	r18
    1520:	0f 90       	pop	r0
    1522:	0f be       	out	0x3f, r0	; 63
    1524:	0f 90       	pop	r0
    1526:	1f 90       	pop	r1
    1528:	18 95       	reti

0000152a <__vector_11>:
ISR(TIMER0_OVF_vect){
    152a:	1f 92       	push	r1
    152c:	0f 92       	push	r0
    152e:	0f b6       	in	r0, 0x3f	; 63
    1530:	0f 92       	push	r0
    1532:	11 24       	eor	r1, r1
    1534:	2f 93       	push	r18
    1536:	3f 93       	push	r19
    1538:	4f 93       	push	r20
    153a:	5f 93       	push	r21
    153c:	6f 93       	push	r22
    153e:	7f 93       	push	r23
    1540:	8f 93       	push	r24
    1542:	9f 93       	push	r25
    1544:	af 93       	push	r26
    1546:	bf 93       	push	r27
    1548:	ef 93       	push	r30
    154a:	ff 93       	push	r31
    154c:	df 93       	push	r29
    154e:	cf 93       	push	r28
    1550:	cd b7       	in	r28, 0x3d	; 61
    1552:	de b7       	in	r29, 0x3e	; 62
	if(Tptr2!='\0'){
    1554:	80 91 d7 00 	lds	r24, 0x00D7
    1558:	90 91 d8 00 	lds	r25, 0x00D8
    155c:	00 97       	sbiw	r24, 0x00	; 0
    155e:	29 f0       	breq	.+10     	; 0x156a <__vector_11+0x40>
		Tptr2();
    1560:	e0 91 d7 00 	lds	r30, 0x00D7
    1564:	f0 91 d8 00 	lds	r31, 0x00D8
    1568:	09 95       	icall
	}
}
    156a:	cf 91       	pop	r28
    156c:	df 91       	pop	r29
    156e:	ff 91       	pop	r31
    1570:	ef 91       	pop	r30
    1572:	bf 91       	pop	r27
    1574:	af 91       	pop	r26
    1576:	9f 91       	pop	r25
    1578:	8f 91       	pop	r24
    157a:	7f 91       	pop	r23
    157c:	6f 91       	pop	r22
    157e:	5f 91       	pop	r21
    1580:	4f 91       	pop	r20
    1582:	3f 91       	pop	r19
    1584:	2f 91       	pop	r18
    1586:	0f 90       	pop	r0
    1588:	0f be       	out	0x3f, r0	; 63
    158a:	0f 90       	pop	r0
    158c:	1f 90       	pop	r1
    158e:	18 95       	reti

00001590 <SPI_vInit>:
 */
#include "SPI.h"

void(*Sptr)(void)='\0';

void SPI_vInit(){
    1590:	df 93       	push	r29
    1592:	cf 93       	push	r28
    1594:	cd b7       	in	r28, 0x3d	; 61
    1596:	de b7       	in	r29, 0x3e	; 62
		CLR_BIT(DDRB,4);
		CLR_BIT(DDRB,5);
		SET_BIT(DDRB,6);
		CLR_BIT(DDRB,7);
	#elif SPIMode==SPIMaster
		SPCR=0b00110000|SPIPrescaler;
    1598:	ed e2       	ldi	r30, 0x2D	; 45
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	84 e3       	ldi	r24, 0x34	; 52
    159e:	80 83       	st	Z, r24
		CLR_BIT(SPSR,0);
    15a0:	ae e2       	ldi	r26, 0x2E	; 46
    15a2:	b0 e0       	ldi	r27, 0x00	; 0
    15a4:	ee e2       	ldi	r30, 0x2E	; 46
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	80 81       	ld	r24, Z
    15aa:	8e 7f       	andi	r24, 0xFE	; 254
    15ac:	8c 93       	st	X, r24
		SET_BIT(DDRB,4);
    15ae:	a7 e3       	ldi	r26, 0x37	; 55
    15b0:	b0 e0       	ldi	r27, 0x00	; 0
    15b2:	e7 e3       	ldi	r30, 0x37	; 55
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	80 81       	ld	r24, Z
    15b8:	80 61       	ori	r24, 0x10	; 16
    15ba:	8c 93       	st	X, r24
		SET_BIT(DDRB,5);
    15bc:	a7 e3       	ldi	r26, 0x37	; 55
    15be:	b0 e0       	ldi	r27, 0x00	; 0
    15c0:	e7 e3       	ldi	r30, 0x37	; 55
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	80 81       	ld	r24, Z
    15c6:	80 62       	ori	r24, 0x20	; 32
    15c8:	8c 93       	st	X, r24
		CLR_BIT(DDRB,6);
    15ca:	a7 e3       	ldi	r26, 0x37	; 55
    15cc:	b0 e0       	ldi	r27, 0x00	; 0
    15ce:	e7 e3       	ldi	r30, 0x37	; 55
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	80 81       	ld	r24, Z
    15d4:	8f 7b       	andi	r24, 0xBF	; 191
    15d6:	8c 93       	st	X, r24
		SET_BIT(DDRB,7);
    15d8:	a7 e3       	ldi	r26, 0x37	; 55
    15da:	b0 e0       	ldi	r27, 0x00	; 0
    15dc:	e7 e3       	ldi	r30, 0x37	; 55
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	80 81       	ld	r24, Z
    15e2:	80 68       	ori	r24, 0x80	; 128
    15e4:	8c 93       	st	X, r24

		SET_BIT(SPCR,6);
    15e6:	ad e2       	ldi	r26, 0x2D	; 45
    15e8:	b0 e0       	ldi	r27, 0x00	; 0
    15ea:	ed e2       	ldi	r30, 0x2D	; 45
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	80 81       	ld	r24, Z
    15f0:	80 64       	ori	r24, 0x40	; 64
    15f2:	8c 93       	st	X, r24
		CLR_BIT(DDRB,6);
		SET_BIT(DDRB,7);
	#endif
#endif

}
    15f4:	cf 91       	pop	r28
    15f6:	df 91       	pop	r29
    15f8:	08 95       	ret

000015fa <SPI_vMasterWrite>:
void SPI_vMasterWrite(u8 Loc_WriteData){
    15fa:	df 93       	push	r29
    15fc:	cf 93       	push	r28
    15fe:	0f 92       	push	r0
    1600:	cd b7       	in	r28, 0x3d	; 61
    1602:	de b7       	in	r29, 0x3e	; 62
    1604:	89 83       	std	Y+1, r24	; 0x01
	SPDR=Loc_WriteData;
    1606:	ef e2       	ldi	r30, 0x2F	; 47
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	89 81       	ldd	r24, Y+1	; 0x01
    160c:	80 83       	st	Z, r24
	while(!GET_BIT(SPSR,7));
    160e:	ee e2       	ldi	r30, 0x2E	; 46
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	80 81       	ld	r24, Z
    1614:	88 23       	and	r24, r24
    1616:	dc f7       	brge	.-10     	; 0x160e <SPI_vMasterWrite+0x14>
}
    1618:	0f 90       	pop	r0
    161a:	cf 91       	pop	r28
    161c:	df 91       	pop	r29
    161e:	08 95       	ret

00001620 <SPI_vMasterReadWrite>:

void SPI_vMasterReadWrite(u8 Loc_WriteData,u8 *Loc_ReadData){
    1620:	df 93       	push	r29
    1622:	cf 93       	push	r28
    1624:	00 d0       	rcall	.+0      	; 0x1626 <SPI_vMasterReadWrite+0x6>
    1626:	0f 92       	push	r0
    1628:	cd b7       	in	r28, 0x3d	; 61
    162a:	de b7       	in	r29, 0x3e	; 62
    162c:	89 83       	std	Y+1, r24	; 0x01
    162e:	7b 83       	std	Y+3, r23	; 0x03
    1630:	6a 83       	std	Y+2, r22	; 0x02
	SPDR=Loc_WriteData;
    1632:	ef e2       	ldi	r30, 0x2F	; 47
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	89 81       	ldd	r24, Y+1	; 0x01
    1638:	80 83       	st	Z, r24
	while(!GET_BIT(SPSR,7));
    163a:	ee e2       	ldi	r30, 0x2E	; 46
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	80 81       	ld	r24, Z
    1640:	88 23       	and	r24, r24
    1642:	dc f7       	brge	.-10     	; 0x163a <SPI_vMasterReadWrite+0x1a>
	*Loc_ReadData = SPDR;
    1644:	ef e2       	ldi	r30, 0x2F	; 47
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	80 81       	ld	r24, Z
    164a:	ea 81       	ldd	r30, Y+2	; 0x02
    164c:	fb 81       	ldd	r31, Y+3	; 0x03
    164e:	80 83       	st	Z, r24
}
    1650:	0f 90       	pop	r0
    1652:	0f 90       	pop	r0
    1654:	0f 90       	pop	r0
    1656:	cf 91       	pop	r28
    1658:	df 91       	pop	r29
    165a:	08 95       	ret

0000165c <SPI_vSlaveRead>:

void SPI_vSlaveRead(u8 *Loc_ReadData){
    165c:	df 93       	push	r29
    165e:	cf 93       	push	r28
    1660:	00 d0       	rcall	.+0      	; 0x1662 <SPI_vSlaveRead+0x6>
    1662:	cd b7       	in	r28, 0x3d	; 61
    1664:	de b7       	in	r29, 0x3e	; 62
    1666:	9a 83       	std	Y+2, r25	; 0x02
    1668:	89 83       	std	Y+1, r24	; 0x01
	while(!GET_BIT(SPSR,7));
    166a:	ee e2       	ldi	r30, 0x2E	; 46
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	80 81       	ld	r24, Z
    1670:	88 23       	and	r24, r24
    1672:	dc f7       	brge	.-10     	; 0x166a <SPI_vSlaveRead+0xe>
	*Loc_ReadData = SPDR;
    1674:	ef e2       	ldi	r30, 0x2F	; 47
    1676:	f0 e0       	ldi	r31, 0x00	; 0
    1678:	80 81       	ld	r24, Z
    167a:	e9 81       	ldd	r30, Y+1	; 0x01
    167c:	fa 81       	ldd	r31, Y+2	; 0x02
    167e:	80 83       	st	Z, r24
}
    1680:	0f 90       	pop	r0
    1682:	0f 90       	pop	r0
    1684:	cf 91       	pop	r28
    1686:	df 91       	pop	r29
    1688:	08 95       	ret

0000168a <SPI_vTransferCompleteInterruptEnable>:
void SPI_vTransferCompleteInterruptEnable(void(*ptr)(void)){
    168a:	df 93       	push	r29
    168c:	cf 93       	push	r28
    168e:	00 d0       	rcall	.+0      	; 0x1690 <SPI_vTransferCompleteInterruptEnable+0x6>
    1690:	cd b7       	in	r28, 0x3d	; 61
    1692:	de b7       	in	r29, 0x3e	; 62
    1694:	9a 83       	std	Y+2, r25	; 0x02
    1696:	89 83       	std	Y+1, r24	; 0x01
	if(ptr!='\0'){
    1698:	89 81       	ldd	r24, Y+1	; 0x01
    169a:	9a 81       	ldd	r25, Y+2	; 0x02
    169c:	00 97       	sbiw	r24, 0x00	; 0
    169e:	31 f0       	breq	.+12     	; 0x16ac <SPI_vTransferCompleteInterruptEnable+0x22>
		Sptr=ptr;
    16a0:	89 81       	ldd	r24, Y+1	; 0x01
    16a2:	9a 81       	ldd	r25, Y+2	; 0x02
    16a4:	90 93 da 00 	sts	0x00DA, r25
    16a8:	80 93 d9 00 	sts	0x00D9, r24
	}
}
    16ac:	0f 90       	pop	r0
    16ae:	0f 90       	pop	r0
    16b0:	cf 91       	pop	r28
    16b2:	df 91       	pop	r29
    16b4:	08 95       	ret

000016b6 <__vector_12>:
ISR(SPI_STC_vect){
    16b6:	1f 92       	push	r1
    16b8:	0f 92       	push	r0
    16ba:	0f b6       	in	r0, 0x3f	; 63
    16bc:	0f 92       	push	r0
    16be:	11 24       	eor	r1, r1
    16c0:	2f 93       	push	r18
    16c2:	3f 93       	push	r19
    16c4:	4f 93       	push	r20
    16c6:	5f 93       	push	r21
    16c8:	6f 93       	push	r22
    16ca:	7f 93       	push	r23
    16cc:	8f 93       	push	r24
    16ce:	9f 93       	push	r25
    16d0:	af 93       	push	r26
    16d2:	bf 93       	push	r27
    16d4:	ef 93       	push	r30
    16d6:	ff 93       	push	r31
    16d8:	df 93       	push	r29
    16da:	cf 93       	push	r28
    16dc:	cd b7       	in	r28, 0x3d	; 61
    16de:	de b7       	in	r29, 0x3e	; 62
	if(Sptr!='\0'){
    16e0:	80 91 d9 00 	lds	r24, 0x00D9
    16e4:	90 91 da 00 	lds	r25, 0x00DA
    16e8:	00 97       	sbiw	r24, 0x00	; 0
    16ea:	29 f0       	breq	.+10     	; 0x16f6 <__vector_12+0x40>
		Sptr();
    16ec:	e0 91 d9 00 	lds	r30, 0x00D9
    16f0:	f0 91 da 00 	lds	r31, 0x00DA
    16f4:	09 95       	icall
	}
}
    16f6:	cf 91       	pop	r28
    16f8:	df 91       	pop	r29
    16fa:	ff 91       	pop	r31
    16fc:	ef 91       	pop	r30
    16fe:	bf 91       	pop	r27
    1700:	af 91       	pop	r26
    1702:	9f 91       	pop	r25
    1704:	8f 91       	pop	r24
    1706:	7f 91       	pop	r23
    1708:	6f 91       	pop	r22
    170a:	5f 91       	pop	r21
    170c:	4f 91       	pop	r20
    170e:	3f 91       	pop	r19
    1710:	2f 91       	pop	r18
    1712:	0f 90       	pop	r0
    1714:	0f be       	out	0x3f, r0	; 63
    1716:	0f 90       	pop	r0
    1718:	1f 90       	pop	r1
    171a:	18 95       	reti

0000171c <I2C_vInit>:

#include "I2C.h"

void(*Iptr)(void)='\0';

void I2C_vInit(){
    171c:	df 93       	push	r29
    171e:	cf 93       	push	r28
    1720:	cd b7       	in	r28, 0x3d	; 61
    1722:	de b7       	in	r29, 0x3e	; 62
		SET_BIT(TWCR,TWEN);
		SET_BIT(TWCR,TWIE);
		TWSR = I2CPrescaler;
		TWAR = assignedAddress;
#elif I2CMode==I2CPolling
		TWAR = assignedAddress;
    1724:	e2 e2       	ldi	r30, 0x22	; 34
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	82 e0       	ldi	r24, 0x02	; 2
    172a:	80 83       	st	Z, r24
		TWSR = I2CPrescaler;
    172c:	e1 e2       	ldi	r30, 0x21	; 33
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	10 82       	st	Z, r1
		TWBR = I2CBitRate;
    1732:	e0 e2       	ldi	r30, 0x20	; 32
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	82 e0       	ldi	r24, 0x02	; 2
    1738:	80 83       	st	Z, r24
		SET_BIT(TWCR,TWEN);
    173a:	a6 e5       	ldi	r26, 0x56	; 86
    173c:	b0 e0       	ldi	r27, 0x00	; 0
    173e:	e6 e5       	ldi	r30, 0x56	; 86
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	80 81       	ld	r24, Z
    1744:	84 60       	ori	r24, 0x04	; 4
    1746:	8c 93       	st	X, r24
#endif
}
    1748:	cf 91       	pop	r28
    174a:	df 91       	pop	r29
    174c:	08 95       	ret

0000174e <I2C_vSendStart>:
void I2C_vSendStart(){
    174e:	df 93       	push	r29
    1750:	cf 93       	push	r28
    1752:	cd b7       	in	r28, 0x3d	; 61
    1754:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TWCR,2);
    1756:	a6 e5       	ldi	r26, 0x56	; 86
    1758:	b0 e0       	ldi	r27, 0x00	; 0
    175a:	e6 e5       	ldi	r30, 0x56	; 86
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	80 81       	ld	r24, Z
    1760:	84 60       	ori	r24, 0x04	; 4
    1762:	8c 93       	st	X, r24
	SET_BIT(TWCR,5);
    1764:	a6 e5       	ldi	r26, 0x56	; 86
    1766:	b0 e0       	ldi	r27, 0x00	; 0
    1768:	e6 e5       	ldi	r30, 0x56	; 86
    176a:	f0 e0       	ldi	r31, 0x00	; 0
    176c:	80 81       	ld	r24, Z
    176e:	80 62       	ori	r24, 0x20	; 32
    1770:	8c 93       	st	X, r24
	SET_BIT(TWCR,7);
    1772:	a6 e5       	ldi	r26, 0x56	; 86
    1774:	b0 e0       	ldi	r27, 0x00	; 0
    1776:	e6 e5       	ldi	r30, 0x56	; 86
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	80 81       	ld	r24, Z
    177c:	80 68       	ori	r24, 0x80	; 128
    177e:	8c 93       	st	X, r24
	while(!(GET_BIT(TWCR,7)));
    1780:	e6 e5       	ldi	r30, 0x56	; 86
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	80 81       	ld	r24, Z
    1786:	88 23       	and	r24, r24
    1788:	dc f7       	brge	.-10     	; 0x1780 <I2C_vSendStart+0x32>
}
    178a:	cf 91       	pop	r28
    178c:	df 91       	pop	r29
    178e:	08 95       	ret

00001790 <I2C_vRepeatedSendStart>:
void I2C_vRepeatedSendStart(){
    1790:	df 93       	push	r29
    1792:	cf 93       	push	r28
    1794:	cd b7       	in	r28, 0x3d	; 61
    1796:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TWCR,2);
    1798:	a6 e5       	ldi	r26, 0x56	; 86
    179a:	b0 e0       	ldi	r27, 0x00	; 0
    179c:	e6 e5       	ldi	r30, 0x56	; 86
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	80 81       	ld	r24, Z
    17a2:	84 60       	ori	r24, 0x04	; 4
    17a4:	8c 93       	st	X, r24
	SET_BIT(TWCR,5);
    17a6:	a6 e5       	ldi	r26, 0x56	; 86
    17a8:	b0 e0       	ldi	r27, 0x00	; 0
    17aa:	e6 e5       	ldi	r30, 0x56	; 86
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	80 81       	ld	r24, Z
    17b0:	80 62       	ori	r24, 0x20	; 32
    17b2:	8c 93       	st	X, r24
	SET_BIT(TWCR,7);
    17b4:	a6 e5       	ldi	r26, 0x56	; 86
    17b6:	b0 e0       	ldi	r27, 0x00	; 0
    17b8:	e6 e5       	ldi	r30, 0x56	; 86
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	80 81       	ld	r24, Z
    17be:	80 68       	ori	r24, 0x80	; 128
    17c0:	8c 93       	st	X, r24
	while(!(GET_BIT(TWCR,7)));
    17c2:	e6 e5       	ldi	r30, 0x56	; 86
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	80 81       	ld	r24, Z
    17c8:	88 23       	and	r24, r24
    17ca:	dc f7       	brge	.-10     	; 0x17c2 <I2C_vRepeatedSendStart+0x32>
}
    17cc:	cf 91       	pop	r28
    17ce:	df 91       	pop	r29
    17d0:	08 95       	ret

000017d2 <I2C_vSendStop>:
void I2C_vSendStop(){
    17d2:	df 93       	push	r29
    17d4:	cf 93       	push	r28
    17d6:	cd b7       	in	r28, 0x3d	; 61
    17d8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TWCR,2);
    17da:	a6 e5       	ldi	r26, 0x56	; 86
    17dc:	b0 e0       	ldi	r27, 0x00	; 0
    17de:	e6 e5       	ldi	r30, 0x56	; 86
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	80 81       	ld	r24, Z
    17e4:	84 60       	ori	r24, 0x04	; 4
    17e6:	8c 93       	st	X, r24
	SET_BIT(TWCR,4);
    17e8:	a6 e5       	ldi	r26, 0x56	; 86
    17ea:	b0 e0       	ldi	r27, 0x00	; 0
    17ec:	e6 e5       	ldi	r30, 0x56	; 86
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	80 81       	ld	r24, Z
    17f2:	80 61       	ori	r24, 0x10	; 16
    17f4:	8c 93       	st	X, r24
	SET_BIT(TWCR,7);
    17f6:	a6 e5       	ldi	r26, 0x56	; 86
    17f8:	b0 e0       	ldi	r27, 0x00	; 0
    17fa:	e6 e5       	ldi	r30, 0x56	; 86
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	80 81       	ld	r24, Z
    1800:	80 68       	ori	r24, 0x80	; 128
    1802:	8c 93       	st	X, r24
	while(!(GET_BIT(TWCR,7)));
    1804:	e6 e5       	ldi	r30, 0x56	; 86
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	80 81       	ld	r24, Z
    180a:	88 23       	and	r24, r24
    180c:	dc f7       	brge	.-10     	; 0x1804 <I2C_vSendStop+0x32>
}
    180e:	cf 91       	pop	r28
    1810:	df 91       	pop	r29
    1812:	08 95       	ret

00001814 <I2C_vSendSlaveAdress>:
void I2C_vSendSlaveAdress(u8 Loc_SlaveAdress){
    1814:	df 93       	push	r29
    1816:	cf 93       	push	r28
    1818:	0f 92       	push	r0
    181a:	cd b7       	in	r28, 0x3d	; 61
    181c:	de b7       	in	r29, 0x3e	; 62
    181e:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(TWCR,2);
    1820:	a6 e5       	ldi	r26, 0x56	; 86
    1822:	b0 e0       	ldi	r27, 0x00	; 0
    1824:	e6 e5       	ldi	r30, 0x56	; 86
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	80 81       	ld	r24, Z
    182a:	84 60       	ori	r24, 0x04	; 4
    182c:	8c 93       	st	X, r24
	TWDR=Loc_SlaveAdress; //frist bit is for read or write
    182e:	e3 e2       	ldi	r30, 0x23	; 35
    1830:	f0 e0       	ldi	r31, 0x00	; 0
    1832:	89 81       	ldd	r24, Y+1	; 0x01
    1834:	80 83       	st	Z, r24
	SET_BIT(TWCR,7);
    1836:	a6 e5       	ldi	r26, 0x56	; 86
    1838:	b0 e0       	ldi	r27, 0x00	; 0
    183a:	e6 e5       	ldi	r30, 0x56	; 86
    183c:	f0 e0       	ldi	r31, 0x00	; 0
    183e:	80 81       	ld	r24, Z
    1840:	80 68       	ori	r24, 0x80	; 128
    1842:	8c 93       	st	X, r24
	while(!(GET_BIT(TWCR,7)));
    1844:	e6 e5       	ldi	r30, 0x56	; 86
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	80 81       	ld	r24, Z
    184a:	88 23       	and	r24, r24
    184c:	dc f7       	brge	.-10     	; 0x1844 <I2C_vSendSlaveAdress+0x30>
}
    184e:	0f 90       	pop	r0
    1850:	cf 91       	pop	r28
    1852:	df 91       	pop	r29
    1854:	08 95       	ret

00001856 <I2C_SendData>:
void I2C_SendData(u8 Loc_Data){
    1856:	df 93       	push	r29
    1858:	cf 93       	push	r28
    185a:	0f 92       	push	r0
    185c:	cd b7       	in	r28, 0x3d	; 61
    185e:	de b7       	in	r29, 0x3e	; 62
    1860:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(TWCR,2);
    1862:	a6 e5       	ldi	r26, 0x56	; 86
    1864:	b0 e0       	ldi	r27, 0x00	; 0
    1866:	e6 e5       	ldi	r30, 0x56	; 86
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	80 81       	ld	r24, Z
    186c:	84 60       	ori	r24, 0x04	; 4
    186e:	8c 93       	st	X, r24

	TWDR=Loc_Data;
    1870:	e3 e2       	ldi	r30, 0x23	; 35
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	89 81       	ldd	r24, Y+1	; 0x01
    1876:	80 83       	st	Z, r24
	SET_BIT(TWCR,7);
    1878:	a6 e5       	ldi	r26, 0x56	; 86
    187a:	b0 e0       	ldi	r27, 0x00	; 0
    187c:	e6 e5       	ldi	r30, 0x56	; 86
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	80 81       	ld	r24, Z
    1882:	80 68       	ori	r24, 0x80	; 128
    1884:	8c 93       	st	X, r24
	while(!(GET_BIT(TWCR,7)));
    1886:	e6 e5       	ldi	r30, 0x56	; 86
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	80 81       	ld	r24, Z
    188c:	88 23       	and	r24, r24
    188e:	dc f7       	brge	.-10     	; 0x1886 <I2C_SendData+0x30>
}
    1890:	0f 90       	pop	r0
    1892:	cf 91       	pop	r28
    1894:	df 91       	pop	r29
    1896:	08 95       	ret

00001898 <I2C_vReadData>:
void I2C_vReadData(u8* ptr){
    1898:	df 93       	push	r29
    189a:	cf 93       	push	r28
    189c:	00 d0       	rcall	.+0      	; 0x189e <I2C_vReadData+0x6>
    189e:	cd b7       	in	r28, 0x3d	; 61
    18a0:	de b7       	in	r29, 0x3e	; 62
    18a2:	9a 83       	std	Y+2, r25	; 0x02
    18a4:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(TWCR,2);
    18a6:	a6 e5       	ldi	r26, 0x56	; 86
    18a8:	b0 e0       	ldi	r27, 0x00	; 0
    18aa:	e6 e5       	ldi	r30, 0x56	; 86
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	80 81       	ld	r24, Z
    18b0:	84 60       	ori	r24, 0x04	; 4
    18b2:	8c 93       	st	X, r24

	*ptr=TWDR;
    18b4:	e3 e2       	ldi	r30, 0x23	; 35
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	80 81       	ld	r24, Z
    18ba:	e9 81       	ldd	r30, Y+1	; 0x01
    18bc:	fa 81       	ldd	r31, Y+2	; 0x02
    18be:	80 83       	st	Z, r24
	SET_BIT(TWCR,7);
    18c0:	a6 e5       	ldi	r26, 0x56	; 86
    18c2:	b0 e0       	ldi	r27, 0x00	; 0
    18c4:	e6 e5       	ldi	r30, 0x56	; 86
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	80 81       	ld	r24, Z
    18ca:	80 68       	ori	r24, 0x80	; 128
    18cc:	8c 93       	st	X, r24
	while(!(GET_BIT(TWCR,7)));
    18ce:	e6 e5       	ldi	r30, 0x56	; 86
    18d0:	f0 e0       	ldi	r31, 0x00	; 0
    18d2:	80 81       	ld	r24, Z
    18d4:	88 23       	and	r24, r24
    18d6:	dc f7       	brge	.-10     	; 0x18ce <I2C_vReadData+0x36>
}
    18d8:	0f 90       	pop	r0
    18da:	0f 90       	pop	r0
    18dc:	cf 91       	pop	r28
    18de:	df 91       	pop	r29
    18e0:	08 95       	ret

000018e2 <I2C_vJobFinishedInterruptEnable>:
void I2C_vJobFinishedInterruptEnable(void(*ptr)(void)){
    18e2:	df 93       	push	r29
    18e4:	cf 93       	push	r28
    18e6:	00 d0       	rcall	.+0      	; 0x18e8 <I2C_vJobFinishedInterruptEnable+0x6>
    18e8:	cd b7       	in	r28, 0x3d	; 61
    18ea:	de b7       	in	r29, 0x3e	; 62
    18ec:	9a 83       	std	Y+2, r25	; 0x02
    18ee:	89 83       	std	Y+1, r24	; 0x01
	if(ptr!='\0'){
    18f0:	89 81       	ldd	r24, Y+1	; 0x01
    18f2:	9a 81       	ldd	r25, Y+2	; 0x02
    18f4:	00 97       	sbiw	r24, 0x00	; 0
    18f6:	31 f0       	breq	.+12     	; 0x1904 <I2C_vJobFinishedInterruptEnable+0x22>
		Iptr=ptr;
    18f8:	89 81       	ldd	r24, Y+1	; 0x01
    18fa:	9a 81       	ldd	r25, Y+2	; 0x02
    18fc:	90 93 dc 00 	sts	0x00DC, r25
    1900:	80 93 db 00 	sts	0x00DB, r24
	}
}
    1904:	0f 90       	pop	r0
    1906:	0f 90       	pop	r0
    1908:	cf 91       	pop	r28
    190a:	df 91       	pop	r29
    190c:	08 95       	ret

0000190e <__vector_19>:
ISR(TWI_vect){
    190e:	1f 92       	push	r1
    1910:	0f 92       	push	r0
    1912:	0f b6       	in	r0, 0x3f	; 63
    1914:	0f 92       	push	r0
    1916:	11 24       	eor	r1, r1
    1918:	2f 93       	push	r18
    191a:	3f 93       	push	r19
    191c:	4f 93       	push	r20
    191e:	5f 93       	push	r21
    1920:	6f 93       	push	r22
    1922:	7f 93       	push	r23
    1924:	8f 93       	push	r24
    1926:	9f 93       	push	r25
    1928:	af 93       	push	r26
    192a:	bf 93       	push	r27
    192c:	ef 93       	push	r30
    192e:	ff 93       	push	r31
    1930:	df 93       	push	r29
    1932:	cf 93       	push	r28
    1934:	cd b7       	in	r28, 0x3d	; 61
    1936:	de b7       	in	r29, 0x3e	; 62
	if(Iptr!='\0'){
    1938:	80 91 db 00 	lds	r24, 0x00DB
    193c:	90 91 dc 00 	lds	r25, 0x00DC
    1940:	00 97       	sbiw	r24, 0x00	; 0
    1942:	29 f0       	breq	.+10     	; 0x194e <__vector_19+0x40>
		Iptr();
    1944:	e0 91 db 00 	lds	r30, 0x00DB
    1948:	f0 91 dc 00 	lds	r31, 0x00DC
    194c:	09 95       	icall
	}
}
    194e:	cf 91       	pop	r28
    1950:	df 91       	pop	r29
    1952:	ff 91       	pop	r31
    1954:	ef 91       	pop	r30
    1956:	bf 91       	pop	r27
    1958:	af 91       	pop	r26
    195a:	9f 91       	pop	r25
    195c:	8f 91       	pop	r24
    195e:	7f 91       	pop	r23
    1960:	6f 91       	pop	r22
    1962:	5f 91       	pop	r21
    1964:	4f 91       	pop	r20
    1966:	3f 91       	pop	r19
    1968:	2f 91       	pop	r18
    196a:	0f 90       	pop	r0
    196c:	0f be       	out	0x3f, r0	; 63
    196e:	0f 90       	pop	r0
    1970:	1f 90       	pop	r1
    1972:	18 95       	reti

00001974 <EXTI_vEnableGIE>:
#include "EXTI.h"

void(*Gptr0)(void)='\0';
void(*Gptr1)(void)='\0';
void(*Gptr2)(void)='\0';
void EXTI_vEnableGIE(void){
    1974:	df 93       	push	r29
    1976:	cf 93       	push	r28
    1978:	cd b7       	in	r28, 0x3d	; 61
    197a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
    197c:	af e5       	ldi	r26, 0x5F	; 95
    197e:	b0 e0       	ldi	r27, 0x00	; 0
    1980:	ef e5       	ldi	r30, 0x5F	; 95
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	80 81       	ld	r24, Z
    1986:	80 68       	ori	r24, 0x80	; 128
    1988:	8c 93       	st	X, r24
}
    198a:	cf 91       	pop	r28
    198c:	df 91       	pop	r29
    198e:	08 95       	ret

00001990 <EXTI_vEnablePIE>:
void EXTI_vEnablePIE(u8 Loc_u8InterruptNumber){
    1990:	df 93       	push	r29
    1992:	cf 93       	push	r28
    1994:	0f 92       	push	r0
    1996:	cd b7       	in	r28, 0x3d	; 61
    1998:	de b7       	in	r29, 0x3e	; 62
    199a:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8InterruptNumber<=INT2){
    199c:	89 81       	ldd	r24, Y+1	; 0x01
    199e:	83 30       	cpi	r24, 0x03	; 3
    19a0:	00 f5       	brcc	.+64     	; 0x19e2 <EXTI_vEnablePIE+0x52>
		if(Loc_u8InterruptNumber==INT0){
    19a2:	89 81       	ldd	r24, Y+1	; 0x01
    19a4:	88 23       	and	r24, r24
    19a6:	41 f4       	brne	.+16     	; 0x19b8 <EXTI_vEnablePIE+0x28>
			SET_BIT(GICR,6);
    19a8:	ab e5       	ldi	r26, 0x5B	; 91
    19aa:	b0 e0       	ldi	r27, 0x00	; 0
    19ac:	eb e5       	ldi	r30, 0x5B	; 91
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	80 81       	ld	r24, Z
    19b2:	80 64       	ori	r24, 0x40	; 64
    19b4:	8c 93       	st	X, r24
    19b6:	15 c0       	rjmp	.+42     	; 0x19e2 <EXTI_vEnablePIE+0x52>
		}
		else if(Loc_u8InterruptNumber==INT1){
    19b8:	89 81       	ldd	r24, Y+1	; 0x01
    19ba:	81 30       	cpi	r24, 0x01	; 1
    19bc:	41 f4       	brne	.+16     	; 0x19ce <EXTI_vEnablePIE+0x3e>
			SET_BIT(GICR,7);
    19be:	ab e5       	ldi	r26, 0x5B	; 91
    19c0:	b0 e0       	ldi	r27, 0x00	; 0
    19c2:	eb e5       	ldi	r30, 0x5B	; 91
    19c4:	f0 e0       	ldi	r31, 0x00	; 0
    19c6:	80 81       	ld	r24, Z
    19c8:	80 68       	ori	r24, 0x80	; 128
    19ca:	8c 93       	st	X, r24
    19cc:	0a c0       	rjmp	.+20     	; 0x19e2 <EXTI_vEnablePIE+0x52>
		}
		else if(Loc_u8InterruptNumber==INT2){
    19ce:	89 81       	ldd	r24, Y+1	; 0x01
    19d0:	82 30       	cpi	r24, 0x02	; 2
    19d2:	39 f4       	brne	.+14     	; 0x19e2 <EXTI_vEnablePIE+0x52>
			SET_BIT(GICR,5);
    19d4:	ab e5       	ldi	r26, 0x5B	; 91
    19d6:	b0 e0       	ldi	r27, 0x00	; 0
    19d8:	eb e5       	ldi	r30, 0x5B	; 91
    19da:	f0 e0       	ldi	r31, 0x00	; 0
    19dc:	80 81       	ld	r24, Z
    19de:	80 62       	ori	r24, 0x20	; 32
    19e0:	8c 93       	st	X, r24
		}
	}
	else {
		//do nothing
	}
}
    19e2:	0f 90       	pop	r0
    19e4:	cf 91       	pop	r28
    19e6:	df 91       	pop	r29
    19e8:	08 95       	ret

000019ea <EXIT_vReadPIF>:
u8 EXIT_vReadPIF(u8 Loc_u8InterruptNumber){
    19ea:	df 93       	push	r29
    19ec:	cf 93       	push	r28
    19ee:	00 d0       	rcall	.+0      	; 0x19f0 <EXIT_vReadPIF+0x6>
    19f0:	cd b7       	in	r28, 0x3d	; 61
    19f2:	de b7       	in	r29, 0x3e	; 62
    19f4:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8InterruptNumber<=INT2){
    19f6:	89 81       	ldd	r24, Y+1	; 0x01
    19f8:	83 30       	cpi	r24, 0x03	; 3
    19fa:	38 f5       	brcc	.+78     	; 0x1a4a <EXIT_vReadPIF+0x60>
			if(Loc_u8InterruptNumber==INT0){
    19fc:	89 81       	ldd	r24, Y+1	; 0x01
    19fe:	88 23       	and	r24, r24
    1a00:	59 f4       	brne	.+22     	; 0x1a18 <EXIT_vReadPIF+0x2e>
				return GET_BIT(GIFR,6);
    1a02:	ea e5       	ldi	r30, 0x5A	; 90
    1a04:	f0 e0       	ldi	r31, 0x00	; 0
    1a06:	80 81       	ld	r24, Z
    1a08:	82 95       	swap	r24
    1a0a:	86 95       	lsr	r24
    1a0c:	86 95       	lsr	r24
    1a0e:	83 70       	andi	r24, 0x03	; 3
    1a10:	98 2f       	mov	r25, r24
    1a12:	91 70       	andi	r25, 0x01	; 1
    1a14:	9a 83       	std	Y+2, r25	; 0x02
    1a16:	1b c0       	rjmp	.+54     	; 0x1a4e <EXIT_vReadPIF+0x64>
			}
			else if(Loc_u8InterruptNumber==INT1){
    1a18:	89 81       	ldd	r24, Y+1	; 0x01
    1a1a:	81 30       	cpi	r24, 0x01	; 1
    1a1c:	49 f4       	brne	.+18     	; 0x1a30 <EXIT_vReadPIF+0x46>
				return GET_BIT(GIFR,7);
    1a1e:	ea e5       	ldi	r30, 0x5A	; 90
    1a20:	f0 e0       	ldi	r31, 0x00	; 0
    1a22:	80 81       	ld	r24, Z
    1a24:	98 2f       	mov	r25, r24
    1a26:	99 1f       	adc	r25, r25
    1a28:	99 27       	eor	r25, r25
    1a2a:	99 1f       	adc	r25, r25
    1a2c:	9a 83       	std	Y+2, r25	; 0x02
    1a2e:	0f c0       	rjmp	.+30     	; 0x1a4e <EXIT_vReadPIF+0x64>
			}
			else if(Loc_u8InterruptNumber==INT2){
    1a30:	89 81       	ldd	r24, Y+1	; 0x01
    1a32:	82 30       	cpi	r24, 0x02	; 2
    1a34:	51 f4       	brne	.+20     	; 0x1a4a <EXIT_vReadPIF+0x60>
				return GET_BIT(GIFR,5);
    1a36:	ea e5       	ldi	r30, 0x5A	; 90
    1a38:	f0 e0       	ldi	r31, 0x00	; 0
    1a3a:	80 81       	ld	r24, Z
    1a3c:	82 95       	swap	r24
    1a3e:	86 95       	lsr	r24
    1a40:	87 70       	andi	r24, 0x07	; 7
    1a42:	98 2f       	mov	r25, r24
    1a44:	91 70       	andi	r25, 0x01	; 1
    1a46:	9a 83       	std	Y+2, r25	; 0x02
    1a48:	02 c0       	rjmp	.+4      	; 0x1a4e <EXIT_vReadPIF+0x64>
			}
		}
		else {
			//do nothing
		}
	return 0xff;
    1a4a:	8f ef       	ldi	r24, 0xFF	; 255
    1a4c:	8a 83       	std	Y+2, r24	; 0x02
    1a4e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1a50:	0f 90       	pop	r0
    1a52:	0f 90       	pop	r0
    1a54:	cf 91       	pop	r28
    1a56:	df 91       	pop	r29
    1a58:	08 95       	ret

00001a5a <EXTI_vSenseControl>:
void EXTI_vSenseControl(u8 Loc_u8InterruptNumber,u8 Loc_u8Mode){
    1a5a:	df 93       	push	r29
    1a5c:	cf 93       	push	r28
    1a5e:	00 d0       	rcall	.+0      	; 0x1a60 <EXTI_vSenseControl+0x6>
    1a60:	cd b7       	in	r28, 0x3d	; 61
    1a62:	de b7       	in	r29, 0x3e	; 62
    1a64:	89 83       	std	Y+1, r24	; 0x01
    1a66:	6a 83       	std	Y+2, r22	; 0x02

	if (Loc_u8InterruptNumber<=INT2){
    1a68:	89 81       	ldd	r24, Y+1	; 0x01
    1a6a:	83 30       	cpi	r24, 0x03	; 3
    1a6c:	08 f0       	brcs	.+2      	; 0x1a70 <EXTI_vSenseControl+0x16>
    1a6e:	bf c0       	rjmp	.+382    	; 0x1bee <EXTI_vSenseControl+0x194>
		if(Loc_u8InterruptNumber==INT0){
    1a70:	89 81       	ldd	r24, Y+1	; 0x01
    1a72:	88 23       	and	r24, r24
    1a74:	09 f0       	breq	.+2      	; 0x1a78 <EXTI_vSenseControl+0x1e>
    1a76:	4d c0       	rjmp	.+154    	; 0x1b12 <EXTI_vSenseControl+0xb8>
			if(Loc_u8Mode<=Falling_Edge){
    1a78:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7a:	84 30       	cpi	r24, 0x04	; 4
    1a7c:	08 f0       	brcs	.+2      	; 0x1a80 <EXTI_vSenseControl+0x26>
    1a7e:	b7 c0       	rjmp	.+366    	; 0x1bee <EXTI_vSenseControl+0x194>
				if(Loc_u8Mode==Low_Level){
    1a80:	8a 81       	ldd	r24, Y+2	; 0x02
    1a82:	88 23       	and	r24, r24
    1a84:	79 f4       	brne	.+30     	; 0x1aa4 <EXTI_vSenseControl+0x4a>
					CLR_BIT(MCUCR,0);
    1a86:	a5 e5       	ldi	r26, 0x55	; 85
    1a88:	b0 e0       	ldi	r27, 0x00	; 0
    1a8a:	e5 e5       	ldi	r30, 0x55	; 85
    1a8c:	f0 e0       	ldi	r31, 0x00	; 0
    1a8e:	80 81       	ld	r24, Z
    1a90:	8e 7f       	andi	r24, 0xFE	; 254
    1a92:	8c 93       	st	X, r24
					CLR_BIT(MCUCR,1);
    1a94:	a5 e5       	ldi	r26, 0x55	; 85
    1a96:	b0 e0       	ldi	r27, 0x00	; 0
    1a98:	e5 e5       	ldi	r30, 0x55	; 85
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	80 81       	ld	r24, Z
    1a9e:	8d 7f       	andi	r24, 0xFD	; 253
    1aa0:	8c 93       	st	X, r24
    1aa2:	a5 c0       	rjmp	.+330    	; 0x1bee <EXTI_vSenseControl+0x194>
				}
				else if(Loc_u8Mode==Any_Change){
    1aa4:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa6:	81 30       	cpi	r24, 0x01	; 1
    1aa8:	79 f4       	brne	.+30     	; 0x1ac8 <EXTI_vSenseControl+0x6e>
					SET_BIT(MCUCR,0);
    1aaa:	a5 e5       	ldi	r26, 0x55	; 85
    1aac:	b0 e0       	ldi	r27, 0x00	; 0
    1aae:	e5 e5       	ldi	r30, 0x55	; 85
    1ab0:	f0 e0       	ldi	r31, 0x00	; 0
    1ab2:	80 81       	ld	r24, Z
    1ab4:	81 60       	ori	r24, 0x01	; 1
    1ab6:	8c 93       	st	X, r24
					CLR_BIT(MCUCR,1);
    1ab8:	a5 e5       	ldi	r26, 0x55	; 85
    1aba:	b0 e0       	ldi	r27, 0x00	; 0
    1abc:	e5 e5       	ldi	r30, 0x55	; 85
    1abe:	f0 e0       	ldi	r31, 0x00	; 0
    1ac0:	80 81       	ld	r24, Z
    1ac2:	8d 7f       	andi	r24, 0xFD	; 253
    1ac4:	8c 93       	st	X, r24
    1ac6:	93 c0       	rjmp	.+294    	; 0x1bee <EXTI_vSenseControl+0x194>
				}
				else if(Loc_u8Mode==Rising_Egde){
    1ac8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aca:	82 30       	cpi	r24, 0x02	; 2
    1acc:	79 f4       	brne	.+30     	; 0x1aec <EXTI_vSenseControl+0x92>
					SET_BIT(MCUCR,0);
    1ace:	a5 e5       	ldi	r26, 0x55	; 85
    1ad0:	b0 e0       	ldi	r27, 0x00	; 0
    1ad2:	e5 e5       	ldi	r30, 0x55	; 85
    1ad4:	f0 e0       	ldi	r31, 0x00	; 0
    1ad6:	80 81       	ld	r24, Z
    1ad8:	81 60       	ori	r24, 0x01	; 1
    1ada:	8c 93       	st	X, r24
					SET_BIT(MCUCR,1);
    1adc:	a5 e5       	ldi	r26, 0x55	; 85
    1ade:	b0 e0       	ldi	r27, 0x00	; 0
    1ae0:	e5 e5       	ldi	r30, 0x55	; 85
    1ae2:	f0 e0       	ldi	r31, 0x00	; 0
    1ae4:	80 81       	ld	r24, Z
    1ae6:	82 60       	ori	r24, 0x02	; 2
    1ae8:	8c 93       	st	X, r24
    1aea:	81 c0       	rjmp	.+258    	; 0x1bee <EXTI_vSenseControl+0x194>
				}
				else if(Loc_u8Mode==Falling_Edge){
    1aec:	8a 81       	ldd	r24, Y+2	; 0x02
    1aee:	83 30       	cpi	r24, 0x03	; 3
    1af0:	09 f0       	breq	.+2      	; 0x1af4 <EXTI_vSenseControl+0x9a>
    1af2:	7d c0       	rjmp	.+250    	; 0x1bee <EXTI_vSenseControl+0x194>
					CLR_BIT(MCUCR,0);
    1af4:	a5 e5       	ldi	r26, 0x55	; 85
    1af6:	b0 e0       	ldi	r27, 0x00	; 0
    1af8:	e5 e5       	ldi	r30, 0x55	; 85
    1afa:	f0 e0       	ldi	r31, 0x00	; 0
    1afc:	80 81       	ld	r24, Z
    1afe:	8e 7f       	andi	r24, 0xFE	; 254
    1b00:	8c 93       	st	X, r24
					SET_BIT(MCUCR,1);
    1b02:	a5 e5       	ldi	r26, 0x55	; 85
    1b04:	b0 e0       	ldi	r27, 0x00	; 0
    1b06:	e5 e5       	ldi	r30, 0x55	; 85
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	80 81       	ld	r24, Z
    1b0c:	82 60       	ori	r24, 0x02	; 2
    1b0e:	8c 93       	st	X, r24
    1b10:	6e c0       	rjmp	.+220    	; 0x1bee <EXTI_vSenseControl+0x194>
			else{
				//do nothing
			}
		}

		else if(Loc_u8InterruptNumber==INT1){
    1b12:	89 81       	ldd	r24, Y+1	; 0x01
    1b14:	81 30       	cpi	r24, 0x01	; 1
    1b16:	09 f0       	breq	.+2      	; 0x1b1a <EXTI_vSenseControl+0xc0>
    1b18:	4c c0       	rjmp	.+152    	; 0x1bb2 <EXTI_vSenseControl+0x158>
			if(Loc_u8Mode<=Falling_Edge){
    1b1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1c:	84 30       	cpi	r24, 0x04	; 4
    1b1e:	08 f0       	brcs	.+2      	; 0x1b22 <EXTI_vSenseControl+0xc8>
    1b20:	66 c0       	rjmp	.+204    	; 0x1bee <EXTI_vSenseControl+0x194>
				if(Loc_u8Mode==Low_Level){
    1b22:	8a 81       	ldd	r24, Y+2	; 0x02
    1b24:	88 23       	and	r24, r24
    1b26:	79 f4       	brne	.+30     	; 0x1b46 <EXTI_vSenseControl+0xec>
					CLR_BIT(MCUCR,2);
    1b28:	a5 e5       	ldi	r26, 0x55	; 85
    1b2a:	b0 e0       	ldi	r27, 0x00	; 0
    1b2c:	e5 e5       	ldi	r30, 0x55	; 85
    1b2e:	f0 e0       	ldi	r31, 0x00	; 0
    1b30:	80 81       	ld	r24, Z
    1b32:	8b 7f       	andi	r24, 0xFB	; 251
    1b34:	8c 93       	st	X, r24
					CLR_BIT(MCUCR,3);
    1b36:	a5 e5       	ldi	r26, 0x55	; 85
    1b38:	b0 e0       	ldi	r27, 0x00	; 0
    1b3a:	e5 e5       	ldi	r30, 0x55	; 85
    1b3c:	f0 e0       	ldi	r31, 0x00	; 0
    1b3e:	80 81       	ld	r24, Z
    1b40:	87 7f       	andi	r24, 0xF7	; 247
    1b42:	8c 93       	st	X, r24
    1b44:	54 c0       	rjmp	.+168    	; 0x1bee <EXTI_vSenseControl+0x194>
				}
				else if(Loc_u8Mode==Any_Change){
    1b46:	8a 81       	ldd	r24, Y+2	; 0x02
    1b48:	81 30       	cpi	r24, 0x01	; 1
    1b4a:	79 f4       	brne	.+30     	; 0x1b6a <EXTI_vSenseControl+0x110>
					SET_BIT(MCUCR,2);
    1b4c:	a5 e5       	ldi	r26, 0x55	; 85
    1b4e:	b0 e0       	ldi	r27, 0x00	; 0
    1b50:	e5 e5       	ldi	r30, 0x55	; 85
    1b52:	f0 e0       	ldi	r31, 0x00	; 0
    1b54:	80 81       	ld	r24, Z
    1b56:	84 60       	ori	r24, 0x04	; 4
    1b58:	8c 93       	st	X, r24
					CLR_BIT(MCUCR,3);
    1b5a:	a5 e5       	ldi	r26, 0x55	; 85
    1b5c:	b0 e0       	ldi	r27, 0x00	; 0
    1b5e:	e5 e5       	ldi	r30, 0x55	; 85
    1b60:	f0 e0       	ldi	r31, 0x00	; 0
    1b62:	80 81       	ld	r24, Z
    1b64:	87 7f       	andi	r24, 0xF7	; 247
    1b66:	8c 93       	st	X, r24
    1b68:	42 c0       	rjmp	.+132    	; 0x1bee <EXTI_vSenseControl+0x194>
				}
				else if(Loc_u8Mode==Rising_Egde){
    1b6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6c:	82 30       	cpi	r24, 0x02	; 2
    1b6e:	79 f4       	brne	.+30     	; 0x1b8e <EXTI_vSenseControl+0x134>
					SET_BIT(MCUCR,2);
    1b70:	a5 e5       	ldi	r26, 0x55	; 85
    1b72:	b0 e0       	ldi	r27, 0x00	; 0
    1b74:	e5 e5       	ldi	r30, 0x55	; 85
    1b76:	f0 e0       	ldi	r31, 0x00	; 0
    1b78:	80 81       	ld	r24, Z
    1b7a:	84 60       	ori	r24, 0x04	; 4
    1b7c:	8c 93       	st	X, r24
					SET_BIT(MCUCR,3);
    1b7e:	a5 e5       	ldi	r26, 0x55	; 85
    1b80:	b0 e0       	ldi	r27, 0x00	; 0
    1b82:	e5 e5       	ldi	r30, 0x55	; 85
    1b84:	f0 e0       	ldi	r31, 0x00	; 0
    1b86:	80 81       	ld	r24, Z
    1b88:	88 60       	ori	r24, 0x08	; 8
    1b8a:	8c 93       	st	X, r24
    1b8c:	30 c0       	rjmp	.+96     	; 0x1bee <EXTI_vSenseControl+0x194>
				}
				else if(Loc_u8Mode==Falling_Edge){
    1b8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b90:	83 30       	cpi	r24, 0x03	; 3
    1b92:	69 f5       	brne	.+90     	; 0x1bee <EXTI_vSenseControl+0x194>
					CLR_BIT(MCUCR,2);
    1b94:	a5 e5       	ldi	r26, 0x55	; 85
    1b96:	b0 e0       	ldi	r27, 0x00	; 0
    1b98:	e5 e5       	ldi	r30, 0x55	; 85
    1b9a:	f0 e0       	ldi	r31, 0x00	; 0
    1b9c:	80 81       	ld	r24, Z
    1b9e:	8b 7f       	andi	r24, 0xFB	; 251
    1ba0:	8c 93       	st	X, r24
					SET_BIT(MCUCR,3);
    1ba2:	a5 e5       	ldi	r26, 0x55	; 85
    1ba4:	b0 e0       	ldi	r27, 0x00	; 0
    1ba6:	e5 e5       	ldi	r30, 0x55	; 85
    1ba8:	f0 e0       	ldi	r31, 0x00	; 0
    1baa:	80 81       	ld	r24, Z
    1bac:	88 60       	ori	r24, 0x08	; 8
    1bae:	8c 93       	st	X, r24
    1bb0:	1e c0       	rjmp	.+60     	; 0x1bee <EXTI_vSenseControl+0x194>
			}
			else{
				//do nothing
			}
		}
		else if(Loc_u8InterruptNumber==INT2){
    1bb2:	89 81       	ldd	r24, Y+1	; 0x01
    1bb4:	82 30       	cpi	r24, 0x02	; 2
    1bb6:	d9 f4       	brne	.+54     	; 0x1bee <EXTI_vSenseControl+0x194>
			if(Loc_u8Mode==Falling_Edge||Loc_u8Mode==Rising_Egde){
    1bb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bba:	83 30       	cpi	r24, 0x03	; 3
    1bbc:	19 f0       	breq	.+6      	; 0x1bc4 <EXTI_vSenseControl+0x16a>
    1bbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc0:	82 30       	cpi	r24, 0x02	; 2
    1bc2:	a9 f4       	brne	.+42     	; 0x1bee <EXTI_vSenseControl+0x194>
				if(Loc_u8Mode==Rising_Egde){
    1bc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc6:	82 30       	cpi	r24, 0x02	; 2
    1bc8:	41 f4       	brne	.+16     	; 0x1bda <EXTI_vSenseControl+0x180>
					SET_BIT(MCUCSR,6);
    1bca:	a4 e5       	ldi	r26, 0x54	; 84
    1bcc:	b0 e0       	ldi	r27, 0x00	; 0
    1bce:	e4 e5       	ldi	r30, 0x54	; 84
    1bd0:	f0 e0       	ldi	r31, 0x00	; 0
    1bd2:	80 81       	ld	r24, Z
    1bd4:	80 64       	ori	r24, 0x40	; 64
    1bd6:	8c 93       	st	X, r24
    1bd8:	0a c0       	rjmp	.+20     	; 0x1bee <EXTI_vSenseControl+0x194>
				}
				else if(Loc_u8Mode==Falling_Edge){
    1bda:	8a 81       	ldd	r24, Y+2	; 0x02
    1bdc:	83 30       	cpi	r24, 0x03	; 3
    1bde:	39 f4       	brne	.+14     	; 0x1bee <EXTI_vSenseControl+0x194>
					CLR_BIT(MCUCSR,6);
    1be0:	a4 e5       	ldi	r26, 0x54	; 84
    1be2:	b0 e0       	ldi	r27, 0x00	; 0
    1be4:	e4 e5       	ldi	r30, 0x54	; 84
    1be6:	f0 e0       	ldi	r31, 0x00	; 0
    1be8:	80 81       	ld	r24, Z
    1bea:	8f 7b       	andi	r24, 0xBF	; 191
    1bec:	8c 93       	st	X, r24
	}
	else{
		//do nothing
	}

}
    1bee:	0f 90       	pop	r0
    1bf0:	0f 90       	pop	r0
    1bf2:	cf 91       	pop	r28
    1bf4:	df 91       	pop	r29
    1bf6:	08 95       	ret

00001bf8 <EXTI_INT0CallBack>:
void EXTI_INT0CallBack(void(*ptr)(void)){
    1bf8:	df 93       	push	r29
    1bfa:	cf 93       	push	r28
    1bfc:	00 d0       	rcall	.+0      	; 0x1bfe <EXTI_INT0CallBack+0x6>
    1bfe:	cd b7       	in	r28, 0x3d	; 61
    1c00:	de b7       	in	r29, 0x3e	; 62
    1c02:	9a 83       	std	Y+2, r25	; 0x02
    1c04:	89 83       	std	Y+1, r24	; 0x01
	if(ptr!='\0'){
    1c06:	89 81       	ldd	r24, Y+1	; 0x01
    1c08:	9a 81       	ldd	r25, Y+2	; 0x02
    1c0a:	00 97       	sbiw	r24, 0x00	; 0
    1c0c:	31 f0       	breq	.+12     	; 0x1c1a <EXTI_INT0CallBack+0x22>
		Gptr0=ptr;
    1c0e:	89 81       	ldd	r24, Y+1	; 0x01
    1c10:	9a 81       	ldd	r25, Y+2	; 0x02
    1c12:	90 93 de 00 	sts	0x00DE, r25
    1c16:	80 93 dd 00 	sts	0x00DD, r24
	}
}
    1c1a:	0f 90       	pop	r0
    1c1c:	0f 90       	pop	r0
    1c1e:	cf 91       	pop	r28
    1c20:	df 91       	pop	r29
    1c22:	08 95       	ret

00001c24 <EXTI_INT1CallBack>:
void EXTI_INT1CallBack(void(*ptr)(void)){
    1c24:	df 93       	push	r29
    1c26:	cf 93       	push	r28
    1c28:	00 d0       	rcall	.+0      	; 0x1c2a <EXTI_INT1CallBack+0x6>
    1c2a:	cd b7       	in	r28, 0x3d	; 61
    1c2c:	de b7       	in	r29, 0x3e	; 62
    1c2e:	9a 83       	std	Y+2, r25	; 0x02
    1c30:	89 83       	std	Y+1, r24	; 0x01
	if(ptr!='\0'){
    1c32:	89 81       	ldd	r24, Y+1	; 0x01
    1c34:	9a 81       	ldd	r25, Y+2	; 0x02
    1c36:	00 97       	sbiw	r24, 0x00	; 0
    1c38:	31 f0       	breq	.+12     	; 0x1c46 <EXTI_INT1CallBack+0x22>
		Gptr1=ptr;
    1c3a:	89 81       	ldd	r24, Y+1	; 0x01
    1c3c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c3e:	90 93 e0 00 	sts	0x00E0, r25
    1c42:	80 93 df 00 	sts	0x00DF, r24
	}
}
    1c46:	0f 90       	pop	r0
    1c48:	0f 90       	pop	r0
    1c4a:	cf 91       	pop	r28
    1c4c:	df 91       	pop	r29
    1c4e:	08 95       	ret

00001c50 <EXTI_INT2CallBack>:
void EXTI_INT2CallBack(void(*ptr)(void)){
    1c50:	df 93       	push	r29
    1c52:	cf 93       	push	r28
    1c54:	00 d0       	rcall	.+0      	; 0x1c56 <EXTI_INT2CallBack+0x6>
    1c56:	cd b7       	in	r28, 0x3d	; 61
    1c58:	de b7       	in	r29, 0x3e	; 62
    1c5a:	9a 83       	std	Y+2, r25	; 0x02
    1c5c:	89 83       	std	Y+1, r24	; 0x01
	if(ptr!='\0'){
    1c5e:	89 81       	ldd	r24, Y+1	; 0x01
    1c60:	9a 81       	ldd	r25, Y+2	; 0x02
    1c62:	00 97       	sbiw	r24, 0x00	; 0
    1c64:	31 f0       	breq	.+12     	; 0x1c72 <EXTI_INT2CallBack+0x22>
		Gptr2=ptr;
    1c66:	89 81       	ldd	r24, Y+1	; 0x01
    1c68:	9a 81       	ldd	r25, Y+2	; 0x02
    1c6a:	90 93 e2 00 	sts	0x00E2, r25
    1c6e:	80 93 e1 00 	sts	0x00E1, r24
	}
}
    1c72:	0f 90       	pop	r0
    1c74:	0f 90       	pop	r0
    1c76:	cf 91       	pop	r28
    1c78:	df 91       	pop	r29
    1c7a:	08 95       	ret

00001c7c <__vector_1>:
ISR(INT0_vect){
    1c7c:	1f 92       	push	r1
    1c7e:	0f 92       	push	r0
    1c80:	0f b6       	in	r0, 0x3f	; 63
    1c82:	0f 92       	push	r0
    1c84:	11 24       	eor	r1, r1
    1c86:	2f 93       	push	r18
    1c88:	3f 93       	push	r19
    1c8a:	4f 93       	push	r20
    1c8c:	5f 93       	push	r21
    1c8e:	6f 93       	push	r22
    1c90:	7f 93       	push	r23
    1c92:	8f 93       	push	r24
    1c94:	9f 93       	push	r25
    1c96:	af 93       	push	r26
    1c98:	bf 93       	push	r27
    1c9a:	ef 93       	push	r30
    1c9c:	ff 93       	push	r31
    1c9e:	df 93       	push	r29
    1ca0:	cf 93       	push	r28
    1ca2:	cd b7       	in	r28, 0x3d	; 61
    1ca4:	de b7       	in	r29, 0x3e	; 62
	if(Gptr0!='\0'){
    1ca6:	80 91 dd 00 	lds	r24, 0x00DD
    1caa:	90 91 de 00 	lds	r25, 0x00DE
    1cae:	00 97       	sbiw	r24, 0x00	; 0
    1cb0:	29 f0       	breq	.+10     	; 0x1cbc <__vector_1+0x40>
		Gptr0();
    1cb2:	e0 91 dd 00 	lds	r30, 0x00DD
    1cb6:	f0 91 de 00 	lds	r31, 0x00DE
    1cba:	09 95       	icall
	}
}
    1cbc:	cf 91       	pop	r28
    1cbe:	df 91       	pop	r29
    1cc0:	ff 91       	pop	r31
    1cc2:	ef 91       	pop	r30
    1cc4:	bf 91       	pop	r27
    1cc6:	af 91       	pop	r26
    1cc8:	9f 91       	pop	r25
    1cca:	8f 91       	pop	r24
    1ccc:	7f 91       	pop	r23
    1cce:	6f 91       	pop	r22
    1cd0:	5f 91       	pop	r21
    1cd2:	4f 91       	pop	r20
    1cd4:	3f 91       	pop	r19
    1cd6:	2f 91       	pop	r18
    1cd8:	0f 90       	pop	r0
    1cda:	0f be       	out	0x3f, r0	; 63
    1cdc:	0f 90       	pop	r0
    1cde:	1f 90       	pop	r1
    1ce0:	18 95       	reti

00001ce2 <__vector_2>:
ISR(INT1_vect){
    1ce2:	1f 92       	push	r1
    1ce4:	0f 92       	push	r0
    1ce6:	0f b6       	in	r0, 0x3f	; 63
    1ce8:	0f 92       	push	r0
    1cea:	11 24       	eor	r1, r1
    1cec:	2f 93       	push	r18
    1cee:	3f 93       	push	r19
    1cf0:	4f 93       	push	r20
    1cf2:	5f 93       	push	r21
    1cf4:	6f 93       	push	r22
    1cf6:	7f 93       	push	r23
    1cf8:	8f 93       	push	r24
    1cfa:	9f 93       	push	r25
    1cfc:	af 93       	push	r26
    1cfe:	bf 93       	push	r27
    1d00:	ef 93       	push	r30
    1d02:	ff 93       	push	r31
    1d04:	df 93       	push	r29
    1d06:	cf 93       	push	r28
    1d08:	cd b7       	in	r28, 0x3d	; 61
    1d0a:	de b7       	in	r29, 0x3e	; 62
	if(Gptr1!='\0'){
    1d0c:	80 91 df 00 	lds	r24, 0x00DF
    1d10:	90 91 e0 00 	lds	r25, 0x00E0
    1d14:	00 97       	sbiw	r24, 0x00	; 0
    1d16:	29 f0       	breq	.+10     	; 0x1d22 <__vector_2+0x40>
		Gptr1();
    1d18:	e0 91 df 00 	lds	r30, 0x00DF
    1d1c:	f0 91 e0 00 	lds	r31, 0x00E0
    1d20:	09 95       	icall
	}
}
    1d22:	cf 91       	pop	r28
    1d24:	df 91       	pop	r29
    1d26:	ff 91       	pop	r31
    1d28:	ef 91       	pop	r30
    1d2a:	bf 91       	pop	r27
    1d2c:	af 91       	pop	r26
    1d2e:	9f 91       	pop	r25
    1d30:	8f 91       	pop	r24
    1d32:	7f 91       	pop	r23
    1d34:	6f 91       	pop	r22
    1d36:	5f 91       	pop	r21
    1d38:	4f 91       	pop	r20
    1d3a:	3f 91       	pop	r19
    1d3c:	2f 91       	pop	r18
    1d3e:	0f 90       	pop	r0
    1d40:	0f be       	out	0x3f, r0	; 63
    1d42:	0f 90       	pop	r0
    1d44:	1f 90       	pop	r1
    1d46:	18 95       	reti

00001d48 <INT2_vect>:
ISR(INT2_vect){
    1d48:	1f 92       	push	r1
    1d4a:	0f 92       	push	r0
    1d4c:	0f b6       	in	r0, 0x3f	; 63
    1d4e:	0f 92       	push	r0
    1d50:	11 24       	eor	r1, r1
    1d52:	2f 93       	push	r18
    1d54:	3f 93       	push	r19
    1d56:	4f 93       	push	r20
    1d58:	5f 93       	push	r21
    1d5a:	6f 93       	push	r22
    1d5c:	7f 93       	push	r23
    1d5e:	8f 93       	push	r24
    1d60:	9f 93       	push	r25
    1d62:	af 93       	push	r26
    1d64:	bf 93       	push	r27
    1d66:	ef 93       	push	r30
    1d68:	ff 93       	push	r31
    1d6a:	df 93       	push	r29
    1d6c:	cf 93       	push	r28
    1d6e:	cd b7       	in	r28, 0x3d	; 61
    1d70:	de b7       	in	r29, 0x3e	; 62
	if(Gptr2!='\0'){
    1d72:	80 91 e1 00 	lds	r24, 0x00E1
    1d76:	90 91 e2 00 	lds	r25, 0x00E2
    1d7a:	00 97       	sbiw	r24, 0x00	; 0
    1d7c:	29 f0       	breq	.+10     	; 0x1d88 <INT2_vect+0x40>
		Gptr2();
    1d7e:	e0 91 e1 00 	lds	r30, 0x00E1
    1d82:	f0 91 e2 00 	lds	r31, 0x00E2
    1d86:	09 95       	icall
	}
}
    1d88:	cf 91       	pop	r28
    1d8a:	df 91       	pop	r29
    1d8c:	ff 91       	pop	r31
    1d8e:	ef 91       	pop	r30
    1d90:	bf 91       	pop	r27
    1d92:	af 91       	pop	r26
    1d94:	9f 91       	pop	r25
    1d96:	8f 91       	pop	r24
    1d98:	7f 91       	pop	r23
    1d9a:	6f 91       	pop	r22
    1d9c:	5f 91       	pop	r21
    1d9e:	4f 91       	pop	r20
    1da0:	3f 91       	pop	r19
    1da2:	2f 91       	pop	r18
    1da4:	0f 90       	pop	r0
    1da6:	0f be       	out	0x3f, r0	; 63
    1da8:	0f 90       	pop	r0
    1daa:	1f 90       	pop	r1
    1dac:	18 95       	reti

00001dae <DIO_vSetPortDirection>:

 * \Parameters (in) : Loc_u8PortID   PORT wanted to change it's Direction
 * 					Loc_u8PortDirection	    choose direction Input or Output
 * \Parameters (out): None
 *******************************************************************************/
void DIO_vSetPortDirection(u8 Loc_u8PortID, u8 Loc_u8PortDirection){
    1dae:	df 93       	push	r29
    1db0:	cf 93       	push	r28
    1db2:	00 d0       	rcall	.+0      	; 0x1db4 <DIO_vSetPortDirection+0x6>
    1db4:	cd b7       	in	r28, 0x3d	; 61
    1db6:	de b7       	in	r29, 0x3e	; 62
    1db8:	89 83       	std	Y+1, r24	; 0x01
    1dba:	6a 83       	std	Y+2, r22	; 0x02
	if(Loc_u8PortID<=PortD){
    1dbc:	89 81       	ldd	r24, Y+1	; 0x01
    1dbe:	84 30       	cpi	r24, 0x04	; 4
    1dc0:	f8 f4       	brcc	.+62     	; 0x1e00 <DIO_vSetPortDirection+0x52>
		if(Loc_u8PortID==PortA){
    1dc2:	89 81       	ldd	r24, Y+1	; 0x01
    1dc4:	88 23       	and	r24, r24
    1dc6:	29 f4       	brne	.+10     	; 0x1dd2 <DIO_vSetPortDirection+0x24>
			DDRA = Loc_u8PortDirection;
    1dc8:	ea e3       	ldi	r30, 0x3A	; 58
    1dca:	f0 e0       	ldi	r31, 0x00	; 0
    1dcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dce:	80 83       	st	Z, r24
    1dd0:	17 c0       	rjmp	.+46     	; 0x1e00 <DIO_vSetPortDirection+0x52>
		}
		else if(Loc_u8PortID==PortB){
    1dd2:	89 81       	ldd	r24, Y+1	; 0x01
    1dd4:	81 30       	cpi	r24, 0x01	; 1
    1dd6:	29 f4       	brne	.+10     	; 0x1de2 <DIO_vSetPortDirection+0x34>
			DDRB = Loc_u8PortDirection;
    1dd8:	e7 e3       	ldi	r30, 0x37	; 55
    1dda:	f0 e0       	ldi	r31, 0x00	; 0
    1ddc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dde:	80 83       	st	Z, r24
    1de0:	0f c0       	rjmp	.+30     	; 0x1e00 <DIO_vSetPortDirection+0x52>
		}
		else if(Loc_u8PortID==PortC){
    1de2:	89 81       	ldd	r24, Y+1	; 0x01
    1de4:	82 30       	cpi	r24, 0x02	; 2
    1de6:	29 f4       	brne	.+10     	; 0x1df2 <DIO_vSetPortDirection+0x44>
			DDRC = Loc_u8PortDirection;
    1de8:	e4 e3       	ldi	r30, 0x34	; 52
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	8a 81       	ldd	r24, Y+2	; 0x02
    1dee:	80 83       	st	Z, r24
    1df0:	07 c0       	rjmp	.+14     	; 0x1e00 <DIO_vSetPortDirection+0x52>
		}
		else if(Loc_u8PortID==PortD){
    1df2:	89 81       	ldd	r24, Y+1	; 0x01
    1df4:	83 30       	cpi	r24, 0x03	; 3
    1df6:	21 f4       	brne	.+8      	; 0x1e00 <DIO_vSetPortDirection+0x52>
			DDRD = Loc_u8PortDirection;
    1df8:	e1 e3       	ldi	r30, 0x31	; 49
    1dfa:	f0 e0       	ldi	r31, 0x00	; 0
    1dfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfe:	80 83       	st	Z, r24
		}
	}
	else{
		//do nothing
	}
}
    1e00:	0f 90       	pop	r0
    1e02:	0f 90       	pop	r0
    1e04:	cf 91       	pop	r28
    1e06:	df 91       	pop	r29
    1e08:	08 95       	ret

00001e0a <DIO_vSetPortValue>:

* \Parameters (in) : Loc_u8PortID   PORT wanted to change it's value
* 					Loc_u8PortDirection	    choose value High or Low
* \Parameters (out): None
*******************************************************************************/
void DIO_vSetPortValue(u8 Loc_u8PortID, u8 Loc_u8PortValue){
    1e0a:	df 93       	push	r29
    1e0c:	cf 93       	push	r28
    1e0e:	00 d0       	rcall	.+0      	; 0x1e10 <DIO_vSetPortValue+0x6>
    1e10:	cd b7       	in	r28, 0x3d	; 61
    1e12:	de b7       	in	r29, 0x3e	; 62
    1e14:	89 83       	std	Y+1, r24	; 0x01
    1e16:	6a 83       	std	Y+2, r22	; 0x02
	if(Loc_u8PortID<=PortD){
    1e18:	89 81       	ldd	r24, Y+1	; 0x01
    1e1a:	84 30       	cpi	r24, 0x04	; 4
    1e1c:	f8 f4       	brcc	.+62     	; 0x1e5c <DIO_vSetPortValue+0x52>
		if(Loc_u8PortID==PortA){
    1e1e:	89 81       	ldd	r24, Y+1	; 0x01
    1e20:	88 23       	and	r24, r24
    1e22:	29 f4       	brne	.+10     	; 0x1e2e <DIO_vSetPortValue+0x24>
			PORTA = Loc_u8PortValue;
    1e24:	eb e3       	ldi	r30, 0x3B	; 59
    1e26:	f0 e0       	ldi	r31, 0x00	; 0
    1e28:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2a:	80 83       	st	Z, r24
    1e2c:	17 c0       	rjmp	.+46     	; 0x1e5c <DIO_vSetPortValue+0x52>
		}
		else if(Loc_u8PortID==PortB){
    1e2e:	89 81       	ldd	r24, Y+1	; 0x01
    1e30:	81 30       	cpi	r24, 0x01	; 1
    1e32:	29 f4       	brne	.+10     	; 0x1e3e <DIO_vSetPortValue+0x34>
			PORTB = Loc_u8PortValue;
    1e34:	e8 e3       	ldi	r30, 0x38	; 56
    1e36:	f0 e0       	ldi	r31, 0x00	; 0
    1e38:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3a:	80 83       	st	Z, r24
    1e3c:	0f c0       	rjmp	.+30     	; 0x1e5c <DIO_vSetPortValue+0x52>
		}
		else if(Loc_u8PortID==PortC){
    1e3e:	89 81       	ldd	r24, Y+1	; 0x01
    1e40:	82 30       	cpi	r24, 0x02	; 2
    1e42:	29 f4       	brne	.+10     	; 0x1e4e <DIO_vSetPortValue+0x44>
			PORTC = Loc_u8PortValue;
    1e44:	e5 e3       	ldi	r30, 0x35	; 53
    1e46:	f0 e0       	ldi	r31, 0x00	; 0
    1e48:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4a:	80 83       	st	Z, r24
    1e4c:	07 c0       	rjmp	.+14     	; 0x1e5c <DIO_vSetPortValue+0x52>
		}
		else if(Loc_u8PortID==PortD){
    1e4e:	89 81       	ldd	r24, Y+1	; 0x01
    1e50:	83 30       	cpi	r24, 0x03	; 3
    1e52:	21 f4       	brne	.+8      	; 0x1e5c <DIO_vSetPortValue+0x52>
			PORTD = Loc_u8PortValue;
    1e54:	e2 e3       	ldi	r30, 0x32	; 50
    1e56:	f0 e0       	ldi	r31, 0x00	; 0
    1e58:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5a:	80 83       	st	Z, r24
		}
	}
	else{
		//do nothing
	}
}
    1e5c:	0f 90       	pop	r0
    1e5e:	0f 90       	pop	r0
    1e60:	cf 91       	pop	r28
    1e62:	df 91       	pop	r29
    1e64:	08 95       	ret

00001e66 <DIO_u8PGetPortValue>:

* \Parameters (in) : Loc_u8PortID   PORT wanted to Read it's value
* \Parameters (out): PINx
*  \Return value:   : unsigned char
*******************************************************************************/
u8 DIO_u8PGetPortValue(u8 Loc_u8PortID){
    1e66:	df 93       	push	r29
    1e68:	cf 93       	push	r28
    1e6a:	00 d0       	rcall	.+0      	; 0x1e6c <DIO_u8PGetPortValue+0x6>
    1e6c:	cd b7       	in	r28, 0x3d	; 61
    1e6e:	de b7       	in	r29, 0x3e	; 62
    1e70:	89 83       	std	Y+1, r24	; 0x01
	if(Loc_u8PortID<=PortD){
    1e72:	89 81       	ldd	r24, Y+1	; 0x01
    1e74:	84 30       	cpi	r24, 0x04	; 4
    1e76:	00 f5       	brcc	.+64     	; 0x1eb8 <DIO_u8PGetPortValue+0x52>
		if(Loc_u8PortID==PortA){
    1e78:	89 81       	ldd	r24, Y+1	; 0x01
    1e7a:	88 23       	and	r24, r24
    1e7c:	29 f4       	brne	.+10     	; 0x1e88 <DIO_u8PGetPortValue+0x22>
			return PINA;
    1e7e:	e9 e3       	ldi	r30, 0x39	; 57
    1e80:	f0 e0       	ldi	r31, 0x00	; 0
    1e82:	80 81       	ld	r24, Z
    1e84:	8a 83       	std	Y+2, r24	; 0x02
    1e86:	1a c0       	rjmp	.+52     	; 0x1ebc <DIO_u8PGetPortValue+0x56>
		}
		else if(Loc_u8PortID==PortB){
    1e88:	89 81       	ldd	r24, Y+1	; 0x01
    1e8a:	81 30       	cpi	r24, 0x01	; 1
    1e8c:	29 f4       	brne	.+10     	; 0x1e98 <DIO_u8PGetPortValue+0x32>
			return PINB;
    1e8e:	e6 e3       	ldi	r30, 0x36	; 54
    1e90:	f0 e0       	ldi	r31, 0x00	; 0
    1e92:	80 81       	ld	r24, Z
    1e94:	8a 83       	std	Y+2, r24	; 0x02
    1e96:	12 c0       	rjmp	.+36     	; 0x1ebc <DIO_u8PGetPortValue+0x56>
		}
		else if(Loc_u8PortID==PortC){
    1e98:	89 81       	ldd	r24, Y+1	; 0x01
    1e9a:	82 30       	cpi	r24, 0x02	; 2
    1e9c:	29 f4       	brne	.+10     	; 0x1ea8 <DIO_u8PGetPortValue+0x42>
			return PINC;
    1e9e:	e3 e3       	ldi	r30, 0x33	; 51
    1ea0:	f0 e0       	ldi	r31, 0x00	; 0
    1ea2:	80 81       	ld	r24, Z
    1ea4:	8a 83       	std	Y+2, r24	; 0x02
    1ea6:	0a c0       	rjmp	.+20     	; 0x1ebc <DIO_u8PGetPortValue+0x56>
		}
		else if(Loc_u8PortID==PortD){
    1ea8:	89 81       	ldd	r24, Y+1	; 0x01
    1eaa:	83 30       	cpi	r24, 0x03	; 3
    1eac:	29 f4       	brne	.+10     	; 0x1eb8 <DIO_u8PGetPortValue+0x52>
			return PIND;
    1eae:	e0 e3       	ldi	r30, 0x30	; 48
    1eb0:	f0 e0       	ldi	r31, 0x00	; 0
    1eb2:	80 81       	ld	r24, Z
    1eb4:	8a 83       	std	Y+2, r24	; 0x02
    1eb6:	02 c0       	rjmp	.+4      	; 0x1ebc <DIO_u8PGetPortValue+0x56>
		}
	}
	else{
		//do nothing
	}
	return 0xff;
    1eb8:	8f ef       	ldi	r24, 0xFF	; 255
    1eba:	8a 83       	std	Y+2, r24	; 0x02
    1ebc:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1ebe:	0f 90       	pop	r0
    1ec0:	0f 90       	pop	r0
    1ec2:	cf 91       	pop	r28
    1ec4:	df 91       	pop	r29
    1ec6:	08 95       	ret

00001ec8 <DIO_vTogPortValue>:
*

* \Parameters (in) : Loc_u8PortID  PORT wanted to Toggle it's value
* \Parameters (out): None
*******************************************************************************/
void DIO_vTogPortValue(u8 Loc_u8PortID){
    1ec8:	df 93       	push	r29
    1eca:	cf 93       	push	r28
    1ecc:	0f 92       	push	r0
    1ece:	cd b7       	in	r28, 0x3d	; 61
    1ed0:	de b7       	in	r29, 0x3e	; 62
    1ed2:	89 83       	std	Y+1, r24	; 0x01
	if(Loc_u8PortID<=PortD){
    1ed4:	89 81       	ldd	r24, Y+1	; 0x01
    1ed6:	84 30       	cpi	r24, 0x04	; 4
    1ed8:	58 f5       	brcc	.+86     	; 0x1f30 <DIO_vTogPortValue+0x68>
		if(Loc_u8PortID==PortA){
    1eda:	89 81       	ldd	r24, Y+1	; 0x01
    1edc:	88 23       	and	r24, r24
    1ede:	41 f4       	brne	.+16     	; 0x1ef0 <DIO_vTogPortValue+0x28>
			PORTA = ~PORTA;
    1ee0:	ab e3       	ldi	r26, 0x3B	; 59
    1ee2:	b0 e0       	ldi	r27, 0x00	; 0
    1ee4:	eb e3       	ldi	r30, 0x3B	; 59
    1ee6:	f0 e0       	ldi	r31, 0x00	; 0
    1ee8:	80 81       	ld	r24, Z
    1eea:	80 95       	com	r24
    1eec:	8c 93       	st	X, r24
    1eee:	20 c0       	rjmp	.+64     	; 0x1f30 <DIO_vTogPortValue+0x68>
		}
		else if(Loc_u8PortID==PortB){
    1ef0:	89 81       	ldd	r24, Y+1	; 0x01
    1ef2:	81 30       	cpi	r24, 0x01	; 1
    1ef4:	41 f4       	brne	.+16     	; 0x1f06 <DIO_vTogPortValue+0x3e>
			PORTB = ~PORTB;
    1ef6:	a8 e3       	ldi	r26, 0x38	; 56
    1ef8:	b0 e0       	ldi	r27, 0x00	; 0
    1efa:	e8 e3       	ldi	r30, 0x38	; 56
    1efc:	f0 e0       	ldi	r31, 0x00	; 0
    1efe:	80 81       	ld	r24, Z
    1f00:	80 95       	com	r24
    1f02:	8c 93       	st	X, r24
    1f04:	15 c0       	rjmp	.+42     	; 0x1f30 <DIO_vTogPortValue+0x68>
		}
		else if(Loc_u8PortID==PortC){
    1f06:	89 81       	ldd	r24, Y+1	; 0x01
    1f08:	82 30       	cpi	r24, 0x02	; 2
    1f0a:	41 f4       	brne	.+16     	; 0x1f1c <DIO_vTogPortValue+0x54>
			PORTC = ~PORTC;
    1f0c:	a5 e3       	ldi	r26, 0x35	; 53
    1f0e:	b0 e0       	ldi	r27, 0x00	; 0
    1f10:	e5 e3       	ldi	r30, 0x35	; 53
    1f12:	f0 e0       	ldi	r31, 0x00	; 0
    1f14:	80 81       	ld	r24, Z
    1f16:	80 95       	com	r24
    1f18:	8c 93       	st	X, r24
    1f1a:	0a c0       	rjmp	.+20     	; 0x1f30 <DIO_vTogPortValue+0x68>
		}
		else if(Loc_u8PortID==PortD){
    1f1c:	89 81       	ldd	r24, Y+1	; 0x01
    1f1e:	83 30       	cpi	r24, 0x03	; 3
    1f20:	39 f4       	brne	.+14     	; 0x1f30 <DIO_vTogPortValue+0x68>
			PORTD = ~PORTD;
    1f22:	a2 e3       	ldi	r26, 0x32	; 50
    1f24:	b0 e0       	ldi	r27, 0x00	; 0
    1f26:	e2 e3       	ldi	r30, 0x32	; 50
    1f28:	f0 e0       	ldi	r31, 0x00	; 0
    1f2a:	80 81       	ld	r24, Z
    1f2c:	80 95       	com	r24
    1f2e:	8c 93       	st	X, r24
		}
	}
	else{
		//do nothing
	}
}
    1f30:	0f 90       	pop	r0
    1f32:	cf 91       	pop	r28
    1f34:	df 91       	pop	r29
    1f36:	08 95       	ret

00001f38 <DIO_vSetPinDirection>:
* \Parameters (in) : Loc_u8PortID   PIN PORT
* 					Loc_u8PinID		PIN wanted to change it's direction
* 					Loc_u8PinDirection  choose PIN direction (InPut,OutPut)
* \Parameters (out): None
*******************************************************************************/
void DIO_vSetPinDirection(u8 Loc_u8PortID, u8 Loc_u8PinID, u8 Loc_u8PinDirection){
    1f38:	df 93       	push	r29
    1f3a:	cf 93       	push	r28
    1f3c:	00 d0       	rcall	.+0      	; 0x1f3e <DIO_vSetPinDirection+0x6>
    1f3e:	0f 92       	push	r0
    1f40:	cd b7       	in	r28, 0x3d	; 61
    1f42:	de b7       	in	r29, 0x3e	; 62
    1f44:	89 83       	std	Y+1, r24	; 0x01
    1f46:	6a 83       	std	Y+2, r22	; 0x02
    1f48:	4b 83       	std	Y+3, r20	; 0x03
	if (Loc_u8PinDirection==Pin_OutPut){
    1f4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4c:	81 30       	cpi	r24, 0x01	; 1
    1f4e:	09 f0       	breq	.+2      	; 0x1f52 <DIO_vSetPinDirection+0x1a>
    1f50:	75 c0       	rjmp	.+234    	; 0x203c <DIO_vSetPinDirection+0x104>

		if(Loc_u8PortID<=PortD){
    1f52:	89 81       	ldd	r24, Y+1	; 0x01
    1f54:	84 30       	cpi	r24, 0x04	; 4
    1f56:	08 f0       	brcs	.+2      	; 0x1f5a <DIO_vSetPinDirection+0x22>
    1f58:	ec c0       	rjmp	.+472    	; 0x2132 <DIO_vSetPinDirection+0x1fa>
			if(Loc_u8PortID==PortA){
    1f5a:	89 81       	ldd	r24, Y+1	; 0x01
    1f5c:	88 23       	and	r24, r24
    1f5e:	c9 f4       	brne	.+50     	; 0x1f92 <DIO_vSetPinDirection+0x5a>
				DDRA = SET_BIT(DDRA, Loc_u8PinID);
    1f60:	4a e3       	ldi	r20, 0x3A	; 58
    1f62:	50 e0       	ldi	r21, 0x00	; 0
    1f64:	aa e3       	ldi	r26, 0x3A	; 58
    1f66:	b0 e0       	ldi	r27, 0x00	; 0
    1f68:	ea e3       	ldi	r30, 0x3A	; 58
    1f6a:	f0 e0       	ldi	r31, 0x00	; 0
    1f6c:	80 81       	ld	r24, Z
    1f6e:	68 2f       	mov	r22, r24
    1f70:	8a 81       	ldd	r24, Y+2	; 0x02
    1f72:	28 2f       	mov	r18, r24
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	81 e0       	ldi	r24, 0x01	; 1
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	02 2e       	mov	r0, r18
    1f7c:	02 c0       	rjmp	.+4      	; 0x1f82 <DIO_vSetPinDirection+0x4a>
    1f7e:	88 0f       	add	r24, r24
    1f80:	99 1f       	adc	r25, r25
    1f82:	0a 94       	dec	r0
    1f84:	e2 f7       	brpl	.-8      	; 0x1f7e <DIO_vSetPinDirection+0x46>
    1f86:	86 2b       	or	r24, r22
    1f88:	8c 93       	st	X, r24
    1f8a:	8c 91       	ld	r24, X
    1f8c:	fa 01       	movw	r30, r20
    1f8e:	80 83       	st	Z, r24
    1f90:	d0 c0       	rjmp	.+416    	; 0x2132 <DIO_vSetPinDirection+0x1fa>
			}
			else if(Loc_u8PortID==PortB){
    1f92:	89 81       	ldd	r24, Y+1	; 0x01
    1f94:	81 30       	cpi	r24, 0x01	; 1
    1f96:	c9 f4       	brne	.+50     	; 0x1fca <DIO_vSetPinDirection+0x92>
				DDRB = SET_BIT(DDRB, Loc_u8PinID);
    1f98:	47 e3       	ldi	r20, 0x37	; 55
    1f9a:	50 e0       	ldi	r21, 0x00	; 0
    1f9c:	a7 e3       	ldi	r26, 0x37	; 55
    1f9e:	b0 e0       	ldi	r27, 0x00	; 0
    1fa0:	e7 e3       	ldi	r30, 0x37	; 55
    1fa2:	f0 e0       	ldi	r31, 0x00	; 0
    1fa4:	80 81       	ld	r24, Z
    1fa6:	68 2f       	mov	r22, r24
    1fa8:	8a 81       	ldd	r24, Y+2	; 0x02
    1faa:	28 2f       	mov	r18, r24
    1fac:	30 e0       	ldi	r19, 0x00	; 0
    1fae:	81 e0       	ldi	r24, 0x01	; 1
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	02 2e       	mov	r0, r18
    1fb4:	02 c0       	rjmp	.+4      	; 0x1fba <DIO_vSetPinDirection+0x82>
    1fb6:	88 0f       	add	r24, r24
    1fb8:	99 1f       	adc	r25, r25
    1fba:	0a 94       	dec	r0
    1fbc:	e2 f7       	brpl	.-8      	; 0x1fb6 <DIO_vSetPinDirection+0x7e>
    1fbe:	86 2b       	or	r24, r22
    1fc0:	8c 93       	st	X, r24
    1fc2:	8c 91       	ld	r24, X
    1fc4:	fa 01       	movw	r30, r20
    1fc6:	80 83       	st	Z, r24
    1fc8:	b4 c0       	rjmp	.+360    	; 0x2132 <DIO_vSetPinDirection+0x1fa>
			}
			else if(Loc_u8PortID==PortC){
    1fca:	89 81       	ldd	r24, Y+1	; 0x01
    1fcc:	82 30       	cpi	r24, 0x02	; 2
    1fce:	c9 f4       	brne	.+50     	; 0x2002 <DIO_vSetPinDirection+0xca>
				DDRC = SET_BIT(DDRC, Loc_u8PinID);
    1fd0:	44 e3       	ldi	r20, 0x34	; 52
    1fd2:	50 e0       	ldi	r21, 0x00	; 0
    1fd4:	a4 e3       	ldi	r26, 0x34	; 52
    1fd6:	b0 e0       	ldi	r27, 0x00	; 0
    1fd8:	e4 e3       	ldi	r30, 0x34	; 52
    1fda:	f0 e0       	ldi	r31, 0x00	; 0
    1fdc:	80 81       	ld	r24, Z
    1fde:	68 2f       	mov	r22, r24
    1fe0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe2:	28 2f       	mov	r18, r24
    1fe4:	30 e0       	ldi	r19, 0x00	; 0
    1fe6:	81 e0       	ldi	r24, 0x01	; 1
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	02 2e       	mov	r0, r18
    1fec:	02 c0       	rjmp	.+4      	; 0x1ff2 <DIO_vSetPinDirection+0xba>
    1fee:	88 0f       	add	r24, r24
    1ff0:	99 1f       	adc	r25, r25
    1ff2:	0a 94       	dec	r0
    1ff4:	e2 f7       	brpl	.-8      	; 0x1fee <DIO_vSetPinDirection+0xb6>
    1ff6:	86 2b       	or	r24, r22
    1ff8:	8c 93       	st	X, r24
    1ffa:	8c 91       	ld	r24, X
    1ffc:	fa 01       	movw	r30, r20
    1ffe:	80 83       	st	Z, r24
    2000:	98 c0       	rjmp	.+304    	; 0x2132 <DIO_vSetPinDirection+0x1fa>
			}
			else if(Loc_u8PortID==PortD){
    2002:	89 81       	ldd	r24, Y+1	; 0x01
    2004:	83 30       	cpi	r24, 0x03	; 3
    2006:	09 f0       	breq	.+2      	; 0x200a <DIO_vSetPinDirection+0xd2>
    2008:	94 c0       	rjmp	.+296    	; 0x2132 <DIO_vSetPinDirection+0x1fa>
				DDRD = SET_BIT(DDRD, Loc_u8PinID);
    200a:	41 e3       	ldi	r20, 0x31	; 49
    200c:	50 e0       	ldi	r21, 0x00	; 0
    200e:	a1 e3       	ldi	r26, 0x31	; 49
    2010:	b0 e0       	ldi	r27, 0x00	; 0
    2012:	e1 e3       	ldi	r30, 0x31	; 49
    2014:	f0 e0       	ldi	r31, 0x00	; 0
    2016:	80 81       	ld	r24, Z
    2018:	68 2f       	mov	r22, r24
    201a:	8a 81       	ldd	r24, Y+2	; 0x02
    201c:	28 2f       	mov	r18, r24
    201e:	30 e0       	ldi	r19, 0x00	; 0
    2020:	81 e0       	ldi	r24, 0x01	; 1
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	02 2e       	mov	r0, r18
    2026:	02 c0       	rjmp	.+4      	; 0x202c <DIO_vSetPinDirection+0xf4>
    2028:	88 0f       	add	r24, r24
    202a:	99 1f       	adc	r25, r25
    202c:	0a 94       	dec	r0
    202e:	e2 f7       	brpl	.-8      	; 0x2028 <DIO_vSetPinDirection+0xf0>
    2030:	86 2b       	or	r24, r22
    2032:	8c 93       	st	X, r24
    2034:	8c 91       	ld	r24, X
    2036:	fa 01       	movw	r30, r20
    2038:	80 83       	st	Z, r24
    203a:	7b c0       	rjmp	.+246    	; 0x2132 <DIO_vSetPinDirection+0x1fa>
		else{
			//do nothing
		}

	}
	else if(Loc_u8PinDirection==Pin_InPut){
    203c:	8b 81       	ldd	r24, Y+3	; 0x03
    203e:	88 23       	and	r24, r24
    2040:	09 f0       	breq	.+2      	; 0x2044 <DIO_vSetPinDirection+0x10c>
    2042:	77 c0       	rjmp	.+238    	; 0x2132 <DIO_vSetPinDirection+0x1fa>

		if(Loc_u8PortID<=PortD){
    2044:	89 81       	ldd	r24, Y+1	; 0x01
    2046:	84 30       	cpi	r24, 0x04	; 4
    2048:	08 f0       	brcs	.+2      	; 0x204c <DIO_vSetPinDirection+0x114>
    204a:	73 c0       	rjmp	.+230    	; 0x2132 <DIO_vSetPinDirection+0x1fa>
			if(Loc_u8PortID==PortA){
    204c:	89 81       	ldd	r24, Y+1	; 0x01
    204e:	88 23       	and	r24, r24
    2050:	d1 f4       	brne	.+52     	; 0x2086 <DIO_vSetPinDirection+0x14e>
				DDRA = CLR_BIT(DDRA, Loc_u8PinID);
    2052:	4a e3       	ldi	r20, 0x3A	; 58
    2054:	50 e0       	ldi	r21, 0x00	; 0
    2056:	aa e3       	ldi	r26, 0x3A	; 58
    2058:	b0 e0       	ldi	r27, 0x00	; 0
    205a:	ea e3       	ldi	r30, 0x3A	; 58
    205c:	f0 e0       	ldi	r31, 0x00	; 0
    205e:	80 81       	ld	r24, Z
    2060:	68 2f       	mov	r22, r24
    2062:	8a 81       	ldd	r24, Y+2	; 0x02
    2064:	28 2f       	mov	r18, r24
    2066:	30 e0       	ldi	r19, 0x00	; 0
    2068:	81 e0       	ldi	r24, 0x01	; 1
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	02 2e       	mov	r0, r18
    206e:	02 c0       	rjmp	.+4      	; 0x2074 <DIO_vSetPinDirection+0x13c>
    2070:	88 0f       	add	r24, r24
    2072:	99 1f       	adc	r25, r25
    2074:	0a 94       	dec	r0
    2076:	e2 f7       	brpl	.-8      	; 0x2070 <DIO_vSetPinDirection+0x138>
    2078:	80 95       	com	r24
    207a:	86 23       	and	r24, r22
    207c:	8c 93       	st	X, r24
    207e:	8c 91       	ld	r24, X
    2080:	fa 01       	movw	r30, r20
    2082:	80 83       	st	Z, r24
    2084:	56 c0       	rjmp	.+172    	; 0x2132 <DIO_vSetPinDirection+0x1fa>
			}
			else if(Loc_u8PortID==PortB){
    2086:	89 81       	ldd	r24, Y+1	; 0x01
    2088:	81 30       	cpi	r24, 0x01	; 1
    208a:	d1 f4       	brne	.+52     	; 0x20c0 <DIO_vSetPinDirection+0x188>
				DDRB = CLR_BIT(DDRB, Loc_u8PinID);
    208c:	47 e3       	ldi	r20, 0x37	; 55
    208e:	50 e0       	ldi	r21, 0x00	; 0
    2090:	a7 e3       	ldi	r26, 0x37	; 55
    2092:	b0 e0       	ldi	r27, 0x00	; 0
    2094:	e7 e3       	ldi	r30, 0x37	; 55
    2096:	f0 e0       	ldi	r31, 0x00	; 0
    2098:	80 81       	ld	r24, Z
    209a:	68 2f       	mov	r22, r24
    209c:	8a 81       	ldd	r24, Y+2	; 0x02
    209e:	28 2f       	mov	r18, r24
    20a0:	30 e0       	ldi	r19, 0x00	; 0
    20a2:	81 e0       	ldi	r24, 0x01	; 1
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	02 2e       	mov	r0, r18
    20a8:	02 c0       	rjmp	.+4      	; 0x20ae <DIO_vSetPinDirection+0x176>
    20aa:	88 0f       	add	r24, r24
    20ac:	99 1f       	adc	r25, r25
    20ae:	0a 94       	dec	r0
    20b0:	e2 f7       	brpl	.-8      	; 0x20aa <DIO_vSetPinDirection+0x172>
    20b2:	80 95       	com	r24
    20b4:	86 23       	and	r24, r22
    20b6:	8c 93       	st	X, r24
    20b8:	8c 91       	ld	r24, X
    20ba:	fa 01       	movw	r30, r20
    20bc:	80 83       	st	Z, r24
    20be:	39 c0       	rjmp	.+114    	; 0x2132 <DIO_vSetPinDirection+0x1fa>
			}
			else if(Loc_u8PortID==PortC){
    20c0:	89 81       	ldd	r24, Y+1	; 0x01
    20c2:	82 30       	cpi	r24, 0x02	; 2
    20c4:	d1 f4       	brne	.+52     	; 0x20fa <DIO_vSetPinDirection+0x1c2>
				DDRC = CLR_BIT(DDRC, Loc_u8PinID);
    20c6:	44 e3       	ldi	r20, 0x34	; 52
    20c8:	50 e0       	ldi	r21, 0x00	; 0
    20ca:	a4 e3       	ldi	r26, 0x34	; 52
    20cc:	b0 e0       	ldi	r27, 0x00	; 0
    20ce:	e4 e3       	ldi	r30, 0x34	; 52
    20d0:	f0 e0       	ldi	r31, 0x00	; 0
    20d2:	80 81       	ld	r24, Z
    20d4:	68 2f       	mov	r22, r24
    20d6:	8a 81       	ldd	r24, Y+2	; 0x02
    20d8:	28 2f       	mov	r18, r24
    20da:	30 e0       	ldi	r19, 0x00	; 0
    20dc:	81 e0       	ldi	r24, 0x01	; 1
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	02 2e       	mov	r0, r18
    20e2:	02 c0       	rjmp	.+4      	; 0x20e8 <DIO_vSetPinDirection+0x1b0>
    20e4:	88 0f       	add	r24, r24
    20e6:	99 1f       	adc	r25, r25
    20e8:	0a 94       	dec	r0
    20ea:	e2 f7       	brpl	.-8      	; 0x20e4 <DIO_vSetPinDirection+0x1ac>
    20ec:	80 95       	com	r24
    20ee:	86 23       	and	r24, r22
    20f0:	8c 93       	st	X, r24
    20f2:	8c 91       	ld	r24, X
    20f4:	fa 01       	movw	r30, r20
    20f6:	80 83       	st	Z, r24
    20f8:	1c c0       	rjmp	.+56     	; 0x2132 <DIO_vSetPinDirection+0x1fa>
			}
			else if(Loc_u8PortID==PortD){
    20fa:	89 81       	ldd	r24, Y+1	; 0x01
    20fc:	83 30       	cpi	r24, 0x03	; 3
    20fe:	c9 f4       	brne	.+50     	; 0x2132 <DIO_vSetPinDirection+0x1fa>
				DDRD = CLR_BIT(DDRD, Loc_u8PinID);
    2100:	41 e3       	ldi	r20, 0x31	; 49
    2102:	50 e0       	ldi	r21, 0x00	; 0
    2104:	a1 e3       	ldi	r26, 0x31	; 49
    2106:	b0 e0       	ldi	r27, 0x00	; 0
    2108:	e1 e3       	ldi	r30, 0x31	; 49
    210a:	f0 e0       	ldi	r31, 0x00	; 0
    210c:	80 81       	ld	r24, Z
    210e:	68 2f       	mov	r22, r24
    2110:	8a 81       	ldd	r24, Y+2	; 0x02
    2112:	28 2f       	mov	r18, r24
    2114:	30 e0       	ldi	r19, 0x00	; 0
    2116:	81 e0       	ldi	r24, 0x01	; 1
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	02 2e       	mov	r0, r18
    211c:	02 c0       	rjmp	.+4      	; 0x2122 <DIO_vSetPinDirection+0x1ea>
    211e:	88 0f       	add	r24, r24
    2120:	99 1f       	adc	r25, r25
    2122:	0a 94       	dec	r0
    2124:	e2 f7       	brpl	.-8      	; 0x211e <DIO_vSetPinDirection+0x1e6>
    2126:	80 95       	com	r24
    2128:	86 23       	and	r24, r22
    212a:	8c 93       	st	X, r24
    212c:	8c 91       	ld	r24, X
    212e:	fa 01       	movw	r30, r20
    2130:	80 83       	st	Z, r24
	}
	else{
		//do nothing
	}

}
    2132:	0f 90       	pop	r0
    2134:	0f 90       	pop	r0
    2136:	0f 90       	pop	r0
    2138:	cf 91       	pop	r28
    213a:	df 91       	pop	r29
    213c:	08 95       	ret

0000213e <DIO_vSetPinValue>:
* \Parameters (in) : Loc_u8PortID   PIN PORT
* 					Loc_u8PinID		PIN wanted to change it's value
* 					Loc_u8PinDirection  choose PIN value (Pin_High,Pin_Low)
* \Parameters (out): None
*******************************************************************************/
void DIO_vSetPinValue(u8 Loc_u8PortID, u8 Loc_u8PinID, u8 Loc_u8PinValue){
    213e:	df 93       	push	r29
    2140:	cf 93       	push	r28
    2142:	00 d0       	rcall	.+0      	; 0x2144 <DIO_vSetPinValue+0x6>
    2144:	0f 92       	push	r0
    2146:	cd b7       	in	r28, 0x3d	; 61
    2148:	de b7       	in	r29, 0x3e	; 62
    214a:	89 83       	std	Y+1, r24	; 0x01
    214c:	6a 83       	std	Y+2, r22	; 0x02
    214e:	4b 83       	std	Y+3, r20	; 0x03
	if(Loc_u8PinValue==Pin_High){
    2150:	8b 81       	ldd	r24, Y+3	; 0x03
    2152:	81 30       	cpi	r24, 0x01	; 1
    2154:	09 f0       	breq	.+2      	; 0x2158 <DIO_vSetPinValue+0x1a>
    2156:	61 c0       	rjmp	.+194    	; 0x221a <DIO_vSetPinValue+0xdc>
		if(Loc_u8PortID<=PortD){
    2158:	89 81       	ldd	r24, Y+1	; 0x01
    215a:	84 30       	cpi	r24, 0x04	; 4
    215c:	08 f0       	brcs	.+2      	; 0x2160 <DIO_vSetPinValue+0x22>
    215e:	c4 c0       	rjmp	.+392    	; 0x22e8 <DIO_vSetPinValue+0x1aa>
			if(Loc_u8PortID==PortA){
    2160:	89 81       	ldd	r24, Y+1	; 0x01
    2162:	88 23       	and	r24, r24
    2164:	a1 f4       	brne	.+40     	; 0x218e <DIO_vSetPinValue+0x50>
				SET_BIT(PORTA, Loc_u8PinID);
    2166:	ab e3       	ldi	r26, 0x3B	; 59
    2168:	b0 e0       	ldi	r27, 0x00	; 0
    216a:	eb e3       	ldi	r30, 0x3B	; 59
    216c:	f0 e0       	ldi	r31, 0x00	; 0
    216e:	80 81       	ld	r24, Z
    2170:	48 2f       	mov	r20, r24
    2172:	8a 81       	ldd	r24, Y+2	; 0x02
    2174:	28 2f       	mov	r18, r24
    2176:	30 e0       	ldi	r19, 0x00	; 0
    2178:	81 e0       	ldi	r24, 0x01	; 1
    217a:	90 e0       	ldi	r25, 0x00	; 0
    217c:	02 2e       	mov	r0, r18
    217e:	02 c0       	rjmp	.+4      	; 0x2184 <DIO_vSetPinValue+0x46>
    2180:	88 0f       	add	r24, r24
    2182:	99 1f       	adc	r25, r25
    2184:	0a 94       	dec	r0
    2186:	e2 f7       	brpl	.-8      	; 0x2180 <DIO_vSetPinValue+0x42>
    2188:	84 2b       	or	r24, r20
    218a:	8c 93       	st	X, r24
    218c:	ad c0       	rjmp	.+346    	; 0x22e8 <DIO_vSetPinValue+0x1aa>
			}
			else if(Loc_u8PortID==PortB){
    218e:	89 81       	ldd	r24, Y+1	; 0x01
    2190:	81 30       	cpi	r24, 0x01	; 1
    2192:	a1 f4       	brne	.+40     	; 0x21bc <DIO_vSetPinValue+0x7e>
				SET_BIT(PORTB, Loc_u8PinID);
    2194:	a8 e3       	ldi	r26, 0x38	; 56
    2196:	b0 e0       	ldi	r27, 0x00	; 0
    2198:	e8 e3       	ldi	r30, 0x38	; 56
    219a:	f0 e0       	ldi	r31, 0x00	; 0
    219c:	80 81       	ld	r24, Z
    219e:	48 2f       	mov	r20, r24
    21a0:	8a 81       	ldd	r24, Y+2	; 0x02
    21a2:	28 2f       	mov	r18, r24
    21a4:	30 e0       	ldi	r19, 0x00	; 0
    21a6:	81 e0       	ldi	r24, 0x01	; 1
    21a8:	90 e0       	ldi	r25, 0x00	; 0
    21aa:	02 2e       	mov	r0, r18
    21ac:	02 c0       	rjmp	.+4      	; 0x21b2 <DIO_vSetPinValue+0x74>
    21ae:	88 0f       	add	r24, r24
    21b0:	99 1f       	adc	r25, r25
    21b2:	0a 94       	dec	r0
    21b4:	e2 f7       	brpl	.-8      	; 0x21ae <DIO_vSetPinValue+0x70>
    21b6:	84 2b       	or	r24, r20
    21b8:	8c 93       	st	X, r24
    21ba:	96 c0       	rjmp	.+300    	; 0x22e8 <DIO_vSetPinValue+0x1aa>
			}
			else if(Loc_u8PortID==PortC){
    21bc:	89 81       	ldd	r24, Y+1	; 0x01
    21be:	82 30       	cpi	r24, 0x02	; 2
    21c0:	a1 f4       	brne	.+40     	; 0x21ea <DIO_vSetPinValue+0xac>
				SET_BIT(PORTC, Loc_u8PinID);
    21c2:	a5 e3       	ldi	r26, 0x35	; 53
    21c4:	b0 e0       	ldi	r27, 0x00	; 0
    21c6:	e5 e3       	ldi	r30, 0x35	; 53
    21c8:	f0 e0       	ldi	r31, 0x00	; 0
    21ca:	80 81       	ld	r24, Z
    21cc:	48 2f       	mov	r20, r24
    21ce:	8a 81       	ldd	r24, Y+2	; 0x02
    21d0:	28 2f       	mov	r18, r24
    21d2:	30 e0       	ldi	r19, 0x00	; 0
    21d4:	81 e0       	ldi	r24, 0x01	; 1
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	02 2e       	mov	r0, r18
    21da:	02 c0       	rjmp	.+4      	; 0x21e0 <DIO_vSetPinValue+0xa2>
    21dc:	88 0f       	add	r24, r24
    21de:	99 1f       	adc	r25, r25
    21e0:	0a 94       	dec	r0
    21e2:	e2 f7       	brpl	.-8      	; 0x21dc <DIO_vSetPinValue+0x9e>
    21e4:	84 2b       	or	r24, r20
    21e6:	8c 93       	st	X, r24
    21e8:	7f c0       	rjmp	.+254    	; 0x22e8 <DIO_vSetPinValue+0x1aa>
			}
			else if(Loc_u8PortID==PortD){
    21ea:	89 81       	ldd	r24, Y+1	; 0x01
    21ec:	83 30       	cpi	r24, 0x03	; 3
    21ee:	09 f0       	breq	.+2      	; 0x21f2 <DIO_vSetPinValue+0xb4>
    21f0:	7b c0       	rjmp	.+246    	; 0x22e8 <DIO_vSetPinValue+0x1aa>
				SET_BIT(PORTD, Loc_u8PinID);
    21f2:	a2 e3       	ldi	r26, 0x32	; 50
    21f4:	b0 e0       	ldi	r27, 0x00	; 0
    21f6:	e2 e3       	ldi	r30, 0x32	; 50
    21f8:	f0 e0       	ldi	r31, 0x00	; 0
    21fa:	80 81       	ld	r24, Z
    21fc:	48 2f       	mov	r20, r24
    21fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2200:	28 2f       	mov	r18, r24
    2202:	30 e0       	ldi	r19, 0x00	; 0
    2204:	81 e0       	ldi	r24, 0x01	; 1
    2206:	90 e0       	ldi	r25, 0x00	; 0
    2208:	02 2e       	mov	r0, r18
    220a:	02 c0       	rjmp	.+4      	; 0x2210 <DIO_vSetPinValue+0xd2>
    220c:	88 0f       	add	r24, r24
    220e:	99 1f       	adc	r25, r25
    2210:	0a 94       	dec	r0
    2212:	e2 f7       	brpl	.-8      	; 0x220c <DIO_vSetPinValue+0xce>
    2214:	84 2b       	or	r24, r20
    2216:	8c 93       	st	X, r24
    2218:	67 c0       	rjmp	.+206    	; 0x22e8 <DIO_vSetPinValue+0x1aa>
		}
		else{
			//do nothing
		}
	}
	else if(Loc_u8PinValue==Pin_Low){
    221a:	8b 81       	ldd	r24, Y+3	; 0x03
    221c:	88 23       	and	r24, r24
    221e:	09 f0       	breq	.+2      	; 0x2222 <DIO_vSetPinValue+0xe4>
    2220:	63 c0       	rjmp	.+198    	; 0x22e8 <DIO_vSetPinValue+0x1aa>

		if(Loc_u8PortID<=PortD){
    2222:	89 81       	ldd	r24, Y+1	; 0x01
    2224:	84 30       	cpi	r24, 0x04	; 4
    2226:	08 f0       	brcs	.+2      	; 0x222a <DIO_vSetPinValue+0xec>
    2228:	5f c0       	rjmp	.+190    	; 0x22e8 <DIO_vSetPinValue+0x1aa>
			if(Loc_u8PortID==PortA){
    222a:	89 81       	ldd	r24, Y+1	; 0x01
    222c:	88 23       	and	r24, r24
    222e:	a9 f4       	brne	.+42     	; 0x225a <DIO_vSetPinValue+0x11c>
				CLR_BIT(PORTA, Loc_u8PinID);
    2230:	ab e3       	ldi	r26, 0x3B	; 59
    2232:	b0 e0       	ldi	r27, 0x00	; 0
    2234:	eb e3       	ldi	r30, 0x3B	; 59
    2236:	f0 e0       	ldi	r31, 0x00	; 0
    2238:	80 81       	ld	r24, Z
    223a:	48 2f       	mov	r20, r24
    223c:	8a 81       	ldd	r24, Y+2	; 0x02
    223e:	28 2f       	mov	r18, r24
    2240:	30 e0       	ldi	r19, 0x00	; 0
    2242:	81 e0       	ldi	r24, 0x01	; 1
    2244:	90 e0       	ldi	r25, 0x00	; 0
    2246:	02 2e       	mov	r0, r18
    2248:	02 c0       	rjmp	.+4      	; 0x224e <DIO_vSetPinValue+0x110>
    224a:	88 0f       	add	r24, r24
    224c:	99 1f       	adc	r25, r25
    224e:	0a 94       	dec	r0
    2250:	e2 f7       	brpl	.-8      	; 0x224a <DIO_vSetPinValue+0x10c>
    2252:	80 95       	com	r24
    2254:	84 23       	and	r24, r20
    2256:	8c 93       	st	X, r24
    2258:	47 c0       	rjmp	.+142    	; 0x22e8 <DIO_vSetPinValue+0x1aa>
			}
			else if(Loc_u8PortID==PortB){
    225a:	89 81       	ldd	r24, Y+1	; 0x01
    225c:	81 30       	cpi	r24, 0x01	; 1
    225e:	a9 f4       	brne	.+42     	; 0x228a <DIO_vSetPinValue+0x14c>
				CLR_BIT(PORTB, Loc_u8PinID);
    2260:	a8 e3       	ldi	r26, 0x38	; 56
    2262:	b0 e0       	ldi	r27, 0x00	; 0
    2264:	e8 e3       	ldi	r30, 0x38	; 56
    2266:	f0 e0       	ldi	r31, 0x00	; 0
    2268:	80 81       	ld	r24, Z
    226a:	48 2f       	mov	r20, r24
    226c:	8a 81       	ldd	r24, Y+2	; 0x02
    226e:	28 2f       	mov	r18, r24
    2270:	30 e0       	ldi	r19, 0x00	; 0
    2272:	81 e0       	ldi	r24, 0x01	; 1
    2274:	90 e0       	ldi	r25, 0x00	; 0
    2276:	02 2e       	mov	r0, r18
    2278:	02 c0       	rjmp	.+4      	; 0x227e <DIO_vSetPinValue+0x140>
    227a:	88 0f       	add	r24, r24
    227c:	99 1f       	adc	r25, r25
    227e:	0a 94       	dec	r0
    2280:	e2 f7       	brpl	.-8      	; 0x227a <DIO_vSetPinValue+0x13c>
    2282:	80 95       	com	r24
    2284:	84 23       	and	r24, r20
    2286:	8c 93       	st	X, r24
    2288:	2f c0       	rjmp	.+94     	; 0x22e8 <DIO_vSetPinValue+0x1aa>
			}
			else if(Loc_u8PortID==PortC){
    228a:	89 81       	ldd	r24, Y+1	; 0x01
    228c:	82 30       	cpi	r24, 0x02	; 2
    228e:	a9 f4       	brne	.+42     	; 0x22ba <DIO_vSetPinValue+0x17c>
				CLR_BIT(PORTC, Loc_u8PinID);
    2290:	a5 e3       	ldi	r26, 0x35	; 53
    2292:	b0 e0       	ldi	r27, 0x00	; 0
    2294:	e5 e3       	ldi	r30, 0x35	; 53
    2296:	f0 e0       	ldi	r31, 0x00	; 0
    2298:	80 81       	ld	r24, Z
    229a:	48 2f       	mov	r20, r24
    229c:	8a 81       	ldd	r24, Y+2	; 0x02
    229e:	28 2f       	mov	r18, r24
    22a0:	30 e0       	ldi	r19, 0x00	; 0
    22a2:	81 e0       	ldi	r24, 0x01	; 1
    22a4:	90 e0       	ldi	r25, 0x00	; 0
    22a6:	02 2e       	mov	r0, r18
    22a8:	02 c0       	rjmp	.+4      	; 0x22ae <DIO_vSetPinValue+0x170>
    22aa:	88 0f       	add	r24, r24
    22ac:	99 1f       	adc	r25, r25
    22ae:	0a 94       	dec	r0
    22b0:	e2 f7       	brpl	.-8      	; 0x22aa <DIO_vSetPinValue+0x16c>
    22b2:	80 95       	com	r24
    22b4:	84 23       	and	r24, r20
    22b6:	8c 93       	st	X, r24
    22b8:	17 c0       	rjmp	.+46     	; 0x22e8 <DIO_vSetPinValue+0x1aa>
			}
			else if(Loc_u8PortID==PortD){
    22ba:	89 81       	ldd	r24, Y+1	; 0x01
    22bc:	83 30       	cpi	r24, 0x03	; 3
    22be:	a1 f4       	brne	.+40     	; 0x22e8 <DIO_vSetPinValue+0x1aa>
				CLR_BIT(PORTD, Loc_u8PinID);
    22c0:	a2 e3       	ldi	r26, 0x32	; 50
    22c2:	b0 e0       	ldi	r27, 0x00	; 0
    22c4:	e2 e3       	ldi	r30, 0x32	; 50
    22c6:	f0 e0       	ldi	r31, 0x00	; 0
    22c8:	80 81       	ld	r24, Z
    22ca:	48 2f       	mov	r20, r24
    22cc:	8a 81       	ldd	r24, Y+2	; 0x02
    22ce:	28 2f       	mov	r18, r24
    22d0:	30 e0       	ldi	r19, 0x00	; 0
    22d2:	81 e0       	ldi	r24, 0x01	; 1
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	02 2e       	mov	r0, r18
    22d8:	02 c0       	rjmp	.+4      	; 0x22de <DIO_vSetPinValue+0x1a0>
    22da:	88 0f       	add	r24, r24
    22dc:	99 1f       	adc	r25, r25
    22de:	0a 94       	dec	r0
    22e0:	e2 f7       	brpl	.-8      	; 0x22da <DIO_vSetPinValue+0x19c>
    22e2:	80 95       	com	r24
    22e4:	84 23       	and	r24, r20
    22e6:	8c 93       	st	X, r24
		}
		else{
			//do nothing
		}
	}
}
    22e8:	0f 90       	pop	r0
    22ea:	0f 90       	pop	r0
    22ec:	0f 90       	pop	r0
    22ee:	cf 91       	pop	r28
    22f0:	df 91       	pop	r29
    22f2:	08 95       	ret

000022f4 <DIO_u8PGetPinValue>:
* \Parameters (in) : Loc_u8PortID   PIN PORT
* 					Loc_u8PinID		PIN wanted to read it's value
* \Parameters (out): PINx  value(0,1)
*  \Return value:   : unsigned char
*******************************************************************************/
u8 DIO_u8PGetPinValue(u8 Loc_u8PortID, u8 Loc_u8PinID){
    22f4:	df 93       	push	r29
    22f6:	cf 93       	push	r28
    22f8:	00 d0       	rcall	.+0      	; 0x22fa <DIO_u8PGetPinValue+0x6>
    22fa:	0f 92       	push	r0
    22fc:	cd b7       	in	r28, 0x3d	; 61
    22fe:	de b7       	in	r29, 0x3e	; 62
    2300:	89 83       	std	Y+1, r24	; 0x01
    2302:	6a 83       	std	Y+2, r22	; 0x02
	if(Loc_u8PortID<=PortD){
    2304:	89 81       	ldd	r24, Y+1	; 0x01
    2306:	84 30       	cpi	r24, 0x04	; 4
    2308:	08 f0       	brcs	.+2      	; 0x230c <DIO_u8PGetPinValue+0x18>
    230a:	58 c0       	rjmp	.+176    	; 0x23bc <DIO_u8PGetPinValue+0xc8>
		if(Loc_u8PortID==PortA){
    230c:	89 81       	ldd	r24, Y+1	; 0x01
    230e:	88 23       	and	r24, r24
    2310:	99 f4       	brne	.+38     	; 0x2338 <DIO_u8PGetPinValue+0x44>
			return GET_BIT(PINA, Loc_u8PinID);
    2312:	e9 e3       	ldi	r30, 0x39	; 57
    2314:	f0 e0       	ldi	r31, 0x00	; 0
    2316:	80 81       	ld	r24, Z
    2318:	28 2f       	mov	r18, r24
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	8a 81       	ldd	r24, Y+2	; 0x02
    231e:	88 2f       	mov	r24, r24
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	a9 01       	movw	r20, r18
    2324:	02 c0       	rjmp	.+4      	; 0x232a <DIO_u8PGetPinValue+0x36>
    2326:	55 95       	asr	r21
    2328:	47 95       	ror	r20
    232a:	8a 95       	dec	r24
    232c:	e2 f7       	brpl	.-8      	; 0x2326 <DIO_u8PGetPinValue+0x32>
    232e:	ca 01       	movw	r24, r20
    2330:	58 2f       	mov	r21, r24
    2332:	51 70       	andi	r21, 0x01	; 1
    2334:	5b 83       	std	Y+3, r21	; 0x03
    2336:	44 c0       	rjmp	.+136    	; 0x23c0 <DIO_u8PGetPinValue+0xcc>
		}
		else if(Loc_u8PortID==PortB){
    2338:	89 81       	ldd	r24, Y+1	; 0x01
    233a:	81 30       	cpi	r24, 0x01	; 1
    233c:	99 f4       	brne	.+38     	; 0x2364 <DIO_u8PGetPinValue+0x70>
			return GET_BIT(PINB, Loc_u8PinID);
    233e:	e6 e3       	ldi	r30, 0x36	; 54
    2340:	f0 e0       	ldi	r31, 0x00	; 0
    2342:	80 81       	ld	r24, Z
    2344:	28 2f       	mov	r18, r24
    2346:	30 e0       	ldi	r19, 0x00	; 0
    2348:	8a 81       	ldd	r24, Y+2	; 0x02
    234a:	88 2f       	mov	r24, r24
    234c:	90 e0       	ldi	r25, 0x00	; 0
    234e:	a9 01       	movw	r20, r18
    2350:	02 c0       	rjmp	.+4      	; 0x2356 <DIO_u8PGetPinValue+0x62>
    2352:	55 95       	asr	r21
    2354:	47 95       	ror	r20
    2356:	8a 95       	dec	r24
    2358:	e2 f7       	brpl	.-8      	; 0x2352 <DIO_u8PGetPinValue+0x5e>
    235a:	ca 01       	movw	r24, r20
    235c:	58 2f       	mov	r21, r24
    235e:	51 70       	andi	r21, 0x01	; 1
    2360:	5b 83       	std	Y+3, r21	; 0x03
    2362:	2e c0       	rjmp	.+92     	; 0x23c0 <DIO_u8PGetPinValue+0xcc>
		}
		else if(Loc_u8PortID==PortC){
    2364:	89 81       	ldd	r24, Y+1	; 0x01
    2366:	82 30       	cpi	r24, 0x02	; 2
    2368:	99 f4       	brne	.+38     	; 0x2390 <DIO_u8PGetPinValue+0x9c>
			return GET_BIT(PINC, Loc_u8PinID);
    236a:	e3 e3       	ldi	r30, 0x33	; 51
    236c:	f0 e0       	ldi	r31, 0x00	; 0
    236e:	80 81       	ld	r24, Z
    2370:	28 2f       	mov	r18, r24
    2372:	30 e0       	ldi	r19, 0x00	; 0
    2374:	8a 81       	ldd	r24, Y+2	; 0x02
    2376:	88 2f       	mov	r24, r24
    2378:	90 e0       	ldi	r25, 0x00	; 0
    237a:	a9 01       	movw	r20, r18
    237c:	02 c0       	rjmp	.+4      	; 0x2382 <DIO_u8PGetPinValue+0x8e>
    237e:	55 95       	asr	r21
    2380:	47 95       	ror	r20
    2382:	8a 95       	dec	r24
    2384:	e2 f7       	brpl	.-8      	; 0x237e <DIO_u8PGetPinValue+0x8a>
    2386:	ca 01       	movw	r24, r20
    2388:	58 2f       	mov	r21, r24
    238a:	51 70       	andi	r21, 0x01	; 1
    238c:	5b 83       	std	Y+3, r21	; 0x03
    238e:	18 c0       	rjmp	.+48     	; 0x23c0 <DIO_u8PGetPinValue+0xcc>
		}
		else if(Loc_u8PortID==PortD){
    2390:	89 81       	ldd	r24, Y+1	; 0x01
    2392:	83 30       	cpi	r24, 0x03	; 3
    2394:	99 f4       	brne	.+38     	; 0x23bc <DIO_u8PGetPinValue+0xc8>
			return GET_BIT(PIND, Loc_u8PinID);
    2396:	e0 e3       	ldi	r30, 0x30	; 48
    2398:	f0 e0       	ldi	r31, 0x00	; 0
    239a:	80 81       	ld	r24, Z
    239c:	28 2f       	mov	r18, r24
    239e:	30 e0       	ldi	r19, 0x00	; 0
    23a0:	8a 81       	ldd	r24, Y+2	; 0x02
    23a2:	88 2f       	mov	r24, r24
    23a4:	90 e0       	ldi	r25, 0x00	; 0
    23a6:	a9 01       	movw	r20, r18
    23a8:	02 c0       	rjmp	.+4      	; 0x23ae <DIO_u8PGetPinValue+0xba>
    23aa:	55 95       	asr	r21
    23ac:	47 95       	ror	r20
    23ae:	8a 95       	dec	r24
    23b0:	e2 f7       	brpl	.-8      	; 0x23aa <DIO_u8PGetPinValue+0xb6>
    23b2:	ca 01       	movw	r24, r20
    23b4:	58 2f       	mov	r21, r24
    23b6:	51 70       	andi	r21, 0x01	; 1
    23b8:	5b 83       	std	Y+3, r21	; 0x03
    23ba:	02 c0       	rjmp	.+4      	; 0x23c0 <DIO_u8PGetPinValue+0xcc>
		}
	}
	else{
		//do nothing
	}
	return 0xff;
    23bc:	8f ef       	ldi	r24, 0xFF	; 255
    23be:	8b 83       	std	Y+3, r24	; 0x03
    23c0:	8b 81       	ldd	r24, Y+3	; 0x03
}
    23c2:	0f 90       	pop	r0
    23c4:	0f 90       	pop	r0
    23c6:	0f 90       	pop	r0
    23c8:	cf 91       	pop	r28
    23ca:	df 91       	pop	r29
    23cc:	08 95       	ret

000023ce <DIO_vTogPinValue>:
*
* \Parameters (in) : Loc_u8PortID   PIN PORT
* 					Loc_u8PinID		PIN wanted to Toggle it's value
* \Parameters (out): None
*******************************************************************************/
void DIO_vTogPinValue(u8 Loc_u8PortID, u8 Loc_u8PinID){
    23ce:	df 93       	push	r29
    23d0:	cf 93       	push	r28
    23d2:	00 d0       	rcall	.+0      	; 0x23d4 <DIO_vTogPinValue+0x6>
    23d4:	cd b7       	in	r28, 0x3d	; 61
    23d6:	de b7       	in	r29, 0x3e	; 62
    23d8:	89 83       	std	Y+1, r24	; 0x01
    23da:	6a 83       	std	Y+2, r22	; 0x02
	if(Loc_u8PortID<=PortD){
    23dc:	89 81       	ldd	r24, Y+1	; 0x01
    23de:	84 30       	cpi	r24, 0x04	; 4
    23e0:	08 f0       	brcs	.+2      	; 0x23e4 <DIO_vTogPinValue+0x16>
    23e2:	5b c0       	rjmp	.+182    	; 0x249a <DIO_vTogPinValue+0xcc>
		if(Loc_u8PortID==PortA){
    23e4:	89 81       	ldd	r24, Y+1	; 0x01
    23e6:	88 23       	and	r24, r24
    23e8:	a1 f4       	brne	.+40     	; 0x2412 <DIO_vTogPinValue+0x44>
			TOG_BIT(PORTA, Loc_u8PinID);
    23ea:	ab e3       	ldi	r26, 0x3B	; 59
    23ec:	b0 e0       	ldi	r27, 0x00	; 0
    23ee:	eb e3       	ldi	r30, 0x3B	; 59
    23f0:	f0 e0       	ldi	r31, 0x00	; 0
    23f2:	80 81       	ld	r24, Z
    23f4:	48 2f       	mov	r20, r24
    23f6:	8a 81       	ldd	r24, Y+2	; 0x02
    23f8:	28 2f       	mov	r18, r24
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	81 e0       	ldi	r24, 0x01	; 1
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	02 2e       	mov	r0, r18
    2402:	02 c0       	rjmp	.+4      	; 0x2408 <DIO_vTogPinValue+0x3a>
    2404:	88 0f       	add	r24, r24
    2406:	99 1f       	adc	r25, r25
    2408:	0a 94       	dec	r0
    240a:	e2 f7       	brpl	.-8      	; 0x2404 <DIO_vTogPinValue+0x36>
    240c:	84 27       	eor	r24, r20
    240e:	8c 93       	st	X, r24
    2410:	44 c0       	rjmp	.+136    	; 0x249a <DIO_vTogPinValue+0xcc>
		}
		else if(Loc_u8PortID==PortB){
    2412:	89 81       	ldd	r24, Y+1	; 0x01
    2414:	81 30       	cpi	r24, 0x01	; 1
    2416:	a1 f4       	brne	.+40     	; 0x2440 <DIO_vTogPinValue+0x72>
			TOG_BIT(PORTB, Loc_u8PinID);
    2418:	a8 e3       	ldi	r26, 0x38	; 56
    241a:	b0 e0       	ldi	r27, 0x00	; 0
    241c:	e8 e3       	ldi	r30, 0x38	; 56
    241e:	f0 e0       	ldi	r31, 0x00	; 0
    2420:	80 81       	ld	r24, Z
    2422:	48 2f       	mov	r20, r24
    2424:	8a 81       	ldd	r24, Y+2	; 0x02
    2426:	28 2f       	mov	r18, r24
    2428:	30 e0       	ldi	r19, 0x00	; 0
    242a:	81 e0       	ldi	r24, 0x01	; 1
    242c:	90 e0       	ldi	r25, 0x00	; 0
    242e:	02 2e       	mov	r0, r18
    2430:	02 c0       	rjmp	.+4      	; 0x2436 <DIO_vTogPinValue+0x68>
    2432:	88 0f       	add	r24, r24
    2434:	99 1f       	adc	r25, r25
    2436:	0a 94       	dec	r0
    2438:	e2 f7       	brpl	.-8      	; 0x2432 <DIO_vTogPinValue+0x64>
    243a:	84 27       	eor	r24, r20
    243c:	8c 93       	st	X, r24
    243e:	2d c0       	rjmp	.+90     	; 0x249a <DIO_vTogPinValue+0xcc>
		}
		else if(Loc_u8PortID==PortC){
    2440:	89 81       	ldd	r24, Y+1	; 0x01
    2442:	82 30       	cpi	r24, 0x02	; 2
    2444:	a1 f4       	brne	.+40     	; 0x246e <DIO_vTogPinValue+0xa0>
			TOG_BIT(PORTC, Loc_u8PinID);
    2446:	a5 e3       	ldi	r26, 0x35	; 53
    2448:	b0 e0       	ldi	r27, 0x00	; 0
    244a:	e5 e3       	ldi	r30, 0x35	; 53
    244c:	f0 e0       	ldi	r31, 0x00	; 0
    244e:	80 81       	ld	r24, Z
    2450:	48 2f       	mov	r20, r24
    2452:	8a 81       	ldd	r24, Y+2	; 0x02
    2454:	28 2f       	mov	r18, r24
    2456:	30 e0       	ldi	r19, 0x00	; 0
    2458:	81 e0       	ldi	r24, 0x01	; 1
    245a:	90 e0       	ldi	r25, 0x00	; 0
    245c:	02 2e       	mov	r0, r18
    245e:	02 c0       	rjmp	.+4      	; 0x2464 <DIO_vTogPinValue+0x96>
    2460:	88 0f       	add	r24, r24
    2462:	99 1f       	adc	r25, r25
    2464:	0a 94       	dec	r0
    2466:	e2 f7       	brpl	.-8      	; 0x2460 <DIO_vTogPinValue+0x92>
    2468:	84 27       	eor	r24, r20
    246a:	8c 93       	st	X, r24
    246c:	16 c0       	rjmp	.+44     	; 0x249a <DIO_vTogPinValue+0xcc>
		}
		else if(Loc_u8PortID==PortD){
    246e:	89 81       	ldd	r24, Y+1	; 0x01
    2470:	83 30       	cpi	r24, 0x03	; 3
    2472:	99 f4       	brne	.+38     	; 0x249a <DIO_vTogPinValue+0xcc>
			TOG_BIT(PORTD, Loc_u8PinID);
    2474:	a2 e3       	ldi	r26, 0x32	; 50
    2476:	b0 e0       	ldi	r27, 0x00	; 0
    2478:	e2 e3       	ldi	r30, 0x32	; 50
    247a:	f0 e0       	ldi	r31, 0x00	; 0
    247c:	80 81       	ld	r24, Z
    247e:	48 2f       	mov	r20, r24
    2480:	8a 81       	ldd	r24, Y+2	; 0x02
    2482:	28 2f       	mov	r18, r24
    2484:	30 e0       	ldi	r19, 0x00	; 0
    2486:	81 e0       	ldi	r24, 0x01	; 1
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	02 2e       	mov	r0, r18
    248c:	02 c0       	rjmp	.+4      	; 0x2492 <DIO_vTogPinValue+0xc4>
    248e:	88 0f       	add	r24, r24
    2490:	99 1f       	adc	r25, r25
    2492:	0a 94       	dec	r0
    2494:	e2 f7       	brpl	.-8      	; 0x248e <DIO_vTogPinValue+0xc0>
    2496:	84 27       	eor	r24, r20
    2498:	8c 93       	st	X, r24
		}
	}
	else{
		//do nothing
	}
}
    249a:	0f 90       	pop	r0
    249c:	0f 90       	pop	r0
    249e:	cf 91       	pop	r28
    24a0:	df 91       	pop	r29
    24a2:	08 95       	ret

000024a4 <ADC_vInit>:
 *      Author: a7med
 */
void(*Aptr)(void)='\0';

#include "ADC.h"
void ADC_vInit(){
    24a4:	df 93       	push	r29
    24a6:	cf 93       	push	r28
    24a8:	cd b7       	in	r28, 0x3d	; 61
    24aa:	de b7       	in	r29, 0x3e	; 62
#if PollingOrInterrupt==Polling
	#if	ADCMode==SingleConvertion
		ADCSRA = 0x87;
	#elif ADCMode==FreeRunningMode
		ADCSRA = 0xA7;
    24ac:	e6 e2       	ldi	r30, 0x26	; 38
    24ae:	f0 e0       	ldi	r31, 0x00	; 0
    24b0:	87 ea       	ldi	r24, 0xA7	; 167
    24b2:	80 83       	st	Z, r24
		SFIOR = SFIOR|0x00;
    24b4:	a0 e5       	ldi	r26, 0x50	; 80
    24b6:	b0 e0       	ldi	r27, 0x00	; 0
    24b8:	e0 e5       	ldi	r30, 0x50	; 80
    24ba:	f0 e0       	ldi	r31, 0x00	; 0
    24bc:	80 81       	ld	r24, Z
    24be:	8c 93       	st	X, r24
		CLR_BIT(SFIOR,5);
		SET_BIT(SFIOR,6);
		CLR_BIT(SFIOR,7);
	#endif
#endif
	ADMUX=(0x60|((ADCNum)&0x1F));
    24c0:	27 e2       	ldi	r18, 0x27	; 39
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    24c4:	a7 e2       	ldi	r26, 0x27	; 39
    24c6:	b0 e0       	ldi	r27, 0x00	; 0
    24c8:	e7 e2       	ldi	r30, 0x27	; 39
    24ca:	f0 e0       	ldi	r31, 0x00	; 0
    24cc:	80 81       	ld	r24, Z
    24ce:	81 60       	ori	r24, 0x01	; 1
    24d0:	8c 93       	st	X, r24
    24d2:	8c 91       	ld	r24, X
    24d4:	8f 71       	andi	r24, 0x1F	; 31
    24d6:	80 66       	ori	r24, 0x60	; 96
    24d8:	f9 01       	movw	r30, r18
    24da:	80 83       	st	Z, r24
	}
    24dc:	cf 91       	pop	r28
    24de:	df 91       	pop	r29
    24e0:	08 95       	ret

000024e2 <ADC_vGetVal>:
	u16 ADC_vGetVal(){
    24e2:	df 93       	push	r29
    24e4:	cf 93       	push	r28
    24e6:	cd b7       	in	r28, 0x3d	; 61
    24e8:	de b7       	in	r29, 0x3e	; 62
    24ea:	66 97       	sbiw	r28, 0x16	; 22
    24ec:	0f b6       	in	r0, 0x3f	; 63
    24ee:	f8 94       	cli
    24f0:	de bf       	out	0x3e, r29	; 62
    24f2:	0f be       	out	0x3f, r0	; 63
    24f4:	cd bf       	out	0x3d, r28	; 61
		StartConversion;
    24f6:	a6 e2       	ldi	r26, 0x26	; 38
    24f8:	b0 e0       	ldi	r27, 0x00	; 0
    24fa:	e6 e2       	ldi	r30, 0x26	; 38
    24fc:	f0 e0       	ldi	r31, 0x00	; 0
    24fe:	80 81       	ld	r24, Z
    2500:	80 64       	ori	r24, 0x40	; 64
    2502:	8c 93       	st	X, r24
		u32 y;
		u32 z;
	#if ADCMode==FreeRunningMode
			while((ADIF)==0);
    2504:	e6 e2       	ldi	r30, 0x26	; 38
    2506:	f0 e0       	ldi	r31, 0x00	; 0
    2508:	80 81       	ld	r24, Z
    250a:	82 95       	swap	r24
    250c:	8f 70       	andi	r24, 0x0F	; 15
    250e:	88 2f       	mov	r24, r24
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	81 70       	andi	r24, 0x01	; 1
    2514:	90 70       	andi	r25, 0x00	; 0
    2516:	00 97       	sbiw	r24, 0x00	; 0
    2518:	a9 f3       	breq	.-22     	; 0x2504 <ADC_vGetVal+0x22>
    251a:	80 e0       	ldi	r24, 0x00	; 0
    251c:	90 e0       	ldi	r25, 0x00	; 0
    251e:	a0 e2       	ldi	r26, 0x20	; 32
    2520:	b1 e4       	ldi	r27, 0x41	; 65
    2522:	8b 87       	std	Y+11, r24	; 0x0b
    2524:	9c 87       	std	Y+12, r25	; 0x0c
    2526:	ad 87       	std	Y+13, r26	; 0x0d
    2528:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    252a:	6b 85       	ldd	r22, Y+11	; 0x0b
    252c:	7c 85       	ldd	r23, Y+12	; 0x0c
    252e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2530:	9e 85       	ldd	r25, Y+14	; 0x0e
    2532:	20 e0       	ldi	r18, 0x00	; 0
    2534:	30 e0       	ldi	r19, 0x00	; 0
    2536:	4a e7       	ldi	r20, 0x7A	; 122
    2538:	55 e4       	ldi	r21, 0x45	; 69
    253a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    253e:	dc 01       	movw	r26, r24
    2540:	cb 01       	movw	r24, r22
    2542:	8f 83       	std	Y+7, r24	; 0x07
    2544:	98 87       	std	Y+8, r25	; 0x08
    2546:	a9 87       	std	Y+9, r26	; 0x09
    2548:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    254a:	6f 81       	ldd	r22, Y+7	; 0x07
    254c:	78 85       	ldd	r23, Y+8	; 0x08
    254e:	89 85       	ldd	r24, Y+9	; 0x09
    2550:	9a 85       	ldd	r25, Y+10	; 0x0a
    2552:	20 e0       	ldi	r18, 0x00	; 0
    2554:	30 e0       	ldi	r19, 0x00	; 0
    2556:	40 e8       	ldi	r20, 0x80	; 128
    2558:	5f e3       	ldi	r21, 0x3F	; 63
    255a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    255e:	88 23       	and	r24, r24
    2560:	2c f4       	brge	.+10     	; 0x256c <ADC_vGetVal+0x8a>
		__ticks = 1;
    2562:	81 e0       	ldi	r24, 0x01	; 1
    2564:	90 e0       	ldi	r25, 0x00	; 0
    2566:	9e 83       	std	Y+6, r25	; 0x06
    2568:	8d 83       	std	Y+5, r24	; 0x05
    256a:	3f c0       	rjmp	.+126    	; 0x25ea <ADC_vGetVal+0x108>
	else if (__tmp > 65535)
    256c:	6f 81       	ldd	r22, Y+7	; 0x07
    256e:	78 85       	ldd	r23, Y+8	; 0x08
    2570:	89 85       	ldd	r24, Y+9	; 0x09
    2572:	9a 85       	ldd	r25, Y+10	; 0x0a
    2574:	20 e0       	ldi	r18, 0x00	; 0
    2576:	3f ef       	ldi	r19, 0xFF	; 255
    2578:	4f e7       	ldi	r20, 0x7F	; 127
    257a:	57 e4       	ldi	r21, 0x47	; 71
    257c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2580:	18 16       	cp	r1, r24
    2582:	4c f5       	brge	.+82     	; 0x25d6 <ADC_vGetVal+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2584:	6b 85       	ldd	r22, Y+11	; 0x0b
    2586:	7c 85       	ldd	r23, Y+12	; 0x0c
    2588:	8d 85       	ldd	r24, Y+13	; 0x0d
    258a:	9e 85       	ldd	r25, Y+14	; 0x0e
    258c:	20 e0       	ldi	r18, 0x00	; 0
    258e:	30 e0       	ldi	r19, 0x00	; 0
    2590:	40 e2       	ldi	r20, 0x20	; 32
    2592:	51 e4       	ldi	r21, 0x41	; 65
    2594:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2598:	dc 01       	movw	r26, r24
    259a:	cb 01       	movw	r24, r22
    259c:	bc 01       	movw	r22, r24
    259e:	cd 01       	movw	r24, r26
    25a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25a4:	dc 01       	movw	r26, r24
    25a6:	cb 01       	movw	r24, r22
    25a8:	9e 83       	std	Y+6, r25	; 0x06
    25aa:	8d 83       	std	Y+5, r24	; 0x05
    25ac:	0f c0       	rjmp	.+30     	; 0x25cc <ADC_vGetVal+0xea>
    25ae:	80 e9       	ldi	r24, 0x90	; 144
    25b0:	91 e0       	ldi	r25, 0x01	; 1
    25b2:	9c 83       	std	Y+4, r25	; 0x04
    25b4:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    25b6:	8b 81       	ldd	r24, Y+3	; 0x03
    25b8:	9c 81       	ldd	r25, Y+4	; 0x04
    25ba:	01 97       	sbiw	r24, 0x01	; 1
    25bc:	f1 f7       	brne	.-4      	; 0x25ba <ADC_vGetVal+0xd8>
    25be:	9c 83       	std	Y+4, r25	; 0x04
    25c0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25c2:	8d 81       	ldd	r24, Y+5	; 0x05
    25c4:	9e 81       	ldd	r25, Y+6	; 0x06
    25c6:	01 97       	sbiw	r24, 0x01	; 1
    25c8:	9e 83       	std	Y+6, r25	; 0x06
    25ca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25cc:	8d 81       	ldd	r24, Y+5	; 0x05
    25ce:	9e 81       	ldd	r25, Y+6	; 0x06
    25d0:	00 97       	sbiw	r24, 0x00	; 0
    25d2:	69 f7       	brne	.-38     	; 0x25ae <ADC_vGetVal+0xcc>
    25d4:	14 c0       	rjmp	.+40     	; 0x25fe <ADC_vGetVal+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25d6:	6f 81       	ldd	r22, Y+7	; 0x07
    25d8:	78 85       	ldd	r23, Y+8	; 0x08
    25da:	89 85       	ldd	r24, Y+9	; 0x09
    25dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    25de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25e2:	dc 01       	movw	r26, r24
    25e4:	cb 01       	movw	r24, r22
    25e6:	9e 83       	std	Y+6, r25	; 0x06
    25e8:	8d 83       	std	Y+5, r24	; 0x05
    25ea:	8d 81       	ldd	r24, Y+5	; 0x05
    25ec:	9e 81       	ldd	r25, Y+6	; 0x06
    25ee:	9a 83       	std	Y+2, r25	; 0x02
    25f0:	89 83       	std	Y+1, r24	; 0x01
    25f2:	89 81       	ldd	r24, Y+1	; 0x01
    25f4:	9a 81       	ldd	r25, Y+2	; 0x02
    25f6:	01 97       	sbiw	r24, 0x01	; 1
    25f8:	f1 f7       	brne	.-4      	; 0x25f6 <ADC_vGetVal+0x114>
    25fa:	9a 83       	std	Y+2, r25	; 0x02
    25fc:	89 83       	std	Y+1, r24	; 0x01
	#elif ADCMode==SingleConvertion
			StartConversion;
			while(CheckConversoin==1);
	#endif
		_delay_ms(10);
		y = (((u32)ADCH)<<2);
    25fe:	e5 e2       	ldi	r30, 0x25	; 37
    2600:	f0 e0       	ldi	r31, 0x00	; 0
    2602:	80 81       	ld	r24, Z
    2604:	88 2f       	mov	r24, r24
    2606:	90 e0       	ldi	r25, 0x00	; 0
    2608:	a0 e0       	ldi	r26, 0x00	; 0
    260a:	b0 e0       	ldi	r27, 0x00	; 0
    260c:	88 0f       	add	r24, r24
    260e:	99 1f       	adc	r25, r25
    2610:	aa 1f       	adc	r26, r26
    2612:	bb 1f       	adc	r27, r27
    2614:	88 0f       	add	r24, r24
    2616:	99 1f       	adc	r25, r25
    2618:	aa 1f       	adc	r26, r26
    261a:	bb 1f       	adc	r27, r27
    261c:	8b 8b       	std	Y+19, r24	; 0x13
    261e:	9c 8b       	std	Y+20, r25	; 0x14
    2620:	ad 8b       	std	Y+21, r26	; 0x15
    2622:	be 8b       	std	Y+22, r27	; 0x16
		z = (y*5000)/1024;
    2624:	8b 89       	ldd	r24, Y+19	; 0x13
    2626:	9c 89       	ldd	r25, Y+20	; 0x14
    2628:	ad 89       	ldd	r26, Y+21	; 0x15
    262a:	be 89       	ldd	r27, Y+22	; 0x16
    262c:	28 e8       	ldi	r18, 0x88	; 136
    262e:	33 e1       	ldi	r19, 0x13	; 19
    2630:	40 e0       	ldi	r20, 0x00	; 0
    2632:	50 e0       	ldi	r21, 0x00	; 0
    2634:	bc 01       	movw	r22, r24
    2636:	cd 01       	movw	r24, r26
    2638:	0e 94 d6 34 	call	0x69ac	; 0x69ac <__mulsi3>
    263c:	dc 01       	movw	r26, r24
    263e:	cb 01       	movw	r24, r22
    2640:	07 2e       	mov	r0, r23
    2642:	7a e0       	ldi	r23, 0x0A	; 10
    2644:	b6 95       	lsr	r27
    2646:	a7 95       	ror	r26
    2648:	97 95       	ror	r25
    264a:	87 95       	ror	r24
    264c:	7a 95       	dec	r23
    264e:	d1 f7       	brne	.-12     	; 0x2644 <ADC_vGetVal+0x162>
    2650:	70 2d       	mov	r23, r0
    2652:	8f 87       	std	Y+15, r24	; 0x0f
    2654:	98 8b       	std	Y+16, r25	; 0x10
    2656:	a9 8b       	std	Y+17, r26	; 0x11
    2658:	ba 8b       	std	Y+18, r27	; 0x12
		return z;
    265a:	8f 85       	ldd	r24, Y+15	; 0x0f
    265c:	98 89       	ldd	r25, Y+16	; 0x10
	}
    265e:	66 96       	adiw	r28, 0x16	; 22
    2660:	0f b6       	in	r0, 0x3f	; 63
    2662:	f8 94       	cli
    2664:	de bf       	out	0x3e, r29	; 62
    2666:	0f be       	out	0x3f, r0	; 63
    2668:	cd bf       	out	0x3d, r28	; 61
    266a:	cf 91       	pop	r28
    266c:	df 91       	pop	r29
    266e:	08 95       	ret

00002670 <ADC_vADCCallBack>:
	void ADC_vADCCallBack(void(*ptr)(void)){
    2670:	df 93       	push	r29
    2672:	cf 93       	push	r28
    2674:	00 d0       	rcall	.+0      	; 0x2676 <ADC_vADCCallBack+0x6>
    2676:	cd b7       	in	r28, 0x3d	; 61
    2678:	de b7       	in	r29, 0x3e	; 62
    267a:	9a 83       	std	Y+2, r25	; 0x02
    267c:	89 83       	std	Y+1, r24	; 0x01
		if(ptr!='\0'){
    267e:	89 81       	ldd	r24, Y+1	; 0x01
    2680:	9a 81       	ldd	r25, Y+2	; 0x02
    2682:	00 97       	sbiw	r24, 0x00	; 0
    2684:	31 f0       	breq	.+12     	; 0x2692 <ADC_vADCCallBack+0x22>
			Aptr=ptr;
    2686:	89 81       	ldd	r24, Y+1	; 0x01
    2688:	9a 81       	ldd	r25, Y+2	; 0x02
    268a:	90 93 e4 00 	sts	0x00E4, r25
    268e:	80 93 e3 00 	sts	0x00E3, r24
		}
	}
    2692:	0f 90       	pop	r0
    2694:	0f 90       	pop	r0
    2696:	cf 91       	pop	r28
    2698:	df 91       	pop	r29
    269a:	08 95       	ret

0000269c <__vector_16>:
ISR(ADC_vect){
    269c:	1f 92       	push	r1
    269e:	0f 92       	push	r0
    26a0:	0f b6       	in	r0, 0x3f	; 63
    26a2:	0f 92       	push	r0
    26a4:	11 24       	eor	r1, r1
    26a6:	2f 93       	push	r18
    26a8:	3f 93       	push	r19
    26aa:	4f 93       	push	r20
    26ac:	5f 93       	push	r21
    26ae:	6f 93       	push	r22
    26b0:	7f 93       	push	r23
    26b2:	8f 93       	push	r24
    26b4:	9f 93       	push	r25
    26b6:	af 93       	push	r26
    26b8:	bf 93       	push	r27
    26ba:	ef 93       	push	r30
    26bc:	ff 93       	push	r31
    26be:	df 93       	push	r29
    26c0:	cf 93       	push	r28
    26c2:	cd b7       	in	r28, 0x3d	; 61
    26c4:	de b7       	in	r29, 0x3e	; 62
		if(Aptr!='\0'){
    26c6:	80 91 e3 00 	lds	r24, 0x00E3
    26ca:	90 91 e4 00 	lds	r25, 0x00E4
    26ce:	00 97       	sbiw	r24, 0x00	; 0
    26d0:	29 f0       	breq	.+10     	; 0x26dc <__vector_16+0x40>
			Aptr();
    26d2:	e0 91 e3 00 	lds	r30, 0x00E3
    26d6:	f0 91 e4 00 	lds	r31, 0x00E4
    26da:	09 95       	icall
		}
	}
    26dc:	cf 91       	pop	r28
    26de:	df 91       	pop	r29
    26e0:	ff 91       	pop	r31
    26e2:	ef 91       	pop	r30
    26e4:	bf 91       	pop	r27
    26e6:	af 91       	pop	r26
    26e8:	9f 91       	pop	r25
    26ea:	8f 91       	pop	r24
    26ec:	7f 91       	pop	r23
    26ee:	6f 91       	pop	r22
    26f0:	5f 91       	pop	r21
    26f2:	4f 91       	pop	r20
    26f4:	3f 91       	pop	r19
    26f6:	2f 91       	pop	r18
    26f8:	0f 90       	pop	r0
    26fa:	0f be       	out	0x3f, r0	; 63
    26fc:	0f 90       	pop	r0
    26fe:	1f 90       	pop	r1
    2700:	18 95       	reti

00002702 <LedAndBuzzer_vLed0Open>:
* \Description     : this function is used to open the led0 which is connected to PortC Pin2
*
* \Parameters (in) : None
* \Parameters (out): None
*******************************************************************************/
void LedAndBuzzer_vLed0Open(){
    2702:	df 93       	push	r29
    2704:	cf 93       	push	r28
    2706:	cd b7       	in	r28, 0x3d	; 61
    2708:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPinDirection(PortC, Pin2, Pin_OutPut);
    270a:	82 e0       	ldi	r24, 0x02	; 2
    270c:	62 e0       	ldi	r22, 0x02	; 2
    270e:	41 e0       	ldi	r20, 0x01	; 1
    2710:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <DIO_vSetPinDirection>
	DIO_vSetPinValue(PortC, Pin2, Pin_High);
    2714:	82 e0       	ldi	r24, 0x02	; 2
    2716:	62 e0       	ldi	r22, 0x02	; 2
    2718:	41 e0       	ldi	r20, 0x01	; 1
    271a:	0e 94 9f 10 	call	0x213e	; 0x213e <DIO_vSetPinValue>
}
    271e:	cf 91       	pop	r28
    2720:	df 91       	pop	r29
    2722:	08 95       	ret

00002724 <LedAndBuzzer_vLed0Close>:
* \Description     : this function is used to Close the led0 which is connected to PortC Pin2
*
* \Parameters (in) : None
* \Parameters (out): None
*******************************************************************************/
void LedAndBuzzer_vLed0Close(){
    2724:	df 93       	push	r29
    2726:	cf 93       	push	r28
    2728:	cd b7       	in	r28, 0x3d	; 61
    272a:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPinValue(PortC, Pin2, Pin_Low);
    272c:	82 e0       	ldi	r24, 0x02	; 2
    272e:	62 e0       	ldi	r22, 0x02	; 2
    2730:	40 e0       	ldi	r20, 0x00	; 0
    2732:	0e 94 9f 10 	call	0x213e	; 0x213e <DIO_vSetPinValue>
}
    2736:	cf 91       	pop	r28
    2738:	df 91       	pop	r29
    273a:	08 95       	ret

0000273c <LedAndBuzzer_vLed1Open>:
* \Description     : this function is used to open the led1 which is connected to PortC Pin7
*
* \Parameters (in) : None
* \Parameters (out): None
*******************************************************************************/
void LedAndBuzzer_vLed1Open(){
    273c:	df 93       	push	r29
    273e:	cf 93       	push	r28
    2740:	cd b7       	in	r28, 0x3d	; 61
    2742:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPinDirection(PortC, Pin7, Pin_OutPut);
    2744:	82 e0       	ldi	r24, 0x02	; 2
    2746:	67 e0       	ldi	r22, 0x07	; 7
    2748:	41 e0       	ldi	r20, 0x01	; 1
    274a:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <DIO_vSetPinDirection>
	DIO_vSetPinValue(PortC, Pin7, Pin_High);
    274e:	82 e0       	ldi	r24, 0x02	; 2
    2750:	67 e0       	ldi	r22, 0x07	; 7
    2752:	41 e0       	ldi	r20, 0x01	; 1
    2754:	0e 94 9f 10 	call	0x213e	; 0x213e <DIO_vSetPinValue>
}
    2758:	cf 91       	pop	r28
    275a:	df 91       	pop	r29
    275c:	08 95       	ret

0000275e <LedAndBuzzer_vLed1Close>:
* \Description     : this function is used to Close the led1 which is connected to PortC Pin7
*
* \Parameters (in) : None
* \Parameters (out): None
*******************************************************************************/
void LedAndBuzzer_vLed1Close(){
    275e:	df 93       	push	r29
    2760:	cf 93       	push	r28
    2762:	cd b7       	in	r28, 0x3d	; 61
    2764:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPinValue(PortC, Pin7, Pin_Low);
    2766:	82 e0       	ldi	r24, 0x02	; 2
    2768:	67 e0       	ldi	r22, 0x07	; 7
    276a:	40 e0       	ldi	r20, 0x00	; 0
    276c:	0e 94 9f 10 	call	0x213e	; 0x213e <DIO_vSetPinValue>
}
    2770:	cf 91       	pop	r28
    2772:	df 91       	pop	r29
    2774:	08 95       	ret

00002776 <LedAndBuzzer_vLed2Open>:
* \Description     : this function is used to open the led2 which is connected to PortD Pin3
*
* \Parameters (in) : None
* \Parameters (out): None
*******************************************************************************/
void LedAndBuzzer_vLed2Open(){
    2776:	df 93       	push	r29
    2778:	cf 93       	push	r28
    277a:	cd b7       	in	r28, 0x3d	; 61
    277c:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPinDirection(PortD, Pin3, Pin_OutPut);
    277e:	83 e0       	ldi	r24, 0x03	; 3
    2780:	63 e0       	ldi	r22, 0x03	; 3
    2782:	41 e0       	ldi	r20, 0x01	; 1
    2784:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <DIO_vSetPinDirection>
	DIO_vSetPinValue(PortD, Pin3, Pin_High);
    2788:	83 e0       	ldi	r24, 0x03	; 3
    278a:	63 e0       	ldi	r22, 0x03	; 3
    278c:	41 e0       	ldi	r20, 0x01	; 1
    278e:	0e 94 9f 10 	call	0x213e	; 0x213e <DIO_vSetPinValue>
}
    2792:	cf 91       	pop	r28
    2794:	df 91       	pop	r29
    2796:	08 95       	ret

00002798 <LedAndBuzzer_vLed2Close>:
* \Description     : this function is used to Close the led2 which is connected to PortD Pin3
*
* \Parameters (in) : None
* \Parameters (out): None
*******************************************************************************/
void LedAndBuzzer_vLed2Close(){
    2798:	df 93       	push	r29
    279a:	cf 93       	push	r28
    279c:	cd b7       	in	r28, 0x3d	; 61
    279e:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPinValue(PortD, Pin3, Pin_Low);
    27a0:	83 e0       	ldi	r24, 0x03	; 3
    27a2:	63 e0       	ldi	r22, 0x03	; 3
    27a4:	40 e0       	ldi	r20, 0x00	; 0
    27a6:	0e 94 9f 10 	call	0x213e	; 0x213e <DIO_vSetPinValue>
}
    27aa:	cf 91       	pop	r28
    27ac:	df 91       	pop	r29
    27ae:	08 95       	ret

000027b0 <LedAndBuzzer_vBuzzerOpen>:
* \Description     : this function is used to open the Buzzer which is connected to PortA Pin3
*
* \Parameters (in) : None
* \Parameters (out): None
*******************************************************************************/
void LedAndBuzzer_vBuzzerOpen(){
    27b0:	df 93       	push	r29
    27b2:	cf 93       	push	r28
    27b4:	cd b7       	in	r28, 0x3d	; 61
    27b6:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPinDirection(PortA, Pin3, Pin_OutPut);
    27b8:	80 e0       	ldi	r24, 0x00	; 0
    27ba:	63 e0       	ldi	r22, 0x03	; 3
    27bc:	41 e0       	ldi	r20, 0x01	; 1
    27be:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <DIO_vSetPinDirection>
	DIO_vSetPinValue(PortA, Pin3, Pin_High);
    27c2:	80 e0       	ldi	r24, 0x00	; 0
    27c4:	63 e0       	ldi	r22, 0x03	; 3
    27c6:	41 e0       	ldi	r20, 0x01	; 1
    27c8:	0e 94 9f 10 	call	0x213e	; 0x213e <DIO_vSetPinValue>
}
    27cc:	cf 91       	pop	r28
    27ce:	df 91       	pop	r29
    27d0:	08 95       	ret

000027d2 <LedAndBuzzer_vBuzzerClose>:
* \Description     : this function is used to Close the Buzzer which is connected to PortA Pin3
*
* \Parameters (in) : None
* \Parameters (out): None
*******************************************************************************/
void LedAndBuzzer_vBuzzerClose(){
    27d2:	df 93       	push	r29
    27d4:	cf 93       	push	r28
    27d6:	cd b7       	in	r28, 0x3d	; 61
    27d8:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPinValue(PortA, Pin3, Pin_Low);
    27da:	80 e0       	ldi	r24, 0x00	; 0
    27dc:	63 e0       	ldi	r22, 0x03	; 3
    27de:	40 e0       	ldi	r20, 0x00	; 0
    27e0:	0e 94 9f 10 	call	0x213e	; 0x213e <DIO_vSetPinValue>
}
    27e4:	cf 91       	pop	r28
    27e6:	df 91       	pop	r29
    27e8:	08 95       	ret

000027ea <LedAndBuzzer_vFlash>:
* \Description     : this function is used to turn on the LEDs and Buzzer for .25sec number of times
*
* \Parameters (in) : u8 Loc_vNumberOfFlashes	Number of LEDs and Buzzer WILL on and off
* \Parameters (out): None
*******************************************************************************/
void LedAndBuzzer_vFlash(u8 Loc_vNumberOfFlashes){
    27ea:	df 93       	push	r29
    27ec:	cf 93       	push	r28
    27ee:	cd b7       	in	r28, 0x3d	; 61
    27f0:	de b7       	in	r29, 0x3e	; 62
    27f2:	6e 97       	sbiw	r28, 0x1e	; 30
    27f4:	0f b6       	in	r0, 0x3f	; 63
    27f6:	f8 94       	cli
    27f8:	de bf       	out	0x3e, r29	; 62
    27fa:	0f be       	out	0x3f, r0	; 63
    27fc:	cd bf       	out	0x3d, r28	; 61
    27fe:	8e 8f       	std	Y+30, r24	; 0x1e
	u8 count;
	for(count=0;count<Loc_vNumberOfFlashes;count++){
    2800:	1d 8e       	std	Y+29, r1	; 0x1d
    2802:	f7 c0       	rjmp	.+494    	; 0x29f2 <LedAndBuzzer_vFlash+0x208>
		LedAndBuzzer_vBuzzerOpen();
    2804:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <LedAndBuzzer_vBuzzerOpen>
		LedAndBuzzer_vLed0Open();
    2808:	0e 94 81 13 	call	0x2702	; 0x2702 <LedAndBuzzer_vLed0Open>
		LedAndBuzzer_vLed1Open();
    280c:	0e 94 9e 13 	call	0x273c	; 0x273c <LedAndBuzzer_vLed1Open>
		LedAndBuzzer_vLed2Open();
    2810:	0e 94 bb 13 	call	0x2776	; 0x2776 <LedAndBuzzer_vLed2Open>
    2814:	80 e0       	ldi	r24, 0x00	; 0
    2816:	90 e0       	ldi	r25, 0x00	; 0
    2818:	aa e7       	ldi	r26, 0x7A	; 122
    281a:	b3 e4       	ldi	r27, 0x43	; 67
    281c:	89 8f       	std	Y+25, r24	; 0x19
    281e:	9a 8f       	std	Y+26, r25	; 0x1a
    2820:	ab 8f       	std	Y+27, r26	; 0x1b
    2822:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2824:	69 8d       	ldd	r22, Y+25	; 0x19
    2826:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2828:	8b 8d       	ldd	r24, Y+27	; 0x1b
    282a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    282c:	20 e0       	ldi	r18, 0x00	; 0
    282e:	30 e0       	ldi	r19, 0x00	; 0
    2830:	4a e7       	ldi	r20, 0x7A	; 122
    2832:	55 e4       	ldi	r21, 0x45	; 69
    2834:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2838:	dc 01       	movw	r26, r24
    283a:	cb 01       	movw	r24, r22
    283c:	8d 8b       	std	Y+21, r24	; 0x15
    283e:	9e 8b       	std	Y+22, r25	; 0x16
    2840:	af 8b       	std	Y+23, r26	; 0x17
    2842:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2844:	6d 89       	ldd	r22, Y+21	; 0x15
    2846:	7e 89       	ldd	r23, Y+22	; 0x16
    2848:	8f 89       	ldd	r24, Y+23	; 0x17
    284a:	98 8d       	ldd	r25, Y+24	; 0x18
    284c:	20 e0       	ldi	r18, 0x00	; 0
    284e:	30 e0       	ldi	r19, 0x00	; 0
    2850:	40 e8       	ldi	r20, 0x80	; 128
    2852:	5f e3       	ldi	r21, 0x3F	; 63
    2854:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2858:	88 23       	and	r24, r24
    285a:	2c f4       	brge	.+10     	; 0x2866 <LedAndBuzzer_vFlash+0x7c>
		__ticks = 1;
    285c:	81 e0       	ldi	r24, 0x01	; 1
    285e:	90 e0       	ldi	r25, 0x00	; 0
    2860:	9c 8b       	std	Y+20, r25	; 0x14
    2862:	8b 8b       	std	Y+19, r24	; 0x13
    2864:	3f c0       	rjmp	.+126    	; 0x28e4 <LedAndBuzzer_vFlash+0xfa>
	else if (__tmp > 65535)
    2866:	6d 89       	ldd	r22, Y+21	; 0x15
    2868:	7e 89       	ldd	r23, Y+22	; 0x16
    286a:	8f 89       	ldd	r24, Y+23	; 0x17
    286c:	98 8d       	ldd	r25, Y+24	; 0x18
    286e:	20 e0       	ldi	r18, 0x00	; 0
    2870:	3f ef       	ldi	r19, 0xFF	; 255
    2872:	4f e7       	ldi	r20, 0x7F	; 127
    2874:	57 e4       	ldi	r21, 0x47	; 71
    2876:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    287a:	18 16       	cp	r1, r24
    287c:	4c f5       	brge	.+82     	; 0x28d0 <LedAndBuzzer_vFlash+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    287e:	69 8d       	ldd	r22, Y+25	; 0x19
    2880:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2882:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2884:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2886:	20 e0       	ldi	r18, 0x00	; 0
    2888:	30 e0       	ldi	r19, 0x00	; 0
    288a:	40 e2       	ldi	r20, 0x20	; 32
    288c:	51 e4       	ldi	r21, 0x41	; 65
    288e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2892:	dc 01       	movw	r26, r24
    2894:	cb 01       	movw	r24, r22
    2896:	bc 01       	movw	r22, r24
    2898:	cd 01       	movw	r24, r26
    289a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    289e:	dc 01       	movw	r26, r24
    28a0:	cb 01       	movw	r24, r22
    28a2:	9c 8b       	std	Y+20, r25	; 0x14
    28a4:	8b 8b       	std	Y+19, r24	; 0x13
    28a6:	0f c0       	rjmp	.+30     	; 0x28c6 <LedAndBuzzer_vFlash+0xdc>
    28a8:	80 e9       	ldi	r24, 0x90	; 144
    28aa:	91 e0       	ldi	r25, 0x01	; 1
    28ac:	9a 8b       	std	Y+18, r25	; 0x12
    28ae:	89 8b       	std	Y+17, r24	; 0x11
    28b0:	89 89       	ldd	r24, Y+17	; 0x11
    28b2:	9a 89       	ldd	r25, Y+18	; 0x12
    28b4:	01 97       	sbiw	r24, 0x01	; 1
    28b6:	f1 f7       	brne	.-4      	; 0x28b4 <LedAndBuzzer_vFlash+0xca>
    28b8:	9a 8b       	std	Y+18, r25	; 0x12
    28ba:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28bc:	8b 89       	ldd	r24, Y+19	; 0x13
    28be:	9c 89       	ldd	r25, Y+20	; 0x14
    28c0:	01 97       	sbiw	r24, 0x01	; 1
    28c2:	9c 8b       	std	Y+20, r25	; 0x14
    28c4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28c6:	8b 89       	ldd	r24, Y+19	; 0x13
    28c8:	9c 89       	ldd	r25, Y+20	; 0x14
    28ca:	00 97       	sbiw	r24, 0x00	; 0
    28cc:	69 f7       	brne	.-38     	; 0x28a8 <LedAndBuzzer_vFlash+0xbe>
    28ce:	14 c0       	rjmp	.+40     	; 0x28f8 <LedAndBuzzer_vFlash+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28d0:	6d 89       	ldd	r22, Y+21	; 0x15
    28d2:	7e 89       	ldd	r23, Y+22	; 0x16
    28d4:	8f 89       	ldd	r24, Y+23	; 0x17
    28d6:	98 8d       	ldd	r25, Y+24	; 0x18
    28d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28dc:	dc 01       	movw	r26, r24
    28de:	cb 01       	movw	r24, r22
    28e0:	9c 8b       	std	Y+20, r25	; 0x14
    28e2:	8b 8b       	std	Y+19, r24	; 0x13
    28e4:	8b 89       	ldd	r24, Y+19	; 0x13
    28e6:	9c 89       	ldd	r25, Y+20	; 0x14
    28e8:	98 8b       	std	Y+16, r25	; 0x10
    28ea:	8f 87       	std	Y+15, r24	; 0x0f
    28ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    28ee:	98 89       	ldd	r25, Y+16	; 0x10
    28f0:	01 97       	sbiw	r24, 0x01	; 1
    28f2:	f1 f7       	brne	.-4      	; 0x28f0 <LedAndBuzzer_vFlash+0x106>
    28f4:	98 8b       	std	Y+16, r25	; 0x10
    28f6:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(250);
		LedAndBuzzer_vBuzzerClose();
    28f8:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <LedAndBuzzer_vBuzzerClose>
		LedAndBuzzer_vLed2Close();
    28fc:	0e 94 cc 13 	call	0x2798	; 0x2798 <LedAndBuzzer_vLed2Close>
		LedAndBuzzer_vLed0Close();
    2900:	0e 94 92 13 	call	0x2724	; 0x2724 <LedAndBuzzer_vLed0Close>
		LedAndBuzzer_vLed1Close();
    2904:	0e 94 af 13 	call	0x275e	; 0x275e <LedAndBuzzer_vLed1Close>
    2908:	80 e0       	ldi	r24, 0x00	; 0
    290a:	90 e0       	ldi	r25, 0x00	; 0
    290c:	aa e7       	ldi	r26, 0x7A	; 122
    290e:	b3 e4       	ldi	r27, 0x43	; 67
    2910:	8b 87       	std	Y+11, r24	; 0x0b
    2912:	9c 87       	std	Y+12, r25	; 0x0c
    2914:	ad 87       	std	Y+13, r26	; 0x0d
    2916:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2918:	6b 85       	ldd	r22, Y+11	; 0x0b
    291a:	7c 85       	ldd	r23, Y+12	; 0x0c
    291c:	8d 85       	ldd	r24, Y+13	; 0x0d
    291e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2920:	20 e0       	ldi	r18, 0x00	; 0
    2922:	30 e0       	ldi	r19, 0x00	; 0
    2924:	4a e7       	ldi	r20, 0x7A	; 122
    2926:	55 e4       	ldi	r21, 0x45	; 69
    2928:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    292c:	dc 01       	movw	r26, r24
    292e:	cb 01       	movw	r24, r22
    2930:	8f 83       	std	Y+7, r24	; 0x07
    2932:	98 87       	std	Y+8, r25	; 0x08
    2934:	a9 87       	std	Y+9, r26	; 0x09
    2936:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2938:	6f 81       	ldd	r22, Y+7	; 0x07
    293a:	78 85       	ldd	r23, Y+8	; 0x08
    293c:	89 85       	ldd	r24, Y+9	; 0x09
    293e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2940:	20 e0       	ldi	r18, 0x00	; 0
    2942:	30 e0       	ldi	r19, 0x00	; 0
    2944:	40 e8       	ldi	r20, 0x80	; 128
    2946:	5f e3       	ldi	r21, 0x3F	; 63
    2948:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    294c:	88 23       	and	r24, r24
    294e:	2c f4       	brge	.+10     	; 0x295a <LedAndBuzzer_vFlash+0x170>
		__ticks = 1;
    2950:	81 e0       	ldi	r24, 0x01	; 1
    2952:	90 e0       	ldi	r25, 0x00	; 0
    2954:	9e 83       	std	Y+6, r25	; 0x06
    2956:	8d 83       	std	Y+5, r24	; 0x05
    2958:	3f c0       	rjmp	.+126    	; 0x29d8 <LedAndBuzzer_vFlash+0x1ee>
	else if (__tmp > 65535)
    295a:	6f 81       	ldd	r22, Y+7	; 0x07
    295c:	78 85       	ldd	r23, Y+8	; 0x08
    295e:	89 85       	ldd	r24, Y+9	; 0x09
    2960:	9a 85       	ldd	r25, Y+10	; 0x0a
    2962:	20 e0       	ldi	r18, 0x00	; 0
    2964:	3f ef       	ldi	r19, 0xFF	; 255
    2966:	4f e7       	ldi	r20, 0x7F	; 127
    2968:	57 e4       	ldi	r21, 0x47	; 71
    296a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    296e:	18 16       	cp	r1, r24
    2970:	4c f5       	brge	.+82     	; 0x29c4 <LedAndBuzzer_vFlash+0x1da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2972:	6b 85       	ldd	r22, Y+11	; 0x0b
    2974:	7c 85       	ldd	r23, Y+12	; 0x0c
    2976:	8d 85       	ldd	r24, Y+13	; 0x0d
    2978:	9e 85       	ldd	r25, Y+14	; 0x0e
    297a:	20 e0       	ldi	r18, 0x00	; 0
    297c:	30 e0       	ldi	r19, 0x00	; 0
    297e:	40 e2       	ldi	r20, 0x20	; 32
    2980:	51 e4       	ldi	r21, 0x41	; 65
    2982:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2986:	dc 01       	movw	r26, r24
    2988:	cb 01       	movw	r24, r22
    298a:	bc 01       	movw	r22, r24
    298c:	cd 01       	movw	r24, r26
    298e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2992:	dc 01       	movw	r26, r24
    2994:	cb 01       	movw	r24, r22
    2996:	9e 83       	std	Y+6, r25	; 0x06
    2998:	8d 83       	std	Y+5, r24	; 0x05
    299a:	0f c0       	rjmp	.+30     	; 0x29ba <LedAndBuzzer_vFlash+0x1d0>
    299c:	80 e9       	ldi	r24, 0x90	; 144
    299e:	91 e0       	ldi	r25, 0x01	; 1
    29a0:	9c 83       	std	Y+4, r25	; 0x04
    29a2:	8b 83       	std	Y+3, r24	; 0x03
    29a4:	8b 81       	ldd	r24, Y+3	; 0x03
    29a6:	9c 81       	ldd	r25, Y+4	; 0x04
    29a8:	01 97       	sbiw	r24, 0x01	; 1
    29aa:	f1 f7       	brne	.-4      	; 0x29a8 <LedAndBuzzer_vFlash+0x1be>
    29ac:	9c 83       	std	Y+4, r25	; 0x04
    29ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29b0:	8d 81       	ldd	r24, Y+5	; 0x05
    29b2:	9e 81       	ldd	r25, Y+6	; 0x06
    29b4:	01 97       	sbiw	r24, 0x01	; 1
    29b6:	9e 83       	std	Y+6, r25	; 0x06
    29b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29ba:	8d 81       	ldd	r24, Y+5	; 0x05
    29bc:	9e 81       	ldd	r25, Y+6	; 0x06
    29be:	00 97       	sbiw	r24, 0x00	; 0
    29c0:	69 f7       	brne	.-38     	; 0x299c <LedAndBuzzer_vFlash+0x1b2>
    29c2:	14 c0       	rjmp	.+40     	; 0x29ec <LedAndBuzzer_vFlash+0x202>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29c4:	6f 81       	ldd	r22, Y+7	; 0x07
    29c6:	78 85       	ldd	r23, Y+8	; 0x08
    29c8:	89 85       	ldd	r24, Y+9	; 0x09
    29ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    29cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29d0:	dc 01       	movw	r26, r24
    29d2:	cb 01       	movw	r24, r22
    29d4:	9e 83       	std	Y+6, r25	; 0x06
    29d6:	8d 83       	std	Y+5, r24	; 0x05
    29d8:	8d 81       	ldd	r24, Y+5	; 0x05
    29da:	9e 81       	ldd	r25, Y+6	; 0x06
    29dc:	9a 83       	std	Y+2, r25	; 0x02
    29de:	89 83       	std	Y+1, r24	; 0x01
    29e0:	89 81       	ldd	r24, Y+1	; 0x01
    29e2:	9a 81       	ldd	r25, Y+2	; 0x02
    29e4:	01 97       	sbiw	r24, 0x01	; 1
    29e6:	f1 f7       	brne	.-4      	; 0x29e4 <LedAndBuzzer_vFlash+0x1fa>
    29e8:	9a 83       	std	Y+2, r25	; 0x02
    29ea:	89 83       	std	Y+1, r24	; 0x01
* \Parameters (in) : u8 Loc_vNumberOfFlashes	Number of LEDs and Buzzer WILL on and off
* \Parameters (out): None
*******************************************************************************/
void LedAndBuzzer_vFlash(u8 Loc_vNumberOfFlashes){
	u8 count;
	for(count=0;count<Loc_vNumberOfFlashes;count++){
    29ec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29ee:	8f 5f       	subi	r24, 0xFF	; 255
    29f0:	8d 8f       	std	Y+29, r24	; 0x1d
    29f2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    29f4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    29f6:	98 17       	cp	r25, r24
    29f8:	08 f4       	brcc	.+2      	; 0x29fc <LedAndBuzzer_vFlash+0x212>
    29fa:	04 cf       	rjmp	.-504    	; 0x2804 <LedAndBuzzer_vFlash+0x1a>
		LedAndBuzzer_vLed2Close();
		LedAndBuzzer_vLed0Close();
		LedAndBuzzer_vLed1Close();
		_delay_ms(250);
	}
}
    29fc:	6e 96       	adiw	r28, 0x1e	; 30
    29fe:	0f b6       	in	r0, 0x3f	; 63
    2a00:	f8 94       	cli
    2a02:	de bf       	out	0x3e, r29	; 62
    2a04:	0f be       	out	0x3f, r0	; 63
    2a06:	cd bf       	out	0x3d, r28	; 61
    2a08:	cf 91       	pop	r28
    2a0a:	df 91       	pop	r29
    2a0c:	08 95       	ret

00002a0e <_7Segma_vInit>:
 *      and PortA Pin4, Pin5, Pin6, and Pin7 is used to show number .
 */

#include "_7Segma.h"
//------------ SET pins connected to the 7segma as out puts
void _7Segma_vInit(){
    2a0e:	df 93       	push	r29
    2a10:	cf 93       	push	r28
    2a12:	cd b7       	in	r28, 0x3d	; 61
    2a14:	de b7       	in	r29, 0x3e	; 62
	/*----------7SEG_A-->PORTA .4
				7SEG_B-->PORTA .5
				7SEG_C-->PORTA .6
				7SEG_D-->PORTA .7*/
	DIO_vSetPinDirection(PortA, Pin4, Pin_OutPut);
    2a16:	80 e0       	ldi	r24, 0x00	; 0
    2a18:	64 e0       	ldi	r22, 0x04	; 4
    2a1a:	41 e0       	ldi	r20, 0x01	; 1
    2a1c:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PortA, Pin5, Pin_OutPut);
    2a20:	80 e0       	ldi	r24, 0x00	; 0
    2a22:	65 e0       	ldi	r22, 0x05	; 5
    2a24:	41 e0       	ldi	r20, 0x01	; 1
    2a26:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PortA, Pin6, Pin_OutPut);
    2a2a:	80 e0       	ldi	r24, 0x00	; 0
    2a2c:	66 e0       	ldi	r22, 0x06	; 6
    2a2e:	41 e0       	ldi	r20, 0x01	; 1
    2a30:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PortA, Pin7, Pin_OutPut);
    2a34:	80 e0       	ldi	r24, 0x00	; 0
    2a36:	67 e0       	ldi	r22, 0x07	; 7
    2a38:	41 e0       	ldi	r20, 0x01	; 1
    2a3a:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <DIO_vSetPinDirection>
	//-------------ENABLE LINES PINS ----------------
	DIO_vSetPinDirection(PortB, Pin2, Pin_OutPut);
    2a3e:	81 e0       	ldi	r24, 0x01	; 1
    2a40:	62 e0       	ldi	r22, 0x02	; 2
    2a42:	41 e0       	ldi	r20, 0x01	; 1
    2a44:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PortB, Pin1, Pin_OutPut);
    2a48:	81 e0       	ldi	r24, 0x01	; 1
    2a4a:	61 e0       	ldi	r22, 0x01	; 1
    2a4c:	41 e0       	ldi	r20, 0x01	; 1
    2a4e:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <DIO_vSetPinDirection>
}
    2a52:	cf 91       	pop	r28
    2a54:	df 91       	pop	r29
    2a56:	08 95       	ret

00002a58 <_7Segma_vEnable1>:
//-----------enable 7Segma 1 -----------
void _7Segma_vEnable1(){
    2a58:	df 93       	push	r29
    2a5a:	cf 93       	push	r28
    2a5c:	cd b7       	in	r28, 0x3d	; 61
    2a5e:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPinValue(PortB, Pin1, Pin_High);
    2a60:	81 e0       	ldi	r24, 0x01	; 1
    2a62:	61 e0       	ldi	r22, 0x01	; 1
    2a64:	41 e0       	ldi	r20, 0x01	; 1
    2a66:	0e 94 9f 10 	call	0x213e	; 0x213e <DIO_vSetPinValue>
}
    2a6a:	cf 91       	pop	r28
    2a6c:	df 91       	pop	r29
    2a6e:	08 95       	ret

00002a70 <_7Segma_vEnable2>:
//-----------enable 7Segma 2 -----------
void _7Segma_vEnable2(){
    2a70:	df 93       	push	r29
    2a72:	cf 93       	push	r28
    2a74:	cd b7       	in	r28, 0x3d	; 61
    2a76:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPinValue(PortB, Pin2, Pin_High);
    2a78:	81 e0       	ldi	r24, 0x01	; 1
    2a7a:	62 e0       	ldi	r22, 0x02	; 2
    2a7c:	41 e0       	ldi	r20, 0x01	; 1
    2a7e:	0e 94 9f 10 	call	0x213e	; 0x213e <DIO_vSetPinValue>
}
    2a82:	cf 91       	pop	r28
    2a84:	df 91       	pop	r29
    2a86:	08 95       	ret

00002a88 <_7Segma_vDisable1>:
//-----------Disable 7Segma 1
void _7Segma_vDisable1(){
    2a88:	df 93       	push	r29
    2a8a:	cf 93       	push	r28
    2a8c:	cd b7       	in	r28, 0x3d	; 61
    2a8e:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPinValue(PortB, Pin1, Pin_Low);
    2a90:	81 e0       	ldi	r24, 0x01	; 1
    2a92:	61 e0       	ldi	r22, 0x01	; 1
    2a94:	40 e0       	ldi	r20, 0x00	; 0
    2a96:	0e 94 9f 10 	call	0x213e	; 0x213e <DIO_vSetPinValue>
}
    2a9a:	cf 91       	pop	r28
    2a9c:	df 91       	pop	r29
    2a9e:	08 95       	ret

00002aa0 <_7Segma_vDisable2>:
//-----------Disable 7Segma 2
void _7Segma_vDisable2(){
    2aa0:	df 93       	push	r29
    2aa2:	cf 93       	push	r28
    2aa4:	cd b7       	in	r28, 0x3d	; 61
    2aa6:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPinValue(PortB, Pin2, Pin_Low);
    2aa8:	81 e0       	ldi	r24, 0x01	; 1
    2aaa:	62 e0       	ldi	r22, 0x02	; 2
    2aac:	40 e0       	ldi	r20, 0x00	; 0
    2aae:	0e 94 9f 10 	call	0x213e	; 0x213e <DIO_vSetPinValue>
}
    2ab2:	cf 91       	pop	r28
    2ab4:	df 91       	pop	r29
    2ab6:	08 95       	ret

00002ab8 <_7Segma_vEnableDot>:
//------------enable 7Segma Dot
void _7Segma_vEnableDot(){
    2ab8:	df 93       	push	r29
    2aba:	cf 93       	push	r28
    2abc:	cd b7       	in	r28, 0x3d	; 61
    2abe:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPinValue(PortB, Pin3, Pin_High);
    2ac0:	81 e0       	ldi	r24, 0x01	; 1
    2ac2:	63 e0       	ldi	r22, 0x03	; 3
    2ac4:	41 e0       	ldi	r20, 0x01	; 1
    2ac6:	0e 94 9f 10 	call	0x213e	; 0x213e <DIO_vSetPinValue>
}
    2aca:	cf 91       	pop	r28
    2acc:	df 91       	pop	r29
    2ace:	08 95       	ret

00002ad0 <_7Segma_vDisbleDot>:
//------------Disable 7Segma Dot
void _7Segma_vDisbleDot(){
    2ad0:	df 93       	push	r29
    2ad2:	cf 93       	push	r28
    2ad4:	cd b7       	in	r28, 0x3d	; 61
    2ad6:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPinValue(PortB, Pin3, Pin_Low);
    2ad8:	81 e0       	ldi	r24, 0x01	; 1
    2ada:	63 e0       	ldi	r22, 0x03	; 3
    2adc:	40 e0       	ldi	r20, 0x00	; 0
    2ade:	0e 94 9f 10 	call	0x213e	; 0x213e <DIO_vSetPinValue>
}
    2ae2:	cf 91       	pop	r28
    2ae4:	df 91       	pop	r29
    2ae6:	08 95       	ret

00002ae8 <_7Segma_vShow>:
//----------Show Value on 7Segma ----------
void _7Segma_vShow(u8 loc_u8SegmaShowNumber){
    2ae8:	df 93       	push	r29
    2aea:	cf 93       	push	r28
    2aec:	0f 92       	push	r0
    2aee:	cd b7       	in	r28, 0x3d	; 61
    2af0:	de b7       	in	r29, 0x3e	; 62
    2af2:	89 83       	std	Y+1, r24	; 0x01
	loc_u8SegmaShowNumber= (loc_u8SegmaShowNumber<<4);
    2af4:	89 81       	ldd	r24, Y+1	; 0x01
    2af6:	82 95       	swap	r24
    2af8:	80 7f       	andi	r24, 0xF0	; 240
    2afa:	89 83       	std	Y+1, r24	; 0x01
	DIO_vSetPortValue(PortA, loc_u8SegmaShowNumber);
    2afc:	80 e0       	ldi	r24, 0x00	; 0
    2afe:	69 81       	ldd	r22, Y+1	; 0x01
    2b00:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <DIO_vSetPortValue>
}
    2b04:	0f 90       	pop	r0
    2b06:	cf 91       	pop	r28
    2b08:	df 91       	pop	r29
    2b0a:	08 95       	ret

00002b0c <_7Segma_vPrintNumber1>:
//------------ this function take a u8 number and print it on the left 7Segme------
void _7Segma_vPrintNumber1(u8 loc_u8SegmaPrintNumber){
    2b0c:	df 93       	push	r29
    2b0e:	cf 93       	push	r28
    2b10:	0f 92       	push	r0
    2b12:	cd b7       	in	r28, 0x3d	; 61
    2b14:	de b7       	in	r29, 0x3e	; 62
    2b16:	89 83       	std	Y+1, r24	; 0x01
	_7Segma_vEnable1();
    2b18:	0e 94 2c 15 	call	0x2a58	; 0x2a58 <_7Segma_vEnable1>
	_7Segma_vShow(loc_u8SegmaPrintNumber);
    2b1c:	89 81       	ldd	r24, Y+1	; 0x01
    2b1e:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <_7Segma_vShow>
	_7Segma_vDisable1();
    2b22:	0e 94 44 15 	call	0x2a88	; 0x2a88 <_7Segma_vDisable1>
}
    2b26:	0f 90       	pop	r0
    2b28:	cf 91       	pop	r28
    2b2a:	df 91       	pop	r29
    2b2c:	08 95       	ret

00002b2e <_7Segma_vPrintNumber2>:
//------------ this function take a u8 number and print it on the right 7Segme-----
void _7Segma_vPrintNumber2(u8 loc_u8SegmaPrintNumber){
    2b2e:	df 93       	push	r29
    2b30:	cf 93       	push	r28
    2b32:	0f 92       	push	r0
    2b34:	cd b7       	in	r28, 0x3d	; 61
    2b36:	de b7       	in	r29, 0x3e	; 62
    2b38:	89 83       	std	Y+1, r24	; 0x01
	_7Segma_vEnable2();
    2b3a:	0e 94 38 15 	call	0x2a70	; 0x2a70 <_7Segma_vEnable2>
	_7Segma_vShow(loc_u8SegmaPrintNumber);
    2b3e:	89 81       	ldd	r24, Y+1	; 0x01
    2b40:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <_7Segma_vShow>
	_7Segma_vDisable2();
    2b44:	0e 94 50 15 	call	0x2aa0	; 0x2aa0 <_7Segma_vDisable2>
}
    2b48:	0f 90       	pop	r0
    2b4a:	cf 91       	pop	r28
    2b4c:	df 91       	pop	r29
    2b4e:	08 95       	ret

00002b50 <PushButton_u8Button0>:
*
* \Parameters (in) : None
* \Parameters (out): u8
* \Return value:   : 0 or 1
*******************************************************************************/
u8 PushButton_u8Button0(){
    2b50:	df 93       	push	r29
    2b52:	cf 93       	push	r28
    2b54:	cd b7       	in	r28, 0x3d	; 61
    2b56:	de b7       	in	r29, 0x3e	; 62
    2b58:	2f 97       	sbiw	r28, 0x0f	; 15
    2b5a:	0f b6       	in	r0, 0x3f	; 63
    2b5c:	f8 94       	cli
    2b5e:	de bf       	out	0x3e, r29	; 62
    2b60:	0f be       	out	0x3f, r0	; 63
    2b62:	cd bf       	out	0x3d, r28	; 61
	DIO_vSetPinDirection(PortB, Pin0, Pin_InPut);
    2b64:	81 e0       	ldi	r24, 0x01	; 1
    2b66:	60 e0       	ldi	r22, 0x00	; 0
    2b68:	40 e0       	ldi	r20, 0x00	; 0
    2b6a:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <DIO_vSetPinDirection>
	if(DIO_u8PGetPinValue(PortB,Pin0)){
    2b6e:	81 e0       	ldi	r24, 0x01	; 1
    2b70:	60 e0       	ldi	r22, 0x00	; 0
    2b72:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <DIO_u8PGetPinValue>
    2b76:	88 23       	and	r24, r24
    2b78:	09 f4       	brne	.+2      	; 0x2b7c <PushButton_u8Button0+0x2c>
    2b7a:	7b c0       	rjmp	.+246    	; 0x2c72 <PushButton_u8Button0+0x122>
    2b7c:	80 e0       	ldi	r24, 0x00	; 0
    2b7e:	90 e0       	ldi	r25, 0x00	; 0
    2b80:	a8 ec       	ldi	r26, 0xC8	; 200
    2b82:	b1 e4       	ldi	r27, 0x41	; 65
    2b84:	8b 87       	std	Y+11, r24	; 0x0b
    2b86:	9c 87       	std	Y+12, r25	; 0x0c
    2b88:	ad 87       	std	Y+13, r26	; 0x0d
    2b8a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b8c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b8e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b90:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b92:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b94:	20 e0       	ldi	r18, 0x00	; 0
    2b96:	30 e0       	ldi	r19, 0x00	; 0
    2b98:	4a e7       	ldi	r20, 0x7A	; 122
    2b9a:	55 e4       	ldi	r21, 0x45	; 69
    2b9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ba0:	dc 01       	movw	r26, r24
    2ba2:	cb 01       	movw	r24, r22
    2ba4:	8f 83       	std	Y+7, r24	; 0x07
    2ba6:	98 87       	std	Y+8, r25	; 0x08
    2ba8:	a9 87       	std	Y+9, r26	; 0x09
    2baa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2bac:	6f 81       	ldd	r22, Y+7	; 0x07
    2bae:	78 85       	ldd	r23, Y+8	; 0x08
    2bb0:	89 85       	ldd	r24, Y+9	; 0x09
    2bb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bb4:	20 e0       	ldi	r18, 0x00	; 0
    2bb6:	30 e0       	ldi	r19, 0x00	; 0
    2bb8:	40 e8       	ldi	r20, 0x80	; 128
    2bba:	5f e3       	ldi	r21, 0x3F	; 63
    2bbc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bc0:	88 23       	and	r24, r24
    2bc2:	2c f4       	brge	.+10     	; 0x2bce <PushButton_u8Button0+0x7e>
		__ticks = 1;
    2bc4:	81 e0       	ldi	r24, 0x01	; 1
    2bc6:	90 e0       	ldi	r25, 0x00	; 0
    2bc8:	9e 83       	std	Y+6, r25	; 0x06
    2bca:	8d 83       	std	Y+5, r24	; 0x05
    2bcc:	3f c0       	rjmp	.+126    	; 0x2c4c <PushButton_u8Button0+0xfc>
	else if (__tmp > 65535)
    2bce:	6f 81       	ldd	r22, Y+7	; 0x07
    2bd0:	78 85       	ldd	r23, Y+8	; 0x08
    2bd2:	89 85       	ldd	r24, Y+9	; 0x09
    2bd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bd6:	20 e0       	ldi	r18, 0x00	; 0
    2bd8:	3f ef       	ldi	r19, 0xFF	; 255
    2bda:	4f e7       	ldi	r20, 0x7F	; 127
    2bdc:	57 e4       	ldi	r21, 0x47	; 71
    2bde:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2be2:	18 16       	cp	r1, r24
    2be4:	4c f5       	brge	.+82     	; 0x2c38 <PushButton_u8Button0+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2be6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2be8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bea:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bec:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bee:	20 e0       	ldi	r18, 0x00	; 0
    2bf0:	30 e0       	ldi	r19, 0x00	; 0
    2bf2:	40 e2       	ldi	r20, 0x20	; 32
    2bf4:	51 e4       	ldi	r21, 0x41	; 65
    2bf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bfa:	dc 01       	movw	r26, r24
    2bfc:	cb 01       	movw	r24, r22
    2bfe:	bc 01       	movw	r22, r24
    2c00:	cd 01       	movw	r24, r26
    2c02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c06:	dc 01       	movw	r26, r24
    2c08:	cb 01       	movw	r24, r22
    2c0a:	9e 83       	std	Y+6, r25	; 0x06
    2c0c:	8d 83       	std	Y+5, r24	; 0x05
    2c0e:	0f c0       	rjmp	.+30     	; 0x2c2e <PushButton_u8Button0+0xde>
    2c10:	80 e9       	ldi	r24, 0x90	; 144
    2c12:	91 e0       	ldi	r25, 0x01	; 1
    2c14:	9c 83       	std	Y+4, r25	; 0x04
    2c16:	8b 83       	std	Y+3, r24	; 0x03
    2c18:	8b 81       	ldd	r24, Y+3	; 0x03
    2c1a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c1c:	01 97       	sbiw	r24, 0x01	; 1
    2c1e:	f1 f7       	brne	.-4      	; 0x2c1c <PushButton_u8Button0+0xcc>
    2c20:	9c 83       	std	Y+4, r25	; 0x04
    2c22:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c24:	8d 81       	ldd	r24, Y+5	; 0x05
    2c26:	9e 81       	ldd	r25, Y+6	; 0x06
    2c28:	01 97       	sbiw	r24, 0x01	; 1
    2c2a:	9e 83       	std	Y+6, r25	; 0x06
    2c2c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c2e:	8d 81       	ldd	r24, Y+5	; 0x05
    2c30:	9e 81       	ldd	r25, Y+6	; 0x06
    2c32:	00 97       	sbiw	r24, 0x00	; 0
    2c34:	69 f7       	brne	.-38     	; 0x2c10 <PushButton_u8Button0+0xc0>
    2c36:	14 c0       	rjmp	.+40     	; 0x2c60 <PushButton_u8Button0+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c38:	6f 81       	ldd	r22, Y+7	; 0x07
    2c3a:	78 85       	ldd	r23, Y+8	; 0x08
    2c3c:	89 85       	ldd	r24, Y+9	; 0x09
    2c3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c44:	dc 01       	movw	r26, r24
    2c46:	cb 01       	movw	r24, r22
    2c48:	9e 83       	std	Y+6, r25	; 0x06
    2c4a:	8d 83       	std	Y+5, r24	; 0x05
    2c4c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c4e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c50:	9a 83       	std	Y+2, r25	; 0x02
    2c52:	89 83       	std	Y+1, r24	; 0x01
    2c54:	89 81       	ldd	r24, Y+1	; 0x01
    2c56:	9a 81       	ldd	r25, Y+2	; 0x02
    2c58:	01 97       	sbiw	r24, 0x01	; 1
    2c5a:	f1 f7       	brne	.-4      	; 0x2c58 <PushButton_u8Button0+0x108>
    2c5c:	9a 83       	std	Y+2, r25	; 0x02
    2c5e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(25);
		if(DIO_u8PGetPinValue(PortB,Pin0)){
    2c60:	81 e0       	ldi	r24, 0x01	; 1
    2c62:	60 e0       	ldi	r22, 0x00	; 0
    2c64:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <DIO_u8PGetPinValue>
    2c68:	88 23       	and	r24, r24
    2c6a:	19 f0       	breq	.+6      	; 0x2c72 <PushButton_u8Button0+0x122>
			return 1;
    2c6c:	81 e0       	ldi	r24, 0x01	; 1
    2c6e:	8f 87       	std	Y+15, r24	; 0x0f
    2c70:	01 c0       	rjmp	.+2      	; 0x2c74 <PushButton_u8Button0+0x124>
		}
	}
	return 0;
    2c72:	1f 86       	std	Y+15, r1	; 0x0f
    2c74:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    2c76:	2f 96       	adiw	r28, 0x0f	; 15
    2c78:	0f b6       	in	r0, 0x3f	; 63
    2c7a:	f8 94       	cli
    2c7c:	de bf       	out	0x3e, r29	; 62
    2c7e:	0f be       	out	0x3f, r0	; 63
    2c80:	cd bf       	out	0x3d, r28	; 61
    2c82:	cf 91       	pop	r28
    2c84:	df 91       	pop	r29
    2c86:	08 95       	ret

00002c88 <PushButton_u8Button1>:
*
* \Parameters (in) : None
* \Parameters (out): u8
* \Return value:   : 0 or 1
*******************************************************************************/
u8 PushButton_u8Button1(){
    2c88:	df 93       	push	r29
    2c8a:	cf 93       	push	r28
    2c8c:	cd b7       	in	r28, 0x3d	; 61
    2c8e:	de b7       	in	r29, 0x3e	; 62
    2c90:	2f 97       	sbiw	r28, 0x0f	; 15
    2c92:	0f b6       	in	r0, 0x3f	; 63
    2c94:	f8 94       	cli
    2c96:	de bf       	out	0x3e, r29	; 62
    2c98:	0f be       	out	0x3f, r0	; 63
    2c9a:	cd bf       	out	0x3d, r28	; 61
	DIO_vSetPinDirection(PortD, Pin6, Pin_InPut);
    2c9c:	83 e0       	ldi	r24, 0x03	; 3
    2c9e:	66 e0       	ldi	r22, 0x06	; 6
    2ca0:	40 e0       	ldi	r20, 0x00	; 0
    2ca2:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <DIO_vSetPinDirection>
	if(DIO_u8PGetPinValue(PortD,Pin6)){
    2ca6:	83 e0       	ldi	r24, 0x03	; 3
    2ca8:	66 e0       	ldi	r22, 0x06	; 6
    2caa:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <DIO_u8PGetPinValue>
    2cae:	88 23       	and	r24, r24
    2cb0:	09 f4       	brne	.+2      	; 0x2cb4 <PushButton_u8Button1+0x2c>
    2cb2:	7b c0       	rjmp	.+246    	; 0x2daa <PushButton_u8Button1+0x122>
    2cb4:	80 e0       	ldi	r24, 0x00	; 0
    2cb6:	90 e0       	ldi	r25, 0x00	; 0
    2cb8:	a8 ec       	ldi	r26, 0xC8	; 200
    2cba:	b1 e4       	ldi	r27, 0x41	; 65
    2cbc:	8b 87       	std	Y+11, r24	; 0x0b
    2cbe:	9c 87       	std	Y+12, r25	; 0x0c
    2cc0:	ad 87       	std	Y+13, r26	; 0x0d
    2cc2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cc4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cc6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cc8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cca:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ccc:	20 e0       	ldi	r18, 0x00	; 0
    2cce:	30 e0       	ldi	r19, 0x00	; 0
    2cd0:	4a e7       	ldi	r20, 0x7A	; 122
    2cd2:	55 e4       	ldi	r21, 0x45	; 69
    2cd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cd8:	dc 01       	movw	r26, r24
    2cda:	cb 01       	movw	r24, r22
    2cdc:	8f 83       	std	Y+7, r24	; 0x07
    2cde:	98 87       	std	Y+8, r25	; 0x08
    2ce0:	a9 87       	std	Y+9, r26	; 0x09
    2ce2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ce4:	6f 81       	ldd	r22, Y+7	; 0x07
    2ce6:	78 85       	ldd	r23, Y+8	; 0x08
    2ce8:	89 85       	ldd	r24, Y+9	; 0x09
    2cea:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cec:	20 e0       	ldi	r18, 0x00	; 0
    2cee:	30 e0       	ldi	r19, 0x00	; 0
    2cf0:	40 e8       	ldi	r20, 0x80	; 128
    2cf2:	5f e3       	ldi	r21, 0x3F	; 63
    2cf4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cf8:	88 23       	and	r24, r24
    2cfa:	2c f4       	brge	.+10     	; 0x2d06 <PushButton_u8Button1+0x7e>
		__ticks = 1;
    2cfc:	81 e0       	ldi	r24, 0x01	; 1
    2cfe:	90 e0       	ldi	r25, 0x00	; 0
    2d00:	9e 83       	std	Y+6, r25	; 0x06
    2d02:	8d 83       	std	Y+5, r24	; 0x05
    2d04:	3f c0       	rjmp	.+126    	; 0x2d84 <PushButton_u8Button1+0xfc>
	else if (__tmp > 65535)
    2d06:	6f 81       	ldd	r22, Y+7	; 0x07
    2d08:	78 85       	ldd	r23, Y+8	; 0x08
    2d0a:	89 85       	ldd	r24, Y+9	; 0x09
    2d0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d0e:	20 e0       	ldi	r18, 0x00	; 0
    2d10:	3f ef       	ldi	r19, 0xFF	; 255
    2d12:	4f e7       	ldi	r20, 0x7F	; 127
    2d14:	57 e4       	ldi	r21, 0x47	; 71
    2d16:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d1a:	18 16       	cp	r1, r24
    2d1c:	4c f5       	brge	.+82     	; 0x2d70 <PushButton_u8Button1+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d20:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d22:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d24:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d26:	20 e0       	ldi	r18, 0x00	; 0
    2d28:	30 e0       	ldi	r19, 0x00	; 0
    2d2a:	40 e2       	ldi	r20, 0x20	; 32
    2d2c:	51 e4       	ldi	r21, 0x41	; 65
    2d2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d32:	dc 01       	movw	r26, r24
    2d34:	cb 01       	movw	r24, r22
    2d36:	bc 01       	movw	r22, r24
    2d38:	cd 01       	movw	r24, r26
    2d3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d3e:	dc 01       	movw	r26, r24
    2d40:	cb 01       	movw	r24, r22
    2d42:	9e 83       	std	Y+6, r25	; 0x06
    2d44:	8d 83       	std	Y+5, r24	; 0x05
    2d46:	0f c0       	rjmp	.+30     	; 0x2d66 <PushButton_u8Button1+0xde>
    2d48:	80 e9       	ldi	r24, 0x90	; 144
    2d4a:	91 e0       	ldi	r25, 0x01	; 1
    2d4c:	9c 83       	std	Y+4, r25	; 0x04
    2d4e:	8b 83       	std	Y+3, r24	; 0x03
    2d50:	8b 81       	ldd	r24, Y+3	; 0x03
    2d52:	9c 81       	ldd	r25, Y+4	; 0x04
    2d54:	01 97       	sbiw	r24, 0x01	; 1
    2d56:	f1 f7       	brne	.-4      	; 0x2d54 <PushButton_u8Button1+0xcc>
    2d58:	9c 83       	std	Y+4, r25	; 0x04
    2d5a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d5c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d5e:	9e 81       	ldd	r25, Y+6	; 0x06
    2d60:	01 97       	sbiw	r24, 0x01	; 1
    2d62:	9e 83       	std	Y+6, r25	; 0x06
    2d64:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d66:	8d 81       	ldd	r24, Y+5	; 0x05
    2d68:	9e 81       	ldd	r25, Y+6	; 0x06
    2d6a:	00 97       	sbiw	r24, 0x00	; 0
    2d6c:	69 f7       	brne	.-38     	; 0x2d48 <PushButton_u8Button1+0xc0>
    2d6e:	14 c0       	rjmp	.+40     	; 0x2d98 <PushButton_u8Button1+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d70:	6f 81       	ldd	r22, Y+7	; 0x07
    2d72:	78 85       	ldd	r23, Y+8	; 0x08
    2d74:	89 85       	ldd	r24, Y+9	; 0x09
    2d76:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d7c:	dc 01       	movw	r26, r24
    2d7e:	cb 01       	movw	r24, r22
    2d80:	9e 83       	std	Y+6, r25	; 0x06
    2d82:	8d 83       	std	Y+5, r24	; 0x05
    2d84:	8d 81       	ldd	r24, Y+5	; 0x05
    2d86:	9e 81       	ldd	r25, Y+6	; 0x06
    2d88:	9a 83       	std	Y+2, r25	; 0x02
    2d8a:	89 83       	std	Y+1, r24	; 0x01
    2d8c:	89 81       	ldd	r24, Y+1	; 0x01
    2d8e:	9a 81       	ldd	r25, Y+2	; 0x02
    2d90:	01 97       	sbiw	r24, 0x01	; 1
    2d92:	f1 f7       	brne	.-4      	; 0x2d90 <PushButton_u8Button1+0x108>
    2d94:	9a 83       	std	Y+2, r25	; 0x02
    2d96:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(25);
		if(DIO_u8PGetPinValue(PortD,Pin6)){
    2d98:	83 e0       	ldi	r24, 0x03	; 3
    2d9a:	66 e0       	ldi	r22, 0x06	; 6
    2d9c:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <DIO_u8PGetPinValue>
    2da0:	88 23       	and	r24, r24
    2da2:	19 f0       	breq	.+6      	; 0x2daa <PushButton_u8Button1+0x122>
			return 1;
    2da4:	81 e0       	ldi	r24, 0x01	; 1
    2da6:	8f 87       	std	Y+15, r24	; 0x0f
    2da8:	01 c0       	rjmp	.+2      	; 0x2dac <PushButton_u8Button1+0x124>
		}
	}
	return 0;
    2daa:	1f 86       	std	Y+15, r1	; 0x0f
    2dac:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    2dae:	2f 96       	adiw	r28, 0x0f	; 15
    2db0:	0f b6       	in	r0, 0x3f	; 63
    2db2:	f8 94       	cli
    2db4:	de bf       	out	0x3e, r29	; 62
    2db6:	0f be       	out	0x3f, r0	; 63
    2db8:	cd bf       	out	0x3d, r28	; 61
    2dba:	cf 91       	pop	r28
    2dbc:	df 91       	pop	r29
    2dbe:	08 95       	ret

00002dc0 <PushButton_u8Button2>:
*
* \Parameters (in) : None
* \Parameters (out): u8
* \Return value:   : 0 or 1
*******************************************************************************/
u8 PushButton_u8Button2(){
    2dc0:	df 93       	push	r29
    2dc2:	cf 93       	push	r28
    2dc4:	cd b7       	in	r28, 0x3d	; 61
    2dc6:	de b7       	in	r29, 0x3e	; 62
    2dc8:	2f 97       	sbiw	r28, 0x0f	; 15
    2dca:	0f b6       	in	r0, 0x3f	; 63
    2dcc:	f8 94       	cli
    2dce:	de bf       	out	0x3e, r29	; 62
    2dd0:	0f be       	out	0x3f, r0	; 63
    2dd2:	cd bf       	out	0x3d, r28	; 61
	DIO_vSetPinDirection(PortD, Pin2, Pin_InPut);
    2dd4:	83 e0       	ldi	r24, 0x03	; 3
    2dd6:	62 e0       	ldi	r22, 0x02	; 2
    2dd8:	40 e0       	ldi	r20, 0x00	; 0
    2dda:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <DIO_vSetPinDirection>
	if(DIO_u8PGetPinValue(PortD,Pin2)){
    2dde:	83 e0       	ldi	r24, 0x03	; 3
    2de0:	62 e0       	ldi	r22, 0x02	; 2
    2de2:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <DIO_u8PGetPinValue>
    2de6:	88 23       	and	r24, r24
    2de8:	09 f4       	brne	.+2      	; 0x2dec <PushButton_u8Button2+0x2c>
    2dea:	7b c0       	rjmp	.+246    	; 0x2ee2 <PushButton_u8Button2+0x122>
    2dec:	80 e0       	ldi	r24, 0x00	; 0
    2dee:	90 e0       	ldi	r25, 0x00	; 0
    2df0:	a8 ec       	ldi	r26, 0xC8	; 200
    2df2:	b1 e4       	ldi	r27, 0x41	; 65
    2df4:	8b 87       	std	Y+11, r24	; 0x0b
    2df6:	9c 87       	std	Y+12, r25	; 0x0c
    2df8:	ad 87       	std	Y+13, r26	; 0x0d
    2dfa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dfc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dfe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e00:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e02:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e04:	20 e0       	ldi	r18, 0x00	; 0
    2e06:	30 e0       	ldi	r19, 0x00	; 0
    2e08:	4a e7       	ldi	r20, 0x7A	; 122
    2e0a:	55 e4       	ldi	r21, 0x45	; 69
    2e0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e10:	dc 01       	movw	r26, r24
    2e12:	cb 01       	movw	r24, r22
    2e14:	8f 83       	std	Y+7, r24	; 0x07
    2e16:	98 87       	std	Y+8, r25	; 0x08
    2e18:	a9 87       	std	Y+9, r26	; 0x09
    2e1a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e1c:	6f 81       	ldd	r22, Y+7	; 0x07
    2e1e:	78 85       	ldd	r23, Y+8	; 0x08
    2e20:	89 85       	ldd	r24, Y+9	; 0x09
    2e22:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e24:	20 e0       	ldi	r18, 0x00	; 0
    2e26:	30 e0       	ldi	r19, 0x00	; 0
    2e28:	40 e8       	ldi	r20, 0x80	; 128
    2e2a:	5f e3       	ldi	r21, 0x3F	; 63
    2e2c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e30:	88 23       	and	r24, r24
    2e32:	2c f4       	brge	.+10     	; 0x2e3e <PushButton_u8Button2+0x7e>
		__ticks = 1;
    2e34:	81 e0       	ldi	r24, 0x01	; 1
    2e36:	90 e0       	ldi	r25, 0x00	; 0
    2e38:	9e 83       	std	Y+6, r25	; 0x06
    2e3a:	8d 83       	std	Y+5, r24	; 0x05
    2e3c:	3f c0       	rjmp	.+126    	; 0x2ebc <PushButton_u8Button2+0xfc>
	else if (__tmp > 65535)
    2e3e:	6f 81       	ldd	r22, Y+7	; 0x07
    2e40:	78 85       	ldd	r23, Y+8	; 0x08
    2e42:	89 85       	ldd	r24, Y+9	; 0x09
    2e44:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e46:	20 e0       	ldi	r18, 0x00	; 0
    2e48:	3f ef       	ldi	r19, 0xFF	; 255
    2e4a:	4f e7       	ldi	r20, 0x7F	; 127
    2e4c:	57 e4       	ldi	r21, 0x47	; 71
    2e4e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e52:	18 16       	cp	r1, r24
    2e54:	4c f5       	brge	.+82     	; 0x2ea8 <PushButton_u8Button2+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e56:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e58:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e5e:	20 e0       	ldi	r18, 0x00	; 0
    2e60:	30 e0       	ldi	r19, 0x00	; 0
    2e62:	40 e2       	ldi	r20, 0x20	; 32
    2e64:	51 e4       	ldi	r21, 0x41	; 65
    2e66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e6a:	dc 01       	movw	r26, r24
    2e6c:	cb 01       	movw	r24, r22
    2e6e:	bc 01       	movw	r22, r24
    2e70:	cd 01       	movw	r24, r26
    2e72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e76:	dc 01       	movw	r26, r24
    2e78:	cb 01       	movw	r24, r22
    2e7a:	9e 83       	std	Y+6, r25	; 0x06
    2e7c:	8d 83       	std	Y+5, r24	; 0x05
    2e7e:	0f c0       	rjmp	.+30     	; 0x2e9e <PushButton_u8Button2+0xde>
    2e80:	80 e9       	ldi	r24, 0x90	; 144
    2e82:	91 e0       	ldi	r25, 0x01	; 1
    2e84:	9c 83       	std	Y+4, r25	; 0x04
    2e86:	8b 83       	std	Y+3, r24	; 0x03
    2e88:	8b 81       	ldd	r24, Y+3	; 0x03
    2e8a:	9c 81       	ldd	r25, Y+4	; 0x04
    2e8c:	01 97       	sbiw	r24, 0x01	; 1
    2e8e:	f1 f7       	brne	.-4      	; 0x2e8c <PushButton_u8Button2+0xcc>
    2e90:	9c 83       	std	Y+4, r25	; 0x04
    2e92:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e94:	8d 81       	ldd	r24, Y+5	; 0x05
    2e96:	9e 81       	ldd	r25, Y+6	; 0x06
    2e98:	01 97       	sbiw	r24, 0x01	; 1
    2e9a:	9e 83       	std	Y+6, r25	; 0x06
    2e9c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e9e:	8d 81       	ldd	r24, Y+5	; 0x05
    2ea0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ea2:	00 97       	sbiw	r24, 0x00	; 0
    2ea4:	69 f7       	brne	.-38     	; 0x2e80 <PushButton_u8Button2+0xc0>
    2ea6:	14 c0       	rjmp	.+40     	; 0x2ed0 <PushButton_u8Button2+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ea8:	6f 81       	ldd	r22, Y+7	; 0x07
    2eaa:	78 85       	ldd	r23, Y+8	; 0x08
    2eac:	89 85       	ldd	r24, Y+9	; 0x09
    2eae:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eb4:	dc 01       	movw	r26, r24
    2eb6:	cb 01       	movw	r24, r22
    2eb8:	9e 83       	std	Y+6, r25	; 0x06
    2eba:	8d 83       	std	Y+5, r24	; 0x05
    2ebc:	8d 81       	ldd	r24, Y+5	; 0x05
    2ebe:	9e 81       	ldd	r25, Y+6	; 0x06
    2ec0:	9a 83       	std	Y+2, r25	; 0x02
    2ec2:	89 83       	std	Y+1, r24	; 0x01
    2ec4:	89 81       	ldd	r24, Y+1	; 0x01
    2ec6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ec8:	01 97       	sbiw	r24, 0x01	; 1
    2eca:	f1 f7       	brne	.-4      	; 0x2ec8 <PushButton_u8Button2+0x108>
    2ecc:	9a 83       	std	Y+2, r25	; 0x02
    2ece:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(25);
		if(DIO_u8PGetPinValue(PortD,Pin2)){
    2ed0:	83 e0       	ldi	r24, 0x03	; 3
    2ed2:	62 e0       	ldi	r22, 0x02	; 2
    2ed4:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <DIO_u8PGetPinValue>
    2ed8:	88 23       	and	r24, r24
    2eda:	19 f0       	breq	.+6      	; 0x2ee2 <PushButton_u8Button2+0x122>
			return 1;
    2edc:	81 e0       	ldi	r24, 0x01	; 1
    2ede:	8f 87       	std	Y+15, r24	; 0x0f
    2ee0:	01 c0       	rjmp	.+2      	; 0x2ee4 <PushButton_u8Button2+0x124>
		}
	}
	return 0;
    2ee2:	1f 86       	std	Y+15, r1	; 0x0f
    2ee4:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    2ee6:	2f 96       	adiw	r28, 0x0f	; 15
    2ee8:	0f b6       	in	r0, 0x3f	; 63
    2eea:	f8 94       	cli
    2eec:	de bf       	out	0x3e, r29	; 62
    2eee:	0f be       	out	0x3f, r0	; 63
    2ef0:	cd bf       	out	0x3d, r28	; 61
    2ef2:	cf 91       	pop	r28
    2ef4:	df 91       	pop	r29
    2ef6:	08 95       	ret

00002ef8 <PushButton_u8Button1LonPress>:
*
* \Parameters (in) : None
* \Parameters (out): u8
* \Return value:   : 0 or 1
*******************************************************************************/
u8 PushButton_u8Button1LonPress(){
    2ef8:	df 93       	push	r29
    2efa:	cf 93       	push	r28
    2efc:	cd b7       	in	r28, 0x3d	; 61
    2efe:	de b7       	in	r29, 0x3e	; 62
    2f00:	2f 97       	sbiw	r28, 0x0f	; 15
    2f02:	0f b6       	in	r0, 0x3f	; 63
    2f04:	f8 94       	cli
    2f06:	de bf       	out	0x3e, r29	; 62
    2f08:	0f be       	out	0x3f, r0	; 63
    2f0a:	cd bf       	out	0x3d, r28	; 61
	if(PushButton_u8Button1()){
    2f0c:	0e 94 44 16 	call	0x2c88	; 0x2c88 <PushButton_u8Button1>
    2f10:	88 23       	and	r24, r24
    2f12:	09 f4       	brne	.+2      	; 0x2f16 <PushButton_u8Button1LonPress+0x1e>
    2f14:	7b c0       	rjmp	.+246    	; 0x300c <PushButton_u8Button1LonPress+0x114>
    2f16:	72 c0       	rjmp	.+228    	; 0x2ffc <PushButton_u8Button1LonPress+0x104>
		while(PushButton_u8Button1()){
    2f18:	80 e0       	ldi	r24, 0x00	; 0
    2f1a:	90 e0       	ldi	r25, 0x00	; 0
    2f1c:	a0 e2       	ldi	r26, 0x20	; 32
    2f1e:	b1 e4       	ldi	r27, 0x41	; 65
    2f20:	8b 87       	std	Y+11, r24	; 0x0b
    2f22:	9c 87       	std	Y+12, r25	; 0x0c
    2f24:	ad 87       	std	Y+13, r26	; 0x0d
    2f26:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f28:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f30:	20 e0       	ldi	r18, 0x00	; 0
    2f32:	30 e0       	ldi	r19, 0x00	; 0
    2f34:	4a e7       	ldi	r20, 0x7A	; 122
    2f36:	55 e4       	ldi	r21, 0x45	; 69
    2f38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f3c:	dc 01       	movw	r26, r24
    2f3e:	cb 01       	movw	r24, r22
    2f40:	8f 83       	std	Y+7, r24	; 0x07
    2f42:	98 87       	std	Y+8, r25	; 0x08
    2f44:	a9 87       	std	Y+9, r26	; 0x09
    2f46:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f48:	6f 81       	ldd	r22, Y+7	; 0x07
    2f4a:	78 85       	ldd	r23, Y+8	; 0x08
    2f4c:	89 85       	ldd	r24, Y+9	; 0x09
    2f4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f50:	20 e0       	ldi	r18, 0x00	; 0
    2f52:	30 e0       	ldi	r19, 0x00	; 0
    2f54:	40 e8       	ldi	r20, 0x80	; 128
    2f56:	5f e3       	ldi	r21, 0x3F	; 63
    2f58:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f5c:	88 23       	and	r24, r24
    2f5e:	2c f4       	brge	.+10     	; 0x2f6a <PushButton_u8Button1LonPress+0x72>
		__ticks = 1;
    2f60:	81 e0       	ldi	r24, 0x01	; 1
    2f62:	90 e0       	ldi	r25, 0x00	; 0
    2f64:	9e 83       	std	Y+6, r25	; 0x06
    2f66:	8d 83       	std	Y+5, r24	; 0x05
    2f68:	3f c0       	rjmp	.+126    	; 0x2fe8 <PushButton_u8Button1LonPress+0xf0>
	else if (__tmp > 65535)
    2f6a:	6f 81       	ldd	r22, Y+7	; 0x07
    2f6c:	78 85       	ldd	r23, Y+8	; 0x08
    2f6e:	89 85       	ldd	r24, Y+9	; 0x09
    2f70:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f72:	20 e0       	ldi	r18, 0x00	; 0
    2f74:	3f ef       	ldi	r19, 0xFF	; 255
    2f76:	4f e7       	ldi	r20, 0x7F	; 127
    2f78:	57 e4       	ldi	r21, 0x47	; 71
    2f7a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f7e:	18 16       	cp	r1, r24
    2f80:	4c f5       	brge	.+82     	; 0x2fd4 <PushButton_u8Button1LonPress+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f82:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f84:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f86:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f88:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f8a:	20 e0       	ldi	r18, 0x00	; 0
    2f8c:	30 e0       	ldi	r19, 0x00	; 0
    2f8e:	40 e2       	ldi	r20, 0x20	; 32
    2f90:	51 e4       	ldi	r21, 0x41	; 65
    2f92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f96:	dc 01       	movw	r26, r24
    2f98:	cb 01       	movw	r24, r22
    2f9a:	bc 01       	movw	r22, r24
    2f9c:	cd 01       	movw	r24, r26
    2f9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fa2:	dc 01       	movw	r26, r24
    2fa4:	cb 01       	movw	r24, r22
    2fa6:	9e 83       	std	Y+6, r25	; 0x06
    2fa8:	8d 83       	std	Y+5, r24	; 0x05
    2faa:	0f c0       	rjmp	.+30     	; 0x2fca <PushButton_u8Button1LonPress+0xd2>
    2fac:	80 e9       	ldi	r24, 0x90	; 144
    2fae:	91 e0       	ldi	r25, 0x01	; 1
    2fb0:	9c 83       	std	Y+4, r25	; 0x04
    2fb2:	8b 83       	std	Y+3, r24	; 0x03
    2fb4:	8b 81       	ldd	r24, Y+3	; 0x03
    2fb6:	9c 81       	ldd	r25, Y+4	; 0x04
    2fb8:	01 97       	sbiw	r24, 0x01	; 1
    2fba:	f1 f7       	brne	.-4      	; 0x2fb8 <PushButton_u8Button1LonPress+0xc0>
    2fbc:	9c 83       	std	Y+4, r25	; 0x04
    2fbe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fc0:	8d 81       	ldd	r24, Y+5	; 0x05
    2fc2:	9e 81       	ldd	r25, Y+6	; 0x06
    2fc4:	01 97       	sbiw	r24, 0x01	; 1
    2fc6:	9e 83       	std	Y+6, r25	; 0x06
    2fc8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fca:	8d 81       	ldd	r24, Y+5	; 0x05
    2fcc:	9e 81       	ldd	r25, Y+6	; 0x06
    2fce:	00 97       	sbiw	r24, 0x00	; 0
    2fd0:	69 f7       	brne	.-38     	; 0x2fac <PushButton_u8Button1LonPress+0xb4>
    2fd2:	14 c0       	rjmp	.+40     	; 0x2ffc <PushButton_u8Button1LonPress+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fd4:	6f 81       	ldd	r22, Y+7	; 0x07
    2fd6:	78 85       	ldd	r23, Y+8	; 0x08
    2fd8:	89 85       	ldd	r24, Y+9	; 0x09
    2fda:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fe0:	dc 01       	movw	r26, r24
    2fe2:	cb 01       	movw	r24, r22
    2fe4:	9e 83       	std	Y+6, r25	; 0x06
    2fe6:	8d 83       	std	Y+5, r24	; 0x05
    2fe8:	8d 81       	ldd	r24, Y+5	; 0x05
    2fea:	9e 81       	ldd	r25, Y+6	; 0x06
    2fec:	9a 83       	std	Y+2, r25	; 0x02
    2fee:	89 83       	std	Y+1, r24	; 0x01
    2ff0:	89 81       	ldd	r24, Y+1	; 0x01
    2ff2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ff4:	01 97       	sbiw	r24, 0x01	; 1
    2ff6:	f1 f7       	brne	.-4      	; 0x2ff4 <PushButton_u8Button1LonPress+0xfc>
    2ff8:	9a 83       	std	Y+2, r25	; 0x02
    2ffa:	89 83       	std	Y+1, r24	; 0x01
    2ffc:	0e 94 44 16 	call	0x2c88	; 0x2c88 <PushButton_u8Button1>
    3000:	88 23       	and	r24, r24
    3002:	09 f0       	breq	.+2      	; 0x3006 <PushButton_u8Button1LonPress+0x10e>
    3004:	89 cf       	rjmp	.-238    	; 0x2f18 <PushButton_u8Button1LonPress+0x20>
			_delay_ms(10);
		}
		return 1;
    3006:	81 e0       	ldi	r24, 0x01	; 1
    3008:	8f 87       	std	Y+15, r24	; 0x0f
    300a:	01 c0       	rjmp	.+2      	; 0x300e <PushButton_u8Button1LonPress+0x116>
	}
	else{
		return 0;
    300c:	1f 86       	std	Y+15, r1	; 0x0f
    300e:	8f 85       	ldd	r24, Y+15	; 0x0f
	}
}
    3010:	2f 96       	adiw	r28, 0x0f	; 15
    3012:	0f b6       	in	r0, 0x3f	; 63
    3014:	f8 94       	cli
    3016:	de bf       	out	0x3e, r29	; 62
    3018:	0f be       	out	0x3f, r0	; 63
    301a:	cd bf       	out	0x3d, r28	; 61
    301c:	cf 91       	pop	r28
    301e:	df 91       	pop	r29
    3020:	08 95       	ret

00003022 <PushButton_u8Button2OneSec>:
*
* \Parameters (in) : None
* \Parameters (out): u8
* \Return value:   : 0 or 1
*******************************************************************************/
u8 PushButton_u8Button2OneSec(){
    3022:	df 93       	push	r29
    3024:	cf 93       	push	r28
    3026:	cd b7       	in	r28, 0x3d	; 61
    3028:	de b7       	in	r29, 0x3e	; 62
    302a:	60 97       	sbiw	r28, 0x10	; 16
    302c:	0f b6       	in	r0, 0x3f	; 63
    302e:	f8 94       	cli
    3030:	de bf       	out	0x3e, r29	; 62
    3032:	0f be       	out	0x3f, r0	; 63
    3034:	cd bf       	out	0x3d, r28	; 61
	u8 Delay=0;
    3036:	1f 86       	std	Y+15, r1	; 0x0f
    3038:	75 c0       	rjmp	.+234    	; 0x3124 <PushButton_u8Button2OneSec+0x102>
	while(PushButton_u8Button2()){
    303a:	80 e0       	ldi	r24, 0x00	; 0
    303c:	90 e0       	ldi	r25, 0x00	; 0
    303e:	a0 e2       	ldi	r26, 0x20	; 32
    3040:	b1 e4       	ldi	r27, 0x41	; 65
    3042:	8b 87       	std	Y+11, r24	; 0x0b
    3044:	9c 87       	std	Y+12, r25	; 0x0c
    3046:	ad 87       	std	Y+13, r26	; 0x0d
    3048:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    304a:	6b 85       	ldd	r22, Y+11	; 0x0b
    304c:	7c 85       	ldd	r23, Y+12	; 0x0c
    304e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3050:	9e 85       	ldd	r25, Y+14	; 0x0e
    3052:	20 e0       	ldi	r18, 0x00	; 0
    3054:	30 e0       	ldi	r19, 0x00	; 0
    3056:	4a e7       	ldi	r20, 0x7A	; 122
    3058:	55 e4       	ldi	r21, 0x45	; 69
    305a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    305e:	dc 01       	movw	r26, r24
    3060:	cb 01       	movw	r24, r22
    3062:	8f 83       	std	Y+7, r24	; 0x07
    3064:	98 87       	std	Y+8, r25	; 0x08
    3066:	a9 87       	std	Y+9, r26	; 0x09
    3068:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    306a:	6f 81       	ldd	r22, Y+7	; 0x07
    306c:	78 85       	ldd	r23, Y+8	; 0x08
    306e:	89 85       	ldd	r24, Y+9	; 0x09
    3070:	9a 85       	ldd	r25, Y+10	; 0x0a
    3072:	20 e0       	ldi	r18, 0x00	; 0
    3074:	30 e0       	ldi	r19, 0x00	; 0
    3076:	40 e8       	ldi	r20, 0x80	; 128
    3078:	5f e3       	ldi	r21, 0x3F	; 63
    307a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    307e:	88 23       	and	r24, r24
    3080:	2c f4       	brge	.+10     	; 0x308c <PushButton_u8Button2OneSec+0x6a>
		__ticks = 1;
    3082:	81 e0       	ldi	r24, 0x01	; 1
    3084:	90 e0       	ldi	r25, 0x00	; 0
    3086:	9e 83       	std	Y+6, r25	; 0x06
    3088:	8d 83       	std	Y+5, r24	; 0x05
    308a:	3f c0       	rjmp	.+126    	; 0x310a <PushButton_u8Button2OneSec+0xe8>
	else if (__tmp > 65535)
    308c:	6f 81       	ldd	r22, Y+7	; 0x07
    308e:	78 85       	ldd	r23, Y+8	; 0x08
    3090:	89 85       	ldd	r24, Y+9	; 0x09
    3092:	9a 85       	ldd	r25, Y+10	; 0x0a
    3094:	20 e0       	ldi	r18, 0x00	; 0
    3096:	3f ef       	ldi	r19, 0xFF	; 255
    3098:	4f e7       	ldi	r20, 0x7F	; 127
    309a:	57 e4       	ldi	r21, 0x47	; 71
    309c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30a0:	18 16       	cp	r1, r24
    30a2:	4c f5       	brge	.+82     	; 0x30f6 <PushButton_u8Button2OneSec+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    30a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    30a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    30aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    30ac:	20 e0       	ldi	r18, 0x00	; 0
    30ae:	30 e0       	ldi	r19, 0x00	; 0
    30b0:	40 e2       	ldi	r20, 0x20	; 32
    30b2:	51 e4       	ldi	r21, 0x41	; 65
    30b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30b8:	dc 01       	movw	r26, r24
    30ba:	cb 01       	movw	r24, r22
    30bc:	bc 01       	movw	r22, r24
    30be:	cd 01       	movw	r24, r26
    30c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30c4:	dc 01       	movw	r26, r24
    30c6:	cb 01       	movw	r24, r22
    30c8:	9e 83       	std	Y+6, r25	; 0x06
    30ca:	8d 83       	std	Y+5, r24	; 0x05
    30cc:	0f c0       	rjmp	.+30     	; 0x30ec <PushButton_u8Button2OneSec+0xca>
    30ce:	80 e9       	ldi	r24, 0x90	; 144
    30d0:	91 e0       	ldi	r25, 0x01	; 1
    30d2:	9c 83       	std	Y+4, r25	; 0x04
    30d4:	8b 83       	std	Y+3, r24	; 0x03
    30d6:	8b 81       	ldd	r24, Y+3	; 0x03
    30d8:	9c 81       	ldd	r25, Y+4	; 0x04
    30da:	01 97       	sbiw	r24, 0x01	; 1
    30dc:	f1 f7       	brne	.-4      	; 0x30da <PushButton_u8Button2OneSec+0xb8>
    30de:	9c 83       	std	Y+4, r25	; 0x04
    30e0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30e2:	8d 81       	ldd	r24, Y+5	; 0x05
    30e4:	9e 81       	ldd	r25, Y+6	; 0x06
    30e6:	01 97       	sbiw	r24, 0x01	; 1
    30e8:	9e 83       	std	Y+6, r25	; 0x06
    30ea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30ec:	8d 81       	ldd	r24, Y+5	; 0x05
    30ee:	9e 81       	ldd	r25, Y+6	; 0x06
    30f0:	00 97       	sbiw	r24, 0x00	; 0
    30f2:	69 f7       	brne	.-38     	; 0x30ce <PushButton_u8Button2OneSec+0xac>
    30f4:	14 c0       	rjmp	.+40     	; 0x311e <PushButton_u8Button2OneSec+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30f6:	6f 81       	ldd	r22, Y+7	; 0x07
    30f8:	78 85       	ldd	r23, Y+8	; 0x08
    30fa:	89 85       	ldd	r24, Y+9	; 0x09
    30fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    30fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3102:	dc 01       	movw	r26, r24
    3104:	cb 01       	movw	r24, r22
    3106:	9e 83       	std	Y+6, r25	; 0x06
    3108:	8d 83       	std	Y+5, r24	; 0x05
    310a:	8d 81       	ldd	r24, Y+5	; 0x05
    310c:	9e 81       	ldd	r25, Y+6	; 0x06
    310e:	9a 83       	std	Y+2, r25	; 0x02
    3110:	89 83       	std	Y+1, r24	; 0x01
    3112:	89 81       	ldd	r24, Y+1	; 0x01
    3114:	9a 81       	ldd	r25, Y+2	; 0x02
    3116:	01 97       	sbiw	r24, 0x01	; 1
    3118:	f1 f7       	brne	.-4      	; 0x3116 <PushButton_u8Button2OneSec+0xf4>
    311a:	9a 83       	std	Y+2, r25	; 0x02
    311c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		Delay++;
    311e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3120:	8f 5f       	subi	r24, 0xFF	; 255
    3122:	8f 87       	std	Y+15, r24	; 0x0f
* \Parameters (out): u8
* \Return value:   : 0 or 1
*******************************************************************************/
u8 PushButton_u8Button2OneSec(){
	u8 Delay=0;
	while(PushButton_u8Button2()){
    3124:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <PushButton_u8Button2>
    3128:	88 23       	and	r24, r24
    312a:	09 f0       	breq	.+2      	; 0x312e <PushButton_u8Button2OneSec+0x10c>
    312c:	86 cf       	rjmp	.-244    	; 0x303a <PushButton_u8Button2OneSec+0x18>
		_delay_ms(10);
		Delay++;
	}
	if(Delay>29){
    312e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3130:	8e 31       	cpi	r24, 0x1E	; 30
    3132:	18 f0       	brcs	.+6      	; 0x313a <PushButton_u8Button2OneSec+0x118>
		return 1;
    3134:	81 e0       	ldi	r24, 0x01	; 1
    3136:	88 8b       	std	Y+16, r24	; 0x10
    3138:	01 c0       	rjmp	.+2      	; 0x313c <PushButton_u8Button2OneSec+0x11a>
	}
	else{
		return 0;
    313a:	18 8a       	std	Y+16, r1	; 0x10
    313c:	88 89       	ldd	r24, Y+16	; 0x10
	}
}
    313e:	60 96       	adiw	r28, 0x10	; 16
    3140:	0f b6       	in	r0, 0x3f	; 63
    3142:	f8 94       	cli
    3144:	de bf       	out	0x3e, r29	; 62
    3146:	0f be       	out	0x3f, r0	; 63
    3148:	cd bf       	out	0x3d, r28	; 61
    314a:	cf 91       	pop	r28
    314c:	df 91       	pop	r29
    314e:	08 95       	ret

00003150 <LCD_vSendCommand>:
 *
 *  Created on: Dec 30, 2022
 *      Author: a7med
 */
#include "LCD.h"
void LCD_vSendCommand(u8 Loc_u8Command){
    3150:	df 93       	push	r29
    3152:	cf 93       	push	r28
    3154:	cd b7       	in	r28, 0x3d	; 61
    3156:	de b7       	in	r29, 0x3e	; 62
    3158:	6d 97       	sbiw	r28, 0x1d	; 29
    315a:	0f b6       	in	r0, 0x3f	; 63
    315c:	f8 94       	cli
    315e:	de bf       	out	0x3e, r29	; 62
    3160:	0f be       	out	0x3f, r0	; 63
    3162:	cd bf       	out	0x3d, r28	; 61
    3164:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_vSetPinValue(PortB, Pin1, Pin_Low);
    3166:	81 e0       	ldi	r24, 0x01	; 1
    3168:	61 e0       	ldi	r22, 0x01	; 1
    316a:	40 e0       	ldi	r20, 0x00	; 0
    316c:	0e 94 9f 10 	call	0x213e	; 0x213e <DIO_vSetPinValue>
	DIO_vSetPinValue(PortB, Pin2, Pin_Low);
    3170:	81 e0       	ldi	r24, 0x01	; 1
    3172:	62 e0       	ldi	r22, 0x02	; 2
    3174:	40 e0       	ldi	r20, 0x00	; 0
    3176:	0e 94 9f 10 	call	0x213e	; 0x213e <DIO_vSetPinValue>
	DIO_vSetPinValue(PortB, Pin3, Pin_Low);
    317a:	81 e0       	ldi	r24, 0x01	; 1
    317c:	63 e0       	ldi	r22, 0x03	; 3
    317e:	40 e0       	ldi	r20, 0x00	; 0
    3180:	0e 94 9f 10 	call	0x213e	; 0x213e <DIO_vSetPinValue>
	//------Send command-------
	DIO_vSetPortValue(PortA,(Loc_u8Command)&0xF0);
    3184:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3186:	98 2f       	mov	r25, r24
    3188:	90 7f       	andi	r25, 0xF0	; 240
    318a:	80 e0       	ldi	r24, 0x00	; 0
    318c:	69 2f       	mov	r22, r25
    318e:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <DIO_vSetPortValue>
	DIO_vSetPinValue(PortB, Pin3, Pin_High);
    3192:	81 e0       	ldi	r24, 0x01	; 1
    3194:	63 e0       	ldi	r22, 0x03	; 3
    3196:	41 e0       	ldi	r20, 0x01	; 1
    3198:	0e 94 9f 10 	call	0x213e	; 0x213e <DIO_vSetPinValue>
    319c:	80 e0       	ldi	r24, 0x00	; 0
    319e:	90 e0       	ldi	r25, 0x00	; 0
    31a0:	a0 e2       	ldi	r26, 0x20	; 32
    31a2:	b1 e4       	ldi	r27, 0x41	; 65
    31a4:	89 8f       	std	Y+25, r24	; 0x19
    31a6:	9a 8f       	std	Y+26, r25	; 0x1a
    31a8:	ab 8f       	std	Y+27, r26	; 0x1b
    31aa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31ac:	69 8d       	ldd	r22, Y+25	; 0x19
    31ae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31b4:	20 e0       	ldi	r18, 0x00	; 0
    31b6:	30 e0       	ldi	r19, 0x00	; 0
    31b8:	4a e7       	ldi	r20, 0x7A	; 122
    31ba:	55 e4       	ldi	r21, 0x45	; 69
    31bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31c0:	dc 01       	movw	r26, r24
    31c2:	cb 01       	movw	r24, r22
    31c4:	8d 8b       	std	Y+21, r24	; 0x15
    31c6:	9e 8b       	std	Y+22, r25	; 0x16
    31c8:	af 8b       	std	Y+23, r26	; 0x17
    31ca:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    31cc:	6d 89       	ldd	r22, Y+21	; 0x15
    31ce:	7e 89       	ldd	r23, Y+22	; 0x16
    31d0:	8f 89       	ldd	r24, Y+23	; 0x17
    31d2:	98 8d       	ldd	r25, Y+24	; 0x18
    31d4:	20 e0       	ldi	r18, 0x00	; 0
    31d6:	30 e0       	ldi	r19, 0x00	; 0
    31d8:	40 e8       	ldi	r20, 0x80	; 128
    31da:	5f e3       	ldi	r21, 0x3F	; 63
    31dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    31e0:	88 23       	and	r24, r24
    31e2:	2c f4       	brge	.+10     	; 0x31ee <LCD_vSendCommand+0x9e>
		__ticks = 1;
    31e4:	81 e0       	ldi	r24, 0x01	; 1
    31e6:	90 e0       	ldi	r25, 0x00	; 0
    31e8:	9c 8b       	std	Y+20, r25	; 0x14
    31ea:	8b 8b       	std	Y+19, r24	; 0x13
    31ec:	3f c0       	rjmp	.+126    	; 0x326c <LCD_vSendCommand+0x11c>
	else if (__tmp > 65535)
    31ee:	6d 89       	ldd	r22, Y+21	; 0x15
    31f0:	7e 89       	ldd	r23, Y+22	; 0x16
    31f2:	8f 89       	ldd	r24, Y+23	; 0x17
    31f4:	98 8d       	ldd	r25, Y+24	; 0x18
    31f6:	20 e0       	ldi	r18, 0x00	; 0
    31f8:	3f ef       	ldi	r19, 0xFF	; 255
    31fa:	4f e7       	ldi	r20, 0x7F	; 127
    31fc:	57 e4       	ldi	r21, 0x47	; 71
    31fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3202:	18 16       	cp	r1, r24
    3204:	4c f5       	brge	.+82     	; 0x3258 <LCD_vSendCommand+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3206:	69 8d       	ldd	r22, Y+25	; 0x19
    3208:	7a 8d       	ldd	r23, Y+26	; 0x1a
    320a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    320c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    320e:	20 e0       	ldi	r18, 0x00	; 0
    3210:	30 e0       	ldi	r19, 0x00	; 0
    3212:	40 e2       	ldi	r20, 0x20	; 32
    3214:	51 e4       	ldi	r21, 0x41	; 65
    3216:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    321a:	dc 01       	movw	r26, r24
    321c:	cb 01       	movw	r24, r22
    321e:	bc 01       	movw	r22, r24
    3220:	cd 01       	movw	r24, r26
    3222:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3226:	dc 01       	movw	r26, r24
    3228:	cb 01       	movw	r24, r22
    322a:	9c 8b       	std	Y+20, r25	; 0x14
    322c:	8b 8b       	std	Y+19, r24	; 0x13
    322e:	0f c0       	rjmp	.+30     	; 0x324e <LCD_vSendCommand+0xfe>
    3230:	80 e9       	ldi	r24, 0x90	; 144
    3232:	91 e0       	ldi	r25, 0x01	; 1
    3234:	9a 8b       	std	Y+18, r25	; 0x12
    3236:	89 8b       	std	Y+17, r24	; 0x11
    3238:	89 89       	ldd	r24, Y+17	; 0x11
    323a:	9a 89       	ldd	r25, Y+18	; 0x12
    323c:	01 97       	sbiw	r24, 0x01	; 1
    323e:	f1 f7       	brne	.-4      	; 0x323c <LCD_vSendCommand+0xec>
    3240:	9a 8b       	std	Y+18, r25	; 0x12
    3242:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3244:	8b 89       	ldd	r24, Y+19	; 0x13
    3246:	9c 89       	ldd	r25, Y+20	; 0x14
    3248:	01 97       	sbiw	r24, 0x01	; 1
    324a:	9c 8b       	std	Y+20, r25	; 0x14
    324c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    324e:	8b 89       	ldd	r24, Y+19	; 0x13
    3250:	9c 89       	ldd	r25, Y+20	; 0x14
    3252:	00 97       	sbiw	r24, 0x00	; 0
    3254:	69 f7       	brne	.-38     	; 0x3230 <LCD_vSendCommand+0xe0>
    3256:	14 c0       	rjmp	.+40     	; 0x3280 <LCD_vSendCommand+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3258:	6d 89       	ldd	r22, Y+21	; 0x15
    325a:	7e 89       	ldd	r23, Y+22	; 0x16
    325c:	8f 89       	ldd	r24, Y+23	; 0x17
    325e:	98 8d       	ldd	r25, Y+24	; 0x18
    3260:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3264:	dc 01       	movw	r26, r24
    3266:	cb 01       	movw	r24, r22
    3268:	9c 8b       	std	Y+20, r25	; 0x14
    326a:	8b 8b       	std	Y+19, r24	; 0x13
    326c:	8b 89       	ldd	r24, Y+19	; 0x13
    326e:	9c 89       	ldd	r25, Y+20	; 0x14
    3270:	98 8b       	std	Y+16, r25	; 0x10
    3272:	8f 87       	std	Y+15, r24	; 0x0f
    3274:	8f 85       	ldd	r24, Y+15	; 0x0f
    3276:	98 89       	ldd	r25, Y+16	; 0x10
    3278:	01 97       	sbiw	r24, 0x01	; 1
    327a:	f1 f7       	brne	.-4      	; 0x3278 <LCD_vSendCommand+0x128>
    327c:	98 8b       	std	Y+16, r25	; 0x10
    327e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	DIO_vSetPinValue(PortB, Pin3, Pin_Low);
    3280:	81 e0       	ldi	r24, 0x01	; 1
    3282:	63 e0       	ldi	r22, 0x03	; 3
    3284:	40 e0       	ldi	r20, 0x00	; 0
    3286:	0e 94 9f 10 	call	0x213e	; 0x213e <DIO_vSetPinValue>
	DIO_vSetPortValue(PortA,(Loc_u8Command<<4));
    328a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    328c:	98 2f       	mov	r25, r24
    328e:	92 95       	swap	r25
    3290:	90 7f       	andi	r25, 0xF0	; 240
    3292:	80 e0       	ldi	r24, 0x00	; 0
    3294:	69 2f       	mov	r22, r25
    3296:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <DIO_vSetPortValue>
	DIO_vSetPinValue(PortB, Pin3, Pin_High);
    329a:	81 e0       	ldi	r24, 0x01	; 1
    329c:	63 e0       	ldi	r22, 0x03	; 3
    329e:	41 e0       	ldi	r20, 0x01	; 1
    32a0:	0e 94 9f 10 	call	0x213e	; 0x213e <DIO_vSetPinValue>
    32a4:	80 e0       	ldi	r24, 0x00	; 0
    32a6:	90 e0       	ldi	r25, 0x00	; 0
    32a8:	a0 e2       	ldi	r26, 0x20	; 32
    32aa:	b1 e4       	ldi	r27, 0x41	; 65
    32ac:	8b 87       	std	Y+11, r24	; 0x0b
    32ae:	9c 87       	std	Y+12, r25	; 0x0c
    32b0:	ad 87       	std	Y+13, r26	; 0x0d
    32b2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    32b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    32b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    32ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    32bc:	20 e0       	ldi	r18, 0x00	; 0
    32be:	30 e0       	ldi	r19, 0x00	; 0
    32c0:	4a e7       	ldi	r20, 0x7A	; 122
    32c2:	55 e4       	ldi	r21, 0x45	; 69
    32c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32c8:	dc 01       	movw	r26, r24
    32ca:	cb 01       	movw	r24, r22
    32cc:	8f 83       	std	Y+7, r24	; 0x07
    32ce:	98 87       	std	Y+8, r25	; 0x08
    32d0:	a9 87       	std	Y+9, r26	; 0x09
    32d2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    32d4:	6f 81       	ldd	r22, Y+7	; 0x07
    32d6:	78 85       	ldd	r23, Y+8	; 0x08
    32d8:	89 85       	ldd	r24, Y+9	; 0x09
    32da:	9a 85       	ldd	r25, Y+10	; 0x0a
    32dc:	20 e0       	ldi	r18, 0x00	; 0
    32de:	30 e0       	ldi	r19, 0x00	; 0
    32e0:	40 e8       	ldi	r20, 0x80	; 128
    32e2:	5f e3       	ldi	r21, 0x3F	; 63
    32e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32e8:	88 23       	and	r24, r24
    32ea:	2c f4       	brge	.+10     	; 0x32f6 <LCD_vSendCommand+0x1a6>
		__ticks = 1;
    32ec:	81 e0       	ldi	r24, 0x01	; 1
    32ee:	90 e0       	ldi	r25, 0x00	; 0
    32f0:	9e 83       	std	Y+6, r25	; 0x06
    32f2:	8d 83       	std	Y+5, r24	; 0x05
    32f4:	3f c0       	rjmp	.+126    	; 0x3374 <LCD_vSendCommand+0x224>
	else if (__tmp > 65535)
    32f6:	6f 81       	ldd	r22, Y+7	; 0x07
    32f8:	78 85       	ldd	r23, Y+8	; 0x08
    32fa:	89 85       	ldd	r24, Y+9	; 0x09
    32fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    32fe:	20 e0       	ldi	r18, 0x00	; 0
    3300:	3f ef       	ldi	r19, 0xFF	; 255
    3302:	4f e7       	ldi	r20, 0x7F	; 127
    3304:	57 e4       	ldi	r21, 0x47	; 71
    3306:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    330a:	18 16       	cp	r1, r24
    330c:	4c f5       	brge	.+82     	; 0x3360 <LCD_vSendCommand+0x210>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    330e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3310:	7c 85       	ldd	r23, Y+12	; 0x0c
    3312:	8d 85       	ldd	r24, Y+13	; 0x0d
    3314:	9e 85       	ldd	r25, Y+14	; 0x0e
    3316:	20 e0       	ldi	r18, 0x00	; 0
    3318:	30 e0       	ldi	r19, 0x00	; 0
    331a:	40 e2       	ldi	r20, 0x20	; 32
    331c:	51 e4       	ldi	r21, 0x41	; 65
    331e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3322:	dc 01       	movw	r26, r24
    3324:	cb 01       	movw	r24, r22
    3326:	bc 01       	movw	r22, r24
    3328:	cd 01       	movw	r24, r26
    332a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    332e:	dc 01       	movw	r26, r24
    3330:	cb 01       	movw	r24, r22
    3332:	9e 83       	std	Y+6, r25	; 0x06
    3334:	8d 83       	std	Y+5, r24	; 0x05
    3336:	0f c0       	rjmp	.+30     	; 0x3356 <LCD_vSendCommand+0x206>
    3338:	80 e9       	ldi	r24, 0x90	; 144
    333a:	91 e0       	ldi	r25, 0x01	; 1
    333c:	9c 83       	std	Y+4, r25	; 0x04
    333e:	8b 83       	std	Y+3, r24	; 0x03
    3340:	8b 81       	ldd	r24, Y+3	; 0x03
    3342:	9c 81       	ldd	r25, Y+4	; 0x04
    3344:	01 97       	sbiw	r24, 0x01	; 1
    3346:	f1 f7       	brne	.-4      	; 0x3344 <LCD_vSendCommand+0x1f4>
    3348:	9c 83       	std	Y+4, r25	; 0x04
    334a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    334c:	8d 81       	ldd	r24, Y+5	; 0x05
    334e:	9e 81       	ldd	r25, Y+6	; 0x06
    3350:	01 97       	sbiw	r24, 0x01	; 1
    3352:	9e 83       	std	Y+6, r25	; 0x06
    3354:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3356:	8d 81       	ldd	r24, Y+5	; 0x05
    3358:	9e 81       	ldd	r25, Y+6	; 0x06
    335a:	00 97       	sbiw	r24, 0x00	; 0
    335c:	69 f7       	brne	.-38     	; 0x3338 <LCD_vSendCommand+0x1e8>
    335e:	14 c0       	rjmp	.+40     	; 0x3388 <LCD_vSendCommand+0x238>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3360:	6f 81       	ldd	r22, Y+7	; 0x07
    3362:	78 85       	ldd	r23, Y+8	; 0x08
    3364:	89 85       	ldd	r24, Y+9	; 0x09
    3366:	9a 85       	ldd	r25, Y+10	; 0x0a
    3368:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    336c:	dc 01       	movw	r26, r24
    336e:	cb 01       	movw	r24, r22
    3370:	9e 83       	std	Y+6, r25	; 0x06
    3372:	8d 83       	std	Y+5, r24	; 0x05
    3374:	8d 81       	ldd	r24, Y+5	; 0x05
    3376:	9e 81       	ldd	r25, Y+6	; 0x06
    3378:	9a 83       	std	Y+2, r25	; 0x02
    337a:	89 83       	std	Y+1, r24	; 0x01
    337c:	89 81       	ldd	r24, Y+1	; 0x01
    337e:	9a 81       	ldd	r25, Y+2	; 0x02
    3380:	01 97       	sbiw	r24, 0x01	; 1
    3382:	f1 f7       	brne	.-4      	; 0x3380 <LCD_vSendCommand+0x230>
    3384:	9a 83       	std	Y+2, r25	; 0x02
    3386:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	DIO_vSetPinValue(PortB, Pin3, Pin_Low);
    3388:	81 e0       	ldi	r24, 0x01	; 1
    338a:	63 e0       	ldi	r22, 0x03	; 3
    338c:	40 e0       	ldi	r20, 0x00	; 0
    338e:	0e 94 9f 10 	call	0x213e	; 0x213e <DIO_vSetPinValue>


}
    3392:	6d 96       	adiw	r28, 0x1d	; 29
    3394:	0f b6       	in	r0, 0x3f	; 63
    3396:	f8 94       	cli
    3398:	de bf       	out	0x3e, r29	; 62
    339a:	0f be       	out	0x3f, r0	; 63
    339c:	cd bf       	out	0x3d, r28	; 61
    339e:	cf 91       	pop	r28
    33a0:	df 91       	pop	r29
    33a2:	08 95       	ret

000033a4 <LCD_vInit>:
void LCD_vInit(){
    33a4:	0f 93       	push	r16
    33a6:	1f 93       	push	r17
    33a8:	df 93       	push	r29
    33aa:	cf 93       	push	r28
    33ac:	cd b7       	in	r28, 0x3d	; 61
    33ae:	de b7       	in	r29, 0x3e	; 62
    33b0:	c6 54       	subi	r28, 0x46	; 70
    33b2:	d0 40       	sbci	r29, 0x00	; 0
    33b4:	0f b6       	in	r0, 0x3f	; 63
    33b6:	f8 94       	cli
    33b8:	de bf       	out	0x3e, r29	; 62
    33ba:	0f be       	out	0x3f, r0	; 63
    33bc:	cd bf       	out	0x3d, r28	; 61
	//------Set used pins as output-----
	DIO_vSetPinDirection(PortB, Pin1, Pin_OutPut);
    33be:	81 e0       	ldi	r24, 0x01	; 1
    33c0:	61 e0       	ldi	r22, 0x01	; 1
    33c2:	41 e0       	ldi	r20, 0x01	; 1
    33c4:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PortB, Pin3, Pin_OutPut);
    33c8:	81 e0       	ldi	r24, 0x01	; 1
    33ca:	63 e0       	ldi	r22, 0x03	; 3
    33cc:	41 e0       	ldi	r20, 0x01	; 1
    33ce:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PortB, Pin2, Pin_OutPut);
    33d2:	81 e0       	ldi	r24, 0x01	; 1
    33d4:	62 e0       	ldi	r22, 0x02	; 2
    33d6:	41 e0       	ldi	r20, 0x01	; 1
    33d8:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PortA, Pin4, Pin_OutPut);
    33dc:	80 e0       	ldi	r24, 0x00	; 0
    33de:	64 e0       	ldi	r22, 0x04	; 4
    33e0:	41 e0       	ldi	r20, 0x01	; 1
    33e2:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PortA, Pin5, Pin_OutPut);
    33e6:	80 e0       	ldi	r24, 0x00	; 0
    33e8:	65 e0       	ldi	r22, 0x05	; 5
    33ea:	41 e0       	ldi	r20, 0x01	; 1
    33ec:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PortA, Pin6, Pin_OutPut);
    33f0:	80 e0       	ldi	r24, 0x00	; 0
    33f2:	66 e0       	ldi	r22, 0x06	; 6
    33f4:	41 e0       	ldi	r20, 0x01	; 1
    33f6:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PortA, Pin7, Pin_OutPut);
    33fa:	80 e0       	ldi	r24, 0x00	; 0
    33fc:	67 e0       	ldi	r22, 0x07	; 7
    33fe:	41 e0       	ldi	r20, 0x01	; 1
    3400:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <DIO_vSetPinDirection>
    3404:	fe 01       	movw	r30, r28
    3406:	ed 5b       	subi	r30, 0xBD	; 189
    3408:	ff 4f       	sbci	r31, 0xFF	; 255
    340a:	80 e0       	ldi	r24, 0x00	; 0
    340c:	90 e0       	ldi	r25, 0x00	; 0
    340e:	a8 e4       	ldi	r26, 0x48	; 72
    3410:	b2 e4       	ldi	r27, 0x42	; 66
    3412:	80 83       	st	Z, r24
    3414:	91 83       	std	Z+1, r25	; 0x01
    3416:	a2 83       	std	Z+2, r26	; 0x02
    3418:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    341a:	8e 01       	movw	r16, r28
    341c:	01 5c       	subi	r16, 0xC1	; 193
    341e:	1f 4f       	sbci	r17, 0xFF	; 255
    3420:	fe 01       	movw	r30, r28
    3422:	ed 5b       	subi	r30, 0xBD	; 189
    3424:	ff 4f       	sbci	r31, 0xFF	; 255
    3426:	60 81       	ld	r22, Z
    3428:	71 81       	ldd	r23, Z+1	; 0x01
    342a:	82 81       	ldd	r24, Z+2	; 0x02
    342c:	93 81       	ldd	r25, Z+3	; 0x03
    342e:	20 e0       	ldi	r18, 0x00	; 0
    3430:	30 e0       	ldi	r19, 0x00	; 0
    3432:	4a e7       	ldi	r20, 0x7A	; 122
    3434:	55 e4       	ldi	r21, 0x45	; 69
    3436:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    343a:	dc 01       	movw	r26, r24
    343c:	cb 01       	movw	r24, r22
    343e:	f8 01       	movw	r30, r16
    3440:	80 83       	st	Z, r24
    3442:	91 83       	std	Z+1, r25	; 0x01
    3444:	a2 83       	std	Z+2, r26	; 0x02
    3446:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3448:	fe 01       	movw	r30, r28
    344a:	ff 96       	adiw	r30, 0x3f	; 63
    344c:	60 81       	ld	r22, Z
    344e:	71 81       	ldd	r23, Z+1	; 0x01
    3450:	82 81       	ldd	r24, Z+2	; 0x02
    3452:	93 81       	ldd	r25, Z+3	; 0x03
    3454:	20 e0       	ldi	r18, 0x00	; 0
    3456:	30 e0       	ldi	r19, 0x00	; 0
    3458:	40 e8       	ldi	r20, 0x80	; 128
    345a:	5f e3       	ldi	r21, 0x3F	; 63
    345c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3460:	88 23       	and	r24, r24
    3462:	2c f4       	brge	.+10     	; 0x346e <LCD_vInit+0xca>
		__ticks = 1;
    3464:	81 e0       	ldi	r24, 0x01	; 1
    3466:	90 e0       	ldi	r25, 0x00	; 0
    3468:	9e af       	std	Y+62, r25	; 0x3e
    346a:	8d af       	std	Y+61, r24	; 0x3d
    346c:	46 c0       	rjmp	.+140    	; 0x34fa <LCD_vInit+0x156>
	else if (__tmp > 65535)
    346e:	fe 01       	movw	r30, r28
    3470:	ff 96       	adiw	r30, 0x3f	; 63
    3472:	60 81       	ld	r22, Z
    3474:	71 81       	ldd	r23, Z+1	; 0x01
    3476:	82 81       	ldd	r24, Z+2	; 0x02
    3478:	93 81       	ldd	r25, Z+3	; 0x03
    347a:	20 e0       	ldi	r18, 0x00	; 0
    347c:	3f ef       	ldi	r19, 0xFF	; 255
    347e:	4f e7       	ldi	r20, 0x7F	; 127
    3480:	57 e4       	ldi	r21, 0x47	; 71
    3482:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3486:	18 16       	cp	r1, r24
    3488:	64 f5       	brge	.+88     	; 0x34e2 <LCD_vInit+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    348a:	fe 01       	movw	r30, r28
    348c:	ed 5b       	subi	r30, 0xBD	; 189
    348e:	ff 4f       	sbci	r31, 0xFF	; 255
    3490:	60 81       	ld	r22, Z
    3492:	71 81       	ldd	r23, Z+1	; 0x01
    3494:	82 81       	ldd	r24, Z+2	; 0x02
    3496:	93 81       	ldd	r25, Z+3	; 0x03
    3498:	20 e0       	ldi	r18, 0x00	; 0
    349a:	30 e0       	ldi	r19, 0x00	; 0
    349c:	40 e2       	ldi	r20, 0x20	; 32
    349e:	51 e4       	ldi	r21, 0x41	; 65
    34a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34a4:	dc 01       	movw	r26, r24
    34a6:	cb 01       	movw	r24, r22
    34a8:	bc 01       	movw	r22, r24
    34aa:	cd 01       	movw	r24, r26
    34ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34b0:	dc 01       	movw	r26, r24
    34b2:	cb 01       	movw	r24, r22
    34b4:	9e af       	std	Y+62, r25	; 0x3e
    34b6:	8d af       	std	Y+61, r24	; 0x3d
    34b8:	0f c0       	rjmp	.+30     	; 0x34d8 <LCD_vInit+0x134>
    34ba:	80 e9       	ldi	r24, 0x90	; 144
    34bc:	91 e0       	ldi	r25, 0x01	; 1
    34be:	9c af       	std	Y+60, r25	; 0x3c
    34c0:	8b af       	std	Y+59, r24	; 0x3b
    34c2:	8b ad       	ldd	r24, Y+59	; 0x3b
    34c4:	9c ad       	ldd	r25, Y+60	; 0x3c
    34c6:	01 97       	sbiw	r24, 0x01	; 1
    34c8:	f1 f7       	brne	.-4      	; 0x34c6 <LCD_vInit+0x122>
    34ca:	9c af       	std	Y+60, r25	; 0x3c
    34cc:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34ce:	8d ad       	ldd	r24, Y+61	; 0x3d
    34d0:	9e ad       	ldd	r25, Y+62	; 0x3e
    34d2:	01 97       	sbiw	r24, 0x01	; 1
    34d4:	9e af       	std	Y+62, r25	; 0x3e
    34d6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34d8:	8d ad       	ldd	r24, Y+61	; 0x3d
    34da:	9e ad       	ldd	r25, Y+62	; 0x3e
    34dc:	00 97       	sbiw	r24, 0x00	; 0
    34de:	69 f7       	brne	.-38     	; 0x34ba <LCD_vInit+0x116>
    34e0:	16 c0       	rjmp	.+44     	; 0x350e <LCD_vInit+0x16a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34e2:	fe 01       	movw	r30, r28
    34e4:	ff 96       	adiw	r30, 0x3f	; 63
    34e6:	60 81       	ld	r22, Z
    34e8:	71 81       	ldd	r23, Z+1	; 0x01
    34ea:	82 81       	ldd	r24, Z+2	; 0x02
    34ec:	93 81       	ldd	r25, Z+3	; 0x03
    34ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34f2:	dc 01       	movw	r26, r24
    34f4:	cb 01       	movw	r24, r22
    34f6:	9e af       	std	Y+62, r25	; 0x3e
    34f8:	8d af       	std	Y+61, r24	; 0x3d
    34fa:	8d ad       	ldd	r24, Y+61	; 0x3d
    34fc:	9e ad       	ldd	r25, Y+62	; 0x3e
    34fe:	9a af       	std	Y+58, r25	; 0x3a
    3500:	89 af       	std	Y+57, r24	; 0x39
    3502:	89 ad       	ldd	r24, Y+57	; 0x39
    3504:	9a ad       	ldd	r25, Y+58	; 0x3a
    3506:	01 97       	sbiw	r24, 0x01	; 1
    3508:	f1 f7       	brne	.-4      	; 0x3506 <LCD_vInit+0x162>
    350a:	9a af       	std	Y+58, r25	; 0x3a
    350c:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(50);
	LCD_vSendCommand(FunctionSet);
    350e:	88 e2       	ldi	r24, 0x28	; 40
    3510:	0e 94 a8 18 	call	0x3150	; 0x3150 <LCD_vSendCommand>
    3514:	80 e0       	ldi	r24, 0x00	; 0
    3516:	90 e0       	ldi	r25, 0x00	; 0
    3518:	a0 e0       	ldi	r26, 0x00	; 0
    351a:	b0 e4       	ldi	r27, 0x40	; 64
    351c:	8d ab       	std	Y+53, r24	; 0x35
    351e:	9e ab       	std	Y+54, r25	; 0x36
    3520:	af ab       	std	Y+55, r26	; 0x37
    3522:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3524:	6d a9       	ldd	r22, Y+53	; 0x35
    3526:	7e a9       	ldd	r23, Y+54	; 0x36
    3528:	8f a9       	ldd	r24, Y+55	; 0x37
    352a:	98 ad       	ldd	r25, Y+56	; 0x38
    352c:	20 e0       	ldi	r18, 0x00	; 0
    352e:	30 e0       	ldi	r19, 0x00	; 0
    3530:	4a e7       	ldi	r20, 0x7A	; 122
    3532:	55 e4       	ldi	r21, 0x45	; 69
    3534:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3538:	dc 01       	movw	r26, r24
    353a:	cb 01       	movw	r24, r22
    353c:	89 ab       	std	Y+49, r24	; 0x31
    353e:	9a ab       	std	Y+50, r25	; 0x32
    3540:	ab ab       	std	Y+51, r26	; 0x33
    3542:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3544:	69 a9       	ldd	r22, Y+49	; 0x31
    3546:	7a a9       	ldd	r23, Y+50	; 0x32
    3548:	8b a9       	ldd	r24, Y+51	; 0x33
    354a:	9c a9       	ldd	r25, Y+52	; 0x34
    354c:	20 e0       	ldi	r18, 0x00	; 0
    354e:	30 e0       	ldi	r19, 0x00	; 0
    3550:	40 e8       	ldi	r20, 0x80	; 128
    3552:	5f e3       	ldi	r21, 0x3F	; 63
    3554:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3558:	88 23       	and	r24, r24
    355a:	2c f4       	brge	.+10     	; 0x3566 <LCD_vInit+0x1c2>
		__ticks = 1;
    355c:	81 e0       	ldi	r24, 0x01	; 1
    355e:	90 e0       	ldi	r25, 0x00	; 0
    3560:	98 ab       	std	Y+48, r25	; 0x30
    3562:	8f a7       	std	Y+47, r24	; 0x2f
    3564:	3f c0       	rjmp	.+126    	; 0x35e4 <LCD_vInit+0x240>
	else if (__tmp > 65535)
    3566:	69 a9       	ldd	r22, Y+49	; 0x31
    3568:	7a a9       	ldd	r23, Y+50	; 0x32
    356a:	8b a9       	ldd	r24, Y+51	; 0x33
    356c:	9c a9       	ldd	r25, Y+52	; 0x34
    356e:	20 e0       	ldi	r18, 0x00	; 0
    3570:	3f ef       	ldi	r19, 0xFF	; 255
    3572:	4f e7       	ldi	r20, 0x7F	; 127
    3574:	57 e4       	ldi	r21, 0x47	; 71
    3576:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    357a:	18 16       	cp	r1, r24
    357c:	4c f5       	brge	.+82     	; 0x35d0 <LCD_vInit+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    357e:	6d a9       	ldd	r22, Y+53	; 0x35
    3580:	7e a9       	ldd	r23, Y+54	; 0x36
    3582:	8f a9       	ldd	r24, Y+55	; 0x37
    3584:	98 ad       	ldd	r25, Y+56	; 0x38
    3586:	20 e0       	ldi	r18, 0x00	; 0
    3588:	30 e0       	ldi	r19, 0x00	; 0
    358a:	40 e2       	ldi	r20, 0x20	; 32
    358c:	51 e4       	ldi	r21, 0x41	; 65
    358e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3592:	dc 01       	movw	r26, r24
    3594:	cb 01       	movw	r24, r22
    3596:	bc 01       	movw	r22, r24
    3598:	cd 01       	movw	r24, r26
    359a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    359e:	dc 01       	movw	r26, r24
    35a0:	cb 01       	movw	r24, r22
    35a2:	98 ab       	std	Y+48, r25	; 0x30
    35a4:	8f a7       	std	Y+47, r24	; 0x2f
    35a6:	0f c0       	rjmp	.+30     	; 0x35c6 <LCD_vInit+0x222>
    35a8:	80 e9       	ldi	r24, 0x90	; 144
    35aa:	91 e0       	ldi	r25, 0x01	; 1
    35ac:	9e a7       	std	Y+46, r25	; 0x2e
    35ae:	8d a7       	std	Y+45, r24	; 0x2d
    35b0:	8d a5       	ldd	r24, Y+45	; 0x2d
    35b2:	9e a5       	ldd	r25, Y+46	; 0x2e
    35b4:	01 97       	sbiw	r24, 0x01	; 1
    35b6:	f1 f7       	brne	.-4      	; 0x35b4 <LCD_vInit+0x210>
    35b8:	9e a7       	std	Y+46, r25	; 0x2e
    35ba:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    35be:	98 a9       	ldd	r25, Y+48	; 0x30
    35c0:	01 97       	sbiw	r24, 0x01	; 1
    35c2:	98 ab       	std	Y+48, r25	; 0x30
    35c4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35c6:	8f a5       	ldd	r24, Y+47	; 0x2f
    35c8:	98 a9       	ldd	r25, Y+48	; 0x30
    35ca:	00 97       	sbiw	r24, 0x00	; 0
    35cc:	69 f7       	brne	.-38     	; 0x35a8 <LCD_vInit+0x204>
    35ce:	14 c0       	rjmp	.+40     	; 0x35f8 <LCD_vInit+0x254>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35d0:	69 a9       	ldd	r22, Y+49	; 0x31
    35d2:	7a a9       	ldd	r23, Y+50	; 0x32
    35d4:	8b a9       	ldd	r24, Y+51	; 0x33
    35d6:	9c a9       	ldd	r25, Y+52	; 0x34
    35d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35dc:	dc 01       	movw	r26, r24
    35de:	cb 01       	movw	r24, r22
    35e0:	98 ab       	std	Y+48, r25	; 0x30
    35e2:	8f a7       	std	Y+47, r24	; 0x2f
    35e4:	8f a5       	ldd	r24, Y+47	; 0x2f
    35e6:	98 a9       	ldd	r25, Y+48	; 0x30
    35e8:	9c a7       	std	Y+44, r25	; 0x2c
    35ea:	8b a7       	std	Y+43, r24	; 0x2b
    35ec:	8b a5       	ldd	r24, Y+43	; 0x2b
    35ee:	9c a5       	ldd	r25, Y+44	; 0x2c
    35f0:	01 97       	sbiw	r24, 0x01	; 1
    35f2:	f1 f7       	brne	.-4      	; 0x35f0 <LCD_vInit+0x24c>
    35f4:	9c a7       	std	Y+44, r25	; 0x2c
    35f6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	LCD_vSendCommand(DisplayOnControl);
    35f8:	8e e0       	ldi	r24, 0x0E	; 14
    35fa:	0e 94 a8 18 	call	0x3150	; 0x3150 <LCD_vSendCommand>
    35fe:	80 e0       	ldi	r24, 0x00	; 0
    3600:	90 e0       	ldi	r25, 0x00	; 0
    3602:	a0 e0       	ldi	r26, 0x00	; 0
    3604:	b0 e4       	ldi	r27, 0x40	; 64
    3606:	8f a3       	std	Y+39, r24	; 0x27
    3608:	98 a7       	std	Y+40, r25	; 0x28
    360a:	a9 a7       	std	Y+41, r26	; 0x29
    360c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    360e:	6f a1       	ldd	r22, Y+39	; 0x27
    3610:	78 a5       	ldd	r23, Y+40	; 0x28
    3612:	89 a5       	ldd	r24, Y+41	; 0x29
    3614:	9a a5       	ldd	r25, Y+42	; 0x2a
    3616:	20 e0       	ldi	r18, 0x00	; 0
    3618:	30 e0       	ldi	r19, 0x00	; 0
    361a:	4a e7       	ldi	r20, 0x7A	; 122
    361c:	55 e4       	ldi	r21, 0x45	; 69
    361e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3622:	dc 01       	movw	r26, r24
    3624:	cb 01       	movw	r24, r22
    3626:	8b a3       	std	Y+35, r24	; 0x23
    3628:	9c a3       	std	Y+36, r25	; 0x24
    362a:	ad a3       	std	Y+37, r26	; 0x25
    362c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    362e:	6b a1       	ldd	r22, Y+35	; 0x23
    3630:	7c a1       	ldd	r23, Y+36	; 0x24
    3632:	8d a1       	ldd	r24, Y+37	; 0x25
    3634:	9e a1       	ldd	r25, Y+38	; 0x26
    3636:	20 e0       	ldi	r18, 0x00	; 0
    3638:	30 e0       	ldi	r19, 0x00	; 0
    363a:	40 e8       	ldi	r20, 0x80	; 128
    363c:	5f e3       	ldi	r21, 0x3F	; 63
    363e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3642:	88 23       	and	r24, r24
    3644:	2c f4       	brge	.+10     	; 0x3650 <LCD_vInit+0x2ac>
		__ticks = 1;
    3646:	81 e0       	ldi	r24, 0x01	; 1
    3648:	90 e0       	ldi	r25, 0x00	; 0
    364a:	9a a3       	std	Y+34, r25	; 0x22
    364c:	89 a3       	std	Y+33, r24	; 0x21
    364e:	3f c0       	rjmp	.+126    	; 0x36ce <LCD_vInit+0x32a>
	else if (__tmp > 65535)
    3650:	6b a1       	ldd	r22, Y+35	; 0x23
    3652:	7c a1       	ldd	r23, Y+36	; 0x24
    3654:	8d a1       	ldd	r24, Y+37	; 0x25
    3656:	9e a1       	ldd	r25, Y+38	; 0x26
    3658:	20 e0       	ldi	r18, 0x00	; 0
    365a:	3f ef       	ldi	r19, 0xFF	; 255
    365c:	4f e7       	ldi	r20, 0x7F	; 127
    365e:	57 e4       	ldi	r21, 0x47	; 71
    3660:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3664:	18 16       	cp	r1, r24
    3666:	4c f5       	brge	.+82     	; 0x36ba <LCD_vInit+0x316>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3668:	6f a1       	ldd	r22, Y+39	; 0x27
    366a:	78 a5       	ldd	r23, Y+40	; 0x28
    366c:	89 a5       	ldd	r24, Y+41	; 0x29
    366e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3670:	20 e0       	ldi	r18, 0x00	; 0
    3672:	30 e0       	ldi	r19, 0x00	; 0
    3674:	40 e2       	ldi	r20, 0x20	; 32
    3676:	51 e4       	ldi	r21, 0x41	; 65
    3678:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    367c:	dc 01       	movw	r26, r24
    367e:	cb 01       	movw	r24, r22
    3680:	bc 01       	movw	r22, r24
    3682:	cd 01       	movw	r24, r26
    3684:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3688:	dc 01       	movw	r26, r24
    368a:	cb 01       	movw	r24, r22
    368c:	9a a3       	std	Y+34, r25	; 0x22
    368e:	89 a3       	std	Y+33, r24	; 0x21
    3690:	0f c0       	rjmp	.+30     	; 0x36b0 <LCD_vInit+0x30c>
    3692:	80 e9       	ldi	r24, 0x90	; 144
    3694:	91 e0       	ldi	r25, 0x01	; 1
    3696:	98 a3       	std	Y+32, r25	; 0x20
    3698:	8f 8f       	std	Y+31, r24	; 0x1f
    369a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    369c:	98 a1       	ldd	r25, Y+32	; 0x20
    369e:	01 97       	sbiw	r24, 0x01	; 1
    36a0:	f1 f7       	brne	.-4      	; 0x369e <LCD_vInit+0x2fa>
    36a2:	98 a3       	std	Y+32, r25	; 0x20
    36a4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36a6:	89 a1       	ldd	r24, Y+33	; 0x21
    36a8:	9a a1       	ldd	r25, Y+34	; 0x22
    36aa:	01 97       	sbiw	r24, 0x01	; 1
    36ac:	9a a3       	std	Y+34, r25	; 0x22
    36ae:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36b0:	89 a1       	ldd	r24, Y+33	; 0x21
    36b2:	9a a1       	ldd	r25, Y+34	; 0x22
    36b4:	00 97       	sbiw	r24, 0x00	; 0
    36b6:	69 f7       	brne	.-38     	; 0x3692 <LCD_vInit+0x2ee>
    36b8:	14 c0       	rjmp	.+40     	; 0x36e2 <LCD_vInit+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36ba:	6b a1       	ldd	r22, Y+35	; 0x23
    36bc:	7c a1       	ldd	r23, Y+36	; 0x24
    36be:	8d a1       	ldd	r24, Y+37	; 0x25
    36c0:	9e a1       	ldd	r25, Y+38	; 0x26
    36c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36c6:	dc 01       	movw	r26, r24
    36c8:	cb 01       	movw	r24, r22
    36ca:	9a a3       	std	Y+34, r25	; 0x22
    36cc:	89 a3       	std	Y+33, r24	; 0x21
    36ce:	89 a1       	ldd	r24, Y+33	; 0x21
    36d0:	9a a1       	ldd	r25, Y+34	; 0x22
    36d2:	9e 8f       	std	Y+30, r25	; 0x1e
    36d4:	8d 8f       	std	Y+29, r24	; 0x1d
    36d6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    36d8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    36da:	01 97       	sbiw	r24, 0x01	; 1
    36dc:	f1 f7       	brne	.-4      	; 0x36da <LCD_vInit+0x336>
    36de:	9e 8f       	std	Y+30, r25	; 0x1e
    36e0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	LCD_vSendCommand(DisplayClear);
    36e2:	81 e0       	ldi	r24, 0x01	; 1
    36e4:	0e 94 a8 18 	call	0x3150	; 0x3150 <LCD_vSendCommand>
    36e8:	80 e0       	ldi	r24, 0x00	; 0
    36ea:	90 e0       	ldi	r25, 0x00	; 0
    36ec:	a0 e0       	ldi	r26, 0x00	; 0
    36ee:	b0 e4       	ldi	r27, 0x40	; 64
    36f0:	89 8f       	std	Y+25, r24	; 0x19
    36f2:	9a 8f       	std	Y+26, r25	; 0x1a
    36f4:	ab 8f       	std	Y+27, r26	; 0x1b
    36f6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36f8:	69 8d       	ldd	r22, Y+25	; 0x19
    36fa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    36fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    36fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3700:	20 e0       	ldi	r18, 0x00	; 0
    3702:	30 e0       	ldi	r19, 0x00	; 0
    3704:	4a e7       	ldi	r20, 0x7A	; 122
    3706:	55 e4       	ldi	r21, 0x45	; 69
    3708:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    370c:	dc 01       	movw	r26, r24
    370e:	cb 01       	movw	r24, r22
    3710:	8d 8b       	std	Y+21, r24	; 0x15
    3712:	9e 8b       	std	Y+22, r25	; 0x16
    3714:	af 8b       	std	Y+23, r26	; 0x17
    3716:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3718:	6d 89       	ldd	r22, Y+21	; 0x15
    371a:	7e 89       	ldd	r23, Y+22	; 0x16
    371c:	8f 89       	ldd	r24, Y+23	; 0x17
    371e:	98 8d       	ldd	r25, Y+24	; 0x18
    3720:	20 e0       	ldi	r18, 0x00	; 0
    3722:	30 e0       	ldi	r19, 0x00	; 0
    3724:	40 e8       	ldi	r20, 0x80	; 128
    3726:	5f e3       	ldi	r21, 0x3F	; 63
    3728:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    372c:	88 23       	and	r24, r24
    372e:	2c f4       	brge	.+10     	; 0x373a <LCD_vInit+0x396>
		__ticks = 1;
    3730:	81 e0       	ldi	r24, 0x01	; 1
    3732:	90 e0       	ldi	r25, 0x00	; 0
    3734:	9c 8b       	std	Y+20, r25	; 0x14
    3736:	8b 8b       	std	Y+19, r24	; 0x13
    3738:	3f c0       	rjmp	.+126    	; 0x37b8 <LCD_vInit+0x414>
	else if (__tmp > 65535)
    373a:	6d 89       	ldd	r22, Y+21	; 0x15
    373c:	7e 89       	ldd	r23, Y+22	; 0x16
    373e:	8f 89       	ldd	r24, Y+23	; 0x17
    3740:	98 8d       	ldd	r25, Y+24	; 0x18
    3742:	20 e0       	ldi	r18, 0x00	; 0
    3744:	3f ef       	ldi	r19, 0xFF	; 255
    3746:	4f e7       	ldi	r20, 0x7F	; 127
    3748:	57 e4       	ldi	r21, 0x47	; 71
    374a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    374e:	18 16       	cp	r1, r24
    3750:	4c f5       	brge	.+82     	; 0x37a4 <LCD_vInit+0x400>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3752:	69 8d       	ldd	r22, Y+25	; 0x19
    3754:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3756:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3758:	9c 8d       	ldd	r25, Y+28	; 0x1c
    375a:	20 e0       	ldi	r18, 0x00	; 0
    375c:	30 e0       	ldi	r19, 0x00	; 0
    375e:	40 e2       	ldi	r20, 0x20	; 32
    3760:	51 e4       	ldi	r21, 0x41	; 65
    3762:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3766:	dc 01       	movw	r26, r24
    3768:	cb 01       	movw	r24, r22
    376a:	bc 01       	movw	r22, r24
    376c:	cd 01       	movw	r24, r26
    376e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3772:	dc 01       	movw	r26, r24
    3774:	cb 01       	movw	r24, r22
    3776:	9c 8b       	std	Y+20, r25	; 0x14
    3778:	8b 8b       	std	Y+19, r24	; 0x13
    377a:	0f c0       	rjmp	.+30     	; 0x379a <LCD_vInit+0x3f6>
    377c:	80 e9       	ldi	r24, 0x90	; 144
    377e:	91 e0       	ldi	r25, 0x01	; 1
    3780:	9a 8b       	std	Y+18, r25	; 0x12
    3782:	89 8b       	std	Y+17, r24	; 0x11
    3784:	89 89       	ldd	r24, Y+17	; 0x11
    3786:	9a 89       	ldd	r25, Y+18	; 0x12
    3788:	01 97       	sbiw	r24, 0x01	; 1
    378a:	f1 f7       	brne	.-4      	; 0x3788 <LCD_vInit+0x3e4>
    378c:	9a 8b       	std	Y+18, r25	; 0x12
    378e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3790:	8b 89       	ldd	r24, Y+19	; 0x13
    3792:	9c 89       	ldd	r25, Y+20	; 0x14
    3794:	01 97       	sbiw	r24, 0x01	; 1
    3796:	9c 8b       	std	Y+20, r25	; 0x14
    3798:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    379a:	8b 89       	ldd	r24, Y+19	; 0x13
    379c:	9c 89       	ldd	r25, Y+20	; 0x14
    379e:	00 97       	sbiw	r24, 0x00	; 0
    37a0:	69 f7       	brne	.-38     	; 0x377c <LCD_vInit+0x3d8>
    37a2:	14 c0       	rjmp	.+40     	; 0x37cc <LCD_vInit+0x428>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37a4:	6d 89       	ldd	r22, Y+21	; 0x15
    37a6:	7e 89       	ldd	r23, Y+22	; 0x16
    37a8:	8f 89       	ldd	r24, Y+23	; 0x17
    37aa:	98 8d       	ldd	r25, Y+24	; 0x18
    37ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37b0:	dc 01       	movw	r26, r24
    37b2:	cb 01       	movw	r24, r22
    37b4:	9c 8b       	std	Y+20, r25	; 0x14
    37b6:	8b 8b       	std	Y+19, r24	; 0x13
    37b8:	8b 89       	ldd	r24, Y+19	; 0x13
    37ba:	9c 89       	ldd	r25, Y+20	; 0x14
    37bc:	98 8b       	std	Y+16, r25	; 0x10
    37be:	8f 87       	std	Y+15, r24	; 0x0f
    37c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    37c2:	98 89       	ldd	r25, Y+16	; 0x10
    37c4:	01 97       	sbiw	r24, 0x01	; 1
    37c6:	f1 f7       	brne	.-4      	; 0x37c4 <LCD_vInit+0x420>
    37c8:	98 8b       	std	Y+16, r25	; 0x10
    37ca:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	LCD_vSendCommand(EnrtyMode);
    37cc:	86 e0       	ldi	r24, 0x06	; 6
    37ce:	0e 94 a8 18 	call	0x3150	; 0x3150 <LCD_vSendCommand>
    37d2:	80 e0       	ldi	r24, 0x00	; 0
    37d4:	90 e0       	ldi	r25, 0x00	; 0
    37d6:	a0 e0       	ldi	r26, 0x00	; 0
    37d8:	b0 e4       	ldi	r27, 0x40	; 64
    37da:	8b 87       	std	Y+11, r24	; 0x0b
    37dc:	9c 87       	std	Y+12, r25	; 0x0c
    37de:	ad 87       	std	Y+13, r26	; 0x0d
    37e0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    37e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    37e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    37e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    37ea:	20 e0       	ldi	r18, 0x00	; 0
    37ec:	30 e0       	ldi	r19, 0x00	; 0
    37ee:	4a e7       	ldi	r20, 0x7A	; 122
    37f0:	55 e4       	ldi	r21, 0x45	; 69
    37f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37f6:	dc 01       	movw	r26, r24
    37f8:	cb 01       	movw	r24, r22
    37fa:	8f 83       	std	Y+7, r24	; 0x07
    37fc:	98 87       	std	Y+8, r25	; 0x08
    37fe:	a9 87       	std	Y+9, r26	; 0x09
    3800:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3802:	6f 81       	ldd	r22, Y+7	; 0x07
    3804:	78 85       	ldd	r23, Y+8	; 0x08
    3806:	89 85       	ldd	r24, Y+9	; 0x09
    3808:	9a 85       	ldd	r25, Y+10	; 0x0a
    380a:	20 e0       	ldi	r18, 0x00	; 0
    380c:	30 e0       	ldi	r19, 0x00	; 0
    380e:	40 e8       	ldi	r20, 0x80	; 128
    3810:	5f e3       	ldi	r21, 0x3F	; 63
    3812:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3816:	88 23       	and	r24, r24
    3818:	2c f4       	brge	.+10     	; 0x3824 <LCD_vInit+0x480>
		__ticks = 1;
    381a:	81 e0       	ldi	r24, 0x01	; 1
    381c:	90 e0       	ldi	r25, 0x00	; 0
    381e:	9e 83       	std	Y+6, r25	; 0x06
    3820:	8d 83       	std	Y+5, r24	; 0x05
    3822:	3f c0       	rjmp	.+126    	; 0x38a2 <LCD_vInit+0x4fe>
	else if (__tmp > 65535)
    3824:	6f 81       	ldd	r22, Y+7	; 0x07
    3826:	78 85       	ldd	r23, Y+8	; 0x08
    3828:	89 85       	ldd	r24, Y+9	; 0x09
    382a:	9a 85       	ldd	r25, Y+10	; 0x0a
    382c:	20 e0       	ldi	r18, 0x00	; 0
    382e:	3f ef       	ldi	r19, 0xFF	; 255
    3830:	4f e7       	ldi	r20, 0x7F	; 127
    3832:	57 e4       	ldi	r21, 0x47	; 71
    3834:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3838:	18 16       	cp	r1, r24
    383a:	4c f5       	brge	.+82     	; 0x388e <LCD_vInit+0x4ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    383c:	6b 85       	ldd	r22, Y+11	; 0x0b
    383e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3840:	8d 85       	ldd	r24, Y+13	; 0x0d
    3842:	9e 85       	ldd	r25, Y+14	; 0x0e
    3844:	20 e0       	ldi	r18, 0x00	; 0
    3846:	30 e0       	ldi	r19, 0x00	; 0
    3848:	40 e2       	ldi	r20, 0x20	; 32
    384a:	51 e4       	ldi	r21, 0x41	; 65
    384c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3850:	dc 01       	movw	r26, r24
    3852:	cb 01       	movw	r24, r22
    3854:	bc 01       	movw	r22, r24
    3856:	cd 01       	movw	r24, r26
    3858:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    385c:	dc 01       	movw	r26, r24
    385e:	cb 01       	movw	r24, r22
    3860:	9e 83       	std	Y+6, r25	; 0x06
    3862:	8d 83       	std	Y+5, r24	; 0x05
    3864:	0f c0       	rjmp	.+30     	; 0x3884 <LCD_vInit+0x4e0>
    3866:	80 e9       	ldi	r24, 0x90	; 144
    3868:	91 e0       	ldi	r25, 0x01	; 1
    386a:	9c 83       	std	Y+4, r25	; 0x04
    386c:	8b 83       	std	Y+3, r24	; 0x03
    386e:	8b 81       	ldd	r24, Y+3	; 0x03
    3870:	9c 81       	ldd	r25, Y+4	; 0x04
    3872:	01 97       	sbiw	r24, 0x01	; 1
    3874:	f1 f7       	brne	.-4      	; 0x3872 <LCD_vInit+0x4ce>
    3876:	9c 83       	std	Y+4, r25	; 0x04
    3878:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    387a:	8d 81       	ldd	r24, Y+5	; 0x05
    387c:	9e 81       	ldd	r25, Y+6	; 0x06
    387e:	01 97       	sbiw	r24, 0x01	; 1
    3880:	9e 83       	std	Y+6, r25	; 0x06
    3882:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3884:	8d 81       	ldd	r24, Y+5	; 0x05
    3886:	9e 81       	ldd	r25, Y+6	; 0x06
    3888:	00 97       	sbiw	r24, 0x00	; 0
    388a:	69 f7       	brne	.-38     	; 0x3866 <LCD_vInit+0x4c2>
    388c:	14 c0       	rjmp	.+40     	; 0x38b6 <LCD_vInit+0x512>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    388e:	6f 81       	ldd	r22, Y+7	; 0x07
    3890:	78 85       	ldd	r23, Y+8	; 0x08
    3892:	89 85       	ldd	r24, Y+9	; 0x09
    3894:	9a 85       	ldd	r25, Y+10	; 0x0a
    3896:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    389a:	dc 01       	movw	r26, r24
    389c:	cb 01       	movw	r24, r22
    389e:	9e 83       	std	Y+6, r25	; 0x06
    38a0:	8d 83       	std	Y+5, r24	; 0x05
    38a2:	8d 81       	ldd	r24, Y+5	; 0x05
    38a4:	9e 81       	ldd	r25, Y+6	; 0x06
    38a6:	9a 83       	std	Y+2, r25	; 0x02
    38a8:	89 83       	std	Y+1, r24	; 0x01
    38aa:	89 81       	ldd	r24, Y+1	; 0x01
    38ac:	9a 81       	ldd	r25, Y+2	; 0x02
    38ae:	01 97       	sbiw	r24, 0x01	; 1
    38b0:	f1 f7       	brne	.-4      	; 0x38ae <LCD_vInit+0x50a>
    38b2:	9a 83       	std	Y+2, r25	; 0x02
    38b4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

}
    38b6:	ca 5b       	subi	r28, 0xBA	; 186
    38b8:	df 4f       	sbci	r29, 0xFF	; 255
    38ba:	0f b6       	in	r0, 0x3f	; 63
    38bc:	f8 94       	cli
    38be:	de bf       	out	0x3e, r29	; 62
    38c0:	0f be       	out	0x3f, r0	; 63
    38c2:	cd bf       	out	0x3d, r28	; 61
    38c4:	cf 91       	pop	r28
    38c6:	df 91       	pop	r29
    38c8:	1f 91       	pop	r17
    38ca:	0f 91       	pop	r16
    38cc:	08 95       	ret

000038ce <LCD_vInitWithOutClear>:
void LCD_vInitWithOutClear(){
    38ce:	df 93       	push	r29
    38d0:	cf 93       	push	r28
    38d2:	cd b7       	in	r28, 0x3d	; 61
    38d4:	de b7       	in	r29, 0x3e	; 62
    38d6:	e8 97       	sbiw	r28, 0x38	; 56
    38d8:	0f b6       	in	r0, 0x3f	; 63
    38da:	f8 94       	cli
    38dc:	de bf       	out	0x3e, r29	; 62
    38de:	0f be       	out	0x3f, r0	; 63
    38e0:	cd bf       	out	0x3d, r28	; 61
	DIO_vSetPinDirection(PortB, Pin1, Pin_OutPut);
    38e2:	81 e0       	ldi	r24, 0x01	; 1
    38e4:	61 e0       	ldi	r22, 0x01	; 1
    38e6:	41 e0       	ldi	r20, 0x01	; 1
    38e8:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PortB, Pin3, Pin_OutPut);
    38ec:	81 e0       	ldi	r24, 0x01	; 1
    38ee:	63 e0       	ldi	r22, 0x03	; 3
    38f0:	41 e0       	ldi	r20, 0x01	; 1
    38f2:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PortB, Pin2, Pin_OutPut);
    38f6:	81 e0       	ldi	r24, 0x01	; 1
    38f8:	62 e0       	ldi	r22, 0x02	; 2
    38fa:	41 e0       	ldi	r20, 0x01	; 1
    38fc:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PortA, Pin4, Pin_OutPut);
    3900:	80 e0       	ldi	r24, 0x00	; 0
    3902:	64 e0       	ldi	r22, 0x04	; 4
    3904:	41 e0       	ldi	r20, 0x01	; 1
    3906:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PortA, Pin5, Pin_OutPut);
    390a:	80 e0       	ldi	r24, 0x00	; 0
    390c:	65 e0       	ldi	r22, 0x05	; 5
    390e:	41 e0       	ldi	r20, 0x01	; 1
    3910:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PortA, Pin6, Pin_OutPut);
    3914:	80 e0       	ldi	r24, 0x00	; 0
    3916:	66 e0       	ldi	r22, 0x06	; 6
    3918:	41 e0       	ldi	r20, 0x01	; 1
    391a:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PortA, Pin7, Pin_OutPut);
    391e:	80 e0       	ldi	r24, 0x00	; 0
    3920:	67 e0       	ldi	r22, 0x07	; 7
    3922:	41 e0       	ldi	r20, 0x01	; 1
    3924:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <DIO_vSetPinDirection>
    3928:	80 e0       	ldi	r24, 0x00	; 0
    392a:	90 e0       	ldi	r25, 0x00	; 0
    392c:	a8 e4       	ldi	r26, 0x48	; 72
    392e:	b2 e4       	ldi	r27, 0x42	; 66
    3930:	8d ab       	std	Y+53, r24	; 0x35
    3932:	9e ab       	std	Y+54, r25	; 0x36
    3934:	af ab       	std	Y+55, r26	; 0x37
    3936:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3938:	6d a9       	ldd	r22, Y+53	; 0x35
    393a:	7e a9       	ldd	r23, Y+54	; 0x36
    393c:	8f a9       	ldd	r24, Y+55	; 0x37
    393e:	98 ad       	ldd	r25, Y+56	; 0x38
    3940:	20 e0       	ldi	r18, 0x00	; 0
    3942:	30 e0       	ldi	r19, 0x00	; 0
    3944:	4a e7       	ldi	r20, 0x7A	; 122
    3946:	55 e4       	ldi	r21, 0x45	; 69
    3948:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    394c:	dc 01       	movw	r26, r24
    394e:	cb 01       	movw	r24, r22
    3950:	89 ab       	std	Y+49, r24	; 0x31
    3952:	9a ab       	std	Y+50, r25	; 0x32
    3954:	ab ab       	std	Y+51, r26	; 0x33
    3956:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3958:	69 a9       	ldd	r22, Y+49	; 0x31
    395a:	7a a9       	ldd	r23, Y+50	; 0x32
    395c:	8b a9       	ldd	r24, Y+51	; 0x33
    395e:	9c a9       	ldd	r25, Y+52	; 0x34
    3960:	20 e0       	ldi	r18, 0x00	; 0
    3962:	30 e0       	ldi	r19, 0x00	; 0
    3964:	40 e8       	ldi	r20, 0x80	; 128
    3966:	5f e3       	ldi	r21, 0x3F	; 63
    3968:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    396c:	88 23       	and	r24, r24
    396e:	2c f4       	brge	.+10     	; 0x397a <LCD_vInitWithOutClear+0xac>
		__ticks = 1;
    3970:	81 e0       	ldi	r24, 0x01	; 1
    3972:	90 e0       	ldi	r25, 0x00	; 0
    3974:	98 ab       	std	Y+48, r25	; 0x30
    3976:	8f a7       	std	Y+47, r24	; 0x2f
    3978:	3f c0       	rjmp	.+126    	; 0x39f8 <LCD_vInitWithOutClear+0x12a>
	else if (__tmp > 65535)
    397a:	69 a9       	ldd	r22, Y+49	; 0x31
    397c:	7a a9       	ldd	r23, Y+50	; 0x32
    397e:	8b a9       	ldd	r24, Y+51	; 0x33
    3980:	9c a9       	ldd	r25, Y+52	; 0x34
    3982:	20 e0       	ldi	r18, 0x00	; 0
    3984:	3f ef       	ldi	r19, 0xFF	; 255
    3986:	4f e7       	ldi	r20, 0x7F	; 127
    3988:	57 e4       	ldi	r21, 0x47	; 71
    398a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    398e:	18 16       	cp	r1, r24
    3990:	4c f5       	brge	.+82     	; 0x39e4 <LCD_vInitWithOutClear+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3992:	6d a9       	ldd	r22, Y+53	; 0x35
    3994:	7e a9       	ldd	r23, Y+54	; 0x36
    3996:	8f a9       	ldd	r24, Y+55	; 0x37
    3998:	98 ad       	ldd	r25, Y+56	; 0x38
    399a:	20 e0       	ldi	r18, 0x00	; 0
    399c:	30 e0       	ldi	r19, 0x00	; 0
    399e:	40 e2       	ldi	r20, 0x20	; 32
    39a0:	51 e4       	ldi	r21, 0x41	; 65
    39a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39a6:	dc 01       	movw	r26, r24
    39a8:	cb 01       	movw	r24, r22
    39aa:	bc 01       	movw	r22, r24
    39ac:	cd 01       	movw	r24, r26
    39ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39b2:	dc 01       	movw	r26, r24
    39b4:	cb 01       	movw	r24, r22
    39b6:	98 ab       	std	Y+48, r25	; 0x30
    39b8:	8f a7       	std	Y+47, r24	; 0x2f
    39ba:	0f c0       	rjmp	.+30     	; 0x39da <LCD_vInitWithOutClear+0x10c>
    39bc:	80 e9       	ldi	r24, 0x90	; 144
    39be:	91 e0       	ldi	r25, 0x01	; 1
    39c0:	9e a7       	std	Y+46, r25	; 0x2e
    39c2:	8d a7       	std	Y+45, r24	; 0x2d
    39c4:	8d a5       	ldd	r24, Y+45	; 0x2d
    39c6:	9e a5       	ldd	r25, Y+46	; 0x2e
    39c8:	01 97       	sbiw	r24, 0x01	; 1
    39ca:	f1 f7       	brne	.-4      	; 0x39c8 <LCD_vInitWithOutClear+0xfa>
    39cc:	9e a7       	std	Y+46, r25	; 0x2e
    39ce:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39d0:	8f a5       	ldd	r24, Y+47	; 0x2f
    39d2:	98 a9       	ldd	r25, Y+48	; 0x30
    39d4:	01 97       	sbiw	r24, 0x01	; 1
    39d6:	98 ab       	std	Y+48, r25	; 0x30
    39d8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39da:	8f a5       	ldd	r24, Y+47	; 0x2f
    39dc:	98 a9       	ldd	r25, Y+48	; 0x30
    39de:	00 97       	sbiw	r24, 0x00	; 0
    39e0:	69 f7       	brne	.-38     	; 0x39bc <LCD_vInitWithOutClear+0xee>
    39e2:	14 c0       	rjmp	.+40     	; 0x3a0c <LCD_vInitWithOutClear+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39e4:	69 a9       	ldd	r22, Y+49	; 0x31
    39e6:	7a a9       	ldd	r23, Y+50	; 0x32
    39e8:	8b a9       	ldd	r24, Y+51	; 0x33
    39ea:	9c a9       	ldd	r25, Y+52	; 0x34
    39ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39f0:	dc 01       	movw	r26, r24
    39f2:	cb 01       	movw	r24, r22
    39f4:	98 ab       	std	Y+48, r25	; 0x30
    39f6:	8f a7       	std	Y+47, r24	; 0x2f
    39f8:	8f a5       	ldd	r24, Y+47	; 0x2f
    39fa:	98 a9       	ldd	r25, Y+48	; 0x30
    39fc:	9c a7       	std	Y+44, r25	; 0x2c
    39fe:	8b a7       	std	Y+43, r24	; 0x2b
    3a00:	8b a5       	ldd	r24, Y+43	; 0x2b
    3a02:	9c a5       	ldd	r25, Y+44	; 0x2c
    3a04:	01 97       	sbiw	r24, 0x01	; 1
    3a06:	f1 f7       	brne	.-4      	; 0x3a04 <LCD_vInitWithOutClear+0x136>
    3a08:	9c a7       	std	Y+44, r25	; 0x2c
    3a0a:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(50);
	LCD_vSendCommand(FunctionSet);
    3a0c:	88 e2       	ldi	r24, 0x28	; 40
    3a0e:	0e 94 a8 18 	call	0x3150	; 0x3150 <LCD_vSendCommand>
    3a12:	80 e0       	ldi	r24, 0x00	; 0
    3a14:	90 e0       	ldi	r25, 0x00	; 0
    3a16:	a0 e0       	ldi	r26, 0x00	; 0
    3a18:	b0 e4       	ldi	r27, 0x40	; 64
    3a1a:	8f a3       	std	Y+39, r24	; 0x27
    3a1c:	98 a7       	std	Y+40, r25	; 0x28
    3a1e:	a9 a7       	std	Y+41, r26	; 0x29
    3a20:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a22:	6f a1       	ldd	r22, Y+39	; 0x27
    3a24:	78 a5       	ldd	r23, Y+40	; 0x28
    3a26:	89 a5       	ldd	r24, Y+41	; 0x29
    3a28:	9a a5       	ldd	r25, Y+42	; 0x2a
    3a2a:	20 e0       	ldi	r18, 0x00	; 0
    3a2c:	30 e0       	ldi	r19, 0x00	; 0
    3a2e:	4a e7       	ldi	r20, 0x7A	; 122
    3a30:	55 e4       	ldi	r21, 0x45	; 69
    3a32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a36:	dc 01       	movw	r26, r24
    3a38:	cb 01       	movw	r24, r22
    3a3a:	8b a3       	std	Y+35, r24	; 0x23
    3a3c:	9c a3       	std	Y+36, r25	; 0x24
    3a3e:	ad a3       	std	Y+37, r26	; 0x25
    3a40:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3a42:	6b a1       	ldd	r22, Y+35	; 0x23
    3a44:	7c a1       	ldd	r23, Y+36	; 0x24
    3a46:	8d a1       	ldd	r24, Y+37	; 0x25
    3a48:	9e a1       	ldd	r25, Y+38	; 0x26
    3a4a:	20 e0       	ldi	r18, 0x00	; 0
    3a4c:	30 e0       	ldi	r19, 0x00	; 0
    3a4e:	40 e8       	ldi	r20, 0x80	; 128
    3a50:	5f e3       	ldi	r21, 0x3F	; 63
    3a52:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a56:	88 23       	and	r24, r24
    3a58:	2c f4       	brge	.+10     	; 0x3a64 <LCD_vInitWithOutClear+0x196>
		__ticks = 1;
    3a5a:	81 e0       	ldi	r24, 0x01	; 1
    3a5c:	90 e0       	ldi	r25, 0x00	; 0
    3a5e:	9a a3       	std	Y+34, r25	; 0x22
    3a60:	89 a3       	std	Y+33, r24	; 0x21
    3a62:	3f c0       	rjmp	.+126    	; 0x3ae2 <LCD_vInitWithOutClear+0x214>
	else if (__tmp > 65535)
    3a64:	6b a1       	ldd	r22, Y+35	; 0x23
    3a66:	7c a1       	ldd	r23, Y+36	; 0x24
    3a68:	8d a1       	ldd	r24, Y+37	; 0x25
    3a6a:	9e a1       	ldd	r25, Y+38	; 0x26
    3a6c:	20 e0       	ldi	r18, 0x00	; 0
    3a6e:	3f ef       	ldi	r19, 0xFF	; 255
    3a70:	4f e7       	ldi	r20, 0x7F	; 127
    3a72:	57 e4       	ldi	r21, 0x47	; 71
    3a74:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a78:	18 16       	cp	r1, r24
    3a7a:	4c f5       	brge	.+82     	; 0x3ace <LCD_vInitWithOutClear+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a7c:	6f a1       	ldd	r22, Y+39	; 0x27
    3a7e:	78 a5       	ldd	r23, Y+40	; 0x28
    3a80:	89 a5       	ldd	r24, Y+41	; 0x29
    3a82:	9a a5       	ldd	r25, Y+42	; 0x2a
    3a84:	20 e0       	ldi	r18, 0x00	; 0
    3a86:	30 e0       	ldi	r19, 0x00	; 0
    3a88:	40 e2       	ldi	r20, 0x20	; 32
    3a8a:	51 e4       	ldi	r21, 0x41	; 65
    3a8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a90:	dc 01       	movw	r26, r24
    3a92:	cb 01       	movw	r24, r22
    3a94:	bc 01       	movw	r22, r24
    3a96:	cd 01       	movw	r24, r26
    3a98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a9c:	dc 01       	movw	r26, r24
    3a9e:	cb 01       	movw	r24, r22
    3aa0:	9a a3       	std	Y+34, r25	; 0x22
    3aa2:	89 a3       	std	Y+33, r24	; 0x21
    3aa4:	0f c0       	rjmp	.+30     	; 0x3ac4 <LCD_vInitWithOutClear+0x1f6>
    3aa6:	80 e9       	ldi	r24, 0x90	; 144
    3aa8:	91 e0       	ldi	r25, 0x01	; 1
    3aaa:	98 a3       	std	Y+32, r25	; 0x20
    3aac:	8f 8f       	std	Y+31, r24	; 0x1f
    3aae:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3ab0:	98 a1       	ldd	r25, Y+32	; 0x20
    3ab2:	01 97       	sbiw	r24, 0x01	; 1
    3ab4:	f1 f7       	brne	.-4      	; 0x3ab2 <LCD_vInitWithOutClear+0x1e4>
    3ab6:	98 a3       	std	Y+32, r25	; 0x20
    3ab8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3aba:	89 a1       	ldd	r24, Y+33	; 0x21
    3abc:	9a a1       	ldd	r25, Y+34	; 0x22
    3abe:	01 97       	sbiw	r24, 0x01	; 1
    3ac0:	9a a3       	std	Y+34, r25	; 0x22
    3ac2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ac4:	89 a1       	ldd	r24, Y+33	; 0x21
    3ac6:	9a a1       	ldd	r25, Y+34	; 0x22
    3ac8:	00 97       	sbiw	r24, 0x00	; 0
    3aca:	69 f7       	brne	.-38     	; 0x3aa6 <LCD_vInitWithOutClear+0x1d8>
    3acc:	14 c0       	rjmp	.+40     	; 0x3af6 <LCD_vInitWithOutClear+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ace:	6b a1       	ldd	r22, Y+35	; 0x23
    3ad0:	7c a1       	ldd	r23, Y+36	; 0x24
    3ad2:	8d a1       	ldd	r24, Y+37	; 0x25
    3ad4:	9e a1       	ldd	r25, Y+38	; 0x26
    3ad6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ada:	dc 01       	movw	r26, r24
    3adc:	cb 01       	movw	r24, r22
    3ade:	9a a3       	std	Y+34, r25	; 0x22
    3ae0:	89 a3       	std	Y+33, r24	; 0x21
    3ae2:	89 a1       	ldd	r24, Y+33	; 0x21
    3ae4:	9a a1       	ldd	r25, Y+34	; 0x22
    3ae6:	9e 8f       	std	Y+30, r25	; 0x1e
    3ae8:	8d 8f       	std	Y+29, r24	; 0x1d
    3aea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3aec:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3aee:	01 97       	sbiw	r24, 0x01	; 1
    3af0:	f1 f7       	brne	.-4      	; 0x3aee <LCD_vInitWithOutClear+0x220>
    3af2:	9e 8f       	std	Y+30, r25	; 0x1e
    3af4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	LCD_vSendCommand(DisplayOnControl);
    3af6:	8e e0       	ldi	r24, 0x0E	; 14
    3af8:	0e 94 a8 18 	call	0x3150	; 0x3150 <LCD_vSendCommand>
    3afc:	80 e0       	ldi	r24, 0x00	; 0
    3afe:	90 e0       	ldi	r25, 0x00	; 0
    3b00:	a0 e0       	ldi	r26, 0x00	; 0
    3b02:	b0 e4       	ldi	r27, 0x40	; 64
    3b04:	89 8f       	std	Y+25, r24	; 0x19
    3b06:	9a 8f       	std	Y+26, r25	; 0x1a
    3b08:	ab 8f       	std	Y+27, r26	; 0x1b
    3b0a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b0c:	69 8d       	ldd	r22, Y+25	; 0x19
    3b0e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b10:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b12:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b14:	20 e0       	ldi	r18, 0x00	; 0
    3b16:	30 e0       	ldi	r19, 0x00	; 0
    3b18:	4a e7       	ldi	r20, 0x7A	; 122
    3b1a:	55 e4       	ldi	r21, 0x45	; 69
    3b1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b20:	dc 01       	movw	r26, r24
    3b22:	cb 01       	movw	r24, r22
    3b24:	8d 8b       	std	Y+21, r24	; 0x15
    3b26:	9e 8b       	std	Y+22, r25	; 0x16
    3b28:	af 8b       	std	Y+23, r26	; 0x17
    3b2a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3b2c:	6d 89       	ldd	r22, Y+21	; 0x15
    3b2e:	7e 89       	ldd	r23, Y+22	; 0x16
    3b30:	8f 89       	ldd	r24, Y+23	; 0x17
    3b32:	98 8d       	ldd	r25, Y+24	; 0x18
    3b34:	20 e0       	ldi	r18, 0x00	; 0
    3b36:	30 e0       	ldi	r19, 0x00	; 0
    3b38:	40 e8       	ldi	r20, 0x80	; 128
    3b3a:	5f e3       	ldi	r21, 0x3F	; 63
    3b3c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3b40:	88 23       	and	r24, r24
    3b42:	2c f4       	brge	.+10     	; 0x3b4e <LCD_vInitWithOutClear+0x280>
		__ticks = 1;
    3b44:	81 e0       	ldi	r24, 0x01	; 1
    3b46:	90 e0       	ldi	r25, 0x00	; 0
    3b48:	9c 8b       	std	Y+20, r25	; 0x14
    3b4a:	8b 8b       	std	Y+19, r24	; 0x13
    3b4c:	3f c0       	rjmp	.+126    	; 0x3bcc <LCD_vInitWithOutClear+0x2fe>
	else if (__tmp > 65535)
    3b4e:	6d 89       	ldd	r22, Y+21	; 0x15
    3b50:	7e 89       	ldd	r23, Y+22	; 0x16
    3b52:	8f 89       	ldd	r24, Y+23	; 0x17
    3b54:	98 8d       	ldd	r25, Y+24	; 0x18
    3b56:	20 e0       	ldi	r18, 0x00	; 0
    3b58:	3f ef       	ldi	r19, 0xFF	; 255
    3b5a:	4f e7       	ldi	r20, 0x7F	; 127
    3b5c:	57 e4       	ldi	r21, 0x47	; 71
    3b5e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3b62:	18 16       	cp	r1, r24
    3b64:	4c f5       	brge	.+82     	; 0x3bb8 <LCD_vInitWithOutClear+0x2ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b66:	69 8d       	ldd	r22, Y+25	; 0x19
    3b68:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b6a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b6c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b6e:	20 e0       	ldi	r18, 0x00	; 0
    3b70:	30 e0       	ldi	r19, 0x00	; 0
    3b72:	40 e2       	ldi	r20, 0x20	; 32
    3b74:	51 e4       	ldi	r21, 0x41	; 65
    3b76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b7a:	dc 01       	movw	r26, r24
    3b7c:	cb 01       	movw	r24, r22
    3b7e:	bc 01       	movw	r22, r24
    3b80:	cd 01       	movw	r24, r26
    3b82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b86:	dc 01       	movw	r26, r24
    3b88:	cb 01       	movw	r24, r22
    3b8a:	9c 8b       	std	Y+20, r25	; 0x14
    3b8c:	8b 8b       	std	Y+19, r24	; 0x13
    3b8e:	0f c0       	rjmp	.+30     	; 0x3bae <LCD_vInitWithOutClear+0x2e0>
    3b90:	80 e9       	ldi	r24, 0x90	; 144
    3b92:	91 e0       	ldi	r25, 0x01	; 1
    3b94:	9a 8b       	std	Y+18, r25	; 0x12
    3b96:	89 8b       	std	Y+17, r24	; 0x11
    3b98:	89 89       	ldd	r24, Y+17	; 0x11
    3b9a:	9a 89       	ldd	r25, Y+18	; 0x12
    3b9c:	01 97       	sbiw	r24, 0x01	; 1
    3b9e:	f1 f7       	brne	.-4      	; 0x3b9c <LCD_vInitWithOutClear+0x2ce>
    3ba0:	9a 8b       	std	Y+18, r25	; 0x12
    3ba2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ba4:	8b 89       	ldd	r24, Y+19	; 0x13
    3ba6:	9c 89       	ldd	r25, Y+20	; 0x14
    3ba8:	01 97       	sbiw	r24, 0x01	; 1
    3baa:	9c 8b       	std	Y+20, r25	; 0x14
    3bac:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bae:	8b 89       	ldd	r24, Y+19	; 0x13
    3bb0:	9c 89       	ldd	r25, Y+20	; 0x14
    3bb2:	00 97       	sbiw	r24, 0x00	; 0
    3bb4:	69 f7       	brne	.-38     	; 0x3b90 <LCD_vInitWithOutClear+0x2c2>
    3bb6:	14 c0       	rjmp	.+40     	; 0x3be0 <LCD_vInitWithOutClear+0x312>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bb8:	6d 89       	ldd	r22, Y+21	; 0x15
    3bba:	7e 89       	ldd	r23, Y+22	; 0x16
    3bbc:	8f 89       	ldd	r24, Y+23	; 0x17
    3bbe:	98 8d       	ldd	r25, Y+24	; 0x18
    3bc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bc4:	dc 01       	movw	r26, r24
    3bc6:	cb 01       	movw	r24, r22
    3bc8:	9c 8b       	std	Y+20, r25	; 0x14
    3bca:	8b 8b       	std	Y+19, r24	; 0x13
    3bcc:	8b 89       	ldd	r24, Y+19	; 0x13
    3bce:	9c 89       	ldd	r25, Y+20	; 0x14
    3bd0:	98 8b       	std	Y+16, r25	; 0x10
    3bd2:	8f 87       	std	Y+15, r24	; 0x0f
    3bd4:	8f 85       	ldd	r24, Y+15	; 0x0f
    3bd6:	98 89       	ldd	r25, Y+16	; 0x10
    3bd8:	01 97       	sbiw	r24, 0x01	; 1
    3bda:	f1 f7       	brne	.-4      	; 0x3bd8 <LCD_vInitWithOutClear+0x30a>
    3bdc:	98 8b       	std	Y+16, r25	; 0x10
    3bde:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	LCD_vSendCommand(EnrtyMode);
    3be0:	86 e0       	ldi	r24, 0x06	; 6
    3be2:	0e 94 a8 18 	call	0x3150	; 0x3150 <LCD_vSendCommand>
    3be6:	80 e0       	ldi	r24, 0x00	; 0
    3be8:	90 e0       	ldi	r25, 0x00	; 0
    3bea:	a0 e0       	ldi	r26, 0x00	; 0
    3bec:	b0 e4       	ldi	r27, 0x40	; 64
    3bee:	8b 87       	std	Y+11, r24	; 0x0b
    3bf0:	9c 87       	std	Y+12, r25	; 0x0c
    3bf2:	ad 87       	std	Y+13, r26	; 0x0d
    3bf4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bf6:	6b 85       	ldd	r22, Y+11	; 0x0b
    3bf8:	7c 85       	ldd	r23, Y+12	; 0x0c
    3bfa:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bfc:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bfe:	20 e0       	ldi	r18, 0x00	; 0
    3c00:	30 e0       	ldi	r19, 0x00	; 0
    3c02:	4a e7       	ldi	r20, 0x7A	; 122
    3c04:	55 e4       	ldi	r21, 0x45	; 69
    3c06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c0a:	dc 01       	movw	r26, r24
    3c0c:	cb 01       	movw	r24, r22
    3c0e:	8f 83       	std	Y+7, r24	; 0x07
    3c10:	98 87       	std	Y+8, r25	; 0x08
    3c12:	a9 87       	std	Y+9, r26	; 0x09
    3c14:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3c16:	6f 81       	ldd	r22, Y+7	; 0x07
    3c18:	78 85       	ldd	r23, Y+8	; 0x08
    3c1a:	89 85       	ldd	r24, Y+9	; 0x09
    3c1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c1e:	20 e0       	ldi	r18, 0x00	; 0
    3c20:	30 e0       	ldi	r19, 0x00	; 0
    3c22:	40 e8       	ldi	r20, 0x80	; 128
    3c24:	5f e3       	ldi	r21, 0x3F	; 63
    3c26:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3c2a:	88 23       	and	r24, r24
    3c2c:	2c f4       	brge	.+10     	; 0x3c38 <LCD_vInitWithOutClear+0x36a>
		__ticks = 1;
    3c2e:	81 e0       	ldi	r24, 0x01	; 1
    3c30:	90 e0       	ldi	r25, 0x00	; 0
    3c32:	9e 83       	std	Y+6, r25	; 0x06
    3c34:	8d 83       	std	Y+5, r24	; 0x05
    3c36:	3f c0       	rjmp	.+126    	; 0x3cb6 <LCD_vInitWithOutClear+0x3e8>
	else if (__tmp > 65535)
    3c38:	6f 81       	ldd	r22, Y+7	; 0x07
    3c3a:	78 85       	ldd	r23, Y+8	; 0x08
    3c3c:	89 85       	ldd	r24, Y+9	; 0x09
    3c3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c40:	20 e0       	ldi	r18, 0x00	; 0
    3c42:	3f ef       	ldi	r19, 0xFF	; 255
    3c44:	4f e7       	ldi	r20, 0x7F	; 127
    3c46:	57 e4       	ldi	r21, 0x47	; 71
    3c48:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3c4c:	18 16       	cp	r1, r24
    3c4e:	4c f5       	brge	.+82     	; 0x3ca2 <LCD_vInitWithOutClear+0x3d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c50:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c52:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c54:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c56:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c58:	20 e0       	ldi	r18, 0x00	; 0
    3c5a:	30 e0       	ldi	r19, 0x00	; 0
    3c5c:	40 e2       	ldi	r20, 0x20	; 32
    3c5e:	51 e4       	ldi	r21, 0x41	; 65
    3c60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c64:	dc 01       	movw	r26, r24
    3c66:	cb 01       	movw	r24, r22
    3c68:	bc 01       	movw	r22, r24
    3c6a:	cd 01       	movw	r24, r26
    3c6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c70:	dc 01       	movw	r26, r24
    3c72:	cb 01       	movw	r24, r22
    3c74:	9e 83       	std	Y+6, r25	; 0x06
    3c76:	8d 83       	std	Y+5, r24	; 0x05
    3c78:	0f c0       	rjmp	.+30     	; 0x3c98 <LCD_vInitWithOutClear+0x3ca>
    3c7a:	80 e9       	ldi	r24, 0x90	; 144
    3c7c:	91 e0       	ldi	r25, 0x01	; 1
    3c7e:	9c 83       	std	Y+4, r25	; 0x04
    3c80:	8b 83       	std	Y+3, r24	; 0x03
    3c82:	8b 81       	ldd	r24, Y+3	; 0x03
    3c84:	9c 81       	ldd	r25, Y+4	; 0x04
    3c86:	01 97       	sbiw	r24, 0x01	; 1
    3c88:	f1 f7       	brne	.-4      	; 0x3c86 <LCD_vInitWithOutClear+0x3b8>
    3c8a:	9c 83       	std	Y+4, r25	; 0x04
    3c8c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c8e:	8d 81       	ldd	r24, Y+5	; 0x05
    3c90:	9e 81       	ldd	r25, Y+6	; 0x06
    3c92:	01 97       	sbiw	r24, 0x01	; 1
    3c94:	9e 83       	std	Y+6, r25	; 0x06
    3c96:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c98:	8d 81       	ldd	r24, Y+5	; 0x05
    3c9a:	9e 81       	ldd	r25, Y+6	; 0x06
    3c9c:	00 97       	sbiw	r24, 0x00	; 0
    3c9e:	69 f7       	brne	.-38     	; 0x3c7a <LCD_vInitWithOutClear+0x3ac>
    3ca0:	14 c0       	rjmp	.+40     	; 0x3cca <LCD_vInitWithOutClear+0x3fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ca2:	6f 81       	ldd	r22, Y+7	; 0x07
    3ca4:	78 85       	ldd	r23, Y+8	; 0x08
    3ca6:	89 85       	ldd	r24, Y+9	; 0x09
    3ca8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3caa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cae:	dc 01       	movw	r26, r24
    3cb0:	cb 01       	movw	r24, r22
    3cb2:	9e 83       	std	Y+6, r25	; 0x06
    3cb4:	8d 83       	std	Y+5, r24	; 0x05
    3cb6:	8d 81       	ldd	r24, Y+5	; 0x05
    3cb8:	9e 81       	ldd	r25, Y+6	; 0x06
    3cba:	9a 83       	std	Y+2, r25	; 0x02
    3cbc:	89 83       	std	Y+1, r24	; 0x01
    3cbe:	89 81       	ldd	r24, Y+1	; 0x01
    3cc0:	9a 81       	ldd	r25, Y+2	; 0x02
    3cc2:	01 97       	sbiw	r24, 0x01	; 1
    3cc4:	f1 f7       	brne	.-4      	; 0x3cc2 <LCD_vInitWithOutClear+0x3f4>
    3cc6:	9a 83       	std	Y+2, r25	; 0x02
    3cc8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    3cca:	e8 96       	adiw	r28, 0x38	; 56
    3ccc:	0f b6       	in	r0, 0x3f	; 63
    3cce:	f8 94       	cli
    3cd0:	de bf       	out	0x3e, r29	; 62
    3cd2:	0f be       	out	0x3f, r0	; 63
    3cd4:	cd bf       	out	0x3d, r28	; 61
    3cd6:	cf 91       	pop	r28
    3cd8:	df 91       	pop	r29
    3cda:	08 95       	ret

00003cdc <LCD_vWriteCharacter>:
void LCD_vWriteCharacter(u8 Loc_u8Character){
    3cdc:	df 93       	push	r29
    3cde:	cf 93       	push	r28
    3ce0:	cd b7       	in	r28, 0x3d	; 61
    3ce2:	de b7       	in	r29, 0x3e	; 62
    3ce4:	6d 97       	sbiw	r28, 0x1d	; 29
    3ce6:	0f b6       	in	r0, 0x3f	; 63
    3ce8:	f8 94       	cli
    3cea:	de bf       	out	0x3e, r29	; 62
    3cec:	0f be       	out	0x3f, r0	; 63
    3cee:	cd bf       	out	0x3d, r28	; 61
    3cf0:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_vSetPinValue(PortB, Pin1, Pin_High);
    3cf2:	81 e0       	ldi	r24, 0x01	; 1
    3cf4:	61 e0       	ldi	r22, 0x01	; 1
    3cf6:	41 e0       	ldi	r20, 0x01	; 1
    3cf8:	0e 94 9f 10 	call	0x213e	; 0x213e <DIO_vSetPinValue>
	DIO_vSetPinValue(PortB, Pin2, Pin_Low);
    3cfc:	81 e0       	ldi	r24, 0x01	; 1
    3cfe:	62 e0       	ldi	r22, 0x02	; 2
    3d00:	40 e0       	ldi	r20, 0x00	; 0
    3d02:	0e 94 9f 10 	call	0x213e	; 0x213e <DIO_vSetPinValue>
	DIO_vSetPinValue(PortB, Pin3, Pin_Low);
    3d06:	81 e0       	ldi	r24, 0x01	; 1
    3d08:	63 e0       	ldi	r22, 0x03	; 3
    3d0a:	40 e0       	ldi	r20, 0x00	; 0
    3d0c:	0e 94 9f 10 	call	0x213e	; 0x213e <DIO_vSetPinValue>
	//------Send command-------
	DIO_vSetPortValue(PortA,(Loc_u8Character)&0xF0);
    3d10:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3d12:	98 2f       	mov	r25, r24
    3d14:	90 7f       	andi	r25, 0xF0	; 240
    3d16:	80 e0       	ldi	r24, 0x00	; 0
    3d18:	69 2f       	mov	r22, r25
    3d1a:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <DIO_vSetPortValue>
	DIO_vSetPinValue(PortB, Pin3, Pin_High);
    3d1e:	81 e0       	ldi	r24, 0x01	; 1
    3d20:	63 e0       	ldi	r22, 0x03	; 3
    3d22:	41 e0       	ldi	r20, 0x01	; 1
    3d24:	0e 94 9f 10 	call	0x213e	; 0x213e <DIO_vSetPinValue>
    3d28:	80 e0       	ldi	r24, 0x00	; 0
    3d2a:	90 e0       	ldi	r25, 0x00	; 0
    3d2c:	a0 e2       	ldi	r26, 0x20	; 32
    3d2e:	b1 e4       	ldi	r27, 0x41	; 65
    3d30:	89 8f       	std	Y+25, r24	; 0x19
    3d32:	9a 8f       	std	Y+26, r25	; 0x1a
    3d34:	ab 8f       	std	Y+27, r26	; 0x1b
    3d36:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d38:	69 8d       	ldd	r22, Y+25	; 0x19
    3d3a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3d3c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3d3e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3d40:	20 e0       	ldi	r18, 0x00	; 0
    3d42:	30 e0       	ldi	r19, 0x00	; 0
    3d44:	4a e7       	ldi	r20, 0x7A	; 122
    3d46:	55 e4       	ldi	r21, 0x45	; 69
    3d48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d4c:	dc 01       	movw	r26, r24
    3d4e:	cb 01       	movw	r24, r22
    3d50:	8d 8b       	std	Y+21, r24	; 0x15
    3d52:	9e 8b       	std	Y+22, r25	; 0x16
    3d54:	af 8b       	std	Y+23, r26	; 0x17
    3d56:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3d58:	6d 89       	ldd	r22, Y+21	; 0x15
    3d5a:	7e 89       	ldd	r23, Y+22	; 0x16
    3d5c:	8f 89       	ldd	r24, Y+23	; 0x17
    3d5e:	98 8d       	ldd	r25, Y+24	; 0x18
    3d60:	20 e0       	ldi	r18, 0x00	; 0
    3d62:	30 e0       	ldi	r19, 0x00	; 0
    3d64:	40 e8       	ldi	r20, 0x80	; 128
    3d66:	5f e3       	ldi	r21, 0x3F	; 63
    3d68:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3d6c:	88 23       	and	r24, r24
    3d6e:	2c f4       	brge	.+10     	; 0x3d7a <LCD_vWriteCharacter+0x9e>
		__ticks = 1;
    3d70:	81 e0       	ldi	r24, 0x01	; 1
    3d72:	90 e0       	ldi	r25, 0x00	; 0
    3d74:	9c 8b       	std	Y+20, r25	; 0x14
    3d76:	8b 8b       	std	Y+19, r24	; 0x13
    3d78:	3f c0       	rjmp	.+126    	; 0x3df8 <LCD_vWriteCharacter+0x11c>
	else if (__tmp > 65535)
    3d7a:	6d 89       	ldd	r22, Y+21	; 0x15
    3d7c:	7e 89       	ldd	r23, Y+22	; 0x16
    3d7e:	8f 89       	ldd	r24, Y+23	; 0x17
    3d80:	98 8d       	ldd	r25, Y+24	; 0x18
    3d82:	20 e0       	ldi	r18, 0x00	; 0
    3d84:	3f ef       	ldi	r19, 0xFF	; 255
    3d86:	4f e7       	ldi	r20, 0x7F	; 127
    3d88:	57 e4       	ldi	r21, 0x47	; 71
    3d8a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3d8e:	18 16       	cp	r1, r24
    3d90:	4c f5       	brge	.+82     	; 0x3de4 <LCD_vWriteCharacter+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d92:	69 8d       	ldd	r22, Y+25	; 0x19
    3d94:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3d96:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3d98:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3d9a:	20 e0       	ldi	r18, 0x00	; 0
    3d9c:	30 e0       	ldi	r19, 0x00	; 0
    3d9e:	40 e2       	ldi	r20, 0x20	; 32
    3da0:	51 e4       	ldi	r21, 0x41	; 65
    3da2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3da6:	dc 01       	movw	r26, r24
    3da8:	cb 01       	movw	r24, r22
    3daa:	bc 01       	movw	r22, r24
    3dac:	cd 01       	movw	r24, r26
    3dae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3db2:	dc 01       	movw	r26, r24
    3db4:	cb 01       	movw	r24, r22
    3db6:	9c 8b       	std	Y+20, r25	; 0x14
    3db8:	8b 8b       	std	Y+19, r24	; 0x13
    3dba:	0f c0       	rjmp	.+30     	; 0x3dda <LCD_vWriteCharacter+0xfe>
    3dbc:	80 e9       	ldi	r24, 0x90	; 144
    3dbe:	91 e0       	ldi	r25, 0x01	; 1
    3dc0:	9a 8b       	std	Y+18, r25	; 0x12
    3dc2:	89 8b       	std	Y+17, r24	; 0x11
    3dc4:	89 89       	ldd	r24, Y+17	; 0x11
    3dc6:	9a 89       	ldd	r25, Y+18	; 0x12
    3dc8:	01 97       	sbiw	r24, 0x01	; 1
    3dca:	f1 f7       	brne	.-4      	; 0x3dc8 <LCD_vWriteCharacter+0xec>
    3dcc:	9a 8b       	std	Y+18, r25	; 0x12
    3dce:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3dd0:	8b 89       	ldd	r24, Y+19	; 0x13
    3dd2:	9c 89       	ldd	r25, Y+20	; 0x14
    3dd4:	01 97       	sbiw	r24, 0x01	; 1
    3dd6:	9c 8b       	std	Y+20, r25	; 0x14
    3dd8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dda:	8b 89       	ldd	r24, Y+19	; 0x13
    3ddc:	9c 89       	ldd	r25, Y+20	; 0x14
    3dde:	00 97       	sbiw	r24, 0x00	; 0
    3de0:	69 f7       	brne	.-38     	; 0x3dbc <LCD_vWriteCharacter+0xe0>
    3de2:	14 c0       	rjmp	.+40     	; 0x3e0c <LCD_vWriteCharacter+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3de4:	6d 89       	ldd	r22, Y+21	; 0x15
    3de6:	7e 89       	ldd	r23, Y+22	; 0x16
    3de8:	8f 89       	ldd	r24, Y+23	; 0x17
    3dea:	98 8d       	ldd	r25, Y+24	; 0x18
    3dec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3df0:	dc 01       	movw	r26, r24
    3df2:	cb 01       	movw	r24, r22
    3df4:	9c 8b       	std	Y+20, r25	; 0x14
    3df6:	8b 8b       	std	Y+19, r24	; 0x13
    3df8:	8b 89       	ldd	r24, Y+19	; 0x13
    3dfa:	9c 89       	ldd	r25, Y+20	; 0x14
    3dfc:	98 8b       	std	Y+16, r25	; 0x10
    3dfe:	8f 87       	std	Y+15, r24	; 0x0f
    3e00:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e02:	98 89       	ldd	r25, Y+16	; 0x10
    3e04:	01 97       	sbiw	r24, 0x01	; 1
    3e06:	f1 f7       	brne	.-4      	; 0x3e04 <LCD_vWriteCharacter+0x128>
    3e08:	98 8b       	std	Y+16, r25	; 0x10
    3e0a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	DIO_vSetPinValue(PortB, Pin3, Pin_Low);
    3e0c:	81 e0       	ldi	r24, 0x01	; 1
    3e0e:	63 e0       	ldi	r22, 0x03	; 3
    3e10:	40 e0       	ldi	r20, 0x00	; 0
    3e12:	0e 94 9f 10 	call	0x213e	; 0x213e <DIO_vSetPinValue>
	DIO_vSetPortValue(PortA,(Loc_u8Character<<4));
    3e16:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3e18:	98 2f       	mov	r25, r24
    3e1a:	92 95       	swap	r25
    3e1c:	90 7f       	andi	r25, 0xF0	; 240
    3e1e:	80 e0       	ldi	r24, 0x00	; 0
    3e20:	69 2f       	mov	r22, r25
    3e22:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <DIO_vSetPortValue>
	DIO_vSetPinValue(PortB, Pin3, Pin_High);
    3e26:	81 e0       	ldi	r24, 0x01	; 1
    3e28:	63 e0       	ldi	r22, 0x03	; 3
    3e2a:	41 e0       	ldi	r20, 0x01	; 1
    3e2c:	0e 94 9f 10 	call	0x213e	; 0x213e <DIO_vSetPinValue>
    3e30:	80 e0       	ldi	r24, 0x00	; 0
    3e32:	90 e0       	ldi	r25, 0x00	; 0
    3e34:	a0 e2       	ldi	r26, 0x20	; 32
    3e36:	b1 e4       	ldi	r27, 0x41	; 65
    3e38:	8b 87       	std	Y+11, r24	; 0x0b
    3e3a:	9c 87       	std	Y+12, r25	; 0x0c
    3e3c:	ad 87       	std	Y+13, r26	; 0x0d
    3e3e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e40:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e42:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e44:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e46:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e48:	20 e0       	ldi	r18, 0x00	; 0
    3e4a:	30 e0       	ldi	r19, 0x00	; 0
    3e4c:	4a e7       	ldi	r20, 0x7A	; 122
    3e4e:	55 e4       	ldi	r21, 0x45	; 69
    3e50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e54:	dc 01       	movw	r26, r24
    3e56:	cb 01       	movw	r24, r22
    3e58:	8f 83       	std	Y+7, r24	; 0x07
    3e5a:	98 87       	std	Y+8, r25	; 0x08
    3e5c:	a9 87       	std	Y+9, r26	; 0x09
    3e5e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3e60:	6f 81       	ldd	r22, Y+7	; 0x07
    3e62:	78 85       	ldd	r23, Y+8	; 0x08
    3e64:	89 85       	ldd	r24, Y+9	; 0x09
    3e66:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e68:	20 e0       	ldi	r18, 0x00	; 0
    3e6a:	30 e0       	ldi	r19, 0x00	; 0
    3e6c:	40 e8       	ldi	r20, 0x80	; 128
    3e6e:	5f e3       	ldi	r21, 0x3F	; 63
    3e70:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3e74:	88 23       	and	r24, r24
    3e76:	2c f4       	brge	.+10     	; 0x3e82 <LCD_vWriteCharacter+0x1a6>
		__ticks = 1;
    3e78:	81 e0       	ldi	r24, 0x01	; 1
    3e7a:	90 e0       	ldi	r25, 0x00	; 0
    3e7c:	9e 83       	std	Y+6, r25	; 0x06
    3e7e:	8d 83       	std	Y+5, r24	; 0x05
    3e80:	3f c0       	rjmp	.+126    	; 0x3f00 <LCD_vWriteCharacter+0x224>
	else if (__tmp > 65535)
    3e82:	6f 81       	ldd	r22, Y+7	; 0x07
    3e84:	78 85       	ldd	r23, Y+8	; 0x08
    3e86:	89 85       	ldd	r24, Y+9	; 0x09
    3e88:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e8a:	20 e0       	ldi	r18, 0x00	; 0
    3e8c:	3f ef       	ldi	r19, 0xFF	; 255
    3e8e:	4f e7       	ldi	r20, 0x7F	; 127
    3e90:	57 e4       	ldi	r21, 0x47	; 71
    3e92:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3e96:	18 16       	cp	r1, r24
    3e98:	4c f5       	brge	.+82     	; 0x3eec <LCD_vWriteCharacter+0x210>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ea0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ea2:	20 e0       	ldi	r18, 0x00	; 0
    3ea4:	30 e0       	ldi	r19, 0x00	; 0
    3ea6:	40 e2       	ldi	r20, 0x20	; 32
    3ea8:	51 e4       	ldi	r21, 0x41	; 65
    3eaa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3eae:	dc 01       	movw	r26, r24
    3eb0:	cb 01       	movw	r24, r22
    3eb2:	bc 01       	movw	r22, r24
    3eb4:	cd 01       	movw	r24, r26
    3eb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3eba:	dc 01       	movw	r26, r24
    3ebc:	cb 01       	movw	r24, r22
    3ebe:	9e 83       	std	Y+6, r25	; 0x06
    3ec0:	8d 83       	std	Y+5, r24	; 0x05
    3ec2:	0f c0       	rjmp	.+30     	; 0x3ee2 <LCD_vWriteCharacter+0x206>
    3ec4:	80 e9       	ldi	r24, 0x90	; 144
    3ec6:	91 e0       	ldi	r25, 0x01	; 1
    3ec8:	9c 83       	std	Y+4, r25	; 0x04
    3eca:	8b 83       	std	Y+3, r24	; 0x03
    3ecc:	8b 81       	ldd	r24, Y+3	; 0x03
    3ece:	9c 81       	ldd	r25, Y+4	; 0x04
    3ed0:	01 97       	sbiw	r24, 0x01	; 1
    3ed2:	f1 f7       	brne	.-4      	; 0x3ed0 <LCD_vWriteCharacter+0x1f4>
    3ed4:	9c 83       	std	Y+4, r25	; 0x04
    3ed6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ed8:	8d 81       	ldd	r24, Y+5	; 0x05
    3eda:	9e 81       	ldd	r25, Y+6	; 0x06
    3edc:	01 97       	sbiw	r24, 0x01	; 1
    3ede:	9e 83       	std	Y+6, r25	; 0x06
    3ee0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ee2:	8d 81       	ldd	r24, Y+5	; 0x05
    3ee4:	9e 81       	ldd	r25, Y+6	; 0x06
    3ee6:	00 97       	sbiw	r24, 0x00	; 0
    3ee8:	69 f7       	brne	.-38     	; 0x3ec4 <LCD_vWriteCharacter+0x1e8>
    3eea:	14 c0       	rjmp	.+40     	; 0x3f14 <LCD_vWriteCharacter+0x238>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3eec:	6f 81       	ldd	r22, Y+7	; 0x07
    3eee:	78 85       	ldd	r23, Y+8	; 0x08
    3ef0:	89 85       	ldd	r24, Y+9	; 0x09
    3ef2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ef4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ef8:	dc 01       	movw	r26, r24
    3efa:	cb 01       	movw	r24, r22
    3efc:	9e 83       	std	Y+6, r25	; 0x06
    3efe:	8d 83       	std	Y+5, r24	; 0x05
    3f00:	8d 81       	ldd	r24, Y+5	; 0x05
    3f02:	9e 81       	ldd	r25, Y+6	; 0x06
    3f04:	9a 83       	std	Y+2, r25	; 0x02
    3f06:	89 83       	std	Y+1, r24	; 0x01
    3f08:	89 81       	ldd	r24, Y+1	; 0x01
    3f0a:	9a 81       	ldd	r25, Y+2	; 0x02
    3f0c:	01 97       	sbiw	r24, 0x01	; 1
    3f0e:	f1 f7       	brne	.-4      	; 0x3f0c <LCD_vWriteCharacter+0x230>
    3f10:	9a 83       	std	Y+2, r25	; 0x02
    3f12:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	DIO_vSetPinValue(PortB, Pin3, Pin_Low);
    3f14:	81 e0       	ldi	r24, 0x01	; 1
    3f16:	63 e0       	ldi	r22, 0x03	; 3
    3f18:	40 e0       	ldi	r20, 0x00	; 0
    3f1a:	0e 94 9f 10 	call	0x213e	; 0x213e <DIO_vSetPinValue>



}
    3f1e:	6d 96       	adiw	r28, 0x1d	; 29
    3f20:	0f b6       	in	r0, 0x3f	; 63
    3f22:	f8 94       	cli
    3f24:	de bf       	out	0x3e, r29	; 62
    3f26:	0f be       	out	0x3f, r0	; 63
    3f28:	cd bf       	out	0x3d, r28	; 61
    3f2a:	cf 91       	pop	r28
    3f2c:	df 91       	pop	r29
    3f2e:	08 95       	ret

00003f30 <LCD_vGoTo>:
void LCD_vGoTo(u8 Loc_u8Line, u8 Loc_u8CharPos){
    3f30:	df 93       	push	r29
    3f32:	cf 93       	push	r28
    3f34:	00 d0       	rcall	.+0      	; 0x3f36 <LCD_vGoTo+0x6>
    3f36:	cd b7       	in	r28, 0x3d	; 61
    3f38:	de b7       	in	r29, 0x3e	; 62
    3f3a:	89 83       	std	Y+1, r24	; 0x01
    3f3c:	6a 83       	std	Y+2, r22	; 0x02
	LCD_vSendCommand(Loc_u8Line|Loc_u8CharPos);
    3f3e:	89 81       	ldd	r24, Y+1	; 0x01
    3f40:	9a 81       	ldd	r25, Y+2	; 0x02
    3f42:	89 2b       	or	r24, r25
    3f44:	0e 94 a8 18 	call	0x3150	; 0x3150 <LCD_vSendCommand>
}
    3f48:	0f 90       	pop	r0
    3f4a:	0f 90       	pop	r0
    3f4c:	cf 91       	pop	r28
    3f4e:	df 91       	pop	r29
    3f50:	08 95       	ret

00003f52 <LCD_vClear>:
void LCD_vClear(){
    3f52:	df 93       	push	r29
    3f54:	cf 93       	push	r28
    3f56:	cd b7       	in	r28, 0x3d	; 61
    3f58:	de b7       	in	r29, 0x3e	; 62
    3f5a:	2e 97       	sbiw	r28, 0x0e	; 14
    3f5c:	0f b6       	in	r0, 0x3f	; 63
    3f5e:	f8 94       	cli
    3f60:	de bf       	out	0x3e, r29	; 62
    3f62:	0f be       	out	0x3f, r0	; 63
    3f64:	cd bf       	out	0x3d, r28	; 61
	LCD_vSendCommand(DisplayClear);
    3f66:	81 e0       	ldi	r24, 0x01	; 1
    3f68:	0e 94 a8 18 	call	0x3150	; 0x3150 <LCD_vSendCommand>
    3f6c:	80 e0       	ldi	r24, 0x00	; 0
    3f6e:	90 e0       	ldi	r25, 0x00	; 0
    3f70:	a0 e0       	ldi	r26, 0x00	; 0
    3f72:	b0 e4       	ldi	r27, 0x40	; 64
    3f74:	8b 87       	std	Y+11, r24	; 0x0b
    3f76:	9c 87       	std	Y+12, r25	; 0x0c
    3f78:	ad 87       	std	Y+13, r26	; 0x0d
    3f7a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f80:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f82:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f84:	20 e0       	ldi	r18, 0x00	; 0
    3f86:	30 e0       	ldi	r19, 0x00	; 0
    3f88:	4a e7       	ldi	r20, 0x7A	; 122
    3f8a:	55 e4       	ldi	r21, 0x45	; 69
    3f8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f90:	dc 01       	movw	r26, r24
    3f92:	cb 01       	movw	r24, r22
    3f94:	8f 83       	std	Y+7, r24	; 0x07
    3f96:	98 87       	std	Y+8, r25	; 0x08
    3f98:	a9 87       	std	Y+9, r26	; 0x09
    3f9a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3f9c:	6f 81       	ldd	r22, Y+7	; 0x07
    3f9e:	78 85       	ldd	r23, Y+8	; 0x08
    3fa0:	89 85       	ldd	r24, Y+9	; 0x09
    3fa2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fa4:	20 e0       	ldi	r18, 0x00	; 0
    3fa6:	30 e0       	ldi	r19, 0x00	; 0
    3fa8:	40 e8       	ldi	r20, 0x80	; 128
    3faa:	5f e3       	ldi	r21, 0x3F	; 63
    3fac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3fb0:	88 23       	and	r24, r24
    3fb2:	2c f4       	brge	.+10     	; 0x3fbe <LCD_vClear+0x6c>
		__ticks = 1;
    3fb4:	81 e0       	ldi	r24, 0x01	; 1
    3fb6:	90 e0       	ldi	r25, 0x00	; 0
    3fb8:	9e 83       	std	Y+6, r25	; 0x06
    3fba:	8d 83       	std	Y+5, r24	; 0x05
    3fbc:	3f c0       	rjmp	.+126    	; 0x403c <LCD_vClear+0xea>
	else if (__tmp > 65535)
    3fbe:	6f 81       	ldd	r22, Y+7	; 0x07
    3fc0:	78 85       	ldd	r23, Y+8	; 0x08
    3fc2:	89 85       	ldd	r24, Y+9	; 0x09
    3fc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fc6:	20 e0       	ldi	r18, 0x00	; 0
    3fc8:	3f ef       	ldi	r19, 0xFF	; 255
    3fca:	4f e7       	ldi	r20, 0x7F	; 127
    3fcc:	57 e4       	ldi	r21, 0x47	; 71
    3fce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3fd2:	18 16       	cp	r1, r24
    3fd4:	4c f5       	brge	.+82     	; 0x4028 <LCD_vClear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fd6:	6b 85       	ldd	r22, Y+11	; 0x0b
    3fd8:	7c 85       	ldd	r23, Y+12	; 0x0c
    3fda:	8d 85       	ldd	r24, Y+13	; 0x0d
    3fdc:	9e 85       	ldd	r25, Y+14	; 0x0e
    3fde:	20 e0       	ldi	r18, 0x00	; 0
    3fe0:	30 e0       	ldi	r19, 0x00	; 0
    3fe2:	40 e2       	ldi	r20, 0x20	; 32
    3fe4:	51 e4       	ldi	r21, 0x41	; 65
    3fe6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fea:	dc 01       	movw	r26, r24
    3fec:	cb 01       	movw	r24, r22
    3fee:	bc 01       	movw	r22, r24
    3ff0:	cd 01       	movw	r24, r26
    3ff2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ff6:	dc 01       	movw	r26, r24
    3ff8:	cb 01       	movw	r24, r22
    3ffa:	9e 83       	std	Y+6, r25	; 0x06
    3ffc:	8d 83       	std	Y+5, r24	; 0x05
    3ffe:	0f c0       	rjmp	.+30     	; 0x401e <LCD_vClear+0xcc>
    4000:	80 e9       	ldi	r24, 0x90	; 144
    4002:	91 e0       	ldi	r25, 0x01	; 1
    4004:	9c 83       	std	Y+4, r25	; 0x04
    4006:	8b 83       	std	Y+3, r24	; 0x03
    4008:	8b 81       	ldd	r24, Y+3	; 0x03
    400a:	9c 81       	ldd	r25, Y+4	; 0x04
    400c:	01 97       	sbiw	r24, 0x01	; 1
    400e:	f1 f7       	brne	.-4      	; 0x400c <LCD_vClear+0xba>
    4010:	9c 83       	std	Y+4, r25	; 0x04
    4012:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4014:	8d 81       	ldd	r24, Y+5	; 0x05
    4016:	9e 81       	ldd	r25, Y+6	; 0x06
    4018:	01 97       	sbiw	r24, 0x01	; 1
    401a:	9e 83       	std	Y+6, r25	; 0x06
    401c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    401e:	8d 81       	ldd	r24, Y+5	; 0x05
    4020:	9e 81       	ldd	r25, Y+6	; 0x06
    4022:	00 97       	sbiw	r24, 0x00	; 0
    4024:	69 f7       	brne	.-38     	; 0x4000 <LCD_vClear+0xae>
    4026:	14 c0       	rjmp	.+40     	; 0x4050 <LCD_vClear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4028:	6f 81       	ldd	r22, Y+7	; 0x07
    402a:	78 85       	ldd	r23, Y+8	; 0x08
    402c:	89 85       	ldd	r24, Y+9	; 0x09
    402e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4030:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4034:	dc 01       	movw	r26, r24
    4036:	cb 01       	movw	r24, r22
    4038:	9e 83       	std	Y+6, r25	; 0x06
    403a:	8d 83       	std	Y+5, r24	; 0x05
    403c:	8d 81       	ldd	r24, Y+5	; 0x05
    403e:	9e 81       	ldd	r25, Y+6	; 0x06
    4040:	9a 83       	std	Y+2, r25	; 0x02
    4042:	89 83       	std	Y+1, r24	; 0x01
    4044:	89 81       	ldd	r24, Y+1	; 0x01
    4046:	9a 81       	ldd	r25, Y+2	; 0x02
    4048:	01 97       	sbiw	r24, 0x01	; 1
    404a:	f1 f7       	brne	.-4      	; 0x4048 <LCD_vClear+0xf6>
    404c:	9a 83       	std	Y+2, r25	; 0x02
    404e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    4050:	2e 96       	adiw	r28, 0x0e	; 14
    4052:	0f b6       	in	r0, 0x3f	; 63
    4054:	f8 94       	cli
    4056:	de bf       	out	0x3e, r29	; 62
    4058:	0f be       	out	0x3f, r0	; 63
    405a:	cd bf       	out	0x3d, r28	; 61
    405c:	cf 91       	pop	r28
    405e:	df 91       	pop	r29
    4060:	08 95       	ret

00004062 <LCD_vWriteString>:
void LCD_vWriteString(u8 *ptr){
    4062:	df 93       	push	r29
    4064:	cf 93       	push	r28
    4066:	00 d0       	rcall	.+0      	; 0x4068 <LCD_vWriteString+0x6>
    4068:	0f 92       	push	r0
    406a:	cd b7       	in	r28, 0x3d	; 61
    406c:	de b7       	in	r29, 0x3e	; 62
    406e:	9b 83       	std	Y+3, r25	; 0x03
    4070:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
    4072:	19 82       	std	Y+1, r1	; 0x01
    4074:	0e c0       	rjmp	.+28     	; 0x4092 <LCD_vWriteString+0x30>
	while(ptr[i]!='\0'){
		LCD_vWriteCharacter(ptr[i]);
    4076:	89 81       	ldd	r24, Y+1	; 0x01
    4078:	28 2f       	mov	r18, r24
    407a:	30 e0       	ldi	r19, 0x00	; 0
    407c:	8a 81       	ldd	r24, Y+2	; 0x02
    407e:	9b 81       	ldd	r25, Y+3	; 0x03
    4080:	fc 01       	movw	r30, r24
    4082:	e2 0f       	add	r30, r18
    4084:	f3 1f       	adc	r31, r19
    4086:	80 81       	ld	r24, Z
    4088:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <LCD_vWriteCharacter>
		i++;
    408c:	89 81       	ldd	r24, Y+1	; 0x01
    408e:	8f 5f       	subi	r24, 0xFF	; 255
    4090:	89 83       	std	Y+1, r24	; 0x01
	LCD_vSendCommand(DisplayClear);
	_delay_ms(2);
}
void LCD_vWriteString(u8 *ptr){
	u8 i=0;
	while(ptr[i]!='\0'){
    4092:	89 81       	ldd	r24, Y+1	; 0x01
    4094:	28 2f       	mov	r18, r24
    4096:	30 e0       	ldi	r19, 0x00	; 0
    4098:	8a 81       	ldd	r24, Y+2	; 0x02
    409a:	9b 81       	ldd	r25, Y+3	; 0x03
    409c:	fc 01       	movw	r30, r24
    409e:	e2 0f       	add	r30, r18
    40a0:	f3 1f       	adc	r31, r19
    40a2:	80 81       	ld	r24, Z
    40a4:	88 23       	and	r24, r24
    40a6:	39 f7       	brne	.-50     	; 0x4076 <LCD_vWriteString+0x14>
		LCD_vWriteCharacter(ptr[i]);
		i++;
	}
}
    40a8:	0f 90       	pop	r0
    40aa:	0f 90       	pop	r0
    40ac:	0f 90       	pop	r0
    40ae:	cf 91       	pop	r28
    40b0:	df 91       	pop	r29
    40b2:	08 95       	ret

000040b4 <LCD_vCustomCharacter>:
void LCD_vCustomCharacter(u8 *ptr,u8 Location){
    40b4:	df 93       	push	r29
    40b6:	cf 93       	push	r28
    40b8:	00 d0       	rcall	.+0      	; 0x40ba <LCD_vCustomCharacter+0x6>
    40ba:	00 d0       	rcall	.+0      	; 0x40bc <LCD_vCustomCharacter+0x8>
    40bc:	cd b7       	in	r28, 0x3d	; 61
    40be:	de b7       	in	r29, 0x3e	; 62
    40c0:	9b 83       	std	Y+3, r25	; 0x03
    40c2:	8a 83       	std	Y+2, r24	; 0x02
    40c4:	6c 83       	std	Y+4, r22	; 0x04
	u8 i;
	LCD_vSendCommand((0x40)+(Location*8));
    40c6:	8c 81       	ldd	r24, Y+4	; 0x04
    40c8:	88 2f       	mov	r24, r24
    40ca:	90 e0       	ldi	r25, 0x00	; 0
    40cc:	08 96       	adiw	r24, 0x08	; 8
    40ce:	88 0f       	add	r24, r24
    40d0:	99 1f       	adc	r25, r25
    40d2:	88 0f       	add	r24, r24
    40d4:	99 1f       	adc	r25, r25
    40d6:	88 0f       	add	r24, r24
    40d8:	99 1f       	adc	r25, r25
    40da:	0e 94 a8 18 	call	0x3150	; 0x3150 <LCD_vSendCommand>
	for(i=0;i<8;i++){
    40de:	19 82       	std	Y+1, r1	; 0x01
    40e0:	0e c0       	rjmp	.+28     	; 0x40fe <LCD_vCustomCharacter+0x4a>
		LCD_vWriteCharacter(ptr[i]);
    40e2:	89 81       	ldd	r24, Y+1	; 0x01
    40e4:	28 2f       	mov	r18, r24
    40e6:	30 e0       	ldi	r19, 0x00	; 0
    40e8:	8a 81       	ldd	r24, Y+2	; 0x02
    40ea:	9b 81       	ldd	r25, Y+3	; 0x03
    40ec:	fc 01       	movw	r30, r24
    40ee:	e2 0f       	add	r30, r18
    40f0:	f3 1f       	adc	r31, r19
    40f2:	80 81       	ld	r24, Z
    40f4:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <LCD_vWriteCharacter>
	}
}
void LCD_vCustomCharacter(u8 *ptr,u8 Location){
	u8 i;
	LCD_vSendCommand((0x40)+(Location*8));
	for(i=0;i<8;i++){
    40f8:	89 81       	ldd	r24, Y+1	; 0x01
    40fa:	8f 5f       	subi	r24, 0xFF	; 255
    40fc:	89 83       	std	Y+1, r24	; 0x01
    40fe:	89 81       	ldd	r24, Y+1	; 0x01
    4100:	88 30       	cpi	r24, 0x08	; 8
    4102:	78 f3       	brcs	.-34     	; 0x40e2 <LCD_vCustomCharacter+0x2e>
		LCD_vWriteCharacter(ptr[i]);
	}


}
    4104:	0f 90       	pop	r0
    4106:	0f 90       	pop	r0
    4108:	0f 90       	pop	r0
    410a:	0f 90       	pop	r0
    410c:	cf 91       	pop	r28
    410e:	df 91       	pop	r29
    4110:	08 95       	ret

00004112 <LCD_vCLearOneChar>:
void LCD_vCLearOneChar(u8 Loc_u8Line,u8 Loc_u8CharPos){
    4112:	df 93       	push	r29
    4114:	cf 93       	push	r28
    4116:	cd b7       	in	r28, 0x3d	; 61
    4118:	de b7       	in	r29, 0x3e	; 62
    411a:	2a 97       	sbiw	r28, 0x0a	; 10
    411c:	0f b6       	in	r0, 0x3f	; 63
    411e:	f8 94       	cli
    4120:	de bf       	out	0x3e, r29	; 62
    4122:	0f be       	out	0x3f, r0	; 63
    4124:	cd bf       	out	0x3d, r28	; 61
    4126:	89 87       	std	Y+9, r24	; 0x09
    4128:	6a 87       	std	Y+10, r22	; 0x0a
	u8 chr0[8]={0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
    412a:	88 e0       	ldi	r24, 0x08	; 8
    412c:	fe 01       	movw	r30, r28
    412e:	31 96       	adiw	r30, 0x01	; 1
    4130:	df 01       	movw	r26, r30
    4132:	98 2f       	mov	r25, r24
    4134:	1d 92       	st	X+, r1
    4136:	9a 95       	dec	r25
    4138:	e9 f7       	brne	.-6      	; 0x4134 <LCD_vCLearOneChar+0x22>
	LCD_vCustomCharacter(chr0,1);
    413a:	ce 01       	movw	r24, r28
    413c:	01 96       	adiw	r24, 0x01	; 1
    413e:	61 e0       	ldi	r22, 0x01	; 1
    4140:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <LCD_vCustomCharacter>
	LCD_vGoTo(Loc_u8Line,Loc_u8CharPos);
    4144:	89 85       	ldd	r24, Y+9	; 0x09
    4146:	6a 85       	ldd	r22, Y+10	; 0x0a
    4148:	0e 94 98 1f 	call	0x3f30	; 0x3f30 <LCD_vGoTo>
	LCD_vWriteCharacter(1);
    414c:	81 e0       	ldi	r24, 0x01	; 1
    414e:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <LCD_vWriteCharacter>
}
    4152:	2a 96       	adiw	r28, 0x0a	; 10
    4154:	0f b6       	in	r0, 0x3f	; 63
    4156:	f8 94       	cli
    4158:	de bf       	out	0x3e, r29	; 62
    415a:	0f be       	out	0x3f, r0	; 63
    415c:	cd bf       	out	0x3d, r28	; 61
    415e:	cf 91       	pop	r28
    4160:	df 91       	pop	r29
    4162:	08 95       	ret

00004164 <KAYPAD_vInit>:
* \Parameters (in) : None
* \Parameters (out): None
* \Return value:   : void  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void KAYPAD_vInit(){
    4164:	df 93       	push	r29
    4166:	cf 93       	push	r28
    4168:	cd b7       	in	r28, 0x3d	; 61
    416a:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPortDirection(KEYPAD_PORT,KEYPAD_DIRECTION);
    416c:	81 e0       	ldi	r24, 0x01	; 1
    416e:	6f e0       	ldi	r22, 0x0F	; 15
    4170:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <DIO_vSetPortDirection>
	DIO_vSetPortValue(KEYPAD_PORT,KEYPAD_VALUE);
    4174:	81 e0       	ldi	r24, 0x01	; 1
    4176:	6f ef       	ldi	r22, 0xFF	; 255
    4178:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <DIO_vSetPortValue>

}
    417c:	cf 91       	pop	r28
    417e:	df 91       	pop	r29
    4180:	08 95       	ret

00004182 <KAYPAD_u8GetKey>:
* \Parameters (in) : None
* \Parameters (out): None
* \Return value:   : unsigned char  E_OK
*                                    E_NOT_OK
*******************************************************************************/
u8 KAYPAD_u8GetKey(){
    4182:	df 93       	push	r29
    4184:	cf 93       	push	r28
    4186:	cd b7       	in	r28, 0x3d	; 61
    4188:	de b7       	in	r29, 0x3e	; 62
    418a:	65 97       	sbiw	r28, 0x15	; 21
    418c:	0f b6       	in	r0, 0x3f	; 63
    418e:	f8 94       	cli
    4190:	de bf       	out	0x3e, r29	; 62
    4192:	0f be       	out	0x3f, r0	; 63
    4194:	cd bf       	out	0x3d, r28	; 61
	u8 Loc_u8RowCounter, Loc_u8CoulomsCounter;
	u8 row , coulom, temp;
	coulom=3;
    4196:	83 e0       	ldi	r24, 0x03	; 3
    4198:	89 8b       	std	Y+17, r24	; 0x11
	u8 value=9;
    419a:	89 e0       	ldi	r24, 0x09	; 9
    419c:	8f 87       	std	Y+15, r24	; 0x0f
	for(Loc_u8CoulomsCounter=0;Loc_u8CoulomsCounter<4;Loc_u8CoulomsCounter++){
    419e:	1b 8a       	std	Y+19, r1	; 0x13
    41a0:	b7 c0       	rjmp	.+366    	; 0x4310 <KAYPAD_u8GetKey+0x18e>
		DIO_vSetPinValue(KEYPAD_PORT,Loc_u8CoulomsCounter,Pin_Low);
    41a2:	81 e0       	ldi	r24, 0x01	; 1
    41a4:	6b 89       	ldd	r22, Y+19	; 0x13
    41a6:	40 e0       	ldi	r20, 0x00	; 0
    41a8:	0e 94 9f 10 	call	0x213e	; 0x213e <DIO_vSetPinValue>
		row=3;
    41ac:	83 e0       	ldi	r24, 0x03	; 3
    41ae:	8a 8b       	std	Y+18, r24	; 0x12
		for(Loc_u8RowCounter=4;Loc_u8RowCounter<8;Loc_u8RowCounter++){
    41b0:	84 e0       	ldi	r24, 0x04	; 4
    41b2:	8c 8b       	std	Y+20, r24	; 0x14
    41b4:	9e c0       	rjmp	.+316    	; 0x42f2 <KAYPAD_u8GetKey+0x170>
			temp=DIO_u8PGetPinValue(KEYPAD_PORT,Loc_u8RowCounter);
    41b6:	81 e0       	ldi	r24, 0x01	; 1
    41b8:	6c 89       	ldd	r22, Y+20	; 0x14
    41ba:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <DIO_u8PGetPinValue>
    41be:	88 8b       	std	Y+16, r24	; 0x10
			if(temp==0){
    41c0:	88 89       	ldd	r24, Y+16	; 0x10
    41c2:	88 23       	and	r24, r24
    41c4:	09 f0       	breq	.+2      	; 0x41c8 <KAYPAD_u8GetKey+0x46>
    41c6:	8f c0       	rjmp	.+286    	; 0x42e6 <KAYPAD_u8GetKey+0x164>
    41c8:	80 e0       	ldi	r24, 0x00	; 0
    41ca:	90 e0       	ldi	r25, 0x00	; 0
    41cc:	a8 ec       	ldi	r26, 0xC8	; 200
    41ce:	b1 e4       	ldi	r27, 0x41	; 65
    41d0:	8b 87       	std	Y+11, r24	; 0x0b
    41d2:	9c 87       	std	Y+12, r25	; 0x0c
    41d4:	ad 87       	std	Y+13, r26	; 0x0d
    41d6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    41da:	7c 85       	ldd	r23, Y+12	; 0x0c
    41dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    41de:	9e 85       	ldd	r25, Y+14	; 0x0e
    41e0:	20 e0       	ldi	r18, 0x00	; 0
    41e2:	30 e0       	ldi	r19, 0x00	; 0
    41e4:	4a e7       	ldi	r20, 0x7A	; 122
    41e6:	55 e4       	ldi	r21, 0x45	; 69
    41e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41ec:	dc 01       	movw	r26, r24
    41ee:	cb 01       	movw	r24, r22
    41f0:	8f 83       	std	Y+7, r24	; 0x07
    41f2:	98 87       	std	Y+8, r25	; 0x08
    41f4:	a9 87       	std	Y+9, r26	; 0x09
    41f6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    41f8:	6f 81       	ldd	r22, Y+7	; 0x07
    41fa:	78 85       	ldd	r23, Y+8	; 0x08
    41fc:	89 85       	ldd	r24, Y+9	; 0x09
    41fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    4200:	20 e0       	ldi	r18, 0x00	; 0
    4202:	30 e0       	ldi	r19, 0x00	; 0
    4204:	40 e8       	ldi	r20, 0x80	; 128
    4206:	5f e3       	ldi	r21, 0x3F	; 63
    4208:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    420c:	88 23       	and	r24, r24
    420e:	2c f4       	brge	.+10     	; 0x421a <KAYPAD_u8GetKey+0x98>
		__ticks = 1;
    4210:	81 e0       	ldi	r24, 0x01	; 1
    4212:	90 e0       	ldi	r25, 0x00	; 0
    4214:	9e 83       	std	Y+6, r25	; 0x06
    4216:	8d 83       	std	Y+5, r24	; 0x05
    4218:	3f c0       	rjmp	.+126    	; 0x4298 <KAYPAD_u8GetKey+0x116>
	else if (__tmp > 65535)
    421a:	6f 81       	ldd	r22, Y+7	; 0x07
    421c:	78 85       	ldd	r23, Y+8	; 0x08
    421e:	89 85       	ldd	r24, Y+9	; 0x09
    4220:	9a 85       	ldd	r25, Y+10	; 0x0a
    4222:	20 e0       	ldi	r18, 0x00	; 0
    4224:	3f ef       	ldi	r19, 0xFF	; 255
    4226:	4f e7       	ldi	r20, 0x7F	; 127
    4228:	57 e4       	ldi	r21, 0x47	; 71
    422a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    422e:	18 16       	cp	r1, r24
    4230:	4c f5       	brge	.+82     	; 0x4284 <KAYPAD_u8GetKey+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4232:	6b 85       	ldd	r22, Y+11	; 0x0b
    4234:	7c 85       	ldd	r23, Y+12	; 0x0c
    4236:	8d 85       	ldd	r24, Y+13	; 0x0d
    4238:	9e 85       	ldd	r25, Y+14	; 0x0e
    423a:	20 e0       	ldi	r18, 0x00	; 0
    423c:	30 e0       	ldi	r19, 0x00	; 0
    423e:	40 e2       	ldi	r20, 0x20	; 32
    4240:	51 e4       	ldi	r21, 0x41	; 65
    4242:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4246:	dc 01       	movw	r26, r24
    4248:	cb 01       	movw	r24, r22
    424a:	bc 01       	movw	r22, r24
    424c:	cd 01       	movw	r24, r26
    424e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4252:	dc 01       	movw	r26, r24
    4254:	cb 01       	movw	r24, r22
    4256:	9e 83       	std	Y+6, r25	; 0x06
    4258:	8d 83       	std	Y+5, r24	; 0x05
    425a:	0f c0       	rjmp	.+30     	; 0x427a <KAYPAD_u8GetKey+0xf8>
    425c:	80 e9       	ldi	r24, 0x90	; 144
    425e:	91 e0       	ldi	r25, 0x01	; 1
    4260:	9c 83       	std	Y+4, r25	; 0x04
    4262:	8b 83       	std	Y+3, r24	; 0x03
    4264:	8b 81       	ldd	r24, Y+3	; 0x03
    4266:	9c 81       	ldd	r25, Y+4	; 0x04
    4268:	01 97       	sbiw	r24, 0x01	; 1
    426a:	f1 f7       	brne	.-4      	; 0x4268 <KAYPAD_u8GetKey+0xe6>
    426c:	9c 83       	std	Y+4, r25	; 0x04
    426e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4270:	8d 81       	ldd	r24, Y+5	; 0x05
    4272:	9e 81       	ldd	r25, Y+6	; 0x06
    4274:	01 97       	sbiw	r24, 0x01	; 1
    4276:	9e 83       	std	Y+6, r25	; 0x06
    4278:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    427a:	8d 81       	ldd	r24, Y+5	; 0x05
    427c:	9e 81       	ldd	r25, Y+6	; 0x06
    427e:	00 97       	sbiw	r24, 0x00	; 0
    4280:	69 f7       	brne	.-38     	; 0x425c <KAYPAD_u8GetKey+0xda>
    4282:	14 c0       	rjmp	.+40     	; 0x42ac <KAYPAD_u8GetKey+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4284:	6f 81       	ldd	r22, Y+7	; 0x07
    4286:	78 85       	ldd	r23, Y+8	; 0x08
    4288:	89 85       	ldd	r24, Y+9	; 0x09
    428a:	9a 85       	ldd	r25, Y+10	; 0x0a
    428c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4290:	dc 01       	movw	r26, r24
    4292:	cb 01       	movw	r24, r22
    4294:	9e 83       	std	Y+6, r25	; 0x06
    4296:	8d 83       	std	Y+5, r24	; 0x05
    4298:	8d 81       	ldd	r24, Y+5	; 0x05
    429a:	9e 81       	ldd	r25, Y+6	; 0x06
    429c:	9a 83       	std	Y+2, r25	; 0x02
    429e:	89 83       	std	Y+1, r24	; 0x01
    42a0:	89 81       	ldd	r24, Y+1	; 0x01
    42a2:	9a 81       	ldd	r25, Y+2	; 0x02
    42a4:	01 97       	sbiw	r24, 0x01	; 1
    42a6:	f1 f7       	brne	.-4      	; 0x42a4 <KAYPAD_u8GetKey+0x122>
    42a8:	9a 83       	std	Y+2, r25	; 0x02
    42aa:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(25);
				temp=DIO_u8PGetPinValue(KEYPAD_PORT,Loc_u8RowCounter);
    42ac:	81 e0       	ldi	r24, 0x01	; 1
    42ae:	6c 89       	ldd	r22, Y+20	; 0x14
    42b0:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <DIO_u8PGetPinValue>
    42b4:	88 8b       	std	Y+16, r24	; 0x10
				if(temp==0){
    42b6:	88 89       	ldd	r24, Y+16	; 0x10
    42b8:	88 23       	and	r24, r24
    42ba:	a9 f4       	brne	.+42     	; 0x42e6 <KAYPAD_u8GetKey+0x164>
					value=arr[row][coulom];
    42bc:	8a 89       	ldd	r24, Y+18	; 0x12
    42be:	48 2f       	mov	r20, r24
    42c0:	50 e0       	ldi	r21, 0x00	; 0
    42c2:	89 89       	ldd	r24, Y+17	; 0x11
    42c4:	28 2f       	mov	r18, r24
    42c6:	30 e0       	ldi	r19, 0x00	; 0
    42c8:	ca 01       	movw	r24, r20
    42ca:	88 0f       	add	r24, r24
    42cc:	99 1f       	adc	r25, r25
    42ce:	88 0f       	add	r24, r24
    42d0:	99 1f       	adc	r25, r25
    42d2:	82 0f       	add	r24, r18
    42d4:	93 1f       	adc	r25, r19
    42d6:	fc 01       	movw	r30, r24
    42d8:	e3 55       	subi	r30, 0x53	; 83
    42da:	ff 4f       	sbci	r31, 0xFF	; 255
    42dc:	80 81       	ld	r24, Z
    42de:	8f 87       	std	Y+15, r24	; 0x0f
					return value;
    42e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    42e2:	8d 8b       	std	Y+21, r24	; 0x15
    42e4:	1b c0       	rjmp	.+54     	; 0x431c <KAYPAD_u8GetKey+0x19a>
				}
			}
			row--;
    42e6:	8a 89       	ldd	r24, Y+18	; 0x12
    42e8:	81 50       	subi	r24, 0x01	; 1
    42ea:	8a 8b       	std	Y+18, r24	; 0x12
	coulom=3;
	u8 value=9;
	for(Loc_u8CoulomsCounter=0;Loc_u8CoulomsCounter<4;Loc_u8CoulomsCounter++){
		DIO_vSetPinValue(KEYPAD_PORT,Loc_u8CoulomsCounter,Pin_Low);
		row=3;
		for(Loc_u8RowCounter=4;Loc_u8RowCounter<8;Loc_u8RowCounter++){
    42ec:	8c 89       	ldd	r24, Y+20	; 0x14
    42ee:	8f 5f       	subi	r24, 0xFF	; 255
    42f0:	8c 8b       	std	Y+20, r24	; 0x14
    42f2:	8c 89       	ldd	r24, Y+20	; 0x14
    42f4:	88 30       	cpi	r24, 0x08	; 8
    42f6:	08 f4       	brcc	.+2      	; 0x42fa <KAYPAD_u8GetKey+0x178>
    42f8:	5e cf       	rjmp	.-324    	; 0x41b6 <KAYPAD_u8GetKey+0x34>
					return value;
				}
			}
			row--;
		}
		coulom--;
    42fa:	89 89       	ldd	r24, Y+17	; 0x11
    42fc:	81 50       	subi	r24, 0x01	; 1
    42fe:	89 8b       	std	Y+17, r24	; 0x11
		DIO_vSetPinValue(KEYPAD_PORT,Loc_u8CoulomsCounter,Pin_High);
    4300:	81 e0       	ldi	r24, 0x01	; 1
    4302:	6b 89       	ldd	r22, Y+19	; 0x13
    4304:	41 e0       	ldi	r20, 0x01	; 1
    4306:	0e 94 9f 10 	call	0x213e	; 0x213e <DIO_vSetPinValue>
u8 KAYPAD_u8GetKey(){
	u8 Loc_u8RowCounter, Loc_u8CoulomsCounter;
	u8 row , coulom, temp;
	coulom=3;
	u8 value=9;
	for(Loc_u8CoulomsCounter=0;Loc_u8CoulomsCounter<4;Loc_u8CoulomsCounter++){
    430a:	8b 89       	ldd	r24, Y+19	; 0x13
    430c:	8f 5f       	subi	r24, 0xFF	; 255
    430e:	8b 8b       	std	Y+19, r24	; 0x13
    4310:	8b 89       	ldd	r24, Y+19	; 0x13
    4312:	84 30       	cpi	r24, 0x04	; 4
    4314:	08 f4       	brcc	.+2      	; 0x4318 <KAYPAD_u8GetKey+0x196>
    4316:	45 cf       	rjmp	.-374    	; 0x41a2 <KAYPAD_u8GetKey+0x20>
		}
		coulom--;
		DIO_vSetPinValue(KEYPAD_PORT,Loc_u8CoulomsCounter,Pin_High);
	}

	return 0xff;
    4318:	8f ef       	ldi	r24, 0xFF	; 255
    431a:	8d 8b       	std	Y+21, r24	; 0x15
    431c:	8d 89       	ldd	r24, Y+21	; 0x15
}
    431e:	65 96       	adiw	r28, 0x15	; 21
    4320:	0f b6       	in	r0, 0x3f	; 63
    4322:	f8 94       	cli
    4324:	de bf       	out	0x3e, r29	; 62
    4326:	0f be       	out	0x3f, r0	; 63
    4328:	cd bf       	out	0x3d, r28	; 61
    432a:	cf 91       	pop	r28
    432c:	df 91       	pop	r29
    432e:	08 95       	ret

00004330 <H_Bridge_vInit>:
 *
 *  Created on: Jan 18, 2023
 *      Author: a7med
 */
#include "H_Bridge.h"
void H_Bridge_vInit(){
    4330:	df 93       	push	r29
    4332:	cf 93       	push	r28
    4334:	cd b7       	in	r28, 0x3d	; 61
    4336:	de b7       	in	r29, 0x3e	; 62
	//----------- on this part motor1 is connected to 3y and VCC and motor2 is connected to 4y and Ground
	SET_BIT(DDRD,5);	//---- EN1
    4338:	a1 e3       	ldi	r26, 0x31	; 49
    433a:	b0 e0       	ldi	r27, 0x00	; 0
    433c:	e1 e3       	ldi	r30, 0x31	; 49
    433e:	f0 e0       	ldi	r31, 0x00	; 0
    4340:	80 81       	ld	r24, Z
    4342:	80 62       	ori	r24, 0x20	; 32
    4344:	8c 93       	st	X, r24
	SET_BIT(DDRC,5);	//--- 3A
    4346:	a4 e3       	ldi	r26, 0x34	; 52
    4348:	b0 e0       	ldi	r27, 0x00	; 0
    434a:	e4 e3       	ldi	r30, 0x34	; 52
    434c:	f0 e0       	ldi	r31, 0x00	; 0
    434e:	80 81       	ld	r24, Z
    4350:	80 62       	ori	r24, 0x20	; 32
    4352:	8c 93       	st	X, r24
	SET_BIT(DDRC,6);	//--- 4A
    4354:	a4 e3       	ldi	r26, 0x34	; 52
    4356:	b0 e0       	ldi	r27, 0x00	; 0
    4358:	e4 e3       	ldi	r30, 0x34	; 52
    435a:	f0 e0       	ldi	r31, 0x00	; 0
    435c:	80 81       	ld	r24, Z
    435e:	80 64       	ori	r24, 0x40	; 64
    4360:	8c 93       	st	X, r24
	//------- on this part the two motors are connected to 1Y and 2Y
	SET_BIT(DDRD,4);	//--- EN2
    4362:	a1 e3       	ldi	r26, 0x31	; 49
    4364:	b0 e0       	ldi	r27, 0x00	; 0
    4366:	e1 e3       	ldi	r30, 0x31	; 49
    4368:	f0 e0       	ldi	r31, 0x00	; 0
    436a:	80 81       	ld	r24, Z
    436c:	80 61       	ori	r24, 0x10	; 16
    436e:	8c 93       	st	X, r24
	SET_BIT(DDRC,3);	//--- 1A
    4370:	a4 e3       	ldi	r26, 0x34	; 52
    4372:	b0 e0       	ldi	r27, 0x00	; 0
    4374:	e4 e3       	ldi	r30, 0x34	; 52
    4376:	f0 e0       	ldi	r31, 0x00	; 0
    4378:	80 81       	ld	r24, Z
    437a:	88 60       	ori	r24, 0x08	; 8
    437c:	8c 93       	st	X, r24
	SET_BIT(DDRC,4);	//--- 2A
    437e:	a4 e3       	ldi	r26, 0x34	; 52
    4380:	b0 e0       	ldi	r27, 0x00	; 0
    4382:	e4 e3       	ldi	r30, 0x34	; 52
    4384:	f0 e0       	ldi	r31, 0x00	; 0
    4386:	80 81       	ld	r24, Z
    4388:	80 61       	ori	r24, 0x10	; 16
    438a:	8c 93       	st	X, r24
}
    438c:	cf 91       	pop	r28
    438e:	df 91       	pop	r29
    4390:	08 95       	ret

00004392 <H_Bridge_vRunM1AndStopM2>:
/* ---- Following 3 Functions if for ConnectionsToGroundAndVoltage ----*/
void H_Bridge_vRunM1AndStopM2(){
    4392:	df 93       	push	r29
    4394:	cf 93       	push	r28
    4396:	cd b7       	in	r28, 0x3d	; 61
    4398:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(PORTD,5);	//---EN1 High
    439a:	a2 e3       	ldi	r26, 0x32	; 50
    439c:	b0 e0       	ldi	r27, 0x00	; 0
    439e:	e2 e3       	ldi	r30, 0x32	; 50
    43a0:	f0 e0       	ldi	r31, 0x00	; 0
    43a2:	80 81       	ld	r24, Z
    43a4:	80 62       	ori	r24, 0x20	; 32
    43a6:	8c 93       	st	X, r24
	CLR_BIT(PORTC,5);	//---3A Low
    43a8:	a5 e3       	ldi	r26, 0x35	; 53
    43aa:	b0 e0       	ldi	r27, 0x00	; 0
    43ac:	e5 e3       	ldi	r30, 0x35	; 53
    43ae:	f0 e0       	ldi	r31, 0x00	; 0
    43b0:	80 81       	ld	r24, Z
    43b2:	8f 7d       	andi	r24, 0xDF	; 223
    43b4:	8c 93       	st	X, r24
	CLR_BIT(PORTC,6);	//---4A Low
    43b6:	a5 e3       	ldi	r26, 0x35	; 53
    43b8:	b0 e0       	ldi	r27, 0x00	; 0
    43ba:	e5 e3       	ldi	r30, 0x35	; 53
    43bc:	f0 e0       	ldi	r31, 0x00	; 0
    43be:	80 81       	ld	r24, Z
    43c0:	8f 7b       	andi	r24, 0xBF	; 191
    43c2:	8c 93       	st	X, r24
}
    43c4:	cf 91       	pop	r28
    43c6:	df 91       	pop	r29
    43c8:	08 95       	ret

000043ca <H_Bridge_vRunM2AndStopM1>:
void H_Bridge_vRunM2AndStopM1(){
    43ca:	df 93       	push	r29
    43cc:	cf 93       	push	r28
    43ce:	cd b7       	in	r28, 0x3d	; 61
    43d0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(PORTD,5);	//---EN1 High
    43d2:	a2 e3       	ldi	r26, 0x32	; 50
    43d4:	b0 e0       	ldi	r27, 0x00	; 0
    43d6:	e2 e3       	ldi	r30, 0x32	; 50
    43d8:	f0 e0       	ldi	r31, 0x00	; 0
    43da:	80 81       	ld	r24, Z
    43dc:	80 62       	ori	r24, 0x20	; 32
    43de:	8c 93       	st	X, r24
	SET_BIT(PORTC,5);	//---3A High
    43e0:	a5 e3       	ldi	r26, 0x35	; 53
    43e2:	b0 e0       	ldi	r27, 0x00	; 0
    43e4:	e5 e3       	ldi	r30, 0x35	; 53
    43e6:	f0 e0       	ldi	r31, 0x00	; 0
    43e8:	80 81       	ld	r24, Z
    43ea:	80 62       	ori	r24, 0x20	; 32
    43ec:	8c 93       	st	X, r24
	SET_BIT(PORTC,6);	//---4A High
    43ee:	a5 e3       	ldi	r26, 0x35	; 53
    43f0:	b0 e0       	ldi	r27, 0x00	; 0
    43f2:	e5 e3       	ldi	r30, 0x35	; 53
    43f4:	f0 e0       	ldi	r31, 0x00	; 0
    43f6:	80 81       	ld	r24, Z
    43f8:	80 64       	ori	r24, 0x40	; 64
    43fa:	8c 93       	st	X, r24
}
    43fc:	cf 91       	pop	r28
    43fe:	df 91       	pop	r29
    4400:	08 95       	ret

00004402 <H_Bridge_vM1AndM2FreeRuningStop>:
void H_Bridge_vM1AndM2FreeRuningStop(){
    4402:	df 93       	push	r29
    4404:	cf 93       	push	r28
    4406:	cd b7       	in	r28, 0x3d	; 61
    4408:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(PORTD,5);	//---EN1 Low
    440a:	a2 e3       	ldi	r26, 0x32	; 50
    440c:	b0 e0       	ldi	r27, 0x00	; 0
    440e:	e2 e3       	ldi	r30, 0x32	; 50
    4410:	f0 e0       	ldi	r31, 0x00	; 0
    4412:	80 81       	ld	r24, Z
    4414:	8f 7d       	andi	r24, 0xDF	; 223
    4416:	8c 93       	st	X, r24
}
    4418:	cf 91       	pop	r28
    441a:	df 91       	pop	r29
    441c:	08 95       	ret

0000441e <H_Bridge_vM1AndM2TurnRight>:
/* ---- Following Functions if for BidirectionalDCMotorControl ----*/
void H_Bridge_vM1AndM2TurnRight(){
    441e:	df 93       	push	r29
    4420:	cf 93       	push	r28
    4422:	cd b7       	in	r28, 0x3d	; 61
    4424:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(PORTD,4);	//--- EN2 High
    4426:	a2 e3       	ldi	r26, 0x32	; 50
    4428:	b0 e0       	ldi	r27, 0x00	; 0
    442a:	e2 e3       	ldi	r30, 0x32	; 50
    442c:	f0 e0       	ldi	r31, 0x00	; 0
    442e:	80 81       	ld	r24, Z
    4430:	80 61       	ori	r24, 0x10	; 16
    4432:	8c 93       	st	X, r24
	CLR_BIT(PORTC,3);	//--- 1A Low
    4434:	a5 e3       	ldi	r26, 0x35	; 53
    4436:	b0 e0       	ldi	r27, 0x00	; 0
    4438:	e5 e3       	ldi	r30, 0x35	; 53
    443a:	f0 e0       	ldi	r31, 0x00	; 0
    443c:	80 81       	ld	r24, Z
    443e:	87 7f       	andi	r24, 0xF7	; 247
    4440:	8c 93       	st	X, r24
	SET_BIT(PORTC,4);	//--- 2A High
    4442:	a5 e3       	ldi	r26, 0x35	; 53
    4444:	b0 e0       	ldi	r27, 0x00	; 0
    4446:	e5 e3       	ldi	r30, 0x35	; 53
    4448:	f0 e0       	ldi	r31, 0x00	; 0
    444a:	80 81       	ld	r24, Z
    444c:	80 61       	ori	r24, 0x10	; 16
    444e:	8c 93       	st	X, r24
}
    4450:	cf 91       	pop	r28
    4452:	df 91       	pop	r29
    4454:	08 95       	ret

00004456 <H_Bridge_vM1AndM2TurnLeft>:
void H_Bridge_vM1AndM2TurnLeft(){
    4456:	df 93       	push	r29
    4458:	cf 93       	push	r28
    445a:	cd b7       	in	r28, 0x3d	; 61
    445c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(PORTD,4);	//--- EN2 High
    445e:	a2 e3       	ldi	r26, 0x32	; 50
    4460:	b0 e0       	ldi	r27, 0x00	; 0
    4462:	e2 e3       	ldi	r30, 0x32	; 50
    4464:	f0 e0       	ldi	r31, 0x00	; 0
    4466:	80 81       	ld	r24, Z
    4468:	80 61       	ori	r24, 0x10	; 16
    446a:	8c 93       	st	X, r24
	SET_BIT(PORTC,3);	//--- 1A High
    446c:	a5 e3       	ldi	r26, 0x35	; 53
    446e:	b0 e0       	ldi	r27, 0x00	; 0
    4470:	e5 e3       	ldi	r30, 0x35	; 53
    4472:	f0 e0       	ldi	r31, 0x00	; 0
    4474:	80 81       	ld	r24, Z
    4476:	88 60       	ori	r24, 0x08	; 8
    4478:	8c 93       	st	X, r24
	CLR_BIT(PORTC,4);	//--- 2A Low
    447a:	a5 e3       	ldi	r26, 0x35	; 53
    447c:	b0 e0       	ldi	r27, 0x00	; 0
    447e:	e5 e3       	ldi	r30, 0x35	; 53
    4480:	f0 e0       	ldi	r31, 0x00	; 0
    4482:	80 81       	ld	r24, Z
    4484:	8f 7e       	andi	r24, 0xEF	; 239
    4486:	8c 93       	st	X, r24
}
    4488:	cf 91       	pop	r28
    448a:	df 91       	pop	r29
    448c:	08 95       	ret

0000448e <H_Bridge_vM1AndM2FastStop>:
void H_Bridge_vM1AndM2FastStop(){
    448e:	df 93       	push	r29
    4490:	cf 93       	push	r28
    4492:	cd b7       	in	r28, 0x3d	; 61
    4494:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(PORTD,4);	//--- EN2 Low
    4496:	a2 e3       	ldi	r26, 0x32	; 50
    4498:	b0 e0       	ldi	r27, 0x00	; 0
    449a:	e2 e3       	ldi	r30, 0x32	; 50
    449c:	f0 e0       	ldi	r31, 0x00	; 0
    449e:	80 81       	ld	r24, Z
    44a0:	8f 7e       	andi	r24, 0xEF	; 239
    44a2:	8c 93       	st	X, r24
}
    44a4:	cf 91       	pop	r28
    44a6:	df 91       	pop	r29
    44a8:	08 95       	ret

000044aa <APP_vPrintNumberSS>:
 *      Author: a7medDawoud
 */
#include "APP.h"

//------------ this function take two u8 numbers and print them on the 7Segme at the same time-----
void APP_vPrintNumberSS(u8 loc_u8SegmaPrintNumber1, u8 loc_u8SegmaPrintNumber2){
    44aa:	df 93       	push	r29
    44ac:	cf 93       	push	r28
    44ae:	cd b7       	in	r28, 0x3d	; 61
    44b0:	de b7       	in	r29, 0x3e	; 62
    44b2:	a0 97       	sbiw	r28, 0x20	; 32
    44b4:	0f b6       	in	r0, 0x3f	; 63
    44b6:	f8 94       	cli
    44b8:	de bf       	out	0x3e, r29	; 62
    44ba:	0f be       	out	0x3f, r0	; 63
    44bc:	cd bf       	out	0x3d, r28	; 61
    44be:	8f 8f       	std	Y+31, r24	; 0x1f
    44c0:	68 a3       	std	Y+32, r22	; 0x20
	_7Segma_vInit();
    44c2:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <_7Segma_vInit>
	u16 loc_delay;
	for(loc_delay=0;loc_delay<100;loc_delay++){
    44c6:	1e 8e       	std	Y+30, r1	; 0x1e
    44c8:	1d 8e       	std	Y+29, r1	; 0x1d
    44ca:	ef c0       	rjmp	.+478    	; 0x46aa <APP_vPrintNumberSS+0x200>
		_7Segma_vPrintNumber1(loc_u8SegmaPrintNumber1);
    44cc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    44ce:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <_7Segma_vPrintNumber1>
    44d2:	80 e0       	ldi	r24, 0x00	; 0
    44d4:	90 e0       	ldi	r25, 0x00	; 0
    44d6:	a0 e8       	ldi	r26, 0x80	; 128
    44d8:	bf e3       	ldi	r27, 0x3F	; 63
    44da:	89 8f       	std	Y+25, r24	; 0x19
    44dc:	9a 8f       	std	Y+26, r25	; 0x1a
    44de:	ab 8f       	std	Y+27, r26	; 0x1b
    44e0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44e2:	69 8d       	ldd	r22, Y+25	; 0x19
    44e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    44e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    44e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    44ea:	20 e0       	ldi	r18, 0x00	; 0
    44ec:	30 e0       	ldi	r19, 0x00	; 0
    44ee:	4a e7       	ldi	r20, 0x7A	; 122
    44f0:	55 e4       	ldi	r21, 0x45	; 69
    44f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44f6:	dc 01       	movw	r26, r24
    44f8:	cb 01       	movw	r24, r22
    44fa:	8d 8b       	std	Y+21, r24	; 0x15
    44fc:	9e 8b       	std	Y+22, r25	; 0x16
    44fe:	af 8b       	std	Y+23, r26	; 0x17
    4500:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4502:	6d 89       	ldd	r22, Y+21	; 0x15
    4504:	7e 89       	ldd	r23, Y+22	; 0x16
    4506:	8f 89       	ldd	r24, Y+23	; 0x17
    4508:	98 8d       	ldd	r25, Y+24	; 0x18
    450a:	20 e0       	ldi	r18, 0x00	; 0
    450c:	30 e0       	ldi	r19, 0x00	; 0
    450e:	40 e8       	ldi	r20, 0x80	; 128
    4510:	5f e3       	ldi	r21, 0x3F	; 63
    4512:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4516:	88 23       	and	r24, r24
    4518:	2c f4       	brge	.+10     	; 0x4524 <APP_vPrintNumberSS+0x7a>
		__ticks = 1;
    451a:	81 e0       	ldi	r24, 0x01	; 1
    451c:	90 e0       	ldi	r25, 0x00	; 0
    451e:	9c 8b       	std	Y+20, r25	; 0x14
    4520:	8b 8b       	std	Y+19, r24	; 0x13
    4522:	3f c0       	rjmp	.+126    	; 0x45a2 <APP_vPrintNumberSS+0xf8>
	else if (__tmp > 65535)
    4524:	6d 89       	ldd	r22, Y+21	; 0x15
    4526:	7e 89       	ldd	r23, Y+22	; 0x16
    4528:	8f 89       	ldd	r24, Y+23	; 0x17
    452a:	98 8d       	ldd	r25, Y+24	; 0x18
    452c:	20 e0       	ldi	r18, 0x00	; 0
    452e:	3f ef       	ldi	r19, 0xFF	; 255
    4530:	4f e7       	ldi	r20, 0x7F	; 127
    4532:	57 e4       	ldi	r21, 0x47	; 71
    4534:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4538:	18 16       	cp	r1, r24
    453a:	4c f5       	brge	.+82     	; 0x458e <APP_vPrintNumberSS+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    453c:	69 8d       	ldd	r22, Y+25	; 0x19
    453e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4540:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4542:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4544:	20 e0       	ldi	r18, 0x00	; 0
    4546:	30 e0       	ldi	r19, 0x00	; 0
    4548:	40 e2       	ldi	r20, 0x20	; 32
    454a:	51 e4       	ldi	r21, 0x41	; 65
    454c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4550:	dc 01       	movw	r26, r24
    4552:	cb 01       	movw	r24, r22
    4554:	bc 01       	movw	r22, r24
    4556:	cd 01       	movw	r24, r26
    4558:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    455c:	dc 01       	movw	r26, r24
    455e:	cb 01       	movw	r24, r22
    4560:	9c 8b       	std	Y+20, r25	; 0x14
    4562:	8b 8b       	std	Y+19, r24	; 0x13
    4564:	0f c0       	rjmp	.+30     	; 0x4584 <APP_vPrintNumberSS+0xda>
    4566:	80 e9       	ldi	r24, 0x90	; 144
    4568:	91 e0       	ldi	r25, 0x01	; 1
    456a:	9a 8b       	std	Y+18, r25	; 0x12
    456c:	89 8b       	std	Y+17, r24	; 0x11
    456e:	89 89       	ldd	r24, Y+17	; 0x11
    4570:	9a 89       	ldd	r25, Y+18	; 0x12
    4572:	01 97       	sbiw	r24, 0x01	; 1
    4574:	f1 f7       	brne	.-4      	; 0x4572 <APP_vPrintNumberSS+0xc8>
    4576:	9a 8b       	std	Y+18, r25	; 0x12
    4578:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    457a:	8b 89       	ldd	r24, Y+19	; 0x13
    457c:	9c 89       	ldd	r25, Y+20	; 0x14
    457e:	01 97       	sbiw	r24, 0x01	; 1
    4580:	9c 8b       	std	Y+20, r25	; 0x14
    4582:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4584:	8b 89       	ldd	r24, Y+19	; 0x13
    4586:	9c 89       	ldd	r25, Y+20	; 0x14
    4588:	00 97       	sbiw	r24, 0x00	; 0
    458a:	69 f7       	brne	.-38     	; 0x4566 <APP_vPrintNumberSS+0xbc>
    458c:	14 c0       	rjmp	.+40     	; 0x45b6 <APP_vPrintNumberSS+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    458e:	6d 89       	ldd	r22, Y+21	; 0x15
    4590:	7e 89       	ldd	r23, Y+22	; 0x16
    4592:	8f 89       	ldd	r24, Y+23	; 0x17
    4594:	98 8d       	ldd	r25, Y+24	; 0x18
    4596:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    459a:	dc 01       	movw	r26, r24
    459c:	cb 01       	movw	r24, r22
    459e:	9c 8b       	std	Y+20, r25	; 0x14
    45a0:	8b 8b       	std	Y+19, r24	; 0x13
    45a2:	8b 89       	ldd	r24, Y+19	; 0x13
    45a4:	9c 89       	ldd	r25, Y+20	; 0x14
    45a6:	98 8b       	std	Y+16, r25	; 0x10
    45a8:	8f 87       	std	Y+15, r24	; 0x0f
    45aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    45ac:	98 89       	ldd	r25, Y+16	; 0x10
    45ae:	01 97       	sbiw	r24, 0x01	; 1
    45b0:	f1 f7       	brne	.-4      	; 0x45ae <APP_vPrintNumberSS+0x104>
    45b2:	98 8b       	std	Y+16, r25	; 0x10
    45b4:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		_7Segma_vPrintNumber2(loc_u8SegmaPrintNumber2);
    45b6:	88 a1       	ldd	r24, Y+32	; 0x20
    45b8:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <_7Segma_vPrintNumber2>
    45bc:	80 e0       	ldi	r24, 0x00	; 0
    45be:	90 e0       	ldi	r25, 0x00	; 0
    45c0:	a0 e8       	ldi	r26, 0x80	; 128
    45c2:	bf e3       	ldi	r27, 0x3F	; 63
    45c4:	8b 87       	std	Y+11, r24	; 0x0b
    45c6:	9c 87       	std	Y+12, r25	; 0x0c
    45c8:	ad 87       	std	Y+13, r26	; 0x0d
    45ca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    45ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    45d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    45d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    45d4:	20 e0       	ldi	r18, 0x00	; 0
    45d6:	30 e0       	ldi	r19, 0x00	; 0
    45d8:	4a e7       	ldi	r20, 0x7A	; 122
    45da:	55 e4       	ldi	r21, 0x45	; 69
    45dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45e0:	dc 01       	movw	r26, r24
    45e2:	cb 01       	movw	r24, r22
    45e4:	8f 83       	std	Y+7, r24	; 0x07
    45e6:	98 87       	std	Y+8, r25	; 0x08
    45e8:	a9 87       	std	Y+9, r26	; 0x09
    45ea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    45ec:	6f 81       	ldd	r22, Y+7	; 0x07
    45ee:	78 85       	ldd	r23, Y+8	; 0x08
    45f0:	89 85       	ldd	r24, Y+9	; 0x09
    45f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    45f4:	20 e0       	ldi	r18, 0x00	; 0
    45f6:	30 e0       	ldi	r19, 0x00	; 0
    45f8:	40 e8       	ldi	r20, 0x80	; 128
    45fa:	5f e3       	ldi	r21, 0x3F	; 63
    45fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4600:	88 23       	and	r24, r24
    4602:	2c f4       	brge	.+10     	; 0x460e <APP_vPrintNumberSS+0x164>
		__ticks = 1;
    4604:	81 e0       	ldi	r24, 0x01	; 1
    4606:	90 e0       	ldi	r25, 0x00	; 0
    4608:	9e 83       	std	Y+6, r25	; 0x06
    460a:	8d 83       	std	Y+5, r24	; 0x05
    460c:	3f c0       	rjmp	.+126    	; 0x468c <APP_vPrintNumberSS+0x1e2>
	else if (__tmp > 65535)
    460e:	6f 81       	ldd	r22, Y+7	; 0x07
    4610:	78 85       	ldd	r23, Y+8	; 0x08
    4612:	89 85       	ldd	r24, Y+9	; 0x09
    4614:	9a 85       	ldd	r25, Y+10	; 0x0a
    4616:	20 e0       	ldi	r18, 0x00	; 0
    4618:	3f ef       	ldi	r19, 0xFF	; 255
    461a:	4f e7       	ldi	r20, 0x7F	; 127
    461c:	57 e4       	ldi	r21, 0x47	; 71
    461e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4622:	18 16       	cp	r1, r24
    4624:	4c f5       	brge	.+82     	; 0x4678 <APP_vPrintNumberSS+0x1ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4626:	6b 85       	ldd	r22, Y+11	; 0x0b
    4628:	7c 85       	ldd	r23, Y+12	; 0x0c
    462a:	8d 85       	ldd	r24, Y+13	; 0x0d
    462c:	9e 85       	ldd	r25, Y+14	; 0x0e
    462e:	20 e0       	ldi	r18, 0x00	; 0
    4630:	30 e0       	ldi	r19, 0x00	; 0
    4632:	40 e2       	ldi	r20, 0x20	; 32
    4634:	51 e4       	ldi	r21, 0x41	; 65
    4636:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    463a:	dc 01       	movw	r26, r24
    463c:	cb 01       	movw	r24, r22
    463e:	bc 01       	movw	r22, r24
    4640:	cd 01       	movw	r24, r26
    4642:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4646:	dc 01       	movw	r26, r24
    4648:	cb 01       	movw	r24, r22
    464a:	9e 83       	std	Y+6, r25	; 0x06
    464c:	8d 83       	std	Y+5, r24	; 0x05
    464e:	0f c0       	rjmp	.+30     	; 0x466e <APP_vPrintNumberSS+0x1c4>
    4650:	80 e9       	ldi	r24, 0x90	; 144
    4652:	91 e0       	ldi	r25, 0x01	; 1
    4654:	9c 83       	std	Y+4, r25	; 0x04
    4656:	8b 83       	std	Y+3, r24	; 0x03
    4658:	8b 81       	ldd	r24, Y+3	; 0x03
    465a:	9c 81       	ldd	r25, Y+4	; 0x04
    465c:	01 97       	sbiw	r24, 0x01	; 1
    465e:	f1 f7       	brne	.-4      	; 0x465c <APP_vPrintNumberSS+0x1b2>
    4660:	9c 83       	std	Y+4, r25	; 0x04
    4662:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4664:	8d 81       	ldd	r24, Y+5	; 0x05
    4666:	9e 81       	ldd	r25, Y+6	; 0x06
    4668:	01 97       	sbiw	r24, 0x01	; 1
    466a:	9e 83       	std	Y+6, r25	; 0x06
    466c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    466e:	8d 81       	ldd	r24, Y+5	; 0x05
    4670:	9e 81       	ldd	r25, Y+6	; 0x06
    4672:	00 97       	sbiw	r24, 0x00	; 0
    4674:	69 f7       	brne	.-38     	; 0x4650 <APP_vPrintNumberSS+0x1a6>
    4676:	14 c0       	rjmp	.+40     	; 0x46a0 <APP_vPrintNumberSS+0x1f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4678:	6f 81       	ldd	r22, Y+7	; 0x07
    467a:	78 85       	ldd	r23, Y+8	; 0x08
    467c:	89 85       	ldd	r24, Y+9	; 0x09
    467e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4680:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4684:	dc 01       	movw	r26, r24
    4686:	cb 01       	movw	r24, r22
    4688:	9e 83       	std	Y+6, r25	; 0x06
    468a:	8d 83       	std	Y+5, r24	; 0x05
    468c:	8d 81       	ldd	r24, Y+5	; 0x05
    468e:	9e 81       	ldd	r25, Y+6	; 0x06
    4690:	9a 83       	std	Y+2, r25	; 0x02
    4692:	89 83       	std	Y+1, r24	; 0x01
    4694:	89 81       	ldd	r24, Y+1	; 0x01
    4696:	9a 81       	ldd	r25, Y+2	; 0x02
    4698:	01 97       	sbiw	r24, 0x01	; 1
    469a:	f1 f7       	brne	.-4      	; 0x4698 <APP_vPrintNumberSS+0x1ee>
    469c:	9a 83       	std	Y+2, r25	; 0x02
    469e:	89 83       	std	Y+1, r24	; 0x01

//------------ this function take two u8 numbers and print them on the 7Segme at the same time-----
void APP_vPrintNumberSS(u8 loc_u8SegmaPrintNumber1, u8 loc_u8SegmaPrintNumber2){
	_7Segma_vInit();
	u16 loc_delay;
	for(loc_delay=0;loc_delay<100;loc_delay++){
    46a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    46a2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    46a4:	01 96       	adiw	r24, 0x01	; 1
    46a6:	9e 8f       	std	Y+30, r25	; 0x1e
    46a8:	8d 8f       	std	Y+29, r24	; 0x1d
    46aa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    46ac:	9e 8d       	ldd	r25, Y+30	; 0x1e
    46ae:	84 36       	cpi	r24, 0x64	; 100
    46b0:	91 05       	cpc	r25, r1
    46b2:	08 f4       	brcc	.+2      	; 0x46b6 <APP_vPrintNumberSS+0x20c>
    46b4:	0b cf       	rjmp	.-490    	; 0x44cc <APP_vPrintNumberSS+0x22>
		_7Segma_vPrintNumber1(loc_u8SegmaPrintNumber1);
		_delay_ms(1);
		_7Segma_vPrintNumber2(loc_u8SegmaPrintNumber2);
		_delay_ms(1);
	}
}
    46b6:	a0 96       	adiw	r28, 0x20	; 32
    46b8:	0f b6       	in	r0, 0x3f	; 63
    46ba:	f8 94       	cli
    46bc:	de bf       	out	0x3e, r29	; 62
    46be:	0f be       	out	0x3f, r0	; 63
    46c0:	cd bf       	out	0x3d, r28	; 61
    46c2:	cf 91       	pop	r28
    46c4:	df 91       	pop	r29
    46c6:	08 95       	ret

000046c8 <APP_vPrintTwoDigitNumberSS>:
void APP_vPrintTwoDigitNumberSS(u8 loc_u8SegmaPrintNumber){
    46c8:	df 93       	push	r29
    46ca:	cf 93       	push	r28
    46cc:	0f 92       	push	r0
    46ce:	cd b7       	in	r28, 0x3d	; 61
    46d0:	de b7       	in	r29, 0x3e	; 62
    46d2:	89 83       	std	Y+1, r24	; 0x01
	APP_vPrintNumberSS(loc_u8SegmaPrintNumber/10, loc_u8SegmaPrintNumber%10);
    46d4:	89 81       	ldd	r24, Y+1	; 0x01
    46d6:	9a e0       	ldi	r25, 0x0A	; 10
    46d8:	69 2f       	mov	r22, r25
    46da:	0e 94 f5 34 	call	0x69ea	; 0x69ea <__udivmodqi4>
    46de:	28 2f       	mov	r18, r24
    46e0:	89 81       	ldd	r24, Y+1	; 0x01
    46e2:	9a e0       	ldi	r25, 0x0A	; 10
    46e4:	69 2f       	mov	r22, r25
    46e6:	0e 94 f5 34 	call	0x69ea	; 0x69ea <__udivmodqi4>
    46ea:	89 2f       	mov	r24, r25
    46ec:	98 2f       	mov	r25, r24
    46ee:	82 2f       	mov	r24, r18
    46f0:	69 2f       	mov	r22, r25
    46f2:	0e 94 55 22 	call	0x44aa	; 0x44aa <APP_vPrintNumberSS>
}
    46f6:	0f 90       	pop	r0
    46f8:	cf 91       	pop	r28
    46fa:	df 91       	pop	r29
    46fc:	08 95       	ret

000046fe <APP_vPrintDecimalNumberSS>:
//------------ this function take a f32 number and print it on the 7Segme-----
void APP_vPrintDecimalNumberSS(f32 loc_f32SegmaDecimalNumber){
    46fe:	df 93       	push	r29
    4700:	cf 93       	push	r28
    4702:	00 d0       	rcall	.+0      	; 0x4704 <APP_vPrintDecimalNumberSS+0x6>
    4704:	00 d0       	rcall	.+0      	; 0x4706 <APP_vPrintDecimalNumberSS+0x8>
    4706:	00 d0       	rcall	.+0      	; 0x4708 <APP_vPrintDecimalNumberSS+0xa>
    4708:	cd b7       	in	r28, 0x3d	; 61
    470a:	de b7       	in	r29, 0x3e	; 62
    470c:	6b 83       	std	Y+3, r22	; 0x03
    470e:	7c 83       	std	Y+4, r23	; 0x04
    4710:	8d 83       	std	Y+5, r24	; 0x05
    4712:	9e 83       	std	Y+6, r25	; 0x06
	//------------ DECIMAL POINT PIN------
	DIO_vSetPinDirection(PortB, Pin3, Pin_OutPut);
    4714:	81 e0       	ldi	r24, 0x01	; 1
    4716:	63 e0       	ldi	r22, 0x03	; 3
    4718:	41 e0       	ldi	r20, 0x01	; 1
    471a:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <DIO_vSetPinDirection>
	u16 Loc_u16SegmaNumber=(loc_f32SegmaDecimalNumber*10);
    471e:	6b 81       	ldd	r22, Y+3	; 0x03
    4720:	7c 81       	ldd	r23, Y+4	; 0x04
    4722:	8d 81       	ldd	r24, Y+5	; 0x05
    4724:	9e 81       	ldd	r25, Y+6	; 0x06
    4726:	20 e0       	ldi	r18, 0x00	; 0
    4728:	30 e0       	ldi	r19, 0x00	; 0
    472a:	40 e2       	ldi	r20, 0x20	; 32
    472c:	51 e4       	ldi	r21, 0x41	; 65
    472e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4732:	dc 01       	movw	r26, r24
    4734:	cb 01       	movw	r24, r22
    4736:	bc 01       	movw	r22, r24
    4738:	cd 01       	movw	r24, r26
    473a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    473e:	dc 01       	movw	r26, r24
    4740:	cb 01       	movw	r24, r22
    4742:	9a 83       	std	Y+2, r25	; 0x02
    4744:	89 83       	std	Y+1, r24	; 0x01
	_7Segma_vEnableDot();
    4746:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <_7Segma_vEnableDot>
	APP_vPrintNumberSS(Loc_u16SegmaNumber/10, Loc_u16SegmaNumber%10);
    474a:	89 81       	ldd	r24, Y+1	; 0x01
    474c:	9a 81       	ldd	r25, Y+2	; 0x02
    474e:	2a e0       	ldi	r18, 0x0A	; 10
    4750:	30 e0       	ldi	r19, 0x00	; 0
    4752:	b9 01       	movw	r22, r18
    4754:	0e 94 01 35 	call	0x6a02	; 0x6a02 <__udivmodhi4>
    4758:	cb 01       	movw	r24, r22
    475a:	48 2f       	mov	r20, r24
    475c:	89 81       	ldd	r24, Y+1	; 0x01
    475e:	9a 81       	ldd	r25, Y+2	; 0x02
    4760:	2a e0       	ldi	r18, 0x0A	; 10
    4762:	30 e0       	ldi	r19, 0x00	; 0
    4764:	b9 01       	movw	r22, r18
    4766:	0e 94 01 35 	call	0x6a02	; 0x6a02 <__udivmodhi4>
    476a:	98 2f       	mov	r25, r24
    476c:	84 2f       	mov	r24, r20
    476e:	69 2f       	mov	r22, r25
    4770:	0e 94 55 22 	call	0x44aa	; 0x44aa <APP_vPrintNumberSS>
	_7Segma_vDisbleDot();
    4774:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <_7Segma_vDisbleDot>
}
    4778:	26 96       	adiw	r28, 0x06	; 6
    477a:	0f b6       	in	r0, 0x3f	; 63
    477c:	f8 94       	cli
    477e:	de bf       	out	0x3e, r29	; 62
    4780:	0f be       	out	0x3f, r0	; 63
    4782:	cd bf       	out	0x3d, r28	; 61
    4784:	cf 91       	pop	r28
    4786:	df 91       	pop	r29
    4788:	08 95       	ret

0000478a <APP_vPrint0to99SS>:
//--------------- this function is used to print from 00 to 99--------
void APP_vPrint0to99SS(){
    478a:	df 93       	push	r29
    478c:	cf 93       	push	r28
    478e:	00 d0       	rcall	.+0      	; 0x4790 <APP_vPrint0to99SS+0x6>
    4790:	cd b7       	in	r28, 0x3d	; 61
    4792:	de b7       	in	r29, 0x3e	; 62
	u8 Loc_Count,Loc_Count2;
	for(Loc_Count=0;Loc_Count<10;Loc_Count++){
    4794:	1a 82       	std	Y+2, r1	; 0x02
    4796:	0f c0       	rjmp	.+30     	; 0x47b6 <APP_vPrint0to99SS+0x2c>
		for(Loc_Count2=0;Loc_Count2<10;Loc_Count2++){
    4798:	19 82       	std	Y+1, r1	; 0x01
    479a:	07 c0       	rjmp	.+14     	; 0x47aa <APP_vPrint0to99SS+0x20>
			APP_vPrintNumberSS(Loc_Count,Loc_Count2);
    479c:	8a 81       	ldd	r24, Y+2	; 0x02
    479e:	69 81       	ldd	r22, Y+1	; 0x01
    47a0:	0e 94 55 22 	call	0x44aa	; 0x44aa <APP_vPrintNumberSS>
}
//--------------- this function is used to print from 00 to 99--------
void APP_vPrint0to99SS(){
	u8 Loc_Count,Loc_Count2;
	for(Loc_Count=0;Loc_Count<10;Loc_Count++){
		for(Loc_Count2=0;Loc_Count2<10;Loc_Count2++){
    47a4:	89 81       	ldd	r24, Y+1	; 0x01
    47a6:	8f 5f       	subi	r24, 0xFF	; 255
    47a8:	89 83       	std	Y+1, r24	; 0x01
    47aa:	89 81       	ldd	r24, Y+1	; 0x01
    47ac:	8a 30       	cpi	r24, 0x0A	; 10
    47ae:	b0 f3       	brcs	.-20     	; 0x479c <APP_vPrint0to99SS+0x12>
	_7Segma_vDisbleDot();
}
//--------------- this function is used to print from 00 to 99--------
void APP_vPrint0to99SS(){
	u8 Loc_Count,Loc_Count2;
	for(Loc_Count=0;Loc_Count<10;Loc_Count++){
    47b0:	8a 81       	ldd	r24, Y+2	; 0x02
    47b2:	8f 5f       	subi	r24, 0xFF	; 255
    47b4:	8a 83       	std	Y+2, r24	; 0x02
    47b6:	8a 81       	ldd	r24, Y+2	; 0x02
    47b8:	8a 30       	cpi	r24, 0x0A	; 10
    47ba:	70 f3       	brcs	.-36     	; 0x4798 <APP_vPrint0to99SS+0xe>
		for(Loc_Count2=0;Loc_Count2<10;Loc_Count2++){
			APP_vPrintNumberSS(Loc_Count,Loc_Count2);
		}
	}
}
    47bc:	0f 90       	pop	r0
    47be:	0f 90       	pop	r0
    47c0:	cf 91       	pop	r28
    47c2:	df 91       	pop	r29
    47c4:	08 95       	ret

000047c6 <APP_vPrint1MinuteSS>:
//--------------- this function is used to print 1 minute on the 7 segma--------
void APP_vPrint1MinuteSS(){
    47c6:	df 93       	push	r29
    47c8:	cf 93       	push	r28
    47ca:	00 d0       	rcall	.+0      	; 0x47cc <APP_vPrint1MinuteSS+0x6>
    47cc:	cd b7       	in	r28, 0x3d	; 61
    47ce:	de b7       	in	r29, 0x3e	; 62
	u8 Loc_Count,loc_delay;
	for(Loc_Count=0;Loc_Count<=60;Loc_Count++){
    47d0:	1a 82       	std	Y+2, r1	; 0x02
    47d2:	0e c0       	rjmp	.+28     	; 0x47f0 <APP_vPrint1MinuteSS+0x2a>
		for(loc_delay=0;loc_delay<4;loc_delay++){
    47d4:	19 82       	std	Y+1, r1	; 0x01
    47d6:	06 c0       	rjmp	.+12     	; 0x47e4 <APP_vPrint1MinuteSS+0x1e>
			APP_vPrintTwoDigitNumberSS(Loc_Count);
    47d8:	8a 81       	ldd	r24, Y+2	; 0x02
    47da:	0e 94 64 23 	call	0x46c8	; 0x46c8 <APP_vPrintTwoDigitNumberSS>
}
//--------------- this function is used to print 1 minute on the 7 segma--------
void APP_vPrint1MinuteSS(){
	u8 Loc_Count,loc_delay;
	for(Loc_Count=0;Loc_Count<=60;Loc_Count++){
		for(loc_delay=0;loc_delay<4;loc_delay++){
    47de:	89 81       	ldd	r24, Y+1	; 0x01
    47e0:	8f 5f       	subi	r24, 0xFF	; 255
    47e2:	89 83       	std	Y+1, r24	; 0x01
    47e4:	89 81       	ldd	r24, Y+1	; 0x01
    47e6:	84 30       	cpi	r24, 0x04	; 4
    47e8:	b8 f3       	brcs	.-18     	; 0x47d8 <APP_vPrint1MinuteSS+0x12>
	}
}
//--------------- this function is used to print 1 minute on the 7 segma--------
void APP_vPrint1MinuteSS(){
	u8 Loc_Count,loc_delay;
	for(Loc_Count=0;Loc_Count<=60;Loc_Count++){
    47ea:	8a 81       	ldd	r24, Y+2	; 0x02
    47ec:	8f 5f       	subi	r24, 0xFF	; 255
    47ee:	8a 83       	std	Y+2, r24	; 0x02
    47f0:	8a 81       	ldd	r24, Y+2	; 0x02
    47f2:	8d 33       	cpi	r24, 0x3D	; 61
    47f4:	78 f3       	brcs	.-34     	; 0x47d4 <APP_vPrint1MinuteSS+0xe>
		for(loc_delay=0;loc_delay<4;loc_delay++){
			APP_vPrintTwoDigitNumberSS(Loc_Count);
		}
	}
}
    47f6:	0f 90       	pop	r0
    47f8:	0f 90       	pop	r0
    47fa:	cf 91       	pop	r28
    47fc:	df 91       	pop	r29
    47fe:	08 95       	ret

00004800 <APP_vClickCounterPB>:
/*--------------- this function is used to count the
 * (number clicks on pushbutton 1 Subtracted from number clicks on pushbutton 2)
 * and print it on the 7Segma*/
void APP_vClickCounterPB(){
    4800:	df 93       	push	r29
    4802:	cf 93       	push	r28
    4804:	0f 92       	push	r0
    4806:	cd b7       	in	r28, 0x3d	; 61
    4808:	de b7       	in	r29, 0x3e	; 62
	u8 Loc_Count;
	for(Loc_Count=0;Loc_Count<100;){
    480a:	19 82       	std	Y+1, r1	; 0x01
    480c:	22 c0       	rjmp	.+68     	; 0x4852 <APP_vClickCounterPB+0x52>
		if(PushButton_u8Button1()){
    480e:	0e 94 44 16 	call	0x2c88	; 0x2c88 <PushButton_u8Button1>
    4812:	88 23       	and	r24, r24
    4814:	51 f0       	breq	.+20     	; 0x482a <APP_vClickCounterPB+0x2a>
			Loc_Count++;
    4816:	89 81       	ldd	r24, Y+1	; 0x01
    4818:	8f 5f       	subi	r24, 0xFF	; 255
    481a:	89 83       	std	Y+1, r24	; 0x01
			APP_vPrintTwoDigitNumberSS(Loc_Count);
    481c:	89 81       	ldd	r24, Y+1	; 0x01
    481e:	0e 94 64 23 	call	0x46c8	; 0x46c8 <APP_vPrintTwoDigitNumberSS>
			APP_vPrintTwoDigitNumberSS(Loc_Count);
    4822:	89 81       	ldd	r24, Y+1	; 0x01
    4824:	0e 94 64 23 	call	0x46c8	; 0x46c8 <APP_vPrintTwoDigitNumberSS>
    4828:	14 c0       	rjmp	.+40     	; 0x4852 <APP_vClickCounterPB+0x52>
		}
		else if(PushButton_u8Button2()&&Loc_Count!=0){
    482a:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <PushButton_u8Button2>
    482e:	88 23       	and	r24, r24
    4830:	69 f0       	breq	.+26     	; 0x484c <APP_vClickCounterPB+0x4c>
    4832:	89 81       	ldd	r24, Y+1	; 0x01
    4834:	88 23       	and	r24, r24
    4836:	51 f0       	breq	.+20     	; 0x484c <APP_vClickCounterPB+0x4c>
			Loc_Count--;
    4838:	89 81       	ldd	r24, Y+1	; 0x01
    483a:	81 50       	subi	r24, 0x01	; 1
    483c:	89 83       	std	Y+1, r24	; 0x01
			APP_vPrintTwoDigitNumberSS(Loc_Count);
    483e:	89 81       	ldd	r24, Y+1	; 0x01
    4840:	0e 94 64 23 	call	0x46c8	; 0x46c8 <APP_vPrintTwoDigitNumberSS>
			APP_vPrintTwoDigitNumberSS(Loc_Count);
    4844:	89 81       	ldd	r24, Y+1	; 0x01
    4846:	0e 94 64 23 	call	0x46c8	; 0x46c8 <APP_vPrintTwoDigitNumberSS>
    484a:	03 c0       	rjmp	.+6      	; 0x4852 <APP_vClickCounterPB+0x52>
		}
		else{
			APP_vPrintTwoDigitNumberSS(Loc_Count);
    484c:	89 81       	ldd	r24, Y+1	; 0x01
    484e:	0e 94 64 23 	call	0x46c8	; 0x46c8 <APP_vPrintTwoDigitNumberSS>
/*--------------- this function is used to count the
 * (number clicks on pushbutton 1 Subtracted from number clicks on pushbutton 2)
 * and print it on the 7Segma*/
void APP_vClickCounterPB(){
	u8 Loc_Count;
	for(Loc_Count=0;Loc_Count<100;){
    4852:	89 81       	ldd	r24, Y+1	; 0x01
    4854:	84 36       	cpi	r24, 0x64	; 100
    4856:	d8 f2       	brcs	.-74     	; 0x480e <APP_vClickCounterPB+0xe>
		}
		else{
			APP_vPrintTwoDigitNumberSS(Loc_Count);
		}
	}
}
    4858:	0f 90       	pop	r0
    485a:	cf 91       	pop	r28
    485c:	df 91       	pop	r29
    485e:	08 95       	ret

00004860 <APP_v3Leds1MinuteEachSS>:
/*---------this function is used to count 3 minutes every minute a led will turn on--------*/
void APP_v3Leds1MinuteEachSS(){
    4860:	df 93       	push	r29
    4862:	cf 93       	push	r28
    4864:	cd b7       	in	r28, 0x3d	; 61
    4866:	de b7       	in	r29, 0x3e	; 62
    4868:	6c 97       	sbiw	r28, 0x1c	; 28
    486a:	0f b6       	in	r0, 0x3f	; 63
    486c:	f8 94       	cli
    486e:	de bf       	out	0x3e, r29	; 62
    4870:	0f be       	out	0x3f, r0	; 63
    4872:	cd bf       	out	0x3d, r28	; 61
	APP_vPrint1MinuteSS();
    4874:	0e 94 e3 23 	call	0x47c6	; 0x47c6 <APP_vPrint1MinuteSS>
	LedAndBuzzer_vLed0Open();
    4878:	0e 94 81 13 	call	0x2702	; 0x2702 <LedAndBuzzer_vLed0Open>
	APP_vPrint1MinuteSS();
    487c:	0e 94 e3 23 	call	0x47c6	; 0x47c6 <APP_vPrint1MinuteSS>
	LedAndBuzzer_vLed1Open();
    4880:	0e 94 9e 13 	call	0x273c	; 0x273c <LedAndBuzzer_vLed1Open>
	APP_vPrint1MinuteSS();
    4884:	0e 94 e3 23 	call	0x47c6	; 0x47c6 <APP_vPrint1MinuteSS>
	LedAndBuzzer_vLed2Open();
    4888:	0e 94 bb 13 	call	0x2776	; 0x2776 <LedAndBuzzer_vLed2Open>
    488c:	80 e0       	ldi	r24, 0x00	; 0
    488e:	90 e0       	ldi	r25, 0x00	; 0
    4890:	aa e7       	ldi	r26, 0x7A	; 122
    4892:	b3 e4       	ldi	r27, 0x43	; 67
    4894:	89 8f       	std	Y+25, r24	; 0x19
    4896:	9a 8f       	std	Y+26, r25	; 0x1a
    4898:	ab 8f       	std	Y+27, r26	; 0x1b
    489a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    489c:	69 8d       	ldd	r22, Y+25	; 0x19
    489e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    48a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    48a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    48a4:	20 e0       	ldi	r18, 0x00	; 0
    48a6:	30 e0       	ldi	r19, 0x00	; 0
    48a8:	4a e7       	ldi	r20, 0x7A	; 122
    48aa:	55 e4       	ldi	r21, 0x45	; 69
    48ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48b0:	dc 01       	movw	r26, r24
    48b2:	cb 01       	movw	r24, r22
    48b4:	8d 8b       	std	Y+21, r24	; 0x15
    48b6:	9e 8b       	std	Y+22, r25	; 0x16
    48b8:	af 8b       	std	Y+23, r26	; 0x17
    48ba:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    48bc:	6d 89       	ldd	r22, Y+21	; 0x15
    48be:	7e 89       	ldd	r23, Y+22	; 0x16
    48c0:	8f 89       	ldd	r24, Y+23	; 0x17
    48c2:	98 8d       	ldd	r25, Y+24	; 0x18
    48c4:	20 e0       	ldi	r18, 0x00	; 0
    48c6:	30 e0       	ldi	r19, 0x00	; 0
    48c8:	40 e8       	ldi	r20, 0x80	; 128
    48ca:	5f e3       	ldi	r21, 0x3F	; 63
    48cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    48d0:	88 23       	and	r24, r24
    48d2:	2c f4       	brge	.+10     	; 0x48de <APP_v3Leds1MinuteEachSS+0x7e>
		__ticks = 1;
    48d4:	81 e0       	ldi	r24, 0x01	; 1
    48d6:	90 e0       	ldi	r25, 0x00	; 0
    48d8:	9c 8b       	std	Y+20, r25	; 0x14
    48da:	8b 8b       	std	Y+19, r24	; 0x13
    48dc:	3f c0       	rjmp	.+126    	; 0x495c <APP_v3Leds1MinuteEachSS+0xfc>
	else if (__tmp > 65535)
    48de:	6d 89       	ldd	r22, Y+21	; 0x15
    48e0:	7e 89       	ldd	r23, Y+22	; 0x16
    48e2:	8f 89       	ldd	r24, Y+23	; 0x17
    48e4:	98 8d       	ldd	r25, Y+24	; 0x18
    48e6:	20 e0       	ldi	r18, 0x00	; 0
    48e8:	3f ef       	ldi	r19, 0xFF	; 255
    48ea:	4f e7       	ldi	r20, 0x7F	; 127
    48ec:	57 e4       	ldi	r21, 0x47	; 71
    48ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    48f2:	18 16       	cp	r1, r24
    48f4:	4c f5       	brge	.+82     	; 0x4948 <APP_v3Leds1MinuteEachSS+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    48f6:	69 8d       	ldd	r22, Y+25	; 0x19
    48f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    48fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    48fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    48fe:	20 e0       	ldi	r18, 0x00	; 0
    4900:	30 e0       	ldi	r19, 0x00	; 0
    4902:	40 e2       	ldi	r20, 0x20	; 32
    4904:	51 e4       	ldi	r21, 0x41	; 65
    4906:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    490a:	dc 01       	movw	r26, r24
    490c:	cb 01       	movw	r24, r22
    490e:	bc 01       	movw	r22, r24
    4910:	cd 01       	movw	r24, r26
    4912:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4916:	dc 01       	movw	r26, r24
    4918:	cb 01       	movw	r24, r22
    491a:	9c 8b       	std	Y+20, r25	; 0x14
    491c:	8b 8b       	std	Y+19, r24	; 0x13
    491e:	0f c0       	rjmp	.+30     	; 0x493e <APP_v3Leds1MinuteEachSS+0xde>
    4920:	80 e9       	ldi	r24, 0x90	; 144
    4922:	91 e0       	ldi	r25, 0x01	; 1
    4924:	9a 8b       	std	Y+18, r25	; 0x12
    4926:	89 8b       	std	Y+17, r24	; 0x11
    4928:	89 89       	ldd	r24, Y+17	; 0x11
    492a:	9a 89       	ldd	r25, Y+18	; 0x12
    492c:	01 97       	sbiw	r24, 0x01	; 1
    492e:	f1 f7       	brne	.-4      	; 0x492c <APP_v3Leds1MinuteEachSS+0xcc>
    4930:	9a 8b       	std	Y+18, r25	; 0x12
    4932:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4934:	8b 89       	ldd	r24, Y+19	; 0x13
    4936:	9c 89       	ldd	r25, Y+20	; 0x14
    4938:	01 97       	sbiw	r24, 0x01	; 1
    493a:	9c 8b       	std	Y+20, r25	; 0x14
    493c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    493e:	8b 89       	ldd	r24, Y+19	; 0x13
    4940:	9c 89       	ldd	r25, Y+20	; 0x14
    4942:	00 97       	sbiw	r24, 0x00	; 0
    4944:	69 f7       	brne	.-38     	; 0x4920 <APP_v3Leds1MinuteEachSS+0xc0>
    4946:	14 c0       	rjmp	.+40     	; 0x4970 <APP_v3Leds1MinuteEachSS+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4948:	6d 89       	ldd	r22, Y+21	; 0x15
    494a:	7e 89       	ldd	r23, Y+22	; 0x16
    494c:	8f 89       	ldd	r24, Y+23	; 0x17
    494e:	98 8d       	ldd	r25, Y+24	; 0x18
    4950:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4954:	dc 01       	movw	r26, r24
    4956:	cb 01       	movw	r24, r22
    4958:	9c 8b       	std	Y+20, r25	; 0x14
    495a:	8b 8b       	std	Y+19, r24	; 0x13
    495c:	8b 89       	ldd	r24, Y+19	; 0x13
    495e:	9c 89       	ldd	r25, Y+20	; 0x14
    4960:	98 8b       	std	Y+16, r25	; 0x10
    4962:	8f 87       	std	Y+15, r24	; 0x0f
    4964:	8f 85       	ldd	r24, Y+15	; 0x0f
    4966:	98 89       	ldd	r25, Y+16	; 0x10
    4968:	01 97       	sbiw	r24, 0x01	; 1
    496a:	f1 f7       	brne	.-4      	; 0x4968 <APP_v3Leds1MinuteEachSS+0x108>
    496c:	98 8b       	std	Y+16, r25	; 0x10
    496e:	8f 87       	std	Y+15, r24	; 0x0f
    4970:	80 e0       	ldi	r24, 0x00	; 0
    4972:	90 e0       	ldi	r25, 0x00	; 0
    4974:	aa e7       	ldi	r26, 0x7A	; 122
    4976:	b3 e4       	ldi	r27, 0x43	; 67
    4978:	8b 87       	std	Y+11, r24	; 0x0b
    497a:	9c 87       	std	Y+12, r25	; 0x0c
    497c:	ad 87       	std	Y+13, r26	; 0x0d
    497e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4980:	6b 85       	ldd	r22, Y+11	; 0x0b
    4982:	7c 85       	ldd	r23, Y+12	; 0x0c
    4984:	8d 85       	ldd	r24, Y+13	; 0x0d
    4986:	9e 85       	ldd	r25, Y+14	; 0x0e
    4988:	20 e0       	ldi	r18, 0x00	; 0
    498a:	30 e0       	ldi	r19, 0x00	; 0
    498c:	4a e7       	ldi	r20, 0x7A	; 122
    498e:	55 e4       	ldi	r21, 0x45	; 69
    4990:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4994:	dc 01       	movw	r26, r24
    4996:	cb 01       	movw	r24, r22
    4998:	8f 83       	std	Y+7, r24	; 0x07
    499a:	98 87       	std	Y+8, r25	; 0x08
    499c:	a9 87       	std	Y+9, r26	; 0x09
    499e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    49a0:	6f 81       	ldd	r22, Y+7	; 0x07
    49a2:	78 85       	ldd	r23, Y+8	; 0x08
    49a4:	89 85       	ldd	r24, Y+9	; 0x09
    49a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    49a8:	20 e0       	ldi	r18, 0x00	; 0
    49aa:	30 e0       	ldi	r19, 0x00	; 0
    49ac:	40 e8       	ldi	r20, 0x80	; 128
    49ae:	5f e3       	ldi	r21, 0x3F	; 63
    49b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    49b4:	88 23       	and	r24, r24
    49b6:	2c f4       	brge	.+10     	; 0x49c2 <APP_v3Leds1MinuteEachSS+0x162>
		__ticks = 1;
    49b8:	81 e0       	ldi	r24, 0x01	; 1
    49ba:	90 e0       	ldi	r25, 0x00	; 0
    49bc:	9e 83       	std	Y+6, r25	; 0x06
    49be:	8d 83       	std	Y+5, r24	; 0x05
    49c0:	3f c0       	rjmp	.+126    	; 0x4a40 <APP_v3Leds1MinuteEachSS+0x1e0>
	else if (__tmp > 65535)
    49c2:	6f 81       	ldd	r22, Y+7	; 0x07
    49c4:	78 85       	ldd	r23, Y+8	; 0x08
    49c6:	89 85       	ldd	r24, Y+9	; 0x09
    49c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    49ca:	20 e0       	ldi	r18, 0x00	; 0
    49cc:	3f ef       	ldi	r19, 0xFF	; 255
    49ce:	4f e7       	ldi	r20, 0x7F	; 127
    49d0:	57 e4       	ldi	r21, 0x47	; 71
    49d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    49d6:	18 16       	cp	r1, r24
    49d8:	4c f5       	brge	.+82     	; 0x4a2c <APP_v3Leds1MinuteEachSS+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    49da:	6b 85       	ldd	r22, Y+11	; 0x0b
    49dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    49de:	8d 85       	ldd	r24, Y+13	; 0x0d
    49e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    49e2:	20 e0       	ldi	r18, 0x00	; 0
    49e4:	30 e0       	ldi	r19, 0x00	; 0
    49e6:	40 e2       	ldi	r20, 0x20	; 32
    49e8:	51 e4       	ldi	r21, 0x41	; 65
    49ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49ee:	dc 01       	movw	r26, r24
    49f0:	cb 01       	movw	r24, r22
    49f2:	bc 01       	movw	r22, r24
    49f4:	cd 01       	movw	r24, r26
    49f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49fa:	dc 01       	movw	r26, r24
    49fc:	cb 01       	movw	r24, r22
    49fe:	9e 83       	std	Y+6, r25	; 0x06
    4a00:	8d 83       	std	Y+5, r24	; 0x05
    4a02:	0f c0       	rjmp	.+30     	; 0x4a22 <APP_v3Leds1MinuteEachSS+0x1c2>
    4a04:	80 e9       	ldi	r24, 0x90	; 144
    4a06:	91 e0       	ldi	r25, 0x01	; 1
    4a08:	9c 83       	std	Y+4, r25	; 0x04
    4a0a:	8b 83       	std	Y+3, r24	; 0x03
    4a0c:	8b 81       	ldd	r24, Y+3	; 0x03
    4a0e:	9c 81       	ldd	r25, Y+4	; 0x04
    4a10:	01 97       	sbiw	r24, 0x01	; 1
    4a12:	f1 f7       	brne	.-4      	; 0x4a10 <APP_v3Leds1MinuteEachSS+0x1b0>
    4a14:	9c 83       	std	Y+4, r25	; 0x04
    4a16:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a18:	8d 81       	ldd	r24, Y+5	; 0x05
    4a1a:	9e 81       	ldd	r25, Y+6	; 0x06
    4a1c:	01 97       	sbiw	r24, 0x01	; 1
    4a1e:	9e 83       	std	Y+6, r25	; 0x06
    4a20:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a22:	8d 81       	ldd	r24, Y+5	; 0x05
    4a24:	9e 81       	ldd	r25, Y+6	; 0x06
    4a26:	00 97       	sbiw	r24, 0x00	; 0
    4a28:	69 f7       	brne	.-38     	; 0x4a04 <APP_v3Leds1MinuteEachSS+0x1a4>
    4a2a:	14 c0       	rjmp	.+40     	; 0x4a54 <APP_v3Leds1MinuteEachSS+0x1f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a2c:	6f 81       	ldd	r22, Y+7	; 0x07
    4a2e:	78 85       	ldd	r23, Y+8	; 0x08
    4a30:	89 85       	ldd	r24, Y+9	; 0x09
    4a32:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a38:	dc 01       	movw	r26, r24
    4a3a:	cb 01       	movw	r24, r22
    4a3c:	9e 83       	std	Y+6, r25	; 0x06
    4a3e:	8d 83       	std	Y+5, r24	; 0x05
    4a40:	8d 81       	ldd	r24, Y+5	; 0x05
    4a42:	9e 81       	ldd	r25, Y+6	; 0x06
    4a44:	9a 83       	std	Y+2, r25	; 0x02
    4a46:	89 83       	std	Y+1, r24	; 0x01
    4a48:	89 81       	ldd	r24, Y+1	; 0x01
    4a4a:	9a 81       	ldd	r25, Y+2	; 0x02
    4a4c:	01 97       	sbiw	r24, 0x01	; 1
    4a4e:	f1 f7       	brne	.-4      	; 0x4a4c <APP_v3Leds1MinuteEachSS+0x1ec>
    4a50:	9a 83       	std	Y+2, r25	; 0x02
    4a52:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(250);
	_delay_ms(250);
	LedAndBuzzer_vLed0Close();
    4a54:	0e 94 92 13 	call	0x2724	; 0x2724 <LedAndBuzzer_vLed0Close>
	LedAndBuzzer_vLed1Close();
    4a58:	0e 94 af 13 	call	0x275e	; 0x275e <LedAndBuzzer_vLed1Close>
	LedAndBuzzer_vLed2Close();
    4a5c:	0e 94 cc 13 	call	0x2798	; 0x2798 <LedAndBuzzer_vLed2Close>
}
    4a60:	6c 96       	adiw	r28, 0x1c	; 28
    4a62:	0f b6       	in	r0, 0x3f	; 63
    4a64:	f8 94       	cli
    4a66:	de bf       	out	0x3e, r29	; 62
    4a68:	0f be       	out	0x3f, r0	; 63
    4a6a:	cd bf       	out	0x3d, r28	; 61
    4a6c:	cf 91       	pop	r28
    4a6e:	df 91       	pop	r29
    4a70:	08 95       	ret

00004a72 <APP_vTaskFinsh>:
/*------------ this function is used to turn all LEDs and buzzer 3 times
 * -------------- to show that Task is finished--------*/
void APP_vTaskFinsh(){
    4a72:	df 93       	push	r29
    4a74:	cf 93       	push	r28
    4a76:	cd b7       	in	r28, 0x3d	; 61
    4a78:	de b7       	in	r29, 0x3e	; 62
	LedAndBuzzer_vFlash(3);
    4a7a:	83 e0       	ldi	r24, 0x03	; 3
    4a7c:	0e 94 f5 13 	call	0x27ea	; 0x27ea <LedAndBuzzer_vFlash>
}
    4a80:	cf 91       	pop	r28
    4a82:	df 91       	pop	r29
    4a84:	08 95       	ret

00004a86 <APP_vWriteStringManyTimesLCD>:
//-----------------
void APP_vWriteStringManyTimesLCD(u8 *Loc_u8Array,u8 Loc_u8size){
    4a86:	df 93       	push	r29
    4a88:	cf 93       	push	r28
    4a8a:	cd b7       	in	r28, 0x3d	; 61
    4a8c:	de b7       	in	r29, 0x3e	; 62
    4a8e:	a0 97       	sbiw	r28, 0x20	; 32
    4a90:	0f b6       	in	r0, 0x3f	; 63
    4a92:	f8 94       	cli
    4a94:	de bf       	out	0x3e, r29	; 62
    4a96:	0f be       	out	0x3f, r0	; 63
    4a98:	cd bf       	out	0x3d, r28	; 61
    4a9a:	9f 8f       	std	Y+31, r25	; 0x1f
    4a9c:	8e 8f       	std	Y+30, r24	; 0x1e
    4a9e:	68 a3       	std	Y+32, r22	; 0x20
	LCD_vInit();
    4aa0:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <LCD_vInit>
	u8 i;
	for(i=0;i<=((16/Loc_u8size));i++){
    4aa4:	1d 8e       	std	Y+29, r1	; 0x1d
    4aa6:	91 c0       	rjmp	.+290    	; 0x4bca <APP_vWriteStringManyTimesLCD+0x144>
		LCD_vGoTo(LineOne,((Loc_u8size-1)*i));
    4aa8:	88 a1       	ldd	r24, Y+32	; 0x20
    4aaa:	88 2f       	mov	r24, r24
    4aac:	90 e0       	ldi	r25, 0x00	; 0
    4aae:	9c 01       	movw	r18, r24
    4ab0:	21 50       	subi	r18, 0x01	; 1
    4ab2:	30 40       	sbci	r19, 0x00	; 0
    4ab4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4ab6:	88 2f       	mov	r24, r24
    4ab8:	90 e0       	ldi	r25, 0x00	; 0
    4aba:	ac 01       	movw	r20, r24
    4abc:	24 9f       	mul	r18, r20
    4abe:	c0 01       	movw	r24, r0
    4ac0:	25 9f       	mul	r18, r21
    4ac2:	90 0d       	add	r25, r0
    4ac4:	34 9f       	mul	r19, r20
    4ac6:	90 0d       	add	r25, r0
    4ac8:	11 24       	eor	r1, r1
    4aca:	98 2f       	mov	r25, r24
    4acc:	80 e8       	ldi	r24, 0x80	; 128
    4ace:	69 2f       	mov	r22, r25
    4ad0:	0e 94 98 1f 	call	0x3f30	; 0x3f30 <LCD_vGoTo>
		LCD_vWriteString(Loc_u8Array);
    4ad4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4ad6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4ad8:	0e 94 31 20 	call	0x4062	; 0x4062 <LCD_vWriteString>
    4adc:	80 e0       	ldi	r24, 0x00	; 0
    4ade:	90 e0       	ldi	r25, 0x00	; 0
    4ae0:	aa e7       	ldi	r26, 0x7A	; 122
    4ae2:	b3 e4       	ldi	r27, 0x43	; 67
    4ae4:	89 8f       	std	Y+25, r24	; 0x19
    4ae6:	9a 8f       	std	Y+26, r25	; 0x1a
    4ae8:	ab 8f       	std	Y+27, r26	; 0x1b
    4aea:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4aec:	69 8d       	ldd	r22, Y+25	; 0x19
    4aee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4af0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4af2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4af4:	20 e0       	ldi	r18, 0x00	; 0
    4af6:	30 e0       	ldi	r19, 0x00	; 0
    4af8:	4a e7       	ldi	r20, 0x7A	; 122
    4afa:	55 e4       	ldi	r21, 0x45	; 69
    4afc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b00:	dc 01       	movw	r26, r24
    4b02:	cb 01       	movw	r24, r22
    4b04:	8d 8b       	std	Y+21, r24	; 0x15
    4b06:	9e 8b       	std	Y+22, r25	; 0x16
    4b08:	af 8b       	std	Y+23, r26	; 0x17
    4b0a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4b0c:	6d 89       	ldd	r22, Y+21	; 0x15
    4b0e:	7e 89       	ldd	r23, Y+22	; 0x16
    4b10:	8f 89       	ldd	r24, Y+23	; 0x17
    4b12:	98 8d       	ldd	r25, Y+24	; 0x18
    4b14:	20 e0       	ldi	r18, 0x00	; 0
    4b16:	30 e0       	ldi	r19, 0x00	; 0
    4b18:	40 e8       	ldi	r20, 0x80	; 128
    4b1a:	5f e3       	ldi	r21, 0x3F	; 63
    4b1c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4b20:	88 23       	and	r24, r24
    4b22:	2c f4       	brge	.+10     	; 0x4b2e <APP_vWriteStringManyTimesLCD+0xa8>
		__ticks = 1;
    4b24:	81 e0       	ldi	r24, 0x01	; 1
    4b26:	90 e0       	ldi	r25, 0x00	; 0
    4b28:	9c 8b       	std	Y+20, r25	; 0x14
    4b2a:	8b 8b       	std	Y+19, r24	; 0x13
    4b2c:	3f c0       	rjmp	.+126    	; 0x4bac <APP_vWriteStringManyTimesLCD+0x126>
	else if (__tmp > 65535)
    4b2e:	6d 89       	ldd	r22, Y+21	; 0x15
    4b30:	7e 89       	ldd	r23, Y+22	; 0x16
    4b32:	8f 89       	ldd	r24, Y+23	; 0x17
    4b34:	98 8d       	ldd	r25, Y+24	; 0x18
    4b36:	20 e0       	ldi	r18, 0x00	; 0
    4b38:	3f ef       	ldi	r19, 0xFF	; 255
    4b3a:	4f e7       	ldi	r20, 0x7F	; 127
    4b3c:	57 e4       	ldi	r21, 0x47	; 71
    4b3e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4b42:	18 16       	cp	r1, r24
    4b44:	4c f5       	brge	.+82     	; 0x4b98 <APP_vWriteStringManyTimesLCD+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b46:	69 8d       	ldd	r22, Y+25	; 0x19
    4b48:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4b4a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4b4c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4b4e:	20 e0       	ldi	r18, 0x00	; 0
    4b50:	30 e0       	ldi	r19, 0x00	; 0
    4b52:	40 e2       	ldi	r20, 0x20	; 32
    4b54:	51 e4       	ldi	r21, 0x41	; 65
    4b56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b5a:	dc 01       	movw	r26, r24
    4b5c:	cb 01       	movw	r24, r22
    4b5e:	bc 01       	movw	r22, r24
    4b60:	cd 01       	movw	r24, r26
    4b62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b66:	dc 01       	movw	r26, r24
    4b68:	cb 01       	movw	r24, r22
    4b6a:	9c 8b       	std	Y+20, r25	; 0x14
    4b6c:	8b 8b       	std	Y+19, r24	; 0x13
    4b6e:	0f c0       	rjmp	.+30     	; 0x4b8e <APP_vWriteStringManyTimesLCD+0x108>
    4b70:	80 e9       	ldi	r24, 0x90	; 144
    4b72:	91 e0       	ldi	r25, 0x01	; 1
    4b74:	9a 8b       	std	Y+18, r25	; 0x12
    4b76:	89 8b       	std	Y+17, r24	; 0x11
    4b78:	89 89       	ldd	r24, Y+17	; 0x11
    4b7a:	9a 89       	ldd	r25, Y+18	; 0x12
    4b7c:	01 97       	sbiw	r24, 0x01	; 1
    4b7e:	f1 f7       	brne	.-4      	; 0x4b7c <APP_vWriteStringManyTimesLCD+0xf6>
    4b80:	9a 8b       	std	Y+18, r25	; 0x12
    4b82:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b84:	8b 89       	ldd	r24, Y+19	; 0x13
    4b86:	9c 89       	ldd	r25, Y+20	; 0x14
    4b88:	01 97       	sbiw	r24, 0x01	; 1
    4b8a:	9c 8b       	std	Y+20, r25	; 0x14
    4b8c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b8e:	8b 89       	ldd	r24, Y+19	; 0x13
    4b90:	9c 89       	ldd	r25, Y+20	; 0x14
    4b92:	00 97       	sbiw	r24, 0x00	; 0
    4b94:	69 f7       	brne	.-38     	; 0x4b70 <APP_vWriteStringManyTimesLCD+0xea>
    4b96:	14 c0       	rjmp	.+40     	; 0x4bc0 <APP_vWriteStringManyTimesLCD+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b98:	6d 89       	ldd	r22, Y+21	; 0x15
    4b9a:	7e 89       	ldd	r23, Y+22	; 0x16
    4b9c:	8f 89       	ldd	r24, Y+23	; 0x17
    4b9e:	98 8d       	ldd	r25, Y+24	; 0x18
    4ba0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ba4:	dc 01       	movw	r26, r24
    4ba6:	cb 01       	movw	r24, r22
    4ba8:	9c 8b       	std	Y+20, r25	; 0x14
    4baa:	8b 8b       	std	Y+19, r24	; 0x13
    4bac:	8b 89       	ldd	r24, Y+19	; 0x13
    4bae:	9c 89       	ldd	r25, Y+20	; 0x14
    4bb0:	98 8b       	std	Y+16, r25	; 0x10
    4bb2:	8f 87       	std	Y+15, r24	; 0x0f
    4bb4:	8f 85       	ldd	r24, Y+15	; 0x0f
    4bb6:	98 89       	ldd	r25, Y+16	; 0x10
    4bb8:	01 97       	sbiw	r24, 0x01	; 1
    4bba:	f1 f7       	brne	.-4      	; 0x4bb8 <APP_vWriteStringManyTimesLCD+0x132>
    4bbc:	98 8b       	std	Y+16, r25	; 0x10
    4bbe:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(250);
		LCD_vClear();
    4bc0:	0e 94 a9 1f 	call	0x3f52	; 0x3f52 <LCD_vClear>
}
//-----------------
void APP_vWriteStringManyTimesLCD(u8 *Loc_u8Array,u8 Loc_u8size){
	LCD_vInit();
	u8 i;
	for(i=0;i<=((16/Loc_u8size));i++){
    4bc4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4bc6:	8f 5f       	subi	r24, 0xFF	; 255
    4bc8:	8d 8f       	std	Y+29, r24	; 0x1d
    4bca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4bcc:	e8 2f       	mov	r30, r24
    4bce:	f0 e0       	ldi	r31, 0x00	; 0
    4bd0:	88 a1       	ldd	r24, Y+32	; 0x20
    4bd2:	28 2f       	mov	r18, r24
    4bd4:	30 e0       	ldi	r19, 0x00	; 0
    4bd6:	80 e1       	ldi	r24, 0x10	; 16
    4bd8:	90 e0       	ldi	r25, 0x00	; 0
    4bda:	b9 01       	movw	r22, r18
    4bdc:	0e 94 15 35 	call	0x6a2a	; 0x6a2a <__divmodhi4>
    4be0:	cb 01       	movw	r24, r22
    4be2:	8e 17       	cp	r24, r30
    4be4:	9f 07       	cpc	r25, r31
    4be6:	0c f0       	brlt	.+2      	; 0x4bea <APP_vWriteStringManyTimesLCD+0x164>
    4be8:	5f cf       	rjmp	.-322    	; 0x4aa8 <APP_vWriteStringManyTimesLCD+0x22>
		LCD_vGoTo(LineOne,((Loc_u8size-1)*i));
		LCD_vWriteString(Loc_u8Array);
		_delay_ms(250);
		LCD_vClear();
	}
	for(i=0;i<=((16/Loc_u8size));i++){
    4bea:	1d 8e       	std	Y+29, r1	; 0x1d
    4bec:	91 c0       	rjmp	.+290    	; 0x4d10 <APP_vWriteStringManyTimesLCD+0x28a>
		LCD_vGoTo(LineTwo,((Loc_u8size-1)*i));
    4bee:	88 a1       	ldd	r24, Y+32	; 0x20
    4bf0:	88 2f       	mov	r24, r24
    4bf2:	90 e0       	ldi	r25, 0x00	; 0
    4bf4:	9c 01       	movw	r18, r24
    4bf6:	21 50       	subi	r18, 0x01	; 1
    4bf8:	30 40       	sbci	r19, 0x00	; 0
    4bfa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4bfc:	88 2f       	mov	r24, r24
    4bfe:	90 e0       	ldi	r25, 0x00	; 0
    4c00:	ac 01       	movw	r20, r24
    4c02:	24 9f       	mul	r18, r20
    4c04:	c0 01       	movw	r24, r0
    4c06:	25 9f       	mul	r18, r21
    4c08:	90 0d       	add	r25, r0
    4c0a:	34 9f       	mul	r19, r20
    4c0c:	90 0d       	add	r25, r0
    4c0e:	11 24       	eor	r1, r1
    4c10:	98 2f       	mov	r25, r24
    4c12:	80 ec       	ldi	r24, 0xC0	; 192
    4c14:	69 2f       	mov	r22, r25
    4c16:	0e 94 98 1f 	call	0x3f30	; 0x3f30 <LCD_vGoTo>
		LCD_vWriteString(Loc_u8Array);
    4c1a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4c1c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4c1e:	0e 94 31 20 	call	0x4062	; 0x4062 <LCD_vWriteString>
    4c22:	80 e0       	ldi	r24, 0x00	; 0
    4c24:	90 e0       	ldi	r25, 0x00	; 0
    4c26:	aa e7       	ldi	r26, 0x7A	; 122
    4c28:	b3 e4       	ldi	r27, 0x43	; 67
    4c2a:	8b 87       	std	Y+11, r24	; 0x0b
    4c2c:	9c 87       	std	Y+12, r25	; 0x0c
    4c2e:	ad 87       	std	Y+13, r26	; 0x0d
    4c30:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c32:	6b 85       	ldd	r22, Y+11	; 0x0b
    4c34:	7c 85       	ldd	r23, Y+12	; 0x0c
    4c36:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c38:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c3a:	20 e0       	ldi	r18, 0x00	; 0
    4c3c:	30 e0       	ldi	r19, 0x00	; 0
    4c3e:	4a e7       	ldi	r20, 0x7A	; 122
    4c40:	55 e4       	ldi	r21, 0x45	; 69
    4c42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c46:	dc 01       	movw	r26, r24
    4c48:	cb 01       	movw	r24, r22
    4c4a:	8f 83       	std	Y+7, r24	; 0x07
    4c4c:	98 87       	std	Y+8, r25	; 0x08
    4c4e:	a9 87       	std	Y+9, r26	; 0x09
    4c50:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4c52:	6f 81       	ldd	r22, Y+7	; 0x07
    4c54:	78 85       	ldd	r23, Y+8	; 0x08
    4c56:	89 85       	ldd	r24, Y+9	; 0x09
    4c58:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c5a:	20 e0       	ldi	r18, 0x00	; 0
    4c5c:	30 e0       	ldi	r19, 0x00	; 0
    4c5e:	40 e8       	ldi	r20, 0x80	; 128
    4c60:	5f e3       	ldi	r21, 0x3F	; 63
    4c62:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4c66:	88 23       	and	r24, r24
    4c68:	2c f4       	brge	.+10     	; 0x4c74 <APP_vWriteStringManyTimesLCD+0x1ee>
		__ticks = 1;
    4c6a:	81 e0       	ldi	r24, 0x01	; 1
    4c6c:	90 e0       	ldi	r25, 0x00	; 0
    4c6e:	9e 83       	std	Y+6, r25	; 0x06
    4c70:	8d 83       	std	Y+5, r24	; 0x05
    4c72:	3f c0       	rjmp	.+126    	; 0x4cf2 <APP_vWriteStringManyTimesLCD+0x26c>
	else if (__tmp > 65535)
    4c74:	6f 81       	ldd	r22, Y+7	; 0x07
    4c76:	78 85       	ldd	r23, Y+8	; 0x08
    4c78:	89 85       	ldd	r24, Y+9	; 0x09
    4c7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c7c:	20 e0       	ldi	r18, 0x00	; 0
    4c7e:	3f ef       	ldi	r19, 0xFF	; 255
    4c80:	4f e7       	ldi	r20, 0x7F	; 127
    4c82:	57 e4       	ldi	r21, 0x47	; 71
    4c84:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4c88:	18 16       	cp	r1, r24
    4c8a:	4c f5       	brge	.+82     	; 0x4cde <APP_vWriteStringManyTimesLCD+0x258>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c8c:	6b 85       	ldd	r22, Y+11	; 0x0b
    4c8e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4c90:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c92:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c94:	20 e0       	ldi	r18, 0x00	; 0
    4c96:	30 e0       	ldi	r19, 0x00	; 0
    4c98:	40 e2       	ldi	r20, 0x20	; 32
    4c9a:	51 e4       	ldi	r21, 0x41	; 65
    4c9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ca0:	dc 01       	movw	r26, r24
    4ca2:	cb 01       	movw	r24, r22
    4ca4:	bc 01       	movw	r22, r24
    4ca6:	cd 01       	movw	r24, r26
    4ca8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cac:	dc 01       	movw	r26, r24
    4cae:	cb 01       	movw	r24, r22
    4cb0:	9e 83       	std	Y+6, r25	; 0x06
    4cb2:	8d 83       	std	Y+5, r24	; 0x05
    4cb4:	0f c0       	rjmp	.+30     	; 0x4cd4 <APP_vWriteStringManyTimesLCD+0x24e>
    4cb6:	80 e9       	ldi	r24, 0x90	; 144
    4cb8:	91 e0       	ldi	r25, 0x01	; 1
    4cba:	9c 83       	std	Y+4, r25	; 0x04
    4cbc:	8b 83       	std	Y+3, r24	; 0x03
    4cbe:	8b 81       	ldd	r24, Y+3	; 0x03
    4cc0:	9c 81       	ldd	r25, Y+4	; 0x04
    4cc2:	01 97       	sbiw	r24, 0x01	; 1
    4cc4:	f1 f7       	brne	.-4      	; 0x4cc2 <APP_vWriteStringManyTimesLCD+0x23c>
    4cc6:	9c 83       	std	Y+4, r25	; 0x04
    4cc8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4cca:	8d 81       	ldd	r24, Y+5	; 0x05
    4ccc:	9e 81       	ldd	r25, Y+6	; 0x06
    4cce:	01 97       	sbiw	r24, 0x01	; 1
    4cd0:	9e 83       	std	Y+6, r25	; 0x06
    4cd2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4cd4:	8d 81       	ldd	r24, Y+5	; 0x05
    4cd6:	9e 81       	ldd	r25, Y+6	; 0x06
    4cd8:	00 97       	sbiw	r24, 0x00	; 0
    4cda:	69 f7       	brne	.-38     	; 0x4cb6 <APP_vWriteStringManyTimesLCD+0x230>
    4cdc:	14 c0       	rjmp	.+40     	; 0x4d06 <APP_vWriteStringManyTimesLCD+0x280>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4cde:	6f 81       	ldd	r22, Y+7	; 0x07
    4ce0:	78 85       	ldd	r23, Y+8	; 0x08
    4ce2:	89 85       	ldd	r24, Y+9	; 0x09
    4ce4:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ce6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cea:	dc 01       	movw	r26, r24
    4cec:	cb 01       	movw	r24, r22
    4cee:	9e 83       	std	Y+6, r25	; 0x06
    4cf0:	8d 83       	std	Y+5, r24	; 0x05
    4cf2:	8d 81       	ldd	r24, Y+5	; 0x05
    4cf4:	9e 81       	ldd	r25, Y+6	; 0x06
    4cf6:	9a 83       	std	Y+2, r25	; 0x02
    4cf8:	89 83       	std	Y+1, r24	; 0x01
    4cfa:	89 81       	ldd	r24, Y+1	; 0x01
    4cfc:	9a 81       	ldd	r25, Y+2	; 0x02
    4cfe:	01 97       	sbiw	r24, 0x01	; 1
    4d00:	f1 f7       	brne	.-4      	; 0x4cfe <APP_vWriteStringManyTimesLCD+0x278>
    4d02:	9a 83       	std	Y+2, r25	; 0x02
    4d04:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(250);
		LCD_vClear();
    4d06:	0e 94 a9 1f 	call	0x3f52	; 0x3f52 <LCD_vClear>
		LCD_vGoTo(LineOne,((Loc_u8size-1)*i));
		LCD_vWriteString(Loc_u8Array);
		_delay_ms(250);
		LCD_vClear();
	}
	for(i=0;i<=((16/Loc_u8size));i++){
    4d0a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4d0c:	8f 5f       	subi	r24, 0xFF	; 255
    4d0e:	8d 8f       	std	Y+29, r24	; 0x1d
    4d10:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4d12:	e8 2f       	mov	r30, r24
    4d14:	f0 e0       	ldi	r31, 0x00	; 0
    4d16:	88 a1       	ldd	r24, Y+32	; 0x20
    4d18:	28 2f       	mov	r18, r24
    4d1a:	30 e0       	ldi	r19, 0x00	; 0
    4d1c:	80 e1       	ldi	r24, 0x10	; 16
    4d1e:	90 e0       	ldi	r25, 0x00	; 0
    4d20:	b9 01       	movw	r22, r18
    4d22:	0e 94 15 35 	call	0x6a2a	; 0x6a2a <__divmodhi4>
    4d26:	cb 01       	movw	r24, r22
    4d28:	8e 17       	cp	r24, r30
    4d2a:	9f 07       	cpc	r25, r31
    4d2c:	0c f0       	brlt	.+2      	; 0x4d30 <APP_vWriteStringManyTimesLCD+0x2aa>
    4d2e:	5f cf       	rjmp	.-322    	; 0x4bee <APP_vWriteStringManyTimesLCD+0x168>
		LCD_vGoTo(LineTwo,((Loc_u8size-1)*i));
		LCD_vWriteString(Loc_u8Array);
		_delay_ms(250);
		LCD_vClear();
	}
}
    4d30:	a0 96       	adiw	r28, 0x20	; 32
    4d32:	0f b6       	in	r0, 0x3f	; 63
    4d34:	f8 94       	cli
    4d36:	de bf       	out	0x3e, r29	; 62
    4d38:	0f be       	out	0x3f, r0	; 63
    4d3a:	cd bf       	out	0x3d, r28	; 61
    4d3c:	cf 91       	pop	r28
    4d3e:	df 91       	pop	r29
    4d40:	08 95       	ret

00004d42 <APP_vToString>:
//-----------------
void APP_vToString(u8 str[], u16 num){
    4d42:	df 93       	push	r29
    4d44:	cf 93       	push	r28
    4d46:	cd b7       	in	r28, 0x3d	; 61
    4d48:	de b7       	in	r29, 0x3e	; 62
    4d4a:	2a 97       	sbiw	r28, 0x0a	; 10
    4d4c:	0f b6       	in	r0, 0x3f	; 63
    4d4e:	f8 94       	cli
    4d50:	de bf       	out	0x3e, r29	; 62
    4d52:	0f be       	out	0x3f, r0	; 63
    4d54:	cd bf       	out	0x3d, r28	; 61
    4d56:	98 87       	std	Y+8, r25	; 0x08
    4d58:	8f 83       	std	Y+7, r24	; 0x07
    4d5a:	7a 87       	std	Y+10, r23	; 0x0a
    4d5c:	69 87       	std	Y+9, r22	; 0x09
	u8 i, len = 0 ;
    4d5e:	1d 82       	std	Y+5, r1	; 0x05
	u16 n,rem;
	n = num;
    4d60:	89 85       	ldd	r24, Y+9	; 0x09
    4d62:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d64:	9c 83       	std	Y+4, r25	; 0x04
    4d66:	8b 83       	std	Y+3, r24	; 0x03
    4d68:	0d c0       	rjmp	.+26     	; 0x4d84 <APP_vToString+0x42>
	while (n != 0)
	{
		len++;
    4d6a:	8d 81       	ldd	r24, Y+5	; 0x05
    4d6c:	8f 5f       	subi	r24, 0xFF	; 255
    4d6e:	8d 83       	std	Y+5, r24	; 0x05
		n /= 10;
    4d70:	8b 81       	ldd	r24, Y+3	; 0x03
    4d72:	9c 81       	ldd	r25, Y+4	; 0x04
    4d74:	2a e0       	ldi	r18, 0x0A	; 10
    4d76:	30 e0       	ldi	r19, 0x00	; 0
    4d78:	b9 01       	movw	r22, r18
    4d7a:	0e 94 01 35 	call	0x6a02	; 0x6a02 <__udivmodhi4>
    4d7e:	cb 01       	movw	r24, r22
    4d80:	9c 83       	std	Y+4, r25	; 0x04
    4d82:	8b 83       	std	Y+3, r24	; 0x03
//-----------------
void APP_vToString(u8 str[], u16 num){
	u8 i, len = 0 ;
	u16 n,rem;
	n = num;
	while (n != 0)
    4d84:	8b 81       	ldd	r24, Y+3	; 0x03
    4d86:	9c 81       	ldd	r25, Y+4	; 0x04
    4d88:	00 97       	sbiw	r24, 0x00	; 0
    4d8a:	79 f7       	brne	.-34     	; 0x4d6a <APP_vToString+0x28>
	{
		len++;
		n /= 10;
	}
	for (i = 0; i < len; i++)
    4d8c:	1e 82       	std	Y+6, r1	; 0x06
    4d8e:	29 c0       	rjmp	.+82     	; 0x4de2 <APP_vToString+0xa0>
	{
		rem = num % 10;
    4d90:	89 85       	ldd	r24, Y+9	; 0x09
    4d92:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d94:	2a e0       	ldi	r18, 0x0A	; 10
    4d96:	30 e0       	ldi	r19, 0x00	; 0
    4d98:	b9 01       	movw	r22, r18
    4d9a:	0e 94 01 35 	call	0x6a02	; 0x6a02 <__udivmodhi4>
    4d9e:	9a 83       	std	Y+2, r25	; 0x02
    4da0:	89 83       	std	Y+1, r24	; 0x01
		num = num / 10;
    4da2:	89 85       	ldd	r24, Y+9	; 0x09
    4da4:	9a 85       	ldd	r25, Y+10	; 0x0a
    4da6:	2a e0       	ldi	r18, 0x0A	; 10
    4da8:	30 e0       	ldi	r19, 0x00	; 0
    4daa:	b9 01       	movw	r22, r18
    4dac:	0e 94 01 35 	call	0x6a02	; 0x6a02 <__udivmodhi4>
    4db0:	cb 01       	movw	r24, r22
    4db2:	9a 87       	std	Y+10, r25	; 0x0a
    4db4:	89 87       	std	Y+9, r24	; 0x09
		str[len - (i + 1)] = rem + '0';
    4db6:	8d 81       	ldd	r24, Y+5	; 0x05
    4db8:	28 2f       	mov	r18, r24
    4dba:	30 e0       	ldi	r19, 0x00	; 0
    4dbc:	8e 81       	ldd	r24, Y+6	; 0x06
    4dbe:	88 2f       	mov	r24, r24
    4dc0:	90 e0       	ldi	r25, 0x00	; 0
    4dc2:	80 95       	com	r24
    4dc4:	90 95       	com	r25
    4dc6:	82 0f       	add	r24, r18
    4dc8:	93 1f       	adc	r25, r19
    4dca:	9c 01       	movw	r18, r24
    4dcc:	8f 81       	ldd	r24, Y+7	; 0x07
    4dce:	98 85       	ldd	r25, Y+8	; 0x08
    4dd0:	fc 01       	movw	r30, r24
    4dd2:	e2 0f       	add	r30, r18
    4dd4:	f3 1f       	adc	r31, r19
    4dd6:	89 81       	ldd	r24, Y+1	; 0x01
    4dd8:	80 5d       	subi	r24, 0xD0	; 208
    4dda:	80 83       	st	Z, r24
	while (n != 0)
	{
		len++;
		n /= 10;
	}
	for (i = 0; i < len; i++)
    4ddc:	8e 81       	ldd	r24, Y+6	; 0x06
    4dde:	8f 5f       	subi	r24, 0xFF	; 255
    4de0:	8e 83       	std	Y+6, r24	; 0x06
    4de2:	9e 81       	ldd	r25, Y+6	; 0x06
    4de4:	8d 81       	ldd	r24, Y+5	; 0x05
    4de6:	98 17       	cp	r25, r24
    4de8:	98 f2       	brcs	.-90     	; 0x4d90 <APP_vToString+0x4e>
	{
		rem = num % 10;
		num = num / 10;
		str[len - (i + 1)] = rem + '0';
	}
	str[len] = '\0';
    4dea:	8d 81       	ldd	r24, Y+5	; 0x05
    4dec:	28 2f       	mov	r18, r24
    4dee:	30 e0       	ldi	r19, 0x00	; 0
    4df0:	8f 81       	ldd	r24, Y+7	; 0x07
    4df2:	98 85       	ldd	r25, Y+8	; 0x08
    4df4:	fc 01       	movw	r30, r24
    4df6:	e2 0f       	add	r30, r18
    4df8:	f3 1f       	adc	r31, r19
    4dfa:	10 82       	st	Z, r1
}
    4dfc:	2a 96       	adiw	r28, 0x0a	; 10
    4dfe:	0f b6       	in	r0, 0x3f	; 63
    4e00:	f8 94       	cli
    4e02:	de bf       	out	0x3e, r29	; 62
    4e04:	0f be       	out	0x3f, r0	; 63
    4e06:	cd bf       	out	0x3d, r28	; 61
    4e08:	cf 91       	pop	r28
    4e0a:	df 91       	pop	r29
    4e0c:	08 95       	ret

00004e0e <APP_vCalculatorLCD>:
//-----------------
void APP_vCalculatorLCD(){
    4e0e:	0f 93       	push	r16
    4e10:	1f 93       	push	r17
    4e12:	df 93       	push	r29
    4e14:	cf 93       	push	r28
    4e16:	cd b7       	in	r28, 0x3d	; 61
    4e18:	de b7       	in	r29, 0x3e	; 62
    4e1a:	c8 57       	subi	r28, 0x78	; 120
    4e1c:	d0 40       	sbci	r29, 0x00	; 0
    4e1e:	0f b6       	in	r0, 0x3f	; 63
    4e20:	f8 94       	cli
    4e22:	de bf       	out	0x3e, r29	; 62
    4e24:	0f be       	out	0x3f, r0	; 63
    4e26:	cd bf       	out	0x3d, r28	; 61
	//-- while(!=)
	u8 Loc_u8Num1=0,Loc_u8Num2,Loc_u8Symbol1,Loc_u8Symbol2,Loc_u8sum;
    4e28:	fe 01       	movw	r30, r28
    4e2a:	eb 58       	subi	r30, 0x8B	; 139
    4e2c:	ff 4f       	sbci	r31, 0xFF	; 255
    4e2e:	10 82       	st	Z, r1
	KAYPAD_vInit();
    4e30:	0e 94 b2 20 	call	0x4164	; 0x4164 <KAYPAD_vInit>
//Busy Wait
	while(1){
		Loc_u8Num1=KAYPAD_u8GetKey();
    4e34:	0e 94 c1 20 	call	0x4182	; 0x4182 <KAYPAD_u8GetKey>
    4e38:	fe 01       	movw	r30, r28
    4e3a:	eb 58       	subi	r30, 0x8B	; 139
    4e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    4e3e:	80 83       	st	Z, r24
    4e40:	fe 01       	movw	r30, r28
    4e42:	e3 59       	subi	r30, 0x93	; 147
    4e44:	ff 4f       	sbci	r31, 0xFF	; 255
    4e46:	80 e0       	ldi	r24, 0x00	; 0
    4e48:	90 e0       	ldi	r25, 0x00	; 0
    4e4a:	a8 e4       	ldi	r26, 0x48	; 72
    4e4c:	b2 e4       	ldi	r27, 0x42	; 66
    4e4e:	80 83       	st	Z, r24
    4e50:	91 83       	std	Z+1, r25	; 0x01
    4e52:	a2 83       	std	Z+2, r26	; 0x02
    4e54:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e56:	8e 01       	movw	r16, r28
    4e58:	07 59       	subi	r16, 0x97	; 151
    4e5a:	1f 4f       	sbci	r17, 0xFF	; 255
    4e5c:	fe 01       	movw	r30, r28
    4e5e:	e3 59       	subi	r30, 0x93	; 147
    4e60:	ff 4f       	sbci	r31, 0xFF	; 255
    4e62:	60 81       	ld	r22, Z
    4e64:	71 81       	ldd	r23, Z+1	; 0x01
    4e66:	82 81       	ldd	r24, Z+2	; 0x02
    4e68:	93 81       	ldd	r25, Z+3	; 0x03
    4e6a:	20 e0       	ldi	r18, 0x00	; 0
    4e6c:	30 e0       	ldi	r19, 0x00	; 0
    4e6e:	4a e7       	ldi	r20, 0x7A	; 122
    4e70:	55 e4       	ldi	r21, 0x45	; 69
    4e72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e76:	dc 01       	movw	r26, r24
    4e78:	cb 01       	movw	r24, r22
    4e7a:	f8 01       	movw	r30, r16
    4e7c:	80 83       	st	Z, r24
    4e7e:	91 83       	std	Z+1, r25	; 0x01
    4e80:	a2 83       	std	Z+2, r26	; 0x02
    4e82:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4e84:	fe 01       	movw	r30, r28
    4e86:	e7 59       	subi	r30, 0x97	; 151
    4e88:	ff 4f       	sbci	r31, 0xFF	; 255
    4e8a:	60 81       	ld	r22, Z
    4e8c:	71 81       	ldd	r23, Z+1	; 0x01
    4e8e:	82 81       	ldd	r24, Z+2	; 0x02
    4e90:	93 81       	ldd	r25, Z+3	; 0x03
    4e92:	20 e0       	ldi	r18, 0x00	; 0
    4e94:	30 e0       	ldi	r19, 0x00	; 0
    4e96:	40 e8       	ldi	r20, 0x80	; 128
    4e98:	5f e3       	ldi	r21, 0x3F	; 63
    4e9a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4e9e:	88 23       	and	r24, r24
    4ea0:	44 f4       	brge	.+16     	; 0x4eb2 <APP_vCalculatorLCD+0xa4>
		__ticks = 1;
    4ea2:	fe 01       	movw	r30, r28
    4ea4:	e9 59       	subi	r30, 0x99	; 153
    4ea6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ea8:	81 e0       	ldi	r24, 0x01	; 1
    4eaa:	90 e0       	ldi	r25, 0x00	; 0
    4eac:	91 83       	std	Z+1, r25	; 0x01
    4eae:	80 83       	st	Z, r24
    4eb0:	64 c0       	rjmp	.+200    	; 0x4f7a <APP_vCalculatorLCD+0x16c>
	else if (__tmp > 65535)
    4eb2:	fe 01       	movw	r30, r28
    4eb4:	e7 59       	subi	r30, 0x97	; 151
    4eb6:	ff 4f       	sbci	r31, 0xFF	; 255
    4eb8:	60 81       	ld	r22, Z
    4eba:	71 81       	ldd	r23, Z+1	; 0x01
    4ebc:	82 81       	ldd	r24, Z+2	; 0x02
    4ebe:	93 81       	ldd	r25, Z+3	; 0x03
    4ec0:	20 e0       	ldi	r18, 0x00	; 0
    4ec2:	3f ef       	ldi	r19, 0xFF	; 255
    4ec4:	4f e7       	ldi	r20, 0x7F	; 127
    4ec6:	57 e4       	ldi	r21, 0x47	; 71
    4ec8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4ecc:	18 16       	cp	r1, r24
    4ece:	0c f0       	brlt	.+2      	; 0x4ed2 <APP_vCalculatorLCD+0xc4>
    4ed0:	43 c0       	rjmp	.+134    	; 0x4f58 <APP_vCalculatorLCD+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ed2:	fe 01       	movw	r30, r28
    4ed4:	e3 59       	subi	r30, 0x93	; 147
    4ed6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ed8:	60 81       	ld	r22, Z
    4eda:	71 81       	ldd	r23, Z+1	; 0x01
    4edc:	82 81       	ldd	r24, Z+2	; 0x02
    4ede:	93 81       	ldd	r25, Z+3	; 0x03
    4ee0:	20 e0       	ldi	r18, 0x00	; 0
    4ee2:	30 e0       	ldi	r19, 0x00	; 0
    4ee4:	40 e2       	ldi	r20, 0x20	; 32
    4ee6:	51 e4       	ldi	r21, 0x41	; 65
    4ee8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4eec:	dc 01       	movw	r26, r24
    4eee:	cb 01       	movw	r24, r22
    4ef0:	8e 01       	movw	r16, r28
    4ef2:	09 59       	subi	r16, 0x99	; 153
    4ef4:	1f 4f       	sbci	r17, 0xFF	; 255
    4ef6:	bc 01       	movw	r22, r24
    4ef8:	cd 01       	movw	r24, r26
    4efa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4efe:	dc 01       	movw	r26, r24
    4f00:	cb 01       	movw	r24, r22
    4f02:	f8 01       	movw	r30, r16
    4f04:	91 83       	std	Z+1, r25	; 0x01
    4f06:	80 83       	st	Z, r24
    4f08:	1f c0       	rjmp	.+62     	; 0x4f48 <APP_vCalculatorLCD+0x13a>
    4f0a:	fe 01       	movw	r30, r28
    4f0c:	eb 59       	subi	r30, 0x9B	; 155
    4f0e:	ff 4f       	sbci	r31, 0xFF	; 255
    4f10:	80 e9       	ldi	r24, 0x90	; 144
    4f12:	91 e0       	ldi	r25, 0x01	; 1
    4f14:	91 83       	std	Z+1, r25	; 0x01
    4f16:	80 83       	st	Z, r24
    4f18:	fe 01       	movw	r30, r28
    4f1a:	eb 59       	subi	r30, 0x9B	; 155
    4f1c:	ff 4f       	sbci	r31, 0xFF	; 255
    4f1e:	80 81       	ld	r24, Z
    4f20:	91 81       	ldd	r25, Z+1	; 0x01
    4f22:	01 97       	sbiw	r24, 0x01	; 1
    4f24:	f1 f7       	brne	.-4      	; 0x4f22 <APP_vCalculatorLCD+0x114>
    4f26:	fe 01       	movw	r30, r28
    4f28:	eb 59       	subi	r30, 0x9B	; 155
    4f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    4f2c:	91 83       	std	Z+1, r25	; 0x01
    4f2e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f30:	de 01       	movw	r26, r28
    4f32:	a9 59       	subi	r26, 0x99	; 153
    4f34:	bf 4f       	sbci	r27, 0xFF	; 255
    4f36:	fe 01       	movw	r30, r28
    4f38:	e9 59       	subi	r30, 0x99	; 153
    4f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    4f3c:	80 81       	ld	r24, Z
    4f3e:	91 81       	ldd	r25, Z+1	; 0x01
    4f40:	01 97       	sbiw	r24, 0x01	; 1
    4f42:	11 96       	adiw	r26, 0x01	; 1
    4f44:	9c 93       	st	X, r25
    4f46:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f48:	fe 01       	movw	r30, r28
    4f4a:	e9 59       	subi	r30, 0x99	; 153
    4f4c:	ff 4f       	sbci	r31, 0xFF	; 255
    4f4e:	80 81       	ld	r24, Z
    4f50:	91 81       	ldd	r25, Z+1	; 0x01
    4f52:	00 97       	sbiw	r24, 0x00	; 0
    4f54:	d1 f6       	brne	.-76     	; 0x4f0a <APP_vCalculatorLCD+0xfc>
    4f56:	28 c0       	rjmp	.+80     	; 0x4fa8 <APP_vCalculatorLCD+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f58:	8e 01       	movw	r16, r28
    4f5a:	09 59       	subi	r16, 0x99	; 153
    4f5c:	1f 4f       	sbci	r17, 0xFF	; 255
    4f5e:	fe 01       	movw	r30, r28
    4f60:	e7 59       	subi	r30, 0x97	; 151
    4f62:	ff 4f       	sbci	r31, 0xFF	; 255
    4f64:	60 81       	ld	r22, Z
    4f66:	71 81       	ldd	r23, Z+1	; 0x01
    4f68:	82 81       	ldd	r24, Z+2	; 0x02
    4f6a:	93 81       	ldd	r25, Z+3	; 0x03
    4f6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f70:	dc 01       	movw	r26, r24
    4f72:	cb 01       	movw	r24, r22
    4f74:	f8 01       	movw	r30, r16
    4f76:	91 83       	std	Z+1, r25	; 0x01
    4f78:	80 83       	st	Z, r24
    4f7a:	de 01       	movw	r26, r28
    4f7c:	ad 59       	subi	r26, 0x9D	; 157
    4f7e:	bf 4f       	sbci	r27, 0xFF	; 255
    4f80:	fe 01       	movw	r30, r28
    4f82:	e9 59       	subi	r30, 0x99	; 153
    4f84:	ff 4f       	sbci	r31, 0xFF	; 255
    4f86:	80 81       	ld	r24, Z
    4f88:	91 81       	ldd	r25, Z+1	; 0x01
    4f8a:	11 96       	adiw	r26, 0x01	; 1
    4f8c:	9c 93       	st	X, r25
    4f8e:	8e 93       	st	-X, r24
    4f90:	fe 01       	movw	r30, r28
    4f92:	ed 59       	subi	r30, 0x9D	; 157
    4f94:	ff 4f       	sbci	r31, 0xFF	; 255
    4f96:	80 81       	ld	r24, Z
    4f98:	91 81       	ldd	r25, Z+1	; 0x01
    4f9a:	01 97       	sbiw	r24, 0x01	; 1
    4f9c:	f1 f7       	brne	.-4      	; 0x4f9a <APP_vCalculatorLCD+0x18c>
    4f9e:	fe 01       	movw	r30, r28
    4fa0:	ed 59       	subi	r30, 0x9D	; 157
    4fa2:	ff 4f       	sbci	r31, 0xFF	; 255
    4fa4:	91 83       	std	Z+1, r25	; 0x01
    4fa6:	80 83       	st	Z, r24
		_delay_ms(50);
		if(Loc_u8Num1!=0xff){
    4fa8:	fe 01       	movw	r30, r28
    4faa:	eb 58       	subi	r30, 0x8B	; 139
    4fac:	ff 4f       	sbci	r31, 0xFF	; 255
    4fae:	80 81       	ld	r24, Z
    4fb0:	8f 3f       	cpi	r24, 0xFF	; 255
    4fb2:	09 f4       	brne	.+2      	; 0x4fb6 <APP_vCalculatorLCD+0x1a8>
    4fb4:	3f cf       	rjmp	.-386    	; 0x4e34 <APP_vCalculatorLCD+0x26>
			LCD_vInit();
    4fb6:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <LCD_vInit>
			LCD_vWriteCharacter(Loc_u8Num1+48);
    4fba:	fe 01       	movw	r30, r28
    4fbc:	eb 58       	subi	r30, 0x8B	; 139
    4fbe:	ff 4f       	sbci	r31, 0xFF	; 255
    4fc0:	80 81       	ld	r24, Z
    4fc2:	80 5d       	subi	r24, 0xD0	; 208
    4fc4:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <LCD_vWriteCharacter>
    4fc8:	fe 01       	movw	r30, r28
    4fca:	e1 5a       	subi	r30, 0xA1	; 161
    4fcc:	ff 4f       	sbci	r31, 0xFF	; 255
    4fce:	80 e0       	ldi	r24, 0x00	; 0
    4fd0:	90 e0       	ldi	r25, 0x00	; 0
    4fd2:	a8 e4       	ldi	r26, 0x48	; 72
    4fd4:	b2 e4       	ldi	r27, 0x42	; 66
    4fd6:	80 83       	st	Z, r24
    4fd8:	91 83       	std	Z+1, r25	; 0x01
    4fda:	a2 83       	std	Z+2, r26	; 0x02
    4fdc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4fde:	8e 01       	movw	r16, r28
    4fe0:	05 5a       	subi	r16, 0xA5	; 165
    4fe2:	1f 4f       	sbci	r17, 0xFF	; 255
    4fe4:	fe 01       	movw	r30, r28
    4fe6:	e1 5a       	subi	r30, 0xA1	; 161
    4fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    4fea:	60 81       	ld	r22, Z
    4fec:	71 81       	ldd	r23, Z+1	; 0x01
    4fee:	82 81       	ldd	r24, Z+2	; 0x02
    4ff0:	93 81       	ldd	r25, Z+3	; 0x03
    4ff2:	20 e0       	ldi	r18, 0x00	; 0
    4ff4:	30 e0       	ldi	r19, 0x00	; 0
    4ff6:	4a e7       	ldi	r20, 0x7A	; 122
    4ff8:	55 e4       	ldi	r21, 0x45	; 69
    4ffa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ffe:	dc 01       	movw	r26, r24
    5000:	cb 01       	movw	r24, r22
    5002:	f8 01       	movw	r30, r16
    5004:	80 83       	st	Z, r24
    5006:	91 83       	std	Z+1, r25	; 0x01
    5008:	a2 83       	std	Z+2, r26	; 0x02
    500a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    500c:	fe 01       	movw	r30, r28
    500e:	e5 5a       	subi	r30, 0xA5	; 165
    5010:	ff 4f       	sbci	r31, 0xFF	; 255
    5012:	60 81       	ld	r22, Z
    5014:	71 81       	ldd	r23, Z+1	; 0x01
    5016:	82 81       	ldd	r24, Z+2	; 0x02
    5018:	93 81       	ldd	r25, Z+3	; 0x03
    501a:	20 e0       	ldi	r18, 0x00	; 0
    501c:	30 e0       	ldi	r19, 0x00	; 0
    501e:	40 e8       	ldi	r20, 0x80	; 128
    5020:	5f e3       	ldi	r21, 0x3F	; 63
    5022:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5026:	88 23       	and	r24, r24
    5028:	44 f4       	brge	.+16     	; 0x503a <APP_vCalculatorLCD+0x22c>
		__ticks = 1;
    502a:	fe 01       	movw	r30, r28
    502c:	e7 5a       	subi	r30, 0xA7	; 167
    502e:	ff 4f       	sbci	r31, 0xFF	; 255
    5030:	81 e0       	ldi	r24, 0x01	; 1
    5032:	90 e0       	ldi	r25, 0x00	; 0
    5034:	91 83       	std	Z+1, r25	; 0x01
    5036:	80 83       	st	Z, r24
    5038:	64 c0       	rjmp	.+200    	; 0x5102 <APP_vCalculatorLCD+0x2f4>
	else if (__tmp > 65535)
    503a:	fe 01       	movw	r30, r28
    503c:	e5 5a       	subi	r30, 0xA5	; 165
    503e:	ff 4f       	sbci	r31, 0xFF	; 255
    5040:	60 81       	ld	r22, Z
    5042:	71 81       	ldd	r23, Z+1	; 0x01
    5044:	82 81       	ldd	r24, Z+2	; 0x02
    5046:	93 81       	ldd	r25, Z+3	; 0x03
    5048:	20 e0       	ldi	r18, 0x00	; 0
    504a:	3f ef       	ldi	r19, 0xFF	; 255
    504c:	4f e7       	ldi	r20, 0x7F	; 127
    504e:	57 e4       	ldi	r21, 0x47	; 71
    5050:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5054:	18 16       	cp	r1, r24
    5056:	0c f0       	brlt	.+2      	; 0x505a <APP_vCalculatorLCD+0x24c>
    5058:	43 c0       	rjmp	.+134    	; 0x50e0 <APP_vCalculatorLCD+0x2d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    505a:	fe 01       	movw	r30, r28
    505c:	e1 5a       	subi	r30, 0xA1	; 161
    505e:	ff 4f       	sbci	r31, 0xFF	; 255
    5060:	60 81       	ld	r22, Z
    5062:	71 81       	ldd	r23, Z+1	; 0x01
    5064:	82 81       	ldd	r24, Z+2	; 0x02
    5066:	93 81       	ldd	r25, Z+3	; 0x03
    5068:	20 e0       	ldi	r18, 0x00	; 0
    506a:	30 e0       	ldi	r19, 0x00	; 0
    506c:	40 e2       	ldi	r20, 0x20	; 32
    506e:	51 e4       	ldi	r21, 0x41	; 65
    5070:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5074:	dc 01       	movw	r26, r24
    5076:	cb 01       	movw	r24, r22
    5078:	8e 01       	movw	r16, r28
    507a:	07 5a       	subi	r16, 0xA7	; 167
    507c:	1f 4f       	sbci	r17, 0xFF	; 255
    507e:	bc 01       	movw	r22, r24
    5080:	cd 01       	movw	r24, r26
    5082:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5086:	dc 01       	movw	r26, r24
    5088:	cb 01       	movw	r24, r22
    508a:	f8 01       	movw	r30, r16
    508c:	91 83       	std	Z+1, r25	; 0x01
    508e:	80 83       	st	Z, r24
    5090:	1f c0       	rjmp	.+62     	; 0x50d0 <APP_vCalculatorLCD+0x2c2>
    5092:	fe 01       	movw	r30, r28
    5094:	e9 5a       	subi	r30, 0xA9	; 169
    5096:	ff 4f       	sbci	r31, 0xFF	; 255
    5098:	80 e9       	ldi	r24, 0x90	; 144
    509a:	91 e0       	ldi	r25, 0x01	; 1
    509c:	91 83       	std	Z+1, r25	; 0x01
    509e:	80 83       	st	Z, r24
    50a0:	fe 01       	movw	r30, r28
    50a2:	e9 5a       	subi	r30, 0xA9	; 169
    50a4:	ff 4f       	sbci	r31, 0xFF	; 255
    50a6:	80 81       	ld	r24, Z
    50a8:	91 81       	ldd	r25, Z+1	; 0x01
    50aa:	01 97       	sbiw	r24, 0x01	; 1
    50ac:	f1 f7       	brne	.-4      	; 0x50aa <APP_vCalculatorLCD+0x29c>
    50ae:	fe 01       	movw	r30, r28
    50b0:	e9 5a       	subi	r30, 0xA9	; 169
    50b2:	ff 4f       	sbci	r31, 0xFF	; 255
    50b4:	91 83       	std	Z+1, r25	; 0x01
    50b6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    50b8:	de 01       	movw	r26, r28
    50ba:	a7 5a       	subi	r26, 0xA7	; 167
    50bc:	bf 4f       	sbci	r27, 0xFF	; 255
    50be:	fe 01       	movw	r30, r28
    50c0:	e7 5a       	subi	r30, 0xA7	; 167
    50c2:	ff 4f       	sbci	r31, 0xFF	; 255
    50c4:	80 81       	ld	r24, Z
    50c6:	91 81       	ldd	r25, Z+1	; 0x01
    50c8:	01 97       	sbiw	r24, 0x01	; 1
    50ca:	11 96       	adiw	r26, 0x01	; 1
    50cc:	9c 93       	st	X, r25
    50ce:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    50d0:	fe 01       	movw	r30, r28
    50d2:	e7 5a       	subi	r30, 0xA7	; 167
    50d4:	ff 4f       	sbci	r31, 0xFF	; 255
    50d6:	80 81       	ld	r24, Z
    50d8:	91 81       	ldd	r25, Z+1	; 0x01
    50da:	00 97       	sbiw	r24, 0x00	; 0
    50dc:	d1 f6       	brne	.-76     	; 0x5092 <APP_vCalculatorLCD+0x284>
    50de:	27 c0       	rjmp	.+78     	; 0x512e <APP_vCalculatorLCD+0x320>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    50e0:	8e 01       	movw	r16, r28
    50e2:	07 5a       	subi	r16, 0xA7	; 167
    50e4:	1f 4f       	sbci	r17, 0xFF	; 255
    50e6:	fe 01       	movw	r30, r28
    50e8:	e5 5a       	subi	r30, 0xA5	; 165
    50ea:	ff 4f       	sbci	r31, 0xFF	; 255
    50ec:	60 81       	ld	r22, Z
    50ee:	71 81       	ldd	r23, Z+1	; 0x01
    50f0:	82 81       	ldd	r24, Z+2	; 0x02
    50f2:	93 81       	ldd	r25, Z+3	; 0x03
    50f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50f8:	dc 01       	movw	r26, r24
    50fa:	cb 01       	movw	r24, r22
    50fc:	f8 01       	movw	r30, r16
    50fe:	91 83       	std	Z+1, r25	; 0x01
    5100:	80 83       	st	Z, r24
    5102:	de 01       	movw	r26, r28
    5104:	ab 5a       	subi	r26, 0xAB	; 171
    5106:	bf 4f       	sbci	r27, 0xFF	; 255
    5108:	fe 01       	movw	r30, r28
    510a:	e7 5a       	subi	r30, 0xA7	; 167
    510c:	ff 4f       	sbci	r31, 0xFF	; 255
    510e:	80 81       	ld	r24, Z
    5110:	91 81       	ldd	r25, Z+1	; 0x01
    5112:	8d 93       	st	X+, r24
    5114:	9c 93       	st	X, r25
    5116:	fe 01       	movw	r30, r28
    5118:	eb 5a       	subi	r30, 0xAB	; 171
    511a:	ff 4f       	sbci	r31, 0xFF	; 255
    511c:	80 81       	ld	r24, Z
    511e:	91 81       	ldd	r25, Z+1	; 0x01
    5120:	01 97       	sbiw	r24, 0x01	; 1
    5122:	f1 f7       	brne	.-4      	; 0x5120 <APP_vCalculatorLCD+0x312>
    5124:	fe 01       	movw	r30, r28
    5126:	eb 5a       	subi	r30, 0xAB	; 171
    5128:	ff 4f       	sbci	r31, 0xFF	; 255
    512a:	91 83       	std	Z+1, r25	; 0x01
    512c:	80 83       	st	Z, r24
			break;
		}
	}
	_delay_ms(50);
	KAYPAD_vInit();
    512e:	0e 94 b2 20 	call	0x4164	; 0x4164 <KAYPAD_vInit>
	//--- delete all while 1 and replace it with if that take v and it count
	while(1){
		Loc_u8Symbol1=KAYPAD_u8GetKey();
    5132:	0e 94 c1 20 	call	0x4182	; 0x4182 <KAYPAD_u8GetKey>
    5136:	fe 01       	movw	r30, r28
    5138:	ed 58       	subi	r30, 0x8D	; 141
    513a:	ff 4f       	sbci	r31, 0xFF	; 255
    513c:	80 83       	st	Z, r24
    513e:	fe 01       	movw	r30, r28
    5140:	ef 5a       	subi	r30, 0xAF	; 175
    5142:	ff 4f       	sbci	r31, 0xFF	; 255
    5144:	80 e0       	ldi	r24, 0x00	; 0
    5146:	90 e0       	ldi	r25, 0x00	; 0
    5148:	a8 e4       	ldi	r26, 0x48	; 72
    514a:	b2 e4       	ldi	r27, 0x42	; 66
    514c:	80 83       	st	Z, r24
    514e:	91 83       	std	Z+1, r25	; 0x01
    5150:	a2 83       	std	Z+2, r26	; 0x02
    5152:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5154:	8e 01       	movw	r16, r28
    5156:	03 5b       	subi	r16, 0xB3	; 179
    5158:	1f 4f       	sbci	r17, 0xFF	; 255
    515a:	fe 01       	movw	r30, r28
    515c:	ef 5a       	subi	r30, 0xAF	; 175
    515e:	ff 4f       	sbci	r31, 0xFF	; 255
    5160:	60 81       	ld	r22, Z
    5162:	71 81       	ldd	r23, Z+1	; 0x01
    5164:	82 81       	ldd	r24, Z+2	; 0x02
    5166:	93 81       	ldd	r25, Z+3	; 0x03
    5168:	20 e0       	ldi	r18, 0x00	; 0
    516a:	30 e0       	ldi	r19, 0x00	; 0
    516c:	4a e7       	ldi	r20, 0x7A	; 122
    516e:	55 e4       	ldi	r21, 0x45	; 69
    5170:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5174:	dc 01       	movw	r26, r24
    5176:	cb 01       	movw	r24, r22
    5178:	f8 01       	movw	r30, r16
    517a:	80 83       	st	Z, r24
    517c:	91 83       	std	Z+1, r25	; 0x01
    517e:	a2 83       	std	Z+2, r26	; 0x02
    5180:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5182:	fe 01       	movw	r30, r28
    5184:	e3 5b       	subi	r30, 0xB3	; 179
    5186:	ff 4f       	sbci	r31, 0xFF	; 255
    5188:	60 81       	ld	r22, Z
    518a:	71 81       	ldd	r23, Z+1	; 0x01
    518c:	82 81       	ldd	r24, Z+2	; 0x02
    518e:	93 81       	ldd	r25, Z+3	; 0x03
    5190:	20 e0       	ldi	r18, 0x00	; 0
    5192:	30 e0       	ldi	r19, 0x00	; 0
    5194:	40 e8       	ldi	r20, 0x80	; 128
    5196:	5f e3       	ldi	r21, 0x3F	; 63
    5198:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    519c:	88 23       	and	r24, r24
    519e:	44 f4       	brge	.+16     	; 0x51b0 <APP_vCalculatorLCD+0x3a2>
		__ticks = 1;
    51a0:	fe 01       	movw	r30, r28
    51a2:	e5 5b       	subi	r30, 0xB5	; 181
    51a4:	ff 4f       	sbci	r31, 0xFF	; 255
    51a6:	81 e0       	ldi	r24, 0x01	; 1
    51a8:	90 e0       	ldi	r25, 0x00	; 0
    51aa:	91 83       	std	Z+1, r25	; 0x01
    51ac:	80 83       	st	Z, r24
    51ae:	64 c0       	rjmp	.+200    	; 0x5278 <APP_vCalculatorLCD+0x46a>
	else if (__tmp > 65535)
    51b0:	fe 01       	movw	r30, r28
    51b2:	e3 5b       	subi	r30, 0xB3	; 179
    51b4:	ff 4f       	sbci	r31, 0xFF	; 255
    51b6:	60 81       	ld	r22, Z
    51b8:	71 81       	ldd	r23, Z+1	; 0x01
    51ba:	82 81       	ldd	r24, Z+2	; 0x02
    51bc:	93 81       	ldd	r25, Z+3	; 0x03
    51be:	20 e0       	ldi	r18, 0x00	; 0
    51c0:	3f ef       	ldi	r19, 0xFF	; 255
    51c2:	4f e7       	ldi	r20, 0x7F	; 127
    51c4:	57 e4       	ldi	r21, 0x47	; 71
    51c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    51ca:	18 16       	cp	r1, r24
    51cc:	0c f0       	brlt	.+2      	; 0x51d0 <APP_vCalculatorLCD+0x3c2>
    51ce:	43 c0       	rjmp	.+134    	; 0x5256 <APP_vCalculatorLCD+0x448>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    51d0:	fe 01       	movw	r30, r28
    51d2:	ef 5a       	subi	r30, 0xAF	; 175
    51d4:	ff 4f       	sbci	r31, 0xFF	; 255
    51d6:	60 81       	ld	r22, Z
    51d8:	71 81       	ldd	r23, Z+1	; 0x01
    51da:	82 81       	ldd	r24, Z+2	; 0x02
    51dc:	93 81       	ldd	r25, Z+3	; 0x03
    51de:	20 e0       	ldi	r18, 0x00	; 0
    51e0:	30 e0       	ldi	r19, 0x00	; 0
    51e2:	40 e2       	ldi	r20, 0x20	; 32
    51e4:	51 e4       	ldi	r21, 0x41	; 65
    51e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    51ea:	dc 01       	movw	r26, r24
    51ec:	cb 01       	movw	r24, r22
    51ee:	8e 01       	movw	r16, r28
    51f0:	05 5b       	subi	r16, 0xB5	; 181
    51f2:	1f 4f       	sbci	r17, 0xFF	; 255
    51f4:	bc 01       	movw	r22, r24
    51f6:	cd 01       	movw	r24, r26
    51f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51fc:	dc 01       	movw	r26, r24
    51fe:	cb 01       	movw	r24, r22
    5200:	f8 01       	movw	r30, r16
    5202:	91 83       	std	Z+1, r25	; 0x01
    5204:	80 83       	st	Z, r24
    5206:	1f c0       	rjmp	.+62     	; 0x5246 <APP_vCalculatorLCD+0x438>
    5208:	fe 01       	movw	r30, r28
    520a:	e7 5b       	subi	r30, 0xB7	; 183
    520c:	ff 4f       	sbci	r31, 0xFF	; 255
    520e:	80 e9       	ldi	r24, 0x90	; 144
    5210:	91 e0       	ldi	r25, 0x01	; 1
    5212:	91 83       	std	Z+1, r25	; 0x01
    5214:	80 83       	st	Z, r24
    5216:	fe 01       	movw	r30, r28
    5218:	e7 5b       	subi	r30, 0xB7	; 183
    521a:	ff 4f       	sbci	r31, 0xFF	; 255
    521c:	80 81       	ld	r24, Z
    521e:	91 81       	ldd	r25, Z+1	; 0x01
    5220:	01 97       	sbiw	r24, 0x01	; 1
    5222:	f1 f7       	brne	.-4      	; 0x5220 <APP_vCalculatorLCD+0x412>
    5224:	fe 01       	movw	r30, r28
    5226:	e7 5b       	subi	r30, 0xB7	; 183
    5228:	ff 4f       	sbci	r31, 0xFF	; 255
    522a:	91 83       	std	Z+1, r25	; 0x01
    522c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    522e:	de 01       	movw	r26, r28
    5230:	a5 5b       	subi	r26, 0xB5	; 181
    5232:	bf 4f       	sbci	r27, 0xFF	; 255
    5234:	fe 01       	movw	r30, r28
    5236:	e5 5b       	subi	r30, 0xB5	; 181
    5238:	ff 4f       	sbci	r31, 0xFF	; 255
    523a:	80 81       	ld	r24, Z
    523c:	91 81       	ldd	r25, Z+1	; 0x01
    523e:	01 97       	sbiw	r24, 0x01	; 1
    5240:	11 96       	adiw	r26, 0x01	; 1
    5242:	9c 93       	st	X, r25
    5244:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5246:	fe 01       	movw	r30, r28
    5248:	e5 5b       	subi	r30, 0xB5	; 181
    524a:	ff 4f       	sbci	r31, 0xFF	; 255
    524c:	80 81       	ld	r24, Z
    524e:	91 81       	ldd	r25, Z+1	; 0x01
    5250:	00 97       	sbiw	r24, 0x00	; 0
    5252:	d1 f6       	brne	.-76     	; 0x5208 <APP_vCalculatorLCD+0x3fa>
    5254:	28 c0       	rjmp	.+80     	; 0x52a6 <APP_vCalculatorLCD+0x498>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5256:	8e 01       	movw	r16, r28
    5258:	05 5b       	subi	r16, 0xB5	; 181
    525a:	1f 4f       	sbci	r17, 0xFF	; 255
    525c:	fe 01       	movw	r30, r28
    525e:	e3 5b       	subi	r30, 0xB3	; 179
    5260:	ff 4f       	sbci	r31, 0xFF	; 255
    5262:	60 81       	ld	r22, Z
    5264:	71 81       	ldd	r23, Z+1	; 0x01
    5266:	82 81       	ldd	r24, Z+2	; 0x02
    5268:	93 81       	ldd	r25, Z+3	; 0x03
    526a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    526e:	dc 01       	movw	r26, r24
    5270:	cb 01       	movw	r24, r22
    5272:	f8 01       	movw	r30, r16
    5274:	91 83       	std	Z+1, r25	; 0x01
    5276:	80 83       	st	Z, r24
    5278:	de 01       	movw	r26, r28
    527a:	a9 5b       	subi	r26, 0xB9	; 185
    527c:	bf 4f       	sbci	r27, 0xFF	; 255
    527e:	fe 01       	movw	r30, r28
    5280:	e5 5b       	subi	r30, 0xB5	; 181
    5282:	ff 4f       	sbci	r31, 0xFF	; 255
    5284:	80 81       	ld	r24, Z
    5286:	91 81       	ldd	r25, Z+1	; 0x01
    5288:	11 96       	adiw	r26, 0x01	; 1
    528a:	9c 93       	st	X, r25
    528c:	8e 93       	st	-X, r24
    528e:	fe 01       	movw	r30, r28
    5290:	e9 5b       	subi	r30, 0xB9	; 185
    5292:	ff 4f       	sbci	r31, 0xFF	; 255
    5294:	80 81       	ld	r24, Z
    5296:	91 81       	ldd	r25, Z+1	; 0x01
    5298:	01 97       	sbiw	r24, 0x01	; 1
    529a:	f1 f7       	brne	.-4      	; 0x5298 <APP_vCalculatorLCD+0x48a>
    529c:	fe 01       	movw	r30, r28
    529e:	e9 5b       	subi	r30, 0xB9	; 185
    52a0:	ff 4f       	sbci	r31, 0xFF	; 255
    52a2:	91 83       	std	Z+1, r25	; 0x01
    52a4:	80 83       	st	Z, r24
		_delay_ms(50);
		if(Loc_u8Symbol1=='/'||Loc_u8Symbol1=='*'||Loc_u8Symbol1=='-'||Loc_u8Symbol1=='+'||Loc_u8Symbol1=='%'){
    52a6:	fe 01       	movw	r30, r28
    52a8:	ed 58       	subi	r30, 0x8D	; 141
    52aa:	ff 4f       	sbci	r31, 0xFF	; 255
    52ac:	80 81       	ld	r24, Z
    52ae:	8f 32       	cpi	r24, 0x2F	; 47
    52b0:	c9 f0       	breq	.+50     	; 0x52e4 <APP_vCalculatorLCD+0x4d6>
    52b2:	fe 01       	movw	r30, r28
    52b4:	ed 58       	subi	r30, 0x8D	; 141
    52b6:	ff 4f       	sbci	r31, 0xFF	; 255
    52b8:	80 81       	ld	r24, Z
    52ba:	8a 32       	cpi	r24, 0x2A	; 42
    52bc:	99 f0       	breq	.+38     	; 0x52e4 <APP_vCalculatorLCD+0x4d6>
    52be:	fe 01       	movw	r30, r28
    52c0:	ed 58       	subi	r30, 0x8D	; 141
    52c2:	ff 4f       	sbci	r31, 0xFF	; 255
    52c4:	80 81       	ld	r24, Z
    52c6:	8d 32       	cpi	r24, 0x2D	; 45
    52c8:	69 f0       	breq	.+26     	; 0x52e4 <APP_vCalculatorLCD+0x4d6>
    52ca:	fe 01       	movw	r30, r28
    52cc:	ed 58       	subi	r30, 0x8D	; 141
    52ce:	ff 4f       	sbci	r31, 0xFF	; 255
    52d0:	80 81       	ld	r24, Z
    52d2:	8b 32       	cpi	r24, 0x2B	; 43
    52d4:	39 f0       	breq	.+14     	; 0x52e4 <APP_vCalculatorLCD+0x4d6>
    52d6:	fe 01       	movw	r30, r28
    52d8:	ed 58       	subi	r30, 0x8D	; 141
    52da:	ff 4f       	sbci	r31, 0xFF	; 255
    52dc:	80 81       	ld	r24, Z
    52de:	85 32       	cpi	r24, 0x25	; 37
    52e0:	09 f0       	breq	.+2      	; 0x52e4 <APP_vCalculatorLCD+0x4d6>
    52e2:	27 cf       	rjmp	.-434    	; 0x5132 <APP_vCalculatorLCD+0x324>
			LCD_vInitWithOutClear();
    52e4:	0e 94 67 1c 	call	0x38ce	; 0x38ce <LCD_vInitWithOutClear>
			LCD_vGoTo(LineOne,1);
    52e8:	80 e8       	ldi	r24, 0x80	; 128
    52ea:	61 e0       	ldi	r22, 0x01	; 1
    52ec:	0e 94 98 1f 	call	0x3f30	; 0x3f30 <LCD_vGoTo>
			LCD_vWriteCharacter(Loc_u8Symbol1);
    52f0:	fe 01       	movw	r30, r28
    52f2:	ed 58       	subi	r30, 0x8D	; 141
    52f4:	ff 4f       	sbci	r31, 0xFF	; 255
    52f6:	80 81       	ld	r24, Z
    52f8:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <LCD_vWriteCharacter>
    52fc:	fe 01       	movw	r30, r28
    52fe:	ed 5b       	subi	r30, 0xBD	; 189
    5300:	ff 4f       	sbci	r31, 0xFF	; 255
    5302:	80 e0       	ldi	r24, 0x00	; 0
    5304:	90 e0       	ldi	r25, 0x00	; 0
    5306:	a8 e4       	ldi	r26, 0x48	; 72
    5308:	b2 e4       	ldi	r27, 0x42	; 66
    530a:	80 83       	st	Z, r24
    530c:	91 83       	std	Z+1, r25	; 0x01
    530e:	a2 83       	std	Z+2, r26	; 0x02
    5310:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5312:	8e 01       	movw	r16, r28
    5314:	01 5c       	subi	r16, 0xC1	; 193
    5316:	1f 4f       	sbci	r17, 0xFF	; 255
    5318:	fe 01       	movw	r30, r28
    531a:	ed 5b       	subi	r30, 0xBD	; 189
    531c:	ff 4f       	sbci	r31, 0xFF	; 255
    531e:	60 81       	ld	r22, Z
    5320:	71 81       	ldd	r23, Z+1	; 0x01
    5322:	82 81       	ldd	r24, Z+2	; 0x02
    5324:	93 81       	ldd	r25, Z+3	; 0x03
    5326:	20 e0       	ldi	r18, 0x00	; 0
    5328:	30 e0       	ldi	r19, 0x00	; 0
    532a:	4a e7       	ldi	r20, 0x7A	; 122
    532c:	55 e4       	ldi	r21, 0x45	; 69
    532e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5332:	dc 01       	movw	r26, r24
    5334:	cb 01       	movw	r24, r22
    5336:	f8 01       	movw	r30, r16
    5338:	80 83       	st	Z, r24
    533a:	91 83       	std	Z+1, r25	; 0x01
    533c:	a2 83       	std	Z+2, r26	; 0x02
    533e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5340:	fe 01       	movw	r30, r28
    5342:	ff 96       	adiw	r30, 0x3f	; 63
    5344:	60 81       	ld	r22, Z
    5346:	71 81       	ldd	r23, Z+1	; 0x01
    5348:	82 81       	ldd	r24, Z+2	; 0x02
    534a:	93 81       	ldd	r25, Z+3	; 0x03
    534c:	20 e0       	ldi	r18, 0x00	; 0
    534e:	30 e0       	ldi	r19, 0x00	; 0
    5350:	40 e8       	ldi	r20, 0x80	; 128
    5352:	5f e3       	ldi	r21, 0x3F	; 63
    5354:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5358:	88 23       	and	r24, r24
    535a:	2c f4       	brge	.+10     	; 0x5366 <APP_vCalculatorLCD+0x558>
		__ticks = 1;
    535c:	81 e0       	ldi	r24, 0x01	; 1
    535e:	90 e0       	ldi	r25, 0x00	; 0
    5360:	9e af       	std	Y+62, r25	; 0x3e
    5362:	8d af       	std	Y+61, r24	; 0x3d
    5364:	46 c0       	rjmp	.+140    	; 0x53f2 <APP_vCalculatorLCD+0x5e4>
	else if (__tmp > 65535)
    5366:	fe 01       	movw	r30, r28
    5368:	ff 96       	adiw	r30, 0x3f	; 63
    536a:	60 81       	ld	r22, Z
    536c:	71 81       	ldd	r23, Z+1	; 0x01
    536e:	82 81       	ldd	r24, Z+2	; 0x02
    5370:	93 81       	ldd	r25, Z+3	; 0x03
    5372:	20 e0       	ldi	r18, 0x00	; 0
    5374:	3f ef       	ldi	r19, 0xFF	; 255
    5376:	4f e7       	ldi	r20, 0x7F	; 127
    5378:	57 e4       	ldi	r21, 0x47	; 71
    537a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    537e:	18 16       	cp	r1, r24
    5380:	64 f5       	brge	.+88     	; 0x53da <APP_vCalculatorLCD+0x5cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5382:	fe 01       	movw	r30, r28
    5384:	ed 5b       	subi	r30, 0xBD	; 189
    5386:	ff 4f       	sbci	r31, 0xFF	; 255
    5388:	60 81       	ld	r22, Z
    538a:	71 81       	ldd	r23, Z+1	; 0x01
    538c:	82 81       	ldd	r24, Z+2	; 0x02
    538e:	93 81       	ldd	r25, Z+3	; 0x03
    5390:	20 e0       	ldi	r18, 0x00	; 0
    5392:	30 e0       	ldi	r19, 0x00	; 0
    5394:	40 e2       	ldi	r20, 0x20	; 32
    5396:	51 e4       	ldi	r21, 0x41	; 65
    5398:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    539c:	dc 01       	movw	r26, r24
    539e:	cb 01       	movw	r24, r22
    53a0:	bc 01       	movw	r22, r24
    53a2:	cd 01       	movw	r24, r26
    53a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    53a8:	dc 01       	movw	r26, r24
    53aa:	cb 01       	movw	r24, r22
    53ac:	9e af       	std	Y+62, r25	; 0x3e
    53ae:	8d af       	std	Y+61, r24	; 0x3d
    53b0:	0f c0       	rjmp	.+30     	; 0x53d0 <APP_vCalculatorLCD+0x5c2>
    53b2:	80 e9       	ldi	r24, 0x90	; 144
    53b4:	91 e0       	ldi	r25, 0x01	; 1
    53b6:	9c af       	std	Y+60, r25	; 0x3c
    53b8:	8b af       	std	Y+59, r24	; 0x3b
    53ba:	8b ad       	ldd	r24, Y+59	; 0x3b
    53bc:	9c ad       	ldd	r25, Y+60	; 0x3c
    53be:	01 97       	sbiw	r24, 0x01	; 1
    53c0:	f1 f7       	brne	.-4      	; 0x53be <APP_vCalculatorLCD+0x5b0>
    53c2:	9c af       	std	Y+60, r25	; 0x3c
    53c4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    53c6:	8d ad       	ldd	r24, Y+61	; 0x3d
    53c8:	9e ad       	ldd	r25, Y+62	; 0x3e
    53ca:	01 97       	sbiw	r24, 0x01	; 1
    53cc:	9e af       	std	Y+62, r25	; 0x3e
    53ce:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    53d0:	8d ad       	ldd	r24, Y+61	; 0x3d
    53d2:	9e ad       	ldd	r25, Y+62	; 0x3e
    53d4:	00 97       	sbiw	r24, 0x00	; 0
    53d6:	69 f7       	brne	.-38     	; 0x53b2 <APP_vCalculatorLCD+0x5a4>
    53d8:	16 c0       	rjmp	.+44     	; 0x5406 <APP_vCalculatorLCD+0x5f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    53da:	fe 01       	movw	r30, r28
    53dc:	ff 96       	adiw	r30, 0x3f	; 63
    53de:	60 81       	ld	r22, Z
    53e0:	71 81       	ldd	r23, Z+1	; 0x01
    53e2:	82 81       	ldd	r24, Z+2	; 0x02
    53e4:	93 81       	ldd	r25, Z+3	; 0x03
    53e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    53ea:	dc 01       	movw	r26, r24
    53ec:	cb 01       	movw	r24, r22
    53ee:	9e af       	std	Y+62, r25	; 0x3e
    53f0:	8d af       	std	Y+61, r24	; 0x3d
    53f2:	8d ad       	ldd	r24, Y+61	; 0x3d
    53f4:	9e ad       	ldd	r25, Y+62	; 0x3e
    53f6:	9a af       	std	Y+58, r25	; 0x3a
    53f8:	89 af       	std	Y+57, r24	; 0x39
    53fa:	89 ad       	ldd	r24, Y+57	; 0x39
    53fc:	9a ad       	ldd	r25, Y+58	; 0x3a
    53fe:	01 97       	sbiw	r24, 0x01	; 1
    5400:	f1 f7       	brne	.-4      	; 0x53fe <APP_vCalculatorLCD+0x5f0>
    5402:	9a af       	std	Y+58, r25	; 0x3a
    5404:	89 af       	std	Y+57, r24	; 0x39
			break;
		}
	}
	_delay_ms(50);
	KAYPAD_vInit();
    5406:	0e 94 b2 20 	call	0x4164	; 0x4164 <KAYPAD_vInit>
	while(1){
		Loc_u8Num2=KAYPAD_u8GetKey();
    540a:	0e 94 c1 20 	call	0x4182	; 0x4182 <KAYPAD_u8GetKey>
    540e:	fe 01       	movw	r30, r28
    5410:	ec 58       	subi	r30, 0x8C	; 140
    5412:	ff 4f       	sbci	r31, 0xFF	; 255
    5414:	80 83       	st	Z, r24
    5416:	80 e0       	ldi	r24, 0x00	; 0
    5418:	90 e0       	ldi	r25, 0x00	; 0
    541a:	a8 e4       	ldi	r26, 0x48	; 72
    541c:	b2 e4       	ldi	r27, 0x42	; 66
    541e:	8d ab       	std	Y+53, r24	; 0x35
    5420:	9e ab       	std	Y+54, r25	; 0x36
    5422:	af ab       	std	Y+55, r26	; 0x37
    5424:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5426:	6d a9       	ldd	r22, Y+53	; 0x35
    5428:	7e a9       	ldd	r23, Y+54	; 0x36
    542a:	8f a9       	ldd	r24, Y+55	; 0x37
    542c:	98 ad       	ldd	r25, Y+56	; 0x38
    542e:	20 e0       	ldi	r18, 0x00	; 0
    5430:	30 e0       	ldi	r19, 0x00	; 0
    5432:	4a e7       	ldi	r20, 0x7A	; 122
    5434:	55 e4       	ldi	r21, 0x45	; 69
    5436:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    543a:	dc 01       	movw	r26, r24
    543c:	cb 01       	movw	r24, r22
    543e:	89 ab       	std	Y+49, r24	; 0x31
    5440:	9a ab       	std	Y+50, r25	; 0x32
    5442:	ab ab       	std	Y+51, r26	; 0x33
    5444:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5446:	69 a9       	ldd	r22, Y+49	; 0x31
    5448:	7a a9       	ldd	r23, Y+50	; 0x32
    544a:	8b a9       	ldd	r24, Y+51	; 0x33
    544c:	9c a9       	ldd	r25, Y+52	; 0x34
    544e:	20 e0       	ldi	r18, 0x00	; 0
    5450:	30 e0       	ldi	r19, 0x00	; 0
    5452:	40 e8       	ldi	r20, 0x80	; 128
    5454:	5f e3       	ldi	r21, 0x3F	; 63
    5456:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    545a:	88 23       	and	r24, r24
    545c:	2c f4       	brge	.+10     	; 0x5468 <APP_vCalculatorLCD+0x65a>
		__ticks = 1;
    545e:	81 e0       	ldi	r24, 0x01	; 1
    5460:	90 e0       	ldi	r25, 0x00	; 0
    5462:	98 ab       	std	Y+48, r25	; 0x30
    5464:	8f a7       	std	Y+47, r24	; 0x2f
    5466:	3f c0       	rjmp	.+126    	; 0x54e6 <APP_vCalculatorLCD+0x6d8>
	else if (__tmp > 65535)
    5468:	69 a9       	ldd	r22, Y+49	; 0x31
    546a:	7a a9       	ldd	r23, Y+50	; 0x32
    546c:	8b a9       	ldd	r24, Y+51	; 0x33
    546e:	9c a9       	ldd	r25, Y+52	; 0x34
    5470:	20 e0       	ldi	r18, 0x00	; 0
    5472:	3f ef       	ldi	r19, 0xFF	; 255
    5474:	4f e7       	ldi	r20, 0x7F	; 127
    5476:	57 e4       	ldi	r21, 0x47	; 71
    5478:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    547c:	18 16       	cp	r1, r24
    547e:	4c f5       	brge	.+82     	; 0x54d2 <APP_vCalculatorLCD+0x6c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5480:	6d a9       	ldd	r22, Y+53	; 0x35
    5482:	7e a9       	ldd	r23, Y+54	; 0x36
    5484:	8f a9       	ldd	r24, Y+55	; 0x37
    5486:	98 ad       	ldd	r25, Y+56	; 0x38
    5488:	20 e0       	ldi	r18, 0x00	; 0
    548a:	30 e0       	ldi	r19, 0x00	; 0
    548c:	40 e2       	ldi	r20, 0x20	; 32
    548e:	51 e4       	ldi	r21, 0x41	; 65
    5490:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5494:	dc 01       	movw	r26, r24
    5496:	cb 01       	movw	r24, r22
    5498:	bc 01       	movw	r22, r24
    549a:	cd 01       	movw	r24, r26
    549c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54a0:	dc 01       	movw	r26, r24
    54a2:	cb 01       	movw	r24, r22
    54a4:	98 ab       	std	Y+48, r25	; 0x30
    54a6:	8f a7       	std	Y+47, r24	; 0x2f
    54a8:	0f c0       	rjmp	.+30     	; 0x54c8 <APP_vCalculatorLCD+0x6ba>
    54aa:	80 e9       	ldi	r24, 0x90	; 144
    54ac:	91 e0       	ldi	r25, 0x01	; 1
    54ae:	9e a7       	std	Y+46, r25	; 0x2e
    54b0:	8d a7       	std	Y+45, r24	; 0x2d
    54b2:	8d a5       	ldd	r24, Y+45	; 0x2d
    54b4:	9e a5       	ldd	r25, Y+46	; 0x2e
    54b6:	01 97       	sbiw	r24, 0x01	; 1
    54b8:	f1 f7       	brne	.-4      	; 0x54b6 <APP_vCalculatorLCD+0x6a8>
    54ba:	9e a7       	std	Y+46, r25	; 0x2e
    54bc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    54be:	8f a5       	ldd	r24, Y+47	; 0x2f
    54c0:	98 a9       	ldd	r25, Y+48	; 0x30
    54c2:	01 97       	sbiw	r24, 0x01	; 1
    54c4:	98 ab       	std	Y+48, r25	; 0x30
    54c6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    54c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    54ca:	98 a9       	ldd	r25, Y+48	; 0x30
    54cc:	00 97       	sbiw	r24, 0x00	; 0
    54ce:	69 f7       	brne	.-38     	; 0x54aa <APP_vCalculatorLCD+0x69c>
    54d0:	14 c0       	rjmp	.+40     	; 0x54fa <APP_vCalculatorLCD+0x6ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    54d2:	69 a9       	ldd	r22, Y+49	; 0x31
    54d4:	7a a9       	ldd	r23, Y+50	; 0x32
    54d6:	8b a9       	ldd	r24, Y+51	; 0x33
    54d8:	9c a9       	ldd	r25, Y+52	; 0x34
    54da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54de:	dc 01       	movw	r26, r24
    54e0:	cb 01       	movw	r24, r22
    54e2:	98 ab       	std	Y+48, r25	; 0x30
    54e4:	8f a7       	std	Y+47, r24	; 0x2f
    54e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    54e8:	98 a9       	ldd	r25, Y+48	; 0x30
    54ea:	9c a7       	std	Y+44, r25	; 0x2c
    54ec:	8b a7       	std	Y+43, r24	; 0x2b
    54ee:	8b a5       	ldd	r24, Y+43	; 0x2b
    54f0:	9c a5       	ldd	r25, Y+44	; 0x2c
    54f2:	01 97       	sbiw	r24, 0x01	; 1
    54f4:	f1 f7       	brne	.-4      	; 0x54f2 <APP_vCalculatorLCD+0x6e4>
    54f6:	9c a7       	std	Y+44, r25	; 0x2c
    54f8:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(50);
		if(Loc_u8Num2!=0xff){
    54fa:	fe 01       	movw	r30, r28
    54fc:	ec 58       	subi	r30, 0x8C	; 140
    54fe:	ff 4f       	sbci	r31, 0xFF	; 255
    5500:	80 81       	ld	r24, Z
    5502:	8f 3f       	cpi	r24, 0xFF	; 255
    5504:	09 f4       	brne	.+2      	; 0x5508 <APP_vCalculatorLCD+0x6fa>
    5506:	81 cf       	rjmp	.-254    	; 0x540a <APP_vCalculatorLCD+0x5fc>
			LCD_vInitWithOutClear();
    5508:	0e 94 67 1c 	call	0x38ce	; 0x38ce <LCD_vInitWithOutClear>
			LCD_vGoTo(LineOne,2);
    550c:	80 e8       	ldi	r24, 0x80	; 128
    550e:	62 e0       	ldi	r22, 0x02	; 2
    5510:	0e 94 98 1f 	call	0x3f30	; 0x3f30 <LCD_vGoTo>
			LCD_vWriteCharacter(Loc_u8Num2+48);
    5514:	fe 01       	movw	r30, r28
    5516:	ec 58       	subi	r30, 0x8C	; 140
    5518:	ff 4f       	sbci	r31, 0xFF	; 255
    551a:	80 81       	ld	r24, Z
    551c:	80 5d       	subi	r24, 0xD0	; 208
    551e:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <LCD_vWriteCharacter>
    5522:	80 e0       	ldi	r24, 0x00	; 0
    5524:	90 e0       	ldi	r25, 0x00	; 0
    5526:	a8 e4       	ldi	r26, 0x48	; 72
    5528:	b2 e4       	ldi	r27, 0x42	; 66
    552a:	8f a3       	std	Y+39, r24	; 0x27
    552c:	98 a7       	std	Y+40, r25	; 0x28
    552e:	a9 a7       	std	Y+41, r26	; 0x29
    5530:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5532:	6f a1       	ldd	r22, Y+39	; 0x27
    5534:	78 a5       	ldd	r23, Y+40	; 0x28
    5536:	89 a5       	ldd	r24, Y+41	; 0x29
    5538:	9a a5       	ldd	r25, Y+42	; 0x2a
    553a:	20 e0       	ldi	r18, 0x00	; 0
    553c:	30 e0       	ldi	r19, 0x00	; 0
    553e:	4a e7       	ldi	r20, 0x7A	; 122
    5540:	55 e4       	ldi	r21, 0x45	; 69
    5542:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5546:	dc 01       	movw	r26, r24
    5548:	cb 01       	movw	r24, r22
    554a:	8b a3       	std	Y+35, r24	; 0x23
    554c:	9c a3       	std	Y+36, r25	; 0x24
    554e:	ad a3       	std	Y+37, r26	; 0x25
    5550:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5552:	6b a1       	ldd	r22, Y+35	; 0x23
    5554:	7c a1       	ldd	r23, Y+36	; 0x24
    5556:	8d a1       	ldd	r24, Y+37	; 0x25
    5558:	9e a1       	ldd	r25, Y+38	; 0x26
    555a:	20 e0       	ldi	r18, 0x00	; 0
    555c:	30 e0       	ldi	r19, 0x00	; 0
    555e:	40 e8       	ldi	r20, 0x80	; 128
    5560:	5f e3       	ldi	r21, 0x3F	; 63
    5562:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5566:	88 23       	and	r24, r24
    5568:	2c f4       	brge	.+10     	; 0x5574 <APP_vCalculatorLCD+0x766>
		__ticks = 1;
    556a:	81 e0       	ldi	r24, 0x01	; 1
    556c:	90 e0       	ldi	r25, 0x00	; 0
    556e:	9a a3       	std	Y+34, r25	; 0x22
    5570:	89 a3       	std	Y+33, r24	; 0x21
    5572:	3f c0       	rjmp	.+126    	; 0x55f2 <APP_vCalculatorLCD+0x7e4>
	else if (__tmp > 65535)
    5574:	6b a1       	ldd	r22, Y+35	; 0x23
    5576:	7c a1       	ldd	r23, Y+36	; 0x24
    5578:	8d a1       	ldd	r24, Y+37	; 0x25
    557a:	9e a1       	ldd	r25, Y+38	; 0x26
    557c:	20 e0       	ldi	r18, 0x00	; 0
    557e:	3f ef       	ldi	r19, 0xFF	; 255
    5580:	4f e7       	ldi	r20, 0x7F	; 127
    5582:	57 e4       	ldi	r21, 0x47	; 71
    5584:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5588:	18 16       	cp	r1, r24
    558a:	4c f5       	brge	.+82     	; 0x55de <APP_vCalculatorLCD+0x7d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    558c:	6f a1       	ldd	r22, Y+39	; 0x27
    558e:	78 a5       	ldd	r23, Y+40	; 0x28
    5590:	89 a5       	ldd	r24, Y+41	; 0x29
    5592:	9a a5       	ldd	r25, Y+42	; 0x2a
    5594:	20 e0       	ldi	r18, 0x00	; 0
    5596:	30 e0       	ldi	r19, 0x00	; 0
    5598:	40 e2       	ldi	r20, 0x20	; 32
    559a:	51 e4       	ldi	r21, 0x41	; 65
    559c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55a0:	dc 01       	movw	r26, r24
    55a2:	cb 01       	movw	r24, r22
    55a4:	bc 01       	movw	r22, r24
    55a6:	cd 01       	movw	r24, r26
    55a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    55ac:	dc 01       	movw	r26, r24
    55ae:	cb 01       	movw	r24, r22
    55b0:	9a a3       	std	Y+34, r25	; 0x22
    55b2:	89 a3       	std	Y+33, r24	; 0x21
    55b4:	0f c0       	rjmp	.+30     	; 0x55d4 <APP_vCalculatorLCD+0x7c6>
    55b6:	80 e9       	ldi	r24, 0x90	; 144
    55b8:	91 e0       	ldi	r25, 0x01	; 1
    55ba:	98 a3       	std	Y+32, r25	; 0x20
    55bc:	8f 8f       	std	Y+31, r24	; 0x1f
    55be:	8f 8d       	ldd	r24, Y+31	; 0x1f
    55c0:	98 a1       	ldd	r25, Y+32	; 0x20
    55c2:	01 97       	sbiw	r24, 0x01	; 1
    55c4:	f1 f7       	brne	.-4      	; 0x55c2 <APP_vCalculatorLCD+0x7b4>
    55c6:	98 a3       	std	Y+32, r25	; 0x20
    55c8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    55ca:	89 a1       	ldd	r24, Y+33	; 0x21
    55cc:	9a a1       	ldd	r25, Y+34	; 0x22
    55ce:	01 97       	sbiw	r24, 0x01	; 1
    55d0:	9a a3       	std	Y+34, r25	; 0x22
    55d2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    55d4:	89 a1       	ldd	r24, Y+33	; 0x21
    55d6:	9a a1       	ldd	r25, Y+34	; 0x22
    55d8:	00 97       	sbiw	r24, 0x00	; 0
    55da:	69 f7       	brne	.-38     	; 0x55b6 <APP_vCalculatorLCD+0x7a8>
    55dc:	14 c0       	rjmp	.+40     	; 0x5606 <APP_vCalculatorLCD+0x7f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    55de:	6b a1       	ldd	r22, Y+35	; 0x23
    55e0:	7c a1       	ldd	r23, Y+36	; 0x24
    55e2:	8d a1       	ldd	r24, Y+37	; 0x25
    55e4:	9e a1       	ldd	r25, Y+38	; 0x26
    55e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    55ea:	dc 01       	movw	r26, r24
    55ec:	cb 01       	movw	r24, r22
    55ee:	9a a3       	std	Y+34, r25	; 0x22
    55f0:	89 a3       	std	Y+33, r24	; 0x21
    55f2:	89 a1       	ldd	r24, Y+33	; 0x21
    55f4:	9a a1       	ldd	r25, Y+34	; 0x22
    55f6:	9e 8f       	std	Y+30, r25	; 0x1e
    55f8:	8d 8f       	std	Y+29, r24	; 0x1d
    55fa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    55fc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    55fe:	01 97       	sbiw	r24, 0x01	; 1
    5600:	f1 f7       	brne	.-4      	; 0x55fe <APP_vCalculatorLCD+0x7f0>
    5602:	9e 8f       	std	Y+30, r25	; 0x1e
    5604:	8d 8f       	std	Y+29, r24	; 0x1d
			break;
		}
	}
	_delay_ms(50);
	KAYPAD_vInit();
    5606:	0e 94 b2 20 	call	0x4164	; 0x4164 <KAYPAD_vInit>
	while(1){
		Loc_u8Symbol2=KAYPAD_u8GetKey();
    560a:	0e 94 c1 20 	call	0x4182	; 0x4182 <KAYPAD_u8GetKey>
    560e:	fe 01       	movw	r30, r28
    5610:	ee 58       	subi	r30, 0x8E	; 142
    5612:	ff 4f       	sbci	r31, 0xFF	; 255
    5614:	80 83       	st	Z, r24
    5616:	80 e0       	ldi	r24, 0x00	; 0
    5618:	90 e0       	ldi	r25, 0x00	; 0
    561a:	a8 e4       	ldi	r26, 0x48	; 72
    561c:	b2 e4       	ldi	r27, 0x42	; 66
    561e:	89 8f       	std	Y+25, r24	; 0x19
    5620:	9a 8f       	std	Y+26, r25	; 0x1a
    5622:	ab 8f       	std	Y+27, r26	; 0x1b
    5624:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5626:	69 8d       	ldd	r22, Y+25	; 0x19
    5628:	7a 8d       	ldd	r23, Y+26	; 0x1a
    562a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    562c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    562e:	20 e0       	ldi	r18, 0x00	; 0
    5630:	30 e0       	ldi	r19, 0x00	; 0
    5632:	4a e7       	ldi	r20, 0x7A	; 122
    5634:	55 e4       	ldi	r21, 0x45	; 69
    5636:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    563a:	dc 01       	movw	r26, r24
    563c:	cb 01       	movw	r24, r22
    563e:	8d 8b       	std	Y+21, r24	; 0x15
    5640:	9e 8b       	std	Y+22, r25	; 0x16
    5642:	af 8b       	std	Y+23, r26	; 0x17
    5644:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5646:	6d 89       	ldd	r22, Y+21	; 0x15
    5648:	7e 89       	ldd	r23, Y+22	; 0x16
    564a:	8f 89       	ldd	r24, Y+23	; 0x17
    564c:	98 8d       	ldd	r25, Y+24	; 0x18
    564e:	20 e0       	ldi	r18, 0x00	; 0
    5650:	30 e0       	ldi	r19, 0x00	; 0
    5652:	40 e8       	ldi	r20, 0x80	; 128
    5654:	5f e3       	ldi	r21, 0x3F	; 63
    5656:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    565a:	88 23       	and	r24, r24
    565c:	2c f4       	brge	.+10     	; 0x5668 <APP_vCalculatorLCD+0x85a>
		__ticks = 1;
    565e:	81 e0       	ldi	r24, 0x01	; 1
    5660:	90 e0       	ldi	r25, 0x00	; 0
    5662:	9c 8b       	std	Y+20, r25	; 0x14
    5664:	8b 8b       	std	Y+19, r24	; 0x13
    5666:	3f c0       	rjmp	.+126    	; 0x56e6 <APP_vCalculatorLCD+0x8d8>
	else if (__tmp > 65535)
    5668:	6d 89       	ldd	r22, Y+21	; 0x15
    566a:	7e 89       	ldd	r23, Y+22	; 0x16
    566c:	8f 89       	ldd	r24, Y+23	; 0x17
    566e:	98 8d       	ldd	r25, Y+24	; 0x18
    5670:	20 e0       	ldi	r18, 0x00	; 0
    5672:	3f ef       	ldi	r19, 0xFF	; 255
    5674:	4f e7       	ldi	r20, 0x7F	; 127
    5676:	57 e4       	ldi	r21, 0x47	; 71
    5678:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    567c:	18 16       	cp	r1, r24
    567e:	4c f5       	brge	.+82     	; 0x56d2 <APP_vCalculatorLCD+0x8c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5680:	69 8d       	ldd	r22, Y+25	; 0x19
    5682:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5684:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5686:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5688:	20 e0       	ldi	r18, 0x00	; 0
    568a:	30 e0       	ldi	r19, 0x00	; 0
    568c:	40 e2       	ldi	r20, 0x20	; 32
    568e:	51 e4       	ldi	r21, 0x41	; 65
    5690:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5694:	dc 01       	movw	r26, r24
    5696:	cb 01       	movw	r24, r22
    5698:	bc 01       	movw	r22, r24
    569a:	cd 01       	movw	r24, r26
    569c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    56a0:	dc 01       	movw	r26, r24
    56a2:	cb 01       	movw	r24, r22
    56a4:	9c 8b       	std	Y+20, r25	; 0x14
    56a6:	8b 8b       	std	Y+19, r24	; 0x13
    56a8:	0f c0       	rjmp	.+30     	; 0x56c8 <APP_vCalculatorLCD+0x8ba>
    56aa:	80 e9       	ldi	r24, 0x90	; 144
    56ac:	91 e0       	ldi	r25, 0x01	; 1
    56ae:	9a 8b       	std	Y+18, r25	; 0x12
    56b0:	89 8b       	std	Y+17, r24	; 0x11
    56b2:	89 89       	ldd	r24, Y+17	; 0x11
    56b4:	9a 89       	ldd	r25, Y+18	; 0x12
    56b6:	01 97       	sbiw	r24, 0x01	; 1
    56b8:	f1 f7       	brne	.-4      	; 0x56b6 <APP_vCalculatorLCD+0x8a8>
    56ba:	9a 8b       	std	Y+18, r25	; 0x12
    56bc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    56be:	8b 89       	ldd	r24, Y+19	; 0x13
    56c0:	9c 89       	ldd	r25, Y+20	; 0x14
    56c2:	01 97       	sbiw	r24, 0x01	; 1
    56c4:	9c 8b       	std	Y+20, r25	; 0x14
    56c6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    56c8:	8b 89       	ldd	r24, Y+19	; 0x13
    56ca:	9c 89       	ldd	r25, Y+20	; 0x14
    56cc:	00 97       	sbiw	r24, 0x00	; 0
    56ce:	69 f7       	brne	.-38     	; 0x56aa <APP_vCalculatorLCD+0x89c>
    56d0:	14 c0       	rjmp	.+40     	; 0x56fa <APP_vCalculatorLCD+0x8ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    56d2:	6d 89       	ldd	r22, Y+21	; 0x15
    56d4:	7e 89       	ldd	r23, Y+22	; 0x16
    56d6:	8f 89       	ldd	r24, Y+23	; 0x17
    56d8:	98 8d       	ldd	r25, Y+24	; 0x18
    56da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    56de:	dc 01       	movw	r26, r24
    56e0:	cb 01       	movw	r24, r22
    56e2:	9c 8b       	std	Y+20, r25	; 0x14
    56e4:	8b 8b       	std	Y+19, r24	; 0x13
    56e6:	8b 89       	ldd	r24, Y+19	; 0x13
    56e8:	9c 89       	ldd	r25, Y+20	; 0x14
    56ea:	98 8b       	std	Y+16, r25	; 0x10
    56ec:	8f 87       	std	Y+15, r24	; 0x0f
    56ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    56f0:	98 89       	ldd	r25, Y+16	; 0x10
    56f2:	01 97       	sbiw	r24, 0x01	; 1
    56f4:	f1 f7       	brne	.-4      	; 0x56f2 <APP_vCalculatorLCD+0x8e4>
    56f6:	98 8b       	std	Y+16, r25	; 0x10
    56f8:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(50);
		if(Loc_u8Symbol2=='='){
    56fa:	fe 01       	movw	r30, r28
    56fc:	ee 58       	subi	r30, 0x8E	; 142
    56fe:	ff 4f       	sbci	r31, 0xFF	; 255
    5700:	80 81       	ld	r24, Z
    5702:	8d 33       	cpi	r24, 0x3D	; 61
    5704:	09 f0       	breq	.+2      	; 0x5708 <APP_vCalculatorLCD+0x8fa>
    5706:	81 cf       	rjmp	.-254    	; 0x560a <APP_vCalculatorLCD+0x7fc>
			LCD_vInitWithOutClear();
    5708:	0e 94 67 1c 	call	0x38ce	; 0x38ce <LCD_vInitWithOutClear>
			LCD_vGoTo(LineOne,3);
    570c:	80 e8       	ldi	r24, 0x80	; 128
    570e:	63 e0       	ldi	r22, 0x03	; 3
    5710:	0e 94 98 1f 	call	0x3f30	; 0x3f30 <LCD_vGoTo>
			LCD_vWriteCharacter(Loc_u8Symbol2);
    5714:	fe 01       	movw	r30, r28
    5716:	ee 58       	subi	r30, 0x8E	; 142
    5718:	ff 4f       	sbci	r31, 0xFF	; 255
    571a:	80 81       	ld	r24, Z
    571c:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <LCD_vWriteCharacter>
			break;
		}
	}
	if(Loc_u8Symbol1=='+'){
    5720:	fe 01       	movw	r30, r28
    5722:	ed 58       	subi	r30, 0x8D	; 141
    5724:	ff 4f       	sbci	r31, 0xFF	; 255
    5726:	80 81       	ld	r24, Z
    5728:	8b 32       	cpi	r24, 0x2B	; 43
    572a:	79 f4       	brne	.+30     	; 0x574a <APP_vCalculatorLCD+0x93c>
		Loc_u8sum=Loc_u8Num1+Loc_u8Num2;
    572c:	9e 01       	movw	r18, r28
    572e:	2f 58       	subi	r18, 0x8F	; 143
    5730:	3f 4f       	sbci	r19, 0xFF	; 255
    5732:	fe 01       	movw	r30, r28
    5734:	eb 58       	subi	r30, 0x8B	; 139
    5736:	ff 4f       	sbci	r31, 0xFF	; 255
    5738:	de 01       	movw	r26, r28
    573a:	ac 58       	subi	r26, 0x8C	; 140
    573c:	bf 4f       	sbci	r27, 0xFF	; 255
    573e:	90 81       	ld	r25, Z
    5740:	8c 91       	ld	r24, X
    5742:	89 0f       	add	r24, r25
    5744:	f9 01       	movw	r30, r18
    5746:	80 83       	st	Z, r24
    5748:	5c c0       	rjmp	.+184    	; 0x5802 <APP_vCalculatorLCD+0x9f4>
	}
	else if(Loc_u8Symbol1=='-'){
    574a:	fe 01       	movw	r30, r28
    574c:	ed 58       	subi	r30, 0x8D	; 141
    574e:	ff 4f       	sbci	r31, 0xFF	; 255
    5750:	80 81       	ld	r24, Z
    5752:	8d 32       	cpi	r24, 0x2D	; 45
    5754:	89 f4       	brne	.+34     	; 0x5778 <APP_vCalculatorLCD+0x96a>
		Loc_u8sum=Loc_u8Num1-Loc_u8Num2;
    5756:	9e 01       	movw	r18, r28
    5758:	2f 58       	subi	r18, 0x8F	; 143
    575a:	3f 4f       	sbci	r19, 0xFF	; 255
    575c:	fe 01       	movw	r30, r28
    575e:	eb 58       	subi	r30, 0x8B	; 139
    5760:	ff 4f       	sbci	r31, 0xFF	; 255
    5762:	de 01       	movw	r26, r28
    5764:	ac 58       	subi	r26, 0x8C	; 140
    5766:	bf 4f       	sbci	r27, 0xFF	; 255
    5768:	90 81       	ld	r25, Z
    576a:	8c 91       	ld	r24, X
    576c:	f9 2f       	mov	r31, r25
    576e:	f8 1b       	sub	r31, r24
    5770:	8f 2f       	mov	r24, r31
    5772:	f9 01       	movw	r30, r18
    5774:	80 83       	st	Z, r24
    5776:	45 c0       	rjmp	.+138    	; 0x5802 <APP_vCalculatorLCD+0x9f4>
	}
	else if(Loc_u8Symbol1=='/'){
    5778:	fe 01       	movw	r30, r28
    577a:	ed 58       	subi	r30, 0x8D	; 141
    577c:	ff 4f       	sbci	r31, 0xFF	; 255
    577e:	80 81       	ld	r24, Z
    5780:	8f 32       	cpi	r24, 0x2F	; 47
    5782:	89 f4       	brne	.+34     	; 0x57a6 <APP_vCalculatorLCD+0x998>
		Loc_u8sum=Loc_u8Num1/Loc_u8Num2;
    5784:	9e 01       	movw	r18, r28
    5786:	2f 58       	subi	r18, 0x8F	; 143
    5788:	3f 4f       	sbci	r19, 0xFF	; 255
    578a:	fe 01       	movw	r30, r28
    578c:	eb 58       	subi	r30, 0x8B	; 139
    578e:	ff 4f       	sbci	r31, 0xFF	; 255
    5790:	de 01       	movw	r26, r28
    5792:	ac 58       	subi	r26, 0x8C	; 140
    5794:	bf 4f       	sbci	r27, 0xFF	; 255
    5796:	80 81       	ld	r24, Z
    5798:	9c 91       	ld	r25, X
    579a:	69 2f       	mov	r22, r25
    579c:	0e 94 f5 34 	call	0x69ea	; 0x69ea <__udivmodqi4>
    57a0:	f9 01       	movw	r30, r18
    57a2:	80 83       	st	Z, r24
    57a4:	2e c0       	rjmp	.+92     	; 0x5802 <APP_vCalculatorLCD+0x9f4>
	}
	else if(Loc_u8Symbol1=='*'){
    57a6:	fe 01       	movw	r30, r28
    57a8:	ed 58       	subi	r30, 0x8D	; 141
    57aa:	ff 4f       	sbci	r31, 0xFF	; 255
    57ac:	80 81       	ld	r24, Z
    57ae:	8a 32       	cpi	r24, 0x2A	; 42
    57b0:	89 f4       	brne	.+34     	; 0x57d4 <APP_vCalculatorLCD+0x9c6>
		Loc_u8sum=Loc_u8Num1*Loc_u8Num2;
    57b2:	9e 01       	movw	r18, r28
    57b4:	2f 58       	subi	r18, 0x8F	; 143
    57b6:	3f 4f       	sbci	r19, 0xFF	; 255
    57b8:	fe 01       	movw	r30, r28
    57ba:	eb 58       	subi	r30, 0x8B	; 139
    57bc:	ff 4f       	sbci	r31, 0xFF	; 255
    57be:	de 01       	movw	r26, r28
    57c0:	ac 58       	subi	r26, 0x8C	; 140
    57c2:	bf 4f       	sbci	r27, 0xFF	; 255
    57c4:	90 81       	ld	r25, Z
    57c6:	8c 91       	ld	r24, X
    57c8:	98 9f       	mul	r25, r24
    57ca:	80 2d       	mov	r24, r0
    57cc:	11 24       	eor	r1, r1
    57ce:	f9 01       	movw	r30, r18
    57d0:	80 83       	st	Z, r24
    57d2:	17 c0       	rjmp	.+46     	; 0x5802 <APP_vCalculatorLCD+0x9f4>
	}
	else if(Loc_u8Symbol1=='%'){
    57d4:	fe 01       	movw	r30, r28
    57d6:	ed 58       	subi	r30, 0x8D	; 141
    57d8:	ff 4f       	sbci	r31, 0xFF	; 255
    57da:	80 81       	ld	r24, Z
    57dc:	85 32       	cpi	r24, 0x25	; 37
    57de:	89 f4       	brne	.+34     	; 0x5802 <APP_vCalculatorLCD+0x9f4>
		Loc_u8sum=Loc_u8Num1%Loc_u8Num2;
    57e0:	9e 01       	movw	r18, r28
    57e2:	2f 58       	subi	r18, 0x8F	; 143
    57e4:	3f 4f       	sbci	r19, 0xFF	; 255
    57e6:	fe 01       	movw	r30, r28
    57e8:	eb 58       	subi	r30, 0x8B	; 139
    57ea:	ff 4f       	sbci	r31, 0xFF	; 255
    57ec:	de 01       	movw	r26, r28
    57ee:	ac 58       	subi	r26, 0x8C	; 140
    57f0:	bf 4f       	sbci	r27, 0xFF	; 255
    57f2:	80 81       	ld	r24, Z
    57f4:	9c 91       	ld	r25, X
    57f6:	69 2f       	mov	r22, r25
    57f8:	0e 94 f5 34 	call	0x69ea	; 0x69ea <__udivmodqi4>
    57fc:	89 2f       	mov	r24, r25
    57fe:	f9 01       	movw	r30, r18
    5800:	80 83       	st	Z, r24
	}
	else{
		//do nothing
	}
	LCD_vInitWithOutClear();
    5802:	0e 94 67 1c 	call	0x38ce	; 0x38ce <LCD_vInitWithOutClear>
	LCD_vGoTo(LineOne,4);
    5806:	80 e8       	ldi	r24, 0x80	; 128
    5808:	64 e0       	ldi	r22, 0x04	; 4
    580a:	0e 94 98 1f 	call	0x3f30	; 0x3f30 <LCD_vGoTo>
	u8 arr[3];
	APP_vToString(arr,Loc_u8sum);
    580e:	fe 01       	movw	r30, r28
    5810:	ef 58       	subi	r30, 0x8F	; 143
    5812:	ff 4f       	sbci	r31, 0xFF	; 255
    5814:	80 81       	ld	r24, Z
    5816:	28 2f       	mov	r18, r24
    5818:	30 e0       	ldi	r19, 0x00	; 0
    581a:	ce 01       	movw	r24, r28
    581c:	8a 58       	subi	r24, 0x8A	; 138
    581e:	9f 4f       	sbci	r25, 0xFF	; 255
    5820:	b9 01       	movw	r22, r18
    5822:	0e 94 a1 26 	call	0x4d42	; 0x4d42 <APP_vToString>
	LCD_vWriteString(arr);
    5826:	ce 01       	movw	r24, r28
    5828:	8a 58       	subi	r24, 0x8A	; 138
    582a:	9f 4f       	sbci	r25, 0xFF	; 255
    582c:	0e 94 31 20 	call	0x4062	; 0x4062 <LCD_vWriteString>
    5830:	80 e0       	ldi	r24, 0x00	; 0
    5832:	90 e0       	ldi	r25, 0x00	; 0
    5834:	a8 ec       	ldi	r26, 0xC8	; 200
    5836:	b2 e4       	ldi	r27, 0x42	; 66
    5838:	8b 87       	std	Y+11, r24	; 0x0b
    583a:	9c 87       	std	Y+12, r25	; 0x0c
    583c:	ad 87       	std	Y+13, r26	; 0x0d
    583e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5840:	6b 85       	ldd	r22, Y+11	; 0x0b
    5842:	7c 85       	ldd	r23, Y+12	; 0x0c
    5844:	8d 85       	ldd	r24, Y+13	; 0x0d
    5846:	9e 85       	ldd	r25, Y+14	; 0x0e
    5848:	20 e0       	ldi	r18, 0x00	; 0
    584a:	30 e0       	ldi	r19, 0x00	; 0
    584c:	4a e7       	ldi	r20, 0x7A	; 122
    584e:	55 e4       	ldi	r21, 0x45	; 69
    5850:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5854:	dc 01       	movw	r26, r24
    5856:	cb 01       	movw	r24, r22
    5858:	8f 83       	std	Y+7, r24	; 0x07
    585a:	98 87       	std	Y+8, r25	; 0x08
    585c:	a9 87       	std	Y+9, r26	; 0x09
    585e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5860:	6f 81       	ldd	r22, Y+7	; 0x07
    5862:	78 85       	ldd	r23, Y+8	; 0x08
    5864:	89 85       	ldd	r24, Y+9	; 0x09
    5866:	9a 85       	ldd	r25, Y+10	; 0x0a
    5868:	20 e0       	ldi	r18, 0x00	; 0
    586a:	30 e0       	ldi	r19, 0x00	; 0
    586c:	40 e8       	ldi	r20, 0x80	; 128
    586e:	5f e3       	ldi	r21, 0x3F	; 63
    5870:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5874:	88 23       	and	r24, r24
    5876:	2c f4       	brge	.+10     	; 0x5882 <APP_vCalculatorLCD+0xa74>
		__ticks = 1;
    5878:	81 e0       	ldi	r24, 0x01	; 1
    587a:	90 e0       	ldi	r25, 0x00	; 0
    587c:	9e 83       	std	Y+6, r25	; 0x06
    587e:	8d 83       	std	Y+5, r24	; 0x05
    5880:	3f c0       	rjmp	.+126    	; 0x5900 <APP_vCalculatorLCD+0xaf2>
	else if (__tmp > 65535)
    5882:	6f 81       	ldd	r22, Y+7	; 0x07
    5884:	78 85       	ldd	r23, Y+8	; 0x08
    5886:	89 85       	ldd	r24, Y+9	; 0x09
    5888:	9a 85       	ldd	r25, Y+10	; 0x0a
    588a:	20 e0       	ldi	r18, 0x00	; 0
    588c:	3f ef       	ldi	r19, 0xFF	; 255
    588e:	4f e7       	ldi	r20, 0x7F	; 127
    5890:	57 e4       	ldi	r21, 0x47	; 71
    5892:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5896:	18 16       	cp	r1, r24
    5898:	4c f5       	brge	.+82     	; 0x58ec <APP_vCalculatorLCD+0xade>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    589a:	6b 85       	ldd	r22, Y+11	; 0x0b
    589c:	7c 85       	ldd	r23, Y+12	; 0x0c
    589e:	8d 85       	ldd	r24, Y+13	; 0x0d
    58a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    58a2:	20 e0       	ldi	r18, 0x00	; 0
    58a4:	30 e0       	ldi	r19, 0x00	; 0
    58a6:	40 e2       	ldi	r20, 0x20	; 32
    58a8:	51 e4       	ldi	r21, 0x41	; 65
    58aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    58ae:	dc 01       	movw	r26, r24
    58b0:	cb 01       	movw	r24, r22
    58b2:	bc 01       	movw	r22, r24
    58b4:	cd 01       	movw	r24, r26
    58b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    58ba:	dc 01       	movw	r26, r24
    58bc:	cb 01       	movw	r24, r22
    58be:	9e 83       	std	Y+6, r25	; 0x06
    58c0:	8d 83       	std	Y+5, r24	; 0x05
    58c2:	0f c0       	rjmp	.+30     	; 0x58e2 <APP_vCalculatorLCD+0xad4>
    58c4:	80 e9       	ldi	r24, 0x90	; 144
    58c6:	91 e0       	ldi	r25, 0x01	; 1
    58c8:	9c 83       	std	Y+4, r25	; 0x04
    58ca:	8b 83       	std	Y+3, r24	; 0x03
    58cc:	8b 81       	ldd	r24, Y+3	; 0x03
    58ce:	9c 81       	ldd	r25, Y+4	; 0x04
    58d0:	01 97       	sbiw	r24, 0x01	; 1
    58d2:	f1 f7       	brne	.-4      	; 0x58d0 <APP_vCalculatorLCD+0xac2>
    58d4:	9c 83       	std	Y+4, r25	; 0x04
    58d6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    58d8:	8d 81       	ldd	r24, Y+5	; 0x05
    58da:	9e 81       	ldd	r25, Y+6	; 0x06
    58dc:	01 97       	sbiw	r24, 0x01	; 1
    58de:	9e 83       	std	Y+6, r25	; 0x06
    58e0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    58e2:	8d 81       	ldd	r24, Y+5	; 0x05
    58e4:	9e 81       	ldd	r25, Y+6	; 0x06
    58e6:	00 97       	sbiw	r24, 0x00	; 0
    58e8:	69 f7       	brne	.-38     	; 0x58c4 <APP_vCalculatorLCD+0xab6>
    58ea:	14 c0       	rjmp	.+40     	; 0x5914 <APP_vCalculatorLCD+0xb06>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    58ec:	6f 81       	ldd	r22, Y+7	; 0x07
    58ee:	78 85       	ldd	r23, Y+8	; 0x08
    58f0:	89 85       	ldd	r24, Y+9	; 0x09
    58f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    58f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    58f8:	dc 01       	movw	r26, r24
    58fa:	cb 01       	movw	r24, r22
    58fc:	9e 83       	std	Y+6, r25	; 0x06
    58fe:	8d 83       	std	Y+5, r24	; 0x05
    5900:	8d 81       	ldd	r24, Y+5	; 0x05
    5902:	9e 81       	ldd	r25, Y+6	; 0x06
    5904:	9a 83       	std	Y+2, r25	; 0x02
    5906:	89 83       	std	Y+1, r24	; 0x01
    5908:	89 81       	ldd	r24, Y+1	; 0x01
    590a:	9a 81       	ldd	r25, Y+2	; 0x02
    590c:	01 97       	sbiw	r24, 0x01	; 1
    590e:	f1 f7       	brne	.-4      	; 0x590c <APP_vCalculatorLCD+0xafe>
    5910:	9a 83       	std	Y+2, r25	; 0x02
    5912:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
}
    5914:	c8 58       	subi	r28, 0x88	; 136
    5916:	df 4f       	sbci	r29, 0xFF	; 255
    5918:	0f b6       	in	r0, 0x3f	; 63
    591a:	f8 94       	cli
    591c:	de bf       	out	0x3e, r29	; 62
    591e:	0f be       	out	0x3f, r0	; 63
    5920:	cd bf       	out	0x3d, r28	; 61
    5922:	cf 91       	pop	r28
    5924:	df 91       	pop	r29
    5926:	1f 91       	pop	r17
    5928:	0f 91       	pop	r16
    592a:	08 95       	ret

0000592c <APP_vLocker>:
//-----------------
void APP_vLocker(u8 *Loc_CorrectUserName4,u8 *Loc_CorrectPassword3){
    592c:	0f 93       	push	r16
    592e:	1f 93       	push	r17
    5930:	df 93       	push	r29
    5932:	cf 93       	push	r28
    5934:	cd b7       	in	r28, 0x3d	; 61
    5936:	de b7       	in	r29, 0x3e	; 62
    5938:	c6 5b       	subi	r28, 0xB6	; 182
    593a:	d0 40       	sbci	r29, 0x00	; 0
    593c:	0f b6       	in	r0, 0x3f	; 63
    593e:	f8 94       	cli
    5940:	de bf       	out	0x3e, r29	; 62
    5942:	0f be       	out	0x3f, r0	; 63
    5944:	cd bf       	out	0x3d, r28	; 61
    5946:	fe 01       	movw	r30, r28
    5948:	eb 56       	subi	r30, 0x6B	; 107
    594a:	ff 4f       	sbci	r31, 0xFF	; 255
    594c:	91 83       	std	Z+1, r25	; 0x01
    594e:	80 83       	st	Z, r24
    5950:	fe 01       	movw	r30, r28
    5952:	e9 56       	subi	r30, 0x69	; 105
    5954:	ff 4f       	sbci	r31, 0xFF	; 255
    5956:	71 83       	std	Z+1, r23	; 0x01
    5958:	60 83       	st	Z, r22
	u8 i;
	u8 user[4],pass[3];
	while(1){
		LCD_vInit();
    595a:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <LCD_vInit>
		u8 User[]="Enter UserNam";
    595e:	ce 01       	movw	r24, r28
    5960:	80 5b       	subi	r24, 0xB0	; 176
    5962:	9f 4f       	sbci	r25, 0xFF	; 255
    5964:	c7 56       	subi	r28, 0x67	; 103
    5966:	df 4f       	sbci	r29, 0xFF	; 255
    5968:	99 83       	std	Y+1, r25	; 0x01
    596a:	88 83       	st	Y, r24
    596c:	c9 59       	subi	r28, 0x99	; 153
    596e:	d0 40       	sbci	r29, 0x00	; 0
    5970:	80 e6       	ldi	r24, 0x60	; 96
    5972:	90 e0       	ldi	r25, 0x00	; 0
    5974:	c5 56       	subi	r28, 0x65	; 101
    5976:	df 4f       	sbci	r29, 0xFF	; 255
    5978:	99 83       	std	Y+1, r25	; 0x01
    597a:	88 83       	st	Y, r24
    597c:	cb 59       	subi	r28, 0x9B	; 155
    597e:	d0 40       	sbci	r29, 0x00	; 0
    5980:	9e e0       	ldi	r25, 0x0E	; 14
    5982:	c3 56       	subi	r28, 0x63	; 99
    5984:	df 4f       	sbci	r29, 0xFF	; 255
    5986:	98 83       	st	Y, r25
    5988:	cd 59       	subi	r28, 0x9D	; 157
    598a:	d0 40       	sbci	r29, 0x00	; 0
    598c:	c5 56       	subi	r28, 0x65	; 101
    598e:	df 4f       	sbci	r29, 0xFF	; 255
    5990:	e8 81       	ld	r30, Y
    5992:	f9 81       	ldd	r31, Y+1	; 0x01
    5994:	cb 59       	subi	r28, 0x9B	; 155
    5996:	d0 40       	sbci	r29, 0x00	; 0
    5998:	00 80       	ld	r0, Z
    599a:	c5 56       	subi	r28, 0x65	; 101
    599c:	df 4f       	sbci	r29, 0xFF	; 255
    599e:	88 81       	ld	r24, Y
    59a0:	99 81       	ldd	r25, Y+1	; 0x01
    59a2:	cb 59       	subi	r28, 0x9B	; 155
    59a4:	d0 40       	sbci	r29, 0x00	; 0
    59a6:	01 96       	adiw	r24, 0x01	; 1
    59a8:	c5 56       	subi	r28, 0x65	; 101
    59aa:	df 4f       	sbci	r29, 0xFF	; 255
    59ac:	99 83       	std	Y+1, r25	; 0x01
    59ae:	88 83       	st	Y, r24
    59b0:	cb 59       	subi	r28, 0x9B	; 155
    59b2:	d0 40       	sbci	r29, 0x00	; 0
    59b4:	c7 56       	subi	r28, 0x67	; 103
    59b6:	df 4f       	sbci	r29, 0xFF	; 255
    59b8:	e8 81       	ld	r30, Y
    59ba:	f9 81       	ldd	r31, Y+1	; 0x01
    59bc:	c9 59       	subi	r28, 0x99	; 153
    59be:	d0 40       	sbci	r29, 0x00	; 0
    59c0:	00 82       	st	Z, r0
    59c2:	c7 56       	subi	r28, 0x67	; 103
    59c4:	df 4f       	sbci	r29, 0xFF	; 255
    59c6:	88 81       	ld	r24, Y
    59c8:	99 81       	ldd	r25, Y+1	; 0x01
    59ca:	c9 59       	subi	r28, 0x99	; 153
    59cc:	d0 40       	sbci	r29, 0x00	; 0
    59ce:	01 96       	adiw	r24, 0x01	; 1
    59d0:	c7 56       	subi	r28, 0x67	; 103
    59d2:	df 4f       	sbci	r29, 0xFF	; 255
    59d4:	99 83       	std	Y+1, r25	; 0x01
    59d6:	88 83       	st	Y, r24
    59d8:	c9 59       	subi	r28, 0x99	; 153
    59da:	d0 40       	sbci	r29, 0x00	; 0
    59dc:	c3 56       	subi	r28, 0x63	; 99
    59de:	df 4f       	sbci	r29, 0xFF	; 255
    59e0:	98 81       	ld	r25, Y
    59e2:	cd 59       	subi	r28, 0x9D	; 157
    59e4:	d0 40       	sbci	r29, 0x00	; 0
    59e6:	91 50       	subi	r25, 0x01	; 1
    59e8:	c3 56       	subi	r28, 0x63	; 99
    59ea:	df 4f       	sbci	r29, 0xFF	; 255
    59ec:	98 83       	st	Y, r25
    59ee:	cd 59       	subi	r28, 0x9D	; 157
    59f0:	d0 40       	sbci	r29, 0x00	; 0
    59f2:	c3 56       	subi	r28, 0x63	; 99
    59f4:	df 4f       	sbci	r29, 0xFF	; 255
    59f6:	e8 81       	ld	r30, Y
    59f8:	cd 59       	subi	r28, 0x9D	; 157
    59fa:	d0 40       	sbci	r29, 0x00	; 0
    59fc:	ee 23       	and	r30, r30
    59fe:	31 f6       	brne	.-116    	; 0x598c <APP_vLocker+0x60>
		LCD_vWriteString(User);
    5a00:	ce 01       	movw	r24, r28
    5a02:	80 5b       	subi	r24, 0xB0	; 176
    5a04:	9f 4f       	sbci	r25, 0xFF	; 255
    5a06:	0e 94 31 20 	call	0x4062	; 0x4062 <LCD_vWriteString>
		for(i=0;i<4;i++){
    5a0a:	fe 01       	movw	r30, r28
    5a0c:	e8 5b       	subi	r30, 0xB8	; 184
    5a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    5a10:	10 82       	st	Z, r1
    5a12:	c9 c0       	rjmp	.+402    	; 0x5ba6 <APP_vLocker+0x27a>
			KAYPAD_vInit();
    5a14:	0e 94 b2 20 	call	0x4164	; 0x4164 <KAYPAD_vInit>
			while(1){
				user[i]=KAYPAD_u8GetKey();
    5a18:	fe 01       	movw	r30, r28
    5a1a:	e8 5b       	subi	r30, 0xB8	; 184
    5a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    5a1e:	80 81       	ld	r24, Z
    5a20:	08 2f       	mov	r16, r24
    5a22:	10 e0       	ldi	r17, 0x00	; 0
    5a24:	0e 94 c1 20 	call	0x4182	; 0x4182 <KAYPAD_u8GetKey>
    5a28:	28 2f       	mov	r18, r24
    5a2a:	ce 01       	movw	r24, r28
    5a2c:	87 5b       	subi	r24, 0xB7	; 183
    5a2e:	9f 4f       	sbci	r25, 0xFF	; 255
    5a30:	fc 01       	movw	r30, r24
    5a32:	e0 0f       	add	r30, r16
    5a34:	f1 1f       	adc	r31, r17
    5a36:	20 83       	st	Z, r18
    5a38:	fe 01       	movw	r30, r28
    5a3a:	ed 5b       	subi	r30, 0xBD	; 189
    5a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    5a3e:	80 e0       	ldi	r24, 0x00	; 0
    5a40:	90 e0       	ldi	r25, 0x00	; 0
    5a42:	a8 e4       	ldi	r26, 0x48	; 72
    5a44:	b2 e4       	ldi	r27, 0x42	; 66
    5a46:	80 83       	st	Z, r24
    5a48:	91 83       	std	Z+1, r25	; 0x01
    5a4a:	a2 83       	std	Z+2, r26	; 0x02
    5a4c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5a4e:	8e 01       	movw	r16, r28
    5a50:	01 5c       	subi	r16, 0xC1	; 193
    5a52:	1f 4f       	sbci	r17, 0xFF	; 255
    5a54:	fe 01       	movw	r30, r28
    5a56:	ed 5b       	subi	r30, 0xBD	; 189
    5a58:	ff 4f       	sbci	r31, 0xFF	; 255
    5a5a:	60 81       	ld	r22, Z
    5a5c:	71 81       	ldd	r23, Z+1	; 0x01
    5a5e:	82 81       	ldd	r24, Z+2	; 0x02
    5a60:	93 81       	ldd	r25, Z+3	; 0x03
    5a62:	20 e0       	ldi	r18, 0x00	; 0
    5a64:	30 e0       	ldi	r19, 0x00	; 0
    5a66:	4a e7       	ldi	r20, 0x7A	; 122
    5a68:	55 e4       	ldi	r21, 0x45	; 69
    5a6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a6e:	dc 01       	movw	r26, r24
    5a70:	cb 01       	movw	r24, r22
    5a72:	f8 01       	movw	r30, r16
    5a74:	80 83       	st	Z, r24
    5a76:	91 83       	std	Z+1, r25	; 0x01
    5a78:	a2 83       	std	Z+2, r26	; 0x02
    5a7a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5a7c:	fe 01       	movw	r30, r28
    5a7e:	ff 96       	adiw	r30, 0x3f	; 63
    5a80:	60 81       	ld	r22, Z
    5a82:	71 81       	ldd	r23, Z+1	; 0x01
    5a84:	82 81       	ldd	r24, Z+2	; 0x02
    5a86:	93 81       	ldd	r25, Z+3	; 0x03
    5a88:	20 e0       	ldi	r18, 0x00	; 0
    5a8a:	30 e0       	ldi	r19, 0x00	; 0
    5a8c:	40 e8       	ldi	r20, 0x80	; 128
    5a8e:	5f e3       	ldi	r21, 0x3F	; 63
    5a90:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5a94:	88 23       	and	r24, r24
    5a96:	2c f4       	brge	.+10     	; 0x5aa2 <APP_vLocker+0x176>
		__ticks = 1;
    5a98:	81 e0       	ldi	r24, 0x01	; 1
    5a9a:	90 e0       	ldi	r25, 0x00	; 0
    5a9c:	9e af       	std	Y+62, r25	; 0x3e
    5a9e:	8d af       	std	Y+61, r24	; 0x3d
    5aa0:	46 c0       	rjmp	.+140    	; 0x5b2e <APP_vLocker+0x202>
	else if (__tmp > 65535)
    5aa2:	fe 01       	movw	r30, r28
    5aa4:	ff 96       	adiw	r30, 0x3f	; 63
    5aa6:	60 81       	ld	r22, Z
    5aa8:	71 81       	ldd	r23, Z+1	; 0x01
    5aaa:	82 81       	ldd	r24, Z+2	; 0x02
    5aac:	93 81       	ldd	r25, Z+3	; 0x03
    5aae:	20 e0       	ldi	r18, 0x00	; 0
    5ab0:	3f ef       	ldi	r19, 0xFF	; 255
    5ab2:	4f e7       	ldi	r20, 0x7F	; 127
    5ab4:	57 e4       	ldi	r21, 0x47	; 71
    5ab6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5aba:	18 16       	cp	r1, r24
    5abc:	64 f5       	brge	.+88     	; 0x5b16 <APP_vLocker+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5abe:	fe 01       	movw	r30, r28
    5ac0:	ed 5b       	subi	r30, 0xBD	; 189
    5ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    5ac4:	60 81       	ld	r22, Z
    5ac6:	71 81       	ldd	r23, Z+1	; 0x01
    5ac8:	82 81       	ldd	r24, Z+2	; 0x02
    5aca:	93 81       	ldd	r25, Z+3	; 0x03
    5acc:	20 e0       	ldi	r18, 0x00	; 0
    5ace:	30 e0       	ldi	r19, 0x00	; 0
    5ad0:	40 e2       	ldi	r20, 0x20	; 32
    5ad2:	51 e4       	ldi	r21, 0x41	; 65
    5ad4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ad8:	dc 01       	movw	r26, r24
    5ada:	cb 01       	movw	r24, r22
    5adc:	bc 01       	movw	r22, r24
    5ade:	cd 01       	movw	r24, r26
    5ae0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ae4:	dc 01       	movw	r26, r24
    5ae6:	cb 01       	movw	r24, r22
    5ae8:	9e af       	std	Y+62, r25	; 0x3e
    5aea:	8d af       	std	Y+61, r24	; 0x3d
    5aec:	0f c0       	rjmp	.+30     	; 0x5b0c <APP_vLocker+0x1e0>
    5aee:	80 e9       	ldi	r24, 0x90	; 144
    5af0:	91 e0       	ldi	r25, 0x01	; 1
    5af2:	9c af       	std	Y+60, r25	; 0x3c
    5af4:	8b af       	std	Y+59, r24	; 0x3b
    5af6:	8b ad       	ldd	r24, Y+59	; 0x3b
    5af8:	9c ad       	ldd	r25, Y+60	; 0x3c
    5afa:	01 97       	sbiw	r24, 0x01	; 1
    5afc:	f1 f7       	brne	.-4      	; 0x5afa <APP_vLocker+0x1ce>
    5afe:	9c af       	std	Y+60, r25	; 0x3c
    5b00:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5b02:	8d ad       	ldd	r24, Y+61	; 0x3d
    5b04:	9e ad       	ldd	r25, Y+62	; 0x3e
    5b06:	01 97       	sbiw	r24, 0x01	; 1
    5b08:	9e af       	std	Y+62, r25	; 0x3e
    5b0a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5b0c:	8d ad       	ldd	r24, Y+61	; 0x3d
    5b0e:	9e ad       	ldd	r25, Y+62	; 0x3e
    5b10:	00 97       	sbiw	r24, 0x00	; 0
    5b12:	69 f7       	brne	.-38     	; 0x5aee <APP_vLocker+0x1c2>
    5b14:	16 c0       	rjmp	.+44     	; 0x5b42 <APP_vLocker+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5b16:	fe 01       	movw	r30, r28
    5b18:	ff 96       	adiw	r30, 0x3f	; 63
    5b1a:	60 81       	ld	r22, Z
    5b1c:	71 81       	ldd	r23, Z+1	; 0x01
    5b1e:	82 81       	ldd	r24, Z+2	; 0x02
    5b20:	93 81       	ldd	r25, Z+3	; 0x03
    5b22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b26:	dc 01       	movw	r26, r24
    5b28:	cb 01       	movw	r24, r22
    5b2a:	9e af       	std	Y+62, r25	; 0x3e
    5b2c:	8d af       	std	Y+61, r24	; 0x3d
    5b2e:	8d ad       	ldd	r24, Y+61	; 0x3d
    5b30:	9e ad       	ldd	r25, Y+62	; 0x3e
    5b32:	9a af       	std	Y+58, r25	; 0x3a
    5b34:	89 af       	std	Y+57, r24	; 0x39
    5b36:	89 ad       	ldd	r24, Y+57	; 0x39
    5b38:	9a ad       	ldd	r25, Y+58	; 0x3a
    5b3a:	01 97       	sbiw	r24, 0x01	; 1
    5b3c:	f1 f7       	brne	.-4      	; 0x5b3a <APP_vLocker+0x20e>
    5b3e:	9a af       	std	Y+58, r25	; 0x3a
    5b40:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(50);
				if(user[i]!=0xff){
    5b42:	fe 01       	movw	r30, r28
    5b44:	e8 5b       	subi	r30, 0xB8	; 184
    5b46:	ff 4f       	sbci	r31, 0xFF	; 255
    5b48:	80 81       	ld	r24, Z
    5b4a:	28 2f       	mov	r18, r24
    5b4c:	30 e0       	ldi	r19, 0x00	; 0
    5b4e:	ce 01       	movw	r24, r28
    5b50:	87 5b       	subi	r24, 0xB7	; 183
    5b52:	9f 4f       	sbci	r25, 0xFF	; 255
    5b54:	fc 01       	movw	r30, r24
    5b56:	e2 0f       	add	r30, r18
    5b58:	f3 1f       	adc	r31, r19
    5b5a:	80 81       	ld	r24, Z
    5b5c:	8f 3f       	cpi	r24, 0xFF	; 255
    5b5e:	09 f4       	brne	.+2      	; 0x5b62 <APP_vLocker+0x236>
    5b60:	5b cf       	rjmp	.-330    	; 0x5a18 <APP_vLocker+0xec>
					LCD_vInitWithOutClear();
    5b62:	0e 94 67 1c 	call	0x38ce	; 0x38ce <LCD_vInitWithOutClear>
					LCD_vGoTo(LineTwo,i);
    5b66:	fe 01       	movw	r30, r28
    5b68:	e8 5b       	subi	r30, 0xB8	; 184
    5b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    5b6c:	80 ec       	ldi	r24, 0xC0	; 192
    5b6e:	60 81       	ld	r22, Z
    5b70:	0e 94 98 1f 	call	0x3f30	; 0x3f30 <LCD_vGoTo>
					LCD_vWriteCharacter((user[i])+48);
    5b74:	fe 01       	movw	r30, r28
    5b76:	e8 5b       	subi	r30, 0xB8	; 184
    5b78:	ff 4f       	sbci	r31, 0xFF	; 255
    5b7a:	80 81       	ld	r24, Z
    5b7c:	28 2f       	mov	r18, r24
    5b7e:	30 e0       	ldi	r19, 0x00	; 0
    5b80:	ce 01       	movw	r24, r28
    5b82:	87 5b       	subi	r24, 0xB7	; 183
    5b84:	9f 4f       	sbci	r25, 0xFF	; 255
    5b86:	fc 01       	movw	r30, r24
    5b88:	e2 0f       	add	r30, r18
    5b8a:	f3 1f       	adc	r31, r19
    5b8c:	80 81       	ld	r24, Z
    5b8e:	80 5d       	subi	r24, 0xD0	; 208
    5b90:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <LCD_vWriteCharacter>
	u8 user[4],pass[3];
	while(1){
		LCD_vInit();
		u8 User[]="Enter UserNam";
		LCD_vWriteString(User);
		for(i=0;i<4;i++){
    5b94:	de 01       	movw	r26, r28
    5b96:	a8 5b       	subi	r26, 0xB8	; 184
    5b98:	bf 4f       	sbci	r27, 0xFF	; 255
    5b9a:	fe 01       	movw	r30, r28
    5b9c:	e8 5b       	subi	r30, 0xB8	; 184
    5b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    5ba0:	80 81       	ld	r24, Z
    5ba2:	8f 5f       	subi	r24, 0xFF	; 255
    5ba4:	8c 93       	st	X, r24
    5ba6:	fe 01       	movw	r30, r28
    5ba8:	e8 5b       	subi	r30, 0xB8	; 184
    5baa:	ff 4f       	sbci	r31, 0xFF	; 255
    5bac:	80 81       	ld	r24, Z
    5bae:	84 30       	cpi	r24, 0x04	; 4
    5bb0:	08 f4       	brcc	.+2      	; 0x5bb4 <APP_vLocker+0x288>
    5bb2:	30 cf       	rjmp	.-416    	; 0x5a14 <APP_vLocker+0xe8>
					break;
				}
			}

		}
		if(APP_u8compareArray(Loc_CorrectUserName4,user,4)==0){
    5bb4:	fe 01       	movw	r30, r28
    5bb6:	eb 56       	subi	r30, 0x6B	; 107
    5bb8:	ff 4f       	sbci	r31, 0xFF	; 255
    5bba:	80 81       	ld	r24, Z
    5bbc:	91 81       	ldd	r25, Z+1	; 0x01
    5bbe:	9e 01       	movw	r18, r28
    5bc0:	27 5b       	subi	r18, 0xB7	; 183
    5bc2:	3f 4f       	sbci	r19, 0xFF	; 255
    5bc4:	b9 01       	movw	r22, r18
    5bc6:	44 e0       	ldi	r20, 0x04	; 4
    5bc8:	0e 94 08 32 	call	0x6410	; 0x6410 <APP_u8compareArray>
    5bcc:	88 23       	and	r24, r24
    5bce:	09 f0       	breq	.+2      	; 0x5bd2 <APP_vLocker+0x2a6>
    5bd0:	cb c0       	rjmp	.+406    	; 0x5d68 <APP_vLocker+0x43c>
			u8 Wrong[]="Wrong UserNam";
    5bd2:	ce 01       	movw	r24, r28
    5bd4:	82 5a       	subi	r24, 0xA2	; 162
    5bd6:	9f 4f       	sbci	r25, 0xFF	; 255
    5bd8:	c2 56       	subi	r28, 0x62	; 98
    5bda:	df 4f       	sbci	r29, 0xFF	; 255
    5bdc:	99 83       	std	Y+1, r25	; 0x01
    5bde:	88 83       	st	Y, r24
    5be0:	ce 59       	subi	r28, 0x9E	; 158
    5be2:	d0 40       	sbci	r29, 0x00	; 0
    5be4:	8e e6       	ldi	r24, 0x6E	; 110
    5be6:	90 e0       	ldi	r25, 0x00	; 0
    5be8:	c0 56       	subi	r28, 0x60	; 96
    5bea:	df 4f       	sbci	r29, 0xFF	; 255
    5bec:	99 83       	std	Y+1, r25	; 0x01
    5bee:	88 83       	st	Y, r24
    5bf0:	c0 5a       	subi	r28, 0xA0	; 160
    5bf2:	d0 40       	sbci	r29, 0x00	; 0
    5bf4:	9e e0       	ldi	r25, 0x0E	; 14
    5bf6:	ce 55       	subi	r28, 0x5E	; 94
    5bf8:	df 4f       	sbci	r29, 0xFF	; 255
    5bfa:	98 83       	st	Y, r25
    5bfc:	c2 5a       	subi	r28, 0xA2	; 162
    5bfe:	d0 40       	sbci	r29, 0x00	; 0
    5c00:	c0 56       	subi	r28, 0x60	; 96
    5c02:	df 4f       	sbci	r29, 0xFF	; 255
    5c04:	e8 81       	ld	r30, Y
    5c06:	f9 81       	ldd	r31, Y+1	; 0x01
    5c08:	c0 5a       	subi	r28, 0xA0	; 160
    5c0a:	d0 40       	sbci	r29, 0x00	; 0
    5c0c:	00 80       	ld	r0, Z
    5c0e:	c0 56       	subi	r28, 0x60	; 96
    5c10:	df 4f       	sbci	r29, 0xFF	; 255
    5c12:	88 81       	ld	r24, Y
    5c14:	99 81       	ldd	r25, Y+1	; 0x01
    5c16:	c0 5a       	subi	r28, 0xA0	; 160
    5c18:	d0 40       	sbci	r29, 0x00	; 0
    5c1a:	01 96       	adiw	r24, 0x01	; 1
    5c1c:	c0 56       	subi	r28, 0x60	; 96
    5c1e:	df 4f       	sbci	r29, 0xFF	; 255
    5c20:	99 83       	std	Y+1, r25	; 0x01
    5c22:	88 83       	st	Y, r24
    5c24:	c0 5a       	subi	r28, 0xA0	; 160
    5c26:	d0 40       	sbci	r29, 0x00	; 0
    5c28:	c2 56       	subi	r28, 0x62	; 98
    5c2a:	df 4f       	sbci	r29, 0xFF	; 255
    5c2c:	e8 81       	ld	r30, Y
    5c2e:	f9 81       	ldd	r31, Y+1	; 0x01
    5c30:	ce 59       	subi	r28, 0x9E	; 158
    5c32:	d0 40       	sbci	r29, 0x00	; 0
    5c34:	00 82       	st	Z, r0
    5c36:	c2 56       	subi	r28, 0x62	; 98
    5c38:	df 4f       	sbci	r29, 0xFF	; 255
    5c3a:	88 81       	ld	r24, Y
    5c3c:	99 81       	ldd	r25, Y+1	; 0x01
    5c3e:	ce 59       	subi	r28, 0x9E	; 158
    5c40:	d0 40       	sbci	r29, 0x00	; 0
    5c42:	01 96       	adiw	r24, 0x01	; 1
    5c44:	c2 56       	subi	r28, 0x62	; 98
    5c46:	df 4f       	sbci	r29, 0xFF	; 255
    5c48:	99 83       	std	Y+1, r25	; 0x01
    5c4a:	88 83       	st	Y, r24
    5c4c:	ce 59       	subi	r28, 0x9E	; 158
    5c4e:	d0 40       	sbci	r29, 0x00	; 0
    5c50:	ce 55       	subi	r28, 0x5E	; 94
    5c52:	df 4f       	sbci	r29, 0xFF	; 255
    5c54:	98 81       	ld	r25, Y
    5c56:	c2 5a       	subi	r28, 0xA2	; 162
    5c58:	d0 40       	sbci	r29, 0x00	; 0
    5c5a:	91 50       	subi	r25, 0x01	; 1
    5c5c:	ce 55       	subi	r28, 0x5E	; 94
    5c5e:	df 4f       	sbci	r29, 0xFF	; 255
    5c60:	98 83       	st	Y, r25
    5c62:	c2 5a       	subi	r28, 0xA2	; 162
    5c64:	d0 40       	sbci	r29, 0x00	; 0
    5c66:	ce 55       	subi	r28, 0x5E	; 94
    5c68:	df 4f       	sbci	r29, 0xFF	; 255
    5c6a:	e8 81       	ld	r30, Y
    5c6c:	c2 5a       	subi	r28, 0xA2	; 162
    5c6e:	d0 40       	sbci	r29, 0x00	; 0
    5c70:	ee 23       	and	r30, r30
    5c72:	31 f6       	brne	.-116    	; 0x5c00 <APP_vLocker+0x2d4>
			LCD_vInit();
    5c74:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <LCD_vInit>
			LCD_vWriteString(Wrong);
    5c78:	ce 01       	movw	r24, r28
    5c7a:	82 5a       	subi	r24, 0xA2	; 162
    5c7c:	9f 4f       	sbci	r25, 0xFF	; 255
    5c7e:	0e 94 31 20 	call	0x4062	; 0x4062 <LCD_vWriteString>
    5c82:	80 e0       	ldi	r24, 0x00	; 0
    5c84:	90 e0       	ldi	r25, 0x00	; 0
    5c86:	aa e7       	ldi	r26, 0x7A	; 122
    5c88:	b3 e4       	ldi	r27, 0x43	; 67
    5c8a:	8d ab       	std	Y+53, r24	; 0x35
    5c8c:	9e ab       	std	Y+54, r25	; 0x36
    5c8e:	af ab       	std	Y+55, r26	; 0x37
    5c90:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5c92:	6d a9       	ldd	r22, Y+53	; 0x35
    5c94:	7e a9       	ldd	r23, Y+54	; 0x36
    5c96:	8f a9       	ldd	r24, Y+55	; 0x37
    5c98:	98 ad       	ldd	r25, Y+56	; 0x38
    5c9a:	20 e0       	ldi	r18, 0x00	; 0
    5c9c:	30 e0       	ldi	r19, 0x00	; 0
    5c9e:	4a e7       	ldi	r20, 0x7A	; 122
    5ca0:	55 e4       	ldi	r21, 0x45	; 69
    5ca2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ca6:	dc 01       	movw	r26, r24
    5ca8:	cb 01       	movw	r24, r22
    5caa:	89 ab       	std	Y+49, r24	; 0x31
    5cac:	9a ab       	std	Y+50, r25	; 0x32
    5cae:	ab ab       	std	Y+51, r26	; 0x33
    5cb0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5cb2:	69 a9       	ldd	r22, Y+49	; 0x31
    5cb4:	7a a9       	ldd	r23, Y+50	; 0x32
    5cb6:	8b a9       	ldd	r24, Y+51	; 0x33
    5cb8:	9c a9       	ldd	r25, Y+52	; 0x34
    5cba:	20 e0       	ldi	r18, 0x00	; 0
    5cbc:	30 e0       	ldi	r19, 0x00	; 0
    5cbe:	40 e8       	ldi	r20, 0x80	; 128
    5cc0:	5f e3       	ldi	r21, 0x3F	; 63
    5cc2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5cc6:	88 23       	and	r24, r24
    5cc8:	2c f4       	brge	.+10     	; 0x5cd4 <APP_vLocker+0x3a8>
		__ticks = 1;
    5cca:	81 e0       	ldi	r24, 0x01	; 1
    5ccc:	90 e0       	ldi	r25, 0x00	; 0
    5cce:	98 ab       	std	Y+48, r25	; 0x30
    5cd0:	8f a7       	std	Y+47, r24	; 0x2f
    5cd2:	3f c0       	rjmp	.+126    	; 0x5d52 <APP_vLocker+0x426>
	else if (__tmp > 65535)
    5cd4:	69 a9       	ldd	r22, Y+49	; 0x31
    5cd6:	7a a9       	ldd	r23, Y+50	; 0x32
    5cd8:	8b a9       	ldd	r24, Y+51	; 0x33
    5cda:	9c a9       	ldd	r25, Y+52	; 0x34
    5cdc:	20 e0       	ldi	r18, 0x00	; 0
    5cde:	3f ef       	ldi	r19, 0xFF	; 255
    5ce0:	4f e7       	ldi	r20, 0x7F	; 127
    5ce2:	57 e4       	ldi	r21, 0x47	; 71
    5ce4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5ce8:	18 16       	cp	r1, r24
    5cea:	4c f5       	brge	.+82     	; 0x5d3e <APP_vLocker+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5cec:	6d a9       	ldd	r22, Y+53	; 0x35
    5cee:	7e a9       	ldd	r23, Y+54	; 0x36
    5cf0:	8f a9       	ldd	r24, Y+55	; 0x37
    5cf2:	98 ad       	ldd	r25, Y+56	; 0x38
    5cf4:	20 e0       	ldi	r18, 0x00	; 0
    5cf6:	30 e0       	ldi	r19, 0x00	; 0
    5cf8:	40 e2       	ldi	r20, 0x20	; 32
    5cfa:	51 e4       	ldi	r21, 0x41	; 65
    5cfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5d00:	dc 01       	movw	r26, r24
    5d02:	cb 01       	movw	r24, r22
    5d04:	bc 01       	movw	r22, r24
    5d06:	cd 01       	movw	r24, r26
    5d08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d0c:	dc 01       	movw	r26, r24
    5d0e:	cb 01       	movw	r24, r22
    5d10:	98 ab       	std	Y+48, r25	; 0x30
    5d12:	8f a7       	std	Y+47, r24	; 0x2f
    5d14:	0f c0       	rjmp	.+30     	; 0x5d34 <APP_vLocker+0x408>
    5d16:	80 e9       	ldi	r24, 0x90	; 144
    5d18:	91 e0       	ldi	r25, 0x01	; 1
    5d1a:	9e a7       	std	Y+46, r25	; 0x2e
    5d1c:	8d a7       	std	Y+45, r24	; 0x2d
    5d1e:	8d a5       	ldd	r24, Y+45	; 0x2d
    5d20:	9e a5       	ldd	r25, Y+46	; 0x2e
    5d22:	01 97       	sbiw	r24, 0x01	; 1
    5d24:	f1 f7       	brne	.-4      	; 0x5d22 <APP_vLocker+0x3f6>
    5d26:	9e a7       	std	Y+46, r25	; 0x2e
    5d28:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5d2a:	8f a5       	ldd	r24, Y+47	; 0x2f
    5d2c:	98 a9       	ldd	r25, Y+48	; 0x30
    5d2e:	01 97       	sbiw	r24, 0x01	; 1
    5d30:	98 ab       	std	Y+48, r25	; 0x30
    5d32:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5d34:	8f a5       	ldd	r24, Y+47	; 0x2f
    5d36:	98 a9       	ldd	r25, Y+48	; 0x30
    5d38:	00 97       	sbiw	r24, 0x00	; 0
    5d3a:	69 f7       	brne	.-38     	; 0x5d16 <APP_vLocker+0x3ea>
    5d3c:	0e ce       	rjmp	.-996    	; 0x595a <APP_vLocker+0x2e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5d3e:	69 a9       	ldd	r22, Y+49	; 0x31
    5d40:	7a a9       	ldd	r23, Y+50	; 0x32
    5d42:	8b a9       	ldd	r24, Y+51	; 0x33
    5d44:	9c a9       	ldd	r25, Y+52	; 0x34
    5d46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d4a:	dc 01       	movw	r26, r24
    5d4c:	cb 01       	movw	r24, r22
    5d4e:	98 ab       	std	Y+48, r25	; 0x30
    5d50:	8f a7       	std	Y+47, r24	; 0x2f
    5d52:	8f a5       	ldd	r24, Y+47	; 0x2f
    5d54:	98 a9       	ldd	r25, Y+48	; 0x30
    5d56:	9c a7       	std	Y+44, r25	; 0x2c
    5d58:	8b a7       	std	Y+43, r24	; 0x2b
    5d5a:	8b a5       	ldd	r24, Y+43	; 0x2b
    5d5c:	9c a5       	ldd	r25, Y+44	; 0x2c
    5d5e:	01 97       	sbiw	r24, 0x01	; 1
    5d60:	f1 f7       	brne	.-4      	; 0x5d5e <APP_vLocker+0x432>
    5d62:	9c a7       	std	Y+44, r25	; 0x2c
    5d64:	8b a7       	std	Y+43, r24	; 0x2b
    5d66:	f9 cd       	rjmp	.-1038   	; 0x595a <APP_vLocker+0x2e>
			_delay_ms(250);
		}
		else if(APP_u8compareArray(Loc_CorrectUserName4,user,4)==1){
    5d68:	fe 01       	movw	r30, r28
    5d6a:	eb 56       	subi	r30, 0x6B	; 107
    5d6c:	ff 4f       	sbci	r31, 0xFF	; 255
    5d6e:	80 81       	ld	r24, Z
    5d70:	91 81       	ldd	r25, Z+1	; 0x01
    5d72:	9e 01       	movw	r18, r28
    5d74:	27 5b       	subi	r18, 0xB7	; 183
    5d76:	3f 4f       	sbci	r19, 0xFF	; 255
    5d78:	b9 01       	movw	r22, r18
    5d7a:	44 e0       	ldi	r20, 0x04	; 4
    5d7c:	0e 94 08 32 	call	0x6410	; 0x6410 <APP_u8compareArray>
    5d80:	81 30       	cpi	r24, 0x01	; 1
    5d82:	09 f0       	breq	.+2      	; 0x5d86 <APP_vLocker+0x45a>
    5d84:	ea cd       	rjmp	.-1068   	; 0x595a <APP_vLocker+0x2e>
		else{
			//do nothing
		}
	}
	u8 WrongPassCounter ;
	for(WrongPassCounter=0;WrongPassCounter<3;WrongPassCounter++){
    5d86:	fe 01       	movw	r30, r28
    5d88:	e9 5b       	subi	r30, 0xB9	; 185
    5d8a:	ff 4f       	sbci	r31, 0xFF	; 255
    5d8c:	10 82       	st	Z, r1
    5d8e:	ce c2       	rjmp	.+1436   	; 0x632c <APP_vLocker+0xa00>
		LCD_vInit();
    5d90:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <LCD_vInit>
		u8 Pass[]="Enter Pass";
    5d94:	ce 01       	movw	r24, r28
    5d96:	84 59       	subi	r24, 0x94	; 148
    5d98:	9f 4f       	sbci	r25, 0xFF	; 255
    5d9a:	cd 55       	subi	r28, 0x5D	; 93
    5d9c:	df 4f       	sbci	r29, 0xFF	; 255
    5d9e:	99 83       	std	Y+1, r25	; 0x01
    5da0:	88 83       	st	Y, r24
    5da2:	c3 5a       	subi	r28, 0xA3	; 163
    5da4:	d0 40       	sbci	r29, 0x00	; 0
    5da6:	8c e7       	ldi	r24, 0x7C	; 124
    5da8:	90 e0       	ldi	r25, 0x00	; 0
    5daa:	cb 55       	subi	r28, 0x5B	; 91
    5dac:	df 4f       	sbci	r29, 0xFF	; 255
    5dae:	99 83       	std	Y+1, r25	; 0x01
    5db0:	88 83       	st	Y, r24
    5db2:	c5 5a       	subi	r28, 0xA5	; 165
    5db4:	d0 40       	sbci	r29, 0x00	; 0
    5db6:	9b e0       	ldi	r25, 0x0B	; 11
    5db8:	c9 55       	subi	r28, 0x59	; 89
    5dba:	df 4f       	sbci	r29, 0xFF	; 255
    5dbc:	98 83       	st	Y, r25
    5dbe:	c7 5a       	subi	r28, 0xA7	; 167
    5dc0:	d0 40       	sbci	r29, 0x00	; 0
    5dc2:	cb 55       	subi	r28, 0x5B	; 91
    5dc4:	df 4f       	sbci	r29, 0xFF	; 255
    5dc6:	e8 81       	ld	r30, Y
    5dc8:	f9 81       	ldd	r31, Y+1	; 0x01
    5dca:	c5 5a       	subi	r28, 0xA5	; 165
    5dcc:	d0 40       	sbci	r29, 0x00	; 0
    5dce:	00 80       	ld	r0, Z
    5dd0:	cb 55       	subi	r28, 0x5B	; 91
    5dd2:	df 4f       	sbci	r29, 0xFF	; 255
    5dd4:	88 81       	ld	r24, Y
    5dd6:	99 81       	ldd	r25, Y+1	; 0x01
    5dd8:	c5 5a       	subi	r28, 0xA5	; 165
    5dda:	d0 40       	sbci	r29, 0x00	; 0
    5ddc:	01 96       	adiw	r24, 0x01	; 1
    5dde:	cb 55       	subi	r28, 0x5B	; 91
    5de0:	df 4f       	sbci	r29, 0xFF	; 255
    5de2:	99 83       	std	Y+1, r25	; 0x01
    5de4:	88 83       	st	Y, r24
    5de6:	c5 5a       	subi	r28, 0xA5	; 165
    5de8:	d0 40       	sbci	r29, 0x00	; 0
    5dea:	cd 55       	subi	r28, 0x5D	; 93
    5dec:	df 4f       	sbci	r29, 0xFF	; 255
    5dee:	e8 81       	ld	r30, Y
    5df0:	f9 81       	ldd	r31, Y+1	; 0x01
    5df2:	c3 5a       	subi	r28, 0xA3	; 163
    5df4:	d0 40       	sbci	r29, 0x00	; 0
    5df6:	00 82       	st	Z, r0
    5df8:	cd 55       	subi	r28, 0x5D	; 93
    5dfa:	df 4f       	sbci	r29, 0xFF	; 255
    5dfc:	88 81       	ld	r24, Y
    5dfe:	99 81       	ldd	r25, Y+1	; 0x01
    5e00:	c3 5a       	subi	r28, 0xA3	; 163
    5e02:	d0 40       	sbci	r29, 0x00	; 0
    5e04:	01 96       	adiw	r24, 0x01	; 1
    5e06:	cd 55       	subi	r28, 0x5D	; 93
    5e08:	df 4f       	sbci	r29, 0xFF	; 255
    5e0a:	99 83       	std	Y+1, r25	; 0x01
    5e0c:	88 83       	st	Y, r24
    5e0e:	c3 5a       	subi	r28, 0xA3	; 163
    5e10:	d0 40       	sbci	r29, 0x00	; 0
    5e12:	c9 55       	subi	r28, 0x59	; 89
    5e14:	df 4f       	sbci	r29, 0xFF	; 255
    5e16:	98 81       	ld	r25, Y
    5e18:	c7 5a       	subi	r28, 0xA7	; 167
    5e1a:	d0 40       	sbci	r29, 0x00	; 0
    5e1c:	91 50       	subi	r25, 0x01	; 1
    5e1e:	c9 55       	subi	r28, 0x59	; 89
    5e20:	df 4f       	sbci	r29, 0xFF	; 255
    5e22:	98 83       	st	Y, r25
    5e24:	c7 5a       	subi	r28, 0xA7	; 167
    5e26:	d0 40       	sbci	r29, 0x00	; 0
    5e28:	c9 55       	subi	r28, 0x59	; 89
    5e2a:	df 4f       	sbci	r29, 0xFF	; 255
    5e2c:	e8 81       	ld	r30, Y
    5e2e:	c7 5a       	subi	r28, 0xA7	; 167
    5e30:	d0 40       	sbci	r29, 0x00	; 0
    5e32:	ee 23       	and	r30, r30
    5e34:	31 f6       	brne	.-116    	; 0x5dc2 <APP_vLocker+0x496>
		LCD_vWriteString(Pass);
    5e36:	ce 01       	movw	r24, r28
    5e38:	84 59       	subi	r24, 0x94	; 148
    5e3a:	9f 4f       	sbci	r25, 0xFF	; 255
    5e3c:	0e 94 31 20 	call	0x4062	; 0x4062 <LCD_vWriteString>
		LCD_vGoTo(LineTwo,0);
    5e40:	80 ec       	ldi	r24, 0xC0	; 192
    5e42:	60 e0       	ldi	r22, 0x00	; 0
    5e44:	0e 94 98 1f 	call	0x3f30	; 0x3f30 <LCD_vGoTo>
		for(i=0;i<3;i++){
    5e48:	fe 01       	movw	r30, r28
    5e4a:	e8 5b       	subi	r30, 0xB8	; 184
    5e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    5e4e:	10 82       	st	Z, r1
    5e50:	a9 c0       	rjmp	.+338    	; 0x5fa4 <APP_vLocker+0x678>
			KAYPAD_vInit();
    5e52:	0e 94 b2 20 	call	0x4164	; 0x4164 <KAYPAD_vInit>
			while(1){
				pass[i]=KAYPAD_u8GetKey();
    5e56:	fe 01       	movw	r30, r28
    5e58:	e8 5b       	subi	r30, 0xB8	; 184
    5e5a:	ff 4f       	sbci	r31, 0xFF	; 255
    5e5c:	80 81       	ld	r24, Z
    5e5e:	08 2f       	mov	r16, r24
    5e60:	10 e0       	ldi	r17, 0x00	; 0
    5e62:	0e 94 c1 20 	call	0x4182	; 0x4182 <KAYPAD_u8GetKey>
    5e66:	28 2f       	mov	r18, r24
    5e68:	ce 01       	movw	r24, r28
    5e6a:	83 5b       	subi	r24, 0xB3	; 179
    5e6c:	9f 4f       	sbci	r25, 0xFF	; 255
    5e6e:	fc 01       	movw	r30, r24
    5e70:	e0 0f       	add	r30, r16
    5e72:	f1 1f       	adc	r31, r17
    5e74:	20 83       	st	Z, r18
    5e76:	80 e0       	ldi	r24, 0x00	; 0
    5e78:	90 e0       	ldi	r25, 0x00	; 0
    5e7a:	a8 e4       	ldi	r26, 0x48	; 72
    5e7c:	b2 e4       	ldi	r27, 0x42	; 66
    5e7e:	8f a3       	std	Y+39, r24	; 0x27
    5e80:	98 a7       	std	Y+40, r25	; 0x28
    5e82:	a9 a7       	std	Y+41, r26	; 0x29
    5e84:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5e86:	6f a1       	ldd	r22, Y+39	; 0x27
    5e88:	78 a5       	ldd	r23, Y+40	; 0x28
    5e8a:	89 a5       	ldd	r24, Y+41	; 0x29
    5e8c:	9a a5       	ldd	r25, Y+42	; 0x2a
    5e8e:	20 e0       	ldi	r18, 0x00	; 0
    5e90:	30 e0       	ldi	r19, 0x00	; 0
    5e92:	4a e7       	ldi	r20, 0x7A	; 122
    5e94:	55 e4       	ldi	r21, 0x45	; 69
    5e96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5e9a:	dc 01       	movw	r26, r24
    5e9c:	cb 01       	movw	r24, r22
    5e9e:	8b a3       	std	Y+35, r24	; 0x23
    5ea0:	9c a3       	std	Y+36, r25	; 0x24
    5ea2:	ad a3       	std	Y+37, r26	; 0x25
    5ea4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5ea6:	6b a1       	ldd	r22, Y+35	; 0x23
    5ea8:	7c a1       	ldd	r23, Y+36	; 0x24
    5eaa:	8d a1       	ldd	r24, Y+37	; 0x25
    5eac:	9e a1       	ldd	r25, Y+38	; 0x26
    5eae:	20 e0       	ldi	r18, 0x00	; 0
    5eb0:	30 e0       	ldi	r19, 0x00	; 0
    5eb2:	40 e8       	ldi	r20, 0x80	; 128
    5eb4:	5f e3       	ldi	r21, 0x3F	; 63
    5eb6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5eba:	88 23       	and	r24, r24
    5ebc:	2c f4       	brge	.+10     	; 0x5ec8 <APP_vLocker+0x59c>
		__ticks = 1;
    5ebe:	81 e0       	ldi	r24, 0x01	; 1
    5ec0:	90 e0       	ldi	r25, 0x00	; 0
    5ec2:	9a a3       	std	Y+34, r25	; 0x22
    5ec4:	89 a3       	std	Y+33, r24	; 0x21
    5ec6:	3f c0       	rjmp	.+126    	; 0x5f46 <APP_vLocker+0x61a>
	else if (__tmp > 65535)
    5ec8:	6b a1       	ldd	r22, Y+35	; 0x23
    5eca:	7c a1       	ldd	r23, Y+36	; 0x24
    5ecc:	8d a1       	ldd	r24, Y+37	; 0x25
    5ece:	9e a1       	ldd	r25, Y+38	; 0x26
    5ed0:	20 e0       	ldi	r18, 0x00	; 0
    5ed2:	3f ef       	ldi	r19, 0xFF	; 255
    5ed4:	4f e7       	ldi	r20, 0x7F	; 127
    5ed6:	57 e4       	ldi	r21, 0x47	; 71
    5ed8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5edc:	18 16       	cp	r1, r24
    5ede:	4c f5       	brge	.+82     	; 0x5f32 <APP_vLocker+0x606>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5ee0:	6f a1       	ldd	r22, Y+39	; 0x27
    5ee2:	78 a5       	ldd	r23, Y+40	; 0x28
    5ee4:	89 a5       	ldd	r24, Y+41	; 0x29
    5ee6:	9a a5       	ldd	r25, Y+42	; 0x2a
    5ee8:	20 e0       	ldi	r18, 0x00	; 0
    5eea:	30 e0       	ldi	r19, 0x00	; 0
    5eec:	40 e2       	ldi	r20, 0x20	; 32
    5eee:	51 e4       	ldi	r21, 0x41	; 65
    5ef0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ef4:	dc 01       	movw	r26, r24
    5ef6:	cb 01       	movw	r24, r22
    5ef8:	bc 01       	movw	r22, r24
    5efa:	cd 01       	movw	r24, r26
    5efc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5f00:	dc 01       	movw	r26, r24
    5f02:	cb 01       	movw	r24, r22
    5f04:	9a a3       	std	Y+34, r25	; 0x22
    5f06:	89 a3       	std	Y+33, r24	; 0x21
    5f08:	0f c0       	rjmp	.+30     	; 0x5f28 <APP_vLocker+0x5fc>
    5f0a:	80 e9       	ldi	r24, 0x90	; 144
    5f0c:	91 e0       	ldi	r25, 0x01	; 1
    5f0e:	98 a3       	std	Y+32, r25	; 0x20
    5f10:	8f 8f       	std	Y+31, r24	; 0x1f
    5f12:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5f14:	98 a1       	ldd	r25, Y+32	; 0x20
    5f16:	01 97       	sbiw	r24, 0x01	; 1
    5f18:	f1 f7       	brne	.-4      	; 0x5f16 <APP_vLocker+0x5ea>
    5f1a:	98 a3       	std	Y+32, r25	; 0x20
    5f1c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5f1e:	89 a1       	ldd	r24, Y+33	; 0x21
    5f20:	9a a1       	ldd	r25, Y+34	; 0x22
    5f22:	01 97       	sbiw	r24, 0x01	; 1
    5f24:	9a a3       	std	Y+34, r25	; 0x22
    5f26:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5f28:	89 a1       	ldd	r24, Y+33	; 0x21
    5f2a:	9a a1       	ldd	r25, Y+34	; 0x22
    5f2c:	00 97       	sbiw	r24, 0x00	; 0
    5f2e:	69 f7       	brne	.-38     	; 0x5f0a <APP_vLocker+0x5de>
    5f30:	14 c0       	rjmp	.+40     	; 0x5f5a <APP_vLocker+0x62e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5f32:	6b a1       	ldd	r22, Y+35	; 0x23
    5f34:	7c a1       	ldd	r23, Y+36	; 0x24
    5f36:	8d a1       	ldd	r24, Y+37	; 0x25
    5f38:	9e a1       	ldd	r25, Y+38	; 0x26
    5f3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5f3e:	dc 01       	movw	r26, r24
    5f40:	cb 01       	movw	r24, r22
    5f42:	9a a3       	std	Y+34, r25	; 0x22
    5f44:	89 a3       	std	Y+33, r24	; 0x21
    5f46:	89 a1       	ldd	r24, Y+33	; 0x21
    5f48:	9a a1       	ldd	r25, Y+34	; 0x22
    5f4a:	9e 8f       	std	Y+30, r25	; 0x1e
    5f4c:	8d 8f       	std	Y+29, r24	; 0x1d
    5f4e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5f50:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5f52:	01 97       	sbiw	r24, 0x01	; 1
    5f54:	f1 f7       	brne	.-4      	; 0x5f52 <APP_vLocker+0x626>
    5f56:	9e 8f       	std	Y+30, r25	; 0x1e
    5f58:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(50);
				if(pass[i]!=0xff){
    5f5a:	fe 01       	movw	r30, r28
    5f5c:	e8 5b       	subi	r30, 0xB8	; 184
    5f5e:	ff 4f       	sbci	r31, 0xFF	; 255
    5f60:	80 81       	ld	r24, Z
    5f62:	28 2f       	mov	r18, r24
    5f64:	30 e0       	ldi	r19, 0x00	; 0
    5f66:	ce 01       	movw	r24, r28
    5f68:	83 5b       	subi	r24, 0xB3	; 179
    5f6a:	9f 4f       	sbci	r25, 0xFF	; 255
    5f6c:	fc 01       	movw	r30, r24
    5f6e:	e2 0f       	add	r30, r18
    5f70:	f3 1f       	adc	r31, r19
    5f72:	80 81       	ld	r24, Z
    5f74:	8f 3f       	cpi	r24, 0xFF	; 255
    5f76:	09 f4       	brne	.+2      	; 0x5f7a <APP_vLocker+0x64e>
    5f78:	6e cf       	rjmp	.-292    	; 0x5e56 <APP_vLocker+0x52a>
					LCD_vInitWithOutClear();
    5f7a:	0e 94 67 1c 	call	0x38ce	; 0x38ce <LCD_vInitWithOutClear>
					LCD_vGoTo(LineTwo,i);
    5f7e:	fe 01       	movw	r30, r28
    5f80:	e8 5b       	subi	r30, 0xB8	; 184
    5f82:	ff 4f       	sbci	r31, 0xFF	; 255
    5f84:	80 ec       	ldi	r24, 0xC0	; 192
    5f86:	60 81       	ld	r22, Z
    5f88:	0e 94 98 1f 	call	0x3f30	; 0x3f30 <LCD_vGoTo>
					LCD_vWriteCharacter('*');
    5f8c:	8a e2       	ldi	r24, 0x2A	; 42
    5f8e:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <LCD_vWriteCharacter>
	for(WrongPassCounter=0;WrongPassCounter<3;WrongPassCounter++){
		LCD_vInit();
		u8 Pass[]="Enter Pass";
		LCD_vWriteString(Pass);
		LCD_vGoTo(LineTwo,0);
		for(i=0;i<3;i++){
    5f92:	de 01       	movw	r26, r28
    5f94:	a8 5b       	subi	r26, 0xB8	; 184
    5f96:	bf 4f       	sbci	r27, 0xFF	; 255
    5f98:	fe 01       	movw	r30, r28
    5f9a:	e8 5b       	subi	r30, 0xB8	; 184
    5f9c:	ff 4f       	sbci	r31, 0xFF	; 255
    5f9e:	80 81       	ld	r24, Z
    5fa0:	8f 5f       	subi	r24, 0xFF	; 255
    5fa2:	8c 93       	st	X, r24
    5fa4:	fe 01       	movw	r30, r28
    5fa6:	e8 5b       	subi	r30, 0xB8	; 184
    5fa8:	ff 4f       	sbci	r31, 0xFF	; 255
    5faa:	80 81       	ld	r24, Z
    5fac:	83 30       	cpi	r24, 0x03	; 3
    5fae:	08 f4       	brcc	.+2      	; 0x5fb2 <APP_vLocker+0x686>
    5fb0:	50 cf       	rjmp	.-352    	; 0x5e52 <APP_vLocker+0x526>
					LCD_vWriteCharacter('*');
					break;
				}
			}
		}
		if(APP_u8compareArray(Loc_CorrectPassword3,pass,3)==0){
    5fb2:	fe 01       	movw	r30, r28
    5fb4:	e9 56       	subi	r30, 0x69	; 105
    5fb6:	ff 4f       	sbci	r31, 0xFF	; 255
    5fb8:	80 81       	ld	r24, Z
    5fba:	91 81       	ldd	r25, Z+1	; 0x01
    5fbc:	9e 01       	movw	r18, r28
    5fbe:	23 5b       	subi	r18, 0xB3	; 179
    5fc0:	3f 4f       	sbci	r19, 0xFF	; 255
    5fc2:	b9 01       	movw	r22, r18
    5fc4:	43 e0       	ldi	r20, 0x03	; 3
    5fc6:	0e 94 08 32 	call	0x6410	; 0x6410 <APP_u8compareArray>
    5fca:	88 23       	and	r24, r24
    5fcc:	09 f0       	breq	.+2      	; 0x5fd0 <APP_vLocker+0x6a4>
    5fce:	cb c0       	rjmp	.+406    	; 0x6166 <APP_vLocker+0x83a>
			LCD_vInit();
    5fd0:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <LCD_vInit>
			u8 Wrong[]="Wrong Pass";
    5fd4:	ce 01       	movw	r24, r28
    5fd6:	89 58       	subi	r24, 0x89	; 137
    5fd8:	9f 4f       	sbci	r25, 0xFF	; 255
    5fda:	c8 55       	subi	r28, 0x58	; 88
    5fdc:	df 4f       	sbci	r29, 0xFF	; 255
    5fde:	99 83       	std	Y+1, r25	; 0x01
    5fe0:	88 83       	st	Y, r24
    5fe2:	c8 5a       	subi	r28, 0xA8	; 168
    5fe4:	d0 40       	sbci	r29, 0x00	; 0
    5fe6:	87 e8       	ldi	r24, 0x87	; 135
    5fe8:	90 e0       	ldi	r25, 0x00	; 0
    5fea:	c6 55       	subi	r28, 0x56	; 86
    5fec:	df 4f       	sbci	r29, 0xFF	; 255
    5fee:	99 83       	std	Y+1, r25	; 0x01
    5ff0:	88 83       	st	Y, r24
    5ff2:	ca 5a       	subi	r28, 0xAA	; 170
    5ff4:	d0 40       	sbci	r29, 0x00	; 0
    5ff6:	9b e0       	ldi	r25, 0x0B	; 11
    5ff8:	c4 55       	subi	r28, 0x54	; 84
    5ffa:	df 4f       	sbci	r29, 0xFF	; 255
    5ffc:	98 83       	st	Y, r25
    5ffe:	cc 5a       	subi	r28, 0xAC	; 172
    6000:	d0 40       	sbci	r29, 0x00	; 0
    6002:	c6 55       	subi	r28, 0x56	; 86
    6004:	df 4f       	sbci	r29, 0xFF	; 255
    6006:	e8 81       	ld	r30, Y
    6008:	f9 81       	ldd	r31, Y+1	; 0x01
    600a:	ca 5a       	subi	r28, 0xAA	; 170
    600c:	d0 40       	sbci	r29, 0x00	; 0
    600e:	00 80       	ld	r0, Z
    6010:	c6 55       	subi	r28, 0x56	; 86
    6012:	df 4f       	sbci	r29, 0xFF	; 255
    6014:	88 81       	ld	r24, Y
    6016:	99 81       	ldd	r25, Y+1	; 0x01
    6018:	ca 5a       	subi	r28, 0xAA	; 170
    601a:	d0 40       	sbci	r29, 0x00	; 0
    601c:	01 96       	adiw	r24, 0x01	; 1
    601e:	c6 55       	subi	r28, 0x56	; 86
    6020:	df 4f       	sbci	r29, 0xFF	; 255
    6022:	99 83       	std	Y+1, r25	; 0x01
    6024:	88 83       	st	Y, r24
    6026:	ca 5a       	subi	r28, 0xAA	; 170
    6028:	d0 40       	sbci	r29, 0x00	; 0
    602a:	c8 55       	subi	r28, 0x58	; 88
    602c:	df 4f       	sbci	r29, 0xFF	; 255
    602e:	e8 81       	ld	r30, Y
    6030:	f9 81       	ldd	r31, Y+1	; 0x01
    6032:	c8 5a       	subi	r28, 0xA8	; 168
    6034:	d0 40       	sbci	r29, 0x00	; 0
    6036:	00 82       	st	Z, r0
    6038:	c8 55       	subi	r28, 0x58	; 88
    603a:	df 4f       	sbci	r29, 0xFF	; 255
    603c:	88 81       	ld	r24, Y
    603e:	99 81       	ldd	r25, Y+1	; 0x01
    6040:	c8 5a       	subi	r28, 0xA8	; 168
    6042:	d0 40       	sbci	r29, 0x00	; 0
    6044:	01 96       	adiw	r24, 0x01	; 1
    6046:	c8 55       	subi	r28, 0x58	; 88
    6048:	df 4f       	sbci	r29, 0xFF	; 255
    604a:	99 83       	std	Y+1, r25	; 0x01
    604c:	88 83       	st	Y, r24
    604e:	c8 5a       	subi	r28, 0xA8	; 168
    6050:	d0 40       	sbci	r29, 0x00	; 0
    6052:	c4 55       	subi	r28, 0x54	; 84
    6054:	df 4f       	sbci	r29, 0xFF	; 255
    6056:	98 81       	ld	r25, Y
    6058:	cc 5a       	subi	r28, 0xAC	; 172
    605a:	d0 40       	sbci	r29, 0x00	; 0
    605c:	91 50       	subi	r25, 0x01	; 1
    605e:	c4 55       	subi	r28, 0x54	; 84
    6060:	df 4f       	sbci	r29, 0xFF	; 255
    6062:	98 83       	st	Y, r25
    6064:	cc 5a       	subi	r28, 0xAC	; 172
    6066:	d0 40       	sbci	r29, 0x00	; 0
    6068:	c4 55       	subi	r28, 0x54	; 84
    606a:	df 4f       	sbci	r29, 0xFF	; 255
    606c:	e8 81       	ld	r30, Y
    606e:	cc 5a       	subi	r28, 0xAC	; 172
    6070:	d0 40       	sbci	r29, 0x00	; 0
    6072:	ee 23       	and	r30, r30
    6074:	31 f6       	brne	.-116    	; 0x6002 <APP_vLocker+0x6d6>
			LCD_vWriteString(Wrong);
    6076:	ce 01       	movw	r24, r28
    6078:	89 58       	subi	r24, 0x89	; 137
    607a:	9f 4f       	sbci	r25, 0xFF	; 255
    607c:	0e 94 31 20 	call	0x4062	; 0x4062 <LCD_vWriteString>
    6080:	80 e0       	ldi	r24, 0x00	; 0
    6082:	90 e0       	ldi	r25, 0x00	; 0
    6084:	aa e7       	ldi	r26, 0x7A	; 122
    6086:	b3 e4       	ldi	r27, 0x43	; 67
    6088:	89 8f       	std	Y+25, r24	; 0x19
    608a:	9a 8f       	std	Y+26, r25	; 0x1a
    608c:	ab 8f       	std	Y+27, r26	; 0x1b
    608e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6090:	69 8d       	ldd	r22, Y+25	; 0x19
    6092:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6094:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6096:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6098:	20 e0       	ldi	r18, 0x00	; 0
    609a:	30 e0       	ldi	r19, 0x00	; 0
    609c:	4a e7       	ldi	r20, 0x7A	; 122
    609e:	55 e4       	ldi	r21, 0x45	; 69
    60a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    60a4:	dc 01       	movw	r26, r24
    60a6:	cb 01       	movw	r24, r22
    60a8:	8d 8b       	std	Y+21, r24	; 0x15
    60aa:	9e 8b       	std	Y+22, r25	; 0x16
    60ac:	af 8b       	std	Y+23, r26	; 0x17
    60ae:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    60b0:	6d 89       	ldd	r22, Y+21	; 0x15
    60b2:	7e 89       	ldd	r23, Y+22	; 0x16
    60b4:	8f 89       	ldd	r24, Y+23	; 0x17
    60b6:	98 8d       	ldd	r25, Y+24	; 0x18
    60b8:	20 e0       	ldi	r18, 0x00	; 0
    60ba:	30 e0       	ldi	r19, 0x00	; 0
    60bc:	40 e8       	ldi	r20, 0x80	; 128
    60be:	5f e3       	ldi	r21, 0x3F	; 63
    60c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    60c4:	88 23       	and	r24, r24
    60c6:	2c f4       	brge	.+10     	; 0x60d2 <APP_vLocker+0x7a6>
		__ticks = 1;
    60c8:	81 e0       	ldi	r24, 0x01	; 1
    60ca:	90 e0       	ldi	r25, 0x00	; 0
    60cc:	9c 8b       	std	Y+20, r25	; 0x14
    60ce:	8b 8b       	std	Y+19, r24	; 0x13
    60d0:	3f c0       	rjmp	.+126    	; 0x6150 <APP_vLocker+0x824>
	else if (__tmp > 65535)
    60d2:	6d 89       	ldd	r22, Y+21	; 0x15
    60d4:	7e 89       	ldd	r23, Y+22	; 0x16
    60d6:	8f 89       	ldd	r24, Y+23	; 0x17
    60d8:	98 8d       	ldd	r25, Y+24	; 0x18
    60da:	20 e0       	ldi	r18, 0x00	; 0
    60dc:	3f ef       	ldi	r19, 0xFF	; 255
    60de:	4f e7       	ldi	r20, 0x7F	; 127
    60e0:	57 e4       	ldi	r21, 0x47	; 71
    60e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    60e6:	18 16       	cp	r1, r24
    60e8:	4c f5       	brge	.+82     	; 0x613c <APP_vLocker+0x810>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    60ea:	69 8d       	ldd	r22, Y+25	; 0x19
    60ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    60ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    60f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    60f2:	20 e0       	ldi	r18, 0x00	; 0
    60f4:	30 e0       	ldi	r19, 0x00	; 0
    60f6:	40 e2       	ldi	r20, 0x20	; 32
    60f8:	51 e4       	ldi	r21, 0x41	; 65
    60fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    60fe:	dc 01       	movw	r26, r24
    6100:	cb 01       	movw	r24, r22
    6102:	bc 01       	movw	r22, r24
    6104:	cd 01       	movw	r24, r26
    6106:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    610a:	dc 01       	movw	r26, r24
    610c:	cb 01       	movw	r24, r22
    610e:	9c 8b       	std	Y+20, r25	; 0x14
    6110:	8b 8b       	std	Y+19, r24	; 0x13
    6112:	0f c0       	rjmp	.+30     	; 0x6132 <APP_vLocker+0x806>
    6114:	80 e9       	ldi	r24, 0x90	; 144
    6116:	91 e0       	ldi	r25, 0x01	; 1
    6118:	9a 8b       	std	Y+18, r25	; 0x12
    611a:	89 8b       	std	Y+17, r24	; 0x11
    611c:	89 89       	ldd	r24, Y+17	; 0x11
    611e:	9a 89       	ldd	r25, Y+18	; 0x12
    6120:	01 97       	sbiw	r24, 0x01	; 1
    6122:	f1 f7       	brne	.-4      	; 0x6120 <APP_vLocker+0x7f4>
    6124:	9a 8b       	std	Y+18, r25	; 0x12
    6126:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6128:	8b 89       	ldd	r24, Y+19	; 0x13
    612a:	9c 89       	ldd	r25, Y+20	; 0x14
    612c:	01 97       	sbiw	r24, 0x01	; 1
    612e:	9c 8b       	std	Y+20, r25	; 0x14
    6130:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6132:	8b 89       	ldd	r24, Y+19	; 0x13
    6134:	9c 89       	ldd	r25, Y+20	; 0x14
    6136:	00 97       	sbiw	r24, 0x00	; 0
    6138:	69 f7       	brne	.-38     	; 0x6114 <APP_vLocker+0x7e8>
    613a:	ef c0       	rjmp	.+478    	; 0x631a <APP_vLocker+0x9ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    613c:	6d 89       	ldd	r22, Y+21	; 0x15
    613e:	7e 89       	ldd	r23, Y+22	; 0x16
    6140:	8f 89       	ldd	r24, Y+23	; 0x17
    6142:	98 8d       	ldd	r25, Y+24	; 0x18
    6144:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6148:	dc 01       	movw	r26, r24
    614a:	cb 01       	movw	r24, r22
    614c:	9c 8b       	std	Y+20, r25	; 0x14
    614e:	8b 8b       	std	Y+19, r24	; 0x13
    6150:	8b 89       	ldd	r24, Y+19	; 0x13
    6152:	9c 89       	ldd	r25, Y+20	; 0x14
    6154:	98 8b       	std	Y+16, r25	; 0x10
    6156:	8f 87       	std	Y+15, r24	; 0x0f
    6158:	8f 85       	ldd	r24, Y+15	; 0x0f
    615a:	98 89       	ldd	r25, Y+16	; 0x10
    615c:	01 97       	sbiw	r24, 0x01	; 1
    615e:	f1 f7       	brne	.-4      	; 0x615c <APP_vLocker+0x830>
    6160:	98 8b       	std	Y+16, r25	; 0x10
    6162:	8f 87       	std	Y+15, r24	; 0x0f
    6164:	da c0       	rjmp	.+436    	; 0x631a <APP_vLocker+0x9ee>
			_delay_ms(250);
		}
		else if(APP_u8compareArray(Loc_CorrectPassword3,pass,3)==1){
    6166:	fe 01       	movw	r30, r28
    6168:	e9 56       	subi	r30, 0x69	; 105
    616a:	ff 4f       	sbci	r31, 0xFF	; 255
    616c:	80 81       	ld	r24, Z
    616e:	91 81       	ldd	r25, Z+1	; 0x01
    6170:	9e 01       	movw	r18, r28
    6172:	23 5b       	subi	r18, 0xB3	; 179
    6174:	3f 4f       	sbci	r19, 0xFF	; 255
    6176:	b9 01       	movw	r22, r18
    6178:	43 e0       	ldi	r20, 0x03	; 3
    617a:	0e 94 08 32 	call	0x6410	; 0x6410 <APP_u8compareArray>
    617e:	81 30       	cpi	r24, 0x01	; 1
    6180:	09 f0       	breq	.+2      	; 0x6184 <APP_vLocker+0x858>
    6182:	cb c0       	rjmp	.+406    	; 0x631a <APP_vLocker+0x9ee>
			LCD_vInit();
    6184:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <LCD_vInit>
			u8 Welcome[]="Welcome";
    6188:	ce 01       	movw	r24, r28
    618a:	8e 57       	subi	r24, 0x7E	; 126
    618c:	9f 4f       	sbci	r25, 0xFF	; 255
    618e:	c3 55       	subi	r28, 0x53	; 83
    6190:	df 4f       	sbci	r29, 0xFF	; 255
    6192:	99 83       	std	Y+1, r25	; 0x01
    6194:	88 83       	st	Y, r24
    6196:	cd 5a       	subi	r28, 0xAD	; 173
    6198:	d0 40       	sbci	r29, 0x00	; 0
    619a:	82 e9       	ldi	r24, 0x92	; 146
    619c:	90 e0       	ldi	r25, 0x00	; 0
    619e:	c1 55       	subi	r28, 0x51	; 81
    61a0:	df 4f       	sbci	r29, 0xFF	; 255
    61a2:	99 83       	std	Y+1, r25	; 0x01
    61a4:	88 83       	st	Y, r24
    61a6:	cf 5a       	subi	r28, 0xAF	; 175
    61a8:	d0 40       	sbci	r29, 0x00	; 0
    61aa:	98 e0       	ldi	r25, 0x08	; 8
    61ac:	cf 54       	subi	r28, 0x4F	; 79
    61ae:	df 4f       	sbci	r29, 0xFF	; 255
    61b0:	98 83       	st	Y, r25
    61b2:	c1 5b       	subi	r28, 0xB1	; 177
    61b4:	d0 40       	sbci	r29, 0x00	; 0
    61b6:	c1 55       	subi	r28, 0x51	; 81
    61b8:	df 4f       	sbci	r29, 0xFF	; 255
    61ba:	e8 81       	ld	r30, Y
    61bc:	f9 81       	ldd	r31, Y+1	; 0x01
    61be:	cf 5a       	subi	r28, 0xAF	; 175
    61c0:	d0 40       	sbci	r29, 0x00	; 0
    61c2:	00 80       	ld	r0, Z
    61c4:	c1 55       	subi	r28, 0x51	; 81
    61c6:	df 4f       	sbci	r29, 0xFF	; 255
    61c8:	88 81       	ld	r24, Y
    61ca:	99 81       	ldd	r25, Y+1	; 0x01
    61cc:	cf 5a       	subi	r28, 0xAF	; 175
    61ce:	d0 40       	sbci	r29, 0x00	; 0
    61d0:	01 96       	adiw	r24, 0x01	; 1
    61d2:	c1 55       	subi	r28, 0x51	; 81
    61d4:	df 4f       	sbci	r29, 0xFF	; 255
    61d6:	99 83       	std	Y+1, r25	; 0x01
    61d8:	88 83       	st	Y, r24
    61da:	cf 5a       	subi	r28, 0xAF	; 175
    61dc:	d0 40       	sbci	r29, 0x00	; 0
    61de:	c3 55       	subi	r28, 0x53	; 83
    61e0:	df 4f       	sbci	r29, 0xFF	; 255
    61e2:	e8 81       	ld	r30, Y
    61e4:	f9 81       	ldd	r31, Y+1	; 0x01
    61e6:	cd 5a       	subi	r28, 0xAD	; 173
    61e8:	d0 40       	sbci	r29, 0x00	; 0
    61ea:	00 82       	st	Z, r0
    61ec:	c3 55       	subi	r28, 0x53	; 83
    61ee:	df 4f       	sbci	r29, 0xFF	; 255
    61f0:	88 81       	ld	r24, Y
    61f2:	99 81       	ldd	r25, Y+1	; 0x01
    61f4:	cd 5a       	subi	r28, 0xAD	; 173
    61f6:	d0 40       	sbci	r29, 0x00	; 0
    61f8:	01 96       	adiw	r24, 0x01	; 1
    61fa:	c3 55       	subi	r28, 0x53	; 83
    61fc:	df 4f       	sbci	r29, 0xFF	; 255
    61fe:	99 83       	std	Y+1, r25	; 0x01
    6200:	88 83       	st	Y, r24
    6202:	cd 5a       	subi	r28, 0xAD	; 173
    6204:	d0 40       	sbci	r29, 0x00	; 0
    6206:	cf 54       	subi	r28, 0x4F	; 79
    6208:	df 4f       	sbci	r29, 0xFF	; 255
    620a:	98 81       	ld	r25, Y
    620c:	c1 5b       	subi	r28, 0xB1	; 177
    620e:	d0 40       	sbci	r29, 0x00	; 0
    6210:	91 50       	subi	r25, 0x01	; 1
    6212:	cf 54       	subi	r28, 0x4F	; 79
    6214:	df 4f       	sbci	r29, 0xFF	; 255
    6216:	98 83       	st	Y, r25
    6218:	c1 5b       	subi	r28, 0xB1	; 177
    621a:	d0 40       	sbci	r29, 0x00	; 0
    621c:	cf 54       	subi	r28, 0x4F	; 79
    621e:	df 4f       	sbci	r29, 0xFF	; 255
    6220:	e8 81       	ld	r30, Y
    6222:	c1 5b       	subi	r28, 0xB1	; 177
    6224:	d0 40       	sbci	r29, 0x00	; 0
    6226:	ee 23       	and	r30, r30
    6228:	31 f6       	brne	.-116    	; 0x61b6 <APP_vLocker+0x88a>
			LCD_vWriteString(Welcome);
    622a:	ce 01       	movw	r24, r28
    622c:	8e 57       	subi	r24, 0x7E	; 126
    622e:	9f 4f       	sbci	r25, 0xFF	; 255
    6230:	0e 94 31 20 	call	0x4062	; 0x4062 <LCD_vWriteString>
    6234:	80 e0       	ldi	r24, 0x00	; 0
    6236:	90 e0       	ldi	r25, 0x00	; 0
    6238:	aa e7       	ldi	r26, 0x7A	; 122
    623a:	b3 e4       	ldi	r27, 0x43	; 67
    623c:	8b 87       	std	Y+11, r24	; 0x0b
    623e:	9c 87       	std	Y+12, r25	; 0x0c
    6240:	ad 87       	std	Y+13, r26	; 0x0d
    6242:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6244:	6b 85       	ldd	r22, Y+11	; 0x0b
    6246:	7c 85       	ldd	r23, Y+12	; 0x0c
    6248:	8d 85       	ldd	r24, Y+13	; 0x0d
    624a:	9e 85       	ldd	r25, Y+14	; 0x0e
    624c:	20 e0       	ldi	r18, 0x00	; 0
    624e:	30 e0       	ldi	r19, 0x00	; 0
    6250:	4a e7       	ldi	r20, 0x7A	; 122
    6252:	55 e4       	ldi	r21, 0x45	; 69
    6254:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6258:	dc 01       	movw	r26, r24
    625a:	cb 01       	movw	r24, r22
    625c:	8f 83       	std	Y+7, r24	; 0x07
    625e:	98 87       	std	Y+8, r25	; 0x08
    6260:	a9 87       	std	Y+9, r26	; 0x09
    6262:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6264:	6f 81       	ldd	r22, Y+7	; 0x07
    6266:	78 85       	ldd	r23, Y+8	; 0x08
    6268:	89 85       	ldd	r24, Y+9	; 0x09
    626a:	9a 85       	ldd	r25, Y+10	; 0x0a
    626c:	20 e0       	ldi	r18, 0x00	; 0
    626e:	30 e0       	ldi	r19, 0x00	; 0
    6270:	40 e8       	ldi	r20, 0x80	; 128
    6272:	5f e3       	ldi	r21, 0x3F	; 63
    6274:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    6278:	88 23       	and	r24, r24
    627a:	2c f4       	brge	.+10     	; 0x6286 <APP_vLocker+0x95a>
		__ticks = 1;
    627c:	81 e0       	ldi	r24, 0x01	; 1
    627e:	90 e0       	ldi	r25, 0x00	; 0
    6280:	9e 83       	std	Y+6, r25	; 0x06
    6282:	8d 83       	std	Y+5, r24	; 0x05
    6284:	3f c0       	rjmp	.+126    	; 0x6304 <APP_vLocker+0x9d8>
	else if (__tmp > 65535)
    6286:	6f 81       	ldd	r22, Y+7	; 0x07
    6288:	78 85       	ldd	r23, Y+8	; 0x08
    628a:	89 85       	ldd	r24, Y+9	; 0x09
    628c:	9a 85       	ldd	r25, Y+10	; 0x0a
    628e:	20 e0       	ldi	r18, 0x00	; 0
    6290:	3f ef       	ldi	r19, 0xFF	; 255
    6292:	4f e7       	ldi	r20, 0x7F	; 127
    6294:	57 e4       	ldi	r21, 0x47	; 71
    6296:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    629a:	18 16       	cp	r1, r24
    629c:	4c f5       	brge	.+82     	; 0x62f0 <APP_vLocker+0x9c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    629e:	6b 85       	ldd	r22, Y+11	; 0x0b
    62a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    62a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    62a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    62a6:	20 e0       	ldi	r18, 0x00	; 0
    62a8:	30 e0       	ldi	r19, 0x00	; 0
    62aa:	40 e2       	ldi	r20, 0x20	; 32
    62ac:	51 e4       	ldi	r21, 0x41	; 65
    62ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    62b2:	dc 01       	movw	r26, r24
    62b4:	cb 01       	movw	r24, r22
    62b6:	bc 01       	movw	r22, r24
    62b8:	cd 01       	movw	r24, r26
    62ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    62be:	dc 01       	movw	r26, r24
    62c0:	cb 01       	movw	r24, r22
    62c2:	9e 83       	std	Y+6, r25	; 0x06
    62c4:	8d 83       	std	Y+5, r24	; 0x05
    62c6:	0f c0       	rjmp	.+30     	; 0x62e6 <APP_vLocker+0x9ba>
    62c8:	80 e9       	ldi	r24, 0x90	; 144
    62ca:	91 e0       	ldi	r25, 0x01	; 1
    62cc:	9c 83       	std	Y+4, r25	; 0x04
    62ce:	8b 83       	std	Y+3, r24	; 0x03
    62d0:	8b 81       	ldd	r24, Y+3	; 0x03
    62d2:	9c 81       	ldd	r25, Y+4	; 0x04
    62d4:	01 97       	sbiw	r24, 0x01	; 1
    62d6:	f1 f7       	brne	.-4      	; 0x62d4 <APP_vLocker+0x9a8>
    62d8:	9c 83       	std	Y+4, r25	; 0x04
    62da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    62dc:	8d 81       	ldd	r24, Y+5	; 0x05
    62de:	9e 81       	ldd	r25, Y+6	; 0x06
    62e0:	01 97       	sbiw	r24, 0x01	; 1
    62e2:	9e 83       	std	Y+6, r25	; 0x06
    62e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    62e6:	8d 81       	ldd	r24, Y+5	; 0x05
    62e8:	9e 81       	ldd	r25, Y+6	; 0x06
    62ea:	00 97       	sbiw	r24, 0x00	; 0
    62ec:	69 f7       	brne	.-38     	; 0x62c8 <APP_vLocker+0x99c>
    62ee:	25 c0       	rjmp	.+74     	; 0x633a <APP_vLocker+0xa0e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    62f0:	6f 81       	ldd	r22, Y+7	; 0x07
    62f2:	78 85       	ldd	r23, Y+8	; 0x08
    62f4:	89 85       	ldd	r24, Y+9	; 0x09
    62f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    62f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    62fc:	dc 01       	movw	r26, r24
    62fe:	cb 01       	movw	r24, r22
    6300:	9e 83       	std	Y+6, r25	; 0x06
    6302:	8d 83       	std	Y+5, r24	; 0x05
    6304:	8d 81       	ldd	r24, Y+5	; 0x05
    6306:	9e 81       	ldd	r25, Y+6	; 0x06
    6308:	9a 83       	std	Y+2, r25	; 0x02
    630a:	89 83       	std	Y+1, r24	; 0x01
    630c:	89 81       	ldd	r24, Y+1	; 0x01
    630e:	9a 81       	ldd	r25, Y+2	; 0x02
    6310:	01 97       	sbiw	r24, 0x01	; 1
    6312:	f1 f7       	brne	.-4      	; 0x6310 <APP_vLocker+0x9e4>
    6314:	9a 83       	std	Y+2, r25	; 0x02
    6316:	89 83       	std	Y+1, r24	; 0x01
    6318:	10 c0       	rjmp	.+32     	; 0x633a <APP_vLocker+0xa0e>
		else{
			//do nothing
		}
	}
	u8 WrongPassCounter ;
	for(WrongPassCounter=0;WrongPassCounter<3;WrongPassCounter++){
    631a:	de 01       	movw	r26, r28
    631c:	a9 5b       	subi	r26, 0xB9	; 185
    631e:	bf 4f       	sbci	r27, 0xFF	; 255
    6320:	fe 01       	movw	r30, r28
    6322:	e9 5b       	subi	r30, 0xB9	; 185
    6324:	ff 4f       	sbci	r31, 0xFF	; 255
    6326:	80 81       	ld	r24, Z
    6328:	8f 5f       	subi	r24, 0xFF	; 255
    632a:	8c 93       	st	X, r24
    632c:	fe 01       	movw	r30, r28
    632e:	e9 5b       	subi	r30, 0xB9	; 185
    6330:	ff 4f       	sbci	r31, 0xFF	; 255
    6332:	80 81       	ld	r24, Z
    6334:	83 30       	cpi	r24, 0x03	; 3
    6336:	08 f4       	brcc	.+2      	; 0x633a <APP_vLocker+0xa0e>
    6338:	2b cd       	rjmp	.-1450   	; 0x5d90 <APP_vLocker+0x464>
		}
		else{
			//do nothing
		}
	}
	if(WrongPassCounter==3){
    633a:	fe 01       	movw	r30, r28
    633c:	e9 5b       	subi	r30, 0xB9	; 185
    633e:	ff 4f       	sbci	r31, 0xFF	; 255
    6340:	80 81       	ld	r24, Z
    6342:	83 30       	cpi	r24, 0x03	; 3
    6344:	09 f0       	breq	.+2      	; 0x6348 <APP_vLocker+0xa1c>
    6346:	58 c0       	rjmp	.+176    	; 0x63f8 <APP_vLocker+0xacc>
		LCD_vInit();
    6348:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <LCD_vInit>
		u8 Wrong1[]="Try latter";
    634c:	ce 01       	movw	r24, r28
    634e:	86 57       	subi	r24, 0x76	; 118
    6350:	9f 4f       	sbci	r25, 0xFF	; 255
    6352:	ce 54       	subi	r28, 0x4E	; 78
    6354:	df 4f       	sbci	r29, 0xFF	; 255
    6356:	99 83       	std	Y+1, r25	; 0x01
    6358:	88 83       	st	Y, r24
    635a:	c2 5b       	subi	r28, 0xB2	; 178
    635c:	d0 40       	sbci	r29, 0x00	; 0
    635e:	8a e9       	ldi	r24, 0x9A	; 154
    6360:	90 e0       	ldi	r25, 0x00	; 0
    6362:	cc 54       	subi	r28, 0x4C	; 76
    6364:	df 4f       	sbci	r29, 0xFF	; 255
    6366:	99 83       	std	Y+1, r25	; 0x01
    6368:	88 83       	st	Y, r24
    636a:	c4 5b       	subi	r28, 0xB4	; 180
    636c:	d0 40       	sbci	r29, 0x00	; 0
    636e:	9b e0       	ldi	r25, 0x0B	; 11
    6370:	ca 54       	subi	r28, 0x4A	; 74
    6372:	df 4f       	sbci	r29, 0xFF	; 255
    6374:	98 83       	st	Y, r25
    6376:	c6 5b       	subi	r28, 0xB6	; 182
    6378:	d0 40       	sbci	r29, 0x00	; 0
    637a:	cc 54       	subi	r28, 0x4C	; 76
    637c:	df 4f       	sbci	r29, 0xFF	; 255
    637e:	e8 81       	ld	r30, Y
    6380:	f9 81       	ldd	r31, Y+1	; 0x01
    6382:	c4 5b       	subi	r28, 0xB4	; 180
    6384:	d0 40       	sbci	r29, 0x00	; 0
    6386:	00 80       	ld	r0, Z
    6388:	cc 54       	subi	r28, 0x4C	; 76
    638a:	df 4f       	sbci	r29, 0xFF	; 255
    638c:	88 81       	ld	r24, Y
    638e:	99 81       	ldd	r25, Y+1	; 0x01
    6390:	c4 5b       	subi	r28, 0xB4	; 180
    6392:	d0 40       	sbci	r29, 0x00	; 0
    6394:	01 96       	adiw	r24, 0x01	; 1
    6396:	cc 54       	subi	r28, 0x4C	; 76
    6398:	df 4f       	sbci	r29, 0xFF	; 255
    639a:	99 83       	std	Y+1, r25	; 0x01
    639c:	88 83       	st	Y, r24
    639e:	c4 5b       	subi	r28, 0xB4	; 180
    63a0:	d0 40       	sbci	r29, 0x00	; 0
    63a2:	ce 54       	subi	r28, 0x4E	; 78
    63a4:	df 4f       	sbci	r29, 0xFF	; 255
    63a6:	e8 81       	ld	r30, Y
    63a8:	f9 81       	ldd	r31, Y+1	; 0x01
    63aa:	c2 5b       	subi	r28, 0xB2	; 178
    63ac:	d0 40       	sbci	r29, 0x00	; 0
    63ae:	00 82       	st	Z, r0
    63b0:	ce 54       	subi	r28, 0x4E	; 78
    63b2:	df 4f       	sbci	r29, 0xFF	; 255
    63b4:	88 81       	ld	r24, Y
    63b6:	99 81       	ldd	r25, Y+1	; 0x01
    63b8:	c2 5b       	subi	r28, 0xB2	; 178
    63ba:	d0 40       	sbci	r29, 0x00	; 0
    63bc:	01 96       	adiw	r24, 0x01	; 1
    63be:	ce 54       	subi	r28, 0x4E	; 78
    63c0:	df 4f       	sbci	r29, 0xFF	; 255
    63c2:	99 83       	std	Y+1, r25	; 0x01
    63c4:	88 83       	st	Y, r24
    63c6:	c2 5b       	subi	r28, 0xB2	; 178
    63c8:	d0 40       	sbci	r29, 0x00	; 0
    63ca:	ca 54       	subi	r28, 0x4A	; 74
    63cc:	df 4f       	sbci	r29, 0xFF	; 255
    63ce:	98 81       	ld	r25, Y
    63d0:	c6 5b       	subi	r28, 0xB6	; 182
    63d2:	d0 40       	sbci	r29, 0x00	; 0
    63d4:	91 50       	subi	r25, 0x01	; 1
    63d6:	ca 54       	subi	r28, 0x4A	; 74
    63d8:	df 4f       	sbci	r29, 0xFF	; 255
    63da:	98 83       	st	Y, r25
    63dc:	c6 5b       	subi	r28, 0xB6	; 182
    63de:	d0 40       	sbci	r29, 0x00	; 0
    63e0:	ca 54       	subi	r28, 0x4A	; 74
    63e2:	df 4f       	sbci	r29, 0xFF	; 255
    63e4:	e8 81       	ld	r30, Y
    63e6:	c6 5b       	subi	r28, 0xB6	; 182
    63e8:	d0 40       	sbci	r29, 0x00	; 0
    63ea:	ee 23       	and	r30, r30
    63ec:	31 f6       	brne	.-116    	; 0x637a <APP_vLocker+0xa4e>
		LCD_vWriteString(Wrong1);
    63ee:	ce 01       	movw	r24, r28
    63f0:	86 57       	subi	r24, 0x76	; 118
    63f2:	9f 4f       	sbci	r25, 0xFF	; 255
    63f4:	0e 94 31 20 	call	0x4062	; 0x4062 <LCD_vWriteString>
	}
	else{
		//do nothing
	}
}
    63f8:	ca 54       	subi	r28, 0x4A	; 74
    63fa:	df 4f       	sbci	r29, 0xFF	; 255
    63fc:	0f b6       	in	r0, 0x3f	; 63
    63fe:	f8 94       	cli
    6400:	de bf       	out	0x3e, r29	; 62
    6402:	0f be       	out	0x3f, r0	; 63
    6404:	cd bf       	out	0x3d, r28	; 61
    6406:	cf 91       	pop	r28
    6408:	df 91       	pop	r29
    640a:	1f 91       	pop	r17
    640c:	0f 91       	pop	r16
    640e:	08 95       	ret

00006410 <APP_u8compareArray>:
//----------------
u8 APP_u8compareArray(u8 *ptr1,u8 *ptr2,u8 size){
    6410:	df 93       	push	r29
    6412:	cf 93       	push	r28
    6414:	cd b7       	in	r28, 0x3d	; 61
    6416:	de b7       	in	r29, 0x3e	; 62
    6418:	27 97       	sbiw	r28, 0x07	; 7
    641a:	0f b6       	in	r0, 0x3f	; 63
    641c:	f8 94       	cli
    641e:	de bf       	out	0x3e, r29	; 62
    6420:	0f be       	out	0x3f, r0	; 63
    6422:	cd bf       	out	0x3d, r28	; 61
    6424:	9b 83       	std	Y+3, r25	; 0x03
    6426:	8a 83       	std	Y+2, r24	; 0x02
    6428:	7d 83       	std	Y+5, r23	; 0x05
    642a:	6c 83       	std	Y+4, r22	; 0x04
    642c:	4e 83       	std	Y+6, r20	; 0x06
	u8 i;
	for(i=0;i<size;i++){
    642e:	19 82       	std	Y+1, r1	; 0x01
    6430:	19 c0       	rjmp	.+50     	; 0x6464 <APP_u8compareArray+0x54>
		if(ptr1[i]!=ptr2[i])
    6432:	89 81       	ldd	r24, Y+1	; 0x01
    6434:	28 2f       	mov	r18, r24
    6436:	30 e0       	ldi	r19, 0x00	; 0
    6438:	8a 81       	ldd	r24, Y+2	; 0x02
    643a:	9b 81       	ldd	r25, Y+3	; 0x03
    643c:	fc 01       	movw	r30, r24
    643e:	e2 0f       	add	r30, r18
    6440:	f3 1f       	adc	r31, r19
    6442:	40 81       	ld	r20, Z
    6444:	89 81       	ldd	r24, Y+1	; 0x01
    6446:	28 2f       	mov	r18, r24
    6448:	30 e0       	ldi	r19, 0x00	; 0
    644a:	8c 81       	ldd	r24, Y+4	; 0x04
    644c:	9d 81       	ldd	r25, Y+5	; 0x05
    644e:	fc 01       	movw	r30, r24
    6450:	e2 0f       	add	r30, r18
    6452:	f3 1f       	adc	r31, r19
    6454:	80 81       	ld	r24, Z
    6456:	48 17       	cp	r20, r24
    6458:	11 f0       	breq	.+4      	; 0x645e <APP_u8compareArray+0x4e>
			return 0;
    645a:	1f 82       	std	Y+7, r1	; 0x07
    645c:	09 c0       	rjmp	.+18     	; 0x6470 <APP_u8compareArray+0x60>
	}
}
//----------------
u8 APP_u8compareArray(u8 *ptr1,u8 *ptr2,u8 size){
	u8 i;
	for(i=0;i<size;i++){
    645e:	89 81       	ldd	r24, Y+1	; 0x01
    6460:	8f 5f       	subi	r24, 0xFF	; 255
    6462:	89 83       	std	Y+1, r24	; 0x01
    6464:	99 81       	ldd	r25, Y+1	; 0x01
    6466:	8e 81       	ldd	r24, Y+6	; 0x06
    6468:	98 17       	cp	r25, r24
    646a:	18 f3       	brcs	.-58     	; 0x6432 <APP_u8compareArray+0x22>
		if(ptr1[i]!=ptr2[i])
			return 0;
	}
	return 1;
    646c:	81 e0       	ldi	r24, 0x01	; 1
    646e:	8f 83       	std	Y+7, r24	; 0x07
    6470:	8f 81       	ldd	r24, Y+7	; 0x07
}
    6472:	27 96       	adiw	r28, 0x07	; 7
    6474:	0f b6       	in	r0, 0x3f	; 63
    6476:	f8 94       	cli
    6478:	de bf       	out	0x3e, r29	; 62
    647a:	0f be       	out	0x3f, r0	; 63
    647c:	cd bf       	out	0x3d, r28	; 61
    647e:	cf 91       	pop	r28
    6480:	df 91       	pop	r29
    6482:	08 95       	ret

00006484 <APP_vVolumeLCD>:
//------------------------
void APP_vVolumeLCD(){
    6484:	df 93       	push	r29
    6486:	cf 93       	push	r28
    6488:	cd b7       	in	r28, 0x3d	; 61
    648a:	de b7       	in	r29, 0x3e	; 62
    648c:	a8 97       	sbiw	r28, 0x28	; 40
    648e:	0f b6       	in	r0, 0x3f	; 63
    6490:	f8 94       	cli
    6492:	de bf       	out	0x3e, r29	; 62
    6494:	0f be       	out	0x3f, r0	; 63
    6496:	cd bf       	out	0x3d, r28	; 61
	LCD_vInit();
    6498:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <LCD_vInit>
	u16 z;
	u8 counter=0,i,y;
    649c:	19 8a       	std	Y+17, r1	; 0x11
	u8 chrr[8]={0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,0x1F};
    649e:	ce 01       	movw	r24, r28
    64a0:	44 96       	adiw	r24, 0x14	; 20
    64a2:	9d a3       	std	Y+37, r25	; 0x25
    64a4:	8c a3       	std	Y+36, r24	; 0x24
    64a6:	ad eb       	ldi	r26, 0xBD	; 189
    64a8:	b0 e0       	ldi	r27, 0x00	; 0
    64aa:	bf a3       	std	Y+39, r27	; 0x27
    64ac:	ae a3       	std	Y+38, r26	; 0x26
    64ae:	b8 e0       	ldi	r27, 0x08	; 8
    64b0:	b8 a7       	std	Y+40, r27	; 0x28
    64b2:	ee a1       	ldd	r30, Y+38	; 0x26
    64b4:	ff a1       	ldd	r31, Y+39	; 0x27
    64b6:	00 80       	ld	r0, Z
    64b8:	8e a1       	ldd	r24, Y+38	; 0x26
    64ba:	9f a1       	ldd	r25, Y+39	; 0x27
    64bc:	01 96       	adiw	r24, 0x01	; 1
    64be:	9f a3       	std	Y+39, r25	; 0x27
    64c0:	8e a3       	std	Y+38, r24	; 0x26
    64c2:	ac a1       	ldd	r26, Y+36	; 0x24
    64c4:	bd a1       	ldd	r27, Y+37	; 0x25
    64c6:	0c 92       	st	X, r0
    64c8:	ec a1       	ldd	r30, Y+36	; 0x24
    64ca:	fd a1       	ldd	r31, Y+37	; 0x25
    64cc:	31 96       	adiw	r30, 0x01	; 1
    64ce:	fd a3       	std	Y+37, r31	; 0x25
    64d0:	ec a3       	std	Y+36, r30	; 0x24
    64d2:	f8 a5       	ldd	r31, Y+40	; 0x28
    64d4:	f1 50       	subi	r31, 0x01	; 1
    64d6:	f8 a7       	std	Y+40, r31	; 0x28
    64d8:	28 a5       	ldd	r18, Y+40	; 0x28
    64da:	22 23       	and	r18, r18
    64dc:	51 f7       	brne	.-44     	; 0x64b2 <APP_vVolumeLCD+0x2e>
	u8 chr0[8]={0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
    64de:	88 e0       	ldi	r24, 0x08	; 8
    64e0:	fe 01       	movw	r30, r28
    64e2:	7c 96       	adiw	r30, 0x1c	; 28
    64e4:	df 01       	movw	r26, r30
    64e6:	28 2f       	mov	r18, r24
    64e8:	1d 92       	st	X+, r1
    64ea:	2a 95       	dec	r18
    64ec:	e9 f7       	brne	.-6      	; 0x64e8 <APP_vVolumeLCD+0x64>
	LCD_vCustomCharacter(chrr,0);
    64ee:	ce 01       	movw	r24, r28
    64f0:	44 96       	adiw	r24, 0x14	; 20
    64f2:	60 e0       	ldi	r22, 0x00	; 0
    64f4:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <LCD_vCustomCharacter>
	LCD_vCustomCharacter(chr0,1);
    64f8:	ce 01       	movw	r24, r28
    64fa:	4c 96       	adiw	r24, 0x1c	; 28
    64fc:	61 e0       	ldi	r22, 0x01	; 1
    64fe:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <LCD_vCustomCharacter>
	ADC_vInit(Polling,ADC1,FreeRunningMode);
    6502:	a7 e2       	ldi	r26, 0x27	; 39
    6504:	b0 e0       	ldi	r27, 0x00	; 0
    6506:	e7 e2       	ldi	r30, 0x27	; 39
    6508:	f0 e0       	ldi	r31, 0x00	; 0
    650a:	80 81       	ld	r24, Z
    650c:	81 60       	ori	r24, 0x01	; 1
    650e:	8c 93       	st	X, r24
    6510:	8c 91       	ld	r24, X
    6512:	28 2f       	mov	r18, r24
    6514:	30 e0       	ldi	r19, 0x00	; 0
    6516:	80 e0       	ldi	r24, 0x00	; 0
    6518:	90 e0       	ldi	r25, 0x00	; 0
    651a:	b9 01       	movw	r22, r18
    651c:	41 e0       	ldi	r20, 0x01	; 1
    651e:	50 e0       	ldi	r21, 0x00	; 0
    6520:	0e 94 52 12 	call	0x24a4	; 0x24a4 <ADC_vInit>
	while(1){
		z=ADC_vGetVal(FreeRunningMode);
    6524:	81 e0       	ldi	r24, 0x01	; 1
    6526:	90 e0       	ldi	r25, 0x00	; 0
    6528:	0e 94 71 12 	call	0x24e2	; 0x24e2 <ADC_vGetVal>
    652c:	9b 8b       	std	Y+19, r25	; 0x13
    652e:	8a 8b       	std	Y+18, r24	; 0x12
    6530:	09 c0       	rjmp	.+18     	; 0x6544 <APP_vVolumeLCD+0xc0>
		while(z>311){
			z=z-311;
    6532:	8a 89       	ldd	r24, Y+18	; 0x12
    6534:	9b 89       	ldd	r25, Y+19	; 0x13
    6536:	87 53       	subi	r24, 0x37	; 55
    6538:	91 40       	sbci	r25, 0x01	; 1
    653a:	9b 8b       	std	Y+19, r25	; 0x13
    653c:	8a 8b       	std	Y+18, r24	; 0x12
			counter++;
    653e:	89 89       	ldd	r24, Y+17	; 0x11
    6540:	8f 5f       	subi	r24, 0xFF	; 255
    6542:	89 8b       	std	Y+17, r24	; 0x11
	LCD_vCustomCharacter(chrr,0);
	LCD_vCustomCharacter(chr0,1);
	ADC_vInit(Polling,ADC1,FreeRunningMode);
	while(1){
		z=ADC_vGetVal(FreeRunningMode);
		while(z>311){
    6544:	8a 89       	ldd	r24, Y+18	; 0x12
    6546:	9b 89       	ldd	r25, Y+19	; 0x13
    6548:	a1 e0       	ldi	r26, 0x01	; 1
    654a:	88 33       	cpi	r24, 0x38	; 56
    654c:	9a 07       	cpc	r25, r26
    654e:	88 f7       	brcc	.-30     	; 0x6532 <APP_vVolumeLCD+0xae>
			z=z-311;
			counter++;
		}
		for(i=0;i<counter;i++){
    6550:	18 8a       	std	Y+16, r1	; 0x10
    6552:	06 c0       	rjmp	.+12     	; 0x6560 <APP_vVolumeLCD+0xdc>
			LCD_vWriteCharacter(0);
    6554:	80 e0       	ldi	r24, 0x00	; 0
    6556:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <LCD_vWriteCharacter>
		z=ADC_vGetVal(FreeRunningMode);
		while(z>311){
			z=z-311;
			counter++;
		}
		for(i=0;i<counter;i++){
    655a:	88 89       	ldd	r24, Y+16	; 0x10
    655c:	8f 5f       	subi	r24, 0xFF	; 255
    655e:	88 8b       	std	Y+16, r24	; 0x10
    6560:	98 89       	ldd	r25, Y+16	; 0x10
    6562:	89 89       	ldd	r24, Y+17	; 0x11
    6564:	98 17       	cp	r25, r24
    6566:	b0 f3       	brcs	.-20     	; 0x6554 <APP_vVolumeLCD+0xd0>
			LCD_vWriteCharacter(0);
		}
		for(i=y;i>counter;i--){
    6568:	8f 85       	ldd	r24, Y+15	; 0x0f
    656a:	88 8b       	std	Y+16, r24	; 0x10
    656c:	0a c0       	rjmp	.+20     	; 0x6582 <APP_vVolumeLCD+0xfe>
			LCD_vGoTo(LineOne,i);
    656e:	80 e8       	ldi	r24, 0x80	; 128
    6570:	68 89       	ldd	r22, Y+16	; 0x10
    6572:	0e 94 98 1f 	call	0x3f30	; 0x3f30 <LCD_vGoTo>
			LCD_vWriteCharacter(1);
    6576:	81 e0       	ldi	r24, 0x01	; 1
    6578:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <LCD_vWriteCharacter>
			counter++;
		}
		for(i=0;i<counter;i++){
			LCD_vWriteCharacter(0);
		}
		for(i=y;i>counter;i--){
    657c:	88 89       	ldd	r24, Y+16	; 0x10
    657e:	81 50       	subi	r24, 0x01	; 1
    6580:	88 8b       	std	Y+16, r24	; 0x10
    6582:	98 89       	ldd	r25, Y+16	; 0x10
    6584:	89 89       	ldd	r24, Y+17	; 0x11
    6586:	89 17       	cp	r24, r25
    6588:	90 f3       	brcs	.-28     	; 0x656e <APP_vVolumeLCD+0xea>
			LCD_vGoTo(LineOne,i);
			LCD_vWriteCharacter(1);
		}
		y=counter;
    658a:	89 89       	ldd	r24, Y+17	; 0x11
    658c:	8f 87       	std	Y+15, r24	; 0x0f
		if(counter==16){
    658e:	89 89       	ldd	r24, Y+17	; 0x11
    6590:	80 31       	cpi	r24, 0x10	; 16
    6592:	09 f0       	breq	.+2      	; 0x6596 <APP_vVolumeLCD+0x112>
    6594:	76 c0       	rjmp	.+236    	; 0x6682 <APP_vVolumeLCD+0x1fe>
			LedAndBuzzer_vBuzzerOpen();
    6596:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <LedAndBuzzer_vBuzzerOpen>
    659a:	80 e0       	ldi	r24, 0x00	; 0
    659c:	90 e0       	ldi	r25, 0x00	; 0
    659e:	aa e7       	ldi	r26, 0x7A	; 122
    65a0:	b3 e4       	ldi	r27, 0x43	; 67
    65a2:	8b 87       	std	Y+11, r24	; 0x0b
    65a4:	9c 87       	std	Y+12, r25	; 0x0c
    65a6:	ad 87       	std	Y+13, r26	; 0x0d
    65a8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    65aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    65ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    65ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    65b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    65b2:	20 e0       	ldi	r18, 0x00	; 0
    65b4:	30 e0       	ldi	r19, 0x00	; 0
    65b6:	4a e7       	ldi	r20, 0x7A	; 122
    65b8:	55 e4       	ldi	r21, 0x45	; 69
    65ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    65be:	dc 01       	movw	r26, r24
    65c0:	cb 01       	movw	r24, r22
    65c2:	8f 83       	std	Y+7, r24	; 0x07
    65c4:	98 87       	std	Y+8, r25	; 0x08
    65c6:	a9 87       	std	Y+9, r26	; 0x09
    65c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    65ca:	6f 81       	ldd	r22, Y+7	; 0x07
    65cc:	78 85       	ldd	r23, Y+8	; 0x08
    65ce:	89 85       	ldd	r24, Y+9	; 0x09
    65d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    65d2:	20 e0       	ldi	r18, 0x00	; 0
    65d4:	30 e0       	ldi	r19, 0x00	; 0
    65d6:	40 e8       	ldi	r20, 0x80	; 128
    65d8:	5f e3       	ldi	r21, 0x3F	; 63
    65da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    65de:	88 23       	and	r24, r24
    65e0:	2c f4       	brge	.+10     	; 0x65ec <APP_vVolumeLCD+0x168>
		__ticks = 1;
    65e2:	81 e0       	ldi	r24, 0x01	; 1
    65e4:	90 e0       	ldi	r25, 0x00	; 0
    65e6:	9e 83       	std	Y+6, r25	; 0x06
    65e8:	8d 83       	std	Y+5, r24	; 0x05
    65ea:	3f c0       	rjmp	.+126    	; 0x666a <APP_vVolumeLCD+0x1e6>
	else if (__tmp > 65535)
    65ec:	6f 81       	ldd	r22, Y+7	; 0x07
    65ee:	78 85       	ldd	r23, Y+8	; 0x08
    65f0:	89 85       	ldd	r24, Y+9	; 0x09
    65f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    65f4:	20 e0       	ldi	r18, 0x00	; 0
    65f6:	3f ef       	ldi	r19, 0xFF	; 255
    65f8:	4f e7       	ldi	r20, 0x7F	; 127
    65fa:	57 e4       	ldi	r21, 0x47	; 71
    65fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    6600:	18 16       	cp	r1, r24
    6602:	4c f5       	brge	.+82     	; 0x6656 <APP_vVolumeLCD+0x1d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6604:	6b 85       	ldd	r22, Y+11	; 0x0b
    6606:	7c 85       	ldd	r23, Y+12	; 0x0c
    6608:	8d 85       	ldd	r24, Y+13	; 0x0d
    660a:	9e 85       	ldd	r25, Y+14	; 0x0e
    660c:	20 e0       	ldi	r18, 0x00	; 0
    660e:	30 e0       	ldi	r19, 0x00	; 0
    6610:	40 e2       	ldi	r20, 0x20	; 32
    6612:	51 e4       	ldi	r21, 0x41	; 65
    6614:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6618:	dc 01       	movw	r26, r24
    661a:	cb 01       	movw	r24, r22
    661c:	bc 01       	movw	r22, r24
    661e:	cd 01       	movw	r24, r26
    6620:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6624:	dc 01       	movw	r26, r24
    6626:	cb 01       	movw	r24, r22
    6628:	9e 83       	std	Y+6, r25	; 0x06
    662a:	8d 83       	std	Y+5, r24	; 0x05
    662c:	0f c0       	rjmp	.+30     	; 0x664c <APP_vVolumeLCD+0x1c8>
    662e:	80 e9       	ldi	r24, 0x90	; 144
    6630:	91 e0       	ldi	r25, 0x01	; 1
    6632:	9c 83       	std	Y+4, r25	; 0x04
    6634:	8b 83       	std	Y+3, r24	; 0x03
    6636:	8b 81       	ldd	r24, Y+3	; 0x03
    6638:	9c 81       	ldd	r25, Y+4	; 0x04
    663a:	01 97       	sbiw	r24, 0x01	; 1
    663c:	f1 f7       	brne	.-4      	; 0x663a <APP_vVolumeLCD+0x1b6>
    663e:	9c 83       	std	Y+4, r25	; 0x04
    6640:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6642:	8d 81       	ldd	r24, Y+5	; 0x05
    6644:	9e 81       	ldd	r25, Y+6	; 0x06
    6646:	01 97       	sbiw	r24, 0x01	; 1
    6648:	9e 83       	std	Y+6, r25	; 0x06
    664a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    664c:	8d 81       	ldd	r24, Y+5	; 0x05
    664e:	9e 81       	ldd	r25, Y+6	; 0x06
    6650:	00 97       	sbiw	r24, 0x00	; 0
    6652:	69 f7       	brne	.-38     	; 0x662e <APP_vVolumeLCD+0x1aa>
    6654:	14 c0       	rjmp	.+40     	; 0x667e <APP_vVolumeLCD+0x1fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6656:	6f 81       	ldd	r22, Y+7	; 0x07
    6658:	78 85       	ldd	r23, Y+8	; 0x08
    665a:	89 85       	ldd	r24, Y+9	; 0x09
    665c:	9a 85       	ldd	r25, Y+10	; 0x0a
    665e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6662:	dc 01       	movw	r26, r24
    6664:	cb 01       	movw	r24, r22
    6666:	9e 83       	std	Y+6, r25	; 0x06
    6668:	8d 83       	std	Y+5, r24	; 0x05
    666a:	8d 81       	ldd	r24, Y+5	; 0x05
    666c:	9e 81       	ldd	r25, Y+6	; 0x06
    666e:	9a 83       	std	Y+2, r25	; 0x02
    6670:	89 83       	std	Y+1, r24	; 0x01
    6672:	89 81       	ldd	r24, Y+1	; 0x01
    6674:	9a 81       	ldd	r25, Y+2	; 0x02
    6676:	01 97       	sbiw	r24, 0x01	; 1
    6678:	f1 f7       	brne	.-4      	; 0x6676 <APP_vVolumeLCD+0x1f2>
    667a:	9a 83       	std	Y+2, r25	; 0x02
    667c:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(250);
			LedAndBuzzer_vBuzzerClose();
    667e:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <LedAndBuzzer_vBuzzerClose>
		}
		LCD_vGoTo(LineOne,0);
    6682:	80 e8       	ldi	r24, 0x80	; 128
    6684:	60 e0       	ldi	r22, 0x00	; 0
    6686:	0e 94 98 1f 	call	0x3f30	; 0x3f30 <LCD_vGoTo>
		counter=0;
    668a:	19 8a       	std	Y+17, r1	; 0x11
    668c:	4b cf       	rjmp	.-362    	; 0x6524 <APP_vVolumeLCD+0xa0>

0000668e <APP_vVolumeVerticalLCD>:
	}
}
//-
void APP_vVolumeVerticalLCD(){
    668e:	df 93       	push	r29
    6690:	cf 93       	push	r28
    6692:	cd b7       	in	r28, 0x3d	; 61
    6694:	de b7       	in	r29, 0x3e	; 62
    6696:	c4 55       	subi	r28, 0x54	; 84
    6698:	d0 40       	sbci	r29, 0x00	; 0
    669a:	0f b6       	in	r0, 0x3f	; 63
    669c:	f8 94       	cli
    669e:	de bf       	out	0x3e, r29	; 62
    66a0:	0f be       	out	0x3f, r0	; 63
    66a2:	cd bf       	out	0x3d, r28	; 61
	LCD_vInit();
    66a4:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <LCD_vInit>
	ADC_vInit();
    66a8:	0e 94 52 12 	call	0x24a4	; 0x24a4 <ADC_vInit>
	s16 z;
	s8 counter=0,i,j,y=0;
    66ac:	1a 8a       	std	Y+18, r1	; 0x12
    66ae:	1f 86       	std	Y+15, r1	; 0x0f
	u8 arr1[8][8];
	for(i=0;i<8;i++){
    66b0:	19 8a       	std	Y+17, r1	; 0x11
    66b2:	5d c0       	rjmp	.+186    	; 0x676e <APP_vVolumeVerticalLCD+0xe0>
		for(j=i;j<8;j++){
    66b4:	89 89       	ldd	r24, Y+17	; 0x11
    66b6:	88 8b       	std	Y+16, r24	; 0x10
    66b8:	1e c0       	rjmp	.+60     	; 0x66f6 <APP_vVolumeVerticalLCD+0x68>
			arr1[i][7-j]=0x00;
    66ba:	89 89       	ldd	r24, Y+17	; 0x11
    66bc:	68 2f       	mov	r22, r24
    66be:	70 e0       	ldi	r23, 0x00	; 0
    66c0:	88 89       	ldd	r24, Y+16	; 0x10
    66c2:	28 2f       	mov	r18, r24
    66c4:	30 e0       	ldi	r19, 0x00	; 0
    66c6:	87 e0       	ldi	r24, 0x07	; 7
    66c8:	90 e0       	ldi	r25, 0x00	; 0
    66ca:	ac 01       	movw	r20, r24
    66cc:	42 1b       	sub	r20, r18
    66ce:	53 0b       	sbc	r21, r19
    66d0:	9b 01       	movw	r18, r22
    66d2:	22 0f       	add	r18, r18
    66d4:	33 1f       	adc	r19, r19
    66d6:	22 0f       	add	r18, r18
    66d8:	33 1f       	adc	r19, r19
    66da:	22 0f       	add	r18, r18
    66dc:	33 1f       	adc	r19, r19
    66de:	ce 01       	movw	r24, r28
    66e0:	01 96       	adiw	r24, 0x01	; 1
    66e2:	82 0f       	add	r24, r18
    66e4:	93 1f       	adc	r25, r19
    66e6:	84 0f       	add	r24, r20
    66e8:	95 1f       	adc	r25, r21
    66ea:	fc 01       	movw	r30, r24
    66ec:	74 96       	adiw	r30, 0x14	; 20
    66ee:	10 82       	st	Z, r1
	ADC_vInit();
	s16 z;
	s8 counter=0,i,j,y=0;
	u8 arr1[8][8];
	for(i=0;i<8;i++){
		for(j=i;j<8;j++){
    66f0:	88 89       	ldd	r24, Y+16	; 0x10
    66f2:	8f 5f       	subi	r24, 0xFF	; 255
    66f4:	88 8b       	std	Y+16, r24	; 0x10
    66f6:	88 89       	ldd	r24, Y+16	; 0x10
    66f8:	88 30       	cpi	r24, 0x08	; 8
    66fa:	f8 f2       	brcs	.-66     	; 0x66ba <APP_vVolumeVerticalLCD+0x2c>
			arr1[i][7-j]=0x00;
		}
		for(j=0;j<=i;j++){
    66fc:	18 8a       	std	Y+16, r1	; 0x10
    66fe:	1f c0       	rjmp	.+62     	; 0x673e <APP_vVolumeVerticalLCD+0xb0>
			arr1[i][7-j]=0x1F;
    6700:	89 89       	ldd	r24, Y+17	; 0x11
    6702:	68 2f       	mov	r22, r24
    6704:	70 e0       	ldi	r23, 0x00	; 0
    6706:	88 89       	ldd	r24, Y+16	; 0x10
    6708:	28 2f       	mov	r18, r24
    670a:	30 e0       	ldi	r19, 0x00	; 0
    670c:	87 e0       	ldi	r24, 0x07	; 7
    670e:	90 e0       	ldi	r25, 0x00	; 0
    6710:	ac 01       	movw	r20, r24
    6712:	42 1b       	sub	r20, r18
    6714:	53 0b       	sbc	r21, r19
    6716:	9b 01       	movw	r18, r22
    6718:	22 0f       	add	r18, r18
    671a:	33 1f       	adc	r19, r19
    671c:	22 0f       	add	r18, r18
    671e:	33 1f       	adc	r19, r19
    6720:	22 0f       	add	r18, r18
    6722:	33 1f       	adc	r19, r19
    6724:	ce 01       	movw	r24, r28
    6726:	01 96       	adiw	r24, 0x01	; 1
    6728:	82 0f       	add	r24, r18
    672a:	93 1f       	adc	r25, r19
    672c:	84 0f       	add	r24, r20
    672e:	95 1f       	adc	r25, r21
    6730:	fc 01       	movw	r30, r24
    6732:	74 96       	adiw	r30, 0x14	; 20
    6734:	8f e1       	ldi	r24, 0x1F	; 31
    6736:	80 83       	st	Z, r24
	u8 arr1[8][8];
	for(i=0;i<8;i++){
		for(j=i;j<8;j++){
			arr1[i][7-j]=0x00;
		}
		for(j=0;j<=i;j++){
    6738:	88 89       	ldd	r24, Y+16	; 0x10
    673a:	8f 5f       	subi	r24, 0xFF	; 255
    673c:	88 8b       	std	Y+16, r24	; 0x10
    673e:	98 89       	ldd	r25, Y+16	; 0x10
    6740:	89 89       	ldd	r24, Y+17	; 0x11
    6742:	89 17       	cp	r24, r25
    6744:	e8 f6       	brcc	.-70     	; 0x6700 <APP_vVolumeVerticalLCD+0x72>
			arr1[i][7-j]=0x1F;
		}
		LCD_vCustomCharacter(arr1[i],i);
    6746:	9e 01       	movw	r18, r28
    6748:	2b 5e       	subi	r18, 0xEB	; 235
    674a:	3f 4f       	sbci	r19, 0xFF	; 255
    674c:	89 89       	ldd	r24, Y+17	; 0x11
    674e:	88 2f       	mov	r24, r24
    6750:	90 e0       	ldi	r25, 0x00	; 0
    6752:	88 0f       	add	r24, r24
    6754:	99 1f       	adc	r25, r25
    6756:	88 0f       	add	r24, r24
    6758:	99 1f       	adc	r25, r25
    675a:	88 0f       	add	r24, r24
    675c:	99 1f       	adc	r25, r25
    675e:	82 0f       	add	r24, r18
    6760:	93 1f       	adc	r25, r19
    6762:	69 89       	ldd	r22, Y+17	; 0x11
    6764:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <LCD_vCustomCharacter>
	LCD_vInit();
	ADC_vInit();
	s16 z;
	s8 counter=0,i,j,y=0;
	u8 arr1[8][8];
	for(i=0;i<8;i++){
    6768:	89 89       	ldd	r24, Y+17	; 0x11
    676a:	8f 5f       	subi	r24, 0xFF	; 255
    676c:	89 8b       	std	Y+17, r24	; 0x11
    676e:	89 89       	ldd	r24, Y+17	; 0x11
    6770:	88 30       	cpi	r24, 0x08	; 8
    6772:	08 f4       	brcc	.+2      	; 0x6776 <APP_vVolumeVerticalLCD+0xe8>
    6774:	9f cf       	rjmp	.-194    	; 0x66b4 <APP_vVolumeVerticalLCD+0x26>
			arr1[i][7-j]=0x1F;
		}
		LCD_vCustomCharacter(arr1[i],i);
	}
	while(1){
		z=ADC_vGetVal();
    6776:	0e 94 71 12 	call	0x24e2	; 0x24e2 <ADC_vGetVal>
    677a:	9c 8b       	std	Y+20, r25	; 0x14
    677c:	8b 8b       	std	Y+19, r24	; 0x13
    677e:	09 c0       	rjmp	.+18     	; 0x6792 <APP_vVolumeVerticalLCD+0x104>
		while(z>611){
			z=z-611;
    6780:	8b 89       	ldd	r24, Y+19	; 0x13
    6782:	9c 89       	ldd	r25, Y+20	; 0x14
    6784:	83 56       	subi	r24, 0x63	; 99
    6786:	92 40       	sbci	r25, 0x02	; 2
    6788:	9c 8b       	std	Y+20, r25	; 0x14
    678a:	8b 8b       	std	Y+19, r24	; 0x13
			counter++;
    678c:	8a 89       	ldd	r24, Y+18	; 0x12
    678e:	8f 5f       	subi	r24, 0xFF	; 255
    6790:	8a 8b       	std	Y+18, r24	; 0x12
		}
		LCD_vCustomCharacter(arr1[i],i);
	}
	while(1){
		z=ADC_vGetVal();
		while(z>611){
    6792:	8b 89       	ldd	r24, Y+19	; 0x13
    6794:	9c 89       	ldd	r25, Y+20	; 0x14
    6796:	22 e0       	ldi	r18, 0x02	; 2
    6798:	84 36       	cpi	r24, 0x64	; 100
    679a:	92 07       	cpc	r25, r18
    679c:	8c f7       	brge	.-30     	; 0x6780 <APP_vVolumeVerticalLCD+0xf2>
			z=z-611;
			counter++;
		}
		for(i=y;i<counter;i++){
    679e:	8f 85       	ldd	r24, Y+15	; 0x0f
    67a0:	89 8b       	std	Y+17, r24	; 0x11
    67a2:	0a c0       	rjmp	.+20     	; 0x67b8 <APP_vVolumeVerticalLCD+0x12a>
			LCD_vGoTo(LineOne,i);
    67a4:	80 e8       	ldi	r24, 0x80	; 128
    67a6:	69 89       	ldd	r22, Y+17	; 0x11
    67a8:	0e 94 98 1f 	call	0x3f30	; 0x3f30 <LCD_vGoTo>
			LCD_vWriteCharacter(i);
    67ac:	89 89       	ldd	r24, Y+17	; 0x11
    67ae:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <LCD_vWriteCharacter>
		z=ADC_vGetVal();
		while(z>611){
			z=z-611;
			counter++;
		}
		for(i=y;i<counter;i++){
    67b2:	89 89       	ldd	r24, Y+17	; 0x11
    67b4:	8f 5f       	subi	r24, 0xFF	; 255
    67b6:	89 8b       	std	Y+17, r24	; 0x11
    67b8:	99 89       	ldd	r25, Y+17	; 0x11
    67ba:	8a 89       	ldd	r24, Y+18	; 0x12
    67bc:	98 17       	cp	r25, r24
    67be:	90 f3       	brcs	.-28     	; 0x67a4 <APP_vVolumeVerticalLCD+0x116>
			LCD_vGoTo(LineOne,i);
			LCD_vWriteCharacter(i);
		}
		for(i=y;i>counter;i--){
    67c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    67c2:	89 8b       	std	Y+17, r24	; 0x11
    67c4:	0a c0       	rjmp	.+20     	; 0x67da <APP_vVolumeVerticalLCD+0x14c>
			LCD_vGoTo(LineOne,i);
    67c6:	80 e8       	ldi	r24, 0x80	; 128
    67c8:	69 89       	ldd	r22, Y+17	; 0x11
    67ca:	0e 94 98 1f 	call	0x3f30	; 0x3f30 <LCD_vGoTo>
			LCD_vWriteCharacter(0);
    67ce:	80 e0       	ldi	r24, 0x00	; 0
    67d0:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <LCD_vWriteCharacter>
		}
		for(i=y;i<counter;i++){
			LCD_vGoTo(LineOne,i);
			LCD_vWriteCharacter(i);
		}
		for(i=y;i>counter;i--){
    67d4:	89 89       	ldd	r24, Y+17	; 0x11
    67d6:	81 50       	subi	r24, 0x01	; 1
    67d8:	89 8b       	std	Y+17, r24	; 0x11
    67da:	99 89       	ldd	r25, Y+17	; 0x11
    67dc:	8a 89       	ldd	r24, Y+18	; 0x12
    67de:	89 17       	cp	r24, r25
    67e0:	90 f3       	brcs	.-28     	; 0x67c6 <APP_vVolumeVerticalLCD+0x138>
			LCD_vGoTo(LineOne,i);
			LCD_vWriteCharacter(0);
		}
		y=counter;
    67e2:	8a 89       	ldd	r24, Y+18	; 0x12
    67e4:	8f 87       	std	Y+15, r24	; 0x0f
		if(counter==8){
    67e6:	8a 89       	ldd	r24, Y+18	; 0x12
    67e8:	88 30       	cpi	r24, 0x08	; 8
    67ea:	09 f0       	breq	.+2      	; 0x67ee <APP_vVolumeVerticalLCD+0x160>
    67ec:	76 c0       	rjmp	.+236    	; 0x68da <APP_vVolumeVerticalLCD+0x24c>
			LedAndBuzzer_vBuzzerOpen();
    67ee:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <LedAndBuzzer_vBuzzerOpen>
    67f2:	80 e0       	ldi	r24, 0x00	; 0
    67f4:	90 e0       	ldi	r25, 0x00	; 0
    67f6:	aa e7       	ldi	r26, 0x7A	; 122
    67f8:	b3 e4       	ldi	r27, 0x43	; 67
    67fa:	8b 87       	std	Y+11, r24	; 0x0b
    67fc:	9c 87       	std	Y+12, r25	; 0x0c
    67fe:	ad 87       	std	Y+13, r26	; 0x0d
    6800:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6802:	6b 85       	ldd	r22, Y+11	; 0x0b
    6804:	7c 85       	ldd	r23, Y+12	; 0x0c
    6806:	8d 85       	ldd	r24, Y+13	; 0x0d
    6808:	9e 85       	ldd	r25, Y+14	; 0x0e
    680a:	20 e0       	ldi	r18, 0x00	; 0
    680c:	30 e0       	ldi	r19, 0x00	; 0
    680e:	4a e7       	ldi	r20, 0x7A	; 122
    6810:	55 e4       	ldi	r21, 0x45	; 69
    6812:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6816:	dc 01       	movw	r26, r24
    6818:	cb 01       	movw	r24, r22
    681a:	8f 83       	std	Y+7, r24	; 0x07
    681c:	98 87       	std	Y+8, r25	; 0x08
    681e:	a9 87       	std	Y+9, r26	; 0x09
    6820:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6822:	6f 81       	ldd	r22, Y+7	; 0x07
    6824:	78 85       	ldd	r23, Y+8	; 0x08
    6826:	89 85       	ldd	r24, Y+9	; 0x09
    6828:	9a 85       	ldd	r25, Y+10	; 0x0a
    682a:	20 e0       	ldi	r18, 0x00	; 0
    682c:	30 e0       	ldi	r19, 0x00	; 0
    682e:	40 e8       	ldi	r20, 0x80	; 128
    6830:	5f e3       	ldi	r21, 0x3F	; 63
    6832:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    6836:	88 23       	and	r24, r24
    6838:	2c f4       	brge	.+10     	; 0x6844 <APP_vVolumeVerticalLCD+0x1b6>
		__ticks = 1;
    683a:	81 e0       	ldi	r24, 0x01	; 1
    683c:	90 e0       	ldi	r25, 0x00	; 0
    683e:	9e 83       	std	Y+6, r25	; 0x06
    6840:	8d 83       	std	Y+5, r24	; 0x05
    6842:	3f c0       	rjmp	.+126    	; 0x68c2 <APP_vVolumeVerticalLCD+0x234>
	else if (__tmp > 65535)
    6844:	6f 81       	ldd	r22, Y+7	; 0x07
    6846:	78 85       	ldd	r23, Y+8	; 0x08
    6848:	89 85       	ldd	r24, Y+9	; 0x09
    684a:	9a 85       	ldd	r25, Y+10	; 0x0a
    684c:	20 e0       	ldi	r18, 0x00	; 0
    684e:	3f ef       	ldi	r19, 0xFF	; 255
    6850:	4f e7       	ldi	r20, 0x7F	; 127
    6852:	57 e4       	ldi	r21, 0x47	; 71
    6854:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    6858:	18 16       	cp	r1, r24
    685a:	4c f5       	brge	.+82     	; 0x68ae <APP_vVolumeVerticalLCD+0x220>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    685c:	6b 85       	ldd	r22, Y+11	; 0x0b
    685e:	7c 85       	ldd	r23, Y+12	; 0x0c
    6860:	8d 85       	ldd	r24, Y+13	; 0x0d
    6862:	9e 85       	ldd	r25, Y+14	; 0x0e
    6864:	20 e0       	ldi	r18, 0x00	; 0
    6866:	30 e0       	ldi	r19, 0x00	; 0
    6868:	40 e2       	ldi	r20, 0x20	; 32
    686a:	51 e4       	ldi	r21, 0x41	; 65
    686c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6870:	dc 01       	movw	r26, r24
    6872:	cb 01       	movw	r24, r22
    6874:	bc 01       	movw	r22, r24
    6876:	cd 01       	movw	r24, r26
    6878:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    687c:	dc 01       	movw	r26, r24
    687e:	cb 01       	movw	r24, r22
    6880:	9e 83       	std	Y+6, r25	; 0x06
    6882:	8d 83       	std	Y+5, r24	; 0x05
    6884:	0f c0       	rjmp	.+30     	; 0x68a4 <APP_vVolumeVerticalLCD+0x216>
    6886:	80 e9       	ldi	r24, 0x90	; 144
    6888:	91 e0       	ldi	r25, 0x01	; 1
    688a:	9c 83       	std	Y+4, r25	; 0x04
    688c:	8b 83       	std	Y+3, r24	; 0x03
    688e:	8b 81       	ldd	r24, Y+3	; 0x03
    6890:	9c 81       	ldd	r25, Y+4	; 0x04
    6892:	01 97       	sbiw	r24, 0x01	; 1
    6894:	f1 f7       	brne	.-4      	; 0x6892 <APP_vVolumeVerticalLCD+0x204>
    6896:	9c 83       	std	Y+4, r25	; 0x04
    6898:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    689a:	8d 81       	ldd	r24, Y+5	; 0x05
    689c:	9e 81       	ldd	r25, Y+6	; 0x06
    689e:	01 97       	sbiw	r24, 0x01	; 1
    68a0:	9e 83       	std	Y+6, r25	; 0x06
    68a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    68a4:	8d 81       	ldd	r24, Y+5	; 0x05
    68a6:	9e 81       	ldd	r25, Y+6	; 0x06
    68a8:	00 97       	sbiw	r24, 0x00	; 0
    68aa:	69 f7       	brne	.-38     	; 0x6886 <APP_vVolumeVerticalLCD+0x1f8>
    68ac:	14 c0       	rjmp	.+40     	; 0x68d6 <APP_vVolumeVerticalLCD+0x248>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    68ae:	6f 81       	ldd	r22, Y+7	; 0x07
    68b0:	78 85       	ldd	r23, Y+8	; 0x08
    68b2:	89 85       	ldd	r24, Y+9	; 0x09
    68b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    68b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    68ba:	dc 01       	movw	r26, r24
    68bc:	cb 01       	movw	r24, r22
    68be:	9e 83       	std	Y+6, r25	; 0x06
    68c0:	8d 83       	std	Y+5, r24	; 0x05
    68c2:	8d 81       	ldd	r24, Y+5	; 0x05
    68c4:	9e 81       	ldd	r25, Y+6	; 0x06
    68c6:	9a 83       	std	Y+2, r25	; 0x02
    68c8:	89 83       	std	Y+1, r24	; 0x01
    68ca:	89 81       	ldd	r24, Y+1	; 0x01
    68cc:	9a 81       	ldd	r25, Y+2	; 0x02
    68ce:	01 97       	sbiw	r24, 0x01	; 1
    68d0:	f1 f7       	brne	.-4      	; 0x68ce <APP_vVolumeVerticalLCD+0x240>
    68d2:	9a 83       	std	Y+2, r25	; 0x02
    68d4:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(250);
			LedAndBuzzer_vBuzzerClose();
    68d6:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <LedAndBuzzer_vBuzzerClose>
		}

		counter=0;
    68da:	1a 8a       	std	Y+18, r1	; 0x12
    68dc:	4c cf       	rjmp	.-360    	; 0x6776 <APP_vVolumeVerticalLCD+0xe8>

000068de <main>:
/*void TEST();
u16 z;
u8 arr[6];*/
/*void Test2();
u16 counter=0;*/
int main(void){
    68de:	df 93       	push	r29
    68e0:	cf 93       	push	r28
    68e2:	cd b7       	in	r28, 0x3d	; 61
    68e4:	de b7       	in	r29, 0x3e	; 62

	while(1){
		while((GET_BIT(TWCR,7) !=0));
    68e6:	e6 e5       	ldi	r30, 0x56	; 86
    68e8:	f0 e0       	ldi	r31, 0x00	; 0
    68ea:	80 81       	ld	r24, Z
    68ec:	88 23       	and	r24, r24
    68ee:	dc f3       	brlt	.-10     	; 0x68e6 <main+0x8>
		SET_BIT(TWCR,2);
    68f0:	a6 e5       	ldi	r26, 0x56	; 86
    68f2:	b0 e0       	ldi	r27, 0x00	; 0
    68f4:	e6 e5       	ldi	r30, 0x56	; 86
    68f6:	f0 e0       	ldi	r31, 0x00	; 0
    68f8:	80 81       	ld	r24, Z
    68fa:	84 60       	ori	r24, 0x04	; 4
    68fc:	8c 93       	st	X, r24

		SET_BIT(TWCR,5);
    68fe:	a6 e5       	ldi	r26, 0x56	; 86
    6900:	b0 e0       	ldi	r27, 0x00	; 0
    6902:	e6 e5       	ldi	r30, 0x56	; 86
    6904:	f0 e0       	ldi	r31, 0x00	; 0
    6906:	80 81       	ld	r24, Z
    6908:	80 62       	ori	r24, 0x20	; 32
    690a:	8c 93       	st	X, r24
		CLR_BIT(TWCR,7);
    690c:	a6 e5       	ldi	r26, 0x56	; 86
    690e:	b0 e0       	ldi	r27, 0x00	; 0
    6910:	e6 e5       	ldi	r30, 0x56	; 86
    6912:	f0 e0       	ldi	r31, 0x00	; 0
    6914:	80 81       	ld	r24, Z
    6916:	8f 77       	andi	r24, 0x7F	; 127
    6918:	8c 93       	st	X, r24
		while((GET_BIT(TWCR,7) !=0));
    691a:	e6 e5       	ldi	r30, 0x56	; 86
    691c:	f0 e0       	ldi	r31, 0x00	; 0
    691e:	80 81       	ld	r24, Z
    6920:	88 23       	and	r24, r24
    6922:	dc f3       	brlt	.-10     	; 0x691a <main+0x3c>
		SET_BIT(TWCR,2);
    6924:	a6 e5       	ldi	r26, 0x56	; 86
    6926:	b0 e0       	ldi	r27, 0x00	; 0
    6928:	e6 e5       	ldi	r30, 0x56	; 86
    692a:	f0 e0       	ldi	r31, 0x00	; 0
    692c:	80 81       	ld	r24, Z
    692e:	84 60       	ori	r24, 0x04	; 4
    6930:	8c 93       	st	X, r24

		TWDR=0b00000010; //frist bit is for read or write
    6932:	e3 e2       	ldi	r30, 0x23	; 35
    6934:	f0 e0       	ldi	r31, 0x00	; 0
    6936:	82 e0       	ldi	r24, 0x02	; 2
    6938:	80 83       	st	Z, r24
		CLR_BIT(TWCR,7);
    693a:	a6 e5       	ldi	r26, 0x56	; 86
    693c:	b0 e0       	ldi	r27, 0x00	; 0
    693e:	e6 e5       	ldi	r30, 0x56	; 86
    6940:	f0 e0       	ldi	r31, 0x00	; 0
    6942:	80 81       	ld	r24, Z
    6944:	8f 77       	andi	r24, 0x7F	; 127
    6946:	8c 93       	st	X, r24
		while((GET_BIT(TWCR,7) !=0));
    6948:	e6 e5       	ldi	r30, 0x56	; 86
    694a:	f0 e0       	ldi	r31, 0x00	; 0
    694c:	80 81       	ld	r24, Z
    694e:	88 23       	and	r24, r24
    6950:	dc f3       	brlt	.-10     	; 0x6948 <main+0x6a>
		SET_BIT(TWCR,2);
    6952:	a6 e5       	ldi	r26, 0x56	; 86
    6954:	b0 e0       	ldi	r27, 0x00	; 0
    6956:	e6 e5       	ldi	r30, 0x56	; 86
    6958:	f0 e0       	ldi	r31, 0x00	; 0
    695a:	80 81       	ld	r24, Z
    695c:	84 60       	ori	r24, 0x04	; 4
    695e:	8c 93       	st	X, r24

		TWDR='A';
    6960:	e3 e2       	ldi	r30, 0x23	; 35
    6962:	f0 e0       	ldi	r31, 0x00	; 0
    6964:	81 e4       	ldi	r24, 0x41	; 65
    6966:	80 83       	st	Z, r24
		CLR_BIT(TWCR,7);
    6968:	a6 e5       	ldi	r26, 0x56	; 86
    696a:	b0 e0       	ldi	r27, 0x00	; 0
    696c:	e6 e5       	ldi	r30, 0x56	; 86
    696e:	f0 e0       	ldi	r31, 0x00	; 0
    6970:	80 81       	ld	r24, Z
    6972:	8f 77       	andi	r24, 0x7F	; 127
    6974:	8c 93       	st	X, r24
		while((GET_BIT(TWCR,7) !=0));
    6976:	e6 e5       	ldi	r30, 0x56	; 86
    6978:	f0 e0       	ldi	r31, 0x00	; 0
    697a:	80 81       	ld	r24, Z
    697c:	88 23       	and	r24, r24
    697e:	dc f3       	brlt	.-10     	; 0x6976 <main+0x98>
		SET_BIT(TWCR,2);
    6980:	a6 e5       	ldi	r26, 0x56	; 86
    6982:	b0 e0       	ldi	r27, 0x00	; 0
    6984:	e6 e5       	ldi	r30, 0x56	; 86
    6986:	f0 e0       	ldi	r31, 0x00	; 0
    6988:	80 81       	ld	r24, Z
    698a:	84 60       	ori	r24, 0x04	; 4
    698c:	8c 93       	st	X, r24

		SET_BIT(TWCR,4);
    698e:	a6 e5       	ldi	r26, 0x56	; 86
    6990:	b0 e0       	ldi	r27, 0x00	; 0
    6992:	e6 e5       	ldi	r30, 0x56	; 86
    6994:	f0 e0       	ldi	r31, 0x00	; 0
    6996:	80 81       	ld	r24, Z
    6998:	80 61       	ori	r24, 0x10	; 16
    699a:	8c 93       	st	X, r24
		CLR_BIT(TWCR,7);
    699c:	a6 e5       	ldi	r26, 0x56	; 86
    699e:	b0 e0       	ldi	r27, 0x00	; 0
    69a0:	e6 e5       	ldi	r30, 0x56	; 86
    69a2:	f0 e0       	ldi	r31, 0x00	; 0
    69a4:	80 81       	ld	r24, Z
    69a6:	8f 77       	andi	r24, 0x7F	; 127
    69a8:	8c 93       	st	X, r24
    69aa:	9d cf       	rjmp	.-198    	; 0x68e6 <main+0x8>

000069ac <__mulsi3>:
    69ac:	62 9f       	mul	r22, r18
    69ae:	d0 01       	movw	r26, r0
    69b0:	73 9f       	mul	r23, r19
    69b2:	f0 01       	movw	r30, r0
    69b4:	82 9f       	mul	r24, r18
    69b6:	e0 0d       	add	r30, r0
    69b8:	f1 1d       	adc	r31, r1
    69ba:	64 9f       	mul	r22, r20
    69bc:	e0 0d       	add	r30, r0
    69be:	f1 1d       	adc	r31, r1
    69c0:	92 9f       	mul	r25, r18
    69c2:	f0 0d       	add	r31, r0
    69c4:	83 9f       	mul	r24, r19
    69c6:	f0 0d       	add	r31, r0
    69c8:	74 9f       	mul	r23, r20
    69ca:	f0 0d       	add	r31, r0
    69cc:	65 9f       	mul	r22, r21
    69ce:	f0 0d       	add	r31, r0
    69d0:	99 27       	eor	r25, r25
    69d2:	72 9f       	mul	r23, r18
    69d4:	b0 0d       	add	r27, r0
    69d6:	e1 1d       	adc	r30, r1
    69d8:	f9 1f       	adc	r31, r25
    69da:	63 9f       	mul	r22, r19
    69dc:	b0 0d       	add	r27, r0
    69de:	e1 1d       	adc	r30, r1
    69e0:	f9 1f       	adc	r31, r25
    69e2:	bd 01       	movw	r22, r26
    69e4:	cf 01       	movw	r24, r30
    69e6:	11 24       	eor	r1, r1
    69e8:	08 95       	ret

000069ea <__udivmodqi4>:
    69ea:	99 1b       	sub	r25, r25
    69ec:	79 e0       	ldi	r23, 0x09	; 9
    69ee:	04 c0       	rjmp	.+8      	; 0x69f8 <__udivmodqi4_ep>

000069f0 <__udivmodqi4_loop>:
    69f0:	99 1f       	adc	r25, r25
    69f2:	96 17       	cp	r25, r22
    69f4:	08 f0       	brcs	.+2      	; 0x69f8 <__udivmodqi4_ep>
    69f6:	96 1b       	sub	r25, r22

000069f8 <__udivmodqi4_ep>:
    69f8:	88 1f       	adc	r24, r24
    69fa:	7a 95       	dec	r23
    69fc:	c9 f7       	brne	.-14     	; 0x69f0 <__udivmodqi4_loop>
    69fe:	80 95       	com	r24
    6a00:	08 95       	ret

00006a02 <__udivmodhi4>:
    6a02:	aa 1b       	sub	r26, r26
    6a04:	bb 1b       	sub	r27, r27
    6a06:	51 e1       	ldi	r21, 0x11	; 17
    6a08:	07 c0       	rjmp	.+14     	; 0x6a18 <__udivmodhi4_ep>

00006a0a <__udivmodhi4_loop>:
    6a0a:	aa 1f       	adc	r26, r26
    6a0c:	bb 1f       	adc	r27, r27
    6a0e:	a6 17       	cp	r26, r22
    6a10:	b7 07       	cpc	r27, r23
    6a12:	10 f0       	brcs	.+4      	; 0x6a18 <__udivmodhi4_ep>
    6a14:	a6 1b       	sub	r26, r22
    6a16:	b7 0b       	sbc	r27, r23

00006a18 <__udivmodhi4_ep>:
    6a18:	88 1f       	adc	r24, r24
    6a1a:	99 1f       	adc	r25, r25
    6a1c:	5a 95       	dec	r21
    6a1e:	a9 f7       	brne	.-22     	; 0x6a0a <__udivmodhi4_loop>
    6a20:	80 95       	com	r24
    6a22:	90 95       	com	r25
    6a24:	bc 01       	movw	r22, r24
    6a26:	cd 01       	movw	r24, r26
    6a28:	08 95       	ret

00006a2a <__divmodhi4>:
    6a2a:	97 fb       	bst	r25, 7
    6a2c:	09 2e       	mov	r0, r25
    6a2e:	07 26       	eor	r0, r23
    6a30:	0a d0       	rcall	.+20     	; 0x6a46 <__divmodhi4_neg1>
    6a32:	77 fd       	sbrc	r23, 7
    6a34:	04 d0       	rcall	.+8      	; 0x6a3e <__divmodhi4_neg2>
    6a36:	e5 df       	rcall	.-54     	; 0x6a02 <__udivmodhi4>
    6a38:	06 d0       	rcall	.+12     	; 0x6a46 <__divmodhi4_neg1>
    6a3a:	00 20       	and	r0, r0
    6a3c:	1a f4       	brpl	.+6      	; 0x6a44 <__divmodhi4_exit>

00006a3e <__divmodhi4_neg2>:
    6a3e:	70 95       	com	r23
    6a40:	61 95       	neg	r22
    6a42:	7f 4f       	sbci	r23, 0xFF	; 255

00006a44 <__divmodhi4_exit>:
    6a44:	08 95       	ret

00006a46 <__divmodhi4_neg1>:
    6a46:	f6 f7       	brtc	.-4      	; 0x6a44 <__divmodhi4_exit>
    6a48:	90 95       	com	r25
    6a4a:	81 95       	neg	r24
    6a4c:	9f 4f       	sbci	r25, 0xFF	; 255
    6a4e:	08 95       	ret

00006a50 <__divmodsi4>:
    6a50:	97 fb       	bst	r25, 7
    6a52:	09 2e       	mov	r0, r25
    6a54:	05 26       	eor	r0, r21
    6a56:	0e d0       	rcall	.+28     	; 0x6a74 <__divmodsi4_neg1>
    6a58:	57 fd       	sbrc	r21, 7
    6a5a:	04 d0       	rcall	.+8      	; 0x6a64 <__divmodsi4_neg2>
    6a5c:	14 d0       	rcall	.+40     	; 0x6a86 <__udivmodsi4>
    6a5e:	0a d0       	rcall	.+20     	; 0x6a74 <__divmodsi4_neg1>
    6a60:	00 1c       	adc	r0, r0
    6a62:	38 f4       	brcc	.+14     	; 0x6a72 <__divmodsi4_exit>

00006a64 <__divmodsi4_neg2>:
    6a64:	50 95       	com	r21
    6a66:	40 95       	com	r20
    6a68:	30 95       	com	r19
    6a6a:	21 95       	neg	r18
    6a6c:	3f 4f       	sbci	r19, 0xFF	; 255
    6a6e:	4f 4f       	sbci	r20, 0xFF	; 255
    6a70:	5f 4f       	sbci	r21, 0xFF	; 255

00006a72 <__divmodsi4_exit>:
    6a72:	08 95       	ret

00006a74 <__divmodsi4_neg1>:
    6a74:	f6 f7       	brtc	.-4      	; 0x6a72 <__divmodsi4_exit>
    6a76:	90 95       	com	r25
    6a78:	80 95       	com	r24
    6a7a:	70 95       	com	r23
    6a7c:	61 95       	neg	r22
    6a7e:	7f 4f       	sbci	r23, 0xFF	; 255
    6a80:	8f 4f       	sbci	r24, 0xFF	; 255
    6a82:	9f 4f       	sbci	r25, 0xFF	; 255
    6a84:	08 95       	ret

00006a86 <__udivmodsi4>:
    6a86:	a1 e2       	ldi	r26, 0x21	; 33
    6a88:	1a 2e       	mov	r1, r26
    6a8a:	aa 1b       	sub	r26, r26
    6a8c:	bb 1b       	sub	r27, r27
    6a8e:	fd 01       	movw	r30, r26
    6a90:	0d c0       	rjmp	.+26     	; 0x6aac <__udivmodsi4_ep>

00006a92 <__udivmodsi4_loop>:
    6a92:	aa 1f       	adc	r26, r26
    6a94:	bb 1f       	adc	r27, r27
    6a96:	ee 1f       	adc	r30, r30
    6a98:	ff 1f       	adc	r31, r31
    6a9a:	a2 17       	cp	r26, r18
    6a9c:	b3 07       	cpc	r27, r19
    6a9e:	e4 07       	cpc	r30, r20
    6aa0:	f5 07       	cpc	r31, r21
    6aa2:	20 f0       	brcs	.+8      	; 0x6aac <__udivmodsi4_ep>
    6aa4:	a2 1b       	sub	r26, r18
    6aa6:	b3 0b       	sbc	r27, r19
    6aa8:	e4 0b       	sbc	r30, r20
    6aaa:	f5 0b       	sbc	r31, r21

00006aac <__udivmodsi4_ep>:
    6aac:	66 1f       	adc	r22, r22
    6aae:	77 1f       	adc	r23, r23
    6ab0:	88 1f       	adc	r24, r24
    6ab2:	99 1f       	adc	r25, r25
    6ab4:	1a 94       	dec	r1
    6ab6:	69 f7       	brne	.-38     	; 0x6a92 <__udivmodsi4_loop>
    6ab8:	60 95       	com	r22
    6aba:	70 95       	com	r23
    6abc:	80 95       	com	r24
    6abe:	90 95       	com	r25
    6ac0:	9b 01       	movw	r18, r22
    6ac2:	ac 01       	movw	r20, r24
    6ac4:	bd 01       	movw	r22, r26
    6ac6:	cf 01       	movw	r24, r30
    6ac8:	08 95       	ret

00006aca <__prologue_saves__>:
    6aca:	2f 92       	push	r2
    6acc:	3f 92       	push	r3
    6ace:	4f 92       	push	r4
    6ad0:	5f 92       	push	r5
    6ad2:	6f 92       	push	r6
    6ad4:	7f 92       	push	r7
    6ad6:	8f 92       	push	r8
    6ad8:	9f 92       	push	r9
    6ada:	af 92       	push	r10
    6adc:	bf 92       	push	r11
    6ade:	cf 92       	push	r12
    6ae0:	df 92       	push	r13
    6ae2:	ef 92       	push	r14
    6ae4:	ff 92       	push	r15
    6ae6:	0f 93       	push	r16
    6ae8:	1f 93       	push	r17
    6aea:	cf 93       	push	r28
    6aec:	df 93       	push	r29
    6aee:	cd b7       	in	r28, 0x3d	; 61
    6af0:	de b7       	in	r29, 0x3e	; 62
    6af2:	ca 1b       	sub	r28, r26
    6af4:	db 0b       	sbc	r29, r27
    6af6:	0f b6       	in	r0, 0x3f	; 63
    6af8:	f8 94       	cli
    6afa:	de bf       	out	0x3e, r29	; 62
    6afc:	0f be       	out	0x3f, r0	; 63
    6afe:	cd bf       	out	0x3d, r28	; 61
    6b00:	09 94       	ijmp

00006b02 <__epilogue_restores__>:
    6b02:	2a 88       	ldd	r2, Y+18	; 0x12
    6b04:	39 88       	ldd	r3, Y+17	; 0x11
    6b06:	48 88       	ldd	r4, Y+16	; 0x10
    6b08:	5f 84       	ldd	r5, Y+15	; 0x0f
    6b0a:	6e 84       	ldd	r6, Y+14	; 0x0e
    6b0c:	7d 84       	ldd	r7, Y+13	; 0x0d
    6b0e:	8c 84       	ldd	r8, Y+12	; 0x0c
    6b10:	9b 84       	ldd	r9, Y+11	; 0x0b
    6b12:	aa 84       	ldd	r10, Y+10	; 0x0a
    6b14:	b9 84       	ldd	r11, Y+9	; 0x09
    6b16:	c8 84       	ldd	r12, Y+8	; 0x08
    6b18:	df 80       	ldd	r13, Y+7	; 0x07
    6b1a:	ee 80       	ldd	r14, Y+6	; 0x06
    6b1c:	fd 80       	ldd	r15, Y+5	; 0x05
    6b1e:	0c 81       	ldd	r16, Y+4	; 0x04
    6b20:	1b 81       	ldd	r17, Y+3	; 0x03
    6b22:	aa 81       	ldd	r26, Y+2	; 0x02
    6b24:	b9 81       	ldd	r27, Y+1	; 0x01
    6b26:	ce 0f       	add	r28, r30
    6b28:	d1 1d       	adc	r29, r1
    6b2a:	0f b6       	in	r0, 0x3f	; 63
    6b2c:	f8 94       	cli
    6b2e:	de bf       	out	0x3e, r29	; 62
    6b30:	0f be       	out	0x3f, r0	; 63
    6b32:	cd bf       	out	0x3d, r28	; 61
    6b34:	ed 01       	movw	r28, r26
    6b36:	08 95       	ret

00006b38 <_exit>:
    6b38:	f8 94       	cli

00006b3a <__stop_program>:
    6b3a:	ff cf       	rjmp	.-2      	; 0x6b3a <__stop_program>
