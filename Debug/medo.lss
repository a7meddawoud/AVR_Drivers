
medo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006ae6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000066  00800060  00006ae6  00006b7a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000024  008000c6  008000c6  00006be0  2**0
                  ALLOC
  3 .stab         00007854  00000000  00000000  00006be0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002be2  00000000  00000000  0000e434  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00011016  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00011156  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000112c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00012f0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00013dfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00014ba8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00014d08  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00014f95  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00015763  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 13 0e 	jmp	0x1c26	; 0x1c26 <__vector_1>
       8:	0c 94 46 0e 	jmp	0x1c8c	; 0x1c8c <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 d3 09 	jmp	0x13a6	; 0x13a6 <__vector_6>
      1c:	0c 94 3a 09 	jmp	0x1274	; 0x1274 <__vector_7>
      20:	0c 94 6d 09 	jmp	0x12da	; 0x12da <__vector_8>
      24:	0c 94 a0 09 	jmp	0x1340	; 0x1340 <__vector_9>
      28:	0c 94 8c 0a 	jmp	0x1518	; 0x1518 <__vector_10>
      2c:	0c 94 bf 0a 	jmp	0x157e	; 0x157e <__vector_11>
      30:	0c 94 85 0b 	jmp	0x170a	; 0x170a <__vector_12>
      34:	0c 94 56 06 	jmp	0xcac	; 0xcac <__vector_13>
      38:	0c 94 89 06 	jmp	0xd12	; 0xd12 <__vector_14>
      3c:	0c 94 bc 06 	jmp	0xd78	; 0xd78 <__vector_15>
      40:	0c 94 23 13 	jmp	0x2646	; 0x2646 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ee       	ldi	r30, 0xE6	; 230
      68:	fa e6       	ldi	r31, 0x6A	; 106
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3c       	cpi	r26, 0xC6	; 198
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 ec       	ldi	r26, 0xC6	; 198
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 3e       	cpi	r26, 0xEA	; 234
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 44 34 	call	0x6888	; 0x6888 <main>
      8a:	0c 94 71 35 	jmp	0x6ae2	; 0x6ae2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 3a 35 	jmp	0x6a74	; 0x6a74 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 ea       	ldi	r26, 0xA5	; 165
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 56 35 	jmp	0x6aac	; 0x6aac <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 46 35 	jmp	0x6a8c	; 0x6a8c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 62 35 	jmp	0x6ac4	; 0x6ac4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 46 35 	jmp	0x6a8c	; 0x6a8c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 62 35 	jmp	0x6ac4	; 0x6ac4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 3a 35 	jmp	0x6a74	; 0x6a74 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	85 ea       	ldi	r24, 0xA5	; 165
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 56 35 	jmp	0x6aac	; 0x6aac <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 46 35 	jmp	0x6a8c	; 0x6a8c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 62 35 	jmp	0x6ac4	; 0x6ac4 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 46 35 	jmp	0x6a8c	; 0x6a8c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 62 35 	jmp	0x6ac4	; 0x6ac4 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 46 35 	jmp	0x6a8c	; 0x6a8c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 62 35 	jmp	0x6ac4	; 0x6ac4 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 4a 35 	jmp	0x6a94	; 0x6a94 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 66 35 	jmp	0x6acc	; 0x6acc <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_vInit>:

void(*Uptr1)(void)='\0';
void(*Uptr2)(void)='\0';
void(*Uptr3)(void)='\0';

void UART_vInit(){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	UBRRL=103;
     b4e:	e9 e2       	ldi	r30, 0x29	; 41
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	87 e6       	ldi	r24, 0x67	; 103
     b54:	80 83       	st	Z, r24
	SET_BIT(UCSRB,3);
     b56:	aa e2       	ldi	r26, 0x2A	; 42
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	ea e2       	ldi	r30, 0x2A	; 42
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	80 81       	ld	r24, Z
     b60:	88 60       	ori	r24, 0x08	; 8
     b62:	8c 93       	st	X, r24
	SET_BIT(UCSRB,4);
     b64:	aa e2       	ldi	r26, 0x2A	; 42
     b66:	b0 e0       	ldi	r27, 0x00	; 0
     b68:	ea e2       	ldi	r30, 0x2A	; 42
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	80 81       	ld	r24, Z
     b6e:	80 61       	ori	r24, 0x10	; 16
     b70:	8c 93       	st	X, r24
	UCSRC=0b10000110;
     b72:	e0 e4       	ldi	r30, 0x40	; 64
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	86 e8       	ldi	r24, 0x86	; 134
     b78:	80 83       	st	Z, r24
}
     b7a:	cf 91       	pop	r28
     b7c:	df 91       	pop	r29
     b7e:	08 95       	ret

00000b80 <UART_vSendChar>:
void UART_vSendChar(u8 Loc_SendChar){
     b80:	df 93       	push	r29
     b82:	cf 93       	push	r28
     b84:	0f 92       	push	r0
     b86:	cd b7       	in	r28, 0x3d	; 61
     b88:	de b7       	in	r29, 0x3e	; 62
     b8a:	89 83       	std	Y+1, r24	; 0x01
	while(GET_BIT(UCSRA,6));
     b8c:	ea e2       	ldi	r30, 0x2A	; 42
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	80 81       	ld	r24, Z
     b92:	82 95       	swap	r24
     b94:	86 95       	lsr	r24
     b96:	86 95       	lsr	r24
     b98:	83 70       	andi	r24, 0x03	; 3
     b9a:	88 2f       	mov	r24, r24
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	81 70       	andi	r24, 0x01	; 1
     ba0:	90 70       	andi	r25, 0x00	; 0
     ba2:	88 23       	and	r24, r24
     ba4:	99 f7       	brne	.-26     	; 0xb8c <UART_vSendChar+0xc>
	UDR=Loc_SendChar;
     ba6:	ec e2       	ldi	r30, 0x2C	; 44
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	89 81       	ldd	r24, Y+1	; 0x01
     bac:	80 83       	st	Z, r24
}
     bae:	0f 90       	pop	r0
     bb0:	cf 91       	pop	r28
     bb2:	df 91       	pop	r29
     bb4:	08 95       	ret

00000bb6 <UART_u8RecieveChar>:
u8 UART_u8RecieveChar(){
     bb6:	df 93       	push	r29
     bb8:	cf 93       	push	r28
     bba:	cd b7       	in	r28, 0x3d	; 61
     bbc:	de b7       	in	r29, 0x3e	; 62
	while(!(GET_BIT(UCSRA,7)));
     bbe:	ea e2       	ldi	r30, 0x2A	; 42
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	80 81       	ld	r24, Z
     bc4:	88 23       	and	r24, r24
     bc6:	dc f7       	brge	.-10     	; 0xbbe <UART_u8RecieveChar+0x8>
	return UDR;
     bc8:	ec e2       	ldi	r30, 0x2C	; 44
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	80 81       	ld	r24, Z
}
     bce:	cf 91       	pop	r28
     bd0:	df 91       	pop	r29
     bd2:	08 95       	ret

00000bd4 <UART_vRXCompleteInterruptEnable>:
void UART_vRXCompleteInterruptEnable(){
     bd4:	df 93       	push	r29
     bd6:	cf 93       	push	r28
     bd8:	cd b7       	in	r28, 0x3d	; 61
     bda:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,7);
     bdc:	aa e2       	ldi	r26, 0x2A	; 42
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	ea e2       	ldi	r30, 0x2A	; 42
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	80 68       	ori	r24, 0x80	; 128
     be8:	8c 93       	st	X, r24
}
     bea:	cf 91       	pop	r28
     bec:	df 91       	pop	r29
     bee:	08 95       	ret

00000bf0 <UART_vTXCompleteInterruptEnable>:
void UART_vTXCompleteInterruptEnable(){
     bf0:	df 93       	push	r29
     bf2:	cf 93       	push	r28
     bf4:	cd b7       	in	r28, 0x3d	; 61
     bf6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,6);
     bf8:	aa e2       	ldi	r26, 0x2A	; 42
     bfa:	b0 e0       	ldi	r27, 0x00	; 0
     bfc:	ea e2       	ldi	r30, 0x2A	; 42
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	80 81       	ld	r24, Z
     c02:	80 64       	ori	r24, 0x40	; 64
     c04:	8c 93       	st	X, r24
}
     c06:	cf 91       	pop	r28
     c08:	df 91       	pop	r29
     c0a:	08 95       	ret

00000c0c <UART_vDataRegisterEmptyInterruptEnable>:
void UART_vDataRegisterEmptyInterruptEnable(){
     c0c:	df 93       	push	r29
     c0e:	cf 93       	push	r28
     c10:	cd b7       	in	r28, 0x3d	; 61
     c12:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,5);
     c14:	aa e2       	ldi	r26, 0x2A	; 42
     c16:	b0 e0       	ldi	r27, 0x00	; 0
     c18:	ea e2       	ldi	r30, 0x2A	; 42
     c1a:	f0 e0       	ldi	r31, 0x00	; 0
     c1c:	80 81       	ld	r24, Z
     c1e:	80 62       	ori	r24, 0x20	; 32
     c20:	8c 93       	st	X, r24
}
     c22:	cf 91       	pop	r28
     c24:	df 91       	pop	r29
     c26:	08 95       	ret

00000c28 <UART_RXCompleteCallBack>:
void UART_RXCompleteCallBack(void(*ptr1)(void)){
     c28:	df 93       	push	r29
     c2a:	cf 93       	push	r28
     c2c:	00 d0       	rcall	.+0      	; 0xc2e <UART_RXCompleteCallBack+0x6>
     c2e:	cd b7       	in	r28, 0x3d	; 61
     c30:	de b7       	in	r29, 0x3e	; 62
     c32:	9a 83       	std	Y+2, r25	; 0x02
     c34:	89 83       	std	Y+1, r24	; 0x01
	if(ptr1!='\0'){
     c36:	89 81       	ldd	r24, Y+1	; 0x01
     c38:	9a 81       	ldd	r25, Y+2	; 0x02
     c3a:	00 97       	sbiw	r24, 0x00	; 0
     c3c:	31 f0       	breq	.+12     	; 0xc4a <UART_RXCompleteCallBack+0x22>
		Uptr1=ptr1;
     c3e:	89 81       	ldd	r24, Y+1	; 0x01
     c40:	9a 81       	ldd	r25, Y+2	; 0x02
     c42:	90 93 c7 00 	sts	0x00C7, r25
     c46:	80 93 c6 00 	sts	0x00C6, r24
	}
}
     c4a:	0f 90       	pop	r0
     c4c:	0f 90       	pop	r0
     c4e:	cf 91       	pop	r28
     c50:	df 91       	pop	r29
     c52:	08 95       	ret

00000c54 <UART_TXCompleteCallBack>:
void UART_TXCompleteCallBack(void(*ptr2)(void)){
     c54:	df 93       	push	r29
     c56:	cf 93       	push	r28
     c58:	00 d0       	rcall	.+0      	; 0xc5a <UART_TXCompleteCallBack+0x6>
     c5a:	cd b7       	in	r28, 0x3d	; 61
     c5c:	de b7       	in	r29, 0x3e	; 62
     c5e:	9a 83       	std	Y+2, r25	; 0x02
     c60:	89 83       	std	Y+1, r24	; 0x01
	if(ptr2!='\0'){
     c62:	89 81       	ldd	r24, Y+1	; 0x01
     c64:	9a 81       	ldd	r25, Y+2	; 0x02
     c66:	00 97       	sbiw	r24, 0x00	; 0
     c68:	31 f0       	breq	.+12     	; 0xc76 <UART_TXCompleteCallBack+0x22>
		Uptr2=ptr2;
     c6a:	89 81       	ldd	r24, Y+1	; 0x01
     c6c:	9a 81       	ldd	r25, Y+2	; 0x02
     c6e:	90 93 c9 00 	sts	0x00C9, r25
     c72:	80 93 c8 00 	sts	0x00C8, r24
	}
}
     c76:	0f 90       	pop	r0
     c78:	0f 90       	pop	r0
     c7a:	cf 91       	pop	r28
     c7c:	df 91       	pop	r29
     c7e:	08 95       	ret

00000c80 <UAART_DataRegisterEmptyCallBack>:
void UAART_DataRegisterEmptyCallBack(void(*ptr3)(void)){
     c80:	df 93       	push	r29
     c82:	cf 93       	push	r28
     c84:	00 d0       	rcall	.+0      	; 0xc86 <UAART_DataRegisterEmptyCallBack+0x6>
     c86:	cd b7       	in	r28, 0x3d	; 61
     c88:	de b7       	in	r29, 0x3e	; 62
     c8a:	9a 83       	std	Y+2, r25	; 0x02
     c8c:	89 83       	std	Y+1, r24	; 0x01
	if(ptr3!='\0'){
     c8e:	89 81       	ldd	r24, Y+1	; 0x01
     c90:	9a 81       	ldd	r25, Y+2	; 0x02
     c92:	00 97       	sbiw	r24, 0x00	; 0
     c94:	31 f0       	breq	.+12     	; 0xca2 <UAART_DataRegisterEmptyCallBack+0x22>
		Uptr3=ptr3;
     c96:	89 81       	ldd	r24, Y+1	; 0x01
     c98:	9a 81       	ldd	r25, Y+2	; 0x02
     c9a:	90 93 cb 00 	sts	0x00CB, r25
     c9e:	80 93 ca 00 	sts	0x00CA, r24
	}
}
     ca2:	0f 90       	pop	r0
     ca4:	0f 90       	pop	r0
     ca6:	cf 91       	pop	r28
     ca8:	df 91       	pop	r29
     caa:	08 95       	ret

00000cac <__vector_13>:
ISR(USART_RXC_vect){
     cac:	1f 92       	push	r1
     cae:	0f 92       	push	r0
     cb0:	0f b6       	in	r0, 0x3f	; 63
     cb2:	0f 92       	push	r0
     cb4:	11 24       	eor	r1, r1
     cb6:	2f 93       	push	r18
     cb8:	3f 93       	push	r19
     cba:	4f 93       	push	r20
     cbc:	5f 93       	push	r21
     cbe:	6f 93       	push	r22
     cc0:	7f 93       	push	r23
     cc2:	8f 93       	push	r24
     cc4:	9f 93       	push	r25
     cc6:	af 93       	push	r26
     cc8:	bf 93       	push	r27
     cca:	ef 93       	push	r30
     ccc:	ff 93       	push	r31
     cce:	df 93       	push	r29
     cd0:	cf 93       	push	r28
     cd2:	cd b7       	in	r28, 0x3d	; 61
     cd4:	de b7       	in	r29, 0x3e	; 62
	if(Uptr1!='\0'){
     cd6:	80 91 c6 00 	lds	r24, 0x00C6
     cda:	90 91 c7 00 	lds	r25, 0x00C7
     cde:	00 97       	sbiw	r24, 0x00	; 0
     ce0:	29 f0       	breq	.+10     	; 0xcec <__vector_13+0x40>
		Uptr1();
     ce2:	e0 91 c6 00 	lds	r30, 0x00C6
     ce6:	f0 91 c7 00 	lds	r31, 0x00C7
     cea:	09 95       	icall
	}
}
     cec:	cf 91       	pop	r28
     cee:	df 91       	pop	r29
     cf0:	ff 91       	pop	r31
     cf2:	ef 91       	pop	r30
     cf4:	bf 91       	pop	r27
     cf6:	af 91       	pop	r26
     cf8:	9f 91       	pop	r25
     cfa:	8f 91       	pop	r24
     cfc:	7f 91       	pop	r23
     cfe:	6f 91       	pop	r22
     d00:	5f 91       	pop	r21
     d02:	4f 91       	pop	r20
     d04:	3f 91       	pop	r19
     d06:	2f 91       	pop	r18
     d08:	0f 90       	pop	r0
     d0a:	0f be       	out	0x3f, r0	; 63
     d0c:	0f 90       	pop	r0
     d0e:	1f 90       	pop	r1
     d10:	18 95       	reti

00000d12 <__vector_14>:
ISR(USART_UDRE_vect){
     d12:	1f 92       	push	r1
     d14:	0f 92       	push	r0
     d16:	0f b6       	in	r0, 0x3f	; 63
     d18:	0f 92       	push	r0
     d1a:	11 24       	eor	r1, r1
     d1c:	2f 93       	push	r18
     d1e:	3f 93       	push	r19
     d20:	4f 93       	push	r20
     d22:	5f 93       	push	r21
     d24:	6f 93       	push	r22
     d26:	7f 93       	push	r23
     d28:	8f 93       	push	r24
     d2a:	9f 93       	push	r25
     d2c:	af 93       	push	r26
     d2e:	bf 93       	push	r27
     d30:	ef 93       	push	r30
     d32:	ff 93       	push	r31
     d34:	df 93       	push	r29
     d36:	cf 93       	push	r28
     d38:	cd b7       	in	r28, 0x3d	; 61
     d3a:	de b7       	in	r29, 0x3e	; 62
	if(Uptr2!='\0'){
     d3c:	80 91 c8 00 	lds	r24, 0x00C8
     d40:	90 91 c9 00 	lds	r25, 0x00C9
     d44:	00 97       	sbiw	r24, 0x00	; 0
     d46:	29 f0       	breq	.+10     	; 0xd52 <__vector_14+0x40>
		Uptr2();
     d48:	e0 91 c8 00 	lds	r30, 0x00C8
     d4c:	f0 91 c9 00 	lds	r31, 0x00C9
     d50:	09 95       	icall
	}
}
     d52:	cf 91       	pop	r28
     d54:	df 91       	pop	r29
     d56:	ff 91       	pop	r31
     d58:	ef 91       	pop	r30
     d5a:	bf 91       	pop	r27
     d5c:	af 91       	pop	r26
     d5e:	9f 91       	pop	r25
     d60:	8f 91       	pop	r24
     d62:	7f 91       	pop	r23
     d64:	6f 91       	pop	r22
     d66:	5f 91       	pop	r21
     d68:	4f 91       	pop	r20
     d6a:	3f 91       	pop	r19
     d6c:	2f 91       	pop	r18
     d6e:	0f 90       	pop	r0
     d70:	0f be       	out	0x3f, r0	; 63
     d72:	0f 90       	pop	r0
     d74:	1f 90       	pop	r1
     d76:	18 95       	reti

00000d78 <__vector_15>:
ISR(USART_TXC_vect){
     d78:	1f 92       	push	r1
     d7a:	0f 92       	push	r0
     d7c:	0f b6       	in	r0, 0x3f	; 63
     d7e:	0f 92       	push	r0
     d80:	11 24       	eor	r1, r1
     d82:	2f 93       	push	r18
     d84:	3f 93       	push	r19
     d86:	4f 93       	push	r20
     d88:	5f 93       	push	r21
     d8a:	6f 93       	push	r22
     d8c:	7f 93       	push	r23
     d8e:	8f 93       	push	r24
     d90:	9f 93       	push	r25
     d92:	af 93       	push	r26
     d94:	bf 93       	push	r27
     d96:	ef 93       	push	r30
     d98:	ff 93       	push	r31
     d9a:	df 93       	push	r29
     d9c:	cf 93       	push	r28
     d9e:	cd b7       	in	r28, 0x3d	; 61
     da0:	de b7       	in	r29, 0x3e	; 62
	if(Uptr3!='\0'){
     da2:	80 91 ca 00 	lds	r24, 0x00CA
     da6:	90 91 cb 00 	lds	r25, 0x00CB
     daa:	00 97       	sbiw	r24, 0x00	; 0
     dac:	29 f0       	breq	.+10     	; 0xdb8 <__vector_15+0x40>
		Uptr3();
     dae:	e0 91 ca 00 	lds	r30, 0x00CA
     db2:	f0 91 cb 00 	lds	r31, 0x00CB
     db6:	09 95       	icall
	}
}
     db8:	cf 91       	pop	r28
     dba:	df 91       	pop	r29
     dbc:	ff 91       	pop	r31
     dbe:	ef 91       	pop	r30
     dc0:	bf 91       	pop	r27
     dc2:	af 91       	pop	r26
     dc4:	9f 91       	pop	r25
     dc6:	8f 91       	pop	r24
     dc8:	7f 91       	pop	r23
     dca:	6f 91       	pop	r22
     dcc:	5f 91       	pop	r21
     dce:	4f 91       	pop	r20
     dd0:	3f 91       	pop	r19
     dd2:	2f 91       	pop	r18
     dd4:	0f 90       	pop	r0
     dd6:	0f be       	out	0x3f, r0	; 63
     dd8:	0f 90       	pop	r0
     dda:	1f 90       	pop	r1
     ddc:	18 95       	reti

00000dde <Timer1_vInit>:
u16 T1TimeOn;
u8 T1OnCounts;
u16 T1TimeTotal;
u8 T1TotalCounts;

void Timer1_vInit(){
     dde:	df 93       	push	r29
     de0:	cf 93       	push	r28
     de2:	cd b7       	in	r28, 0x3d	; 61
     de4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(DDRD,5); // Set Channel A Pin as OutPut
     de6:	a1 e3       	ldi	r26, 0x31	; 49
     de8:	b0 e0       	ldi	r27, 0x00	; 0
     dea:	e1 e3       	ldi	r30, 0x31	; 49
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	80 81       	ld	r24, Z
     df0:	80 62       	ori	r24, 0x20	; 32
     df2:	8c 93       	st	X, r24
	SET_BIT(DDRD,4); // Set Channel B Pin as OutPut
     df4:	a1 e3       	ldi	r26, 0x31	; 49
     df6:	b0 e0       	ldi	r27, 0x00	; 0
     df8:	e1 e3       	ldi	r30, 0x31	; 49
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	80 81       	ld	r24, Z
     dfe:	80 61       	ori	r24, 0x10	; 16
     e00:	8c 93       	st	X, r24
	TCCR1B=0b00011000|Timer1Prescaler;
#elif Timer1_Mode==T1FastPWMICR1
	TCCR1A=0b10100010;
	TCCR1B=0b00011000|Timer1Prescaler;   // prescaler 8Bits
#elif Timer1_Mode==T1PhaseCorrectPWMICR1
	TCCR1A=0b10100010;
     e02:	ef e4       	ldi	r30, 0x4F	; 79
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	82 ea       	ldi	r24, 0xA2	; 162
     e08:	80 83       	st	Z, r24
	TCCR1B=0b00010000|Timer1Prescaler;
     e0a:	ee e4       	ldi	r30, 0x4E	; 78
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	85 e1       	ldi	r24, 0x15	; 21
     e10:	80 83       	st	Z, r24
	Timer1_vOverflowCallBack(Timer1_vOverflowCounter);
	Timer1_vIputCaptureCallBack(Timer1_vInputCaptureCal);
	CLR_BIT(DDRD,6); // Make Pin6 PortD Input
	SET_BIT(TCCR1B,6);  // Capture At rising Edge
#endif
}
     e12:	cf 91       	pop	r28
     e14:	df 91       	pop	r29
     e16:	08 95       	ret

00000e18 <Timer1_vIputCaptureUnit>:
void Timer1_vIputCaptureUnit(u32* duty,u32* Frequency){
     e18:	ef 92       	push	r14
     e1a:	ff 92       	push	r15
     e1c:	0f 93       	push	r16
     e1e:	1f 93       	push	r17
     e20:	df 93       	push	r29
     e22:	cf 93       	push	r28
     e24:	00 d0       	rcall	.+0      	; 0xe26 <Timer1_vIputCaptureUnit+0xe>
     e26:	00 d0       	rcall	.+0      	; 0xe28 <Timer1_vIputCaptureUnit+0x10>
     e28:	cd b7       	in	r28, 0x3d	; 61
     e2a:	de b7       	in	r29, 0x3e	; 62
     e2c:	9a 83       	std	Y+2, r25	; 0x02
     e2e:	89 83       	std	Y+1, r24	; 0x01
     e30:	7c 83       	std	Y+4, r23	; 0x04
     e32:	6b 83       	std	Y+3, r22	; 0x03
	if(T1Flag==3){
     e34:	80 91 d4 00 	lds	r24, 0x00D4
     e38:	83 30       	cpi	r24, 0x03	; 3
     e3a:	09 f0       	breq	.+2      	; 0xe3e <Timer1_vIputCaptureUnit+0x26>
     e3c:	6f c0       	rjmp	.+222    	; 0xf1c <Timer1_vIputCaptureUnit+0x104>
		*duty=(u32)(((T1TimeOn+(T1OnCounts*65536))*100)/(T1TimeTotal)+(T1TotalCounts*65536));
     e3e:	80 91 e4 00 	lds	r24, 0x00E4
     e42:	90 91 e5 00 	lds	r25, 0x00E5
     e46:	9c 01       	movw	r18, r24
     e48:	40 e0       	ldi	r20, 0x00	; 0
     e4a:	50 e0       	ldi	r21, 0x00	; 0
     e4c:	80 91 e8 00 	lds	r24, 0x00E8
     e50:	88 2f       	mov	r24, r24
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	a0 e0       	ldi	r26, 0x00	; 0
     e56:	b0 e0       	ldi	r27, 0x00	; 0
     e58:	dc 01       	movw	r26, r24
     e5a:	99 27       	eor	r25, r25
     e5c:	88 27       	eor	r24, r24
     e5e:	82 0f       	add	r24, r18
     e60:	93 1f       	adc	r25, r19
     e62:	a4 1f       	adc	r26, r20
     e64:	b5 1f       	adc	r27, r21
     e66:	24 e6       	ldi	r18, 0x64	; 100
     e68:	30 e0       	ldi	r19, 0x00	; 0
     e6a:	40 e0       	ldi	r20, 0x00	; 0
     e6c:	50 e0       	ldi	r21, 0x00	; 0
     e6e:	bc 01       	movw	r22, r24
     e70:	cd 01       	movw	r24, r26
     e72:	0e 94 ab 34 	call	0x6956	; 0x6956 <__mulsi3>
     e76:	7b 01       	movw	r14, r22
     e78:	8c 01       	movw	r16, r24
     e7a:	80 91 e6 00 	lds	r24, 0x00E6
     e7e:	90 91 e7 00 	lds	r25, 0x00E7
     e82:	9c 01       	movw	r18, r24
     e84:	40 e0       	ldi	r20, 0x00	; 0
     e86:	50 e0       	ldi	r21, 0x00	; 0
     e88:	c8 01       	movw	r24, r16
     e8a:	b7 01       	movw	r22, r14
     e8c:	0e 94 fd 34 	call	0x69fa	; 0x69fa <__divmodsi4>
     e90:	da 01       	movw	r26, r20
     e92:	c9 01       	movw	r24, r18
     e94:	9c 01       	movw	r18, r24
     e96:	ad 01       	movw	r20, r26
     e98:	80 91 e3 00 	lds	r24, 0x00E3
     e9c:	88 2f       	mov	r24, r24
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	a0 e0       	ldi	r26, 0x00	; 0
     ea2:	b0 e0       	ldi	r27, 0x00	; 0
     ea4:	dc 01       	movw	r26, r24
     ea6:	99 27       	eor	r25, r25
     ea8:	88 27       	eor	r24, r24
     eaa:	82 0f       	add	r24, r18
     eac:	93 1f       	adc	r25, r19
     eae:	a4 1f       	adc	r26, r20
     eb0:	b5 1f       	adc	r27, r21
     eb2:	e9 81       	ldd	r30, Y+1	; 0x01
     eb4:	fa 81       	ldd	r31, Y+2	; 0x02
     eb6:	80 83       	st	Z, r24
     eb8:	91 83       	std	Z+1, r25	; 0x01
     eba:	a2 83       	std	Z+2, r26	; 0x02
     ebc:	b3 83       	std	Z+3, r27	; 0x03
		*Frequency=(u32)(T1SystemFrequency/((T1TimeTotal+(T1TotalCounts*65536))*T1Prescaler));
     ebe:	80 91 e6 00 	lds	r24, 0x00E6
     ec2:	90 91 e7 00 	lds	r25, 0x00E7
     ec6:	9c 01       	movw	r18, r24
     ec8:	40 e0       	ldi	r20, 0x00	; 0
     eca:	50 e0       	ldi	r21, 0x00	; 0
     ecc:	80 91 e3 00 	lds	r24, 0x00E3
     ed0:	88 2f       	mov	r24, r24
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	a0 e0       	ldi	r26, 0x00	; 0
     ed6:	b0 e0       	ldi	r27, 0x00	; 0
     ed8:	dc 01       	movw	r26, r24
     eda:	99 27       	eor	r25, r25
     edc:	88 27       	eor	r24, r24
     ede:	82 0f       	add	r24, r18
     ee0:	93 1f       	adc	r25, r19
     ee2:	a4 1f       	adc	r26, r20
     ee4:	b5 1f       	adc	r27, r21
     ee6:	9c 01       	movw	r18, r24
     ee8:	ad 01       	movw	r20, r26
     eea:	01 2e       	mov	r0, r17
     eec:	1a e0       	ldi	r17, 0x0A	; 10
     eee:	22 0f       	add	r18, r18
     ef0:	33 1f       	adc	r19, r19
     ef2:	44 1f       	adc	r20, r20
     ef4:	55 1f       	adc	r21, r21
     ef6:	1a 95       	dec	r17
     ef8:	d1 f7       	brne	.-12     	; 0xeee <Timer1_vIputCaptureUnit+0xd6>
     efa:	10 2d       	mov	r17, r0
     efc:	80 e0       	ldi	r24, 0x00	; 0
     efe:	94 e2       	ldi	r25, 0x24	; 36
     f00:	a4 ef       	ldi	r26, 0xF4	; 244
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	bc 01       	movw	r22, r24
     f06:	cd 01       	movw	r24, r26
     f08:	0e 94 fd 34 	call	0x69fa	; 0x69fa <__divmodsi4>
     f0c:	da 01       	movw	r26, r20
     f0e:	c9 01       	movw	r24, r18
     f10:	eb 81       	ldd	r30, Y+3	; 0x03
     f12:	fc 81       	ldd	r31, Y+4	; 0x04
     f14:	80 83       	st	Z, r24
     f16:	91 83       	std	Z+1, r25	; 0x01
     f18:	a2 83       	std	Z+2, r26	; 0x02
     f1a:	b3 83       	std	Z+3, r27	; 0x03
	}
}
     f1c:	0f 90       	pop	r0
     f1e:	0f 90       	pop	r0
     f20:	0f 90       	pop	r0
     f22:	0f 90       	pop	r0
     f24:	cf 91       	pop	r28
     f26:	df 91       	pop	r29
     f28:	1f 91       	pop	r17
     f2a:	0f 91       	pop	r16
     f2c:	ff 90       	pop	r15
     f2e:	ef 90       	pop	r14
     f30:	08 95       	ret

00000f32 <Timer1_vOverflowCounter>:
void Timer1_vOverflowCounter(){
     f32:	df 93       	push	r29
     f34:	cf 93       	push	r28
     f36:	cd b7       	in	r28, 0x3d	; 61
     f38:	de b7       	in	r29, 0x3e	; 62
	T1Counter++;
     f3a:	80 91 e9 00 	lds	r24, 0x00E9
     f3e:	8f 5f       	subi	r24, 0xFF	; 255
     f40:	80 93 e9 00 	sts	0x00E9, r24
}
     f44:	cf 91       	pop	r28
     f46:	df 91       	pop	r29
     f48:	08 95       	ret

00000f4a <Timer1_vInputCaptureCal>:
void Timer1_vInputCaptureCal(){
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
	if(T1Flag==0){
     f52:	80 91 d4 00 	lds	r24, 0x00D4
     f56:	88 23       	and	r24, r24
     f58:	f9 f4       	brne	.+62     	; 0xf98 <Timer1_vInputCaptureCal+0x4e>
		Timer1_vPreLoadResgister(0);
     f5a:	80 e0       	ldi	r24, 0x00	; 0
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	0e 94 9d 08 	call	0x113a	; 0x113a <Timer1_vPreLoadResgister>
		T1TimeOn=0;
     f62:	10 92 e5 00 	sts	0x00E5, r1
     f66:	10 92 e4 00 	sts	0x00E4, r1
		T1OnCounts=0;
     f6a:	10 92 e8 00 	sts	0x00E8, r1
		T1TimeTotal=0;
     f6e:	10 92 e7 00 	sts	0x00E7, r1
     f72:	10 92 e6 00 	sts	0x00E6, r1
		T1TotalCounts=0;
     f76:	10 92 e3 00 	sts	0x00E3, r1
		T1Counter=0;
     f7a:	10 92 e9 00 	sts	0x00E9, r1
		CLR_BIT(TCCR1B,6);
     f7e:	ae e4       	ldi	r26, 0x4E	; 78
     f80:	b0 e0       	ldi	r27, 0x00	; 0
     f82:	ee e4       	ldi	r30, 0x4E	; 78
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	8f 7b       	andi	r24, 0xBF	; 191
     f8a:	8c 93       	st	X, r24
		T1Flag++;
     f8c:	80 91 d4 00 	lds	r24, 0x00D4
     f90:	8f 5f       	subi	r24, 0xFF	; 255
     f92:	80 93 d4 00 	sts	0x00D4, r24
     f96:	2e c0       	rjmp	.+92     	; 0xff4 <Timer1_vInputCaptureCal+0xaa>
	}
	else if(T1Flag==1){
     f98:	80 91 d4 00 	lds	r24, 0x00D4
     f9c:	81 30       	cpi	r24, 0x01	; 1
     f9e:	b9 f4       	brne	.+46     	; 0xfce <Timer1_vInputCaptureCal+0x84>
		T1TimeOn=Timer1_vReadTCNT1();
     fa0:	0e 94 5d 08 	call	0x10ba	; 0x10ba <Timer1_vReadTCNT1>
     fa4:	90 93 e5 00 	sts	0x00E5, r25
     fa8:	80 93 e4 00 	sts	0x00E4, r24
		T1OnCounts=T1Counter;
     fac:	80 91 e9 00 	lds	r24, 0x00E9
     fb0:	80 93 e8 00 	sts	0x00E8, r24
		SET_BIT(TCCR1B,6);
     fb4:	ae e4       	ldi	r26, 0x4E	; 78
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	ee e4       	ldi	r30, 0x4E	; 78
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	80 64       	ori	r24, 0x40	; 64
     fc0:	8c 93       	st	X, r24
		T1Flag++;
     fc2:	80 91 d4 00 	lds	r24, 0x00D4
     fc6:	8f 5f       	subi	r24, 0xFF	; 255
     fc8:	80 93 d4 00 	sts	0x00D4, r24
     fcc:	13 c0       	rjmp	.+38     	; 0xff4 <Timer1_vInputCaptureCal+0xaa>
	}
	else if(T1Flag==2){
     fce:	80 91 d4 00 	lds	r24, 0x00D4
     fd2:	82 30       	cpi	r24, 0x02	; 2
     fd4:	79 f4       	brne	.+30     	; 0xff4 <Timer1_vInputCaptureCal+0xaa>
		T1TimeTotal=Timer1_vReadTCNT1();
     fd6:	0e 94 5d 08 	call	0x10ba	; 0x10ba <Timer1_vReadTCNT1>
     fda:	90 93 e7 00 	sts	0x00E7, r25
     fde:	80 93 e6 00 	sts	0x00E6, r24
		T1TotalCounts=T1Counter;
     fe2:	80 91 e9 00 	lds	r24, 0x00E9
     fe6:	80 93 e3 00 	sts	0x00E3, r24
		T1Flag++;
     fea:	80 91 d4 00 	lds	r24, 0x00D4
     fee:	8f 5f       	subi	r24, 0xFF	; 255
     ff0:	80 93 d4 00 	sts	0x00D4, r24
	}
}
     ff4:	cf 91       	pop	r28
     ff6:	df 91       	pop	r29
     ff8:	08 95       	ret

00000ffa <Timer1_vIputCaptureInterruptEnable>:
void Timer1_vIputCaptureInterruptEnable(){
     ffa:	df 93       	push	r29
     ffc:	cf 93       	push	r28
     ffe:	cd b7       	in	r28, 0x3d	; 61
    1000:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,5);
    1002:	a9 e5       	ldi	r26, 0x59	; 89
    1004:	b0 e0       	ldi	r27, 0x00	; 0
    1006:	e9 e5       	ldi	r30, 0x59	; 89
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	80 62       	ori	r24, 0x20	; 32
    100e:	8c 93       	st	X, r24
}
    1010:	cf 91       	pop	r28
    1012:	df 91       	pop	r29
    1014:	08 95       	ret

00001016 <Timer1_vCompareChannelAInterruptEnable>:
void Timer1_vCompareChannelAInterruptEnable(){
    1016:	df 93       	push	r29
    1018:	cf 93       	push	r28
    101a:	cd b7       	in	r28, 0x3d	; 61
    101c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,4);
    101e:	a9 e5       	ldi	r26, 0x59	; 89
    1020:	b0 e0       	ldi	r27, 0x00	; 0
    1022:	e9 e5       	ldi	r30, 0x59	; 89
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    1026:	80 81       	ld	r24, Z
    1028:	80 61       	ori	r24, 0x10	; 16
    102a:	8c 93       	st	X, r24
}
    102c:	cf 91       	pop	r28
    102e:	df 91       	pop	r29
    1030:	08 95       	ret

00001032 <Timer1_vCompareChannelBInterruptEnable>:
void Timer1_vCompareChannelBInterruptEnable(){
    1032:	df 93       	push	r29
    1034:	cf 93       	push	r28
    1036:	cd b7       	in	r28, 0x3d	; 61
    1038:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,3);
    103a:	a9 e5       	ldi	r26, 0x59	; 89
    103c:	b0 e0       	ldi	r27, 0x00	; 0
    103e:	e9 e5       	ldi	r30, 0x59	; 89
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	88 60       	ori	r24, 0x08	; 8
    1046:	8c 93       	st	X, r24
}
    1048:	cf 91       	pop	r28
    104a:	df 91       	pop	r29
    104c:	08 95       	ret

0000104e <Timer1_vOverflowInterruptEnable>:
void Timer1_vOverflowInterruptEnable(){
    104e:	df 93       	push	r29
    1050:	cf 93       	push	r28
    1052:	cd b7       	in	r28, 0x3d	; 61
    1054:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,2);
    1056:	a9 e5       	ldi	r26, 0x59	; 89
    1058:	b0 e0       	ldi	r27, 0x00	; 0
    105a:	e9 e5       	ldi	r30, 0x59	; 89
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	80 81       	ld	r24, Z
    1060:	84 60       	ori	r24, 0x04	; 4
    1062:	8c 93       	st	X, r24
}
    1064:	cf 91       	pop	r28
    1066:	df 91       	pop	r29
    1068:	08 95       	ret

0000106a <Timer1_vReadCompareChannelAFlag>:
u8 Timer1_vReadCompareChannelAFlag(){
    106a:	df 93       	push	r29
    106c:	cf 93       	push	r28
    106e:	cd b7       	in	r28, 0x3d	; 61
    1070:	de b7       	in	r29, 0x3e	; 62
	return GET_BIT(TIFR,4);
    1072:	e8 e5       	ldi	r30, 0x58	; 88
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	80 81       	ld	r24, Z
    1078:	82 95       	swap	r24
    107a:	8f 70       	andi	r24, 0x0F	; 15
    107c:	81 70       	andi	r24, 0x01	; 1
}
    107e:	cf 91       	pop	r28
    1080:	df 91       	pop	r29
    1082:	08 95       	ret

00001084 <Timer1_vReadCompareChannelBFlag>:
u8 Timer1_vReadCompareChannelBFlag(){
    1084:	df 93       	push	r29
    1086:	cf 93       	push	r28
    1088:	cd b7       	in	r28, 0x3d	; 61
    108a:	de b7       	in	r29, 0x3e	; 62
	return GET_BIT(TIFR,3);
    108c:	e8 e5       	ldi	r30, 0x58	; 88
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	80 81       	ld	r24, Z
    1092:	86 95       	lsr	r24
    1094:	86 95       	lsr	r24
    1096:	86 95       	lsr	r24
    1098:	81 70       	andi	r24, 0x01	; 1
}
    109a:	cf 91       	pop	r28
    109c:	df 91       	pop	r29
    109e:	08 95       	ret

000010a0 <Timer1_vReadOverflowFlag>:
u8 Timer1_vReadOverflowFlag(){
    10a0:	df 93       	push	r29
    10a2:	cf 93       	push	r28
    10a4:	cd b7       	in	r28, 0x3d	; 61
    10a6:	de b7       	in	r29, 0x3e	; 62
	return GET_BIT(TIFR,2);
    10a8:	e8 e5       	ldi	r30, 0x58	; 88
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	80 81       	ld	r24, Z
    10ae:	86 95       	lsr	r24
    10b0:	86 95       	lsr	r24
    10b2:	81 70       	andi	r24, 0x01	; 1
}
    10b4:	cf 91       	pop	r28
    10b6:	df 91       	pop	r29
    10b8:	08 95       	ret

000010ba <Timer1_vReadTCNT1>:
u16 Timer1_vReadTCNT1(){
    10ba:	df 93       	push	r29
    10bc:	cf 93       	push	r28
    10be:	00 d0       	rcall	.+0      	; 0x10c0 <Timer1_vReadTCNT1+0x6>
    10c0:	cd b7       	in	r28, 0x3d	; 61
    10c2:	de b7       	in	r29, 0x3e	; 62
	u16 Read;
	Read=(((u16)TCNT1H)<<8);
    10c4:	ed e4       	ldi	r30, 0x4D	; 77
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	80 81       	ld	r24, Z
    10ca:	88 2f       	mov	r24, r24
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	98 2f       	mov	r25, r24
    10d0:	88 27       	eor	r24, r24
    10d2:	9a 83       	std	Y+2, r25	; 0x02
    10d4:	89 83       	std	Y+1, r24	; 0x01
	Read=Read|((u16)TCNT1L);
    10d6:	ec e4       	ldi	r30, 0x4C	; 76
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	28 2f       	mov	r18, r24
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	89 81       	ldd	r24, Y+1	; 0x01
    10e2:	9a 81       	ldd	r25, Y+2	; 0x02
    10e4:	82 2b       	or	r24, r18
    10e6:	93 2b       	or	r25, r19
    10e8:	9a 83       	std	Y+2, r25	; 0x02
    10ea:	89 83       	std	Y+1, r24	; 0x01
	return Read;
    10ec:	89 81       	ldd	r24, Y+1	; 0x01
    10ee:	9a 81       	ldd	r25, Y+2	; 0x02
}
    10f0:	0f 90       	pop	r0
    10f2:	0f 90       	pop	r0
    10f4:	cf 91       	pop	r28
    10f6:	df 91       	pop	r29
    10f8:	08 95       	ret

000010fa <Timer1_vReadInputCaptureRegister>:
u16 Timer1_vReadInputCaptureRegister(){
    10fa:	df 93       	push	r29
    10fc:	cf 93       	push	r28
    10fe:	00 d0       	rcall	.+0      	; 0x1100 <Timer1_vReadInputCaptureRegister+0x6>
    1100:	cd b7       	in	r28, 0x3d	; 61
    1102:	de b7       	in	r29, 0x3e	; 62
	u16 Read;
	Read=(((u16)ICR1H)<<8);
    1104:	e7 e4       	ldi	r30, 0x47	; 71
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	88 2f       	mov	r24, r24
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	98 2f       	mov	r25, r24
    1110:	88 27       	eor	r24, r24
    1112:	9a 83       	std	Y+2, r25	; 0x02
    1114:	89 83       	std	Y+1, r24	; 0x01
	Read=Read|((u16)ICR1L);
    1116:	e6 e4       	ldi	r30, 0x46	; 70
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	80 81       	ld	r24, Z
    111c:	28 2f       	mov	r18, r24
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	89 81       	ldd	r24, Y+1	; 0x01
    1122:	9a 81       	ldd	r25, Y+2	; 0x02
    1124:	82 2b       	or	r24, r18
    1126:	93 2b       	or	r25, r19
    1128:	9a 83       	std	Y+2, r25	; 0x02
    112a:	89 83       	std	Y+1, r24	; 0x01
	return Read;
    112c:	89 81       	ldd	r24, Y+1	; 0x01
    112e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1130:	0f 90       	pop	r0
    1132:	0f 90       	pop	r0
    1134:	cf 91       	pop	r28
    1136:	df 91       	pop	r29
    1138:	08 95       	ret

0000113a <Timer1_vPreLoadResgister>:

void Timer1_vPreLoadResgister(u16 Loc_val){
    113a:	df 93       	push	r29
    113c:	cf 93       	push	r28
    113e:	00 d0       	rcall	.+0      	; 0x1140 <Timer1_vPreLoadResgister+0x6>
    1140:	cd b7       	in	r28, 0x3d	; 61
    1142:	de b7       	in	r29, 0x3e	; 62
    1144:	9a 83       	std	Y+2, r25	; 0x02
    1146:	89 83       	std	Y+1, r24	; 0x01
	TCNT1H=(Loc_val>>8);
    1148:	ed e4       	ldi	r30, 0x4D	; 77
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	89 81       	ldd	r24, Y+1	; 0x01
    114e:	9a 81       	ldd	r25, Y+2	; 0x02
    1150:	89 2f       	mov	r24, r25
    1152:	99 27       	eor	r25, r25
    1154:	80 83       	st	Z, r24
	TCNT1L=Loc_val;
    1156:	ec e4       	ldi	r30, 0x4C	; 76
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	89 81       	ldd	r24, Y+1	; 0x01
    115c:	80 83       	st	Z, r24
}
    115e:	0f 90       	pop	r0
    1160:	0f 90       	pop	r0
    1162:	cf 91       	pop	r28
    1164:	df 91       	pop	r29
    1166:	08 95       	ret

00001168 <Timer1_vChannelACopmareRegister>:
void Timer1_vChannelACopmareRegister(u16 Loc_val){
    1168:	df 93       	push	r29
    116a:	cf 93       	push	r28
    116c:	00 d0       	rcall	.+0      	; 0x116e <Timer1_vChannelACopmareRegister+0x6>
    116e:	cd b7       	in	r28, 0x3d	; 61
    1170:	de b7       	in	r29, 0x3e	; 62
    1172:	9a 83       	std	Y+2, r25	; 0x02
    1174:	89 83       	std	Y+1, r24	; 0x01
	OCR1AH=(Loc_val>>8);
    1176:	eb e4       	ldi	r30, 0x4B	; 75
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	89 81       	ldd	r24, Y+1	; 0x01
    117c:	9a 81       	ldd	r25, Y+2	; 0x02
    117e:	89 2f       	mov	r24, r25
    1180:	99 27       	eor	r25, r25
    1182:	80 83       	st	Z, r24
	OCR1AL=Loc_val;
    1184:	ea e4       	ldi	r30, 0x4A	; 74
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	89 81       	ldd	r24, Y+1	; 0x01
    118a:	80 83       	st	Z, r24
}
    118c:	0f 90       	pop	r0
    118e:	0f 90       	pop	r0
    1190:	cf 91       	pop	r28
    1192:	df 91       	pop	r29
    1194:	08 95       	ret

00001196 <Timer1_vChannelBCopmareRegister>:
void Timer1_vChannelBCopmareRegister(u16 Loc_val){
    1196:	df 93       	push	r29
    1198:	cf 93       	push	r28
    119a:	00 d0       	rcall	.+0      	; 0x119c <Timer1_vChannelBCopmareRegister+0x6>
    119c:	cd b7       	in	r28, 0x3d	; 61
    119e:	de b7       	in	r29, 0x3e	; 62
    11a0:	9a 83       	std	Y+2, r25	; 0x02
    11a2:	89 83       	std	Y+1, r24	; 0x01
	OCR1BH=(Loc_val>>8);
    11a4:	e9 e4       	ldi	r30, 0x49	; 73
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	89 81       	ldd	r24, Y+1	; 0x01
    11aa:	9a 81       	ldd	r25, Y+2	; 0x02
    11ac:	89 2f       	mov	r24, r25
    11ae:	99 27       	eor	r25, r25
    11b0:	80 83       	st	Z, r24
	OCR1BL=Loc_val;
    11b2:	e8 e4       	ldi	r30, 0x48	; 72
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	89 81       	ldd	r24, Y+1	; 0x01
    11b8:	80 83       	st	Z, r24
}
    11ba:	0f 90       	pop	r0
    11bc:	0f 90       	pop	r0
    11be:	cf 91       	pop	r28
    11c0:	df 91       	pop	r29
    11c2:	08 95       	ret

000011c4 <Timer1_vOverflowCallBack>:
void Timer1_vOverflowCallBack(void(*ptr1)(void)){
    11c4:	df 93       	push	r29
    11c6:	cf 93       	push	r28
    11c8:	00 d0       	rcall	.+0      	; 0x11ca <Timer1_vOverflowCallBack+0x6>
    11ca:	cd b7       	in	r28, 0x3d	; 61
    11cc:	de b7       	in	r29, 0x3e	; 62
    11ce:	9a 83       	std	Y+2, r25	; 0x02
    11d0:	89 83       	std	Y+1, r24	; 0x01
	if(ptr1!='\0'){
    11d2:	89 81       	ldd	r24, Y+1	; 0x01
    11d4:	9a 81       	ldd	r25, Y+2	; 0x02
    11d6:	00 97       	sbiw	r24, 0x00	; 0
    11d8:	31 f0       	breq	.+12     	; 0x11e6 <Timer1_vOverflowCallBack+0x22>
		T1Ptr1=ptr1;
    11da:	89 81       	ldd	r24, Y+1	; 0x01
    11dc:	9a 81       	ldd	r25, Y+2	; 0x02
    11de:	90 93 cd 00 	sts	0x00CD, r25
    11e2:	80 93 cc 00 	sts	0x00CC, r24
	}
}
    11e6:	0f 90       	pop	r0
    11e8:	0f 90       	pop	r0
    11ea:	cf 91       	pop	r28
    11ec:	df 91       	pop	r29
    11ee:	08 95       	ret

000011f0 <Timer1_vChannelACompareCallBack>:
void Timer1_vChannelACompareCallBack(void(*ptr2)(void)){
    11f0:	df 93       	push	r29
    11f2:	cf 93       	push	r28
    11f4:	00 d0       	rcall	.+0      	; 0x11f6 <Timer1_vChannelACompareCallBack+0x6>
    11f6:	cd b7       	in	r28, 0x3d	; 61
    11f8:	de b7       	in	r29, 0x3e	; 62
    11fa:	9a 83       	std	Y+2, r25	; 0x02
    11fc:	89 83       	std	Y+1, r24	; 0x01
	if(ptr2!='\0'){
    11fe:	89 81       	ldd	r24, Y+1	; 0x01
    1200:	9a 81       	ldd	r25, Y+2	; 0x02
    1202:	00 97       	sbiw	r24, 0x00	; 0
    1204:	31 f0       	breq	.+12     	; 0x1212 <Timer1_vChannelACompareCallBack+0x22>
		T1Ptr2=ptr2;
    1206:	89 81       	ldd	r24, Y+1	; 0x01
    1208:	9a 81       	ldd	r25, Y+2	; 0x02
    120a:	90 93 cf 00 	sts	0x00CF, r25
    120e:	80 93 ce 00 	sts	0x00CE, r24
	}
}
    1212:	0f 90       	pop	r0
    1214:	0f 90       	pop	r0
    1216:	cf 91       	pop	r28
    1218:	df 91       	pop	r29
    121a:	08 95       	ret

0000121c <Timer1_vChannelBCompareCallBack>:
void Timer1_vChannelBCompareCallBack(void(*ptr3)(void)){
    121c:	df 93       	push	r29
    121e:	cf 93       	push	r28
    1220:	00 d0       	rcall	.+0      	; 0x1222 <Timer1_vChannelBCompareCallBack+0x6>
    1222:	cd b7       	in	r28, 0x3d	; 61
    1224:	de b7       	in	r29, 0x3e	; 62
    1226:	9a 83       	std	Y+2, r25	; 0x02
    1228:	89 83       	std	Y+1, r24	; 0x01
	if(ptr3!='\0'){
    122a:	89 81       	ldd	r24, Y+1	; 0x01
    122c:	9a 81       	ldd	r25, Y+2	; 0x02
    122e:	00 97       	sbiw	r24, 0x00	; 0
    1230:	31 f0       	breq	.+12     	; 0x123e <Timer1_vChannelBCompareCallBack+0x22>
		T1Ptr3=ptr3;
    1232:	89 81       	ldd	r24, Y+1	; 0x01
    1234:	9a 81       	ldd	r25, Y+2	; 0x02
    1236:	90 93 d1 00 	sts	0x00D1, r25
    123a:	80 93 d0 00 	sts	0x00D0, r24
	}
}
    123e:	0f 90       	pop	r0
    1240:	0f 90       	pop	r0
    1242:	cf 91       	pop	r28
    1244:	df 91       	pop	r29
    1246:	08 95       	ret

00001248 <Timer1_vIputCaptureCallBack>:
void Timer1_vIputCaptureCallBack(void(*ptr4)(void)){
    1248:	df 93       	push	r29
    124a:	cf 93       	push	r28
    124c:	00 d0       	rcall	.+0      	; 0x124e <Timer1_vIputCaptureCallBack+0x6>
    124e:	cd b7       	in	r28, 0x3d	; 61
    1250:	de b7       	in	r29, 0x3e	; 62
    1252:	9a 83       	std	Y+2, r25	; 0x02
    1254:	89 83       	std	Y+1, r24	; 0x01
	if(ptr4!='\0'){
    1256:	89 81       	ldd	r24, Y+1	; 0x01
    1258:	9a 81       	ldd	r25, Y+2	; 0x02
    125a:	00 97       	sbiw	r24, 0x00	; 0
    125c:	31 f0       	breq	.+12     	; 0x126a <Timer1_vIputCaptureCallBack+0x22>
		T1Ptr4=ptr4;
    125e:	89 81       	ldd	r24, Y+1	; 0x01
    1260:	9a 81       	ldd	r25, Y+2	; 0x02
    1262:	90 93 d3 00 	sts	0x00D3, r25
    1266:	80 93 d2 00 	sts	0x00D2, r24
	}
}
    126a:	0f 90       	pop	r0
    126c:	0f 90       	pop	r0
    126e:	cf 91       	pop	r28
    1270:	df 91       	pop	r29
    1272:	08 95       	ret

00001274 <__vector_7>:
ISR(TIMER1_COMPA_vect){
    1274:	1f 92       	push	r1
    1276:	0f 92       	push	r0
    1278:	0f b6       	in	r0, 0x3f	; 63
    127a:	0f 92       	push	r0
    127c:	11 24       	eor	r1, r1
    127e:	2f 93       	push	r18
    1280:	3f 93       	push	r19
    1282:	4f 93       	push	r20
    1284:	5f 93       	push	r21
    1286:	6f 93       	push	r22
    1288:	7f 93       	push	r23
    128a:	8f 93       	push	r24
    128c:	9f 93       	push	r25
    128e:	af 93       	push	r26
    1290:	bf 93       	push	r27
    1292:	ef 93       	push	r30
    1294:	ff 93       	push	r31
    1296:	df 93       	push	r29
    1298:	cf 93       	push	r28
    129a:	cd b7       	in	r28, 0x3d	; 61
    129c:	de b7       	in	r29, 0x3e	; 62
	if(T1Ptr2!='\0'){
    129e:	80 91 ce 00 	lds	r24, 0x00CE
    12a2:	90 91 cf 00 	lds	r25, 0x00CF
    12a6:	00 97       	sbiw	r24, 0x00	; 0
    12a8:	29 f0       	breq	.+10     	; 0x12b4 <__vector_7+0x40>
		T1Ptr2();
    12aa:	e0 91 ce 00 	lds	r30, 0x00CE
    12ae:	f0 91 cf 00 	lds	r31, 0x00CF
    12b2:	09 95       	icall
	}
}
    12b4:	cf 91       	pop	r28
    12b6:	df 91       	pop	r29
    12b8:	ff 91       	pop	r31
    12ba:	ef 91       	pop	r30
    12bc:	bf 91       	pop	r27
    12be:	af 91       	pop	r26
    12c0:	9f 91       	pop	r25
    12c2:	8f 91       	pop	r24
    12c4:	7f 91       	pop	r23
    12c6:	6f 91       	pop	r22
    12c8:	5f 91       	pop	r21
    12ca:	4f 91       	pop	r20
    12cc:	3f 91       	pop	r19
    12ce:	2f 91       	pop	r18
    12d0:	0f 90       	pop	r0
    12d2:	0f be       	out	0x3f, r0	; 63
    12d4:	0f 90       	pop	r0
    12d6:	1f 90       	pop	r1
    12d8:	18 95       	reti

000012da <__vector_8>:
ISR(TIMER1_COMPB_vect){
    12da:	1f 92       	push	r1
    12dc:	0f 92       	push	r0
    12de:	0f b6       	in	r0, 0x3f	; 63
    12e0:	0f 92       	push	r0
    12e2:	11 24       	eor	r1, r1
    12e4:	2f 93       	push	r18
    12e6:	3f 93       	push	r19
    12e8:	4f 93       	push	r20
    12ea:	5f 93       	push	r21
    12ec:	6f 93       	push	r22
    12ee:	7f 93       	push	r23
    12f0:	8f 93       	push	r24
    12f2:	9f 93       	push	r25
    12f4:	af 93       	push	r26
    12f6:	bf 93       	push	r27
    12f8:	ef 93       	push	r30
    12fa:	ff 93       	push	r31
    12fc:	df 93       	push	r29
    12fe:	cf 93       	push	r28
    1300:	cd b7       	in	r28, 0x3d	; 61
    1302:	de b7       	in	r29, 0x3e	; 62
	if(T1Ptr3!='\0'){
    1304:	80 91 d0 00 	lds	r24, 0x00D0
    1308:	90 91 d1 00 	lds	r25, 0x00D1
    130c:	00 97       	sbiw	r24, 0x00	; 0
    130e:	29 f0       	breq	.+10     	; 0x131a <__vector_8+0x40>
		T1Ptr3();
    1310:	e0 91 d0 00 	lds	r30, 0x00D0
    1314:	f0 91 d1 00 	lds	r31, 0x00D1
    1318:	09 95       	icall
	}
}
    131a:	cf 91       	pop	r28
    131c:	df 91       	pop	r29
    131e:	ff 91       	pop	r31
    1320:	ef 91       	pop	r30
    1322:	bf 91       	pop	r27
    1324:	af 91       	pop	r26
    1326:	9f 91       	pop	r25
    1328:	8f 91       	pop	r24
    132a:	7f 91       	pop	r23
    132c:	6f 91       	pop	r22
    132e:	5f 91       	pop	r21
    1330:	4f 91       	pop	r20
    1332:	3f 91       	pop	r19
    1334:	2f 91       	pop	r18
    1336:	0f 90       	pop	r0
    1338:	0f be       	out	0x3f, r0	; 63
    133a:	0f 90       	pop	r0
    133c:	1f 90       	pop	r1
    133e:	18 95       	reti

00001340 <__vector_9>:
ISR(TIMER1_OVF_vect){
    1340:	1f 92       	push	r1
    1342:	0f 92       	push	r0
    1344:	0f b6       	in	r0, 0x3f	; 63
    1346:	0f 92       	push	r0
    1348:	11 24       	eor	r1, r1
    134a:	2f 93       	push	r18
    134c:	3f 93       	push	r19
    134e:	4f 93       	push	r20
    1350:	5f 93       	push	r21
    1352:	6f 93       	push	r22
    1354:	7f 93       	push	r23
    1356:	8f 93       	push	r24
    1358:	9f 93       	push	r25
    135a:	af 93       	push	r26
    135c:	bf 93       	push	r27
    135e:	ef 93       	push	r30
    1360:	ff 93       	push	r31
    1362:	df 93       	push	r29
    1364:	cf 93       	push	r28
    1366:	cd b7       	in	r28, 0x3d	; 61
    1368:	de b7       	in	r29, 0x3e	; 62
	if(T1Ptr1!='\0'){
    136a:	80 91 cc 00 	lds	r24, 0x00CC
    136e:	90 91 cd 00 	lds	r25, 0x00CD
    1372:	00 97       	sbiw	r24, 0x00	; 0
    1374:	29 f0       	breq	.+10     	; 0x1380 <__vector_9+0x40>
		T1Ptr1();
    1376:	e0 91 cc 00 	lds	r30, 0x00CC
    137a:	f0 91 cd 00 	lds	r31, 0x00CD
    137e:	09 95       	icall
	}
}
    1380:	cf 91       	pop	r28
    1382:	df 91       	pop	r29
    1384:	ff 91       	pop	r31
    1386:	ef 91       	pop	r30
    1388:	bf 91       	pop	r27
    138a:	af 91       	pop	r26
    138c:	9f 91       	pop	r25
    138e:	8f 91       	pop	r24
    1390:	7f 91       	pop	r23
    1392:	6f 91       	pop	r22
    1394:	5f 91       	pop	r21
    1396:	4f 91       	pop	r20
    1398:	3f 91       	pop	r19
    139a:	2f 91       	pop	r18
    139c:	0f 90       	pop	r0
    139e:	0f be       	out	0x3f, r0	; 63
    13a0:	0f 90       	pop	r0
    13a2:	1f 90       	pop	r1
    13a4:	18 95       	reti

000013a6 <__vector_6>:
ISR(TIMER1_CAPT_vect){
    13a6:	1f 92       	push	r1
    13a8:	0f 92       	push	r0
    13aa:	0f b6       	in	r0, 0x3f	; 63
    13ac:	0f 92       	push	r0
    13ae:	11 24       	eor	r1, r1
    13b0:	2f 93       	push	r18
    13b2:	3f 93       	push	r19
    13b4:	4f 93       	push	r20
    13b6:	5f 93       	push	r21
    13b8:	6f 93       	push	r22
    13ba:	7f 93       	push	r23
    13bc:	8f 93       	push	r24
    13be:	9f 93       	push	r25
    13c0:	af 93       	push	r26
    13c2:	bf 93       	push	r27
    13c4:	ef 93       	push	r30
    13c6:	ff 93       	push	r31
    13c8:	df 93       	push	r29
    13ca:	cf 93       	push	r28
    13cc:	cd b7       	in	r28, 0x3d	; 61
    13ce:	de b7       	in	r29, 0x3e	; 62
	if(T1Ptr4!='\0'){
    13d0:	80 91 d2 00 	lds	r24, 0x00D2
    13d4:	90 91 d3 00 	lds	r25, 0x00D3
    13d8:	00 97       	sbiw	r24, 0x00	; 0
    13da:	29 f0       	breq	.+10     	; 0x13e6 <__vector_6+0x40>
		T1Ptr4();
    13dc:	e0 91 d2 00 	lds	r30, 0x00D2
    13e0:	f0 91 d3 00 	lds	r31, 0x00D3
    13e4:	09 95       	icall
	}
}
    13e6:	cf 91       	pop	r28
    13e8:	df 91       	pop	r29
    13ea:	ff 91       	pop	r31
    13ec:	ef 91       	pop	r30
    13ee:	bf 91       	pop	r27
    13f0:	af 91       	pop	r26
    13f2:	9f 91       	pop	r25
    13f4:	8f 91       	pop	r24
    13f6:	7f 91       	pop	r23
    13f8:	6f 91       	pop	r22
    13fa:	5f 91       	pop	r21
    13fc:	4f 91       	pop	r20
    13fe:	3f 91       	pop	r19
    1400:	2f 91       	pop	r18
    1402:	0f 90       	pop	r0
    1404:	0f be       	out	0x3f, r0	; 63
    1406:	0f 90       	pop	r0
    1408:	1f 90       	pop	r1
    140a:	18 95       	reti

0000140c <Timer0_vInit>:
 *      Author: a7med
 */
#include "Timer0.h"
void(*Tptr1)(void)='\0';
void(*Tptr2)(void)='\0';
void Timer0_vInit(){
    140c:	df 93       	push	r29
    140e:	cf 93       	push	r28
    1410:	cd b7       	in	r28, 0x3d	; 61
    1412:	de b7       	in	r29, 0x3e	; 62
#if Timer0_Mode==T0NormalMode
	TCCR0= 0x00|Timer0Prescaler;

#elif Timer0_Mode==T0CTCMode
	TCCR0=0x08|Timer0Prescaler;
    1414:	e3 e5       	ldi	r30, 0x53	; 83
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	8b e0       	ldi	r24, 0x0B	; 11
    141a:	80 83       	st	Z, r24
#elif Timer0_Mode==T0PWMFastMode
	TCCR0= 0x44|Timer0Prescaler;
#elif Timer0_Mode==T0PWMPhaseCorrectMode
	TCCR0= 0x40|Timer0Prescaler;
#endif
}
    141c:	cf 91       	pop	r28
    141e:	df 91       	pop	r29
    1420:	08 95       	ret

00001422 <Timer0_vEnableCompareInterrupt>:
void Timer0_vEnableCompareInterrupt(){
    1422:	df 93       	push	r29
    1424:	cf 93       	push	r28
    1426:	cd b7       	in	r28, 0x3d	; 61
    1428:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,1);
    142a:	a9 e5       	ldi	r26, 0x59	; 89
    142c:	b0 e0       	ldi	r27, 0x00	; 0
    142e:	e9 e5       	ldi	r30, 0x59	; 89
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	80 81       	ld	r24, Z
    1434:	82 60       	ori	r24, 0x02	; 2
    1436:	8c 93       	st	X, r24
}
    1438:	cf 91       	pop	r28
    143a:	df 91       	pop	r29
    143c:	08 95       	ret

0000143e <Timer0_vEnableOverflowInterrupt>:
void Timer0_vEnableOverflowInterrupt(){
    143e:	df 93       	push	r29
    1440:	cf 93       	push	r28
    1442:	cd b7       	in	r28, 0x3d	; 61
    1444:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,0);
    1446:	a9 e5       	ldi	r26, 0x59	; 89
    1448:	b0 e0       	ldi	r27, 0x00	; 0
    144a:	e9 e5       	ldi	r30, 0x59	; 89
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	80 81       	ld	r24, Z
    1450:	81 60       	ori	r24, 0x01	; 1
    1452:	8c 93       	st	X, r24
}
    1454:	cf 91       	pop	r28
    1456:	df 91       	pop	r29
    1458:	08 95       	ret

0000145a <Timer0_u8ReadCompareFlag>:
u8 Timer0_u8ReadCompareFlag(){
    145a:	df 93       	push	r29
    145c:	cf 93       	push	r28
    145e:	cd b7       	in	r28, 0x3d	; 61
    1460:	de b7       	in	r29, 0x3e	; 62
	return GET_BIT(TIFR,1);
    1462:	e8 e5       	ldi	r30, 0x58	; 88
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	80 81       	ld	r24, Z
    1468:	86 95       	lsr	r24
    146a:	81 70       	andi	r24, 0x01	; 1
}
    146c:	cf 91       	pop	r28
    146e:	df 91       	pop	r29
    1470:	08 95       	ret

00001472 <Timer0_u8ReadOverflowFlag>:
u8 Timer0_u8ReadOverflowFlag(){
    1472:	df 93       	push	r29
    1474:	cf 93       	push	r28
    1476:	cd b7       	in	r28, 0x3d	; 61
    1478:	de b7       	in	r29, 0x3e	; 62
	return GET_BIT(TIFR,0);
    147a:	e8 e5       	ldi	r30, 0x58	; 88
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	80 81       	ld	r24, Z
    1480:	81 70       	andi	r24, 0x01	; 1
}
    1482:	cf 91       	pop	r28
    1484:	df 91       	pop	r29
    1486:	08 95       	ret

00001488 <Timer0_vCounterRegister>:
void Timer0_vCounterRegister(u8 Loc_u8CounterVal){
    1488:	df 93       	push	r29
    148a:	cf 93       	push	r28
    148c:	0f 92       	push	r0
    148e:	cd b7       	in	r28, 0x3d	; 61
    1490:	de b7       	in	r29, 0x3e	; 62
    1492:	89 83       	std	Y+1, r24	; 0x01
	TCNT0= Loc_u8CounterVal;
    1494:	e2 e5       	ldi	r30, 0x52	; 82
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	89 81       	ldd	r24, Y+1	; 0x01
    149a:	80 83       	st	Z, r24
}
    149c:	0f 90       	pop	r0
    149e:	cf 91       	pop	r28
    14a0:	df 91       	pop	r29
    14a2:	08 95       	ret

000014a4 <Timer0_vCompareRegister>:
void Timer0_vCompareRegister(u8 Loc_u8CompareVal){
    14a4:	df 93       	push	r29
    14a6:	cf 93       	push	r28
    14a8:	0f 92       	push	r0
    14aa:	cd b7       	in	r28, 0x3d	; 61
    14ac:	de b7       	in	r29, 0x3e	; 62
    14ae:	89 83       	std	Y+1, r24	; 0x01
	OCR0=Loc_u8CompareVal;
    14b0:	ec e5       	ldi	r30, 0x5C	; 92
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	89 81       	ldd	r24, Y+1	; 0x01
    14b6:	80 83       	st	Z, r24
}
    14b8:	0f 90       	pop	r0
    14ba:	cf 91       	pop	r28
    14bc:	df 91       	pop	r29
    14be:	08 95       	ret

000014c0 <Timer0_vCompareCallBack>:
void Timer0_vCompareCallBack(void(*ptr)(void)){
    14c0:	df 93       	push	r29
    14c2:	cf 93       	push	r28
    14c4:	00 d0       	rcall	.+0      	; 0x14c6 <Timer0_vCompareCallBack+0x6>
    14c6:	cd b7       	in	r28, 0x3d	; 61
    14c8:	de b7       	in	r29, 0x3e	; 62
    14ca:	9a 83       	std	Y+2, r25	; 0x02
    14cc:	89 83       	std	Y+1, r24	; 0x01
	if(ptr!='\0'){
    14ce:	89 81       	ldd	r24, Y+1	; 0x01
    14d0:	9a 81       	ldd	r25, Y+2	; 0x02
    14d2:	00 97       	sbiw	r24, 0x00	; 0
    14d4:	31 f0       	breq	.+12     	; 0x14e2 <Timer0_vCompareCallBack+0x22>
		Tptr1=ptr;
    14d6:	89 81       	ldd	r24, Y+1	; 0x01
    14d8:	9a 81       	ldd	r25, Y+2	; 0x02
    14da:	90 93 d6 00 	sts	0x00D6, r25
    14de:	80 93 d5 00 	sts	0x00D5, r24
	}
}
    14e2:	0f 90       	pop	r0
    14e4:	0f 90       	pop	r0
    14e6:	cf 91       	pop	r28
    14e8:	df 91       	pop	r29
    14ea:	08 95       	ret

000014ec <Timer0_vOverflowCallBack>:
void Timer0_vOverflowCallBack(void(*ptr)(void)){
    14ec:	df 93       	push	r29
    14ee:	cf 93       	push	r28
    14f0:	00 d0       	rcall	.+0      	; 0x14f2 <Timer0_vOverflowCallBack+0x6>
    14f2:	cd b7       	in	r28, 0x3d	; 61
    14f4:	de b7       	in	r29, 0x3e	; 62
    14f6:	9a 83       	std	Y+2, r25	; 0x02
    14f8:	89 83       	std	Y+1, r24	; 0x01
	if(ptr!='\0'){
    14fa:	89 81       	ldd	r24, Y+1	; 0x01
    14fc:	9a 81       	ldd	r25, Y+2	; 0x02
    14fe:	00 97       	sbiw	r24, 0x00	; 0
    1500:	31 f0       	breq	.+12     	; 0x150e <Timer0_vOverflowCallBack+0x22>
		Tptr2=ptr;
    1502:	89 81       	ldd	r24, Y+1	; 0x01
    1504:	9a 81       	ldd	r25, Y+2	; 0x02
    1506:	90 93 d8 00 	sts	0x00D8, r25
    150a:	80 93 d7 00 	sts	0x00D7, r24
	}
}
    150e:	0f 90       	pop	r0
    1510:	0f 90       	pop	r0
    1512:	cf 91       	pop	r28
    1514:	df 91       	pop	r29
    1516:	08 95       	ret

00001518 <__vector_10>:
ISR(TIMER0_COMP_vect){
    1518:	1f 92       	push	r1
    151a:	0f 92       	push	r0
    151c:	0f b6       	in	r0, 0x3f	; 63
    151e:	0f 92       	push	r0
    1520:	11 24       	eor	r1, r1
    1522:	2f 93       	push	r18
    1524:	3f 93       	push	r19
    1526:	4f 93       	push	r20
    1528:	5f 93       	push	r21
    152a:	6f 93       	push	r22
    152c:	7f 93       	push	r23
    152e:	8f 93       	push	r24
    1530:	9f 93       	push	r25
    1532:	af 93       	push	r26
    1534:	bf 93       	push	r27
    1536:	ef 93       	push	r30
    1538:	ff 93       	push	r31
    153a:	df 93       	push	r29
    153c:	cf 93       	push	r28
    153e:	cd b7       	in	r28, 0x3d	; 61
    1540:	de b7       	in	r29, 0x3e	; 62
	if(Tptr1!='\0'){
    1542:	80 91 d5 00 	lds	r24, 0x00D5
    1546:	90 91 d6 00 	lds	r25, 0x00D6
    154a:	00 97       	sbiw	r24, 0x00	; 0
    154c:	29 f0       	breq	.+10     	; 0x1558 <__vector_10+0x40>
		Tptr1();
    154e:	e0 91 d5 00 	lds	r30, 0x00D5
    1552:	f0 91 d6 00 	lds	r31, 0x00D6
    1556:	09 95       	icall
	}
}
    1558:	cf 91       	pop	r28
    155a:	df 91       	pop	r29
    155c:	ff 91       	pop	r31
    155e:	ef 91       	pop	r30
    1560:	bf 91       	pop	r27
    1562:	af 91       	pop	r26
    1564:	9f 91       	pop	r25
    1566:	8f 91       	pop	r24
    1568:	7f 91       	pop	r23
    156a:	6f 91       	pop	r22
    156c:	5f 91       	pop	r21
    156e:	4f 91       	pop	r20
    1570:	3f 91       	pop	r19
    1572:	2f 91       	pop	r18
    1574:	0f 90       	pop	r0
    1576:	0f be       	out	0x3f, r0	; 63
    1578:	0f 90       	pop	r0
    157a:	1f 90       	pop	r1
    157c:	18 95       	reti

0000157e <__vector_11>:
ISR(TIMER0_OVF_vect){
    157e:	1f 92       	push	r1
    1580:	0f 92       	push	r0
    1582:	0f b6       	in	r0, 0x3f	; 63
    1584:	0f 92       	push	r0
    1586:	11 24       	eor	r1, r1
    1588:	2f 93       	push	r18
    158a:	3f 93       	push	r19
    158c:	4f 93       	push	r20
    158e:	5f 93       	push	r21
    1590:	6f 93       	push	r22
    1592:	7f 93       	push	r23
    1594:	8f 93       	push	r24
    1596:	9f 93       	push	r25
    1598:	af 93       	push	r26
    159a:	bf 93       	push	r27
    159c:	ef 93       	push	r30
    159e:	ff 93       	push	r31
    15a0:	df 93       	push	r29
    15a2:	cf 93       	push	r28
    15a4:	cd b7       	in	r28, 0x3d	; 61
    15a6:	de b7       	in	r29, 0x3e	; 62
	if(Tptr2!='\0'){
    15a8:	80 91 d7 00 	lds	r24, 0x00D7
    15ac:	90 91 d8 00 	lds	r25, 0x00D8
    15b0:	00 97       	sbiw	r24, 0x00	; 0
    15b2:	29 f0       	breq	.+10     	; 0x15be <__vector_11+0x40>
		Tptr2();
    15b4:	e0 91 d7 00 	lds	r30, 0x00D7
    15b8:	f0 91 d8 00 	lds	r31, 0x00D8
    15bc:	09 95       	icall
	}
}
    15be:	cf 91       	pop	r28
    15c0:	df 91       	pop	r29
    15c2:	ff 91       	pop	r31
    15c4:	ef 91       	pop	r30
    15c6:	bf 91       	pop	r27
    15c8:	af 91       	pop	r26
    15ca:	9f 91       	pop	r25
    15cc:	8f 91       	pop	r24
    15ce:	7f 91       	pop	r23
    15d0:	6f 91       	pop	r22
    15d2:	5f 91       	pop	r21
    15d4:	4f 91       	pop	r20
    15d6:	3f 91       	pop	r19
    15d8:	2f 91       	pop	r18
    15da:	0f 90       	pop	r0
    15dc:	0f be       	out	0x3f, r0	; 63
    15de:	0f 90       	pop	r0
    15e0:	1f 90       	pop	r1
    15e2:	18 95       	reti

000015e4 <SPI_vInit>:
 */
#include "SPI.h"

void(*Sptr)(void)='\0';

void SPI_vInit(){
    15e4:	df 93       	push	r29
    15e6:	cf 93       	push	r28
    15e8:	cd b7       	in	r28, 0x3d	; 61
    15ea:	de b7       	in	r29, 0x3e	; 62
		CLR_BIT(DDRB,4);
		CLR_BIT(DDRB,5);
		SET_BIT(DDRB,6);
		CLR_BIT(DDRB,7);
	#elif SPIMode==SPIMaster
		SPCR=0b00110000|SPIPrescaler;
    15ec:	ed e2       	ldi	r30, 0x2D	; 45
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	84 e3       	ldi	r24, 0x34	; 52
    15f2:	80 83       	st	Z, r24
		CLR_BIT(SPSR,0);
    15f4:	ae e2       	ldi	r26, 0x2E	; 46
    15f6:	b0 e0       	ldi	r27, 0x00	; 0
    15f8:	ee e2       	ldi	r30, 0x2E	; 46
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	80 81       	ld	r24, Z
    15fe:	8e 7f       	andi	r24, 0xFE	; 254
    1600:	8c 93       	st	X, r24
		SET_BIT(DDRB,4);
    1602:	a7 e3       	ldi	r26, 0x37	; 55
    1604:	b0 e0       	ldi	r27, 0x00	; 0
    1606:	e7 e3       	ldi	r30, 0x37	; 55
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	80 81       	ld	r24, Z
    160c:	80 61       	ori	r24, 0x10	; 16
    160e:	8c 93       	st	X, r24
		SET_BIT(DDRB,5);
    1610:	a7 e3       	ldi	r26, 0x37	; 55
    1612:	b0 e0       	ldi	r27, 0x00	; 0
    1614:	e7 e3       	ldi	r30, 0x37	; 55
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	80 81       	ld	r24, Z
    161a:	80 62       	ori	r24, 0x20	; 32
    161c:	8c 93       	st	X, r24
		CLR_BIT(DDRB,6);
    161e:	a7 e3       	ldi	r26, 0x37	; 55
    1620:	b0 e0       	ldi	r27, 0x00	; 0
    1622:	e7 e3       	ldi	r30, 0x37	; 55
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	80 81       	ld	r24, Z
    1628:	8f 7b       	andi	r24, 0xBF	; 191
    162a:	8c 93       	st	X, r24
		SET_BIT(DDRB,7);
    162c:	a7 e3       	ldi	r26, 0x37	; 55
    162e:	b0 e0       	ldi	r27, 0x00	; 0
    1630:	e7 e3       	ldi	r30, 0x37	; 55
    1632:	f0 e0       	ldi	r31, 0x00	; 0
    1634:	80 81       	ld	r24, Z
    1636:	80 68       	ori	r24, 0x80	; 128
    1638:	8c 93       	st	X, r24

		SET_BIT(SPCR,6);
    163a:	ad e2       	ldi	r26, 0x2D	; 45
    163c:	b0 e0       	ldi	r27, 0x00	; 0
    163e:	ed e2       	ldi	r30, 0x2D	; 45
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	80 81       	ld	r24, Z
    1644:	80 64       	ori	r24, 0x40	; 64
    1646:	8c 93       	st	X, r24
		CLR_BIT(DDRB,6);
		SET_BIT(DDRB,7);
	#endif
#endif

}
    1648:	cf 91       	pop	r28
    164a:	df 91       	pop	r29
    164c:	08 95       	ret

0000164e <SPI_vMasterWrite>:
void SPI_vMasterWrite(u8 Loc_WriteData){
    164e:	df 93       	push	r29
    1650:	cf 93       	push	r28
    1652:	0f 92       	push	r0
    1654:	cd b7       	in	r28, 0x3d	; 61
    1656:	de b7       	in	r29, 0x3e	; 62
    1658:	89 83       	std	Y+1, r24	; 0x01
	SPDR=Loc_WriteData;
    165a:	ef e2       	ldi	r30, 0x2F	; 47
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	89 81       	ldd	r24, Y+1	; 0x01
    1660:	80 83       	st	Z, r24
	while(!GET_BIT(SPSR,7));
    1662:	ee e2       	ldi	r30, 0x2E	; 46
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	80 81       	ld	r24, Z
    1668:	88 23       	and	r24, r24
    166a:	dc f7       	brge	.-10     	; 0x1662 <SPI_vMasterWrite+0x14>
}
    166c:	0f 90       	pop	r0
    166e:	cf 91       	pop	r28
    1670:	df 91       	pop	r29
    1672:	08 95       	ret

00001674 <SPI_vMasterReadWrite>:

void SPI_vMasterReadWrite(u8 Loc_WriteData,u8 *Loc_ReadData){
    1674:	df 93       	push	r29
    1676:	cf 93       	push	r28
    1678:	00 d0       	rcall	.+0      	; 0x167a <SPI_vMasterReadWrite+0x6>
    167a:	0f 92       	push	r0
    167c:	cd b7       	in	r28, 0x3d	; 61
    167e:	de b7       	in	r29, 0x3e	; 62
    1680:	89 83       	std	Y+1, r24	; 0x01
    1682:	7b 83       	std	Y+3, r23	; 0x03
    1684:	6a 83       	std	Y+2, r22	; 0x02
	SPDR=Loc_WriteData;
    1686:	ef e2       	ldi	r30, 0x2F	; 47
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	89 81       	ldd	r24, Y+1	; 0x01
    168c:	80 83       	st	Z, r24
	while(!GET_BIT(SPSR,7));
    168e:	ee e2       	ldi	r30, 0x2E	; 46
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	80 81       	ld	r24, Z
    1694:	88 23       	and	r24, r24
    1696:	dc f7       	brge	.-10     	; 0x168e <SPI_vMasterReadWrite+0x1a>
	*Loc_ReadData = SPDR;
    1698:	ef e2       	ldi	r30, 0x2F	; 47
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	80 81       	ld	r24, Z
    169e:	ea 81       	ldd	r30, Y+2	; 0x02
    16a0:	fb 81       	ldd	r31, Y+3	; 0x03
    16a2:	80 83       	st	Z, r24
}
    16a4:	0f 90       	pop	r0
    16a6:	0f 90       	pop	r0
    16a8:	0f 90       	pop	r0
    16aa:	cf 91       	pop	r28
    16ac:	df 91       	pop	r29
    16ae:	08 95       	ret

000016b0 <SPI_vSlaveRead>:

void SPI_vSlaveRead(u8 *Loc_ReadData){
    16b0:	df 93       	push	r29
    16b2:	cf 93       	push	r28
    16b4:	00 d0       	rcall	.+0      	; 0x16b6 <SPI_vSlaveRead+0x6>
    16b6:	cd b7       	in	r28, 0x3d	; 61
    16b8:	de b7       	in	r29, 0x3e	; 62
    16ba:	9a 83       	std	Y+2, r25	; 0x02
    16bc:	89 83       	std	Y+1, r24	; 0x01
	while(!GET_BIT(SPSR,7));
    16be:	ee e2       	ldi	r30, 0x2E	; 46
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	80 81       	ld	r24, Z
    16c4:	88 23       	and	r24, r24
    16c6:	dc f7       	brge	.-10     	; 0x16be <SPI_vSlaveRead+0xe>
	*Loc_ReadData = SPDR;
    16c8:	ef e2       	ldi	r30, 0x2F	; 47
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	80 81       	ld	r24, Z
    16ce:	e9 81       	ldd	r30, Y+1	; 0x01
    16d0:	fa 81       	ldd	r31, Y+2	; 0x02
    16d2:	80 83       	st	Z, r24
}
    16d4:	0f 90       	pop	r0
    16d6:	0f 90       	pop	r0
    16d8:	cf 91       	pop	r28
    16da:	df 91       	pop	r29
    16dc:	08 95       	ret

000016de <SPI_vTransferCompleteInterruptEnable>:
void SPI_vTransferCompleteInterruptEnable(void(*ptr)(void)){
    16de:	df 93       	push	r29
    16e0:	cf 93       	push	r28
    16e2:	00 d0       	rcall	.+0      	; 0x16e4 <SPI_vTransferCompleteInterruptEnable+0x6>
    16e4:	cd b7       	in	r28, 0x3d	; 61
    16e6:	de b7       	in	r29, 0x3e	; 62
    16e8:	9a 83       	std	Y+2, r25	; 0x02
    16ea:	89 83       	std	Y+1, r24	; 0x01
	if(ptr!='\0'){
    16ec:	89 81       	ldd	r24, Y+1	; 0x01
    16ee:	9a 81       	ldd	r25, Y+2	; 0x02
    16f0:	00 97       	sbiw	r24, 0x00	; 0
    16f2:	31 f0       	breq	.+12     	; 0x1700 <SPI_vTransferCompleteInterruptEnable+0x22>
		Sptr=ptr;
    16f4:	89 81       	ldd	r24, Y+1	; 0x01
    16f6:	9a 81       	ldd	r25, Y+2	; 0x02
    16f8:	90 93 da 00 	sts	0x00DA, r25
    16fc:	80 93 d9 00 	sts	0x00D9, r24
	}
}
    1700:	0f 90       	pop	r0
    1702:	0f 90       	pop	r0
    1704:	cf 91       	pop	r28
    1706:	df 91       	pop	r29
    1708:	08 95       	ret

0000170a <__vector_12>:
ISR(SPI_STC_vect){
    170a:	1f 92       	push	r1
    170c:	0f 92       	push	r0
    170e:	0f b6       	in	r0, 0x3f	; 63
    1710:	0f 92       	push	r0
    1712:	11 24       	eor	r1, r1
    1714:	2f 93       	push	r18
    1716:	3f 93       	push	r19
    1718:	4f 93       	push	r20
    171a:	5f 93       	push	r21
    171c:	6f 93       	push	r22
    171e:	7f 93       	push	r23
    1720:	8f 93       	push	r24
    1722:	9f 93       	push	r25
    1724:	af 93       	push	r26
    1726:	bf 93       	push	r27
    1728:	ef 93       	push	r30
    172a:	ff 93       	push	r31
    172c:	df 93       	push	r29
    172e:	cf 93       	push	r28
    1730:	cd b7       	in	r28, 0x3d	; 61
    1732:	de b7       	in	r29, 0x3e	; 62
	if(Sptr!='\0'){
    1734:	80 91 d9 00 	lds	r24, 0x00D9
    1738:	90 91 da 00 	lds	r25, 0x00DA
    173c:	00 97       	sbiw	r24, 0x00	; 0
    173e:	29 f0       	breq	.+10     	; 0x174a <__vector_12+0x40>
		Sptr();
    1740:	e0 91 d9 00 	lds	r30, 0x00D9
    1744:	f0 91 da 00 	lds	r31, 0x00DA
    1748:	09 95       	icall
	}
}
    174a:	cf 91       	pop	r28
    174c:	df 91       	pop	r29
    174e:	ff 91       	pop	r31
    1750:	ef 91       	pop	r30
    1752:	bf 91       	pop	r27
    1754:	af 91       	pop	r26
    1756:	9f 91       	pop	r25
    1758:	8f 91       	pop	r24
    175a:	7f 91       	pop	r23
    175c:	6f 91       	pop	r22
    175e:	5f 91       	pop	r21
    1760:	4f 91       	pop	r20
    1762:	3f 91       	pop	r19
    1764:	2f 91       	pop	r18
    1766:	0f 90       	pop	r0
    1768:	0f be       	out	0x3f, r0	; 63
    176a:	0f 90       	pop	r0
    176c:	1f 90       	pop	r1
    176e:	18 95       	reti

00001770 <I2C_vInit>:
 *      Author: a7med
 */

#include "I2C.h"

void I2C_vInit(){
    1770:	df 93       	push	r29
    1772:	cf 93       	push	r28
    1774:	cd b7       	in	r28, 0x3d	; 61
    1776:	de b7       	in	r29, 0x3e	; 62
#if I2CMode==I2CSlave

#elif I2CMode==I2CMaster
	SET_BIT(DDRC,1);
    1778:	a4 e3       	ldi	r26, 0x34	; 52
    177a:	b0 e0       	ldi	r27, 0x00	; 0
    177c:	e4 e3       	ldi	r30, 0x34	; 52
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	80 81       	ld	r24, Z
    1782:	82 60       	ori	r24, 0x02	; 2
    1784:	8c 93       	st	X, r24
	SET_BIT(DDRC,0);
    1786:	a4 e3       	ldi	r26, 0x34	; 52
    1788:	b0 e0       	ldi	r27, 0x00	; 0
    178a:	e4 e3       	ldi	r30, 0x34	; 52
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	80 81       	ld	r24, Z
    1790:	81 60       	ori	r24, 0x01	; 1
    1792:	8c 93       	st	X, r24

	SET_BIT(TWCR,6);
    1794:	a6 e5       	ldi	r26, 0x56	; 86
    1796:	b0 e0       	ldi	r27, 0x00	; 0
    1798:	e6 e5       	ldi	r30, 0x56	; 86
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	80 81       	ld	r24, Z
    179e:	80 64       	ori	r24, 0x40	; 64
    17a0:	8c 93       	st	X, r24
	CLR_BIT(TWSR,0);
    17a2:	a1 e2       	ldi	r26, 0x21	; 33
    17a4:	b0 e0       	ldi	r27, 0x00	; 0
    17a6:	e1 e2       	ldi	r30, 0x21	; 33
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	80 81       	ld	r24, Z
    17ac:	8e 7f       	andi	r24, 0xFE	; 254
    17ae:	8c 93       	st	X, r24
	CLR_BIT(TWSR,1);
    17b0:	a1 e2       	ldi	r26, 0x21	; 33
    17b2:	b0 e0       	ldi	r27, 0x00	; 0
    17b4:	e1 e2       	ldi	r30, 0x21	; 33
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	80 81       	ld	r24, Z
    17ba:	8d 7f       	andi	r24, 0xFD	; 253
    17bc:	8c 93       	st	X, r24
	TWBR=0x0C;
    17be:	e0 e2       	ldi	r30, 0x20	; 32
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	8c e0       	ldi	r24, 0x0C	; 12
    17c4:	80 83       	st	Z, r24
#endif
}
    17c6:	cf 91       	pop	r28
    17c8:	df 91       	pop	r29
    17ca:	08 95       	ret

000017cc <I2C_vSendStart>:
void I2C_vSendStart(){
    17cc:	df 93       	push	r29
    17ce:	cf 93       	push	r28
    17d0:	cd b7       	in	r28, 0x3d	; 61
    17d2:	de b7       	in	r29, 0x3e	; 62
	while((GET_BIT(TWCR,7) !=0));
    17d4:	e6 e5       	ldi	r30, 0x56	; 86
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	80 81       	ld	r24, Z
    17da:	88 23       	and	r24, r24
    17dc:	dc f3       	brlt	.-10     	; 0x17d4 <I2C_vSendStart+0x8>
	SET_BIT(TWCR,2);
    17de:	a6 e5       	ldi	r26, 0x56	; 86
    17e0:	b0 e0       	ldi	r27, 0x00	; 0
    17e2:	e6 e5       	ldi	r30, 0x56	; 86
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	80 81       	ld	r24, Z
    17e8:	84 60       	ori	r24, 0x04	; 4
    17ea:	8c 93       	st	X, r24

	SET_BIT(TWCR,5);
    17ec:	a6 e5       	ldi	r26, 0x56	; 86
    17ee:	b0 e0       	ldi	r27, 0x00	; 0
    17f0:	e6 e5       	ldi	r30, 0x56	; 86
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	80 81       	ld	r24, Z
    17f6:	80 62       	ori	r24, 0x20	; 32
    17f8:	8c 93       	st	X, r24
	CLR_BIT(TWCR,7);
    17fa:	a6 e5       	ldi	r26, 0x56	; 86
    17fc:	b0 e0       	ldi	r27, 0x00	; 0
    17fe:	e6 e5       	ldi	r30, 0x56	; 86
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	80 81       	ld	r24, Z
    1804:	8f 77       	andi	r24, 0x7F	; 127
    1806:	8c 93       	st	X, r24
}
    1808:	cf 91       	pop	r28
    180a:	df 91       	pop	r29
    180c:	08 95       	ret

0000180e <I2C_vSendStop>:
void I2C_vSendStop(){
    180e:	df 93       	push	r29
    1810:	cf 93       	push	r28
    1812:	cd b7       	in	r28, 0x3d	; 61
    1814:	de b7       	in	r29, 0x3e	; 62
	while((GET_BIT(TWCR,7) !=0));
    1816:	e6 e5       	ldi	r30, 0x56	; 86
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	80 81       	ld	r24, Z
    181c:	88 23       	and	r24, r24
    181e:	dc f3       	brlt	.-10     	; 0x1816 <I2C_vSendStop+0x8>
	SET_BIT(TWCR,2);
    1820:	a6 e5       	ldi	r26, 0x56	; 86
    1822:	b0 e0       	ldi	r27, 0x00	; 0
    1824:	e6 e5       	ldi	r30, 0x56	; 86
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	80 81       	ld	r24, Z
    182a:	84 60       	ori	r24, 0x04	; 4
    182c:	8c 93       	st	X, r24

	SET_BIT(TWCR,4);
    182e:	a6 e5       	ldi	r26, 0x56	; 86
    1830:	b0 e0       	ldi	r27, 0x00	; 0
    1832:	e6 e5       	ldi	r30, 0x56	; 86
    1834:	f0 e0       	ldi	r31, 0x00	; 0
    1836:	80 81       	ld	r24, Z
    1838:	80 61       	ori	r24, 0x10	; 16
    183a:	8c 93       	st	X, r24
	CLR_BIT(TWCR,7);
    183c:	a6 e5       	ldi	r26, 0x56	; 86
    183e:	b0 e0       	ldi	r27, 0x00	; 0
    1840:	e6 e5       	ldi	r30, 0x56	; 86
    1842:	f0 e0       	ldi	r31, 0x00	; 0
    1844:	80 81       	ld	r24, Z
    1846:	8f 77       	andi	r24, 0x7F	; 127
    1848:	8c 93       	st	X, r24
}
    184a:	cf 91       	pop	r28
    184c:	df 91       	pop	r29
    184e:	08 95       	ret

00001850 <I2C_vSendSlaveAdress>:
void I2C_vSendSlaveAdress(u8 Loc_SlaveAdress){
    1850:	df 93       	push	r29
    1852:	cf 93       	push	r28
    1854:	0f 92       	push	r0
    1856:	cd b7       	in	r28, 0x3d	; 61
    1858:	de b7       	in	r29, 0x3e	; 62
    185a:	89 83       	std	Y+1, r24	; 0x01
	while((GET_BIT(TWCR,7) !=0));
    185c:	e6 e5       	ldi	r30, 0x56	; 86
    185e:	f0 e0       	ldi	r31, 0x00	; 0
    1860:	80 81       	ld	r24, Z
    1862:	88 23       	and	r24, r24
    1864:	dc f3       	brlt	.-10     	; 0x185c <I2C_vSendSlaveAdress+0xc>
	SET_BIT(TWCR,2);
    1866:	a6 e5       	ldi	r26, 0x56	; 86
    1868:	b0 e0       	ldi	r27, 0x00	; 0
    186a:	e6 e5       	ldi	r30, 0x56	; 86
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	80 81       	ld	r24, Z
    1870:	84 60       	ori	r24, 0x04	; 4
    1872:	8c 93       	st	X, r24

	TWDR=Loc_SlaveAdress; //frist bit is for read or write
    1874:	e3 e2       	ldi	r30, 0x23	; 35
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	89 81       	ldd	r24, Y+1	; 0x01
    187a:	80 83       	st	Z, r24
	CLR_BIT(TWCR,7);
    187c:	a6 e5       	ldi	r26, 0x56	; 86
    187e:	b0 e0       	ldi	r27, 0x00	; 0
    1880:	e6 e5       	ldi	r30, 0x56	; 86
    1882:	f0 e0       	ldi	r31, 0x00	; 0
    1884:	80 81       	ld	r24, Z
    1886:	8f 77       	andi	r24, 0x7F	; 127
    1888:	8c 93       	st	X, r24
}
    188a:	0f 90       	pop	r0
    188c:	cf 91       	pop	r28
    188e:	df 91       	pop	r29
    1890:	08 95       	ret

00001892 <I2C_SendData>:
void I2C_SendData(u8 Loc_Data){
    1892:	df 93       	push	r29
    1894:	cf 93       	push	r28
    1896:	0f 92       	push	r0
    1898:	cd b7       	in	r28, 0x3d	; 61
    189a:	de b7       	in	r29, 0x3e	; 62
    189c:	89 83       	std	Y+1, r24	; 0x01
	while((GET_BIT(TWCR,7) !=0));
    189e:	e6 e5       	ldi	r30, 0x56	; 86
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	80 81       	ld	r24, Z
    18a4:	88 23       	and	r24, r24
    18a6:	dc f3       	brlt	.-10     	; 0x189e <I2C_SendData+0xc>
	SET_BIT(TWCR,2);
    18a8:	a6 e5       	ldi	r26, 0x56	; 86
    18aa:	b0 e0       	ldi	r27, 0x00	; 0
    18ac:	e6 e5       	ldi	r30, 0x56	; 86
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	80 81       	ld	r24, Z
    18b2:	84 60       	ori	r24, 0x04	; 4
    18b4:	8c 93       	st	X, r24

	TWDR=Loc_Data;
    18b6:	e3 e2       	ldi	r30, 0x23	; 35
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	89 81       	ldd	r24, Y+1	; 0x01
    18bc:	80 83       	st	Z, r24
	CLR_BIT(TWCR,7);
    18be:	a6 e5       	ldi	r26, 0x56	; 86
    18c0:	b0 e0       	ldi	r27, 0x00	; 0
    18c2:	e6 e5       	ldi	r30, 0x56	; 86
    18c4:	f0 e0       	ldi	r31, 0x00	; 0
    18c6:	80 81       	ld	r24, Z
    18c8:	8f 77       	andi	r24, 0x7F	; 127
    18ca:	8c 93       	st	X, r24
}
    18cc:	0f 90       	pop	r0
    18ce:	cf 91       	pop	r28
    18d0:	df 91       	pop	r29
    18d2:	08 95       	ret

000018d4 <I2C_vReadData>:
void I2C_vReadData(u8* ptr){
    18d4:	df 93       	push	r29
    18d6:	cf 93       	push	r28
    18d8:	00 d0       	rcall	.+0      	; 0x18da <I2C_vReadData+0x6>
    18da:	cd b7       	in	r28, 0x3d	; 61
    18dc:	de b7       	in	r29, 0x3e	; 62
    18de:	9a 83       	std	Y+2, r25	; 0x02
    18e0:	89 83       	std	Y+1, r24	; 0x01
	while((GET_BIT(TWCR,7) !=0));
    18e2:	e6 e5       	ldi	r30, 0x56	; 86
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	80 81       	ld	r24, Z
    18e8:	88 23       	and	r24, r24
    18ea:	dc f3       	brlt	.-10     	; 0x18e2 <I2C_vReadData+0xe>
	SET_BIT(TWCR,2);
    18ec:	a6 e5       	ldi	r26, 0x56	; 86
    18ee:	b0 e0       	ldi	r27, 0x00	; 0
    18f0:	e6 e5       	ldi	r30, 0x56	; 86
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	80 81       	ld	r24, Z
    18f6:	84 60       	ori	r24, 0x04	; 4
    18f8:	8c 93       	st	X, r24

	*ptr=TWDR;
    18fa:	e3 e2       	ldi	r30, 0x23	; 35
    18fc:	f0 e0       	ldi	r31, 0x00	; 0
    18fe:	80 81       	ld	r24, Z
    1900:	e9 81       	ldd	r30, Y+1	; 0x01
    1902:	fa 81       	ldd	r31, Y+2	; 0x02
    1904:	80 83       	st	Z, r24
	CLR_BIT(TWCR,7);
    1906:	a6 e5       	ldi	r26, 0x56	; 86
    1908:	b0 e0       	ldi	r27, 0x00	; 0
    190a:	e6 e5       	ldi	r30, 0x56	; 86
    190c:	f0 e0       	ldi	r31, 0x00	; 0
    190e:	80 81       	ld	r24, Z
    1910:	8f 77       	andi	r24, 0x7F	; 127
    1912:	8c 93       	st	X, r24
}
    1914:	0f 90       	pop	r0
    1916:	0f 90       	pop	r0
    1918:	cf 91       	pop	r28
    191a:	df 91       	pop	r29
    191c:	08 95       	ret

0000191e <EXTI_vEnableGIE>:
#include "EXTI.h"

void(*Gptr0)(void)='\0';
void(*Gptr1)(void)='\0';
void(*Gptr2)(void)='\0';
void EXTI_vEnableGIE(void){
    191e:	df 93       	push	r29
    1920:	cf 93       	push	r28
    1922:	cd b7       	in	r28, 0x3d	; 61
    1924:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
    1926:	af e5       	ldi	r26, 0x5F	; 95
    1928:	b0 e0       	ldi	r27, 0x00	; 0
    192a:	ef e5       	ldi	r30, 0x5F	; 95
    192c:	f0 e0       	ldi	r31, 0x00	; 0
    192e:	80 81       	ld	r24, Z
    1930:	80 68       	ori	r24, 0x80	; 128
    1932:	8c 93       	st	X, r24
}
    1934:	cf 91       	pop	r28
    1936:	df 91       	pop	r29
    1938:	08 95       	ret

0000193a <EXTI_vEnablePIE>:
void EXTI_vEnablePIE(u8 Loc_u8InterruptNumber){
    193a:	df 93       	push	r29
    193c:	cf 93       	push	r28
    193e:	0f 92       	push	r0
    1940:	cd b7       	in	r28, 0x3d	; 61
    1942:	de b7       	in	r29, 0x3e	; 62
    1944:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8InterruptNumber<=INT2){
    1946:	89 81       	ldd	r24, Y+1	; 0x01
    1948:	83 30       	cpi	r24, 0x03	; 3
    194a:	00 f5       	brcc	.+64     	; 0x198c <EXTI_vEnablePIE+0x52>
		if(Loc_u8InterruptNumber==INT0){
    194c:	89 81       	ldd	r24, Y+1	; 0x01
    194e:	88 23       	and	r24, r24
    1950:	41 f4       	brne	.+16     	; 0x1962 <EXTI_vEnablePIE+0x28>
			SET_BIT(GICR,6);
    1952:	ab e5       	ldi	r26, 0x5B	; 91
    1954:	b0 e0       	ldi	r27, 0x00	; 0
    1956:	eb e5       	ldi	r30, 0x5B	; 91
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	80 81       	ld	r24, Z
    195c:	80 64       	ori	r24, 0x40	; 64
    195e:	8c 93       	st	X, r24
    1960:	15 c0       	rjmp	.+42     	; 0x198c <EXTI_vEnablePIE+0x52>
		}
		else if(Loc_u8InterruptNumber==INT1){
    1962:	89 81       	ldd	r24, Y+1	; 0x01
    1964:	81 30       	cpi	r24, 0x01	; 1
    1966:	41 f4       	brne	.+16     	; 0x1978 <EXTI_vEnablePIE+0x3e>
			SET_BIT(GICR,7);
    1968:	ab e5       	ldi	r26, 0x5B	; 91
    196a:	b0 e0       	ldi	r27, 0x00	; 0
    196c:	eb e5       	ldi	r30, 0x5B	; 91
    196e:	f0 e0       	ldi	r31, 0x00	; 0
    1970:	80 81       	ld	r24, Z
    1972:	80 68       	ori	r24, 0x80	; 128
    1974:	8c 93       	st	X, r24
    1976:	0a c0       	rjmp	.+20     	; 0x198c <EXTI_vEnablePIE+0x52>
		}
		else if(Loc_u8InterruptNumber==INT2){
    1978:	89 81       	ldd	r24, Y+1	; 0x01
    197a:	82 30       	cpi	r24, 0x02	; 2
    197c:	39 f4       	brne	.+14     	; 0x198c <EXTI_vEnablePIE+0x52>
			SET_BIT(GICR,5);
    197e:	ab e5       	ldi	r26, 0x5B	; 91
    1980:	b0 e0       	ldi	r27, 0x00	; 0
    1982:	eb e5       	ldi	r30, 0x5B	; 91
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	80 81       	ld	r24, Z
    1988:	80 62       	ori	r24, 0x20	; 32
    198a:	8c 93       	st	X, r24
		}
	}
	else {
		//do nothing
	}
}
    198c:	0f 90       	pop	r0
    198e:	cf 91       	pop	r28
    1990:	df 91       	pop	r29
    1992:	08 95       	ret

00001994 <EXIT_vReadPIF>:
u8 EXIT_vReadPIF(u8 Loc_u8InterruptNumber){
    1994:	df 93       	push	r29
    1996:	cf 93       	push	r28
    1998:	00 d0       	rcall	.+0      	; 0x199a <EXIT_vReadPIF+0x6>
    199a:	cd b7       	in	r28, 0x3d	; 61
    199c:	de b7       	in	r29, 0x3e	; 62
    199e:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8InterruptNumber<=INT2){
    19a0:	89 81       	ldd	r24, Y+1	; 0x01
    19a2:	83 30       	cpi	r24, 0x03	; 3
    19a4:	38 f5       	brcc	.+78     	; 0x19f4 <EXIT_vReadPIF+0x60>
			if(Loc_u8InterruptNumber==INT0){
    19a6:	89 81       	ldd	r24, Y+1	; 0x01
    19a8:	88 23       	and	r24, r24
    19aa:	59 f4       	brne	.+22     	; 0x19c2 <EXIT_vReadPIF+0x2e>
				return GET_BIT(GIFR,6);
    19ac:	ea e5       	ldi	r30, 0x5A	; 90
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	80 81       	ld	r24, Z
    19b2:	82 95       	swap	r24
    19b4:	86 95       	lsr	r24
    19b6:	86 95       	lsr	r24
    19b8:	83 70       	andi	r24, 0x03	; 3
    19ba:	98 2f       	mov	r25, r24
    19bc:	91 70       	andi	r25, 0x01	; 1
    19be:	9a 83       	std	Y+2, r25	; 0x02
    19c0:	1b c0       	rjmp	.+54     	; 0x19f8 <EXIT_vReadPIF+0x64>
			}
			else if(Loc_u8InterruptNumber==INT1){
    19c2:	89 81       	ldd	r24, Y+1	; 0x01
    19c4:	81 30       	cpi	r24, 0x01	; 1
    19c6:	49 f4       	brne	.+18     	; 0x19da <EXIT_vReadPIF+0x46>
				return GET_BIT(GIFR,7);
    19c8:	ea e5       	ldi	r30, 0x5A	; 90
    19ca:	f0 e0       	ldi	r31, 0x00	; 0
    19cc:	80 81       	ld	r24, Z
    19ce:	98 2f       	mov	r25, r24
    19d0:	99 1f       	adc	r25, r25
    19d2:	99 27       	eor	r25, r25
    19d4:	99 1f       	adc	r25, r25
    19d6:	9a 83       	std	Y+2, r25	; 0x02
    19d8:	0f c0       	rjmp	.+30     	; 0x19f8 <EXIT_vReadPIF+0x64>
			}
			else if(Loc_u8InterruptNumber==INT2){
    19da:	89 81       	ldd	r24, Y+1	; 0x01
    19dc:	82 30       	cpi	r24, 0x02	; 2
    19de:	51 f4       	brne	.+20     	; 0x19f4 <EXIT_vReadPIF+0x60>
				return GET_BIT(GIFR,5);
    19e0:	ea e5       	ldi	r30, 0x5A	; 90
    19e2:	f0 e0       	ldi	r31, 0x00	; 0
    19e4:	80 81       	ld	r24, Z
    19e6:	82 95       	swap	r24
    19e8:	86 95       	lsr	r24
    19ea:	87 70       	andi	r24, 0x07	; 7
    19ec:	98 2f       	mov	r25, r24
    19ee:	91 70       	andi	r25, 0x01	; 1
    19f0:	9a 83       	std	Y+2, r25	; 0x02
    19f2:	02 c0       	rjmp	.+4      	; 0x19f8 <EXIT_vReadPIF+0x64>
			}
		}
		else {
			//do nothing
		}
	return 0xff;
    19f4:	8f ef       	ldi	r24, 0xFF	; 255
    19f6:	8a 83       	std	Y+2, r24	; 0x02
    19f8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    19fa:	0f 90       	pop	r0
    19fc:	0f 90       	pop	r0
    19fe:	cf 91       	pop	r28
    1a00:	df 91       	pop	r29
    1a02:	08 95       	ret

00001a04 <EXTI_vSenseControl>:
void EXTI_vSenseControl(u8 Loc_u8InterruptNumber,u8 Loc_u8Mode){
    1a04:	df 93       	push	r29
    1a06:	cf 93       	push	r28
    1a08:	00 d0       	rcall	.+0      	; 0x1a0a <EXTI_vSenseControl+0x6>
    1a0a:	cd b7       	in	r28, 0x3d	; 61
    1a0c:	de b7       	in	r29, 0x3e	; 62
    1a0e:	89 83       	std	Y+1, r24	; 0x01
    1a10:	6a 83       	std	Y+2, r22	; 0x02

	if (Loc_u8InterruptNumber<=INT2){
    1a12:	89 81       	ldd	r24, Y+1	; 0x01
    1a14:	83 30       	cpi	r24, 0x03	; 3
    1a16:	08 f0       	brcs	.+2      	; 0x1a1a <EXTI_vSenseControl+0x16>
    1a18:	bf c0       	rjmp	.+382    	; 0x1b98 <EXTI_vSenseControl+0x194>
		if(Loc_u8InterruptNumber==INT0){
    1a1a:	89 81       	ldd	r24, Y+1	; 0x01
    1a1c:	88 23       	and	r24, r24
    1a1e:	09 f0       	breq	.+2      	; 0x1a22 <EXTI_vSenseControl+0x1e>
    1a20:	4d c0       	rjmp	.+154    	; 0x1abc <EXTI_vSenseControl+0xb8>
			if(Loc_u8Mode<=Falling_Edge){
    1a22:	8a 81       	ldd	r24, Y+2	; 0x02
    1a24:	84 30       	cpi	r24, 0x04	; 4
    1a26:	08 f0       	brcs	.+2      	; 0x1a2a <EXTI_vSenseControl+0x26>
    1a28:	b7 c0       	rjmp	.+366    	; 0x1b98 <EXTI_vSenseControl+0x194>
				if(Loc_u8Mode==Low_Level){
    1a2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2c:	88 23       	and	r24, r24
    1a2e:	79 f4       	brne	.+30     	; 0x1a4e <EXTI_vSenseControl+0x4a>
					CLR_BIT(MCUCR,0);
    1a30:	a5 e5       	ldi	r26, 0x55	; 85
    1a32:	b0 e0       	ldi	r27, 0x00	; 0
    1a34:	e5 e5       	ldi	r30, 0x55	; 85
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	80 81       	ld	r24, Z
    1a3a:	8e 7f       	andi	r24, 0xFE	; 254
    1a3c:	8c 93       	st	X, r24
					CLR_BIT(MCUCR,1);
    1a3e:	a5 e5       	ldi	r26, 0x55	; 85
    1a40:	b0 e0       	ldi	r27, 0x00	; 0
    1a42:	e5 e5       	ldi	r30, 0x55	; 85
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	80 81       	ld	r24, Z
    1a48:	8d 7f       	andi	r24, 0xFD	; 253
    1a4a:	8c 93       	st	X, r24
    1a4c:	a5 c0       	rjmp	.+330    	; 0x1b98 <EXTI_vSenseControl+0x194>
				}
				else if(Loc_u8Mode==Any_Change){
    1a4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a50:	81 30       	cpi	r24, 0x01	; 1
    1a52:	79 f4       	brne	.+30     	; 0x1a72 <EXTI_vSenseControl+0x6e>
					SET_BIT(MCUCR,0);
    1a54:	a5 e5       	ldi	r26, 0x55	; 85
    1a56:	b0 e0       	ldi	r27, 0x00	; 0
    1a58:	e5 e5       	ldi	r30, 0x55	; 85
    1a5a:	f0 e0       	ldi	r31, 0x00	; 0
    1a5c:	80 81       	ld	r24, Z
    1a5e:	81 60       	ori	r24, 0x01	; 1
    1a60:	8c 93       	st	X, r24
					CLR_BIT(MCUCR,1);
    1a62:	a5 e5       	ldi	r26, 0x55	; 85
    1a64:	b0 e0       	ldi	r27, 0x00	; 0
    1a66:	e5 e5       	ldi	r30, 0x55	; 85
    1a68:	f0 e0       	ldi	r31, 0x00	; 0
    1a6a:	80 81       	ld	r24, Z
    1a6c:	8d 7f       	andi	r24, 0xFD	; 253
    1a6e:	8c 93       	st	X, r24
    1a70:	93 c0       	rjmp	.+294    	; 0x1b98 <EXTI_vSenseControl+0x194>
				}
				else if(Loc_u8Mode==Rising_Egde){
    1a72:	8a 81       	ldd	r24, Y+2	; 0x02
    1a74:	82 30       	cpi	r24, 0x02	; 2
    1a76:	79 f4       	brne	.+30     	; 0x1a96 <EXTI_vSenseControl+0x92>
					SET_BIT(MCUCR,0);
    1a78:	a5 e5       	ldi	r26, 0x55	; 85
    1a7a:	b0 e0       	ldi	r27, 0x00	; 0
    1a7c:	e5 e5       	ldi	r30, 0x55	; 85
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	80 81       	ld	r24, Z
    1a82:	81 60       	ori	r24, 0x01	; 1
    1a84:	8c 93       	st	X, r24
					SET_BIT(MCUCR,1);
    1a86:	a5 e5       	ldi	r26, 0x55	; 85
    1a88:	b0 e0       	ldi	r27, 0x00	; 0
    1a8a:	e5 e5       	ldi	r30, 0x55	; 85
    1a8c:	f0 e0       	ldi	r31, 0x00	; 0
    1a8e:	80 81       	ld	r24, Z
    1a90:	82 60       	ori	r24, 0x02	; 2
    1a92:	8c 93       	st	X, r24
    1a94:	81 c0       	rjmp	.+258    	; 0x1b98 <EXTI_vSenseControl+0x194>
				}
				else if(Loc_u8Mode==Falling_Edge){
    1a96:	8a 81       	ldd	r24, Y+2	; 0x02
    1a98:	83 30       	cpi	r24, 0x03	; 3
    1a9a:	09 f0       	breq	.+2      	; 0x1a9e <EXTI_vSenseControl+0x9a>
    1a9c:	7d c0       	rjmp	.+250    	; 0x1b98 <EXTI_vSenseControl+0x194>
					CLR_BIT(MCUCR,0);
    1a9e:	a5 e5       	ldi	r26, 0x55	; 85
    1aa0:	b0 e0       	ldi	r27, 0x00	; 0
    1aa2:	e5 e5       	ldi	r30, 0x55	; 85
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	80 81       	ld	r24, Z
    1aa8:	8e 7f       	andi	r24, 0xFE	; 254
    1aaa:	8c 93       	st	X, r24
					SET_BIT(MCUCR,1);
    1aac:	a5 e5       	ldi	r26, 0x55	; 85
    1aae:	b0 e0       	ldi	r27, 0x00	; 0
    1ab0:	e5 e5       	ldi	r30, 0x55	; 85
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	80 81       	ld	r24, Z
    1ab6:	82 60       	ori	r24, 0x02	; 2
    1ab8:	8c 93       	st	X, r24
    1aba:	6e c0       	rjmp	.+220    	; 0x1b98 <EXTI_vSenseControl+0x194>
			else{
				//do nothing
			}
		}

		else if(Loc_u8InterruptNumber==INT1){
    1abc:	89 81       	ldd	r24, Y+1	; 0x01
    1abe:	81 30       	cpi	r24, 0x01	; 1
    1ac0:	09 f0       	breq	.+2      	; 0x1ac4 <EXTI_vSenseControl+0xc0>
    1ac2:	4c c0       	rjmp	.+152    	; 0x1b5c <EXTI_vSenseControl+0x158>
			if(Loc_u8Mode<=Falling_Edge){
    1ac4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac6:	84 30       	cpi	r24, 0x04	; 4
    1ac8:	08 f0       	brcs	.+2      	; 0x1acc <EXTI_vSenseControl+0xc8>
    1aca:	66 c0       	rjmp	.+204    	; 0x1b98 <EXTI_vSenseControl+0x194>
				if(Loc_u8Mode==Low_Level){
    1acc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ace:	88 23       	and	r24, r24
    1ad0:	79 f4       	brne	.+30     	; 0x1af0 <EXTI_vSenseControl+0xec>
					CLR_BIT(MCUCR,2);
    1ad2:	a5 e5       	ldi	r26, 0x55	; 85
    1ad4:	b0 e0       	ldi	r27, 0x00	; 0
    1ad6:	e5 e5       	ldi	r30, 0x55	; 85
    1ad8:	f0 e0       	ldi	r31, 0x00	; 0
    1ada:	80 81       	ld	r24, Z
    1adc:	8b 7f       	andi	r24, 0xFB	; 251
    1ade:	8c 93       	st	X, r24
					CLR_BIT(MCUCR,3);
    1ae0:	a5 e5       	ldi	r26, 0x55	; 85
    1ae2:	b0 e0       	ldi	r27, 0x00	; 0
    1ae4:	e5 e5       	ldi	r30, 0x55	; 85
    1ae6:	f0 e0       	ldi	r31, 0x00	; 0
    1ae8:	80 81       	ld	r24, Z
    1aea:	87 7f       	andi	r24, 0xF7	; 247
    1aec:	8c 93       	st	X, r24
    1aee:	54 c0       	rjmp	.+168    	; 0x1b98 <EXTI_vSenseControl+0x194>
				}
				else if(Loc_u8Mode==Any_Change){
    1af0:	8a 81       	ldd	r24, Y+2	; 0x02
    1af2:	81 30       	cpi	r24, 0x01	; 1
    1af4:	79 f4       	brne	.+30     	; 0x1b14 <EXTI_vSenseControl+0x110>
					SET_BIT(MCUCR,2);
    1af6:	a5 e5       	ldi	r26, 0x55	; 85
    1af8:	b0 e0       	ldi	r27, 0x00	; 0
    1afa:	e5 e5       	ldi	r30, 0x55	; 85
    1afc:	f0 e0       	ldi	r31, 0x00	; 0
    1afe:	80 81       	ld	r24, Z
    1b00:	84 60       	ori	r24, 0x04	; 4
    1b02:	8c 93       	st	X, r24
					CLR_BIT(MCUCR,3);
    1b04:	a5 e5       	ldi	r26, 0x55	; 85
    1b06:	b0 e0       	ldi	r27, 0x00	; 0
    1b08:	e5 e5       	ldi	r30, 0x55	; 85
    1b0a:	f0 e0       	ldi	r31, 0x00	; 0
    1b0c:	80 81       	ld	r24, Z
    1b0e:	87 7f       	andi	r24, 0xF7	; 247
    1b10:	8c 93       	st	X, r24
    1b12:	42 c0       	rjmp	.+132    	; 0x1b98 <EXTI_vSenseControl+0x194>
				}
				else if(Loc_u8Mode==Rising_Egde){
    1b14:	8a 81       	ldd	r24, Y+2	; 0x02
    1b16:	82 30       	cpi	r24, 0x02	; 2
    1b18:	79 f4       	brne	.+30     	; 0x1b38 <EXTI_vSenseControl+0x134>
					SET_BIT(MCUCR,2);
    1b1a:	a5 e5       	ldi	r26, 0x55	; 85
    1b1c:	b0 e0       	ldi	r27, 0x00	; 0
    1b1e:	e5 e5       	ldi	r30, 0x55	; 85
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	80 81       	ld	r24, Z
    1b24:	84 60       	ori	r24, 0x04	; 4
    1b26:	8c 93       	st	X, r24
					SET_BIT(MCUCR,3);
    1b28:	a5 e5       	ldi	r26, 0x55	; 85
    1b2a:	b0 e0       	ldi	r27, 0x00	; 0
    1b2c:	e5 e5       	ldi	r30, 0x55	; 85
    1b2e:	f0 e0       	ldi	r31, 0x00	; 0
    1b30:	80 81       	ld	r24, Z
    1b32:	88 60       	ori	r24, 0x08	; 8
    1b34:	8c 93       	st	X, r24
    1b36:	30 c0       	rjmp	.+96     	; 0x1b98 <EXTI_vSenseControl+0x194>
				}
				else if(Loc_u8Mode==Falling_Edge){
    1b38:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3a:	83 30       	cpi	r24, 0x03	; 3
    1b3c:	69 f5       	brne	.+90     	; 0x1b98 <EXTI_vSenseControl+0x194>
					CLR_BIT(MCUCR,2);
    1b3e:	a5 e5       	ldi	r26, 0x55	; 85
    1b40:	b0 e0       	ldi	r27, 0x00	; 0
    1b42:	e5 e5       	ldi	r30, 0x55	; 85
    1b44:	f0 e0       	ldi	r31, 0x00	; 0
    1b46:	80 81       	ld	r24, Z
    1b48:	8b 7f       	andi	r24, 0xFB	; 251
    1b4a:	8c 93       	st	X, r24
					SET_BIT(MCUCR,3);
    1b4c:	a5 e5       	ldi	r26, 0x55	; 85
    1b4e:	b0 e0       	ldi	r27, 0x00	; 0
    1b50:	e5 e5       	ldi	r30, 0x55	; 85
    1b52:	f0 e0       	ldi	r31, 0x00	; 0
    1b54:	80 81       	ld	r24, Z
    1b56:	88 60       	ori	r24, 0x08	; 8
    1b58:	8c 93       	st	X, r24
    1b5a:	1e c0       	rjmp	.+60     	; 0x1b98 <EXTI_vSenseControl+0x194>
			}
			else{
				//do nothing
			}
		}
		else if(Loc_u8InterruptNumber==INT2){
    1b5c:	89 81       	ldd	r24, Y+1	; 0x01
    1b5e:	82 30       	cpi	r24, 0x02	; 2
    1b60:	d9 f4       	brne	.+54     	; 0x1b98 <EXTI_vSenseControl+0x194>
			if(Loc_u8Mode==Falling_Edge||Loc_u8Mode==Rising_Egde){
    1b62:	8a 81       	ldd	r24, Y+2	; 0x02
    1b64:	83 30       	cpi	r24, 0x03	; 3
    1b66:	19 f0       	breq	.+6      	; 0x1b6e <EXTI_vSenseControl+0x16a>
    1b68:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6a:	82 30       	cpi	r24, 0x02	; 2
    1b6c:	a9 f4       	brne	.+42     	; 0x1b98 <EXTI_vSenseControl+0x194>
				if(Loc_u8Mode==Rising_Egde){
    1b6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b70:	82 30       	cpi	r24, 0x02	; 2
    1b72:	41 f4       	brne	.+16     	; 0x1b84 <EXTI_vSenseControl+0x180>
					SET_BIT(MCUCSR,6);
    1b74:	a4 e5       	ldi	r26, 0x54	; 84
    1b76:	b0 e0       	ldi	r27, 0x00	; 0
    1b78:	e4 e5       	ldi	r30, 0x54	; 84
    1b7a:	f0 e0       	ldi	r31, 0x00	; 0
    1b7c:	80 81       	ld	r24, Z
    1b7e:	80 64       	ori	r24, 0x40	; 64
    1b80:	8c 93       	st	X, r24
    1b82:	0a c0       	rjmp	.+20     	; 0x1b98 <EXTI_vSenseControl+0x194>
				}
				else if(Loc_u8Mode==Falling_Edge){
    1b84:	8a 81       	ldd	r24, Y+2	; 0x02
    1b86:	83 30       	cpi	r24, 0x03	; 3
    1b88:	39 f4       	brne	.+14     	; 0x1b98 <EXTI_vSenseControl+0x194>
					CLR_BIT(MCUCSR,6);
    1b8a:	a4 e5       	ldi	r26, 0x54	; 84
    1b8c:	b0 e0       	ldi	r27, 0x00	; 0
    1b8e:	e4 e5       	ldi	r30, 0x54	; 84
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	80 81       	ld	r24, Z
    1b94:	8f 7b       	andi	r24, 0xBF	; 191
    1b96:	8c 93       	st	X, r24
	}
	else{
		//do nothing
	}

}
    1b98:	0f 90       	pop	r0
    1b9a:	0f 90       	pop	r0
    1b9c:	cf 91       	pop	r28
    1b9e:	df 91       	pop	r29
    1ba0:	08 95       	ret

00001ba2 <EXTI_INT0CallBack>:
void EXTI_INT0CallBack(void(*ptr)(void)){
    1ba2:	df 93       	push	r29
    1ba4:	cf 93       	push	r28
    1ba6:	00 d0       	rcall	.+0      	; 0x1ba8 <EXTI_INT0CallBack+0x6>
    1ba8:	cd b7       	in	r28, 0x3d	; 61
    1baa:	de b7       	in	r29, 0x3e	; 62
    1bac:	9a 83       	std	Y+2, r25	; 0x02
    1bae:	89 83       	std	Y+1, r24	; 0x01
	if(ptr!='\0'){
    1bb0:	89 81       	ldd	r24, Y+1	; 0x01
    1bb2:	9a 81       	ldd	r25, Y+2	; 0x02
    1bb4:	00 97       	sbiw	r24, 0x00	; 0
    1bb6:	31 f0       	breq	.+12     	; 0x1bc4 <EXTI_INT0CallBack+0x22>
		Gptr0=ptr;
    1bb8:	89 81       	ldd	r24, Y+1	; 0x01
    1bba:	9a 81       	ldd	r25, Y+2	; 0x02
    1bbc:	90 93 dc 00 	sts	0x00DC, r25
    1bc0:	80 93 db 00 	sts	0x00DB, r24
	}
}
    1bc4:	0f 90       	pop	r0
    1bc6:	0f 90       	pop	r0
    1bc8:	cf 91       	pop	r28
    1bca:	df 91       	pop	r29
    1bcc:	08 95       	ret

00001bce <EXTI_INT1CallBack>:
void EXTI_INT1CallBack(void(*ptr)(void)){
    1bce:	df 93       	push	r29
    1bd0:	cf 93       	push	r28
    1bd2:	00 d0       	rcall	.+0      	; 0x1bd4 <EXTI_INT1CallBack+0x6>
    1bd4:	cd b7       	in	r28, 0x3d	; 61
    1bd6:	de b7       	in	r29, 0x3e	; 62
    1bd8:	9a 83       	std	Y+2, r25	; 0x02
    1bda:	89 83       	std	Y+1, r24	; 0x01
	if(ptr!='\0'){
    1bdc:	89 81       	ldd	r24, Y+1	; 0x01
    1bde:	9a 81       	ldd	r25, Y+2	; 0x02
    1be0:	00 97       	sbiw	r24, 0x00	; 0
    1be2:	31 f0       	breq	.+12     	; 0x1bf0 <EXTI_INT1CallBack+0x22>
		Gptr1=ptr;
    1be4:	89 81       	ldd	r24, Y+1	; 0x01
    1be6:	9a 81       	ldd	r25, Y+2	; 0x02
    1be8:	90 93 de 00 	sts	0x00DE, r25
    1bec:	80 93 dd 00 	sts	0x00DD, r24
	}
}
    1bf0:	0f 90       	pop	r0
    1bf2:	0f 90       	pop	r0
    1bf4:	cf 91       	pop	r28
    1bf6:	df 91       	pop	r29
    1bf8:	08 95       	ret

00001bfa <EXTI_INT2CallBack>:
void EXTI_INT2CallBack(void(*ptr)(void)){
    1bfa:	df 93       	push	r29
    1bfc:	cf 93       	push	r28
    1bfe:	00 d0       	rcall	.+0      	; 0x1c00 <EXTI_INT2CallBack+0x6>
    1c00:	cd b7       	in	r28, 0x3d	; 61
    1c02:	de b7       	in	r29, 0x3e	; 62
    1c04:	9a 83       	std	Y+2, r25	; 0x02
    1c06:	89 83       	std	Y+1, r24	; 0x01
	if(ptr!='\0'){
    1c08:	89 81       	ldd	r24, Y+1	; 0x01
    1c0a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c0c:	00 97       	sbiw	r24, 0x00	; 0
    1c0e:	31 f0       	breq	.+12     	; 0x1c1c <EXTI_INT2CallBack+0x22>
		Gptr2=ptr;
    1c10:	89 81       	ldd	r24, Y+1	; 0x01
    1c12:	9a 81       	ldd	r25, Y+2	; 0x02
    1c14:	90 93 e0 00 	sts	0x00E0, r25
    1c18:	80 93 df 00 	sts	0x00DF, r24
	}
}
    1c1c:	0f 90       	pop	r0
    1c1e:	0f 90       	pop	r0
    1c20:	cf 91       	pop	r28
    1c22:	df 91       	pop	r29
    1c24:	08 95       	ret

00001c26 <__vector_1>:
ISR(INT0_vect){
    1c26:	1f 92       	push	r1
    1c28:	0f 92       	push	r0
    1c2a:	0f b6       	in	r0, 0x3f	; 63
    1c2c:	0f 92       	push	r0
    1c2e:	11 24       	eor	r1, r1
    1c30:	2f 93       	push	r18
    1c32:	3f 93       	push	r19
    1c34:	4f 93       	push	r20
    1c36:	5f 93       	push	r21
    1c38:	6f 93       	push	r22
    1c3a:	7f 93       	push	r23
    1c3c:	8f 93       	push	r24
    1c3e:	9f 93       	push	r25
    1c40:	af 93       	push	r26
    1c42:	bf 93       	push	r27
    1c44:	ef 93       	push	r30
    1c46:	ff 93       	push	r31
    1c48:	df 93       	push	r29
    1c4a:	cf 93       	push	r28
    1c4c:	cd b7       	in	r28, 0x3d	; 61
    1c4e:	de b7       	in	r29, 0x3e	; 62
	if(Gptr0!='\0'){
    1c50:	80 91 db 00 	lds	r24, 0x00DB
    1c54:	90 91 dc 00 	lds	r25, 0x00DC
    1c58:	00 97       	sbiw	r24, 0x00	; 0
    1c5a:	29 f0       	breq	.+10     	; 0x1c66 <__vector_1+0x40>
		Gptr0();
    1c5c:	e0 91 db 00 	lds	r30, 0x00DB
    1c60:	f0 91 dc 00 	lds	r31, 0x00DC
    1c64:	09 95       	icall
	}
}
    1c66:	cf 91       	pop	r28
    1c68:	df 91       	pop	r29
    1c6a:	ff 91       	pop	r31
    1c6c:	ef 91       	pop	r30
    1c6e:	bf 91       	pop	r27
    1c70:	af 91       	pop	r26
    1c72:	9f 91       	pop	r25
    1c74:	8f 91       	pop	r24
    1c76:	7f 91       	pop	r23
    1c78:	6f 91       	pop	r22
    1c7a:	5f 91       	pop	r21
    1c7c:	4f 91       	pop	r20
    1c7e:	3f 91       	pop	r19
    1c80:	2f 91       	pop	r18
    1c82:	0f 90       	pop	r0
    1c84:	0f be       	out	0x3f, r0	; 63
    1c86:	0f 90       	pop	r0
    1c88:	1f 90       	pop	r1
    1c8a:	18 95       	reti

00001c8c <__vector_2>:
ISR(INT1_vect){
    1c8c:	1f 92       	push	r1
    1c8e:	0f 92       	push	r0
    1c90:	0f b6       	in	r0, 0x3f	; 63
    1c92:	0f 92       	push	r0
    1c94:	11 24       	eor	r1, r1
    1c96:	2f 93       	push	r18
    1c98:	3f 93       	push	r19
    1c9a:	4f 93       	push	r20
    1c9c:	5f 93       	push	r21
    1c9e:	6f 93       	push	r22
    1ca0:	7f 93       	push	r23
    1ca2:	8f 93       	push	r24
    1ca4:	9f 93       	push	r25
    1ca6:	af 93       	push	r26
    1ca8:	bf 93       	push	r27
    1caa:	ef 93       	push	r30
    1cac:	ff 93       	push	r31
    1cae:	df 93       	push	r29
    1cb0:	cf 93       	push	r28
    1cb2:	cd b7       	in	r28, 0x3d	; 61
    1cb4:	de b7       	in	r29, 0x3e	; 62
	if(Gptr1!='\0'){
    1cb6:	80 91 dd 00 	lds	r24, 0x00DD
    1cba:	90 91 de 00 	lds	r25, 0x00DE
    1cbe:	00 97       	sbiw	r24, 0x00	; 0
    1cc0:	29 f0       	breq	.+10     	; 0x1ccc <__vector_2+0x40>
		Gptr1();
    1cc2:	e0 91 dd 00 	lds	r30, 0x00DD
    1cc6:	f0 91 de 00 	lds	r31, 0x00DE
    1cca:	09 95       	icall
	}
}
    1ccc:	cf 91       	pop	r28
    1cce:	df 91       	pop	r29
    1cd0:	ff 91       	pop	r31
    1cd2:	ef 91       	pop	r30
    1cd4:	bf 91       	pop	r27
    1cd6:	af 91       	pop	r26
    1cd8:	9f 91       	pop	r25
    1cda:	8f 91       	pop	r24
    1cdc:	7f 91       	pop	r23
    1cde:	6f 91       	pop	r22
    1ce0:	5f 91       	pop	r21
    1ce2:	4f 91       	pop	r20
    1ce4:	3f 91       	pop	r19
    1ce6:	2f 91       	pop	r18
    1ce8:	0f 90       	pop	r0
    1cea:	0f be       	out	0x3f, r0	; 63
    1cec:	0f 90       	pop	r0
    1cee:	1f 90       	pop	r1
    1cf0:	18 95       	reti

00001cf2 <INT2_vect>:
ISR(INT2_vect){
    1cf2:	1f 92       	push	r1
    1cf4:	0f 92       	push	r0
    1cf6:	0f b6       	in	r0, 0x3f	; 63
    1cf8:	0f 92       	push	r0
    1cfa:	11 24       	eor	r1, r1
    1cfc:	2f 93       	push	r18
    1cfe:	3f 93       	push	r19
    1d00:	4f 93       	push	r20
    1d02:	5f 93       	push	r21
    1d04:	6f 93       	push	r22
    1d06:	7f 93       	push	r23
    1d08:	8f 93       	push	r24
    1d0a:	9f 93       	push	r25
    1d0c:	af 93       	push	r26
    1d0e:	bf 93       	push	r27
    1d10:	ef 93       	push	r30
    1d12:	ff 93       	push	r31
    1d14:	df 93       	push	r29
    1d16:	cf 93       	push	r28
    1d18:	cd b7       	in	r28, 0x3d	; 61
    1d1a:	de b7       	in	r29, 0x3e	; 62
	if(Gptr2!='\0'){
    1d1c:	80 91 df 00 	lds	r24, 0x00DF
    1d20:	90 91 e0 00 	lds	r25, 0x00E0
    1d24:	00 97       	sbiw	r24, 0x00	; 0
    1d26:	29 f0       	breq	.+10     	; 0x1d32 <INT2_vect+0x40>
		Gptr2();
    1d28:	e0 91 df 00 	lds	r30, 0x00DF
    1d2c:	f0 91 e0 00 	lds	r31, 0x00E0
    1d30:	09 95       	icall
	}
}
    1d32:	cf 91       	pop	r28
    1d34:	df 91       	pop	r29
    1d36:	ff 91       	pop	r31
    1d38:	ef 91       	pop	r30
    1d3a:	bf 91       	pop	r27
    1d3c:	af 91       	pop	r26
    1d3e:	9f 91       	pop	r25
    1d40:	8f 91       	pop	r24
    1d42:	7f 91       	pop	r23
    1d44:	6f 91       	pop	r22
    1d46:	5f 91       	pop	r21
    1d48:	4f 91       	pop	r20
    1d4a:	3f 91       	pop	r19
    1d4c:	2f 91       	pop	r18
    1d4e:	0f 90       	pop	r0
    1d50:	0f be       	out	0x3f, r0	; 63
    1d52:	0f 90       	pop	r0
    1d54:	1f 90       	pop	r1
    1d56:	18 95       	reti

00001d58 <DIO_vSetPortDirection>:

 * \Parameters (in) : Loc_u8PortID   PORT wanted to change it's Direction
 * 					Loc_u8PortDirection	    choose direction Input or Output
 * \Parameters (out): None
 *******************************************************************************/
void DIO_vSetPortDirection(u8 Loc_u8PortID, u8 Loc_u8PortDirection){
    1d58:	df 93       	push	r29
    1d5a:	cf 93       	push	r28
    1d5c:	00 d0       	rcall	.+0      	; 0x1d5e <DIO_vSetPortDirection+0x6>
    1d5e:	cd b7       	in	r28, 0x3d	; 61
    1d60:	de b7       	in	r29, 0x3e	; 62
    1d62:	89 83       	std	Y+1, r24	; 0x01
    1d64:	6a 83       	std	Y+2, r22	; 0x02
	if(Loc_u8PortID<=PortD){
    1d66:	89 81       	ldd	r24, Y+1	; 0x01
    1d68:	84 30       	cpi	r24, 0x04	; 4
    1d6a:	f8 f4       	brcc	.+62     	; 0x1daa <DIO_vSetPortDirection+0x52>
		if(Loc_u8PortID==PortA){
    1d6c:	89 81       	ldd	r24, Y+1	; 0x01
    1d6e:	88 23       	and	r24, r24
    1d70:	29 f4       	brne	.+10     	; 0x1d7c <DIO_vSetPortDirection+0x24>
			DDRA = Loc_u8PortDirection;
    1d72:	ea e3       	ldi	r30, 0x3A	; 58
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	8a 81       	ldd	r24, Y+2	; 0x02
    1d78:	80 83       	st	Z, r24
    1d7a:	17 c0       	rjmp	.+46     	; 0x1daa <DIO_vSetPortDirection+0x52>
		}
		else if(Loc_u8PortID==PortB){
    1d7c:	89 81       	ldd	r24, Y+1	; 0x01
    1d7e:	81 30       	cpi	r24, 0x01	; 1
    1d80:	29 f4       	brne	.+10     	; 0x1d8c <DIO_vSetPortDirection+0x34>
			DDRB = Loc_u8PortDirection;
    1d82:	e7 e3       	ldi	r30, 0x37	; 55
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	8a 81       	ldd	r24, Y+2	; 0x02
    1d88:	80 83       	st	Z, r24
    1d8a:	0f c0       	rjmp	.+30     	; 0x1daa <DIO_vSetPortDirection+0x52>
		}
		else if(Loc_u8PortID==PortC){
    1d8c:	89 81       	ldd	r24, Y+1	; 0x01
    1d8e:	82 30       	cpi	r24, 0x02	; 2
    1d90:	29 f4       	brne	.+10     	; 0x1d9c <DIO_vSetPortDirection+0x44>
			DDRC = Loc_u8PortDirection;
    1d92:	e4 e3       	ldi	r30, 0x34	; 52
    1d94:	f0 e0       	ldi	r31, 0x00	; 0
    1d96:	8a 81       	ldd	r24, Y+2	; 0x02
    1d98:	80 83       	st	Z, r24
    1d9a:	07 c0       	rjmp	.+14     	; 0x1daa <DIO_vSetPortDirection+0x52>
		}
		else if(Loc_u8PortID==PortD){
    1d9c:	89 81       	ldd	r24, Y+1	; 0x01
    1d9e:	83 30       	cpi	r24, 0x03	; 3
    1da0:	21 f4       	brne	.+8      	; 0x1daa <DIO_vSetPortDirection+0x52>
			DDRD = Loc_u8PortDirection;
    1da2:	e1 e3       	ldi	r30, 0x31	; 49
    1da4:	f0 e0       	ldi	r31, 0x00	; 0
    1da6:	8a 81       	ldd	r24, Y+2	; 0x02
    1da8:	80 83       	st	Z, r24
		}
	}
	else{
		//do nothing
	}
}
    1daa:	0f 90       	pop	r0
    1dac:	0f 90       	pop	r0
    1dae:	cf 91       	pop	r28
    1db0:	df 91       	pop	r29
    1db2:	08 95       	ret

00001db4 <DIO_vSetPortValue>:

* \Parameters (in) : Loc_u8PortID   PORT wanted to change it's value
* 					Loc_u8PortDirection	    choose value High or Low
* \Parameters (out): None
*******************************************************************************/
void DIO_vSetPortValue(u8 Loc_u8PortID, u8 Loc_u8PortValue){
    1db4:	df 93       	push	r29
    1db6:	cf 93       	push	r28
    1db8:	00 d0       	rcall	.+0      	; 0x1dba <DIO_vSetPortValue+0x6>
    1dba:	cd b7       	in	r28, 0x3d	; 61
    1dbc:	de b7       	in	r29, 0x3e	; 62
    1dbe:	89 83       	std	Y+1, r24	; 0x01
    1dc0:	6a 83       	std	Y+2, r22	; 0x02
	if(Loc_u8PortID<=PortD){
    1dc2:	89 81       	ldd	r24, Y+1	; 0x01
    1dc4:	84 30       	cpi	r24, 0x04	; 4
    1dc6:	f8 f4       	brcc	.+62     	; 0x1e06 <DIO_vSetPortValue+0x52>
		if(Loc_u8PortID==PortA){
    1dc8:	89 81       	ldd	r24, Y+1	; 0x01
    1dca:	88 23       	and	r24, r24
    1dcc:	29 f4       	brne	.+10     	; 0x1dd8 <DIO_vSetPortValue+0x24>
			PORTA = Loc_u8PortValue;
    1dce:	eb e3       	ldi	r30, 0x3B	; 59
    1dd0:	f0 e0       	ldi	r31, 0x00	; 0
    1dd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd4:	80 83       	st	Z, r24
    1dd6:	17 c0       	rjmp	.+46     	; 0x1e06 <DIO_vSetPortValue+0x52>
		}
		else if(Loc_u8PortID==PortB){
    1dd8:	89 81       	ldd	r24, Y+1	; 0x01
    1dda:	81 30       	cpi	r24, 0x01	; 1
    1ddc:	29 f4       	brne	.+10     	; 0x1de8 <DIO_vSetPortValue+0x34>
			PORTB = Loc_u8PortValue;
    1dde:	e8 e3       	ldi	r30, 0x38	; 56
    1de0:	f0 e0       	ldi	r31, 0x00	; 0
    1de2:	8a 81       	ldd	r24, Y+2	; 0x02
    1de4:	80 83       	st	Z, r24
    1de6:	0f c0       	rjmp	.+30     	; 0x1e06 <DIO_vSetPortValue+0x52>
		}
		else if(Loc_u8PortID==PortC){
    1de8:	89 81       	ldd	r24, Y+1	; 0x01
    1dea:	82 30       	cpi	r24, 0x02	; 2
    1dec:	29 f4       	brne	.+10     	; 0x1df8 <DIO_vSetPortValue+0x44>
			PORTC = Loc_u8PortValue;
    1dee:	e5 e3       	ldi	r30, 0x35	; 53
    1df0:	f0 e0       	ldi	r31, 0x00	; 0
    1df2:	8a 81       	ldd	r24, Y+2	; 0x02
    1df4:	80 83       	st	Z, r24
    1df6:	07 c0       	rjmp	.+14     	; 0x1e06 <DIO_vSetPortValue+0x52>
		}
		else if(Loc_u8PortID==PortD){
    1df8:	89 81       	ldd	r24, Y+1	; 0x01
    1dfa:	83 30       	cpi	r24, 0x03	; 3
    1dfc:	21 f4       	brne	.+8      	; 0x1e06 <DIO_vSetPortValue+0x52>
			PORTD = Loc_u8PortValue;
    1dfe:	e2 e3       	ldi	r30, 0x32	; 50
    1e00:	f0 e0       	ldi	r31, 0x00	; 0
    1e02:	8a 81       	ldd	r24, Y+2	; 0x02
    1e04:	80 83       	st	Z, r24
		}
	}
	else{
		//do nothing
	}
}
    1e06:	0f 90       	pop	r0
    1e08:	0f 90       	pop	r0
    1e0a:	cf 91       	pop	r28
    1e0c:	df 91       	pop	r29
    1e0e:	08 95       	ret

00001e10 <DIO_u8PGetPortValue>:

* \Parameters (in) : Loc_u8PortID   PORT wanted to Read it's value
* \Parameters (out): PINx
*  \Return value:   : unsigned char
*******************************************************************************/
u8 DIO_u8PGetPortValue(u8 Loc_u8PortID){
    1e10:	df 93       	push	r29
    1e12:	cf 93       	push	r28
    1e14:	00 d0       	rcall	.+0      	; 0x1e16 <DIO_u8PGetPortValue+0x6>
    1e16:	cd b7       	in	r28, 0x3d	; 61
    1e18:	de b7       	in	r29, 0x3e	; 62
    1e1a:	89 83       	std	Y+1, r24	; 0x01
	if(Loc_u8PortID<=PortD){
    1e1c:	89 81       	ldd	r24, Y+1	; 0x01
    1e1e:	84 30       	cpi	r24, 0x04	; 4
    1e20:	00 f5       	brcc	.+64     	; 0x1e62 <DIO_u8PGetPortValue+0x52>
		if(Loc_u8PortID==PortA){
    1e22:	89 81       	ldd	r24, Y+1	; 0x01
    1e24:	88 23       	and	r24, r24
    1e26:	29 f4       	brne	.+10     	; 0x1e32 <DIO_u8PGetPortValue+0x22>
			return PINA;
    1e28:	e9 e3       	ldi	r30, 0x39	; 57
    1e2a:	f0 e0       	ldi	r31, 0x00	; 0
    1e2c:	80 81       	ld	r24, Z
    1e2e:	8a 83       	std	Y+2, r24	; 0x02
    1e30:	1a c0       	rjmp	.+52     	; 0x1e66 <DIO_u8PGetPortValue+0x56>
		}
		else if(Loc_u8PortID==PortB){
    1e32:	89 81       	ldd	r24, Y+1	; 0x01
    1e34:	81 30       	cpi	r24, 0x01	; 1
    1e36:	29 f4       	brne	.+10     	; 0x1e42 <DIO_u8PGetPortValue+0x32>
			return PINB;
    1e38:	e6 e3       	ldi	r30, 0x36	; 54
    1e3a:	f0 e0       	ldi	r31, 0x00	; 0
    1e3c:	80 81       	ld	r24, Z
    1e3e:	8a 83       	std	Y+2, r24	; 0x02
    1e40:	12 c0       	rjmp	.+36     	; 0x1e66 <DIO_u8PGetPortValue+0x56>
		}
		else if(Loc_u8PortID==PortC){
    1e42:	89 81       	ldd	r24, Y+1	; 0x01
    1e44:	82 30       	cpi	r24, 0x02	; 2
    1e46:	29 f4       	brne	.+10     	; 0x1e52 <DIO_u8PGetPortValue+0x42>
			return PINC;
    1e48:	e3 e3       	ldi	r30, 0x33	; 51
    1e4a:	f0 e0       	ldi	r31, 0x00	; 0
    1e4c:	80 81       	ld	r24, Z
    1e4e:	8a 83       	std	Y+2, r24	; 0x02
    1e50:	0a c0       	rjmp	.+20     	; 0x1e66 <DIO_u8PGetPortValue+0x56>
		}
		else if(Loc_u8PortID==PortD){
    1e52:	89 81       	ldd	r24, Y+1	; 0x01
    1e54:	83 30       	cpi	r24, 0x03	; 3
    1e56:	29 f4       	brne	.+10     	; 0x1e62 <DIO_u8PGetPortValue+0x52>
			return PIND;
    1e58:	e0 e3       	ldi	r30, 0x30	; 48
    1e5a:	f0 e0       	ldi	r31, 0x00	; 0
    1e5c:	80 81       	ld	r24, Z
    1e5e:	8a 83       	std	Y+2, r24	; 0x02
    1e60:	02 c0       	rjmp	.+4      	; 0x1e66 <DIO_u8PGetPortValue+0x56>
		}
	}
	else{
		//do nothing
	}
	return 0xff;
    1e62:	8f ef       	ldi	r24, 0xFF	; 255
    1e64:	8a 83       	std	Y+2, r24	; 0x02
    1e66:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1e68:	0f 90       	pop	r0
    1e6a:	0f 90       	pop	r0
    1e6c:	cf 91       	pop	r28
    1e6e:	df 91       	pop	r29
    1e70:	08 95       	ret

00001e72 <DIO_vTogPortValue>:
*

* \Parameters (in) : Loc_u8PortID  PORT wanted to Toggle it's value
* \Parameters (out): None
*******************************************************************************/
void DIO_vTogPortValue(u8 Loc_u8PortID){
    1e72:	df 93       	push	r29
    1e74:	cf 93       	push	r28
    1e76:	0f 92       	push	r0
    1e78:	cd b7       	in	r28, 0x3d	; 61
    1e7a:	de b7       	in	r29, 0x3e	; 62
    1e7c:	89 83       	std	Y+1, r24	; 0x01
	if(Loc_u8PortID<=PortD){
    1e7e:	89 81       	ldd	r24, Y+1	; 0x01
    1e80:	84 30       	cpi	r24, 0x04	; 4
    1e82:	58 f5       	brcc	.+86     	; 0x1eda <DIO_vTogPortValue+0x68>
		if(Loc_u8PortID==PortA){
    1e84:	89 81       	ldd	r24, Y+1	; 0x01
    1e86:	88 23       	and	r24, r24
    1e88:	41 f4       	brne	.+16     	; 0x1e9a <DIO_vTogPortValue+0x28>
			PORTA = ~PORTA;
    1e8a:	ab e3       	ldi	r26, 0x3B	; 59
    1e8c:	b0 e0       	ldi	r27, 0x00	; 0
    1e8e:	eb e3       	ldi	r30, 0x3B	; 59
    1e90:	f0 e0       	ldi	r31, 0x00	; 0
    1e92:	80 81       	ld	r24, Z
    1e94:	80 95       	com	r24
    1e96:	8c 93       	st	X, r24
    1e98:	20 c0       	rjmp	.+64     	; 0x1eda <DIO_vTogPortValue+0x68>
		}
		else if(Loc_u8PortID==PortB){
    1e9a:	89 81       	ldd	r24, Y+1	; 0x01
    1e9c:	81 30       	cpi	r24, 0x01	; 1
    1e9e:	41 f4       	brne	.+16     	; 0x1eb0 <DIO_vTogPortValue+0x3e>
			PORTB = ~PORTB;
    1ea0:	a8 e3       	ldi	r26, 0x38	; 56
    1ea2:	b0 e0       	ldi	r27, 0x00	; 0
    1ea4:	e8 e3       	ldi	r30, 0x38	; 56
    1ea6:	f0 e0       	ldi	r31, 0x00	; 0
    1ea8:	80 81       	ld	r24, Z
    1eaa:	80 95       	com	r24
    1eac:	8c 93       	st	X, r24
    1eae:	15 c0       	rjmp	.+42     	; 0x1eda <DIO_vTogPortValue+0x68>
		}
		else if(Loc_u8PortID==PortC){
    1eb0:	89 81       	ldd	r24, Y+1	; 0x01
    1eb2:	82 30       	cpi	r24, 0x02	; 2
    1eb4:	41 f4       	brne	.+16     	; 0x1ec6 <DIO_vTogPortValue+0x54>
			PORTC = ~PORTC;
    1eb6:	a5 e3       	ldi	r26, 0x35	; 53
    1eb8:	b0 e0       	ldi	r27, 0x00	; 0
    1eba:	e5 e3       	ldi	r30, 0x35	; 53
    1ebc:	f0 e0       	ldi	r31, 0x00	; 0
    1ebe:	80 81       	ld	r24, Z
    1ec0:	80 95       	com	r24
    1ec2:	8c 93       	st	X, r24
    1ec4:	0a c0       	rjmp	.+20     	; 0x1eda <DIO_vTogPortValue+0x68>
		}
		else if(Loc_u8PortID==PortD){
    1ec6:	89 81       	ldd	r24, Y+1	; 0x01
    1ec8:	83 30       	cpi	r24, 0x03	; 3
    1eca:	39 f4       	brne	.+14     	; 0x1eda <DIO_vTogPortValue+0x68>
			PORTD = ~PORTD;
    1ecc:	a2 e3       	ldi	r26, 0x32	; 50
    1ece:	b0 e0       	ldi	r27, 0x00	; 0
    1ed0:	e2 e3       	ldi	r30, 0x32	; 50
    1ed2:	f0 e0       	ldi	r31, 0x00	; 0
    1ed4:	80 81       	ld	r24, Z
    1ed6:	80 95       	com	r24
    1ed8:	8c 93       	st	X, r24
		}
	}
	else{
		//do nothing
	}
}
    1eda:	0f 90       	pop	r0
    1edc:	cf 91       	pop	r28
    1ede:	df 91       	pop	r29
    1ee0:	08 95       	ret

00001ee2 <DIO_vSetPinDirection>:
* \Parameters (in) : Loc_u8PortID   PIN PORT
* 					Loc_u8PinID		PIN wanted to change it's direction
* 					Loc_u8PinDirection  choose PIN direction (InPut,OutPut)
* \Parameters (out): None
*******************************************************************************/
void DIO_vSetPinDirection(u8 Loc_u8PortID, u8 Loc_u8PinID, u8 Loc_u8PinDirection){
    1ee2:	df 93       	push	r29
    1ee4:	cf 93       	push	r28
    1ee6:	00 d0       	rcall	.+0      	; 0x1ee8 <DIO_vSetPinDirection+0x6>
    1ee8:	0f 92       	push	r0
    1eea:	cd b7       	in	r28, 0x3d	; 61
    1eec:	de b7       	in	r29, 0x3e	; 62
    1eee:	89 83       	std	Y+1, r24	; 0x01
    1ef0:	6a 83       	std	Y+2, r22	; 0x02
    1ef2:	4b 83       	std	Y+3, r20	; 0x03
	if (Loc_u8PinDirection==Pin_OutPut){
    1ef4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef6:	81 30       	cpi	r24, 0x01	; 1
    1ef8:	09 f0       	breq	.+2      	; 0x1efc <DIO_vSetPinDirection+0x1a>
    1efa:	75 c0       	rjmp	.+234    	; 0x1fe6 <DIO_vSetPinDirection+0x104>

		if(Loc_u8PortID<=PortD){
    1efc:	89 81       	ldd	r24, Y+1	; 0x01
    1efe:	84 30       	cpi	r24, 0x04	; 4
    1f00:	08 f0       	brcs	.+2      	; 0x1f04 <DIO_vSetPinDirection+0x22>
    1f02:	ec c0       	rjmp	.+472    	; 0x20dc <DIO_vSetPinDirection+0x1fa>
			if(Loc_u8PortID==PortA){
    1f04:	89 81       	ldd	r24, Y+1	; 0x01
    1f06:	88 23       	and	r24, r24
    1f08:	c9 f4       	brne	.+50     	; 0x1f3c <DIO_vSetPinDirection+0x5a>
				DDRA = SET_BIT(DDRA, Loc_u8PinID);
    1f0a:	4a e3       	ldi	r20, 0x3A	; 58
    1f0c:	50 e0       	ldi	r21, 0x00	; 0
    1f0e:	aa e3       	ldi	r26, 0x3A	; 58
    1f10:	b0 e0       	ldi	r27, 0x00	; 0
    1f12:	ea e3       	ldi	r30, 0x3A	; 58
    1f14:	f0 e0       	ldi	r31, 0x00	; 0
    1f16:	80 81       	ld	r24, Z
    1f18:	68 2f       	mov	r22, r24
    1f1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1c:	28 2f       	mov	r18, r24
    1f1e:	30 e0       	ldi	r19, 0x00	; 0
    1f20:	81 e0       	ldi	r24, 0x01	; 1
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	02 2e       	mov	r0, r18
    1f26:	02 c0       	rjmp	.+4      	; 0x1f2c <DIO_vSetPinDirection+0x4a>
    1f28:	88 0f       	add	r24, r24
    1f2a:	99 1f       	adc	r25, r25
    1f2c:	0a 94       	dec	r0
    1f2e:	e2 f7       	brpl	.-8      	; 0x1f28 <DIO_vSetPinDirection+0x46>
    1f30:	86 2b       	or	r24, r22
    1f32:	8c 93       	st	X, r24
    1f34:	8c 91       	ld	r24, X
    1f36:	fa 01       	movw	r30, r20
    1f38:	80 83       	st	Z, r24
    1f3a:	d0 c0       	rjmp	.+416    	; 0x20dc <DIO_vSetPinDirection+0x1fa>
			}
			else if(Loc_u8PortID==PortB){
    1f3c:	89 81       	ldd	r24, Y+1	; 0x01
    1f3e:	81 30       	cpi	r24, 0x01	; 1
    1f40:	c9 f4       	brne	.+50     	; 0x1f74 <DIO_vSetPinDirection+0x92>
				DDRB = SET_BIT(DDRB, Loc_u8PinID);
    1f42:	47 e3       	ldi	r20, 0x37	; 55
    1f44:	50 e0       	ldi	r21, 0x00	; 0
    1f46:	a7 e3       	ldi	r26, 0x37	; 55
    1f48:	b0 e0       	ldi	r27, 0x00	; 0
    1f4a:	e7 e3       	ldi	r30, 0x37	; 55
    1f4c:	f0 e0       	ldi	r31, 0x00	; 0
    1f4e:	80 81       	ld	r24, Z
    1f50:	68 2f       	mov	r22, r24
    1f52:	8a 81       	ldd	r24, Y+2	; 0x02
    1f54:	28 2f       	mov	r18, r24
    1f56:	30 e0       	ldi	r19, 0x00	; 0
    1f58:	81 e0       	ldi	r24, 0x01	; 1
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	02 2e       	mov	r0, r18
    1f5e:	02 c0       	rjmp	.+4      	; 0x1f64 <DIO_vSetPinDirection+0x82>
    1f60:	88 0f       	add	r24, r24
    1f62:	99 1f       	adc	r25, r25
    1f64:	0a 94       	dec	r0
    1f66:	e2 f7       	brpl	.-8      	; 0x1f60 <DIO_vSetPinDirection+0x7e>
    1f68:	86 2b       	or	r24, r22
    1f6a:	8c 93       	st	X, r24
    1f6c:	8c 91       	ld	r24, X
    1f6e:	fa 01       	movw	r30, r20
    1f70:	80 83       	st	Z, r24
    1f72:	b4 c0       	rjmp	.+360    	; 0x20dc <DIO_vSetPinDirection+0x1fa>
			}
			else if(Loc_u8PortID==PortC){
    1f74:	89 81       	ldd	r24, Y+1	; 0x01
    1f76:	82 30       	cpi	r24, 0x02	; 2
    1f78:	c9 f4       	brne	.+50     	; 0x1fac <DIO_vSetPinDirection+0xca>
				DDRC = SET_BIT(DDRC, Loc_u8PinID);
    1f7a:	44 e3       	ldi	r20, 0x34	; 52
    1f7c:	50 e0       	ldi	r21, 0x00	; 0
    1f7e:	a4 e3       	ldi	r26, 0x34	; 52
    1f80:	b0 e0       	ldi	r27, 0x00	; 0
    1f82:	e4 e3       	ldi	r30, 0x34	; 52
    1f84:	f0 e0       	ldi	r31, 0x00	; 0
    1f86:	80 81       	ld	r24, Z
    1f88:	68 2f       	mov	r22, r24
    1f8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8c:	28 2f       	mov	r18, r24
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	81 e0       	ldi	r24, 0x01	; 1
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	02 2e       	mov	r0, r18
    1f96:	02 c0       	rjmp	.+4      	; 0x1f9c <DIO_vSetPinDirection+0xba>
    1f98:	88 0f       	add	r24, r24
    1f9a:	99 1f       	adc	r25, r25
    1f9c:	0a 94       	dec	r0
    1f9e:	e2 f7       	brpl	.-8      	; 0x1f98 <DIO_vSetPinDirection+0xb6>
    1fa0:	86 2b       	or	r24, r22
    1fa2:	8c 93       	st	X, r24
    1fa4:	8c 91       	ld	r24, X
    1fa6:	fa 01       	movw	r30, r20
    1fa8:	80 83       	st	Z, r24
    1faa:	98 c0       	rjmp	.+304    	; 0x20dc <DIO_vSetPinDirection+0x1fa>
			}
			else if(Loc_u8PortID==PortD){
    1fac:	89 81       	ldd	r24, Y+1	; 0x01
    1fae:	83 30       	cpi	r24, 0x03	; 3
    1fb0:	09 f0       	breq	.+2      	; 0x1fb4 <DIO_vSetPinDirection+0xd2>
    1fb2:	94 c0       	rjmp	.+296    	; 0x20dc <DIO_vSetPinDirection+0x1fa>
				DDRD = SET_BIT(DDRD, Loc_u8PinID);
    1fb4:	41 e3       	ldi	r20, 0x31	; 49
    1fb6:	50 e0       	ldi	r21, 0x00	; 0
    1fb8:	a1 e3       	ldi	r26, 0x31	; 49
    1fba:	b0 e0       	ldi	r27, 0x00	; 0
    1fbc:	e1 e3       	ldi	r30, 0x31	; 49
    1fbe:	f0 e0       	ldi	r31, 0x00	; 0
    1fc0:	80 81       	ld	r24, Z
    1fc2:	68 2f       	mov	r22, r24
    1fc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc6:	28 2f       	mov	r18, r24
    1fc8:	30 e0       	ldi	r19, 0x00	; 0
    1fca:	81 e0       	ldi	r24, 0x01	; 1
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	02 2e       	mov	r0, r18
    1fd0:	02 c0       	rjmp	.+4      	; 0x1fd6 <DIO_vSetPinDirection+0xf4>
    1fd2:	88 0f       	add	r24, r24
    1fd4:	99 1f       	adc	r25, r25
    1fd6:	0a 94       	dec	r0
    1fd8:	e2 f7       	brpl	.-8      	; 0x1fd2 <DIO_vSetPinDirection+0xf0>
    1fda:	86 2b       	or	r24, r22
    1fdc:	8c 93       	st	X, r24
    1fde:	8c 91       	ld	r24, X
    1fe0:	fa 01       	movw	r30, r20
    1fe2:	80 83       	st	Z, r24
    1fe4:	7b c0       	rjmp	.+246    	; 0x20dc <DIO_vSetPinDirection+0x1fa>
		else{
			//do nothing
		}

	}
	else if(Loc_u8PinDirection==Pin_InPut){
    1fe6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe8:	88 23       	and	r24, r24
    1fea:	09 f0       	breq	.+2      	; 0x1fee <DIO_vSetPinDirection+0x10c>
    1fec:	77 c0       	rjmp	.+238    	; 0x20dc <DIO_vSetPinDirection+0x1fa>

		if(Loc_u8PortID<=PortD){
    1fee:	89 81       	ldd	r24, Y+1	; 0x01
    1ff0:	84 30       	cpi	r24, 0x04	; 4
    1ff2:	08 f0       	brcs	.+2      	; 0x1ff6 <DIO_vSetPinDirection+0x114>
    1ff4:	73 c0       	rjmp	.+230    	; 0x20dc <DIO_vSetPinDirection+0x1fa>
			if(Loc_u8PortID==PortA){
    1ff6:	89 81       	ldd	r24, Y+1	; 0x01
    1ff8:	88 23       	and	r24, r24
    1ffa:	d1 f4       	brne	.+52     	; 0x2030 <DIO_vSetPinDirection+0x14e>
				DDRA = CLR_BIT(DDRA, Loc_u8PinID);
    1ffc:	4a e3       	ldi	r20, 0x3A	; 58
    1ffe:	50 e0       	ldi	r21, 0x00	; 0
    2000:	aa e3       	ldi	r26, 0x3A	; 58
    2002:	b0 e0       	ldi	r27, 0x00	; 0
    2004:	ea e3       	ldi	r30, 0x3A	; 58
    2006:	f0 e0       	ldi	r31, 0x00	; 0
    2008:	80 81       	ld	r24, Z
    200a:	68 2f       	mov	r22, r24
    200c:	8a 81       	ldd	r24, Y+2	; 0x02
    200e:	28 2f       	mov	r18, r24
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	81 e0       	ldi	r24, 0x01	; 1
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	02 2e       	mov	r0, r18
    2018:	02 c0       	rjmp	.+4      	; 0x201e <DIO_vSetPinDirection+0x13c>
    201a:	88 0f       	add	r24, r24
    201c:	99 1f       	adc	r25, r25
    201e:	0a 94       	dec	r0
    2020:	e2 f7       	brpl	.-8      	; 0x201a <DIO_vSetPinDirection+0x138>
    2022:	80 95       	com	r24
    2024:	86 23       	and	r24, r22
    2026:	8c 93       	st	X, r24
    2028:	8c 91       	ld	r24, X
    202a:	fa 01       	movw	r30, r20
    202c:	80 83       	st	Z, r24
    202e:	56 c0       	rjmp	.+172    	; 0x20dc <DIO_vSetPinDirection+0x1fa>
			}
			else if(Loc_u8PortID==PortB){
    2030:	89 81       	ldd	r24, Y+1	; 0x01
    2032:	81 30       	cpi	r24, 0x01	; 1
    2034:	d1 f4       	brne	.+52     	; 0x206a <DIO_vSetPinDirection+0x188>
				DDRB = CLR_BIT(DDRB, Loc_u8PinID);
    2036:	47 e3       	ldi	r20, 0x37	; 55
    2038:	50 e0       	ldi	r21, 0x00	; 0
    203a:	a7 e3       	ldi	r26, 0x37	; 55
    203c:	b0 e0       	ldi	r27, 0x00	; 0
    203e:	e7 e3       	ldi	r30, 0x37	; 55
    2040:	f0 e0       	ldi	r31, 0x00	; 0
    2042:	80 81       	ld	r24, Z
    2044:	68 2f       	mov	r22, r24
    2046:	8a 81       	ldd	r24, Y+2	; 0x02
    2048:	28 2f       	mov	r18, r24
    204a:	30 e0       	ldi	r19, 0x00	; 0
    204c:	81 e0       	ldi	r24, 0x01	; 1
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	02 2e       	mov	r0, r18
    2052:	02 c0       	rjmp	.+4      	; 0x2058 <DIO_vSetPinDirection+0x176>
    2054:	88 0f       	add	r24, r24
    2056:	99 1f       	adc	r25, r25
    2058:	0a 94       	dec	r0
    205a:	e2 f7       	brpl	.-8      	; 0x2054 <DIO_vSetPinDirection+0x172>
    205c:	80 95       	com	r24
    205e:	86 23       	and	r24, r22
    2060:	8c 93       	st	X, r24
    2062:	8c 91       	ld	r24, X
    2064:	fa 01       	movw	r30, r20
    2066:	80 83       	st	Z, r24
    2068:	39 c0       	rjmp	.+114    	; 0x20dc <DIO_vSetPinDirection+0x1fa>
			}
			else if(Loc_u8PortID==PortC){
    206a:	89 81       	ldd	r24, Y+1	; 0x01
    206c:	82 30       	cpi	r24, 0x02	; 2
    206e:	d1 f4       	brne	.+52     	; 0x20a4 <DIO_vSetPinDirection+0x1c2>
				DDRC = CLR_BIT(DDRC, Loc_u8PinID);
    2070:	44 e3       	ldi	r20, 0x34	; 52
    2072:	50 e0       	ldi	r21, 0x00	; 0
    2074:	a4 e3       	ldi	r26, 0x34	; 52
    2076:	b0 e0       	ldi	r27, 0x00	; 0
    2078:	e4 e3       	ldi	r30, 0x34	; 52
    207a:	f0 e0       	ldi	r31, 0x00	; 0
    207c:	80 81       	ld	r24, Z
    207e:	68 2f       	mov	r22, r24
    2080:	8a 81       	ldd	r24, Y+2	; 0x02
    2082:	28 2f       	mov	r18, r24
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	81 e0       	ldi	r24, 0x01	; 1
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	02 2e       	mov	r0, r18
    208c:	02 c0       	rjmp	.+4      	; 0x2092 <DIO_vSetPinDirection+0x1b0>
    208e:	88 0f       	add	r24, r24
    2090:	99 1f       	adc	r25, r25
    2092:	0a 94       	dec	r0
    2094:	e2 f7       	brpl	.-8      	; 0x208e <DIO_vSetPinDirection+0x1ac>
    2096:	80 95       	com	r24
    2098:	86 23       	and	r24, r22
    209a:	8c 93       	st	X, r24
    209c:	8c 91       	ld	r24, X
    209e:	fa 01       	movw	r30, r20
    20a0:	80 83       	st	Z, r24
    20a2:	1c c0       	rjmp	.+56     	; 0x20dc <DIO_vSetPinDirection+0x1fa>
			}
			else if(Loc_u8PortID==PortD){
    20a4:	89 81       	ldd	r24, Y+1	; 0x01
    20a6:	83 30       	cpi	r24, 0x03	; 3
    20a8:	c9 f4       	brne	.+50     	; 0x20dc <DIO_vSetPinDirection+0x1fa>
				DDRD = CLR_BIT(DDRD, Loc_u8PinID);
    20aa:	41 e3       	ldi	r20, 0x31	; 49
    20ac:	50 e0       	ldi	r21, 0x00	; 0
    20ae:	a1 e3       	ldi	r26, 0x31	; 49
    20b0:	b0 e0       	ldi	r27, 0x00	; 0
    20b2:	e1 e3       	ldi	r30, 0x31	; 49
    20b4:	f0 e0       	ldi	r31, 0x00	; 0
    20b6:	80 81       	ld	r24, Z
    20b8:	68 2f       	mov	r22, r24
    20ba:	8a 81       	ldd	r24, Y+2	; 0x02
    20bc:	28 2f       	mov	r18, r24
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	81 e0       	ldi	r24, 0x01	; 1
    20c2:	90 e0       	ldi	r25, 0x00	; 0
    20c4:	02 2e       	mov	r0, r18
    20c6:	02 c0       	rjmp	.+4      	; 0x20cc <DIO_vSetPinDirection+0x1ea>
    20c8:	88 0f       	add	r24, r24
    20ca:	99 1f       	adc	r25, r25
    20cc:	0a 94       	dec	r0
    20ce:	e2 f7       	brpl	.-8      	; 0x20c8 <DIO_vSetPinDirection+0x1e6>
    20d0:	80 95       	com	r24
    20d2:	86 23       	and	r24, r22
    20d4:	8c 93       	st	X, r24
    20d6:	8c 91       	ld	r24, X
    20d8:	fa 01       	movw	r30, r20
    20da:	80 83       	st	Z, r24
	}
	else{
		//do nothing
	}

}
    20dc:	0f 90       	pop	r0
    20de:	0f 90       	pop	r0
    20e0:	0f 90       	pop	r0
    20e2:	cf 91       	pop	r28
    20e4:	df 91       	pop	r29
    20e6:	08 95       	ret

000020e8 <DIO_vSetPinValue>:
* \Parameters (in) : Loc_u8PortID   PIN PORT
* 					Loc_u8PinID		PIN wanted to change it's value
* 					Loc_u8PinDirection  choose PIN value (Pin_High,Pin_Low)
* \Parameters (out): None
*******************************************************************************/
void DIO_vSetPinValue(u8 Loc_u8PortID, u8 Loc_u8PinID, u8 Loc_u8PinValue){
    20e8:	df 93       	push	r29
    20ea:	cf 93       	push	r28
    20ec:	00 d0       	rcall	.+0      	; 0x20ee <DIO_vSetPinValue+0x6>
    20ee:	0f 92       	push	r0
    20f0:	cd b7       	in	r28, 0x3d	; 61
    20f2:	de b7       	in	r29, 0x3e	; 62
    20f4:	89 83       	std	Y+1, r24	; 0x01
    20f6:	6a 83       	std	Y+2, r22	; 0x02
    20f8:	4b 83       	std	Y+3, r20	; 0x03
	if(Loc_u8PinValue==Pin_High){
    20fa:	8b 81       	ldd	r24, Y+3	; 0x03
    20fc:	81 30       	cpi	r24, 0x01	; 1
    20fe:	09 f0       	breq	.+2      	; 0x2102 <DIO_vSetPinValue+0x1a>
    2100:	61 c0       	rjmp	.+194    	; 0x21c4 <DIO_vSetPinValue+0xdc>
		if(Loc_u8PortID<=PortD){
    2102:	89 81       	ldd	r24, Y+1	; 0x01
    2104:	84 30       	cpi	r24, 0x04	; 4
    2106:	08 f0       	brcs	.+2      	; 0x210a <DIO_vSetPinValue+0x22>
    2108:	c4 c0       	rjmp	.+392    	; 0x2292 <DIO_vSetPinValue+0x1aa>
			if(Loc_u8PortID==PortA){
    210a:	89 81       	ldd	r24, Y+1	; 0x01
    210c:	88 23       	and	r24, r24
    210e:	a1 f4       	brne	.+40     	; 0x2138 <DIO_vSetPinValue+0x50>
				SET_BIT(PORTA, Loc_u8PinID);
    2110:	ab e3       	ldi	r26, 0x3B	; 59
    2112:	b0 e0       	ldi	r27, 0x00	; 0
    2114:	eb e3       	ldi	r30, 0x3B	; 59
    2116:	f0 e0       	ldi	r31, 0x00	; 0
    2118:	80 81       	ld	r24, Z
    211a:	48 2f       	mov	r20, r24
    211c:	8a 81       	ldd	r24, Y+2	; 0x02
    211e:	28 2f       	mov	r18, r24
    2120:	30 e0       	ldi	r19, 0x00	; 0
    2122:	81 e0       	ldi	r24, 0x01	; 1
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	02 2e       	mov	r0, r18
    2128:	02 c0       	rjmp	.+4      	; 0x212e <DIO_vSetPinValue+0x46>
    212a:	88 0f       	add	r24, r24
    212c:	99 1f       	adc	r25, r25
    212e:	0a 94       	dec	r0
    2130:	e2 f7       	brpl	.-8      	; 0x212a <DIO_vSetPinValue+0x42>
    2132:	84 2b       	or	r24, r20
    2134:	8c 93       	st	X, r24
    2136:	ad c0       	rjmp	.+346    	; 0x2292 <DIO_vSetPinValue+0x1aa>
			}
			else if(Loc_u8PortID==PortB){
    2138:	89 81       	ldd	r24, Y+1	; 0x01
    213a:	81 30       	cpi	r24, 0x01	; 1
    213c:	a1 f4       	brne	.+40     	; 0x2166 <DIO_vSetPinValue+0x7e>
				SET_BIT(PORTB, Loc_u8PinID);
    213e:	a8 e3       	ldi	r26, 0x38	; 56
    2140:	b0 e0       	ldi	r27, 0x00	; 0
    2142:	e8 e3       	ldi	r30, 0x38	; 56
    2144:	f0 e0       	ldi	r31, 0x00	; 0
    2146:	80 81       	ld	r24, Z
    2148:	48 2f       	mov	r20, r24
    214a:	8a 81       	ldd	r24, Y+2	; 0x02
    214c:	28 2f       	mov	r18, r24
    214e:	30 e0       	ldi	r19, 0x00	; 0
    2150:	81 e0       	ldi	r24, 0x01	; 1
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	02 2e       	mov	r0, r18
    2156:	02 c0       	rjmp	.+4      	; 0x215c <DIO_vSetPinValue+0x74>
    2158:	88 0f       	add	r24, r24
    215a:	99 1f       	adc	r25, r25
    215c:	0a 94       	dec	r0
    215e:	e2 f7       	brpl	.-8      	; 0x2158 <DIO_vSetPinValue+0x70>
    2160:	84 2b       	or	r24, r20
    2162:	8c 93       	st	X, r24
    2164:	96 c0       	rjmp	.+300    	; 0x2292 <DIO_vSetPinValue+0x1aa>
			}
			else if(Loc_u8PortID==PortC){
    2166:	89 81       	ldd	r24, Y+1	; 0x01
    2168:	82 30       	cpi	r24, 0x02	; 2
    216a:	a1 f4       	brne	.+40     	; 0x2194 <DIO_vSetPinValue+0xac>
				SET_BIT(PORTC, Loc_u8PinID);
    216c:	a5 e3       	ldi	r26, 0x35	; 53
    216e:	b0 e0       	ldi	r27, 0x00	; 0
    2170:	e5 e3       	ldi	r30, 0x35	; 53
    2172:	f0 e0       	ldi	r31, 0x00	; 0
    2174:	80 81       	ld	r24, Z
    2176:	48 2f       	mov	r20, r24
    2178:	8a 81       	ldd	r24, Y+2	; 0x02
    217a:	28 2f       	mov	r18, r24
    217c:	30 e0       	ldi	r19, 0x00	; 0
    217e:	81 e0       	ldi	r24, 0x01	; 1
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	02 2e       	mov	r0, r18
    2184:	02 c0       	rjmp	.+4      	; 0x218a <DIO_vSetPinValue+0xa2>
    2186:	88 0f       	add	r24, r24
    2188:	99 1f       	adc	r25, r25
    218a:	0a 94       	dec	r0
    218c:	e2 f7       	brpl	.-8      	; 0x2186 <DIO_vSetPinValue+0x9e>
    218e:	84 2b       	or	r24, r20
    2190:	8c 93       	st	X, r24
    2192:	7f c0       	rjmp	.+254    	; 0x2292 <DIO_vSetPinValue+0x1aa>
			}
			else if(Loc_u8PortID==PortD){
    2194:	89 81       	ldd	r24, Y+1	; 0x01
    2196:	83 30       	cpi	r24, 0x03	; 3
    2198:	09 f0       	breq	.+2      	; 0x219c <DIO_vSetPinValue+0xb4>
    219a:	7b c0       	rjmp	.+246    	; 0x2292 <DIO_vSetPinValue+0x1aa>
				SET_BIT(PORTD, Loc_u8PinID);
    219c:	a2 e3       	ldi	r26, 0x32	; 50
    219e:	b0 e0       	ldi	r27, 0x00	; 0
    21a0:	e2 e3       	ldi	r30, 0x32	; 50
    21a2:	f0 e0       	ldi	r31, 0x00	; 0
    21a4:	80 81       	ld	r24, Z
    21a6:	48 2f       	mov	r20, r24
    21a8:	8a 81       	ldd	r24, Y+2	; 0x02
    21aa:	28 2f       	mov	r18, r24
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	81 e0       	ldi	r24, 0x01	; 1
    21b0:	90 e0       	ldi	r25, 0x00	; 0
    21b2:	02 2e       	mov	r0, r18
    21b4:	02 c0       	rjmp	.+4      	; 0x21ba <DIO_vSetPinValue+0xd2>
    21b6:	88 0f       	add	r24, r24
    21b8:	99 1f       	adc	r25, r25
    21ba:	0a 94       	dec	r0
    21bc:	e2 f7       	brpl	.-8      	; 0x21b6 <DIO_vSetPinValue+0xce>
    21be:	84 2b       	or	r24, r20
    21c0:	8c 93       	st	X, r24
    21c2:	67 c0       	rjmp	.+206    	; 0x2292 <DIO_vSetPinValue+0x1aa>
		}
		else{
			//do nothing
		}
	}
	else if(Loc_u8PinValue==Pin_Low){
    21c4:	8b 81       	ldd	r24, Y+3	; 0x03
    21c6:	88 23       	and	r24, r24
    21c8:	09 f0       	breq	.+2      	; 0x21cc <DIO_vSetPinValue+0xe4>
    21ca:	63 c0       	rjmp	.+198    	; 0x2292 <DIO_vSetPinValue+0x1aa>

		if(Loc_u8PortID<=PortD){
    21cc:	89 81       	ldd	r24, Y+1	; 0x01
    21ce:	84 30       	cpi	r24, 0x04	; 4
    21d0:	08 f0       	brcs	.+2      	; 0x21d4 <DIO_vSetPinValue+0xec>
    21d2:	5f c0       	rjmp	.+190    	; 0x2292 <DIO_vSetPinValue+0x1aa>
			if(Loc_u8PortID==PortA){
    21d4:	89 81       	ldd	r24, Y+1	; 0x01
    21d6:	88 23       	and	r24, r24
    21d8:	a9 f4       	brne	.+42     	; 0x2204 <DIO_vSetPinValue+0x11c>
				CLR_BIT(PORTA, Loc_u8PinID);
    21da:	ab e3       	ldi	r26, 0x3B	; 59
    21dc:	b0 e0       	ldi	r27, 0x00	; 0
    21de:	eb e3       	ldi	r30, 0x3B	; 59
    21e0:	f0 e0       	ldi	r31, 0x00	; 0
    21e2:	80 81       	ld	r24, Z
    21e4:	48 2f       	mov	r20, r24
    21e6:	8a 81       	ldd	r24, Y+2	; 0x02
    21e8:	28 2f       	mov	r18, r24
    21ea:	30 e0       	ldi	r19, 0x00	; 0
    21ec:	81 e0       	ldi	r24, 0x01	; 1
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	02 2e       	mov	r0, r18
    21f2:	02 c0       	rjmp	.+4      	; 0x21f8 <DIO_vSetPinValue+0x110>
    21f4:	88 0f       	add	r24, r24
    21f6:	99 1f       	adc	r25, r25
    21f8:	0a 94       	dec	r0
    21fa:	e2 f7       	brpl	.-8      	; 0x21f4 <DIO_vSetPinValue+0x10c>
    21fc:	80 95       	com	r24
    21fe:	84 23       	and	r24, r20
    2200:	8c 93       	st	X, r24
    2202:	47 c0       	rjmp	.+142    	; 0x2292 <DIO_vSetPinValue+0x1aa>
			}
			else if(Loc_u8PortID==PortB){
    2204:	89 81       	ldd	r24, Y+1	; 0x01
    2206:	81 30       	cpi	r24, 0x01	; 1
    2208:	a9 f4       	brne	.+42     	; 0x2234 <DIO_vSetPinValue+0x14c>
				CLR_BIT(PORTB, Loc_u8PinID);
    220a:	a8 e3       	ldi	r26, 0x38	; 56
    220c:	b0 e0       	ldi	r27, 0x00	; 0
    220e:	e8 e3       	ldi	r30, 0x38	; 56
    2210:	f0 e0       	ldi	r31, 0x00	; 0
    2212:	80 81       	ld	r24, Z
    2214:	48 2f       	mov	r20, r24
    2216:	8a 81       	ldd	r24, Y+2	; 0x02
    2218:	28 2f       	mov	r18, r24
    221a:	30 e0       	ldi	r19, 0x00	; 0
    221c:	81 e0       	ldi	r24, 0x01	; 1
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	02 2e       	mov	r0, r18
    2222:	02 c0       	rjmp	.+4      	; 0x2228 <DIO_vSetPinValue+0x140>
    2224:	88 0f       	add	r24, r24
    2226:	99 1f       	adc	r25, r25
    2228:	0a 94       	dec	r0
    222a:	e2 f7       	brpl	.-8      	; 0x2224 <DIO_vSetPinValue+0x13c>
    222c:	80 95       	com	r24
    222e:	84 23       	and	r24, r20
    2230:	8c 93       	st	X, r24
    2232:	2f c0       	rjmp	.+94     	; 0x2292 <DIO_vSetPinValue+0x1aa>
			}
			else if(Loc_u8PortID==PortC){
    2234:	89 81       	ldd	r24, Y+1	; 0x01
    2236:	82 30       	cpi	r24, 0x02	; 2
    2238:	a9 f4       	brne	.+42     	; 0x2264 <DIO_vSetPinValue+0x17c>
				CLR_BIT(PORTC, Loc_u8PinID);
    223a:	a5 e3       	ldi	r26, 0x35	; 53
    223c:	b0 e0       	ldi	r27, 0x00	; 0
    223e:	e5 e3       	ldi	r30, 0x35	; 53
    2240:	f0 e0       	ldi	r31, 0x00	; 0
    2242:	80 81       	ld	r24, Z
    2244:	48 2f       	mov	r20, r24
    2246:	8a 81       	ldd	r24, Y+2	; 0x02
    2248:	28 2f       	mov	r18, r24
    224a:	30 e0       	ldi	r19, 0x00	; 0
    224c:	81 e0       	ldi	r24, 0x01	; 1
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	02 2e       	mov	r0, r18
    2252:	02 c0       	rjmp	.+4      	; 0x2258 <DIO_vSetPinValue+0x170>
    2254:	88 0f       	add	r24, r24
    2256:	99 1f       	adc	r25, r25
    2258:	0a 94       	dec	r0
    225a:	e2 f7       	brpl	.-8      	; 0x2254 <DIO_vSetPinValue+0x16c>
    225c:	80 95       	com	r24
    225e:	84 23       	and	r24, r20
    2260:	8c 93       	st	X, r24
    2262:	17 c0       	rjmp	.+46     	; 0x2292 <DIO_vSetPinValue+0x1aa>
			}
			else if(Loc_u8PortID==PortD){
    2264:	89 81       	ldd	r24, Y+1	; 0x01
    2266:	83 30       	cpi	r24, 0x03	; 3
    2268:	a1 f4       	brne	.+40     	; 0x2292 <DIO_vSetPinValue+0x1aa>
				CLR_BIT(PORTD, Loc_u8PinID);
    226a:	a2 e3       	ldi	r26, 0x32	; 50
    226c:	b0 e0       	ldi	r27, 0x00	; 0
    226e:	e2 e3       	ldi	r30, 0x32	; 50
    2270:	f0 e0       	ldi	r31, 0x00	; 0
    2272:	80 81       	ld	r24, Z
    2274:	48 2f       	mov	r20, r24
    2276:	8a 81       	ldd	r24, Y+2	; 0x02
    2278:	28 2f       	mov	r18, r24
    227a:	30 e0       	ldi	r19, 0x00	; 0
    227c:	81 e0       	ldi	r24, 0x01	; 1
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	02 2e       	mov	r0, r18
    2282:	02 c0       	rjmp	.+4      	; 0x2288 <DIO_vSetPinValue+0x1a0>
    2284:	88 0f       	add	r24, r24
    2286:	99 1f       	adc	r25, r25
    2288:	0a 94       	dec	r0
    228a:	e2 f7       	brpl	.-8      	; 0x2284 <DIO_vSetPinValue+0x19c>
    228c:	80 95       	com	r24
    228e:	84 23       	and	r24, r20
    2290:	8c 93       	st	X, r24
		}
		else{
			//do nothing
		}
	}
}
    2292:	0f 90       	pop	r0
    2294:	0f 90       	pop	r0
    2296:	0f 90       	pop	r0
    2298:	cf 91       	pop	r28
    229a:	df 91       	pop	r29
    229c:	08 95       	ret

0000229e <DIO_u8PGetPinValue>:
* \Parameters (in) : Loc_u8PortID   PIN PORT
* 					Loc_u8PinID		PIN wanted to read it's value
* \Parameters (out): PINx  value(0,1)
*  \Return value:   : unsigned char
*******************************************************************************/
u8 DIO_u8PGetPinValue(u8 Loc_u8PortID, u8 Loc_u8PinID){
    229e:	df 93       	push	r29
    22a0:	cf 93       	push	r28
    22a2:	00 d0       	rcall	.+0      	; 0x22a4 <DIO_u8PGetPinValue+0x6>
    22a4:	0f 92       	push	r0
    22a6:	cd b7       	in	r28, 0x3d	; 61
    22a8:	de b7       	in	r29, 0x3e	; 62
    22aa:	89 83       	std	Y+1, r24	; 0x01
    22ac:	6a 83       	std	Y+2, r22	; 0x02
	if(Loc_u8PortID<=PortD){
    22ae:	89 81       	ldd	r24, Y+1	; 0x01
    22b0:	84 30       	cpi	r24, 0x04	; 4
    22b2:	08 f0       	brcs	.+2      	; 0x22b6 <DIO_u8PGetPinValue+0x18>
    22b4:	58 c0       	rjmp	.+176    	; 0x2366 <DIO_u8PGetPinValue+0xc8>
		if(Loc_u8PortID==PortA){
    22b6:	89 81       	ldd	r24, Y+1	; 0x01
    22b8:	88 23       	and	r24, r24
    22ba:	99 f4       	brne	.+38     	; 0x22e2 <DIO_u8PGetPinValue+0x44>
			return GET_BIT(PINA, Loc_u8PinID);
    22bc:	e9 e3       	ldi	r30, 0x39	; 57
    22be:	f0 e0       	ldi	r31, 0x00	; 0
    22c0:	80 81       	ld	r24, Z
    22c2:	28 2f       	mov	r18, r24
    22c4:	30 e0       	ldi	r19, 0x00	; 0
    22c6:	8a 81       	ldd	r24, Y+2	; 0x02
    22c8:	88 2f       	mov	r24, r24
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	a9 01       	movw	r20, r18
    22ce:	02 c0       	rjmp	.+4      	; 0x22d4 <DIO_u8PGetPinValue+0x36>
    22d0:	55 95       	asr	r21
    22d2:	47 95       	ror	r20
    22d4:	8a 95       	dec	r24
    22d6:	e2 f7       	brpl	.-8      	; 0x22d0 <DIO_u8PGetPinValue+0x32>
    22d8:	ca 01       	movw	r24, r20
    22da:	58 2f       	mov	r21, r24
    22dc:	51 70       	andi	r21, 0x01	; 1
    22de:	5b 83       	std	Y+3, r21	; 0x03
    22e0:	44 c0       	rjmp	.+136    	; 0x236a <DIO_u8PGetPinValue+0xcc>
		}
		else if(Loc_u8PortID==PortB){
    22e2:	89 81       	ldd	r24, Y+1	; 0x01
    22e4:	81 30       	cpi	r24, 0x01	; 1
    22e6:	99 f4       	brne	.+38     	; 0x230e <DIO_u8PGetPinValue+0x70>
			return GET_BIT(PINB, Loc_u8PinID);
    22e8:	e6 e3       	ldi	r30, 0x36	; 54
    22ea:	f0 e0       	ldi	r31, 0x00	; 0
    22ec:	80 81       	ld	r24, Z
    22ee:	28 2f       	mov	r18, r24
    22f0:	30 e0       	ldi	r19, 0x00	; 0
    22f2:	8a 81       	ldd	r24, Y+2	; 0x02
    22f4:	88 2f       	mov	r24, r24
    22f6:	90 e0       	ldi	r25, 0x00	; 0
    22f8:	a9 01       	movw	r20, r18
    22fa:	02 c0       	rjmp	.+4      	; 0x2300 <DIO_u8PGetPinValue+0x62>
    22fc:	55 95       	asr	r21
    22fe:	47 95       	ror	r20
    2300:	8a 95       	dec	r24
    2302:	e2 f7       	brpl	.-8      	; 0x22fc <DIO_u8PGetPinValue+0x5e>
    2304:	ca 01       	movw	r24, r20
    2306:	58 2f       	mov	r21, r24
    2308:	51 70       	andi	r21, 0x01	; 1
    230a:	5b 83       	std	Y+3, r21	; 0x03
    230c:	2e c0       	rjmp	.+92     	; 0x236a <DIO_u8PGetPinValue+0xcc>
		}
		else if(Loc_u8PortID==PortC){
    230e:	89 81       	ldd	r24, Y+1	; 0x01
    2310:	82 30       	cpi	r24, 0x02	; 2
    2312:	99 f4       	brne	.+38     	; 0x233a <DIO_u8PGetPinValue+0x9c>
			return GET_BIT(PINC, Loc_u8PinID);
    2314:	e3 e3       	ldi	r30, 0x33	; 51
    2316:	f0 e0       	ldi	r31, 0x00	; 0
    2318:	80 81       	ld	r24, Z
    231a:	28 2f       	mov	r18, r24
    231c:	30 e0       	ldi	r19, 0x00	; 0
    231e:	8a 81       	ldd	r24, Y+2	; 0x02
    2320:	88 2f       	mov	r24, r24
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	a9 01       	movw	r20, r18
    2326:	02 c0       	rjmp	.+4      	; 0x232c <DIO_u8PGetPinValue+0x8e>
    2328:	55 95       	asr	r21
    232a:	47 95       	ror	r20
    232c:	8a 95       	dec	r24
    232e:	e2 f7       	brpl	.-8      	; 0x2328 <DIO_u8PGetPinValue+0x8a>
    2330:	ca 01       	movw	r24, r20
    2332:	58 2f       	mov	r21, r24
    2334:	51 70       	andi	r21, 0x01	; 1
    2336:	5b 83       	std	Y+3, r21	; 0x03
    2338:	18 c0       	rjmp	.+48     	; 0x236a <DIO_u8PGetPinValue+0xcc>
		}
		else if(Loc_u8PortID==PortD){
    233a:	89 81       	ldd	r24, Y+1	; 0x01
    233c:	83 30       	cpi	r24, 0x03	; 3
    233e:	99 f4       	brne	.+38     	; 0x2366 <DIO_u8PGetPinValue+0xc8>
			return GET_BIT(PIND, Loc_u8PinID);
    2340:	e0 e3       	ldi	r30, 0x30	; 48
    2342:	f0 e0       	ldi	r31, 0x00	; 0
    2344:	80 81       	ld	r24, Z
    2346:	28 2f       	mov	r18, r24
    2348:	30 e0       	ldi	r19, 0x00	; 0
    234a:	8a 81       	ldd	r24, Y+2	; 0x02
    234c:	88 2f       	mov	r24, r24
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	a9 01       	movw	r20, r18
    2352:	02 c0       	rjmp	.+4      	; 0x2358 <DIO_u8PGetPinValue+0xba>
    2354:	55 95       	asr	r21
    2356:	47 95       	ror	r20
    2358:	8a 95       	dec	r24
    235a:	e2 f7       	brpl	.-8      	; 0x2354 <DIO_u8PGetPinValue+0xb6>
    235c:	ca 01       	movw	r24, r20
    235e:	58 2f       	mov	r21, r24
    2360:	51 70       	andi	r21, 0x01	; 1
    2362:	5b 83       	std	Y+3, r21	; 0x03
    2364:	02 c0       	rjmp	.+4      	; 0x236a <DIO_u8PGetPinValue+0xcc>
		}
	}
	else{
		//do nothing
	}
	return 0xff;
    2366:	8f ef       	ldi	r24, 0xFF	; 255
    2368:	8b 83       	std	Y+3, r24	; 0x03
    236a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    236c:	0f 90       	pop	r0
    236e:	0f 90       	pop	r0
    2370:	0f 90       	pop	r0
    2372:	cf 91       	pop	r28
    2374:	df 91       	pop	r29
    2376:	08 95       	ret

00002378 <DIO_vTogPinValue>:
*
* \Parameters (in) : Loc_u8PortID   PIN PORT
* 					Loc_u8PinID		PIN wanted to Toggle it's value
* \Parameters (out): None
*******************************************************************************/
void DIO_vTogPinValue(u8 Loc_u8PortID, u8 Loc_u8PinID){
    2378:	df 93       	push	r29
    237a:	cf 93       	push	r28
    237c:	00 d0       	rcall	.+0      	; 0x237e <DIO_vTogPinValue+0x6>
    237e:	cd b7       	in	r28, 0x3d	; 61
    2380:	de b7       	in	r29, 0x3e	; 62
    2382:	89 83       	std	Y+1, r24	; 0x01
    2384:	6a 83       	std	Y+2, r22	; 0x02
	if(Loc_u8PortID<=PortD){
    2386:	89 81       	ldd	r24, Y+1	; 0x01
    2388:	84 30       	cpi	r24, 0x04	; 4
    238a:	08 f0       	brcs	.+2      	; 0x238e <DIO_vTogPinValue+0x16>
    238c:	5b c0       	rjmp	.+182    	; 0x2444 <DIO_vTogPinValue+0xcc>
		if(Loc_u8PortID==PortA){
    238e:	89 81       	ldd	r24, Y+1	; 0x01
    2390:	88 23       	and	r24, r24
    2392:	a1 f4       	brne	.+40     	; 0x23bc <DIO_vTogPinValue+0x44>
			TOG_BIT(PORTA, Loc_u8PinID);
    2394:	ab e3       	ldi	r26, 0x3B	; 59
    2396:	b0 e0       	ldi	r27, 0x00	; 0
    2398:	eb e3       	ldi	r30, 0x3B	; 59
    239a:	f0 e0       	ldi	r31, 0x00	; 0
    239c:	80 81       	ld	r24, Z
    239e:	48 2f       	mov	r20, r24
    23a0:	8a 81       	ldd	r24, Y+2	; 0x02
    23a2:	28 2f       	mov	r18, r24
    23a4:	30 e0       	ldi	r19, 0x00	; 0
    23a6:	81 e0       	ldi	r24, 0x01	; 1
    23a8:	90 e0       	ldi	r25, 0x00	; 0
    23aa:	02 2e       	mov	r0, r18
    23ac:	02 c0       	rjmp	.+4      	; 0x23b2 <DIO_vTogPinValue+0x3a>
    23ae:	88 0f       	add	r24, r24
    23b0:	99 1f       	adc	r25, r25
    23b2:	0a 94       	dec	r0
    23b4:	e2 f7       	brpl	.-8      	; 0x23ae <DIO_vTogPinValue+0x36>
    23b6:	84 27       	eor	r24, r20
    23b8:	8c 93       	st	X, r24
    23ba:	44 c0       	rjmp	.+136    	; 0x2444 <DIO_vTogPinValue+0xcc>
		}
		else if(Loc_u8PortID==PortB){
    23bc:	89 81       	ldd	r24, Y+1	; 0x01
    23be:	81 30       	cpi	r24, 0x01	; 1
    23c0:	a1 f4       	brne	.+40     	; 0x23ea <DIO_vTogPinValue+0x72>
			TOG_BIT(PORTB, Loc_u8PinID);
    23c2:	a8 e3       	ldi	r26, 0x38	; 56
    23c4:	b0 e0       	ldi	r27, 0x00	; 0
    23c6:	e8 e3       	ldi	r30, 0x38	; 56
    23c8:	f0 e0       	ldi	r31, 0x00	; 0
    23ca:	80 81       	ld	r24, Z
    23cc:	48 2f       	mov	r20, r24
    23ce:	8a 81       	ldd	r24, Y+2	; 0x02
    23d0:	28 2f       	mov	r18, r24
    23d2:	30 e0       	ldi	r19, 0x00	; 0
    23d4:	81 e0       	ldi	r24, 0x01	; 1
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	02 2e       	mov	r0, r18
    23da:	02 c0       	rjmp	.+4      	; 0x23e0 <DIO_vTogPinValue+0x68>
    23dc:	88 0f       	add	r24, r24
    23de:	99 1f       	adc	r25, r25
    23e0:	0a 94       	dec	r0
    23e2:	e2 f7       	brpl	.-8      	; 0x23dc <DIO_vTogPinValue+0x64>
    23e4:	84 27       	eor	r24, r20
    23e6:	8c 93       	st	X, r24
    23e8:	2d c0       	rjmp	.+90     	; 0x2444 <DIO_vTogPinValue+0xcc>
		}
		else if(Loc_u8PortID==PortC){
    23ea:	89 81       	ldd	r24, Y+1	; 0x01
    23ec:	82 30       	cpi	r24, 0x02	; 2
    23ee:	a1 f4       	brne	.+40     	; 0x2418 <DIO_vTogPinValue+0xa0>
			TOG_BIT(PORTC, Loc_u8PinID);
    23f0:	a5 e3       	ldi	r26, 0x35	; 53
    23f2:	b0 e0       	ldi	r27, 0x00	; 0
    23f4:	e5 e3       	ldi	r30, 0x35	; 53
    23f6:	f0 e0       	ldi	r31, 0x00	; 0
    23f8:	80 81       	ld	r24, Z
    23fa:	48 2f       	mov	r20, r24
    23fc:	8a 81       	ldd	r24, Y+2	; 0x02
    23fe:	28 2f       	mov	r18, r24
    2400:	30 e0       	ldi	r19, 0x00	; 0
    2402:	81 e0       	ldi	r24, 0x01	; 1
    2404:	90 e0       	ldi	r25, 0x00	; 0
    2406:	02 2e       	mov	r0, r18
    2408:	02 c0       	rjmp	.+4      	; 0x240e <DIO_vTogPinValue+0x96>
    240a:	88 0f       	add	r24, r24
    240c:	99 1f       	adc	r25, r25
    240e:	0a 94       	dec	r0
    2410:	e2 f7       	brpl	.-8      	; 0x240a <DIO_vTogPinValue+0x92>
    2412:	84 27       	eor	r24, r20
    2414:	8c 93       	st	X, r24
    2416:	16 c0       	rjmp	.+44     	; 0x2444 <DIO_vTogPinValue+0xcc>
		}
		else if(Loc_u8PortID==PortD){
    2418:	89 81       	ldd	r24, Y+1	; 0x01
    241a:	83 30       	cpi	r24, 0x03	; 3
    241c:	99 f4       	brne	.+38     	; 0x2444 <DIO_vTogPinValue+0xcc>
			TOG_BIT(PORTD, Loc_u8PinID);
    241e:	a2 e3       	ldi	r26, 0x32	; 50
    2420:	b0 e0       	ldi	r27, 0x00	; 0
    2422:	e2 e3       	ldi	r30, 0x32	; 50
    2424:	f0 e0       	ldi	r31, 0x00	; 0
    2426:	80 81       	ld	r24, Z
    2428:	48 2f       	mov	r20, r24
    242a:	8a 81       	ldd	r24, Y+2	; 0x02
    242c:	28 2f       	mov	r18, r24
    242e:	30 e0       	ldi	r19, 0x00	; 0
    2430:	81 e0       	ldi	r24, 0x01	; 1
    2432:	90 e0       	ldi	r25, 0x00	; 0
    2434:	02 2e       	mov	r0, r18
    2436:	02 c0       	rjmp	.+4      	; 0x243c <DIO_vTogPinValue+0xc4>
    2438:	88 0f       	add	r24, r24
    243a:	99 1f       	adc	r25, r25
    243c:	0a 94       	dec	r0
    243e:	e2 f7       	brpl	.-8      	; 0x2438 <DIO_vTogPinValue+0xc0>
    2440:	84 27       	eor	r24, r20
    2442:	8c 93       	st	X, r24
		}
	}
	else{
		//do nothing
	}
}
    2444:	0f 90       	pop	r0
    2446:	0f 90       	pop	r0
    2448:	cf 91       	pop	r28
    244a:	df 91       	pop	r29
    244c:	08 95       	ret

0000244e <ADC_vInit>:
 *      Author: a7med
 */
void(*Aptr)(void)='\0';

#include "ADC.h"
void ADC_vInit(){
    244e:	df 93       	push	r29
    2450:	cf 93       	push	r28
    2452:	cd b7       	in	r28, 0x3d	; 61
    2454:	de b7       	in	r29, 0x3e	; 62
#if PollingOrInterrupt==Polling
	#if	ADCMode==SingleConvertion
		ADCSRA = 0x87;
	#elif ADCMode==FreeRunningMode
		ADCSRA = 0xA7;
    2456:	e6 e2       	ldi	r30, 0x26	; 38
    2458:	f0 e0       	ldi	r31, 0x00	; 0
    245a:	87 ea       	ldi	r24, 0xA7	; 167
    245c:	80 83       	st	Z, r24
		SFIOR = SFIOR|0x00;
    245e:	a0 e5       	ldi	r26, 0x50	; 80
    2460:	b0 e0       	ldi	r27, 0x00	; 0
    2462:	e0 e5       	ldi	r30, 0x50	; 80
    2464:	f0 e0       	ldi	r31, 0x00	; 0
    2466:	80 81       	ld	r24, Z
    2468:	8c 93       	st	X, r24
		CLR_BIT(SFIOR,5);
		SET_BIT(SFIOR,6);
		CLR_BIT(SFIOR,7);
	#endif
#endif
	ADMUX=(0x60|((ADCNum)&0x1F));
    246a:	27 e2       	ldi	r18, 0x27	; 39
    246c:	30 e0       	ldi	r19, 0x00	; 0
    246e:	a7 e2       	ldi	r26, 0x27	; 39
    2470:	b0 e0       	ldi	r27, 0x00	; 0
    2472:	e7 e2       	ldi	r30, 0x27	; 39
    2474:	f0 e0       	ldi	r31, 0x00	; 0
    2476:	80 81       	ld	r24, Z
    2478:	81 60       	ori	r24, 0x01	; 1
    247a:	8c 93       	st	X, r24
    247c:	8c 91       	ld	r24, X
    247e:	8f 71       	andi	r24, 0x1F	; 31
    2480:	80 66       	ori	r24, 0x60	; 96
    2482:	f9 01       	movw	r30, r18
    2484:	80 83       	st	Z, r24
	}
    2486:	cf 91       	pop	r28
    2488:	df 91       	pop	r29
    248a:	08 95       	ret

0000248c <ADC_vGetVal>:
	u16 ADC_vGetVal(){
    248c:	df 93       	push	r29
    248e:	cf 93       	push	r28
    2490:	cd b7       	in	r28, 0x3d	; 61
    2492:	de b7       	in	r29, 0x3e	; 62
    2494:	66 97       	sbiw	r28, 0x16	; 22
    2496:	0f b6       	in	r0, 0x3f	; 63
    2498:	f8 94       	cli
    249a:	de bf       	out	0x3e, r29	; 62
    249c:	0f be       	out	0x3f, r0	; 63
    249e:	cd bf       	out	0x3d, r28	; 61
		StartConversion;
    24a0:	a6 e2       	ldi	r26, 0x26	; 38
    24a2:	b0 e0       	ldi	r27, 0x00	; 0
    24a4:	e6 e2       	ldi	r30, 0x26	; 38
    24a6:	f0 e0       	ldi	r31, 0x00	; 0
    24a8:	80 81       	ld	r24, Z
    24aa:	80 64       	ori	r24, 0x40	; 64
    24ac:	8c 93       	st	X, r24
		u32 y;
		u32 z;
	#if ADCMode==FreeRunningMode
			while((ADIF)==0);
    24ae:	e6 e2       	ldi	r30, 0x26	; 38
    24b0:	f0 e0       	ldi	r31, 0x00	; 0
    24b2:	80 81       	ld	r24, Z
    24b4:	82 95       	swap	r24
    24b6:	8f 70       	andi	r24, 0x0F	; 15
    24b8:	88 2f       	mov	r24, r24
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	81 70       	andi	r24, 0x01	; 1
    24be:	90 70       	andi	r25, 0x00	; 0
    24c0:	00 97       	sbiw	r24, 0x00	; 0
    24c2:	a9 f3       	breq	.-22     	; 0x24ae <ADC_vGetVal+0x22>
    24c4:	80 e0       	ldi	r24, 0x00	; 0
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	a0 e2       	ldi	r26, 0x20	; 32
    24ca:	b1 e4       	ldi	r27, 0x41	; 65
    24cc:	8b 87       	std	Y+11, r24	; 0x0b
    24ce:	9c 87       	std	Y+12, r25	; 0x0c
    24d0:	ad 87       	std	Y+13, r26	; 0x0d
    24d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    24d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    24d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    24da:	9e 85       	ldd	r25, Y+14	; 0x0e
    24dc:	20 e0       	ldi	r18, 0x00	; 0
    24de:	30 e0       	ldi	r19, 0x00	; 0
    24e0:	4a e7       	ldi	r20, 0x7A	; 122
    24e2:	55 e4       	ldi	r21, 0x45	; 69
    24e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e8:	dc 01       	movw	r26, r24
    24ea:	cb 01       	movw	r24, r22
    24ec:	8f 83       	std	Y+7, r24	; 0x07
    24ee:	98 87       	std	Y+8, r25	; 0x08
    24f0:	a9 87       	std	Y+9, r26	; 0x09
    24f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24f4:	6f 81       	ldd	r22, Y+7	; 0x07
    24f6:	78 85       	ldd	r23, Y+8	; 0x08
    24f8:	89 85       	ldd	r24, Y+9	; 0x09
    24fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    24fc:	20 e0       	ldi	r18, 0x00	; 0
    24fe:	30 e0       	ldi	r19, 0x00	; 0
    2500:	40 e8       	ldi	r20, 0x80	; 128
    2502:	5f e3       	ldi	r21, 0x3F	; 63
    2504:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2508:	88 23       	and	r24, r24
    250a:	2c f4       	brge	.+10     	; 0x2516 <ADC_vGetVal+0x8a>
		__ticks = 1;
    250c:	81 e0       	ldi	r24, 0x01	; 1
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	9e 83       	std	Y+6, r25	; 0x06
    2512:	8d 83       	std	Y+5, r24	; 0x05
    2514:	3f c0       	rjmp	.+126    	; 0x2594 <ADC_vGetVal+0x108>
	else if (__tmp > 65535)
    2516:	6f 81       	ldd	r22, Y+7	; 0x07
    2518:	78 85       	ldd	r23, Y+8	; 0x08
    251a:	89 85       	ldd	r24, Y+9	; 0x09
    251c:	9a 85       	ldd	r25, Y+10	; 0x0a
    251e:	20 e0       	ldi	r18, 0x00	; 0
    2520:	3f ef       	ldi	r19, 0xFF	; 255
    2522:	4f e7       	ldi	r20, 0x7F	; 127
    2524:	57 e4       	ldi	r21, 0x47	; 71
    2526:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    252a:	18 16       	cp	r1, r24
    252c:	4c f5       	brge	.+82     	; 0x2580 <ADC_vGetVal+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    252e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2530:	7c 85       	ldd	r23, Y+12	; 0x0c
    2532:	8d 85       	ldd	r24, Y+13	; 0x0d
    2534:	9e 85       	ldd	r25, Y+14	; 0x0e
    2536:	20 e0       	ldi	r18, 0x00	; 0
    2538:	30 e0       	ldi	r19, 0x00	; 0
    253a:	40 e2       	ldi	r20, 0x20	; 32
    253c:	51 e4       	ldi	r21, 0x41	; 65
    253e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2542:	dc 01       	movw	r26, r24
    2544:	cb 01       	movw	r24, r22
    2546:	bc 01       	movw	r22, r24
    2548:	cd 01       	movw	r24, r26
    254a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    254e:	dc 01       	movw	r26, r24
    2550:	cb 01       	movw	r24, r22
    2552:	9e 83       	std	Y+6, r25	; 0x06
    2554:	8d 83       	std	Y+5, r24	; 0x05
    2556:	0f c0       	rjmp	.+30     	; 0x2576 <ADC_vGetVal+0xea>
    2558:	80 e9       	ldi	r24, 0x90	; 144
    255a:	91 e0       	ldi	r25, 0x01	; 1
    255c:	9c 83       	std	Y+4, r25	; 0x04
    255e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2560:	8b 81       	ldd	r24, Y+3	; 0x03
    2562:	9c 81       	ldd	r25, Y+4	; 0x04
    2564:	01 97       	sbiw	r24, 0x01	; 1
    2566:	f1 f7       	brne	.-4      	; 0x2564 <ADC_vGetVal+0xd8>
    2568:	9c 83       	std	Y+4, r25	; 0x04
    256a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    256c:	8d 81       	ldd	r24, Y+5	; 0x05
    256e:	9e 81       	ldd	r25, Y+6	; 0x06
    2570:	01 97       	sbiw	r24, 0x01	; 1
    2572:	9e 83       	std	Y+6, r25	; 0x06
    2574:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2576:	8d 81       	ldd	r24, Y+5	; 0x05
    2578:	9e 81       	ldd	r25, Y+6	; 0x06
    257a:	00 97       	sbiw	r24, 0x00	; 0
    257c:	69 f7       	brne	.-38     	; 0x2558 <ADC_vGetVal+0xcc>
    257e:	14 c0       	rjmp	.+40     	; 0x25a8 <ADC_vGetVal+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2580:	6f 81       	ldd	r22, Y+7	; 0x07
    2582:	78 85       	ldd	r23, Y+8	; 0x08
    2584:	89 85       	ldd	r24, Y+9	; 0x09
    2586:	9a 85       	ldd	r25, Y+10	; 0x0a
    2588:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    258c:	dc 01       	movw	r26, r24
    258e:	cb 01       	movw	r24, r22
    2590:	9e 83       	std	Y+6, r25	; 0x06
    2592:	8d 83       	std	Y+5, r24	; 0x05
    2594:	8d 81       	ldd	r24, Y+5	; 0x05
    2596:	9e 81       	ldd	r25, Y+6	; 0x06
    2598:	9a 83       	std	Y+2, r25	; 0x02
    259a:	89 83       	std	Y+1, r24	; 0x01
    259c:	89 81       	ldd	r24, Y+1	; 0x01
    259e:	9a 81       	ldd	r25, Y+2	; 0x02
    25a0:	01 97       	sbiw	r24, 0x01	; 1
    25a2:	f1 f7       	brne	.-4      	; 0x25a0 <ADC_vGetVal+0x114>
    25a4:	9a 83       	std	Y+2, r25	; 0x02
    25a6:	89 83       	std	Y+1, r24	; 0x01
	#elif ADCMode==SingleConvertion
			StartConversion;
			while(CheckConversoin==1);
	#endif
		_delay_ms(10);
		y = (((u32)ADCH)<<2);
    25a8:	e5 e2       	ldi	r30, 0x25	; 37
    25aa:	f0 e0       	ldi	r31, 0x00	; 0
    25ac:	80 81       	ld	r24, Z
    25ae:	88 2f       	mov	r24, r24
    25b0:	90 e0       	ldi	r25, 0x00	; 0
    25b2:	a0 e0       	ldi	r26, 0x00	; 0
    25b4:	b0 e0       	ldi	r27, 0x00	; 0
    25b6:	88 0f       	add	r24, r24
    25b8:	99 1f       	adc	r25, r25
    25ba:	aa 1f       	adc	r26, r26
    25bc:	bb 1f       	adc	r27, r27
    25be:	88 0f       	add	r24, r24
    25c0:	99 1f       	adc	r25, r25
    25c2:	aa 1f       	adc	r26, r26
    25c4:	bb 1f       	adc	r27, r27
    25c6:	8b 8b       	std	Y+19, r24	; 0x13
    25c8:	9c 8b       	std	Y+20, r25	; 0x14
    25ca:	ad 8b       	std	Y+21, r26	; 0x15
    25cc:	be 8b       	std	Y+22, r27	; 0x16
		z = (y*5000)/1024;
    25ce:	8b 89       	ldd	r24, Y+19	; 0x13
    25d0:	9c 89       	ldd	r25, Y+20	; 0x14
    25d2:	ad 89       	ldd	r26, Y+21	; 0x15
    25d4:	be 89       	ldd	r27, Y+22	; 0x16
    25d6:	28 e8       	ldi	r18, 0x88	; 136
    25d8:	33 e1       	ldi	r19, 0x13	; 19
    25da:	40 e0       	ldi	r20, 0x00	; 0
    25dc:	50 e0       	ldi	r21, 0x00	; 0
    25de:	bc 01       	movw	r22, r24
    25e0:	cd 01       	movw	r24, r26
    25e2:	0e 94 ab 34 	call	0x6956	; 0x6956 <__mulsi3>
    25e6:	dc 01       	movw	r26, r24
    25e8:	cb 01       	movw	r24, r22
    25ea:	07 2e       	mov	r0, r23
    25ec:	7a e0       	ldi	r23, 0x0A	; 10
    25ee:	b6 95       	lsr	r27
    25f0:	a7 95       	ror	r26
    25f2:	97 95       	ror	r25
    25f4:	87 95       	ror	r24
    25f6:	7a 95       	dec	r23
    25f8:	d1 f7       	brne	.-12     	; 0x25ee <ADC_vGetVal+0x162>
    25fa:	70 2d       	mov	r23, r0
    25fc:	8f 87       	std	Y+15, r24	; 0x0f
    25fe:	98 8b       	std	Y+16, r25	; 0x10
    2600:	a9 8b       	std	Y+17, r26	; 0x11
    2602:	ba 8b       	std	Y+18, r27	; 0x12
		return z;
    2604:	8f 85       	ldd	r24, Y+15	; 0x0f
    2606:	98 89       	ldd	r25, Y+16	; 0x10
	}
    2608:	66 96       	adiw	r28, 0x16	; 22
    260a:	0f b6       	in	r0, 0x3f	; 63
    260c:	f8 94       	cli
    260e:	de bf       	out	0x3e, r29	; 62
    2610:	0f be       	out	0x3f, r0	; 63
    2612:	cd bf       	out	0x3d, r28	; 61
    2614:	cf 91       	pop	r28
    2616:	df 91       	pop	r29
    2618:	08 95       	ret

0000261a <ADC_vADCCallBack>:
	void ADC_vADCCallBack(void(*ptr)(void)){
    261a:	df 93       	push	r29
    261c:	cf 93       	push	r28
    261e:	00 d0       	rcall	.+0      	; 0x2620 <ADC_vADCCallBack+0x6>
    2620:	cd b7       	in	r28, 0x3d	; 61
    2622:	de b7       	in	r29, 0x3e	; 62
    2624:	9a 83       	std	Y+2, r25	; 0x02
    2626:	89 83       	std	Y+1, r24	; 0x01
		if(ptr!='\0'){
    2628:	89 81       	ldd	r24, Y+1	; 0x01
    262a:	9a 81       	ldd	r25, Y+2	; 0x02
    262c:	00 97       	sbiw	r24, 0x00	; 0
    262e:	31 f0       	breq	.+12     	; 0x263c <ADC_vADCCallBack+0x22>
			Aptr=ptr;
    2630:	89 81       	ldd	r24, Y+1	; 0x01
    2632:	9a 81       	ldd	r25, Y+2	; 0x02
    2634:	90 93 e2 00 	sts	0x00E2, r25
    2638:	80 93 e1 00 	sts	0x00E1, r24
		}
	}
    263c:	0f 90       	pop	r0
    263e:	0f 90       	pop	r0
    2640:	cf 91       	pop	r28
    2642:	df 91       	pop	r29
    2644:	08 95       	ret

00002646 <__vector_16>:
ISR(ADC_vect){
    2646:	1f 92       	push	r1
    2648:	0f 92       	push	r0
    264a:	0f b6       	in	r0, 0x3f	; 63
    264c:	0f 92       	push	r0
    264e:	11 24       	eor	r1, r1
    2650:	2f 93       	push	r18
    2652:	3f 93       	push	r19
    2654:	4f 93       	push	r20
    2656:	5f 93       	push	r21
    2658:	6f 93       	push	r22
    265a:	7f 93       	push	r23
    265c:	8f 93       	push	r24
    265e:	9f 93       	push	r25
    2660:	af 93       	push	r26
    2662:	bf 93       	push	r27
    2664:	ef 93       	push	r30
    2666:	ff 93       	push	r31
    2668:	df 93       	push	r29
    266a:	cf 93       	push	r28
    266c:	cd b7       	in	r28, 0x3d	; 61
    266e:	de b7       	in	r29, 0x3e	; 62
		if(Aptr!='\0'){
    2670:	80 91 e1 00 	lds	r24, 0x00E1
    2674:	90 91 e2 00 	lds	r25, 0x00E2
    2678:	00 97       	sbiw	r24, 0x00	; 0
    267a:	29 f0       	breq	.+10     	; 0x2686 <__vector_16+0x40>
			Aptr();
    267c:	e0 91 e1 00 	lds	r30, 0x00E1
    2680:	f0 91 e2 00 	lds	r31, 0x00E2
    2684:	09 95       	icall
		}
	}
    2686:	cf 91       	pop	r28
    2688:	df 91       	pop	r29
    268a:	ff 91       	pop	r31
    268c:	ef 91       	pop	r30
    268e:	bf 91       	pop	r27
    2690:	af 91       	pop	r26
    2692:	9f 91       	pop	r25
    2694:	8f 91       	pop	r24
    2696:	7f 91       	pop	r23
    2698:	6f 91       	pop	r22
    269a:	5f 91       	pop	r21
    269c:	4f 91       	pop	r20
    269e:	3f 91       	pop	r19
    26a0:	2f 91       	pop	r18
    26a2:	0f 90       	pop	r0
    26a4:	0f be       	out	0x3f, r0	; 63
    26a6:	0f 90       	pop	r0
    26a8:	1f 90       	pop	r1
    26aa:	18 95       	reti

000026ac <LedAndBuzzer_vLed0Open>:
* \Description     : this function is used to open the led0 which is connected to PortC Pin2
*
* \Parameters (in) : None
* \Parameters (out): None
*******************************************************************************/
void LedAndBuzzer_vLed0Open(){
    26ac:	df 93       	push	r29
    26ae:	cf 93       	push	r28
    26b0:	cd b7       	in	r28, 0x3d	; 61
    26b2:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPinDirection(PortC, Pin2, Pin_OutPut);
    26b4:	82 e0       	ldi	r24, 0x02	; 2
    26b6:	62 e0       	ldi	r22, 0x02	; 2
    26b8:	41 e0       	ldi	r20, 0x01	; 1
    26ba:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <DIO_vSetPinDirection>
	DIO_vSetPinValue(PortC, Pin2, Pin_High);
    26be:	82 e0       	ldi	r24, 0x02	; 2
    26c0:	62 e0       	ldi	r22, 0x02	; 2
    26c2:	41 e0       	ldi	r20, 0x01	; 1
    26c4:	0e 94 74 10 	call	0x20e8	; 0x20e8 <DIO_vSetPinValue>
}
    26c8:	cf 91       	pop	r28
    26ca:	df 91       	pop	r29
    26cc:	08 95       	ret

000026ce <LedAndBuzzer_vLed0Close>:
* \Description     : this function is used to Close the led0 which is connected to PortC Pin2
*
* \Parameters (in) : None
* \Parameters (out): None
*******************************************************************************/
void LedAndBuzzer_vLed0Close(){
    26ce:	df 93       	push	r29
    26d0:	cf 93       	push	r28
    26d2:	cd b7       	in	r28, 0x3d	; 61
    26d4:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPinValue(PortC, Pin2, Pin_Low);
    26d6:	82 e0       	ldi	r24, 0x02	; 2
    26d8:	62 e0       	ldi	r22, 0x02	; 2
    26da:	40 e0       	ldi	r20, 0x00	; 0
    26dc:	0e 94 74 10 	call	0x20e8	; 0x20e8 <DIO_vSetPinValue>
}
    26e0:	cf 91       	pop	r28
    26e2:	df 91       	pop	r29
    26e4:	08 95       	ret

000026e6 <LedAndBuzzer_vLed1Open>:
* \Description     : this function is used to open the led1 which is connected to PortC Pin7
*
* \Parameters (in) : None
* \Parameters (out): None
*******************************************************************************/
void LedAndBuzzer_vLed1Open(){
    26e6:	df 93       	push	r29
    26e8:	cf 93       	push	r28
    26ea:	cd b7       	in	r28, 0x3d	; 61
    26ec:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPinDirection(PortC, Pin7, Pin_OutPut);
    26ee:	82 e0       	ldi	r24, 0x02	; 2
    26f0:	67 e0       	ldi	r22, 0x07	; 7
    26f2:	41 e0       	ldi	r20, 0x01	; 1
    26f4:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <DIO_vSetPinDirection>
	DIO_vSetPinValue(PortC, Pin7, Pin_High);
    26f8:	82 e0       	ldi	r24, 0x02	; 2
    26fa:	67 e0       	ldi	r22, 0x07	; 7
    26fc:	41 e0       	ldi	r20, 0x01	; 1
    26fe:	0e 94 74 10 	call	0x20e8	; 0x20e8 <DIO_vSetPinValue>
}
    2702:	cf 91       	pop	r28
    2704:	df 91       	pop	r29
    2706:	08 95       	ret

00002708 <LedAndBuzzer_vLed1Close>:
* \Description     : this function is used to Close the led1 which is connected to PortC Pin7
*
* \Parameters (in) : None
* \Parameters (out): None
*******************************************************************************/
void LedAndBuzzer_vLed1Close(){
    2708:	df 93       	push	r29
    270a:	cf 93       	push	r28
    270c:	cd b7       	in	r28, 0x3d	; 61
    270e:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPinValue(PortC, Pin7, Pin_Low);
    2710:	82 e0       	ldi	r24, 0x02	; 2
    2712:	67 e0       	ldi	r22, 0x07	; 7
    2714:	40 e0       	ldi	r20, 0x00	; 0
    2716:	0e 94 74 10 	call	0x20e8	; 0x20e8 <DIO_vSetPinValue>
}
    271a:	cf 91       	pop	r28
    271c:	df 91       	pop	r29
    271e:	08 95       	ret

00002720 <LedAndBuzzer_vLed2Open>:
* \Description     : this function is used to open the led2 which is connected to PortD Pin3
*
* \Parameters (in) : None
* \Parameters (out): None
*******************************************************************************/
void LedAndBuzzer_vLed2Open(){
    2720:	df 93       	push	r29
    2722:	cf 93       	push	r28
    2724:	cd b7       	in	r28, 0x3d	; 61
    2726:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPinDirection(PortD, Pin3, Pin_OutPut);
    2728:	83 e0       	ldi	r24, 0x03	; 3
    272a:	63 e0       	ldi	r22, 0x03	; 3
    272c:	41 e0       	ldi	r20, 0x01	; 1
    272e:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <DIO_vSetPinDirection>
	DIO_vSetPinValue(PortD, Pin3, Pin_High);
    2732:	83 e0       	ldi	r24, 0x03	; 3
    2734:	63 e0       	ldi	r22, 0x03	; 3
    2736:	41 e0       	ldi	r20, 0x01	; 1
    2738:	0e 94 74 10 	call	0x20e8	; 0x20e8 <DIO_vSetPinValue>
}
    273c:	cf 91       	pop	r28
    273e:	df 91       	pop	r29
    2740:	08 95       	ret

00002742 <LedAndBuzzer_vLed2Close>:
* \Description     : this function is used to Close the led2 which is connected to PortD Pin3
*
* \Parameters (in) : None
* \Parameters (out): None
*******************************************************************************/
void LedAndBuzzer_vLed2Close(){
    2742:	df 93       	push	r29
    2744:	cf 93       	push	r28
    2746:	cd b7       	in	r28, 0x3d	; 61
    2748:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPinValue(PortD, Pin3, Pin_Low);
    274a:	83 e0       	ldi	r24, 0x03	; 3
    274c:	63 e0       	ldi	r22, 0x03	; 3
    274e:	40 e0       	ldi	r20, 0x00	; 0
    2750:	0e 94 74 10 	call	0x20e8	; 0x20e8 <DIO_vSetPinValue>
}
    2754:	cf 91       	pop	r28
    2756:	df 91       	pop	r29
    2758:	08 95       	ret

0000275a <LedAndBuzzer_vBuzzerOpen>:
* \Description     : this function is used to open the Buzzer which is connected to PortA Pin3
*
* \Parameters (in) : None
* \Parameters (out): None
*******************************************************************************/
void LedAndBuzzer_vBuzzerOpen(){
    275a:	df 93       	push	r29
    275c:	cf 93       	push	r28
    275e:	cd b7       	in	r28, 0x3d	; 61
    2760:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPinDirection(PortA, Pin3, Pin_OutPut);
    2762:	80 e0       	ldi	r24, 0x00	; 0
    2764:	63 e0       	ldi	r22, 0x03	; 3
    2766:	41 e0       	ldi	r20, 0x01	; 1
    2768:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <DIO_vSetPinDirection>
	DIO_vSetPinValue(PortA, Pin3, Pin_High);
    276c:	80 e0       	ldi	r24, 0x00	; 0
    276e:	63 e0       	ldi	r22, 0x03	; 3
    2770:	41 e0       	ldi	r20, 0x01	; 1
    2772:	0e 94 74 10 	call	0x20e8	; 0x20e8 <DIO_vSetPinValue>
}
    2776:	cf 91       	pop	r28
    2778:	df 91       	pop	r29
    277a:	08 95       	ret

0000277c <LedAndBuzzer_vBuzzerClose>:
* \Description     : this function is used to Close the Buzzer which is connected to PortA Pin3
*
* \Parameters (in) : None
* \Parameters (out): None
*******************************************************************************/
void LedAndBuzzer_vBuzzerClose(){
    277c:	df 93       	push	r29
    277e:	cf 93       	push	r28
    2780:	cd b7       	in	r28, 0x3d	; 61
    2782:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPinValue(PortA, Pin3, Pin_Low);
    2784:	80 e0       	ldi	r24, 0x00	; 0
    2786:	63 e0       	ldi	r22, 0x03	; 3
    2788:	40 e0       	ldi	r20, 0x00	; 0
    278a:	0e 94 74 10 	call	0x20e8	; 0x20e8 <DIO_vSetPinValue>
}
    278e:	cf 91       	pop	r28
    2790:	df 91       	pop	r29
    2792:	08 95       	ret

00002794 <LedAndBuzzer_vFlash>:
* \Description     : this function is used to turn on the LEDs and Buzzer for .25sec number of times
*
* \Parameters (in) : u8 Loc_vNumberOfFlashes	Number of LEDs and Buzzer WILL on and off
* \Parameters (out): None
*******************************************************************************/
void LedAndBuzzer_vFlash(u8 Loc_vNumberOfFlashes){
    2794:	df 93       	push	r29
    2796:	cf 93       	push	r28
    2798:	cd b7       	in	r28, 0x3d	; 61
    279a:	de b7       	in	r29, 0x3e	; 62
    279c:	6e 97       	sbiw	r28, 0x1e	; 30
    279e:	0f b6       	in	r0, 0x3f	; 63
    27a0:	f8 94       	cli
    27a2:	de bf       	out	0x3e, r29	; 62
    27a4:	0f be       	out	0x3f, r0	; 63
    27a6:	cd bf       	out	0x3d, r28	; 61
    27a8:	8e 8f       	std	Y+30, r24	; 0x1e
	u8 count;
	for(count=0;count<Loc_vNumberOfFlashes;count++){
    27aa:	1d 8e       	std	Y+29, r1	; 0x1d
    27ac:	f7 c0       	rjmp	.+494    	; 0x299c <LedAndBuzzer_vFlash+0x208>
		LedAndBuzzer_vBuzzerOpen();
    27ae:	0e 94 ad 13 	call	0x275a	; 0x275a <LedAndBuzzer_vBuzzerOpen>
		LedAndBuzzer_vLed0Open();
    27b2:	0e 94 56 13 	call	0x26ac	; 0x26ac <LedAndBuzzer_vLed0Open>
		LedAndBuzzer_vLed1Open();
    27b6:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LedAndBuzzer_vLed1Open>
		LedAndBuzzer_vLed2Open();
    27ba:	0e 94 90 13 	call	0x2720	; 0x2720 <LedAndBuzzer_vLed2Open>
    27be:	80 e0       	ldi	r24, 0x00	; 0
    27c0:	90 e0       	ldi	r25, 0x00	; 0
    27c2:	aa e7       	ldi	r26, 0x7A	; 122
    27c4:	b3 e4       	ldi	r27, 0x43	; 67
    27c6:	89 8f       	std	Y+25, r24	; 0x19
    27c8:	9a 8f       	std	Y+26, r25	; 0x1a
    27ca:	ab 8f       	std	Y+27, r26	; 0x1b
    27cc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27ce:	69 8d       	ldd	r22, Y+25	; 0x19
    27d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27d6:	20 e0       	ldi	r18, 0x00	; 0
    27d8:	30 e0       	ldi	r19, 0x00	; 0
    27da:	4a e7       	ldi	r20, 0x7A	; 122
    27dc:	55 e4       	ldi	r21, 0x45	; 69
    27de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e2:	dc 01       	movw	r26, r24
    27e4:	cb 01       	movw	r24, r22
    27e6:	8d 8b       	std	Y+21, r24	; 0x15
    27e8:	9e 8b       	std	Y+22, r25	; 0x16
    27ea:	af 8b       	std	Y+23, r26	; 0x17
    27ec:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    27ee:	6d 89       	ldd	r22, Y+21	; 0x15
    27f0:	7e 89       	ldd	r23, Y+22	; 0x16
    27f2:	8f 89       	ldd	r24, Y+23	; 0x17
    27f4:	98 8d       	ldd	r25, Y+24	; 0x18
    27f6:	20 e0       	ldi	r18, 0x00	; 0
    27f8:	30 e0       	ldi	r19, 0x00	; 0
    27fa:	40 e8       	ldi	r20, 0x80	; 128
    27fc:	5f e3       	ldi	r21, 0x3F	; 63
    27fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2802:	88 23       	and	r24, r24
    2804:	2c f4       	brge	.+10     	; 0x2810 <LedAndBuzzer_vFlash+0x7c>
		__ticks = 1;
    2806:	81 e0       	ldi	r24, 0x01	; 1
    2808:	90 e0       	ldi	r25, 0x00	; 0
    280a:	9c 8b       	std	Y+20, r25	; 0x14
    280c:	8b 8b       	std	Y+19, r24	; 0x13
    280e:	3f c0       	rjmp	.+126    	; 0x288e <LedAndBuzzer_vFlash+0xfa>
	else if (__tmp > 65535)
    2810:	6d 89       	ldd	r22, Y+21	; 0x15
    2812:	7e 89       	ldd	r23, Y+22	; 0x16
    2814:	8f 89       	ldd	r24, Y+23	; 0x17
    2816:	98 8d       	ldd	r25, Y+24	; 0x18
    2818:	20 e0       	ldi	r18, 0x00	; 0
    281a:	3f ef       	ldi	r19, 0xFF	; 255
    281c:	4f e7       	ldi	r20, 0x7F	; 127
    281e:	57 e4       	ldi	r21, 0x47	; 71
    2820:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2824:	18 16       	cp	r1, r24
    2826:	4c f5       	brge	.+82     	; 0x287a <LedAndBuzzer_vFlash+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2828:	69 8d       	ldd	r22, Y+25	; 0x19
    282a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    282c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    282e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2830:	20 e0       	ldi	r18, 0x00	; 0
    2832:	30 e0       	ldi	r19, 0x00	; 0
    2834:	40 e2       	ldi	r20, 0x20	; 32
    2836:	51 e4       	ldi	r21, 0x41	; 65
    2838:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    283c:	dc 01       	movw	r26, r24
    283e:	cb 01       	movw	r24, r22
    2840:	bc 01       	movw	r22, r24
    2842:	cd 01       	movw	r24, r26
    2844:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2848:	dc 01       	movw	r26, r24
    284a:	cb 01       	movw	r24, r22
    284c:	9c 8b       	std	Y+20, r25	; 0x14
    284e:	8b 8b       	std	Y+19, r24	; 0x13
    2850:	0f c0       	rjmp	.+30     	; 0x2870 <LedAndBuzzer_vFlash+0xdc>
    2852:	80 e9       	ldi	r24, 0x90	; 144
    2854:	91 e0       	ldi	r25, 0x01	; 1
    2856:	9a 8b       	std	Y+18, r25	; 0x12
    2858:	89 8b       	std	Y+17, r24	; 0x11
    285a:	89 89       	ldd	r24, Y+17	; 0x11
    285c:	9a 89       	ldd	r25, Y+18	; 0x12
    285e:	01 97       	sbiw	r24, 0x01	; 1
    2860:	f1 f7       	brne	.-4      	; 0x285e <LedAndBuzzer_vFlash+0xca>
    2862:	9a 8b       	std	Y+18, r25	; 0x12
    2864:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2866:	8b 89       	ldd	r24, Y+19	; 0x13
    2868:	9c 89       	ldd	r25, Y+20	; 0x14
    286a:	01 97       	sbiw	r24, 0x01	; 1
    286c:	9c 8b       	std	Y+20, r25	; 0x14
    286e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2870:	8b 89       	ldd	r24, Y+19	; 0x13
    2872:	9c 89       	ldd	r25, Y+20	; 0x14
    2874:	00 97       	sbiw	r24, 0x00	; 0
    2876:	69 f7       	brne	.-38     	; 0x2852 <LedAndBuzzer_vFlash+0xbe>
    2878:	14 c0       	rjmp	.+40     	; 0x28a2 <LedAndBuzzer_vFlash+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    287a:	6d 89       	ldd	r22, Y+21	; 0x15
    287c:	7e 89       	ldd	r23, Y+22	; 0x16
    287e:	8f 89       	ldd	r24, Y+23	; 0x17
    2880:	98 8d       	ldd	r25, Y+24	; 0x18
    2882:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2886:	dc 01       	movw	r26, r24
    2888:	cb 01       	movw	r24, r22
    288a:	9c 8b       	std	Y+20, r25	; 0x14
    288c:	8b 8b       	std	Y+19, r24	; 0x13
    288e:	8b 89       	ldd	r24, Y+19	; 0x13
    2890:	9c 89       	ldd	r25, Y+20	; 0x14
    2892:	98 8b       	std	Y+16, r25	; 0x10
    2894:	8f 87       	std	Y+15, r24	; 0x0f
    2896:	8f 85       	ldd	r24, Y+15	; 0x0f
    2898:	98 89       	ldd	r25, Y+16	; 0x10
    289a:	01 97       	sbiw	r24, 0x01	; 1
    289c:	f1 f7       	brne	.-4      	; 0x289a <LedAndBuzzer_vFlash+0x106>
    289e:	98 8b       	std	Y+16, r25	; 0x10
    28a0:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(250);
		LedAndBuzzer_vBuzzerClose();
    28a2:	0e 94 be 13 	call	0x277c	; 0x277c <LedAndBuzzer_vBuzzerClose>
		LedAndBuzzer_vLed2Close();
    28a6:	0e 94 a1 13 	call	0x2742	; 0x2742 <LedAndBuzzer_vLed2Close>
		LedAndBuzzer_vLed0Close();
    28aa:	0e 94 67 13 	call	0x26ce	; 0x26ce <LedAndBuzzer_vLed0Close>
		LedAndBuzzer_vLed1Close();
    28ae:	0e 94 84 13 	call	0x2708	; 0x2708 <LedAndBuzzer_vLed1Close>
    28b2:	80 e0       	ldi	r24, 0x00	; 0
    28b4:	90 e0       	ldi	r25, 0x00	; 0
    28b6:	aa e7       	ldi	r26, 0x7A	; 122
    28b8:	b3 e4       	ldi	r27, 0x43	; 67
    28ba:	8b 87       	std	Y+11, r24	; 0x0b
    28bc:	9c 87       	std	Y+12, r25	; 0x0c
    28be:	ad 87       	std	Y+13, r26	; 0x0d
    28c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    28c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    28c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    28c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    28ca:	20 e0       	ldi	r18, 0x00	; 0
    28cc:	30 e0       	ldi	r19, 0x00	; 0
    28ce:	4a e7       	ldi	r20, 0x7A	; 122
    28d0:	55 e4       	ldi	r21, 0x45	; 69
    28d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28d6:	dc 01       	movw	r26, r24
    28d8:	cb 01       	movw	r24, r22
    28da:	8f 83       	std	Y+7, r24	; 0x07
    28dc:	98 87       	std	Y+8, r25	; 0x08
    28de:	a9 87       	std	Y+9, r26	; 0x09
    28e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28e2:	6f 81       	ldd	r22, Y+7	; 0x07
    28e4:	78 85       	ldd	r23, Y+8	; 0x08
    28e6:	89 85       	ldd	r24, Y+9	; 0x09
    28e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    28ea:	20 e0       	ldi	r18, 0x00	; 0
    28ec:	30 e0       	ldi	r19, 0x00	; 0
    28ee:	40 e8       	ldi	r20, 0x80	; 128
    28f0:	5f e3       	ldi	r21, 0x3F	; 63
    28f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28f6:	88 23       	and	r24, r24
    28f8:	2c f4       	brge	.+10     	; 0x2904 <LedAndBuzzer_vFlash+0x170>
		__ticks = 1;
    28fa:	81 e0       	ldi	r24, 0x01	; 1
    28fc:	90 e0       	ldi	r25, 0x00	; 0
    28fe:	9e 83       	std	Y+6, r25	; 0x06
    2900:	8d 83       	std	Y+5, r24	; 0x05
    2902:	3f c0       	rjmp	.+126    	; 0x2982 <LedAndBuzzer_vFlash+0x1ee>
	else if (__tmp > 65535)
    2904:	6f 81       	ldd	r22, Y+7	; 0x07
    2906:	78 85       	ldd	r23, Y+8	; 0x08
    2908:	89 85       	ldd	r24, Y+9	; 0x09
    290a:	9a 85       	ldd	r25, Y+10	; 0x0a
    290c:	20 e0       	ldi	r18, 0x00	; 0
    290e:	3f ef       	ldi	r19, 0xFF	; 255
    2910:	4f e7       	ldi	r20, 0x7F	; 127
    2912:	57 e4       	ldi	r21, 0x47	; 71
    2914:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2918:	18 16       	cp	r1, r24
    291a:	4c f5       	brge	.+82     	; 0x296e <LedAndBuzzer_vFlash+0x1da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    291c:	6b 85       	ldd	r22, Y+11	; 0x0b
    291e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2920:	8d 85       	ldd	r24, Y+13	; 0x0d
    2922:	9e 85       	ldd	r25, Y+14	; 0x0e
    2924:	20 e0       	ldi	r18, 0x00	; 0
    2926:	30 e0       	ldi	r19, 0x00	; 0
    2928:	40 e2       	ldi	r20, 0x20	; 32
    292a:	51 e4       	ldi	r21, 0x41	; 65
    292c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2930:	dc 01       	movw	r26, r24
    2932:	cb 01       	movw	r24, r22
    2934:	bc 01       	movw	r22, r24
    2936:	cd 01       	movw	r24, r26
    2938:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    293c:	dc 01       	movw	r26, r24
    293e:	cb 01       	movw	r24, r22
    2940:	9e 83       	std	Y+6, r25	; 0x06
    2942:	8d 83       	std	Y+5, r24	; 0x05
    2944:	0f c0       	rjmp	.+30     	; 0x2964 <LedAndBuzzer_vFlash+0x1d0>
    2946:	80 e9       	ldi	r24, 0x90	; 144
    2948:	91 e0       	ldi	r25, 0x01	; 1
    294a:	9c 83       	std	Y+4, r25	; 0x04
    294c:	8b 83       	std	Y+3, r24	; 0x03
    294e:	8b 81       	ldd	r24, Y+3	; 0x03
    2950:	9c 81       	ldd	r25, Y+4	; 0x04
    2952:	01 97       	sbiw	r24, 0x01	; 1
    2954:	f1 f7       	brne	.-4      	; 0x2952 <LedAndBuzzer_vFlash+0x1be>
    2956:	9c 83       	std	Y+4, r25	; 0x04
    2958:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    295a:	8d 81       	ldd	r24, Y+5	; 0x05
    295c:	9e 81       	ldd	r25, Y+6	; 0x06
    295e:	01 97       	sbiw	r24, 0x01	; 1
    2960:	9e 83       	std	Y+6, r25	; 0x06
    2962:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2964:	8d 81       	ldd	r24, Y+5	; 0x05
    2966:	9e 81       	ldd	r25, Y+6	; 0x06
    2968:	00 97       	sbiw	r24, 0x00	; 0
    296a:	69 f7       	brne	.-38     	; 0x2946 <LedAndBuzzer_vFlash+0x1b2>
    296c:	14 c0       	rjmp	.+40     	; 0x2996 <LedAndBuzzer_vFlash+0x202>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    296e:	6f 81       	ldd	r22, Y+7	; 0x07
    2970:	78 85       	ldd	r23, Y+8	; 0x08
    2972:	89 85       	ldd	r24, Y+9	; 0x09
    2974:	9a 85       	ldd	r25, Y+10	; 0x0a
    2976:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    297a:	dc 01       	movw	r26, r24
    297c:	cb 01       	movw	r24, r22
    297e:	9e 83       	std	Y+6, r25	; 0x06
    2980:	8d 83       	std	Y+5, r24	; 0x05
    2982:	8d 81       	ldd	r24, Y+5	; 0x05
    2984:	9e 81       	ldd	r25, Y+6	; 0x06
    2986:	9a 83       	std	Y+2, r25	; 0x02
    2988:	89 83       	std	Y+1, r24	; 0x01
    298a:	89 81       	ldd	r24, Y+1	; 0x01
    298c:	9a 81       	ldd	r25, Y+2	; 0x02
    298e:	01 97       	sbiw	r24, 0x01	; 1
    2990:	f1 f7       	brne	.-4      	; 0x298e <LedAndBuzzer_vFlash+0x1fa>
    2992:	9a 83       	std	Y+2, r25	; 0x02
    2994:	89 83       	std	Y+1, r24	; 0x01
* \Parameters (in) : u8 Loc_vNumberOfFlashes	Number of LEDs and Buzzer WILL on and off
* \Parameters (out): None
*******************************************************************************/
void LedAndBuzzer_vFlash(u8 Loc_vNumberOfFlashes){
	u8 count;
	for(count=0;count<Loc_vNumberOfFlashes;count++){
    2996:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2998:	8f 5f       	subi	r24, 0xFF	; 255
    299a:	8d 8f       	std	Y+29, r24	; 0x1d
    299c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    299e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    29a0:	98 17       	cp	r25, r24
    29a2:	08 f4       	brcc	.+2      	; 0x29a6 <LedAndBuzzer_vFlash+0x212>
    29a4:	04 cf       	rjmp	.-504    	; 0x27ae <LedAndBuzzer_vFlash+0x1a>
		LedAndBuzzer_vLed2Close();
		LedAndBuzzer_vLed0Close();
		LedAndBuzzer_vLed1Close();
		_delay_ms(250);
	}
}
    29a6:	6e 96       	adiw	r28, 0x1e	; 30
    29a8:	0f b6       	in	r0, 0x3f	; 63
    29aa:	f8 94       	cli
    29ac:	de bf       	out	0x3e, r29	; 62
    29ae:	0f be       	out	0x3f, r0	; 63
    29b0:	cd bf       	out	0x3d, r28	; 61
    29b2:	cf 91       	pop	r28
    29b4:	df 91       	pop	r29
    29b6:	08 95       	ret

000029b8 <_7Segma_vInit>:
 *      and PortA Pin4, Pin5, Pin6, and Pin7 is used to show number .
 */

#include "_7Segma.h"
//------------ SET pins connected to the 7segma as out puts
void _7Segma_vInit(){
    29b8:	df 93       	push	r29
    29ba:	cf 93       	push	r28
    29bc:	cd b7       	in	r28, 0x3d	; 61
    29be:	de b7       	in	r29, 0x3e	; 62
	/*----------7SEG_A-->PORTA .4
				7SEG_B-->PORTA .5
				7SEG_C-->PORTA .6
				7SEG_D-->PORTA .7*/
	DIO_vSetPinDirection(PortA, Pin4, Pin_OutPut);
    29c0:	80 e0       	ldi	r24, 0x00	; 0
    29c2:	64 e0       	ldi	r22, 0x04	; 4
    29c4:	41 e0       	ldi	r20, 0x01	; 1
    29c6:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PortA, Pin5, Pin_OutPut);
    29ca:	80 e0       	ldi	r24, 0x00	; 0
    29cc:	65 e0       	ldi	r22, 0x05	; 5
    29ce:	41 e0       	ldi	r20, 0x01	; 1
    29d0:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PortA, Pin6, Pin_OutPut);
    29d4:	80 e0       	ldi	r24, 0x00	; 0
    29d6:	66 e0       	ldi	r22, 0x06	; 6
    29d8:	41 e0       	ldi	r20, 0x01	; 1
    29da:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PortA, Pin7, Pin_OutPut);
    29de:	80 e0       	ldi	r24, 0x00	; 0
    29e0:	67 e0       	ldi	r22, 0x07	; 7
    29e2:	41 e0       	ldi	r20, 0x01	; 1
    29e4:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <DIO_vSetPinDirection>
	//-------------ENABLE LINES PINS ----------------
	DIO_vSetPinDirection(PortB, Pin2, Pin_OutPut);
    29e8:	81 e0       	ldi	r24, 0x01	; 1
    29ea:	62 e0       	ldi	r22, 0x02	; 2
    29ec:	41 e0       	ldi	r20, 0x01	; 1
    29ee:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PortB, Pin1, Pin_OutPut);
    29f2:	81 e0       	ldi	r24, 0x01	; 1
    29f4:	61 e0       	ldi	r22, 0x01	; 1
    29f6:	41 e0       	ldi	r20, 0x01	; 1
    29f8:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <DIO_vSetPinDirection>
}
    29fc:	cf 91       	pop	r28
    29fe:	df 91       	pop	r29
    2a00:	08 95       	ret

00002a02 <_7Segma_vEnable1>:
//-----------enable 7Segma 1 -----------
void _7Segma_vEnable1(){
    2a02:	df 93       	push	r29
    2a04:	cf 93       	push	r28
    2a06:	cd b7       	in	r28, 0x3d	; 61
    2a08:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPinValue(PortB, Pin1, Pin_High);
    2a0a:	81 e0       	ldi	r24, 0x01	; 1
    2a0c:	61 e0       	ldi	r22, 0x01	; 1
    2a0e:	41 e0       	ldi	r20, 0x01	; 1
    2a10:	0e 94 74 10 	call	0x20e8	; 0x20e8 <DIO_vSetPinValue>
}
    2a14:	cf 91       	pop	r28
    2a16:	df 91       	pop	r29
    2a18:	08 95       	ret

00002a1a <_7Segma_vEnable2>:
//-----------enable 7Segma 2 -----------
void _7Segma_vEnable2(){
    2a1a:	df 93       	push	r29
    2a1c:	cf 93       	push	r28
    2a1e:	cd b7       	in	r28, 0x3d	; 61
    2a20:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPinValue(PortB, Pin2, Pin_High);
    2a22:	81 e0       	ldi	r24, 0x01	; 1
    2a24:	62 e0       	ldi	r22, 0x02	; 2
    2a26:	41 e0       	ldi	r20, 0x01	; 1
    2a28:	0e 94 74 10 	call	0x20e8	; 0x20e8 <DIO_vSetPinValue>
}
    2a2c:	cf 91       	pop	r28
    2a2e:	df 91       	pop	r29
    2a30:	08 95       	ret

00002a32 <_7Segma_vDisable1>:
//-----------Disable 7Segma 1
void _7Segma_vDisable1(){
    2a32:	df 93       	push	r29
    2a34:	cf 93       	push	r28
    2a36:	cd b7       	in	r28, 0x3d	; 61
    2a38:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPinValue(PortB, Pin1, Pin_Low);
    2a3a:	81 e0       	ldi	r24, 0x01	; 1
    2a3c:	61 e0       	ldi	r22, 0x01	; 1
    2a3e:	40 e0       	ldi	r20, 0x00	; 0
    2a40:	0e 94 74 10 	call	0x20e8	; 0x20e8 <DIO_vSetPinValue>
}
    2a44:	cf 91       	pop	r28
    2a46:	df 91       	pop	r29
    2a48:	08 95       	ret

00002a4a <_7Segma_vDisable2>:
//-----------Disable 7Segma 2
void _7Segma_vDisable2(){
    2a4a:	df 93       	push	r29
    2a4c:	cf 93       	push	r28
    2a4e:	cd b7       	in	r28, 0x3d	; 61
    2a50:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPinValue(PortB, Pin2, Pin_Low);
    2a52:	81 e0       	ldi	r24, 0x01	; 1
    2a54:	62 e0       	ldi	r22, 0x02	; 2
    2a56:	40 e0       	ldi	r20, 0x00	; 0
    2a58:	0e 94 74 10 	call	0x20e8	; 0x20e8 <DIO_vSetPinValue>
}
    2a5c:	cf 91       	pop	r28
    2a5e:	df 91       	pop	r29
    2a60:	08 95       	ret

00002a62 <_7Segma_vEnableDot>:
//------------enable 7Segma Dot
void _7Segma_vEnableDot(){
    2a62:	df 93       	push	r29
    2a64:	cf 93       	push	r28
    2a66:	cd b7       	in	r28, 0x3d	; 61
    2a68:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPinValue(PortB, Pin3, Pin_High);
    2a6a:	81 e0       	ldi	r24, 0x01	; 1
    2a6c:	63 e0       	ldi	r22, 0x03	; 3
    2a6e:	41 e0       	ldi	r20, 0x01	; 1
    2a70:	0e 94 74 10 	call	0x20e8	; 0x20e8 <DIO_vSetPinValue>
}
    2a74:	cf 91       	pop	r28
    2a76:	df 91       	pop	r29
    2a78:	08 95       	ret

00002a7a <_7Segma_vDisbleDot>:
//------------Disable 7Segma Dot
void _7Segma_vDisbleDot(){
    2a7a:	df 93       	push	r29
    2a7c:	cf 93       	push	r28
    2a7e:	cd b7       	in	r28, 0x3d	; 61
    2a80:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPinValue(PortB, Pin3, Pin_Low);
    2a82:	81 e0       	ldi	r24, 0x01	; 1
    2a84:	63 e0       	ldi	r22, 0x03	; 3
    2a86:	40 e0       	ldi	r20, 0x00	; 0
    2a88:	0e 94 74 10 	call	0x20e8	; 0x20e8 <DIO_vSetPinValue>
}
    2a8c:	cf 91       	pop	r28
    2a8e:	df 91       	pop	r29
    2a90:	08 95       	ret

00002a92 <_7Segma_vShow>:
//----------Show Value on 7Segma ----------
void _7Segma_vShow(u8 loc_u8SegmaShowNumber){
    2a92:	df 93       	push	r29
    2a94:	cf 93       	push	r28
    2a96:	0f 92       	push	r0
    2a98:	cd b7       	in	r28, 0x3d	; 61
    2a9a:	de b7       	in	r29, 0x3e	; 62
    2a9c:	89 83       	std	Y+1, r24	; 0x01
	loc_u8SegmaShowNumber= (loc_u8SegmaShowNumber<<4);
    2a9e:	89 81       	ldd	r24, Y+1	; 0x01
    2aa0:	82 95       	swap	r24
    2aa2:	80 7f       	andi	r24, 0xF0	; 240
    2aa4:	89 83       	std	Y+1, r24	; 0x01
	DIO_vSetPortValue(PortA, loc_u8SegmaShowNumber);
    2aa6:	80 e0       	ldi	r24, 0x00	; 0
    2aa8:	69 81       	ldd	r22, Y+1	; 0x01
    2aaa:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <DIO_vSetPortValue>
}
    2aae:	0f 90       	pop	r0
    2ab0:	cf 91       	pop	r28
    2ab2:	df 91       	pop	r29
    2ab4:	08 95       	ret

00002ab6 <_7Segma_vPrintNumber1>:
//------------ this function take a u8 number and print it on the left 7Segme------
void _7Segma_vPrintNumber1(u8 loc_u8SegmaPrintNumber){
    2ab6:	df 93       	push	r29
    2ab8:	cf 93       	push	r28
    2aba:	0f 92       	push	r0
    2abc:	cd b7       	in	r28, 0x3d	; 61
    2abe:	de b7       	in	r29, 0x3e	; 62
    2ac0:	89 83       	std	Y+1, r24	; 0x01
	_7Segma_vEnable1();
    2ac2:	0e 94 01 15 	call	0x2a02	; 0x2a02 <_7Segma_vEnable1>
	_7Segma_vShow(loc_u8SegmaPrintNumber);
    2ac6:	89 81       	ldd	r24, Y+1	; 0x01
    2ac8:	0e 94 49 15 	call	0x2a92	; 0x2a92 <_7Segma_vShow>
	_7Segma_vDisable1();
    2acc:	0e 94 19 15 	call	0x2a32	; 0x2a32 <_7Segma_vDisable1>
}
    2ad0:	0f 90       	pop	r0
    2ad2:	cf 91       	pop	r28
    2ad4:	df 91       	pop	r29
    2ad6:	08 95       	ret

00002ad8 <_7Segma_vPrintNumber2>:
//------------ this function take a u8 number and print it on the right 7Segme-----
void _7Segma_vPrintNumber2(u8 loc_u8SegmaPrintNumber){
    2ad8:	df 93       	push	r29
    2ada:	cf 93       	push	r28
    2adc:	0f 92       	push	r0
    2ade:	cd b7       	in	r28, 0x3d	; 61
    2ae0:	de b7       	in	r29, 0x3e	; 62
    2ae2:	89 83       	std	Y+1, r24	; 0x01
	_7Segma_vEnable2();
    2ae4:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <_7Segma_vEnable2>
	_7Segma_vShow(loc_u8SegmaPrintNumber);
    2ae8:	89 81       	ldd	r24, Y+1	; 0x01
    2aea:	0e 94 49 15 	call	0x2a92	; 0x2a92 <_7Segma_vShow>
	_7Segma_vDisable2();
    2aee:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <_7Segma_vDisable2>
}
    2af2:	0f 90       	pop	r0
    2af4:	cf 91       	pop	r28
    2af6:	df 91       	pop	r29
    2af8:	08 95       	ret

00002afa <PushButton_u8Button0>:
*
* \Parameters (in) : None
* \Parameters (out): u8
* \Return value:   : 0 or 1
*******************************************************************************/
u8 PushButton_u8Button0(){
    2afa:	df 93       	push	r29
    2afc:	cf 93       	push	r28
    2afe:	cd b7       	in	r28, 0x3d	; 61
    2b00:	de b7       	in	r29, 0x3e	; 62
    2b02:	2f 97       	sbiw	r28, 0x0f	; 15
    2b04:	0f b6       	in	r0, 0x3f	; 63
    2b06:	f8 94       	cli
    2b08:	de bf       	out	0x3e, r29	; 62
    2b0a:	0f be       	out	0x3f, r0	; 63
    2b0c:	cd bf       	out	0x3d, r28	; 61
	DIO_vSetPinDirection(PortB, Pin0, Pin_InPut);
    2b0e:	81 e0       	ldi	r24, 0x01	; 1
    2b10:	60 e0       	ldi	r22, 0x00	; 0
    2b12:	40 e0       	ldi	r20, 0x00	; 0
    2b14:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <DIO_vSetPinDirection>
	if(DIO_u8PGetPinValue(PortB,Pin0)){
    2b18:	81 e0       	ldi	r24, 0x01	; 1
    2b1a:	60 e0       	ldi	r22, 0x00	; 0
    2b1c:	0e 94 4f 11 	call	0x229e	; 0x229e <DIO_u8PGetPinValue>
    2b20:	88 23       	and	r24, r24
    2b22:	09 f4       	brne	.+2      	; 0x2b26 <PushButton_u8Button0+0x2c>
    2b24:	7b c0       	rjmp	.+246    	; 0x2c1c <PushButton_u8Button0+0x122>
    2b26:	80 e0       	ldi	r24, 0x00	; 0
    2b28:	90 e0       	ldi	r25, 0x00	; 0
    2b2a:	a8 ec       	ldi	r26, 0xC8	; 200
    2b2c:	b1 e4       	ldi	r27, 0x41	; 65
    2b2e:	8b 87       	std	Y+11, r24	; 0x0b
    2b30:	9c 87       	std	Y+12, r25	; 0x0c
    2b32:	ad 87       	std	Y+13, r26	; 0x0d
    2b34:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b36:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b38:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b3e:	20 e0       	ldi	r18, 0x00	; 0
    2b40:	30 e0       	ldi	r19, 0x00	; 0
    2b42:	4a e7       	ldi	r20, 0x7A	; 122
    2b44:	55 e4       	ldi	r21, 0x45	; 69
    2b46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b4a:	dc 01       	movw	r26, r24
    2b4c:	cb 01       	movw	r24, r22
    2b4e:	8f 83       	std	Y+7, r24	; 0x07
    2b50:	98 87       	std	Y+8, r25	; 0x08
    2b52:	a9 87       	std	Y+9, r26	; 0x09
    2b54:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b56:	6f 81       	ldd	r22, Y+7	; 0x07
    2b58:	78 85       	ldd	r23, Y+8	; 0x08
    2b5a:	89 85       	ldd	r24, Y+9	; 0x09
    2b5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b5e:	20 e0       	ldi	r18, 0x00	; 0
    2b60:	30 e0       	ldi	r19, 0x00	; 0
    2b62:	40 e8       	ldi	r20, 0x80	; 128
    2b64:	5f e3       	ldi	r21, 0x3F	; 63
    2b66:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b6a:	88 23       	and	r24, r24
    2b6c:	2c f4       	brge	.+10     	; 0x2b78 <PushButton_u8Button0+0x7e>
		__ticks = 1;
    2b6e:	81 e0       	ldi	r24, 0x01	; 1
    2b70:	90 e0       	ldi	r25, 0x00	; 0
    2b72:	9e 83       	std	Y+6, r25	; 0x06
    2b74:	8d 83       	std	Y+5, r24	; 0x05
    2b76:	3f c0       	rjmp	.+126    	; 0x2bf6 <PushButton_u8Button0+0xfc>
	else if (__tmp > 65535)
    2b78:	6f 81       	ldd	r22, Y+7	; 0x07
    2b7a:	78 85       	ldd	r23, Y+8	; 0x08
    2b7c:	89 85       	ldd	r24, Y+9	; 0x09
    2b7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b80:	20 e0       	ldi	r18, 0x00	; 0
    2b82:	3f ef       	ldi	r19, 0xFF	; 255
    2b84:	4f e7       	ldi	r20, 0x7F	; 127
    2b86:	57 e4       	ldi	r21, 0x47	; 71
    2b88:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b8c:	18 16       	cp	r1, r24
    2b8e:	4c f5       	brge	.+82     	; 0x2be2 <PushButton_u8Button0+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b90:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b92:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b94:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b96:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b98:	20 e0       	ldi	r18, 0x00	; 0
    2b9a:	30 e0       	ldi	r19, 0x00	; 0
    2b9c:	40 e2       	ldi	r20, 0x20	; 32
    2b9e:	51 e4       	ldi	r21, 0x41	; 65
    2ba0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ba4:	dc 01       	movw	r26, r24
    2ba6:	cb 01       	movw	r24, r22
    2ba8:	bc 01       	movw	r22, r24
    2baa:	cd 01       	movw	r24, r26
    2bac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bb0:	dc 01       	movw	r26, r24
    2bb2:	cb 01       	movw	r24, r22
    2bb4:	9e 83       	std	Y+6, r25	; 0x06
    2bb6:	8d 83       	std	Y+5, r24	; 0x05
    2bb8:	0f c0       	rjmp	.+30     	; 0x2bd8 <PushButton_u8Button0+0xde>
    2bba:	80 e9       	ldi	r24, 0x90	; 144
    2bbc:	91 e0       	ldi	r25, 0x01	; 1
    2bbe:	9c 83       	std	Y+4, r25	; 0x04
    2bc0:	8b 83       	std	Y+3, r24	; 0x03
    2bc2:	8b 81       	ldd	r24, Y+3	; 0x03
    2bc4:	9c 81       	ldd	r25, Y+4	; 0x04
    2bc6:	01 97       	sbiw	r24, 0x01	; 1
    2bc8:	f1 f7       	brne	.-4      	; 0x2bc6 <PushButton_u8Button0+0xcc>
    2bca:	9c 83       	std	Y+4, r25	; 0x04
    2bcc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bce:	8d 81       	ldd	r24, Y+5	; 0x05
    2bd0:	9e 81       	ldd	r25, Y+6	; 0x06
    2bd2:	01 97       	sbiw	r24, 0x01	; 1
    2bd4:	9e 83       	std	Y+6, r25	; 0x06
    2bd6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bd8:	8d 81       	ldd	r24, Y+5	; 0x05
    2bda:	9e 81       	ldd	r25, Y+6	; 0x06
    2bdc:	00 97       	sbiw	r24, 0x00	; 0
    2bde:	69 f7       	brne	.-38     	; 0x2bba <PushButton_u8Button0+0xc0>
    2be0:	14 c0       	rjmp	.+40     	; 0x2c0a <PushButton_u8Button0+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2be2:	6f 81       	ldd	r22, Y+7	; 0x07
    2be4:	78 85       	ldd	r23, Y+8	; 0x08
    2be6:	89 85       	ldd	r24, Y+9	; 0x09
    2be8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bee:	dc 01       	movw	r26, r24
    2bf0:	cb 01       	movw	r24, r22
    2bf2:	9e 83       	std	Y+6, r25	; 0x06
    2bf4:	8d 83       	std	Y+5, r24	; 0x05
    2bf6:	8d 81       	ldd	r24, Y+5	; 0x05
    2bf8:	9e 81       	ldd	r25, Y+6	; 0x06
    2bfa:	9a 83       	std	Y+2, r25	; 0x02
    2bfc:	89 83       	std	Y+1, r24	; 0x01
    2bfe:	89 81       	ldd	r24, Y+1	; 0x01
    2c00:	9a 81       	ldd	r25, Y+2	; 0x02
    2c02:	01 97       	sbiw	r24, 0x01	; 1
    2c04:	f1 f7       	brne	.-4      	; 0x2c02 <PushButton_u8Button0+0x108>
    2c06:	9a 83       	std	Y+2, r25	; 0x02
    2c08:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(25);
		if(DIO_u8PGetPinValue(PortB,Pin0)){
    2c0a:	81 e0       	ldi	r24, 0x01	; 1
    2c0c:	60 e0       	ldi	r22, 0x00	; 0
    2c0e:	0e 94 4f 11 	call	0x229e	; 0x229e <DIO_u8PGetPinValue>
    2c12:	88 23       	and	r24, r24
    2c14:	19 f0       	breq	.+6      	; 0x2c1c <PushButton_u8Button0+0x122>
			return 1;
    2c16:	81 e0       	ldi	r24, 0x01	; 1
    2c18:	8f 87       	std	Y+15, r24	; 0x0f
    2c1a:	01 c0       	rjmp	.+2      	; 0x2c1e <PushButton_u8Button0+0x124>
		}
	}
	return 0;
    2c1c:	1f 86       	std	Y+15, r1	; 0x0f
    2c1e:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    2c20:	2f 96       	adiw	r28, 0x0f	; 15
    2c22:	0f b6       	in	r0, 0x3f	; 63
    2c24:	f8 94       	cli
    2c26:	de bf       	out	0x3e, r29	; 62
    2c28:	0f be       	out	0x3f, r0	; 63
    2c2a:	cd bf       	out	0x3d, r28	; 61
    2c2c:	cf 91       	pop	r28
    2c2e:	df 91       	pop	r29
    2c30:	08 95       	ret

00002c32 <PushButton_u8Button1>:
*
* \Parameters (in) : None
* \Parameters (out): u8
* \Return value:   : 0 or 1
*******************************************************************************/
u8 PushButton_u8Button1(){
    2c32:	df 93       	push	r29
    2c34:	cf 93       	push	r28
    2c36:	cd b7       	in	r28, 0x3d	; 61
    2c38:	de b7       	in	r29, 0x3e	; 62
    2c3a:	2f 97       	sbiw	r28, 0x0f	; 15
    2c3c:	0f b6       	in	r0, 0x3f	; 63
    2c3e:	f8 94       	cli
    2c40:	de bf       	out	0x3e, r29	; 62
    2c42:	0f be       	out	0x3f, r0	; 63
    2c44:	cd bf       	out	0x3d, r28	; 61
	DIO_vSetPinDirection(PortD, Pin6, Pin_InPut);
    2c46:	83 e0       	ldi	r24, 0x03	; 3
    2c48:	66 e0       	ldi	r22, 0x06	; 6
    2c4a:	40 e0       	ldi	r20, 0x00	; 0
    2c4c:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <DIO_vSetPinDirection>
	if(DIO_u8PGetPinValue(PortD,Pin6)){
    2c50:	83 e0       	ldi	r24, 0x03	; 3
    2c52:	66 e0       	ldi	r22, 0x06	; 6
    2c54:	0e 94 4f 11 	call	0x229e	; 0x229e <DIO_u8PGetPinValue>
    2c58:	88 23       	and	r24, r24
    2c5a:	09 f4       	brne	.+2      	; 0x2c5e <PushButton_u8Button1+0x2c>
    2c5c:	7b c0       	rjmp	.+246    	; 0x2d54 <PushButton_u8Button1+0x122>
    2c5e:	80 e0       	ldi	r24, 0x00	; 0
    2c60:	90 e0       	ldi	r25, 0x00	; 0
    2c62:	a8 ec       	ldi	r26, 0xC8	; 200
    2c64:	b1 e4       	ldi	r27, 0x41	; 65
    2c66:	8b 87       	std	Y+11, r24	; 0x0b
    2c68:	9c 87       	std	Y+12, r25	; 0x0c
    2c6a:	ad 87       	std	Y+13, r26	; 0x0d
    2c6c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c70:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c72:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c74:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c76:	20 e0       	ldi	r18, 0x00	; 0
    2c78:	30 e0       	ldi	r19, 0x00	; 0
    2c7a:	4a e7       	ldi	r20, 0x7A	; 122
    2c7c:	55 e4       	ldi	r21, 0x45	; 69
    2c7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c82:	dc 01       	movw	r26, r24
    2c84:	cb 01       	movw	r24, r22
    2c86:	8f 83       	std	Y+7, r24	; 0x07
    2c88:	98 87       	std	Y+8, r25	; 0x08
    2c8a:	a9 87       	std	Y+9, r26	; 0x09
    2c8c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c8e:	6f 81       	ldd	r22, Y+7	; 0x07
    2c90:	78 85       	ldd	r23, Y+8	; 0x08
    2c92:	89 85       	ldd	r24, Y+9	; 0x09
    2c94:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c96:	20 e0       	ldi	r18, 0x00	; 0
    2c98:	30 e0       	ldi	r19, 0x00	; 0
    2c9a:	40 e8       	ldi	r20, 0x80	; 128
    2c9c:	5f e3       	ldi	r21, 0x3F	; 63
    2c9e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ca2:	88 23       	and	r24, r24
    2ca4:	2c f4       	brge	.+10     	; 0x2cb0 <PushButton_u8Button1+0x7e>
		__ticks = 1;
    2ca6:	81 e0       	ldi	r24, 0x01	; 1
    2ca8:	90 e0       	ldi	r25, 0x00	; 0
    2caa:	9e 83       	std	Y+6, r25	; 0x06
    2cac:	8d 83       	std	Y+5, r24	; 0x05
    2cae:	3f c0       	rjmp	.+126    	; 0x2d2e <PushButton_u8Button1+0xfc>
	else if (__tmp > 65535)
    2cb0:	6f 81       	ldd	r22, Y+7	; 0x07
    2cb2:	78 85       	ldd	r23, Y+8	; 0x08
    2cb4:	89 85       	ldd	r24, Y+9	; 0x09
    2cb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cb8:	20 e0       	ldi	r18, 0x00	; 0
    2cba:	3f ef       	ldi	r19, 0xFF	; 255
    2cbc:	4f e7       	ldi	r20, 0x7F	; 127
    2cbe:	57 e4       	ldi	r21, 0x47	; 71
    2cc0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cc4:	18 16       	cp	r1, r24
    2cc6:	4c f5       	brge	.+82     	; 0x2d1a <PushButton_u8Button1+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cc8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cca:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ccc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cce:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cd0:	20 e0       	ldi	r18, 0x00	; 0
    2cd2:	30 e0       	ldi	r19, 0x00	; 0
    2cd4:	40 e2       	ldi	r20, 0x20	; 32
    2cd6:	51 e4       	ldi	r21, 0x41	; 65
    2cd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cdc:	dc 01       	movw	r26, r24
    2cde:	cb 01       	movw	r24, r22
    2ce0:	bc 01       	movw	r22, r24
    2ce2:	cd 01       	movw	r24, r26
    2ce4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ce8:	dc 01       	movw	r26, r24
    2cea:	cb 01       	movw	r24, r22
    2cec:	9e 83       	std	Y+6, r25	; 0x06
    2cee:	8d 83       	std	Y+5, r24	; 0x05
    2cf0:	0f c0       	rjmp	.+30     	; 0x2d10 <PushButton_u8Button1+0xde>
    2cf2:	80 e9       	ldi	r24, 0x90	; 144
    2cf4:	91 e0       	ldi	r25, 0x01	; 1
    2cf6:	9c 83       	std	Y+4, r25	; 0x04
    2cf8:	8b 83       	std	Y+3, r24	; 0x03
    2cfa:	8b 81       	ldd	r24, Y+3	; 0x03
    2cfc:	9c 81       	ldd	r25, Y+4	; 0x04
    2cfe:	01 97       	sbiw	r24, 0x01	; 1
    2d00:	f1 f7       	brne	.-4      	; 0x2cfe <PushButton_u8Button1+0xcc>
    2d02:	9c 83       	std	Y+4, r25	; 0x04
    2d04:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d06:	8d 81       	ldd	r24, Y+5	; 0x05
    2d08:	9e 81       	ldd	r25, Y+6	; 0x06
    2d0a:	01 97       	sbiw	r24, 0x01	; 1
    2d0c:	9e 83       	std	Y+6, r25	; 0x06
    2d0e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d10:	8d 81       	ldd	r24, Y+5	; 0x05
    2d12:	9e 81       	ldd	r25, Y+6	; 0x06
    2d14:	00 97       	sbiw	r24, 0x00	; 0
    2d16:	69 f7       	brne	.-38     	; 0x2cf2 <PushButton_u8Button1+0xc0>
    2d18:	14 c0       	rjmp	.+40     	; 0x2d42 <PushButton_u8Button1+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d1a:	6f 81       	ldd	r22, Y+7	; 0x07
    2d1c:	78 85       	ldd	r23, Y+8	; 0x08
    2d1e:	89 85       	ldd	r24, Y+9	; 0x09
    2d20:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d26:	dc 01       	movw	r26, r24
    2d28:	cb 01       	movw	r24, r22
    2d2a:	9e 83       	std	Y+6, r25	; 0x06
    2d2c:	8d 83       	std	Y+5, r24	; 0x05
    2d2e:	8d 81       	ldd	r24, Y+5	; 0x05
    2d30:	9e 81       	ldd	r25, Y+6	; 0x06
    2d32:	9a 83       	std	Y+2, r25	; 0x02
    2d34:	89 83       	std	Y+1, r24	; 0x01
    2d36:	89 81       	ldd	r24, Y+1	; 0x01
    2d38:	9a 81       	ldd	r25, Y+2	; 0x02
    2d3a:	01 97       	sbiw	r24, 0x01	; 1
    2d3c:	f1 f7       	brne	.-4      	; 0x2d3a <PushButton_u8Button1+0x108>
    2d3e:	9a 83       	std	Y+2, r25	; 0x02
    2d40:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(25);
		if(DIO_u8PGetPinValue(PortD,Pin6)){
    2d42:	83 e0       	ldi	r24, 0x03	; 3
    2d44:	66 e0       	ldi	r22, 0x06	; 6
    2d46:	0e 94 4f 11 	call	0x229e	; 0x229e <DIO_u8PGetPinValue>
    2d4a:	88 23       	and	r24, r24
    2d4c:	19 f0       	breq	.+6      	; 0x2d54 <PushButton_u8Button1+0x122>
			return 1;
    2d4e:	81 e0       	ldi	r24, 0x01	; 1
    2d50:	8f 87       	std	Y+15, r24	; 0x0f
    2d52:	01 c0       	rjmp	.+2      	; 0x2d56 <PushButton_u8Button1+0x124>
		}
	}
	return 0;
    2d54:	1f 86       	std	Y+15, r1	; 0x0f
    2d56:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    2d58:	2f 96       	adiw	r28, 0x0f	; 15
    2d5a:	0f b6       	in	r0, 0x3f	; 63
    2d5c:	f8 94       	cli
    2d5e:	de bf       	out	0x3e, r29	; 62
    2d60:	0f be       	out	0x3f, r0	; 63
    2d62:	cd bf       	out	0x3d, r28	; 61
    2d64:	cf 91       	pop	r28
    2d66:	df 91       	pop	r29
    2d68:	08 95       	ret

00002d6a <PushButton_u8Button2>:
*
* \Parameters (in) : None
* \Parameters (out): u8
* \Return value:   : 0 or 1
*******************************************************************************/
u8 PushButton_u8Button2(){
    2d6a:	df 93       	push	r29
    2d6c:	cf 93       	push	r28
    2d6e:	cd b7       	in	r28, 0x3d	; 61
    2d70:	de b7       	in	r29, 0x3e	; 62
    2d72:	2f 97       	sbiw	r28, 0x0f	; 15
    2d74:	0f b6       	in	r0, 0x3f	; 63
    2d76:	f8 94       	cli
    2d78:	de bf       	out	0x3e, r29	; 62
    2d7a:	0f be       	out	0x3f, r0	; 63
    2d7c:	cd bf       	out	0x3d, r28	; 61
	DIO_vSetPinDirection(PortD, Pin2, Pin_InPut);
    2d7e:	83 e0       	ldi	r24, 0x03	; 3
    2d80:	62 e0       	ldi	r22, 0x02	; 2
    2d82:	40 e0       	ldi	r20, 0x00	; 0
    2d84:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <DIO_vSetPinDirection>
	if(DIO_u8PGetPinValue(PortD,Pin2)){
    2d88:	83 e0       	ldi	r24, 0x03	; 3
    2d8a:	62 e0       	ldi	r22, 0x02	; 2
    2d8c:	0e 94 4f 11 	call	0x229e	; 0x229e <DIO_u8PGetPinValue>
    2d90:	88 23       	and	r24, r24
    2d92:	09 f4       	brne	.+2      	; 0x2d96 <PushButton_u8Button2+0x2c>
    2d94:	7b c0       	rjmp	.+246    	; 0x2e8c <PushButton_u8Button2+0x122>
    2d96:	80 e0       	ldi	r24, 0x00	; 0
    2d98:	90 e0       	ldi	r25, 0x00	; 0
    2d9a:	a8 ec       	ldi	r26, 0xC8	; 200
    2d9c:	b1 e4       	ldi	r27, 0x41	; 65
    2d9e:	8b 87       	std	Y+11, r24	; 0x0b
    2da0:	9c 87       	std	Y+12, r25	; 0x0c
    2da2:	ad 87       	std	Y+13, r26	; 0x0d
    2da4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2da6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2da8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2daa:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dac:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dae:	20 e0       	ldi	r18, 0x00	; 0
    2db0:	30 e0       	ldi	r19, 0x00	; 0
    2db2:	4a e7       	ldi	r20, 0x7A	; 122
    2db4:	55 e4       	ldi	r21, 0x45	; 69
    2db6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dba:	dc 01       	movw	r26, r24
    2dbc:	cb 01       	movw	r24, r22
    2dbe:	8f 83       	std	Y+7, r24	; 0x07
    2dc0:	98 87       	std	Y+8, r25	; 0x08
    2dc2:	a9 87       	std	Y+9, r26	; 0x09
    2dc4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2dc6:	6f 81       	ldd	r22, Y+7	; 0x07
    2dc8:	78 85       	ldd	r23, Y+8	; 0x08
    2dca:	89 85       	ldd	r24, Y+9	; 0x09
    2dcc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dce:	20 e0       	ldi	r18, 0x00	; 0
    2dd0:	30 e0       	ldi	r19, 0x00	; 0
    2dd2:	40 e8       	ldi	r20, 0x80	; 128
    2dd4:	5f e3       	ldi	r21, 0x3F	; 63
    2dd6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2dda:	88 23       	and	r24, r24
    2ddc:	2c f4       	brge	.+10     	; 0x2de8 <PushButton_u8Button2+0x7e>
		__ticks = 1;
    2dde:	81 e0       	ldi	r24, 0x01	; 1
    2de0:	90 e0       	ldi	r25, 0x00	; 0
    2de2:	9e 83       	std	Y+6, r25	; 0x06
    2de4:	8d 83       	std	Y+5, r24	; 0x05
    2de6:	3f c0       	rjmp	.+126    	; 0x2e66 <PushButton_u8Button2+0xfc>
	else if (__tmp > 65535)
    2de8:	6f 81       	ldd	r22, Y+7	; 0x07
    2dea:	78 85       	ldd	r23, Y+8	; 0x08
    2dec:	89 85       	ldd	r24, Y+9	; 0x09
    2dee:	9a 85       	ldd	r25, Y+10	; 0x0a
    2df0:	20 e0       	ldi	r18, 0x00	; 0
    2df2:	3f ef       	ldi	r19, 0xFF	; 255
    2df4:	4f e7       	ldi	r20, 0x7F	; 127
    2df6:	57 e4       	ldi	r21, 0x47	; 71
    2df8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2dfc:	18 16       	cp	r1, r24
    2dfe:	4c f5       	brge	.+82     	; 0x2e52 <PushButton_u8Button2+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e00:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e02:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e04:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e06:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e08:	20 e0       	ldi	r18, 0x00	; 0
    2e0a:	30 e0       	ldi	r19, 0x00	; 0
    2e0c:	40 e2       	ldi	r20, 0x20	; 32
    2e0e:	51 e4       	ldi	r21, 0x41	; 65
    2e10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e14:	dc 01       	movw	r26, r24
    2e16:	cb 01       	movw	r24, r22
    2e18:	bc 01       	movw	r22, r24
    2e1a:	cd 01       	movw	r24, r26
    2e1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e20:	dc 01       	movw	r26, r24
    2e22:	cb 01       	movw	r24, r22
    2e24:	9e 83       	std	Y+6, r25	; 0x06
    2e26:	8d 83       	std	Y+5, r24	; 0x05
    2e28:	0f c0       	rjmp	.+30     	; 0x2e48 <PushButton_u8Button2+0xde>
    2e2a:	80 e9       	ldi	r24, 0x90	; 144
    2e2c:	91 e0       	ldi	r25, 0x01	; 1
    2e2e:	9c 83       	std	Y+4, r25	; 0x04
    2e30:	8b 83       	std	Y+3, r24	; 0x03
    2e32:	8b 81       	ldd	r24, Y+3	; 0x03
    2e34:	9c 81       	ldd	r25, Y+4	; 0x04
    2e36:	01 97       	sbiw	r24, 0x01	; 1
    2e38:	f1 f7       	brne	.-4      	; 0x2e36 <PushButton_u8Button2+0xcc>
    2e3a:	9c 83       	std	Y+4, r25	; 0x04
    2e3c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e3e:	8d 81       	ldd	r24, Y+5	; 0x05
    2e40:	9e 81       	ldd	r25, Y+6	; 0x06
    2e42:	01 97       	sbiw	r24, 0x01	; 1
    2e44:	9e 83       	std	Y+6, r25	; 0x06
    2e46:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e48:	8d 81       	ldd	r24, Y+5	; 0x05
    2e4a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e4c:	00 97       	sbiw	r24, 0x00	; 0
    2e4e:	69 f7       	brne	.-38     	; 0x2e2a <PushButton_u8Button2+0xc0>
    2e50:	14 c0       	rjmp	.+40     	; 0x2e7a <PushButton_u8Button2+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e52:	6f 81       	ldd	r22, Y+7	; 0x07
    2e54:	78 85       	ldd	r23, Y+8	; 0x08
    2e56:	89 85       	ldd	r24, Y+9	; 0x09
    2e58:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e5e:	dc 01       	movw	r26, r24
    2e60:	cb 01       	movw	r24, r22
    2e62:	9e 83       	std	Y+6, r25	; 0x06
    2e64:	8d 83       	std	Y+5, r24	; 0x05
    2e66:	8d 81       	ldd	r24, Y+5	; 0x05
    2e68:	9e 81       	ldd	r25, Y+6	; 0x06
    2e6a:	9a 83       	std	Y+2, r25	; 0x02
    2e6c:	89 83       	std	Y+1, r24	; 0x01
    2e6e:	89 81       	ldd	r24, Y+1	; 0x01
    2e70:	9a 81       	ldd	r25, Y+2	; 0x02
    2e72:	01 97       	sbiw	r24, 0x01	; 1
    2e74:	f1 f7       	brne	.-4      	; 0x2e72 <PushButton_u8Button2+0x108>
    2e76:	9a 83       	std	Y+2, r25	; 0x02
    2e78:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(25);
		if(DIO_u8PGetPinValue(PortD,Pin2)){
    2e7a:	83 e0       	ldi	r24, 0x03	; 3
    2e7c:	62 e0       	ldi	r22, 0x02	; 2
    2e7e:	0e 94 4f 11 	call	0x229e	; 0x229e <DIO_u8PGetPinValue>
    2e82:	88 23       	and	r24, r24
    2e84:	19 f0       	breq	.+6      	; 0x2e8c <PushButton_u8Button2+0x122>
			return 1;
    2e86:	81 e0       	ldi	r24, 0x01	; 1
    2e88:	8f 87       	std	Y+15, r24	; 0x0f
    2e8a:	01 c0       	rjmp	.+2      	; 0x2e8e <PushButton_u8Button2+0x124>
		}
	}
	return 0;
    2e8c:	1f 86       	std	Y+15, r1	; 0x0f
    2e8e:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    2e90:	2f 96       	adiw	r28, 0x0f	; 15
    2e92:	0f b6       	in	r0, 0x3f	; 63
    2e94:	f8 94       	cli
    2e96:	de bf       	out	0x3e, r29	; 62
    2e98:	0f be       	out	0x3f, r0	; 63
    2e9a:	cd bf       	out	0x3d, r28	; 61
    2e9c:	cf 91       	pop	r28
    2e9e:	df 91       	pop	r29
    2ea0:	08 95       	ret

00002ea2 <PushButton_u8Button1LonPress>:
*
* \Parameters (in) : None
* \Parameters (out): u8
* \Return value:   : 0 or 1
*******************************************************************************/
u8 PushButton_u8Button1LonPress(){
    2ea2:	df 93       	push	r29
    2ea4:	cf 93       	push	r28
    2ea6:	cd b7       	in	r28, 0x3d	; 61
    2ea8:	de b7       	in	r29, 0x3e	; 62
    2eaa:	2f 97       	sbiw	r28, 0x0f	; 15
    2eac:	0f b6       	in	r0, 0x3f	; 63
    2eae:	f8 94       	cli
    2eb0:	de bf       	out	0x3e, r29	; 62
    2eb2:	0f be       	out	0x3f, r0	; 63
    2eb4:	cd bf       	out	0x3d, r28	; 61
	if(PushButton_u8Button1()){
    2eb6:	0e 94 19 16 	call	0x2c32	; 0x2c32 <PushButton_u8Button1>
    2eba:	88 23       	and	r24, r24
    2ebc:	09 f4       	brne	.+2      	; 0x2ec0 <PushButton_u8Button1LonPress+0x1e>
    2ebe:	7b c0       	rjmp	.+246    	; 0x2fb6 <PushButton_u8Button1LonPress+0x114>
    2ec0:	72 c0       	rjmp	.+228    	; 0x2fa6 <PushButton_u8Button1LonPress+0x104>
		while(PushButton_u8Button1()){
    2ec2:	80 e0       	ldi	r24, 0x00	; 0
    2ec4:	90 e0       	ldi	r25, 0x00	; 0
    2ec6:	a0 e2       	ldi	r26, 0x20	; 32
    2ec8:	b1 e4       	ldi	r27, 0x41	; 65
    2eca:	8b 87       	std	Y+11, r24	; 0x0b
    2ecc:	9c 87       	std	Y+12, r25	; 0x0c
    2ece:	ad 87       	std	Y+13, r26	; 0x0d
    2ed0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ed2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ed4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ed6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ed8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2eda:	20 e0       	ldi	r18, 0x00	; 0
    2edc:	30 e0       	ldi	r19, 0x00	; 0
    2ede:	4a e7       	ldi	r20, 0x7A	; 122
    2ee0:	55 e4       	ldi	r21, 0x45	; 69
    2ee2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ee6:	dc 01       	movw	r26, r24
    2ee8:	cb 01       	movw	r24, r22
    2eea:	8f 83       	std	Y+7, r24	; 0x07
    2eec:	98 87       	std	Y+8, r25	; 0x08
    2eee:	a9 87       	std	Y+9, r26	; 0x09
    2ef0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ef2:	6f 81       	ldd	r22, Y+7	; 0x07
    2ef4:	78 85       	ldd	r23, Y+8	; 0x08
    2ef6:	89 85       	ldd	r24, Y+9	; 0x09
    2ef8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2efa:	20 e0       	ldi	r18, 0x00	; 0
    2efc:	30 e0       	ldi	r19, 0x00	; 0
    2efe:	40 e8       	ldi	r20, 0x80	; 128
    2f00:	5f e3       	ldi	r21, 0x3F	; 63
    2f02:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f06:	88 23       	and	r24, r24
    2f08:	2c f4       	brge	.+10     	; 0x2f14 <PushButton_u8Button1LonPress+0x72>
		__ticks = 1;
    2f0a:	81 e0       	ldi	r24, 0x01	; 1
    2f0c:	90 e0       	ldi	r25, 0x00	; 0
    2f0e:	9e 83       	std	Y+6, r25	; 0x06
    2f10:	8d 83       	std	Y+5, r24	; 0x05
    2f12:	3f c0       	rjmp	.+126    	; 0x2f92 <PushButton_u8Button1LonPress+0xf0>
	else if (__tmp > 65535)
    2f14:	6f 81       	ldd	r22, Y+7	; 0x07
    2f16:	78 85       	ldd	r23, Y+8	; 0x08
    2f18:	89 85       	ldd	r24, Y+9	; 0x09
    2f1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f1c:	20 e0       	ldi	r18, 0x00	; 0
    2f1e:	3f ef       	ldi	r19, 0xFF	; 255
    2f20:	4f e7       	ldi	r20, 0x7F	; 127
    2f22:	57 e4       	ldi	r21, 0x47	; 71
    2f24:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f28:	18 16       	cp	r1, r24
    2f2a:	4c f5       	brge	.+82     	; 0x2f7e <PushButton_u8Button1LonPress+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f30:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f32:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f34:	20 e0       	ldi	r18, 0x00	; 0
    2f36:	30 e0       	ldi	r19, 0x00	; 0
    2f38:	40 e2       	ldi	r20, 0x20	; 32
    2f3a:	51 e4       	ldi	r21, 0x41	; 65
    2f3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f40:	dc 01       	movw	r26, r24
    2f42:	cb 01       	movw	r24, r22
    2f44:	bc 01       	movw	r22, r24
    2f46:	cd 01       	movw	r24, r26
    2f48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f4c:	dc 01       	movw	r26, r24
    2f4e:	cb 01       	movw	r24, r22
    2f50:	9e 83       	std	Y+6, r25	; 0x06
    2f52:	8d 83       	std	Y+5, r24	; 0x05
    2f54:	0f c0       	rjmp	.+30     	; 0x2f74 <PushButton_u8Button1LonPress+0xd2>
    2f56:	80 e9       	ldi	r24, 0x90	; 144
    2f58:	91 e0       	ldi	r25, 0x01	; 1
    2f5a:	9c 83       	std	Y+4, r25	; 0x04
    2f5c:	8b 83       	std	Y+3, r24	; 0x03
    2f5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f60:	9c 81       	ldd	r25, Y+4	; 0x04
    2f62:	01 97       	sbiw	r24, 0x01	; 1
    2f64:	f1 f7       	brne	.-4      	; 0x2f62 <PushButton_u8Button1LonPress+0xc0>
    2f66:	9c 83       	std	Y+4, r25	; 0x04
    2f68:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f6a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f6c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f6e:	01 97       	sbiw	r24, 0x01	; 1
    2f70:	9e 83       	std	Y+6, r25	; 0x06
    2f72:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f74:	8d 81       	ldd	r24, Y+5	; 0x05
    2f76:	9e 81       	ldd	r25, Y+6	; 0x06
    2f78:	00 97       	sbiw	r24, 0x00	; 0
    2f7a:	69 f7       	brne	.-38     	; 0x2f56 <PushButton_u8Button1LonPress+0xb4>
    2f7c:	14 c0       	rjmp	.+40     	; 0x2fa6 <PushButton_u8Button1LonPress+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f7e:	6f 81       	ldd	r22, Y+7	; 0x07
    2f80:	78 85       	ldd	r23, Y+8	; 0x08
    2f82:	89 85       	ldd	r24, Y+9	; 0x09
    2f84:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f8a:	dc 01       	movw	r26, r24
    2f8c:	cb 01       	movw	r24, r22
    2f8e:	9e 83       	std	Y+6, r25	; 0x06
    2f90:	8d 83       	std	Y+5, r24	; 0x05
    2f92:	8d 81       	ldd	r24, Y+5	; 0x05
    2f94:	9e 81       	ldd	r25, Y+6	; 0x06
    2f96:	9a 83       	std	Y+2, r25	; 0x02
    2f98:	89 83       	std	Y+1, r24	; 0x01
    2f9a:	89 81       	ldd	r24, Y+1	; 0x01
    2f9c:	9a 81       	ldd	r25, Y+2	; 0x02
    2f9e:	01 97       	sbiw	r24, 0x01	; 1
    2fa0:	f1 f7       	brne	.-4      	; 0x2f9e <PushButton_u8Button1LonPress+0xfc>
    2fa2:	9a 83       	std	Y+2, r25	; 0x02
    2fa4:	89 83       	std	Y+1, r24	; 0x01
    2fa6:	0e 94 19 16 	call	0x2c32	; 0x2c32 <PushButton_u8Button1>
    2faa:	88 23       	and	r24, r24
    2fac:	09 f0       	breq	.+2      	; 0x2fb0 <PushButton_u8Button1LonPress+0x10e>
    2fae:	89 cf       	rjmp	.-238    	; 0x2ec2 <PushButton_u8Button1LonPress+0x20>
			_delay_ms(10);
		}
		return 1;
    2fb0:	81 e0       	ldi	r24, 0x01	; 1
    2fb2:	8f 87       	std	Y+15, r24	; 0x0f
    2fb4:	01 c0       	rjmp	.+2      	; 0x2fb8 <PushButton_u8Button1LonPress+0x116>
	}
	else{
		return 0;
    2fb6:	1f 86       	std	Y+15, r1	; 0x0f
    2fb8:	8f 85       	ldd	r24, Y+15	; 0x0f
	}
}
    2fba:	2f 96       	adiw	r28, 0x0f	; 15
    2fbc:	0f b6       	in	r0, 0x3f	; 63
    2fbe:	f8 94       	cli
    2fc0:	de bf       	out	0x3e, r29	; 62
    2fc2:	0f be       	out	0x3f, r0	; 63
    2fc4:	cd bf       	out	0x3d, r28	; 61
    2fc6:	cf 91       	pop	r28
    2fc8:	df 91       	pop	r29
    2fca:	08 95       	ret

00002fcc <PushButton_u8Button2OneSec>:
*
* \Parameters (in) : None
* \Parameters (out): u8
* \Return value:   : 0 or 1
*******************************************************************************/
u8 PushButton_u8Button2OneSec(){
    2fcc:	df 93       	push	r29
    2fce:	cf 93       	push	r28
    2fd0:	cd b7       	in	r28, 0x3d	; 61
    2fd2:	de b7       	in	r29, 0x3e	; 62
    2fd4:	60 97       	sbiw	r28, 0x10	; 16
    2fd6:	0f b6       	in	r0, 0x3f	; 63
    2fd8:	f8 94       	cli
    2fda:	de bf       	out	0x3e, r29	; 62
    2fdc:	0f be       	out	0x3f, r0	; 63
    2fde:	cd bf       	out	0x3d, r28	; 61
	u8 Delay=0;
    2fe0:	1f 86       	std	Y+15, r1	; 0x0f
    2fe2:	75 c0       	rjmp	.+234    	; 0x30ce <PushButton_u8Button2OneSec+0x102>
	while(PushButton_u8Button2()){
    2fe4:	80 e0       	ldi	r24, 0x00	; 0
    2fe6:	90 e0       	ldi	r25, 0x00	; 0
    2fe8:	a0 e2       	ldi	r26, 0x20	; 32
    2fea:	b1 e4       	ldi	r27, 0x41	; 65
    2fec:	8b 87       	std	Y+11, r24	; 0x0b
    2fee:	9c 87       	std	Y+12, r25	; 0x0c
    2ff0:	ad 87       	std	Y+13, r26	; 0x0d
    2ff2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ff4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ff6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ff8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ffa:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ffc:	20 e0       	ldi	r18, 0x00	; 0
    2ffe:	30 e0       	ldi	r19, 0x00	; 0
    3000:	4a e7       	ldi	r20, 0x7A	; 122
    3002:	55 e4       	ldi	r21, 0x45	; 69
    3004:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3008:	dc 01       	movw	r26, r24
    300a:	cb 01       	movw	r24, r22
    300c:	8f 83       	std	Y+7, r24	; 0x07
    300e:	98 87       	std	Y+8, r25	; 0x08
    3010:	a9 87       	std	Y+9, r26	; 0x09
    3012:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3014:	6f 81       	ldd	r22, Y+7	; 0x07
    3016:	78 85       	ldd	r23, Y+8	; 0x08
    3018:	89 85       	ldd	r24, Y+9	; 0x09
    301a:	9a 85       	ldd	r25, Y+10	; 0x0a
    301c:	20 e0       	ldi	r18, 0x00	; 0
    301e:	30 e0       	ldi	r19, 0x00	; 0
    3020:	40 e8       	ldi	r20, 0x80	; 128
    3022:	5f e3       	ldi	r21, 0x3F	; 63
    3024:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3028:	88 23       	and	r24, r24
    302a:	2c f4       	brge	.+10     	; 0x3036 <PushButton_u8Button2OneSec+0x6a>
		__ticks = 1;
    302c:	81 e0       	ldi	r24, 0x01	; 1
    302e:	90 e0       	ldi	r25, 0x00	; 0
    3030:	9e 83       	std	Y+6, r25	; 0x06
    3032:	8d 83       	std	Y+5, r24	; 0x05
    3034:	3f c0       	rjmp	.+126    	; 0x30b4 <PushButton_u8Button2OneSec+0xe8>
	else if (__tmp > 65535)
    3036:	6f 81       	ldd	r22, Y+7	; 0x07
    3038:	78 85       	ldd	r23, Y+8	; 0x08
    303a:	89 85       	ldd	r24, Y+9	; 0x09
    303c:	9a 85       	ldd	r25, Y+10	; 0x0a
    303e:	20 e0       	ldi	r18, 0x00	; 0
    3040:	3f ef       	ldi	r19, 0xFF	; 255
    3042:	4f e7       	ldi	r20, 0x7F	; 127
    3044:	57 e4       	ldi	r21, 0x47	; 71
    3046:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    304a:	18 16       	cp	r1, r24
    304c:	4c f5       	brge	.+82     	; 0x30a0 <PushButton_u8Button2OneSec+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    304e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3050:	7c 85       	ldd	r23, Y+12	; 0x0c
    3052:	8d 85       	ldd	r24, Y+13	; 0x0d
    3054:	9e 85       	ldd	r25, Y+14	; 0x0e
    3056:	20 e0       	ldi	r18, 0x00	; 0
    3058:	30 e0       	ldi	r19, 0x00	; 0
    305a:	40 e2       	ldi	r20, 0x20	; 32
    305c:	51 e4       	ldi	r21, 0x41	; 65
    305e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3062:	dc 01       	movw	r26, r24
    3064:	cb 01       	movw	r24, r22
    3066:	bc 01       	movw	r22, r24
    3068:	cd 01       	movw	r24, r26
    306a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    306e:	dc 01       	movw	r26, r24
    3070:	cb 01       	movw	r24, r22
    3072:	9e 83       	std	Y+6, r25	; 0x06
    3074:	8d 83       	std	Y+5, r24	; 0x05
    3076:	0f c0       	rjmp	.+30     	; 0x3096 <PushButton_u8Button2OneSec+0xca>
    3078:	80 e9       	ldi	r24, 0x90	; 144
    307a:	91 e0       	ldi	r25, 0x01	; 1
    307c:	9c 83       	std	Y+4, r25	; 0x04
    307e:	8b 83       	std	Y+3, r24	; 0x03
    3080:	8b 81       	ldd	r24, Y+3	; 0x03
    3082:	9c 81       	ldd	r25, Y+4	; 0x04
    3084:	01 97       	sbiw	r24, 0x01	; 1
    3086:	f1 f7       	brne	.-4      	; 0x3084 <PushButton_u8Button2OneSec+0xb8>
    3088:	9c 83       	std	Y+4, r25	; 0x04
    308a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    308c:	8d 81       	ldd	r24, Y+5	; 0x05
    308e:	9e 81       	ldd	r25, Y+6	; 0x06
    3090:	01 97       	sbiw	r24, 0x01	; 1
    3092:	9e 83       	std	Y+6, r25	; 0x06
    3094:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3096:	8d 81       	ldd	r24, Y+5	; 0x05
    3098:	9e 81       	ldd	r25, Y+6	; 0x06
    309a:	00 97       	sbiw	r24, 0x00	; 0
    309c:	69 f7       	brne	.-38     	; 0x3078 <PushButton_u8Button2OneSec+0xac>
    309e:	14 c0       	rjmp	.+40     	; 0x30c8 <PushButton_u8Button2OneSec+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30a0:	6f 81       	ldd	r22, Y+7	; 0x07
    30a2:	78 85       	ldd	r23, Y+8	; 0x08
    30a4:	89 85       	ldd	r24, Y+9	; 0x09
    30a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    30a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30ac:	dc 01       	movw	r26, r24
    30ae:	cb 01       	movw	r24, r22
    30b0:	9e 83       	std	Y+6, r25	; 0x06
    30b2:	8d 83       	std	Y+5, r24	; 0x05
    30b4:	8d 81       	ldd	r24, Y+5	; 0x05
    30b6:	9e 81       	ldd	r25, Y+6	; 0x06
    30b8:	9a 83       	std	Y+2, r25	; 0x02
    30ba:	89 83       	std	Y+1, r24	; 0x01
    30bc:	89 81       	ldd	r24, Y+1	; 0x01
    30be:	9a 81       	ldd	r25, Y+2	; 0x02
    30c0:	01 97       	sbiw	r24, 0x01	; 1
    30c2:	f1 f7       	brne	.-4      	; 0x30c0 <PushButton_u8Button2OneSec+0xf4>
    30c4:	9a 83       	std	Y+2, r25	; 0x02
    30c6:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		Delay++;
    30c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    30ca:	8f 5f       	subi	r24, 0xFF	; 255
    30cc:	8f 87       	std	Y+15, r24	; 0x0f
* \Parameters (out): u8
* \Return value:   : 0 or 1
*******************************************************************************/
u8 PushButton_u8Button2OneSec(){
	u8 Delay=0;
	while(PushButton_u8Button2()){
    30ce:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <PushButton_u8Button2>
    30d2:	88 23       	and	r24, r24
    30d4:	09 f0       	breq	.+2      	; 0x30d8 <PushButton_u8Button2OneSec+0x10c>
    30d6:	86 cf       	rjmp	.-244    	; 0x2fe4 <PushButton_u8Button2OneSec+0x18>
		_delay_ms(10);
		Delay++;
	}
	if(Delay>29){
    30d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    30da:	8e 31       	cpi	r24, 0x1E	; 30
    30dc:	18 f0       	brcs	.+6      	; 0x30e4 <PushButton_u8Button2OneSec+0x118>
		return 1;
    30de:	81 e0       	ldi	r24, 0x01	; 1
    30e0:	88 8b       	std	Y+16, r24	; 0x10
    30e2:	01 c0       	rjmp	.+2      	; 0x30e6 <PushButton_u8Button2OneSec+0x11a>
	}
	else{
		return 0;
    30e4:	18 8a       	std	Y+16, r1	; 0x10
    30e6:	88 89       	ldd	r24, Y+16	; 0x10
	}
}
    30e8:	60 96       	adiw	r28, 0x10	; 16
    30ea:	0f b6       	in	r0, 0x3f	; 63
    30ec:	f8 94       	cli
    30ee:	de bf       	out	0x3e, r29	; 62
    30f0:	0f be       	out	0x3f, r0	; 63
    30f2:	cd bf       	out	0x3d, r28	; 61
    30f4:	cf 91       	pop	r28
    30f6:	df 91       	pop	r29
    30f8:	08 95       	ret

000030fa <LCD_vSendCommand>:
 *
 *  Created on: Dec 30, 2022
 *      Author: a7med
 */
#include "LCD.h"
void LCD_vSendCommand(u8 Loc_u8Command){
    30fa:	df 93       	push	r29
    30fc:	cf 93       	push	r28
    30fe:	cd b7       	in	r28, 0x3d	; 61
    3100:	de b7       	in	r29, 0x3e	; 62
    3102:	6d 97       	sbiw	r28, 0x1d	; 29
    3104:	0f b6       	in	r0, 0x3f	; 63
    3106:	f8 94       	cli
    3108:	de bf       	out	0x3e, r29	; 62
    310a:	0f be       	out	0x3f, r0	; 63
    310c:	cd bf       	out	0x3d, r28	; 61
    310e:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_vSetPinValue(PortB, Pin1, Pin_Low);
    3110:	81 e0       	ldi	r24, 0x01	; 1
    3112:	61 e0       	ldi	r22, 0x01	; 1
    3114:	40 e0       	ldi	r20, 0x00	; 0
    3116:	0e 94 74 10 	call	0x20e8	; 0x20e8 <DIO_vSetPinValue>
	DIO_vSetPinValue(PortB, Pin2, Pin_Low);
    311a:	81 e0       	ldi	r24, 0x01	; 1
    311c:	62 e0       	ldi	r22, 0x02	; 2
    311e:	40 e0       	ldi	r20, 0x00	; 0
    3120:	0e 94 74 10 	call	0x20e8	; 0x20e8 <DIO_vSetPinValue>
	DIO_vSetPinValue(PortB, Pin3, Pin_Low);
    3124:	81 e0       	ldi	r24, 0x01	; 1
    3126:	63 e0       	ldi	r22, 0x03	; 3
    3128:	40 e0       	ldi	r20, 0x00	; 0
    312a:	0e 94 74 10 	call	0x20e8	; 0x20e8 <DIO_vSetPinValue>
	//------Send command-------
	DIO_vSetPortValue(PortA,(Loc_u8Command)&0xF0);
    312e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3130:	98 2f       	mov	r25, r24
    3132:	90 7f       	andi	r25, 0xF0	; 240
    3134:	80 e0       	ldi	r24, 0x00	; 0
    3136:	69 2f       	mov	r22, r25
    3138:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <DIO_vSetPortValue>
	DIO_vSetPinValue(PortB, Pin3, Pin_High);
    313c:	81 e0       	ldi	r24, 0x01	; 1
    313e:	63 e0       	ldi	r22, 0x03	; 3
    3140:	41 e0       	ldi	r20, 0x01	; 1
    3142:	0e 94 74 10 	call	0x20e8	; 0x20e8 <DIO_vSetPinValue>
    3146:	80 e0       	ldi	r24, 0x00	; 0
    3148:	90 e0       	ldi	r25, 0x00	; 0
    314a:	a0 e2       	ldi	r26, 0x20	; 32
    314c:	b1 e4       	ldi	r27, 0x41	; 65
    314e:	89 8f       	std	Y+25, r24	; 0x19
    3150:	9a 8f       	std	Y+26, r25	; 0x1a
    3152:	ab 8f       	std	Y+27, r26	; 0x1b
    3154:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3156:	69 8d       	ldd	r22, Y+25	; 0x19
    3158:	7a 8d       	ldd	r23, Y+26	; 0x1a
    315a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    315c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    315e:	20 e0       	ldi	r18, 0x00	; 0
    3160:	30 e0       	ldi	r19, 0x00	; 0
    3162:	4a e7       	ldi	r20, 0x7A	; 122
    3164:	55 e4       	ldi	r21, 0x45	; 69
    3166:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    316a:	dc 01       	movw	r26, r24
    316c:	cb 01       	movw	r24, r22
    316e:	8d 8b       	std	Y+21, r24	; 0x15
    3170:	9e 8b       	std	Y+22, r25	; 0x16
    3172:	af 8b       	std	Y+23, r26	; 0x17
    3174:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3176:	6d 89       	ldd	r22, Y+21	; 0x15
    3178:	7e 89       	ldd	r23, Y+22	; 0x16
    317a:	8f 89       	ldd	r24, Y+23	; 0x17
    317c:	98 8d       	ldd	r25, Y+24	; 0x18
    317e:	20 e0       	ldi	r18, 0x00	; 0
    3180:	30 e0       	ldi	r19, 0x00	; 0
    3182:	40 e8       	ldi	r20, 0x80	; 128
    3184:	5f e3       	ldi	r21, 0x3F	; 63
    3186:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    318a:	88 23       	and	r24, r24
    318c:	2c f4       	brge	.+10     	; 0x3198 <LCD_vSendCommand+0x9e>
		__ticks = 1;
    318e:	81 e0       	ldi	r24, 0x01	; 1
    3190:	90 e0       	ldi	r25, 0x00	; 0
    3192:	9c 8b       	std	Y+20, r25	; 0x14
    3194:	8b 8b       	std	Y+19, r24	; 0x13
    3196:	3f c0       	rjmp	.+126    	; 0x3216 <LCD_vSendCommand+0x11c>
	else if (__tmp > 65535)
    3198:	6d 89       	ldd	r22, Y+21	; 0x15
    319a:	7e 89       	ldd	r23, Y+22	; 0x16
    319c:	8f 89       	ldd	r24, Y+23	; 0x17
    319e:	98 8d       	ldd	r25, Y+24	; 0x18
    31a0:	20 e0       	ldi	r18, 0x00	; 0
    31a2:	3f ef       	ldi	r19, 0xFF	; 255
    31a4:	4f e7       	ldi	r20, 0x7F	; 127
    31a6:	57 e4       	ldi	r21, 0x47	; 71
    31a8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31ac:	18 16       	cp	r1, r24
    31ae:	4c f5       	brge	.+82     	; 0x3202 <LCD_vSendCommand+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31b0:	69 8d       	ldd	r22, Y+25	; 0x19
    31b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31b8:	20 e0       	ldi	r18, 0x00	; 0
    31ba:	30 e0       	ldi	r19, 0x00	; 0
    31bc:	40 e2       	ldi	r20, 0x20	; 32
    31be:	51 e4       	ldi	r21, 0x41	; 65
    31c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31c4:	dc 01       	movw	r26, r24
    31c6:	cb 01       	movw	r24, r22
    31c8:	bc 01       	movw	r22, r24
    31ca:	cd 01       	movw	r24, r26
    31cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31d0:	dc 01       	movw	r26, r24
    31d2:	cb 01       	movw	r24, r22
    31d4:	9c 8b       	std	Y+20, r25	; 0x14
    31d6:	8b 8b       	std	Y+19, r24	; 0x13
    31d8:	0f c0       	rjmp	.+30     	; 0x31f8 <LCD_vSendCommand+0xfe>
    31da:	80 e9       	ldi	r24, 0x90	; 144
    31dc:	91 e0       	ldi	r25, 0x01	; 1
    31de:	9a 8b       	std	Y+18, r25	; 0x12
    31e0:	89 8b       	std	Y+17, r24	; 0x11
    31e2:	89 89       	ldd	r24, Y+17	; 0x11
    31e4:	9a 89       	ldd	r25, Y+18	; 0x12
    31e6:	01 97       	sbiw	r24, 0x01	; 1
    31e8:	f1 f7       	brne	.-4      	; 0x31e6 <LCD_vSendCommand+0xec>
    31ea:	9a 8b       	std	Y+18, r25	; 0x12
    31ec:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31ee:	8b 89       	ldd	r24, Y+19	; 0x13
    31f0:	9c 89       	ldd	r25, Y+20	; 0x14
    31f2:	01 97       	sbiw	r24, 0x01	; 1
    31f4:	9c 8b       	std	Y+20, r25	; 0x14
    31f6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31f8:	8b 89       	ldd	r24, Y+19	; 0x13
    31fa:	9c 89       	ldd	r25, Y+20	; 0x14
    31fc:	00 97       	sbiw	r24, 0x00	; 0
    31fe:	69 f7       	brne	.-38     	; 0x31da <LCD_vSendCommand+0xe0>
    3200:	14 c0       	rjmp	.+40     	; 0x322a <LCD_vSendCommand+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3202:	6d 89       	ldd	r22, Y+21	; 0x15
    3204:	7e 89       	ldd	r23, Y+22	; 0x16
    3206:	8f 89       	ldd	r24, Y+23	; 0x17
    3208:	98 8d       	ldd	r25, Y+24	; 0x18
    320a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    320e:	dc 01       	movw	r26, r24
    3210:	cb 01       	movw	r24, r22
    3212:	9c 8b       	std	Y+20, r25	; 0x14
    3214:	8b 8b       	std	Y+19, r24	; 0x13
    3216:	8b 89       	ldd	r24, Y+19	; 0x13
    3218:	9c 89       	ldd	r25, Y+20	; 0x14
    321a:	98 8b       	std	Y+16, r25	; 0x10
    321c:	8f 87       	std	Y+15, r24	; 0x0f
    321e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3220:	98 89       	ldd	r25, Y+16	; 0x10
    3222:	01 97       	sbiw	r24, 0x01	; 1
    3224:	f1 f7       	brne	.-4      	; 0x3222 <LCD_vSendCommand+0x128>
    3226:	98 8b       	std	Y+16, r25	; 0x10
    3228:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	DIO_vSetPinValue(PortB, Pin3, Pin_Low);
    322a:	81 e0       	ldi	r24, 0x01	; 1
    322c:	63 e0       	ldi	r22, 0x03	; 3
    322e:	40 e0       	ldi	r20, 0x00	; 0
    3230:	0e 94 74 10 	call	0x20e8	; 0x20e8 <DIO_vSetPinValue>
	DIO_vSetPortValue(PortA,(Loc_u8Command<<4));
    3234:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3236:	98 2f       	mov	r25, r24
    3238:	92 95       	swap	r25
    323a:	90 7f       	andi	r25, 0xF0	; 240
    323c:	80 e0       	ldi	r24, 0x00	; 0
    323e:	69 2f       	mov	r22, r25
    3240:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <DIO_vSetPortValue>
	DIO_vSetPinValue(PortB, Pin3, Pin_High);
    3244:	81 e0       	ldi	r24, 0x01	; 1
    3246:	63 e0       	ldi	r22, 0x03	; 3
    3248:	41 e0       	ldi	r20, 0x01	; 1
    324a:	0e 94 74 10 	call	0x20e8	; 0x20e8 <DIO_vSetPinValue>
    324e:	80 e0       	ldi	r24, 0x00	; 0
    3250:	90 e0       	ldi	r25, 0x00	; 0
    3252:	a0 e2       	ldi	r26, 0x20	; 32
    3254:	b1 e4       	ldi	r27, 0x41	; 65
    3256:	8b 87       	std	Y+11, r24	; 0x0b
    3258:	9c 87       	std	Y+12, r25	; 0x0c
    325a:	ad 87       	std	Y+13, r26	; 0x0d
    325c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    325e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3260:	7c 85       	ldd	r23, Y+12	; 0x0c
    3262:	8d 85       	ldd	r24, Y+13	; 0x0d
    3264:	9e 85       	ldd	r25, Y+14	; 0x0e
    3266:	20 e0       	ldi	r18, 0x00	; 0
    3268:	30 e0       	ldi	r19, 0x00	; 0
    326a:	4a e7       	ldi	r20, 0x7A	; 122
    326c:	55 e4       	ldi	r21, 0x45	; 69
    326e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3272:	dc 01       	movw	r26, r24
    3274:	cb 01       	movw	r24, r22
    3276:	8f 83       	std	Y+7, r24	; 0x07
    3278:	98 87       	std	Y+8, r25	; 0x08
    327a:	a9 87       	std	Y+9, r26	; 0x09
    327c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    327e:	6f 81       	ldd	r22, Y+7	; 0x07
    3280:	78 85       	ldd	r23, Y+8	; 0x08
    3282:	89 85       	ldd	r24, Y+9	; 0x09
    3284:	9a 85       	ldd	r25, Y+10	; 0x0a
    3286:	20 e0       	ldi	r18, 0x00	; 0
    3288:	30 e0       	ldi	r19, 0x00	; 0
    328a:	40 e8       	ldi	r20, 0x80	; 128
    328c:	5f e3       	ldi	r21, 0x3F	; 63
    328e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3292:	88 23       	and	r24, r24
    3294:	2c f4       	brge	.+10     	; 0x32a0 <LCD_vSendCommand+0x1a6>
		__ticks = 1;
    3296:	81 e0       	ldi	r24, 0x01	; 1
    3298:	90 e0       	ldi	r25, 0x00	; 0
    329a:	9e 83       	std	Y+6, r25	; 0x06
    329c:	8d 83       	std	Y+5, r24	; 0x05
    329e:	3f c0       	rjmp	.+126    	; 0x331e <LCD_vSendCommand+0x224>
	else if (__tmp > 65535)
    32a0:	6f 81       	ldd	r22, Y+7	; 0x07
    32a2:	78 85       	ldd	r23, Y+8	; 0x08
    32a4:	89 85       	ldd	r24, Y+9	; 0x09
    32a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    32a8:	20 e0       	ldi	r18, 0x00	; 0
    32aa:	3f ef       	ldi	r19, 0xFF	; 255
    32ac:	4f e7       	ldi	r20, 0x7F	; 127
    32ae:	57 e4       	ldi	r21, 0x47	; 71
    32b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32b4:	18 16       	cp	r1, r24
    32b6:	4c f5       	brge	.+82     	; 0x330a <LCD_vSendCommand+0x210>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    32ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    32bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    32be:	9e 85       	ldd	r25, Y+14	; 0x0e
    32c0:	20 e0       	ldi	r18, 0x00	; 0
    32c2:	30 e0       	ldi	r19, 0x00	; 0
    32c4:	40 e2       	ldi	r20, 0x20	; 32
    32c6:	51 e4       	ldi	r21, 0x41	; 65
    32c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32cc:	dc 01       	movw	r26, r24
    32ce:	cb 01       	movw	r24, r22
    32d0:	bc 01       	movw	r22, r24
    32d2:	cd 01       	movw	r24, r26
    32d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32d8:	dc 01       	movw	r26, r24
    32da:	cb 01       	movw	r24, r22
    32dc:	9e 83       	std	Y+6, r25	; 0x06
    32de:	8d 83       	std	Y+5, r24	; 0x05
    32e0:	0f c0       	rjmp	.+30     	; 0x3300 <LCD_vSendCommand+0x206>
    32e2:	80 e9       	ldi	r24, 0x90	; 144
    32e4:	91 e0       	ldi	r25, 0x01	; 1
    32e6:	9c 83       	std	Y+4, r25	; 0x04
    32e8:	8b 83       	std	Y+3, r24	; 0x03
    32ea:	8b 81       	ldd	r24, Y+3	; 0x03
    32ec:	9c 81       	ldd	r25, Y+4	; 0x04
    32ee:	01 97       	sbiw	r24, 0x01	; 1
    32f0:	f1 f7       	brne	.-4      	; 0x32ee <LCD_vSendCommand+0x1f4>
    32f2:	9c 83       	std	Y+4, r25	; 0x04
    32f4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32f6:	8d 81       	ldd	r24, Y+5	; 0x05
    32f8:	9e 81       	ldd	r25, Y+6	; 0x06
    32fa:	01 97       	sbiw	r24, 0x01	; 1
    32fc:	9e 83       	std	Y+6, r25	; 0x06
    32fe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3300:	8d 81       	ldd	r24, Y+5	; 0x05
    3302:	9e 81       	ldd	r25, Y+6	; 0x06
    3304:	00 97       	sbiw	r24, 0x00	; 0
    3306:	69 f7       	brne	.-38     	; 0x32e2 <LCD_vSendCommand+0x1e8>
    3308:	14 c0       	rjmp	.+40     	; 0x3332 <LCD_vSendCommand+0x238>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    330a:	6f 81       	ldd	r22, Y+7	; 0x07
    330c:	78 85       	ldd	r23, Y+8	; 0x08
    330e:	89 85       	ldd	r24, Y+9	; 0x09
    3310:	9a 85       	ldd	r25, Y+10	; 0x0a
    3312:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3316:	dc 01       	movw	r26, r24
    3318:	cb 01       	movw	r24, r22
    331a:	9e 83       	std	Y+6, r25	; 0x06
    331c:	8d 83       	std	Y+5, r24	; 0x05
    331e:	8d 81       	ldd	r24, Y+5	; 0x05
    3320:	9e 81       	ldd	r25, Y+6	; 0x06
    3322:	9a 83       	std	Y+2, r25	; 0x02
    3324:	89 83       	std	Y+1, r24	; 0x01
    3326:	89 81       	ldd	r24, Y+1	; 0x01
    3328:	9a 81       	ldd	r25, Y+2	; 0x02
    332a:	01 97       	sbiw	r24, 0x01	; 1
    332c:	f1 f7       	brne	.-4      	; 0x332a <LCD_vSendCommand+0x230>
    332e:	9a 83       	std	Y+2, r25	; 0x02
    3330:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	DIO_vSetPinValue(PortB, Pin3, Pin_Low);
    3332:	81 e0       	ldi	r24, 0x01	; 1
    3334:	63 e0       	ldi	r22, 0x03	; 3
    3336:	40 e0       	ldi	r20, 0x00	; 0
    3338:	0e 94 74 10 	call	0x20e8	; 0x20e8 <DIO_vSetPinValue>


}
    333c:	6d 96       	adiw	r28, 0x1d	; 29
    333e:	0f b6       	in	r0, 0x3f	; 63
    3340:	f8 94       	cli
    3342:	de bf       	out	0x3e, r29	; 62
    3344:	0f be       	out	0x3f, r0	; 63
    3346:	cd bf       	out	0x3d, r28	; 61
    3348:	cf 91       	pop	r28
    334a:	df 91       	pop	r29
    334c:	08 95       	ret

0000334e <LCD_vInit>:
void LCD_vInit(){
    334e:	0f 93       	push	r16
    3350:	1f 93       	push	r17
    3352:	df 93       	push	r29
    3354:	cf 93       	push	r28
    3356:	cd b7       	in	r28, 0x3d	; 61
    3358:	de b7       	in	r29, 0x3e	; 62
    335a:	c6 54       	subi	r28, 0x46	; 70
    335c:	d0 40       	sbci	r29, 0x00	; 0
    335e:	0f b6       	in	r0, 0x3f	; 63
    3360:	f8 94       	cli
    3362:	de bf       	out	0x3e, r29	; 62
    3364:	0f be       	out	0x3f, r0	; 63
    3366:	cd bf       	out	0x3d, r28	; 61
	//------Set used pins as output-----
	DIO_vSetPinDirection(PortB, Pin1, Pin_OutPut);
    3368:	81 e0       	ldi	r24, 0x01	; 1
    336a:	61 e0       	ldi	r22, 0x01	; 1
    336c:	41 e0       	ldi	r20, 0x01	; 1
    336e:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PortB, Pin3, Pin_OutPut);
    3372:	81 e0       	ldi	r24, 0x01	; 1
    3374:	63 e0       	ldi	r22, 0x03	; 3
    3376:	41 e0       	ldi	r20, 0x01	; 1
    3378:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PortB, Pin2, Pin_OutPut);
    337c:	81 e0       	ldi	r24, 0x01	; 1
    337e:	62 e0       	ldi	r22, 0x02	; 2
    3380:	41 e0       	ldi	r20, 0x01	; 1
    3382:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PortA, Pin4, Pin_OutPut);
    3386:	80 e0       	ldi	r24, 0x00	; 0
    3388:	64 e0       	ldi	r22, 0x04	; 4
    338a:	41 e0       	ldi	r20, 0x01	; 1
    338c:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PortA, Pin5, Pin_OutPut);
    3390:	80 e0       	ldi	r24, 0x00	; 0
    3392:	65 e0       	ldi	r22, 0x05	; 5
    3394:	41 e0       	ldi	r20, 0x01	; 1
    3396:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PortA, Pin6, Pin_OutPut);
    339a:	80 e0       	ldi	r24, 0x00	; 0
    339c:	66 e0       	ldi	r22, 0x06	; 6
    339e:	41 e0       	ldi	r20, 0x01	; 1
    33a0:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PortA, Pin7, Pin_OutPut);
    33a4:	80 e0       	ldi	r24, 0x00	; 0
    33a6:	67 e0       	ldi	r22, 0x07	; 7
    33a8:	41 e0       	ldi	r20, 0x01	; 1
    33aa:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <DIO_vSetPinDirection>
    33ae:	fe 01       	movw	r30, r28
    33b0:	ed 5b       	subi	r30, 0xBD	; 189
    33b2:	ff 4f       	sbci	r31, 0xFF	; 255
    33b4:	80 e0       	ldi	r24, 0x00	; 0
    33b6:	90 e0       	ldi	r25, 0x00	; 0
    33b8:	a8 e4       	ldi	r26, 0x48	; 72
    33ba:	b2 e4       	ldi	r27, 0x42	; 66
    33bc:	80 83       	st	Z, r24
    33be:	91 83       	std	Z+1, r25	; 0x01
    33c0:	a2 83       	std	Z+2, r26	; 0x02
    33c2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33c4:	8e 01       	movw	r16, r28
    33c6:	01 5c       	subi	r16, 0xC1	; 193
    33c8:	1f 4f       	sbci	r17, 0xFF	; 255
    33ca:	fe 01       	movw	r30, r28
    33cc:	ed 5b       	subi	r30, 0xBD	; 189
    33ce:	ff 4f       	sbci	r31, 0xFF	; 255
    33d0:	60 81       	ld	r22, Z
    33d2:	71 81       	ldd	r23, Z+1	; 0x01
    33d4:	82 81       	ldd	r24, Z+2	; 0x02
    33d6:	93 81       	ldd	r25, Z+3	; 0x03
    33d8:	20 e0       	ldi	r18, 0x00	; 0
    33da:	30 e0       	ldi	r19, 0x00	; 0
    33dc:	4a e7       	ldi	r20, 0x7A	; 122
    33de:	55 e4       	ldi	r21, 0x45	; 69
    33e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33e4:	dc 01       	movw	r26, r24
    33e6:	cb 01       	movw	r24, r22
    33e8:	f8 01       	movw	r30, r16
    33ea:	80 83       	st	Z, r24
    33ec:	91 83       	std	Z+1, r25	; 0x01
    33ee:	a2 83       	std	Z+2, r26	; 0x02
    33f0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    33f2:	fe 01       	movw	r30, r28
    33f4:	ff 96       	adiw	r30, 0x3f	; 63
    33f6:	60 81       	ld	r22, Z
    33f8:	71 81       	ldd	r23, Z+1	; 0x01
    33fa:	82 81       	ldd	r24, Z+2	; 0x02
    33fc:	93 81       	ldd	r25, Z+3	; 0x03
    33fe:	20 e0       	ldi	r18, 0x00	; 0
    3400:	30 e0       	ldi	r19, 0x00	; 0
    3402:	40 e8       	ldi	r20, 0x80	; 128
    3404:	5f e3       	ldi	r21, 0x3F	; 63
    3406:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    340a:	88 23       	and	r24, r24
    340c:	2c f4       	brge	.+10     	; 0x3418 <LCD_vInit+0xca>
		__ticks = 1;
    340e:	81 e0       	ldi	r24, 0x01	; 1
    3410:	90 e0       	ldi	r25, 0x00	; 0
    3412:	9e af       	std	Y+62, r25	; 0x3e
    3414:	8d af       	std	Y+61, r24	; 0x3d
    3416:	46 c0       	rjmp	.+140    	; 0x34a4 <LCD_vInit+0x156>
	else if (__tmp > 65535)
    3418:	fe 01       	movw	r30, r28
    341a:	ff 96       	adiw	r30, 0x3f	; 63
    341c:	60 81       	ld	r22, Z
    341e:	71 81       	ldd	r23, Z+1	; 0x01
    3420:	82 81       	ldd	r24, Z+2	; 0x02
    3422:	93 81       	ldd	r25, Z+3	; 0x03
    3424:	20 e0       	ldi	r18, 0x00	; 0
    3426:	3f ef       	ldi	r19, 0xFF	; 255
    3428:	4f e7       	ldi	r20, 0x7F	; 127
    342a:	57 e4       	ldi	r21, 0x47	; 71
    342c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3430:	18 16       	cp	r1, r24
    3432:	64 f5       	brge	.+88     	; 0x348c <LCD_vInit+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3434:	fe 01       	movw	r30, r28
    3436:	ed 5b       	subi	r30, 0xBD	; 189
    3438:	ff 4f       	sbci	r31, 0xFF	; 255
    343a:	60 81       	ld	r22, Z
    343c:	71 81       	ldd	r23, Z+1	; 0x01
    343e:	82 81       	ldd	r24, Z+2	; 0x02
    3440:	93 81       	ldd	r25, Z+3	; 0x03
    3442:	20 e0       	ldi	r18, 0x00	; 0
    3444:	30 e0       	ldi	r19, 0x00	; 0
    3446:	40 e2       	ldi	r20, 0x20	; 32
    3448:	51 e4       	ldi	r21, 0x41	; 65
    344a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    344e:	dc 01       	movw	r26, r24
    3450:	cb 01       	movw	r24, r22
    3452:	bc 01       	movw	r22, r24
    3454:	cd 01       	movw	r24, r26
    3456:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    345a:	dc 01       	movw	r26, r24
    345c:	cb 01       	movw	r24, r22
    345e:	9e af       	std	Y+62, r25	; 0x3e
    3460:	8d af       	std	Y+61, r24	; 0x3d
    3462:	0f c0       	rjmp	.+30     	; 0x3482 <LCD_vInit+0x134>
    3464:	80 e9       	ldi	r24, 0x90	; 144
    3466:	91 e0       	ldi	r25, 0x01	; 1
    3468:	9c af       	std	Y+60, r25	; 0x3c
    346a:	8b af       	std	Y+59, r24	; 0x3b
    346c:	8b ad       	ldd	r24, Y+59	; 0x3b
    346e:	9c ad       	ldd	r25, Y+60	; 0x3c
    3470:	01 97       	sbiw	r24, 0x01	; 1
    3472:	f1 f7       	brne	.-4      	; 0x3470 <LCD_vInit+0x122>
    3474:	9c af       	std	Y+60, r25	; 0x3c
    3476:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3478:	8d ad       	ldd	r24, Y+61	; 0x3d
    347a:	9e ad       	ldd	r25, Y+62	; 0x3e
    347c:	01 97       	sbiw	r24, 0x01	; 1
    347e:	9e af       	std	Y+62, r25	; 0x3e
    3480:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3482:	8d ad       	ldd	r24, Y+61	; 0x3d
    3484:	9e ad       	ldd	r25, Y+62	; 0x3e
    3486:	00 97       	sbiw	r24, 0x00	; 0
    3488:	69 f7       	brne	.-38     	; 0x3464 <LCD_vInit+0x116>
    348a:	16 c0       	rjmp	.+44     	; 0x34b8 <LCD_vInit+0x16a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    348c:	fe 01       	movw	r30, r28
    348e:	ff 96       	adiw	r30, 0x3f	; 63
    3490:	60 81       	ld	r22, Z
    3492:	71 81       	ldd	r23, Z+1	; 0x01
    3494:	82 81       	ldd	r24, Z+2	; 0x02
    3496:	93 81       	ldd	r25, Z+3	; 0x03
    3498:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    349c:	dc 01       	movw	r26, r24
    349e:	cb 01       	movw	r24, r22
    34a0:	9e af       	std	Y+62, r25	; 0x3e
    34a2:	8d af       	std	Y+61, r24	; 0x3d
    34a4:	8d ad       	ldd	r24, Y+61	; 0x3d
    34a6:	9e ad       	ldd	r25, Y+62	; 0x3e
    34a8:	9a af       	std	Y+58, r25	; 0x3a
    34aa:	89 af       	std	Y+57, r24	; 0x39
    34ac:	89 ad       	ldd	r24, Y+57	; 0x39
    34ae:	9a ad       	ldd	r25, Y+58	; 0x3a
    34b0:	01 97       	sbiw	r24, 0x01	; 1
    34b2:	f1 f7       	brne	.-4      	; 0x34b0 <LCD_vInit+0x162>
    34b4:	9a af       	std	Y+58, r25	; 0x3a
    34b6:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(50);
	LCD_vSendCommand(FunctionSet);
    34b8:	88 e2       	ldi	r24, 0x28	; 40
    34ba:	0e 94 7d 18 	call	0x30fa	; 0x30fa <LCD_vSendCommand>
    34be:	80 e0       	ldi	r24, 0x00	; 0
    34c0:	90 e0       	ldi	r25, 0x00	; 0
    34c2:	a0 e0       	ldi	r26, 0x00	; 0
    34c4:	b0 e4       	ldi	r27, 0x40	; 64
    34c6:	8d ab       	std	Y+53, r24	; 0x35
    34c8:	9e ab       	std	Y+54, r25	; 0x36
    34ca:	af ab       	std	Y+55, r26	; 0x37
    34cc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34ce:	6d a9       	ldd	r22, Y+53	; 0x35
    34d0:	7e a9       	ldd	r23, Y+54	; 0x36
    34d2:	8f a9       	ldd	r24, Y+55	; 0x37
    34d4:	98 ad       	ldd	r25, Y+56	; 0x38
    34d6:	20 e0       	ldi	r18, 0x00	; 0
    34d8:	30 e0       	ldi	r19, 0x00	; 0
    34da:	4a e7       	ldi	r20, 0x7A	; 122
    34dc:	55 e4       	ldi	r21, 0x45	; 69
    34de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34e2:	dc 01       	movw	r26, r24
    34e4:	cb 01       	movw	r24, r22
    34e6:	89 ab       	std	Y+49, r24	; 0x31
    34e8:	9a ab       	std	Y+50, r25	; 0x32
    34ea:	ab ab       	std	Y+51, r26	; 0x33
    34ec:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    34ee:	69 a9       	ldd	r22, Y+49	; 0x31
    34f0:	7a a9       	ldd	r23, Y+50	; 0x32
    34f2:	8b a9       	ldd	r24, Y+51	; 0x33
    34f4:	9c a9       	ldd	r25, Y+52	; 0x34
    34f6:	20 e0       	ldi	r18, 0x00	; 0
    34f8:	30 e0       	ldi	r19, 0x00	; 0
    34fa:	40 e8       	ldi	r20, 0x80	; 128
    34fc:	5f e3       	ldi	r21, 0x3F	; 63
    34fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3502:	88 23       	and	r24, r24
    3504:	2c f4       	brge	.+10     	; 0x3510 <LCD_vInit+0x1c2>
		__ticks = 1;
    3506:	81 e0       	ldi	r24, 0x01	; 1
    3508:	90 e0       	ldi	r25, 0x00	; 0
    350a:	98 ab       	std	Y+48, r25	; 0x30
    350c:	8f a7       	std	Y+47, r24	; 0x2f
    350e:	3f c0       	rjmp	.+126    	; 0x358e <LCD_vInit+0x240>
	else if (__tmp > 65535)
    3510:	69 a9       	ldd	r22, Y+49	; 0x31
    3512:	7a a9       	ldd	r23, Y+50	; 0x32
    3514:	8b a9       	ldd	r24, Y+51	; 0x33
    3516:	9c a9       	ldd	r25, Y+52	; 0x34
    3518:	20 e0       	ldi	r18, 0x00	; 0
    351a:	3f ef       	ldi	r19, 0xFF	; 255
    351c:	4f e7       	ldi	r20, 0x7F	; 127
    351e:	57 e4       	ldi	r21, 0x47	; 71
    3520:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3524:	18 16       	cp	r1, r24
    3526:	4c f5       	brge	.+82     	; 0x357a <LCD_vInit+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3528:	6d a9       	ldd	r22, Y+53	; 0x35
    352a:	7e a9       	ldd	r23, Y+54	; 0x36
    352c:	8f a9       	ldd	r24, Y+55	; 0x37
    352e:	98 ad       	ldd	r25, Y+56	; 0x38
    3530:	20 e0       	ldi	r18, 0x00	; 0
    3532:	30 e0       	ldi	r19, 0x00	; 0
    3534:	40 e2       	ldi	r20, 0x20	; 32
    3536:	51 e4       	ldi	r21, 0x41	; 65
    3538:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    353c:	dc 01       	movw	r26, r24
    353e:	cb 01       	movw	r24, r22
    3540:	bc 01       	movw	r22, r24
    3542:	cd 01       	movw	r24, r26
    3544:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3548:	dc 01       	movw	r26, r24
    354a:	cb 01       	movw	r24, r22
    354c:	98 ab       	std	Y+48, r25	; 0x30
    354e:	8f a7       	std	Y+47, r24	; 0x2f
    3550:	0f c0       	rjmp	.+30     	; 0x3570 <LCD_vInit+0x222>
    3552:	80 e9       	ldi	r24, 0x90	; 144
    3554:	91 e0       	ldi	r25, 0x01	; 1
    3556:	9e a7       	std	Y+46, r25	; 0x2e
    3558:	8d a7       	std	Y+45, r24	; 0x2d
    355a:	8d a5       	ldd	r24, Y+45	; 0x2d
    355c:	9e a5       	ldd	r25, Y+46	; 0x2e
    355e:	01 97       	sbiw	r24, 0x01	; 1
    3560:	f1 f7       	brne	.-4      	; 0x355e <LCD_vInit+0x210>
    3562:	9e a7       	std	Y+46, r25	; 0x2e
    3564:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3566:	8f a5       	ldd	r24, Y+47	; 0x2f
    3568:	98 a9       	ldd	r25, Y+48	; 0x30
    356a:	01 97       	sbiw	r24, 0x01	; 1
    356c:	98 ab       	std	Y+48, r25	; 0x30
    356e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3570:	8f a5       	ldd	r24, Y+47	; 0x2f
    3572:	98 a9       	ldd	r25, Y+48	; 0x30
    3574:	00 97       	sbiw	r24, 0x00	; 0
    3576:	69 f7       	brne	.-38     	; 0x3552 <LCD_vInit+0x204>
    3578:	14 c0       	rjmp	.+40     	; 0x35a2 <LCD_vInit+0x254>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    357a:	69 a9       	ldd	r22, Y+49	; 0x31
    357c:	7a a9       	ldd	r23, Y+50	; 0x32
    357e:	8b a9       	ldd	r24, Y+51	; 0x33
    3580:	9c a9       	ldd	r25, Y+52	; 0x34
    3582:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3586:	dc 01       	movw	r26, r24
    3588:	cb 01       	movw	r24, r22
    358a:	98 ab       	std	Y+48, r25	; 0x30
    358c:	8f a7       	std	Y+47, r24	; 0x2f
    358e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3590:	98 a9       	ldd	r25, Y+48	; 0x30
    3592:	9c a7       	std	Y+44, r25	; 0x2c
    3594:	8b a7       	std	Y+43, r24	; 0x2b
    3596:	8b a5       	ldd	r24, Y+43	; 0x2b
    3598:	9c a5       	ldd	r25, Y+44	; 0x2c
    359a:	01 97       	sbiw	r24, 0x01	; 1
    359c:	f1 f7       	brne	.-4      	; 0x359a <LCD_vInit+0x24c>
    359e:	9c a7       	std	Y+44, r25	; 0x2c
    35a0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	LCD_vSendCommand(DisplayOnControl);
    35a2:	8e e0       	ldi	r24, 0x0E	; 14
    35a4:	0e 94 7d 18 	call	0x30fa	; 0x30fa <LCD_vSendCommand>
    35a8:	80 e0       	ldi	r24, 0x00	; 0
    35aa:	90 e0       	ldi	r25, 0x00	; 0
    35ac:	a0 e0       	ldi	r26, 0x00	; 0
    35ae:	b0 e4       	ldi	r27, 0x40	; 64
    35b0:	8f a3       	std	Y+39, r24	; 0x27
    35b2:	98 a7       	std	Y+40, r25	; 0x28
    35b4:	a9 a7       	std	Y+41, r26	; 0x29
    35b6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35b8:	6f a1       	ldd	r22, Y+39	; 0x27
    35ba:	78 a5       	ldd	r23, Y+40	; 0x28
    35bc:	89 a5       	ldd	r24, Y+41	; 0x29
    35be:	9a a5       	ldd	r25, Y+42	; 0x2a
    35c0:	20 e0       	ldi	r18, 0x00	; 0
    35c2:	30 e0       	ldi	r19, 0x00	; 0
    35c4:	4a e7       	ldi	r20, 0x7A	; 122
    35c6:	55 e4       	ldi	r21, 0x45	; 69
    35c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35cc:	dc 01       	movw	r26, r24
    35ce:	cb 01       	movw	r24, r22
    35d0:	8b a3       	std	Y+35, r24	; 0x23
    35d2:	9c a3       	std	Y+36, r25	; 0x24
    35d4:	ad a3       	std	Y+37, r26	; 0x25
    35d6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    35d8:	6b a1       	ldd	r22, Y+35	; 0x23
    35da:	7c a1       	ldd	r23, Y+36	; 0x24
    35dc:	8d a1       	ldd	r24, Y+37	; 0x25
    35de:	9e a1       	ldd	r25, Y+38	; 0x26
    35e0:	20 e0       	ldi	r18, 0x00	; 0
    35e2:	30 e0       	ldi	r19, 0x00	; 0
    35e4:	40 e8       	ldi	r20, 0x80	; 128
    35e6:	5f e3       	ldi	r21, 0x3F	; 63
    35e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    35ec:	88 23       	and	r24, r24
    35ee:	2c f4       	brge	.+10     	; 0x35fa <LCD_vInit+0x2ac>
		__ticks = 1;
    35f0:	81 e0       	ldi	r24, 0x01	; 1
    35f2:	90 e0       	ldi	r25, 0x00	; 0
    35f4:	9a a3       	std	Y+34, r25	; 0x22
    35f6:	89 a3       	std	Y+33, r24	; 0x21
    35f8:	3f c0       	rjmp	.+126    	; 0x3678 <LCD_vInit+0x32a>
	else if (__tmp > 65535)
    35fa:	6b a1       	ldd	r22, Y+35	; 0x23
    35fc:	7c a1       	ldd	r23, Y+36	; 0x24
    35fe:	8d a1       	ldd	r24, Y+37	; 0x25
    3600:	9e a1       	ldd	r25, Y+38	; 0x26
    3602:	20 e0       	ldi	r18, 0x00	; 0
    3604:	3f ef       	ldi	r19, 0xFF	; 255
    3606:	4f e7       	ldi	r20, 0x7F	; 127
    3608:	57 e4       	ldi	r21, 0x47	; 71
    360a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    360e:	18 16       	cp	r1, r24
    3610:	4c f5       	brge	.+82     	; 0x3664 <LCD_vInit+0x316>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3612:	6f a1       	ldd	r22, Y+39	; 0x27
    3614:	78 a5       	ldd	r23, Y+40	; 0x28
    3616:	89 a5       	ldd	r24, Y+41	; 0x29
    3618:	9a a5       	ldd	r25, Y+42	; 0x2a
    361a:	20 e0       	ldi	r18, 0x00	; 0
    361c:	30 e0       	ldi	r19, 0x00	; 0
    361e:	40 e2       	ldi	r20, 0x20	; 32
    3620:	51 e4       	ldi	r21, 0x41	; 65
    3622:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3626:	dc 01       	movw	r26, r24
    3628:	cb 01       	movw	r24, r22
    362a:	bc 01       	movw	r22, r24
    362c:	cd 01       	movw	r24, r26
    362e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3632:	dc 01       	movw	r26, r24
    3634:	cb 01       	movw	r24, r22
    3636:	9a a3       	std	Y+34, r25	; 0x22
    3638:	89 a3       	std	Y+33, r24	; 0x21
    363a:	0f c0       	rjmp	.+30     	; 0x365a <LCD_vInit+0x30c>
    363c:	80 e9       	ldi	r24, 0x90	; 144
    363e:	91 e0       	ldi	r25, 0x01	; 1
    3640:	98 a3       	std	Y+32, r25	; 0x20
    3642:	8f 8f       	std	Y+31, r24	; 0x1f
    3644:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3646:	98 a1       	ldd	r25, Y+32	; 0x20
    3648:	01 97       	sbiw	r24, 0x01	; 1
    364a:	f1 f7       	brne	.-4      	; 0x3648 <LCD_vInit+0x2fa>
    364c:	98 a3       	std	Y+32, r25	; 0x20
    364e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3650:	89 a1       	ldd	r24, Y+33	; 0x21
    3652:	9a a1       	ldd	r25, Y+34	; 0x22
    3654:	01 97       	sbiw	r24, 0x01	; 1
    3656:	9a a3       	std	Y+34, r25	; 0x22
    3658:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    365a:	89 a1       	ldd	r24, Y+33	; 0x21
    365c:	9a a1       	ldd	r25, Y+34	; 0x22
    365e:	00 97       	sbiw	r24, 0x00	; 0
    3660:	69 f7       	brne	.-38     	; 0x363c <LCD_vInit+0x2ee>
    3662:	14 c0       	rjmp	.+40     	; 0x368c <LCD_vInit+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3664:	6b a1       	ldd	r22, Y+35	; 0x23
    3666:	7c a1       	ldd	r23, Y+36	; 0x24
    3668:	8d a1       	ldd	r24, Y+37	; 0x25
    366a:	9e a1       	ldd	r25, Y+38	; 0x26
    366c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3670:	dc 01       	movw	r26, r24
    3672:	cb 01       	movw	r24, r22
    3674:	9a a3       	std	Y+34, r25	; 0x22
    3676:	89 a3       	std	Y+33, r24	; 0x21
    3678:	89 a1       	ldd	r24, Y+33	; 0x21
    367a:	9a a1       	ldd	r25, Y+34	; 0x22
    367c:	9e 8f       	std	Y+30, r25	; 0x1e
    367e:	8d 8f       	std	Y+29, r24	; 0x1d
    3680:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3682:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3684:	01 97       	sbiw	r24, 0x01	; 1
    3686:	f1 f7       	brne	.-4      	; 0x3684 <LCD_vInit+0x336>
    3688:	9e 8f       	std	Y+30, r25	; 0x1e
    368a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	LCD_vSendCommand(DisplayClear);
    368c:	81 e0       	ldi	r24, 0x01	; 1
    368e:	0e 94 7d 18 	call	0x30fa	; 0x30fa <LCD_vSendCommand>
    3692:	80 e0       	ldi	r24, 0x00	; 0
    3694:	90 e0       	ldi	r25, 0x00	; 0
    3696:	a0 e0       	ldi	r26, 0x00	; 0
    3698:	b0 e4       	ldi	r27, 0x40	; 64
    369a:	89 8f       	std	Y+25, r24	; 0x19
    369c:	9a 8f       	std	Y+26, r25	; 0x1a
    369e:	ab 8f       	std	Y+27, r26	; 0x1b
    36a0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36a2:	69 8d       	ldd	r22, Y+25	; 0x19
    36a4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    36a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    36a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    36aa:	20 e0       	ldi	r18, 0x00	; 0
    36ac:	30 e0       	ldi	r19, 0x00	; 0
    36ae:	4a e7       	ldi	r20, 0x7A	; 122
    36b0:	55 e4       	ldi	r21, 0x45	; 69
    36b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36b6:	dc 01       	movw	r26, r24
    36b8:	cb 01       	movw	r24, r22
    36ba:	8d 8b       	std	Y+21, r24	; 0x15
    36bc:	9e 8b       	std	Y+22, r25	; 0x16
    36be:	af 8b       	std	Y+23, r26	; 0x17
    36c0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    36c2:	6d 89       	ldd	r22, Y+21	; 0x15
    36c4:	7e 89       	ldd	r23, Y+22	; 0x16
    36c6:	8f 89       	ldd	r24, Y+23	; 0x17
    36c8:	98 8d       	ldd	r25, Y+24	; 0x18
    36ca:	20 e0       	ldi	r18, 0x00	; 0
    36cc:	30 e0       	ldi	r19, 0x00	; 0
    36ce:	40 e8       	ldi	r20, 0x80	; 128
    36d0:	5f e3       	ldi	r21, 0x3F	; 63
    36d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    36d6:	88 23       	and	r24, r24
    36d8:	2c f4       	brge	.+10     	; 0x36e4 <LCD_vInit+0x396>
		__ticks = 1;
    36da:	81 e0       	ldi	r24, 0x01	; 1
    36dc:	90 e0       	ldi	r25, 0x00	; 0
    36de:	9c 8b       	std	Y+20, r25	; 0x14
    36e0:	8b 8b       	std	Y+19, r24	; 0x13
    36e2:	3f c0       	rjmp	.+126    	; 0x3762 <LCD_vInit+0x414>
	else if (__tmp > 65535)
    36e4:	6d 89       	ldd	r22, Y+21	; 0x15
    36e6:	7e 89       	ldd	r23, Y+22	; 0x16
    36e8:	8f 89       	ldd	r24, Y+23	; 0x17
    36ea:	98 8d       	ldd	r25, Y+24	; 0x18
    36ec:	20 e0       	ldi	r18, 0x00	; 0
    36ee:	3f ef       	ldi	r19, 0xFF	; 255
    36f0:	4f e7       	ldi	r20, 0x7F	; 127
    36f2:	57 e4       	ldi	r21, 0x47	; 71
    36f4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    36f8:	18 16       	cp	r1, r24
    36fa:	4c f5       	brge	.+82     	; 0x374e <LCD_vInit+0x400>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36fc:	69 8d       	ldd	r22, Y+25	; 0x19
    36fe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3700:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3702:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3704:	20 e0       	ldi	r18, 0x00	; 0
    3706:	30 e0       	ldi	r19, 0x00	; 0
    3708:	40 e2       	ldi	r20, 0x20	; 32
    370a:	51 e4       	ldi	r21, 0x41	; 65
    370c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3710:	dc 01       	movw	r26, r24
    3712:	cb 01       	movw	r24, r22
    3714:	bc 01       	movw	r22, r24
    3716:	cd 01       	movw	r24, r26
    3718:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    371c:	dc 01       	movw	r26, r24
    371e:	cb 01       	movw	r24, r22
    3720:	9c 8b       	std	Y+20, r25	; 0x14
    3722:	8b 8b       	std	Y+19, r24	; 0x13
    3724:	0f c0       	rjmp	.+30     	; 0x3744 <LCD_vInit+0x3f6>
    3726:	80 e9       	ldi	r24, 0x90	; 144
    3728:	91 e0       	ldi	r25, 0x01	; 1
    372a:	9a 8b       	std	Y+18, r25	; 0x12
    372c:	89 8b       	std	Y+17, r24	; 0x11
    372e:	89 89       	ldd	r24, Y+17	; 0x11
    3730:	9a 89       	ldd	r25, Y+18	; 0x12
    3732:	01 97       	sbiw	r24, 0x01	; 1
    3734:	f1 f7       	brne	.-4      	; 0x3732 <LCD_vInit+0x3e4>
    3736:	9a 8b       	std	Y+18, r25	; 0x12
    3738:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    373a:	8b 89       	ldd	r24, Y+19	; 0x13
    373c:	9c 89       	ldd	r25, Y+20	; 0x14
    373e:	01 97       	sbiw	r24, 0x01	; 1
    3740:	9c 8b       	std	Y+20, r25	; 0x14
    3742:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3744:	8b 89       	ldd	r24, Y+19	; 0x13
    3746:	9c 89       	ldd	r25, Y+20	; 0x14
    3748:	00 97       	sbiw	r24, 0x00	; 0
    374a:	69 f7       	brne	.-38     	; 0x3726 <LCD_vInit+0x3d8>
    374c:	14 c0       	rjmp	.+40     	; 0x3776 <LCD_vInit+0x428>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    374e:	6d 89       	ldd	r22, Y+21	; 0x15
    3750:	7e 89       	ldd	r23, Y+22	; 0x16
    3752:	8f 89       	ldd	r24, Y+23	; 0x17
    3754:	98 8d       	ldd	r25, Y+24	; 0x18
    3756:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    375a:	dc 01       	movw	r26, r24
    375c:	cb 01       	movw	r24, r22
    375e:	9c 8b       	std	Y+20, r25	; 0x14
    3760:	8b 8b       	std	Y+19, r24	; 0x13
    3762:	8b 89       	ldd	r24, Y+19	; 0x13
    3764:	9c 89       	ldd	r25, Y+20	; 0x14
    3766:	98 8b       	std	Y+16, r25	; 0x10
    3768:	8f 87       	std	Y+15, r24	; 0x0f
    376a:	8f 85       	ldd	r24, Y+15	; 0x0f
    376c:	98 89       	ldd	r25, Y+16	; 0x10
    376e:	01 97       	sbiw	r24, 0x01	; 1
    3770:	f1 f7       	brne	.-4      	; 0x376e <LCD_vInit+0x420>
    3772:	98 8b       	std	Y+16, r25	; 0x10
    3774:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	LCD_vSendCommand(EnrtyMode);
    3776:	86 e0       	ldi	r24, 0x06	; 6
    3778:	0e 94 7d 18 	call	0x30fa	; 0x30fa <LCD_vSendCommand>
    377c:	80 e0       	ldi	r24, 0x00	; 0
    377e:	90 e0       	ldi	r25, 0x00	; 0
    3780:	a0 e0       	ldi	r26, 0x00	; 0
    3782:	b0 e4       	ldi	r27, 0x40	; 64
    3784:	8b 87       	std	Y+11, r24	; 0x0b
    3786:	9c 87       	std	Y+12, r25	; 0x0c
    3788:	ad 87       	std	Y+13, r26	; 0x0d
    378a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    378c:	6b 85       	ldd	r22, Y+11	; 0x0b
    378e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3790:	8d 85       	ldd	r24, Y+13	; 0x0d
    3792:	9e 85       	ldd	r25, Y+14	; 0x0e
    3794:	20 e0       	ldi	r18, 0x00	; 0
    3796:	30 e0       	ldi	r19, 0x00	; 0
    3798:	4a e7       	ldi	r20, 0x7A	; 122
    379a:	55 e4       	ldi	r21, 0x45	; 69
    379c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37a0:	dc 01       	movw	r26, r24
    37a2:	cb 01       	movw	r24, r22
    37a4:	8f 83       	std	Y+7, r24	; 0x07
    37a6:	98 87       	std	Y+8, r25	; 0x08
    37a8:	a9 87       	std	Y+9, r26	; 0x09
    37aa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    37ac:	6f 81       	ldd	r22, Y+7	; 0x07
    37ae:	78 85       	ldd	r23, Y+8	; 0x08
    37b0:	89 85       	ldd	r24, Y+9	; 0x09
    37b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    37b4:	20 e0       	ldi	r18, 0x00	; 0
    37b6:	30 e0       	ldi	r19, 0x00	; 0
    37b8:	40 e8       	ldi	r20, 0x80	; 128
    37ba:	5f e3       	ldi	r21, 0x3F	; 63
    37bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    37c0:	88 23       	and	r24, r24
    37c2:	2c f4       	brge	.+10     	; 0x37ce <LCD_vInit+0x480>
		__ticks = 1;
    37c4:	81 e0       	ldi	r24, 0x01	; 1
    37c6:	90 e0       	ldi	r25, 0x00	; 0
    37c8:	9e 83       	std	Y+6, r25	; 0x06
    37ca:	8d 83       	std	Y+5, r24	; 0x05
    37cc:	3f c0       	rjmp	.+126    	; 0x384c <LCD_vInit+0x4fe>
	else if (__tmp > 65535)
    37ce:	6f 81       	ldd	r22, Y+7	; 0x07
    37d0:	78 85       	ldd	r23, Y+8	; 0x08
    37d2:	89 85       	ldd	r24, Y+9	; 0x09
    37d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    37d6:	20 e0       	ldi	r18, 0x00	; 0
    37d8:	3f ef       	ldi	r19, 0xFF	; 255
    37da:	4f e7       	ldi	r20, 0x7F	; 127
    37dc:	57 e4       	ldi	r21, 0x47	; 71
    37de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    37e2:	18 16       	cp	r1, r24
    37e4:	4c f5       	brge	.+82     	; 0x3838 <LCD_vInit+0x4ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    37e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    37ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    37ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    37ee:	20 e0       	ldi	r18, 0x00	; 0
    37f0:	30 e0       	ldi	r19, 0x00	; 0
    37f2:	40 e2       	ldi	r20, 0x20	; 32
    37f4:	51 e4       	ldi	r21, 0x41	; 65
    37f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37fa:	dc 01       	movw	r26, r24
    37fc:	cb 01       	movw	r24, r22
    37fe:	bc 01       	movw	r22, r24
    3800:	cd 01       	movw	r24, r26
    3802:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3806:	dc 01       	movw	r26, r24
    3808:	cb 01       	movw	r24, r22
    380a:	9e 83       	std	Y+6, r25	; 0x06
    380c:	8d 83       	std	Y+5, r24	; 0x05
    380e:	0f c0       	rjmp	.+30     	; 0x382e <LCD_vInit+0x4e0>
    3810:	80 e9       	ldi	r24, 0x90	; 144
    3812:	91 e0       	ldi	r25, 0x01	; 1
    3814:	9c 83       	std	Y+4, r25	; 0x04
    3816:	8b 83       	std	Y+3, r24	; 0x03
    3818:	8b 81       	ldd	r24, Y+3	; 0x03
    381a:	9c 81       	ldd	r25, Y+4	; 0x04
    381c:	01 97       	sbiw	r24, 0x01	; 1
    381e:	f1 f7       	brne	.-4      	; 0x381c <LCD_vInit+0x4ce>
    3820:	9c 83       	std	Y+4, r25	; 0x04
    3822:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3824:	8d 81       	ldd	r24, Y+5	; 0x05
    3826:	9e 81       	ldd	r25, Y+6	; 0x06
    3828:	01 97       	sbiw	r24, 0x01	; 1
    382a:	9e 83       	std	Y+6, r25	; 0x06
    382c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    382e:	8d 81       	ldd	r24, Y+5	; 0x05
    3830:	9e 81       	ldd	r25, Y+6	; 0x06
    3832:	00 97       	sbiw	r24, 0x00	; 0
    3834:	69 f7       	brne	.-38     	; 0x3810 <LCD_vInit+0x4c2>
    3836:	14 c0       	rjmp	.+40     	; 0x3860 <LCD_vInit+0x512>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3838:	6f 81       	ldd	r22, Y+7	; 0x07
    383a:	78 85       	ldd	r23, Y+8	; 0x08
    383c:	89 85       	ldd	r24, Y+9	; 0x09
    383e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3840:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3844:	dc 01       	movw	r26, r24
    3846:	cb 01       	movw	r24, r22
    3848:	9e 83       	std	Y+6, r25	; 0x06
    384a:	8d 83       	std	Y+5, r24	; 0x05
    384c:	8d 81       	ldd	r24, Y+5	; 0x05
    384e:	9e 81       	ldd	r25, Y+6	; 0x06
    3850:	9a 83       	std	Y+2, r25	; 0x02
    3852:	89 83       	std	Y+1, r24	; 0x01
    3854:	89 81       	ldd	r24, Y+1	; 0x01
    3856:	9a 81       	ldd	r25, Y+2	; 0x02
    3858:	01 97       	sbiw	r24, 0x01	; 1
    385a:	f1 f7       	brne	.-4      	; 0x3858 <LCD_vInit+0x50a>
    385c:	9a 83       	std	Y+2, r25	; 0x02
    385e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

}
    3860:	ca 5b       	subi	r28, 0xBA	; 186
    3862:	df 4f       	sbci	r29, 0xFF	; 255
    3864:	0f b6       	in	r0, 0x3f	; 63
    3866:	f8 94       	cli
    3868:	de bf       	out	0x3e, r29	; 62
    386a:	0f be       	out	0x3f, r0	; 63
    386c:	cd bf       	out	0x3d, r28	; 61
    386e:	cf 91       	pop	r28
    3870:	df 91       	pop	r29
    3872:	1f 91       	pop	r17
    3874:	0f 91       	pop	r16
    3876:	08 95       	ret

00003878 <LCD_vInitWithOutClear>:
void LCD_vInitWithOutClear(){
    3878:	df 93       	push	r29
    387a:	cf 93       	push	r28
    387c:	cd b7       	in	r28, 0x3d	; 61
    387e:	de b7       	in	r29, 0x3e	; 62
    3880:	e8 97       	sbiw	r28, 0x38	; 56
    3882:	0f b6       	in	r0, 0x3f	; 63
    3884:	f8 94       	cli
    3886:	de bf       	out	0x3e, r29	; 62
    3888:	0f be       	out	0x3f, r0	; 63
    388a:	cd bf       	out	0x3d, r28	; 61
	DIO_vSetPinDirection(PortB, Pin1, Pin_OutPut);
    388c:	81 e0       	ldi	r24, 0x01	; 1
    388e:	61 e0       	ldi	r22, 0x01	; 1
    3890:	41 e0       	ldi	r20, 0x01	; 1
    3892:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PortB, Pin3, Pin_OutPut);
    3896:	81 e0       	ldi	r24, 0x01	; 1
    3898:	63 e0       	ldi	r22, 0x03	; 3
    389a:	41 e0       	ldi	r20, 0x01	; 1
    389c:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PortB, Pin2, Pin_OutPut);
    38a0:	81 e0       	ldi	r24, 0x01	; 1
    38a2:	62 e0       	ldi	r22, 0x02	; 2
    38a4:	41 e0       	ldi	r20, 0x01	; 1
    38a6:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PortA, Pin4, Pin_OutPut);
    38aa:	80 e0       	ldi	r24, 0x00	; 0
    38ac:	64 e0       	ldi	r22, 0x04	; 4
    38ae:	41 e0       	ldi	r20, 0x01	; 1
    38b0:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PortA, Pin5, Pin_OutPut);
    38b4:	80 e0       	ldi	r24, 0x00	; 0
    38b6:	65 e0       	ldi	r22, 0x05	; 5
    38b8:	41 e0       	ldi	r20, 0x01	; 1
    38ba:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PortA, Pin6, Pin_OutPut);
    38be:	80 e0       	ldi	r24, 0x00	; 0
    38c0:	66 e0       	ldi	r22, 0x06	; 6
    38c2:	41 e0       	ldi	r20, 0x01	; 1
    38c4:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PortA, Pin7, Pin_OutPut);
    38c8:	80 e0       	ldi	r24, 0x00	; 0
    38ca:	67 e0       	ldi	r22, 0x07	; 7
    38cc:	41 e0       	ldi	r20, 0x01	; 1
    38ce:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <DIO_vSetPinDirection>
    38d2:	80 e0       	ldi	r24, 0x00	; 0
    38d4:	90 e0       	ldi	r25, 0x00	; 0
    38d6:	a8 e4       	ldi	r26, 0x48	; 72
    38d8:	b2 e4       	ldi	r27, 0x42	; 66
    38da:	8d ab       	std	Y+53, r24	; 0x35
    38dc:	9e ab       	std	Y+54, r25	; 0x36
    38de:	af ab       	std	Y+55, r26	; 0x37
    38e0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38e2:	6d a9       	ldd	r22, Y+53	; 0x35
    38e4:	7e a9       	ldd	r23, Y+54	; 0x36
    38e6:	8f a9       	ldd	r24, Y+55	; 0x37
    38e8:	98 ad       	ldd	r25, Y+56	; 0x38
    38ea:	20 e0       	ldi	r18, 0x00	; 0
    38ec:	30 e0       	ldi	r19, 0x00	; 0
    38ee:	4a e7       	ldi	r20, 0x7A	; 122
    38f0:	55 e4       	ldi	r21, 0x45	; 69
    38f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38f6:	dc 01       	movw	r26, r24
    38f8:	cb 01       	movw	r24, r22
    38fa:	89 ab       	std	Y+49, r24	; 0x31
    38fc:	9a ab       	std	Y+50, r25	; 0x32
    38fe:	ab ab       	std	Y+51, r26	; 0x33
    3900:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3902:	69 a9       	ldd	r22, Y+49	; 0x31
    3904:	7a a9       	ldd	r23, Y+50	; 0x32
    3906:	8b a9       	ldd	r24, Y+51	; 0x33
    3908:	9c a9       	ldd	r25, Y+52	; 0x34
    390a:	20 e0       	ldi	r18, 0x00	; 0
    390c:	30 e0       	ldi	r19, 0x00	; 0
    390e:	40 e8       	ldi	r20, 0x80	; 128
    3910:	5f e3       	ldi	r21, 0x3F	; 63
    3912:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3916:	88 23       	and	r24, r24
    3918:	2c f4       	brge	.+10     	; 0x3924 <LCD_vInitWithOutClear+0xac>
		__ticks = 1;
    391a:	81 e0       	ldi	r24, 0x01	; 1
    391c:	90 e0       	ldi	r25, 0x00	; 0
    391e:	98 ab       	std	Y+48, r25	; 0x30
    3920:	8f a7       	std	Y+47, r24	; 0x2f
    3922:	3f c0       	rjmp	.+126    	; 0x39a2 <LCD_vInitWithOutClear+0x12a>
	else if (__tmp > 65535)
    3924:	69 a9       	ldd	r22, Y+49	; 0x31
    3926:	7a a9       	ldd	r23, Y+50	; 0x32
    3928:	8b a9       	ldd	r24, Y+51	; 0x33
    392a:	9c a9       	ldd	r25, Y+52	; 0x34
    392c:	20 e0       	ldi	r18, 0x00	; 0
    392e:	3f ef       	ldi	r19, 0xFF	; 255
    3930:	4f e7       	ldi	r20, 0x7F	; 127
    3932:	57 e4       	ldi	r21, 0x47	; 71
    3934:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3938:	18 16       	cp	r1, r24
    393a:	4c f5       	brge	.+82     	; 0x398e <LCD_vInitWithOutClear+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    393c:	6d a9       	ldd	r22, Y+53	; 0x35
    393e:	7e a9       	ldd	r23, Y+54	; 0x36
    3940:	8f a9       	ldd	r24, Y+55	; 0x37
    3942:	98 ad       	ldd	r25, Y+56	; 0x38
    3944:	20 e0       	ldi	r18, 0x00	; 0
    3946:	30 e0       	ldi	r19, 0x00	; 0
    3948:	40 e2       	ldi	r20, 0x20	; 32
    394a:	51 e4       	ldi	r21, 0x41	; 65
    394c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3950:	dc 01       	movw	r26, r24
    3952:	cb 01       	movw	r24, r22
    3954:	bc 01       	movw	r22, r24
    3956:	cd 01       	movw	r24, r26
    3958:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    395c:	dc 01       	movw	r26, r24
    395e:	cb 01       	movw	r24, r22
    3960:	98 ab       	std	Y+48, r25	; 0x30
    3962:	8f a7       	std	Y+47, r24	; 0x2f
    3964:	0f c0       	rjmp	.+30     	; 0x3984 <LCD_vInitWithOutClear+0x10c>
    3966:	80 e9       	ldi	r24, 0x90	; 144
    3968:	91 e0       	ldi	r25, 0x01	; 1
    396a:	9e a7       	std	Y+46, r25	; 0x2e
    396c:	8d a7       	std	Y+45, r24	; 0x2d
    396e:	8d a5       	ldd	r24, Y+45	; 0x2d
    3970:	9e a5       	ldd	r25, Y+46	; 0x2e
    3972:	01 97       	sbiw	r24, 0x01	; 1
    3974:	f1 f7       	brne	.-4      	; 0x3972 <LCD_vInitWithOutClear+0xfa>
    3976:	9e a7       	std	Y+46, r25	; 0x2e
    3978:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    397a:	8f a5       	ldd	r24, Y+47	; 0x2f
    397c:	98 a9       	ldd	r25, Y+48	; 0x30
    397e:	01 97       	sbiw	r24, 0x01	; 1
    3980:	98 ab       	std	Y+48, r25	; 0x30
    3982:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3984:	8f a5       	ldd	r24, Y+47	; 0x2f
    3986:	98 a9       	ldd	r25, Y+48	; 0x30
    3988:	00 97       	sbiw	r24, 0x00	; 0
    398a:	69 f7       	brne	.-38     	; 0x3966 <LCD_vInitWithOutClear+0xee>
    398c:	14 c0       	rjmp	.+40     	; 0x39b6 <LCD_vInitWithOutClear+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    398e:	69 a9       	ldd	r22, Y+49	; 0x31
    3990:	7a a9       	ldd	r23, Y+50	; 0x32
    3992:	8b a9       	ldd	r24, Y+51	; 0x33
    3994:	9c a9       	ldd	r25, Y+52	; 0x34
    3996:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    399a:	dc 01       	movw	r26, r24
    399c:	cb 01       	movw	r24, r22
    399e:	98 ab       	std	Y+48, r25	; 0x30
    39a0:	8f a7       	std	Y+47, r24	; 0x2f
    39a2:	8f a5       	ldd	r24, Y+47	; 0x2f
    39a4:	98 a9       	ldd	r25, Y+48	; 0x30
    39a6:	9c a7       	std	Y+44, r25	; 0x2c
    39a8:	8b a7       	std	Y+43, r24	; 0x2b
    39aa:	8b a5       	ldd	r24, Y+43	; 0x2b
    39ac:	9c a5       	ldd	r25, Y+44	; 0x2c
    39ae:	01 97       	sbiw	r24, 0x01	; 1
    39b0:	f1 f7       	brne	.-4      	; 0x39ae <LCD_vInitWithOutClear+0x136>
    39b2:	9c a7       	std	Y+44, r25	; 0x2c
    39b4:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(50);
	LCD_vSendCommand(FunctionSet);
    39b6:	88 e2       	ldi	r24, 0x28	; 40
    39b8:	0e 94 7d 18 	call	0x30fa	; 0x30fa <LCD_vSendCommand>
    39bc:	80 e0       	ldi	r24, 0x00	; 0
    39be:	90 e0       	ldi	r25, 0x00	; 0
    39c0:	a0 e0       	ldi	r26, 0x00	; 0
    39c2:	b0 e4       	ldi	r27, 0x40	; 64
    39c4:	8f a3       	std	Y+39, r24	; 0x27
    39c6:	98 a7       	std	Y+40, r25	; 0x28
    39c8:	a9 a7       	std	Y+41, r26	; 0x29
    39ca:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39cc:	6f a1       	ldd	r22, Y+39	; 0x27
    39ce:	78 a5       	ldd	r23, Y+40	; 0x28
    39d0:	89 a5       	ldd	r24, Y+41	; 0x29
    39d2:	9a a5       	ldd	r25, Y+42	; 0x2a
    39d4:	20 e0       	ldi	r18, 0x00	; 0
    39d6:	30 e0       	ldi	r19, 0x00	; 0
    39d8:	4a e7       	ldi	r20, 0x7A	; 122
    39da:	55 e4       	ldi	r21, 0x45	; 69
    39dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39e0:	dc 01       	movw	r26, r24
    39e2:	cb 01       	movw	r24, r22
    39e4:	8b a3       	std	Y+35, r24	; 0x23
    39e6:	9c a3       	std	Y+36, r25	; 0x24
    39e8:	ad a3       	std	Y+37, r26	; 0x25
    39ea:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    39ec:	6b a1       	ldd	r22, Y+35	; 0x23
    39ee:	7c a1       	ldd	r23, Y+36	; 0x24
    39f0:	8d a1       	ldd	r24, Y+37	; 0x25
    39f2:	9e a1       	ldd	r25, Y+38	; 0x26
    39f4:	20 e0       	ldi	r18, 0x00	; 0
    39f6:	30 e0       	ldi	r19, 0x00	; 0
    39f8:	40 e8       	ldi	r20, 0x80	; 128
    39fa:	5f e3       	ldi	r21, 0x3F	; 63
    39fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a00:	88 23       	and	r24, r24
    3a02:	2c f4       	brge	.+10     	; 0x3a0e <LCD_vInitWithOutClear+0x196>
		__ticks = 1;
    3a04:	81 e0       	ldi	r24, 0x01	; 1
    3a06:	90 e0       	ldi	r25, 0x00	; 0
    3a08:	9a a3       	std	Y+34, r25	; 0x22
    3a0a:	89 a3       	std	Y+33, r24	; 0x21
    3a0c:	3f c0       	rjmp	.+126    	; 0x3a8c <LCD_vInitWithOutClear+0x214>
	else if (__tmp > 65535)
    3a0e:	6b a1       	ldd	r22, Y+35	; 0x23
    3a10:	7c a1       	ldd	r23, Y+36	; 0x24
    3a12:	8d a1       	ldd	r24, Y+37	; 0x25
    3a14:	9e a1       	ldd	r25, Y+38	; 0x26
    3a16:	20 e0       	ldi	r18, 0x00	; 0
    3a18:	3f ef       	ldi	r19, 0xFF	; 255
    3a1a:	4f e7       	ldi	r20, 0x7F	; 127
    3a1c:	57 e4       	ldi	r21, 0x47	; 71
    3a1e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a22:	18 16       	cp	r1, r24
    3a24:	4c f5       	brge	.+82     	; 0x3a78 <LCD_vInitWithOutClear+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a26:	6f a1       	ldd	r22, Y+39	; 0x27
    3a28:	78 a5       	ldd	r23, Y+40	; 0x28
    3a2a:	89 a5       	ldd	r24, Y+41	; 0x29
    3a2c:	9a a5       	ldd	r25, Y+42	; 0x2a
    3a2e:	20 e0       	ldi	r18, 0x00	; 0
    3a30:	30 e0       	ldi	r19, 0x00	; 0
    3a32:	40 e2       	ldi	r20, 0x20	; 32
    3a34:	51 e4       	ldi	r21, 0x41	; 65
    3a36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a3a:	dc 01       	movw	r26, r24
    3a3c:	cb 01       	movw	r24, r22
    3a3e:	bc 01       	movw	r22, r24
    3a40:	cd 01       	movw	r24, r26
    3a42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a46:	dc 01       	movw	r26, r24
    3a48:	cb 01       	movw	r24, r22
    3a4a:	9a a3       	std	Y+34, r25	; 0x22
    3a4c:	89 a3       	std	Y+33, r24	; 0x21
    3a4e:	0f c0       	rjmp	.+30     	; 0x3a6e <LCD_vInitWithOutClear+0x1f6>
    3a50:	80 e9       	ldi	r24, 0x90	; 144
    3a52:	91 e0       	ldi	r25, 0x01	; 1
    3a54:	98 a3       	std	Y+32, r25	; 0x20
    3a56:	8f 8f       	std	Y+31, r24	; 0x1f
    3a58:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3a5a:	98 a1       	ldd	r25, Y+32	; 0x20
    3a5c:	01 97       	sbiw	r24, 0x01	; 1
    3a5e:	f1 f7       	brne	.-4      	; 0x3a5c <LCD_vInitWithOutClear+0x1e4>
    3a60:	98 a3       	std	Y+32, r25	; 0x20
    3a62:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a64:	89 a1       	ldd	r24, Y+33	; 0x21
    3a66:	9a a1       	ldd	r25, Y+34	; 0x22
    3a68:	01 97       	sbiw	r24, 0x01	; 1
    3a6a:	9a a3       	std	Y+34, r25	; 0x22
    3a6c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a6e:	89 a1       	ldd	r24, Y+33	; 0x21
    3a70:	9a a1       	ldd	r25, Y+34	; 0x22
    3a72:	00 97       	sbiw	r24, 0x00	; 0
    3a74:	69 f7       	brne	.-38     	; 0x3a50 <LCD_vInitWithOutClear+0x1d8>
    3a76:	14 c0       	rjmp	.+40     	; 0x3aa0 <LCD_vInitWithOutClear+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a78:	6b a1       	ldd	r22, Y+35	; 0x23
    3a7a:	7c a1       	ldd	r23, Y+36	; 0x24
    3a7c:	8d a1       	ldd	r24, Y+37	; 0x25
    3a7e:	9e a1       	ldd	r25, Y+38	; 0x26
    3a80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a84:	dc 01       	movw	r26, r24
    3a86:	cb 01       	movw	r24, r22
    3a88:	9a a3       	std	Y+34, r25	; 0x22
    3a8a:	89 a3       	std	Y+33, r24	; 0x21
    3a8c:	89 a1       	ldd	r24, Y+33	; 0x21
    3a8e:	9a a1       	ldd	r25, Y+34	; 0x22
    3a90:	9e 8f       	std	Y+30, r25	; 0x1e
    3a92:	8d 8f       	std	Y+29, r24	; 0x1d
    3a94:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a96:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3a98:	01 97       	sbiw	r24, 0x01	; 1
    3a9a:	f1 f7       	brne	.-4      	; 0x3a98 <LCD_vInitWithOutClear+0x220>
    3a9c:	9e 8f       	std	Y+30, r25	; 0x1e
    3a9e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	LCD_vSendCommand(DisplayOnControl);
    3aa0:	8e e0       	ldi	r24, 0x0E	; 14
    3aa2:	0e 94 7d 18 	call	0x30fa	; 0x30fa <LCD_vSendCommand>
    3aa6:	80 e0       	ldi	r24, 0x00	; 0
    3aa8:	90 e0       	ldi	r25, 0x00	; 0
    3aaa:	a0 e0       	ldi	r26, 0x00	; 0
    3aac:	b0 e4       	ldi	r27, 0x40	; 64
    3aae:	89 8f       	std	Y+25, r24	; 0x19
    3ab0:	9a 8f       	std	Y+26, r25	; 0x1a
    3ab2:	ab 8f       	std	Y+27, r26	; 0x1b
    3ab4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ab6:	69 8d       	ldd	r22, Y+25	; 0x19
    3ab8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3aba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3abc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3abe:	20 e0       	ldi	r18, 0x00	; 0
    3ac0:	30 e0       	ldi	r19, 0x00	; 0
    3ac2:	4a e7       	ldi	r20, 0x7A	; 122
    3ac4:	55 e4       	ldi	r21, 0x45	; 69
    3ac6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3aca:	dc 01       	movw	r26, r24
    3acc:	cb 01       	movw	r24, r22
    3ace:	8d 8b       	std	Y+21, r24	; 0x15
    3ad0:	9e 8b       	std	Y+22, r25	; 0x16
    3ad2:	af 8b       	std	Y+23, r26	; 0x17
    3ad4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3ad6:	6d 89       	ldd	r22, Y+21	; 0x15
    3ad8:	7e 89       	ldd	r23, Y+22	; 0x16
    3ada:	8f 89       	ldd	r24, Y+23	; 0x17
    3adc:	98 8d       	ldd	r25, Y+24	; 0x18
    3ade:	20 e0       	ldi	r18, 0x00	; 0
    3ae0:	30 e0       	ldi	r19, 0x00	; 0
    3ae2:	40 e8       	ldi	r20, 0x80	; 128
    3ae4:	5f e3       	ldi	r21, 0x3F	; 63
    3ae6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3aea:	88 23       	and	r24, r24
    3aec:	2c f4       	brge	.+10     	; 0x3af8 <LCD_vInitWithOutClear+0x280>
		__ticks = 1;
    3aee:	81 e0       	ldi	r24, 0x01	; 1
    3af0:	90 e0       	ldi	r25, 0x00	; 0
    3af2:	9c 8b       	std	Y+20, r25	; 0x14
    3af4:	8b 8b       	std	Y+19, r24	; 0x13
    3af6:	3f c0       	rjmp	.+126    	; 0x3b76 <LCD_vInitWithOutClear+0x2fe>
	else if (__tmp > 65535)
    3af8:	6d 89       	ldd	r22, Y+21	; 0x15
    3afa:	7e 89       	ldd	r23, Y+22	; 0x16
    3afc:	8f 89       	ldd	r24, Y+23	; 0x17
    3afe:	98 8d       	ldd	r25, Y+24	; 0x18
    3b00:	20 e0       	ldi	r18, 0x00	; 0
    3b02:	3f ef       	ldi	r19, 0xFF	; 255
    3b04:	4f e7       	ldi	r20, 0x7F	; 127
    3b06:	57 e4       	ldi	r21, 0x47	; 71
    3b08:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3b0c:	18 16       	cp	r1, r24
    3b0e:	4c f5       	brge	.+82     	; 0x3b62 <LCD_vInitWithOutClear+0x2ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b10:	69 8d       	ldd	r22, Y+25	; 0x19
    3b12:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b14:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b16:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b18:	20 e0       	ldi	r18, 0x00	; 0
    3b1a:	30 e0       	ldi	r19, 0x00	; 0
    3b1c:	40 e2       	ldi	r20, 0x20	; 32
    3b1e:	51 e4       	ldi	r21, 0x41	; 65
    3b20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b24:	dc 01       	movw	r26, r24
    3b26:	cb 01       	movw	r24, r22
    3b28:	bc 01       	movw	r22, r24
    3b2a:	cd 01       	movw	r24, r26
    3b2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b30:	dc 01       	movw	r26, r24
    3b32:	cb 01       	movw	r24, r22
    3b34:	9c 8b       	std	Y+20, r25	; 0x14
    3b36:	8b 8b       	std	Y+19, r24	; 0x13
    3b38:	0f c0       	rjmp	.+30     	; 0x3b58 <LCD_vInitWithOutClear+0x2e0>
    3b3a:	80 e9       	ldi	r24, 0x90	; 144
    3b3c:	91 e0       	ldi	r25, 0x01	; 1
    3b3e:	9a 8b       	std	Y+18, r25	; 0x12
    3b40:	89 8b       	std	Y+17, r24	; 0x11
    3b42:	89 89       	ldd	r24, Y+17	; 0x11
    3b44:	9a 89       	ldd	r25, Y+18	; 0x12
    3b46:	01 97       	sbiw	r24, 0x01	; 1
    3b48:	f1 f7       	brne	.-4      	; 0x3b46 <LCD_vInitWithOutClear+0x2ce>
    3b4a:	9a 8b       	std	Y+18, r25	; 0x12
    3b4c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b4e:	8b 89       	ldd	r24, Y+19	; 0x13
    3b50:	9c 89       	ldd	r25, Y+20	; 0x14
    3b52:	01 97       	sbiw	r24, 0x01	; 1
    3b54:	9c 8b       	std	Y+20, r25	; 0x14
    3b56:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b58:	8b 89       	ldd	r24, Y+19	; 0x13
    3b5a:	9c 89       	ldd	r25, Y+20	; 0x14
    3b5c:	00 97       	sbiw	r24, 0x00	; 0
    3b5e:	69 f7       	brne	.-38     	; 0x3b3a <LCD_vInitWithOutClear+0x2c2>
    3b60:	14 c0       	rjmp	.+40     	; 0x3b8a <LCD_vInitWithOutClear+0x312>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b62:	6d 89       	ldd	r22, Y+21	; 0x15
    3b64:	7e 89       	ldd	r23, Y+22	; 0x16
    3b66:	8f 89       	ldd	r24, Y+23	; 0x17
    3b68:	98 8d       	ldd	r25, Y+24	; 0x18
    3b6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b6e:	dc 01       	movw	r26, r24
    3b70:	cb 01       	movw	r24, r22
    3b72:	9c 8b       	std	Y+20, r25	; 0x14
    3b74:	8b 8b       	std	Y+19, r24	; 0x13
    3b76:	8b 89       	ldd	r24, Y+19	; 0x13
    3b78:	9c 89       	ldd	r25, Y+20	; 0x14
    3b7a:	98 8b       	std	Y+16, r25	; 0x10
    3b7c:	8f 87       	std	Y+15, r24	; 0x0f
    3b7e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b80:	98 89       	ldd	r25, Y+16	; 0x10
    3b82:	01 97       	sbiw	r24, 0x01	; 1
    3b84:	f1 f7       	brne	.-4      	; 0x3b82 <LCD_vInitWithOutClear+0x30a>
    3b86:	98 8b       	std	Y+16, r25	; 0x10
    3b88:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	LCD_vSendCommand(EnrtyMode);
    3b8a:	86 e0       	ldi	r24, 0x06	; 6
    3b8c:	0e 94 7d 18 	call	0x30fa	; 0x30fa <LCD_vSendCommand>
    3b90:	80 e0       	ldi	r24, 0x00	; 0
    3b92:	90 e0       	ldi	r25, 0x00	; 0
    3b94:	a0 e0       	ldi	r26, 0x00	; 0
    3b96:	b0 e4       	ldi	r27, 0x40	; 64
    3b98:	8b 87       	std	Y+11, r24	; 0x0b
    3b9a:	9c 87       	std	Y+12, r25	; 0x0c
    3b9c:	ad 87       	std	Y+13, r26	; 0x0d
    3b9e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ba0:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ba2:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ba4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ba6:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ba8:	20 e0       	ldi	r18, 0x00	; 0
    3baa:	30 e0       	ldi	r19, 0x00	; 0
    3bac:	4a e7       	ldi	r20, 0x7A	; 122
    3bae:	55 e4       	ldi	r21, 0x45	; 69
    3bb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bb4:	dc 01       	movw	r26, r24
    3bb6:	cb 01       	movw	r24, r22
    3bb8:	8f 83       	std	Y+7, r24	; 0x07
    3bba:	98 87       	std	Y+8, r25	; 0x08
    3bbc:	a9 87       	std	Y+9, r26	; 0x09
    3bbe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3bc0:	6f 81       	ldd	r22, Y+7	; 0x07
    3bc2:	78 85       	ldd	r23, Y+8	; 0x08
    3bc4:	89 85       	ldd	r24, Y+9	; 0x09
    3bc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bc8:	20 e0       	ldi	r18, 0x00	; 0
    3bca:	30 e0       	ldi	r19, 0x00	; 0
    3bcc:	40 e8       	ldi	r20, 0x80	; 128
    3bce:	5f e3       	ldi	r21, 0x3F	; 63
    3bd0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3bd4:	88 23       	and	r24, r24
    3bd6:	2c f4       	brge	.+10     	; 0x3be2 <LCD_vInitWithOutClear+0x36a>
		__ticks = 1;
    3bd8:	81 e0       	ldi	r24, 0x01	; 1
    3bda:	90 e0       	ldi	r25, 0x00	; 0
    3bdc:	9e 83       	std	Y+6, r25	; 0x06
    3bde:	8d 83       	std	Y+5, r24	; 0x05
    3be0:	3f c0       	rjmp	.+126    	; 0x3c60 <LCD_vInitWithOutClear+0x3e8>
	else if (__tmp > 65535)
    3be2:	6f 81       	ldd	r22, Y+7	; 0x07
    3be4:	78 85       	ldd	r23, Y+8	; 0x08
    3be6:	89 85       	ldd	r24, Y+9	; 0x09
    3be8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bea:	20 e0       	ldi	r18, 0x00	; 0
    3bec:	3f ef       	ldi	r19, 0xFF	; 255
    3bee:	4f e7       	ldi	r20, 0x7F	; 127
    3bf0:	57 e4       	ldi	r21, 0x47	; 71
    3bf2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3bf6:	18 16       	cp	r1, r24
    3bf8:	4c f5       	brge	.+82     	; 0x3c4c <LCD_vInitWithOutClear+0x3d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bfa:	6b 85       	ldd	r22, Y+11	; 0x0b
    3bfc:	7c 85       	ldd	r23, Y+12	; 0x0c
    3bfe:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c00:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c02:	20 e0       	ldi	r18, 0x00	; 0
    3c04:	30 e0       	ldi	r19, 0x00	; 0
    3c06:	40 e2       	ldi	r20, 0x20	; 32
    3c08:	51 e4       	ldi	r21, 0x41	; 65
    3c0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c0e:	dc 01       	movw	r26, r24
    3c10:	cb 01       	movw	r24, r22
    3c12:	bc 01       	movw	r22, r24
    3c14:	cd 01       	movw	r24, r26
    3c16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c1a:	dc 01       	movw	r26, r24
    3c1c:	cb 01       	movw	r24, r22
    3c1e:	9e 83       	std	Y+6, r25	; 0x06
    3c20:	8d 83       	std	Y+5, r24	; 0x05
    3c22:	0f c0       	rjmp	.+30     	; 0x3c42 <LCD_vInitWithOutClear+0x3ca>
    3c24:	80 e9       	ldi	r24, 0x90	; 144
    3c26:	91 e0       	ldi	r25, 0x01	; 1
    3c28:	9c 83       	std	Y+4, r25	; 0x04
    3c2a:	8b 83       	std	Y+3, r24	; 0x03
    3c2c:	8b 81       	ldd	r24, Y+3	; 0x03
    3c2e:	9c 81       	ldd	r25, Y+4	; 0x04
    3c30:	01 97       	sbiw	r24, 0x01	; 1
    3c32:	f1 f7       	brne	.-4      	; 0x3c30 <LCD_vInitWithOutClear+0x3b8>
    3c34:	9c 83       	std	Y+4, r25	; 0x04
    3c36:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c38:	8d 81       	ldd	r24, Y+5	; 0x05
    3c3a:	9e 81       	ldd	r25, Y+6	; 0x06
    3c3c:	01 97       	sbiw	r24, 0x01	; 1
    3c3e:	9e 83       	std	Y+6, r25	; 0x06
    3c40:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c42:	8d 81       	ldd	r24, Y+5	; 0x05
    3c44:	9e 81       	ldd	r25, Y+6	; 0x06
    3c46:	00 97       	sbiw	r24, 0x00	; 0
    3c48:	69 f7       	brne	.-38     	; 0x3c24 <LCD_vInitWithOutClear+0x3ac>
    3c4a:	14 c0       	rjmp	.+40     	; 0x3c74 <LCD_vInitWithOutClear+0x3fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c4c:	6f 81       	ldd	r22, Y+7	; 0x07
    3c4e:	78 85       	ldd	r23, Y+8	; 0x08
    3c50:	89 85       	ldd	r24, Y+9	; 0x09
    3c52:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c58:	dc 01       	movw	r26, r24
    3c5a:	cb 01       	movw	r24, r22
    3c5c:	9e 83       	std	Y+6, r25	; 0x06
    3c5e:	8d 83       	std	Y+5, r24	; 0x05
    3c60:	8d 81       	ldd	r24, Y+5	; 0x05
    3c62:	9e 81       	ldd	r25, Y+6	; 0x06
    3c64:	9a 83       	std	Y+2, r25	; 0x02
    3c66:	89 83       	std	Y+1, r24	; 0x01
    3c68:	89 81       	ldd	r24, Y+1	; 0x01
    3c6a:	9a 81       	ldd	r25, Y+2	; 0x02
    3c6c:	01 97       	sbiw	r24, 0x01	; 1
    3c6e:	f1 f7       	brne	.-4      	; 0x3c6c <LCD_vInitWithOutClear+0x3f4>
    3c70:	9a 83       	std	Y+2, r25	; 0x02
    3c72:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    3c74:	e8 96       	adiw	r28, 0x38	; 56
    3c76:	0f b6       	in	r0, 0x3f	; 63
    3c78:	f8 94       	cli
    3c7a:	de bf       	out	0x3e, r29	; 62
    3c7c:	0f be       	out	0x3f, r0	; 63
    3c7e:	cd bf       	out	0x3d, r28	; 61
    3c80:	cf 91       	pop	r28
    3c82:	df 91       	pop	r29
    3c84:	08 95       	ret

00003c86 <LCD_vWriteCharacter>:
void LCD_vWriteCharacter(u8 Loc_u8Character){
    3c86:	df 93       	push	r29
    3c88:	cf 93       	push	r28
    3c8a:	cd b7       	in	r28, 0x3d	; 61
    3c8c:	de b7       	in	r29, 0x3e	; 62
    3c8e:	6d 97       	sbiw	r28, 0x1d	; 29
    3c90:	0f b6       	in	r0, 0x3f	; 63
    3c92:	f8 94       	cli
    3c94:	de bf       	out	0x3e, r29	; 62
    3c96:	0f be       	out	0x3f, r0	; 63
    3c98:	cd bf       	out	0x3d, r28	; 61
    3c9a:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_vSetPinValue(PortB, Pin1, Pin_High);
    3c9c:	81 e0       	ldi	r24, 0x01	; 1
    3c9e:	61 e0       	ldi	r22, 0x01	; 1
    3ca0:	41 e0       	ldi	r20, 0x01	; 1
    3ca2:	0e 94 74 10 	call	0x20e8	; 0x20e8 <DIO_vSetPinValue>
	DIO_vSetPinValue(PortB, Pin2, Pin_Low);
    3ca6:	81 e0       	ldi	r24, 0x01	; 1
    3ca8:	62 e0       	ldi	r22, 0x02	; 2
    3caa:	40 e0       	ldi	r20, 0x00	; 0
    3cac:	0e 94 74 10 	call	0x20e8	; 0x20e8 <DIO_vSetPinValue>
	DIO_vSetPinValue(PortB, Pin3, Pin_Low);
    3cb0:	81 e0       	ldi	r24, 0x01	; 1
    3cb2:	63 e0       	ldi	r22, 0x03	; 3
    3cb4:	40 e0       	ldi	r20, 0x00	; 0
    3cb6:	0e 94 74 10 	call	0x20e8	; 0x20e8 <DIO_vSetPinValue>
	//------Send command-------
	DIO_vSetPortValue(PortA,(Loc_u8Character)&0xF0);
    3cba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3cbc:	98 2f       	mov	r25, r24
    3cbe:	90 7f       	andi	r25, 0xF0	; 240
    3cc0:	80 e0       	ldi	r24, 0x00	; 0
    3cc2:	69 2f       	mov	r22, r25
    3cc4:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <DIO_vSetPortValue>
	DIO_vSetPinValue(PortB, Pin3, Pin_High);
    3cc8:	81 e0       	ldi	r24, 0x01	; 1
    3cca:	63 e0       	ldi	r22, 0x03	; 3
    3ccc:	41 e0       	ldi	r20, 0x01	; 1
    3cce:	0e 94 74 10 	call	0x20e8	; 0x20e8 <DIO_vSetPinValue>
    3cd2:	80 e0       	ldi	r24, 0x00	; 0
    3cd4:	90 e0       	ldi	r25, 0x00	; 0
    3cd6:	a0 e2       	ldi	r26, 0x20	; 32
    3cd8:	b1 e4       	ldi	r27, 0x41	; 65
    3cda:	89 8f       	std	Y+25, r24	; 0x19
    3cdc:	9a 8f       	std	Y+26, r25	; 0x1a
    3cde:	ab 8f       	std	Y+27, r26	; 0x1b
    3ce0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ce2:	69 8d       	ldd	r22, Y+25	; 0x19
    3ce4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3ce6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ce8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3cea:	20 e0       	ldi	r18, 0x00	; 0
    3cec:	30 e0       	ldi	r19, 0x00	; 0
    3cee:	4a e7       	ldi	r20, 0x7A	; 122
    3cf0:	55 e4       	ldi	r21, 0x45	; 69
    3cf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cf6:	dc 01       	movw	r26, r24
    3cf8:	cb 01       	movw	r24, r22
    3cfa:	8d 8b       	std	Y+21, r24	; 0x15
    3cfc:	9e 8b       	std	Y+22, r25	; 0x16
    3cfe:	af 8b       	std	Y+23, r26	; 0x17
    3d00:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3d02:	6d 89       	ldd	r22, Y+21	; 0x15
    3d04:	7e 89       	ldd	r23, Y+22	; 0x16
    3d06:	8f 89       	ldd	r24, Y+23	; 0x17
    3d08:	98 8d       	ldd	r25, Y+24	; 0x18
    3d0a:	20 e0       	ldi	r18, 0x00	; 0
    3d0c:	30 e0       	ldi	r19, 0x00	; 0
    3d0e:	40 e8       	ldi	r20, 0x80	; 128
    3d10:	5f e3       	ldi	r21, 0x3F	; 63
    3d12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3d16:	88 23       	and	r24, r24
    3d18:	2c f4       	brge	.+10     	; 0x3d24 <LCD_vWriteCharacter+0x9e>
		__ticks = 1;
    3d1a:	81 e0       	ldi	r24, 0x01	; 1
    3d1c:	90 e0       	ldi	r25, 0x00	; 0
    3d1e:	9c 8b       	std	Y+20, r25	; 0x14
    3d20:	8b 8b       	std	Y+19, r24	; 0x13
    3d22:	3f c0       	rjmp	.+126    	; 0x3da2 <LCD_vWriteCharacter+0x11c>
	else if (__tmp > 65535)
    3d24:	6d 89       	ldd	r22, Y+21	; 0x15
    3d26:	7e 89       	ldd	r23, Y+22	; 0x16
    3d28:	8f 89       	ldd	r24, Y+23	; 0x17
    3d2a:	98 8d       	ldd	r25, Y+24	; 0x18
    3d2c:	20 e0       	ldi	r18, 0x00	; 0
    3d2e:	3f ef       	ldi	r19, 0xFF	; 255
    3d30:	4f e7       	ldi	r20, 0x7F	; 127
    3d32:	57 e4       	ldi	r21, 0x47	; 71
    3d34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3d38:	18 16       	cp	r1, r24
    3d3a:	4c f5       	brge	.+82     	; 0x3d8e <LCD_vWriteCharacter+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d3c:	69 8d       	ldd	r22, Y+25	; 0x19
    3d3e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3d40:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3d42:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3d44:	20 e0       	ldi	r18, 0x00	; 0
    3d46:	30 e0       	ldi	r19, 0x00	; 0
    3d48:	40 e2       	ldi	r20, 0x20	; 32
    3d4a:	51 e4       	ldi	r21, 0x41	; 65
    3d4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d50:	dc 01       	movw	r26, r24
    3d52:	cb 01       	movw	r24, r22
    3d54:	bc 01       	movw	r22, r24
    3d56:	cd 01       	movw	r24, r26
    3d58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d5c:	dc 01       	movw	r26, r24
    3d5e:	cb 01       	movw	r24, r22
    3d60:	9c 8b       	std	Y+20, r25	; 0x14
    3d62:	8b 8b       	std	Y+19, r24	; 0x13
    3d64:	0f c0       	rjmp	.+30     	; 0x3d84 <LCD_vWriteCharacter+0xfe>
    3d66:	80 e9       	ldi	r24, 0x90	; 144
    3d68:	91 e0       	ldi	r25, 0x01	; 1
    3d6a:	9a 8b       	std	Y+18, r25	; 0x12
    3d6c:	89 8b       	std	Y+17, r24	; 0x11
    3d6e:	89 89       	ldd	r24, Y+17	; 0x11
    3d70:	9a 89       	ldd	r25, Y+18	; 0x12
    3d72:	01 97       	sbiw	r24, 0x01	; 1
    3d74:	f1 f7       	brne	.-4      	; 0x3d72 <LCD_vWriteCharacter+0xec>
    3d76:	9a 8b       	std	Y+18, r25	; 0x12
    3d78:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d7a:	8b 89       	ldd	r24, Y+19	; 0x13
    3d7c:	9c 89       	ldd	r25, Y+20	; 0x14
    3d7e:	01 97       	sbiw	r24, 0x01	; 1
    3d80:	9c 8b       	std	Y+20, r25	; 0x14
    3d82:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d84:	8b 89       	ldd	r24, Y+19	; 0x13
    3d86:	9c 89       	ldd	r25, Y+20	; 0x14
    3d88:	00 97       	sbiw	r24, 0x00	; 0
    3d8a:	69 f7       	brne	.-38     	; 0x3d66 <LCD_vWriteCharacter+0xe0>
    3d8c:	14 c0       	rjmp	.+40     	; 0x3db6 <LCD_vWriteCharacter+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d8e:	6d 89       	ldd	r22, Y+21	; 0x15
    3d90:	7e 89       	ldd	r23, Y+22	; 0x16
    3d92:	8f 89       	ldd	r24, Y+23	; 0x17
    3d94:	98 8d       	ldd	r25, Y+24	; 0x18
    3d96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d9a:	dc 01       	movw	r26, r24
    3d9c:	cb 01       	movw	r24, r22
    3d9e:	9c 8b       	std	Y+20, r25	; 0x14
    3da0:	8b 8b       	std	Y+19, r24	; 0x13
    3da2:	8b 89       	ldd	r24, Y+19	; 0x13
    3da4:	9c 89       	ldd	r25, Y+20	; 0x14
    3da6:	98 8b       	std	Y+16, r25	; 0x10
    3da8:	8f 87       	std	Y+15, r24	; 0x0f
    3daa:	8f 85       	ldd	r24, Y+15	; 0x0f
    3dac:	98 89       	ldd	r25, Y+16	; 0x10
    3dae:	01 97       	sbiw	r24, 0x01	; 1
    3db0:	f1 f7       	brne	.-4      	; 0x3dae <LCD_vWriteCharacter+0x128>
    3db2:	98 8b       	std	Y+16, r25	; 0x10
    3db4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	DIO_vSetPinValue(PortB, Pin3, Pin_Low);
    3db6:	81 e0       	ldi	r24, 0x01	; 1
    3db8:	63 e0       	ldi	r22, 0x03	; 3
    3dba:	40 e0       	ldi	r20, 0x00	; 0
    3dbc:	0e 94 74 10 	call	0x20e8	; 0x20e8 <DIO_vSetPinValue>
	DIO_vSetPortValue(PortA,(Loc_u8Character<<4));
    3dc0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3dc2:	98 2f       	mov	r25, r24
    3dc4:	92 95       	swap	r25
    3dc6:	90 7f       	andi	r25, 0xF0	; 240
    3dc8:	80 e0       	ldi	r24, 0x00	; 0
    3dca:	69 2f       	mov	r22, r25
    3dcc:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <DIO_vSetPortValue>
	DIO_vSetPinValue(PortB, Pin3, Pin_High);
    3dd0:	81 e0       	ldi	r24, 0x01	; 1
    3dd2:	63 e0       	ldi	r22, 0x03	; 3
    3dd4:	41 e0       	ldi	r20, 0x01	; 1
    3dd6:	0e 94 74 10 	call	0x20e8	; 0x20e8 <DIO_vSetPinValue>
    3dda:	80 e0       	ldi	r24, 0x00	; 0
    3ddc:	90 e0       	ldi	r25, 0x00	; 0
    3dde:	a0 e2       	ldi	r26, 0x20	; 32
    3de0:	b1 e4       	ldi	r27, 0x41	; 65
    3de2:	8b 87       	std	Y+11, r24	; 0x0b
    3de4:	9c 87       	std	Y+12, r25	; 0x0c
    3de6:	ad 87       	std	Y+13, r26	; 0x0d
    3de8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3dea:	6b 85       	ldd	r22, Y+11	; 0x0b
    3dec:	7c 85       	ldd	r23, Y+12	; 0x0c
    3dee:	8d 85       	ldd	r24, Y+13	; 0x0d
    3df0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3df2:	20 e0       	ldi	r18, 0x00	; 0
    3df4:	30 e0       	ldi	r19, 0x00	; 0
    3df6:	4a e7       	ldi	r20, 0x7A	; 122
    3df8:	55 e4       	ldi	r21, 0x45	; 69
    3dfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dfe:	dc 01       	movw	r26, r24
    3e00:	cb 01       	movw	r24, r22
    3e02:	8f 83       	std	Y+7, r24	; 0x07
    3e04:	98 87       	std	Y+8, r25	; 0x08
    3e06:	a9 87       	std	Y+9, r26	; 0x09
    3e08:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3e0a:	6f 81       	ldd	r22, Y+7	; 0x07
    3e0c:	78 85       	ldd	r23, Y+8	; 0x08
    3e0e:	89 85       	ldd	r24, Y+9	; 0x09
    3e10:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e12:	20 e0       	ldi	r18, 0x00	; 0
    3e14:	30 e0       	ldi	r19, 0x00	; 0
    3e16:	40 e8       	ldi	r20, 0x80	; 128
    3e18:	5f e3       	ldi	r21, 0x3F	; 63
    3e1a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3e1e:	88 23       	and	r24, r24
    3e20:	2c f4       	brge	.+10     	; 0x3e2c <LCD_vWriteCharacter+0x1a6>
		__ticks = 1;
    3e22:	81 e0       	ldi	r24, 0x01	; 1
    3e24:	90 e0       	ldi	r25, 0x00	; 0
    3e26:	9e 83       	std	Y+6, r25	; 0x06
    3e28:	8d 83       	std	Y+5, r24	; 0x05
    3e2a:	3f c0       	rjmp	.+126    	; 0x3eaa <LCD_vWriteCharacter+0x224>
	else if (__tmp > 65535)
    3e2c:	6f 81       	ldd	r22, Y+7	; 0x07
    3e2e:	78 85       	ldd	r23, Y+8	; 0x08
    3e30:	89 85       	ldd	r24, Y+9	; 0x09
    3e32:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e34:	20 e0       	ldi	r18, 0x00	; 0
    3e36:	3f ef       	ldi	r19, 0xFF	; 255
    3e38:	4f e7       	ldi	r20, 0x7F	; 127
    3e3a:	57 e4       	ldi	r21, 0x47	; 71
    3e3c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3e40:	18 16       	cp	r1, r24
    3e42:	4c f5       	brge	.+82     	; 0x3e96 <LCD_vWriteCharacter+0x210>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e44:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e46:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e48:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e4c:	20 e0       	ldi	r18, 0x00	; 0
    3e4e:	30 e0       	ldi	r19, 0x00	; 0
    3e50:	40 e2       	ldi	r20, 0x20	; 32
    3e52:	51 e4       	ldi	r21, 0x41	; 65
    3e54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e58:	dc 01       	movw	r26, r24
    3e5a:	cb 01       	movw	r24, r22
    3e5c:	bc 01       	movw	r22, r24
    3e5e:	cd 01       	movw	r24, r26
    3e60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e64:	dc 01       	movw	r26, r24
    3e66:	cb 01       	movw	r24, r22
    3e68:	9e 83       	std	Y+6, r25	; 0x06
    3e6a:	8d 83       	std	Y+5, r24	; 0x05
    3e6c:	0f c0       	rjmp	.+30     	; 0x3e8c <LCD_vWriteCharacter+0x206>
    3e6e:	80 e9       	ldi	r24, 0x90	; 144
    3e70:	91 e0       	ldi	r25, 0x01	; 1
    3e72:	9c 83       	std	Y+4, r25	; 0x04
    3e74:	8b 83       	std	Y+3, r24	; 0x03
    3e76:	8b 81       	ldd	r24, Y+3	; 0x03
    3e78:	9c 81       	ldd	r25, Y+4	; 0x04
    3e7a:	01 97       	sbiw	r24, 0x01	; 1
    3e7c:	f1 f7       	brne	.-4      	; 0x3e7a <LCD_vWriteCharacter+0x1f4>
    3e7e:	9c 83       	std	Y+4, r25	; 0x04
    3e80:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e82:	8d 81       	ldd	r24, Y+5	; 0x05
    3e84:	9e 81       	ldd	r25, Y+6	; 0x06
    3e86:	01 97       	sbiw	r24, 0x01	; 1
    3e88:	9e 83       	std	Y+6, r25	; 0x06
    3e8a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e8c:	8d 81       	ldd	r24, Y+5	; 0x05
    3e8e:	9e 81       	ldd	r25, Y+6	; 0x06
    3e90:	00 97       	sbiw	r24, 0x00	; 0
    3e92:	69 f7       	brne	.-38     	; 0x3e6e <LCD_vWriteCharacter+0x1e8>
    3e94:	14 c0       	rjmp	.+40     	; 0x3ebe <LCD_vWriteCharacter+0x238>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e96:	6f 81       	ldd	r22, Y+7	; 0x07
    3e98:	78 85       	ldd	r23, Y+8	; 0x08
    3e9a:	89 85       	ldd	r24, Y+9	; 0x09
    3e9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ea2:	dc 01       	movw	r26, r24
    3ea4:	cb 01       	movw	r24, r22
    3ea6:	9e 83       	std	Y+6, r25	; 0x06
    3ea8:	8d 83       	std	Y+5, r24	; 0x05
    3eaa:	8d 81       	ldd	r24, Y+5	; 0x05
    3eac:	9e 81       	ldd	r25, Y+6	; 0x06
    3eae:	9a 83       	std	Y+2, r25	; 0x02
    3eb0:	89 83       	std	Y+1, r24	; 0x01
    3eb2:	89 81       	ldd	r24, Y+1	; 0x01
    3eb4:	9a 81       	ldd	r25, Y+2	; 0x02
    3eb6:	01 97       	sbiw	r24, 0x01	; 1
    3eb8:	f1 f7       	brne	.-4      	; 0x3eb6 <LCD_vWriteCharacter+0x230>
    3eba:	9a 83       	std	Y+2, r25	; 0x02
    3ebc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	DIO_vSetPinValue(PortB, Pin3, Pin_Low);
    3ebe:	81 e0       	ldi	r24, 0x01	; 1
    3ec0:	63 e0       	ldi	r22, 0x03	; 3
    3ec2:	40 e0       	ldi	r20, 0x00	; 0
    3ec4:	0e 94 74 10 	call	0x20e8	; 0x20e8 <DIO_vSetPinValue>



}
    3ec8:	6d 96       	adiw	r28, 0x1d	; 29
    3eca:	0f b6       	in	r0, 0x3f	; 63
    3ecc:	f8 94       	cli
    3ece:	de bf       	out	0x3e, r29	; 62
    3ed0:	0f be       	out	0x3f, r0	; 63
    3ed2:	cd bf       	out	0x3d, r28	; 61
    3ed4:	cf 91       	pop	r28
    3ed6:	df 91       	pop	r29
    3ed8:	08 95       	ret

00003eda <LCD_vGoTo>:
void LCD_vGoTo(u8 Loc_u8Line, u8 Loc_u8CharPos){
    3eda:	df 93       	push	r29
    3edc:	cf 93       	push	r28
    3ede:	00 d0       	rcall	.+0      	; 0x3ee0 <LCD_vGoTo+0x6>
    3ee0:	cd b7       	in	r28, 0x3d	; 61
    3ee2:	de b7       	in	r29, 0x3e	; 62
    3ee4:	89 83       	std	Y+1, r24	; 0x01
    3ee6:	6a 83       	std	Y+2, r22	; 0x02
	LCD_vSendCommand(Loc_u8Line|Loc_u8CharPos);
    3ee8:	89 81       	ldd	r24, Y+1	; 0x01
    3eea:	9a 81       	ldd	r25, Y+2	; 0x02
    3eec:	89 2b       	or	r24, r25
    3eee:	0e 94 7d 18 	call	0x30fa	; 0x30fa <LCD_vSendCommand>
}
    3ef2:	0f 90       	pop	r0
    3ef4:	0f 90       	pop	r0
    3ef6:	cf 91       	pop	r28
    3ef8:	df 91       	pop	r29
    3efa:	08 95       	ret

00003efc <LCD_vClear>:
void LCD_vClear(){
    3efc:	df 93       	push	r29
    3efe:	cf 93       	push	r28
    3f00:	cd b7       	in	r28, 0x3d	; 61
    3f02:	de b7       	in	r29, 0x3e	; 62
    3f04:	2e 97       	sbiw	r28, 0x0e	; 14
    3f06:	0f b6       	in	r0, 0x3f	; 63
    3f08:	f8 94       	cli
    3f0a:	de bf       	out	0x3e, r29	; 62
    3f0c:	0f be       	out	0x3f, r0	; 63
    3f0e:	cd bf       	out	0x3d, r28	; 61
	LCD_vSendCommand(DisplayClear);
    3f10:	81 e0       	ldi	r24, 0x01	; 1
    3f12:	0e 94 7d 18 	call	0x30fa	; 0x30fa <LCD_vSendCommand>
    3f16:	80 e0       	ldi	r24, 0x00	; 0
    3f18:	90 e0       	ldi	r25, 0x00	; 0
    3f1a:	a0 e0       	ldi	r26, 0x00	; 0
    3f1c:	b0 e4       	ldi	r27, 0x40	; 64
    3f1e:	8b 87       	std	Y+11, r24	; 0x0b
    3f20:	9c 87       	std	Y+12, r25	; 0x0c
    3f22:	ad 87       	std	Y+13, r26	; 0x0d
    3f24:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f26:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f28:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f2e:	20 e0       	ldi	r18, 0x00	; 0
    3f30:	30 e0       	ldi	r19, 0x00	; 0
    3f32:	4a e7       	ldi	r20, 0x7A	; 122
    3f34:	55 e4       	ldi	r21, 0x45	; 69
    3f36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f3a:	dc 01       	movw	r26, r24
    3f3c:	cb 01       	movw	r24, r22
    3f3e:	8f 83       	std	Y+7, r24	; 0x07
    3f40:	98 87       	std	Y+8, r25	; 0x08
    3f42:	a9 87       	std	Y+9, r26	; 0x09
    3f44:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3f46:	6f 81       	ldd	r22, Y+7	; 0x07
    3f48:	78 85       	ldd	r23, Y+8	; 0x08
    3f4a:	89 85       	ldd	r24, Y+9	; 0x09
    3f4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f4e:	20 e0       	ldi	r18, 0x00	; 0
    3f50:	30 e0       	ldi	r19, 0x00	; 0
    3f52:	40 e8       	ldi	r20, 0x80	; 128
    3f54:	5f e3       	ldi	r21, 0x3F	; 63
    3f56:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3f5a:	88 23       	and	r24, r24
    3f5c:	2c f4       	brge	.+10     	; 0x3f68 <LCD_vClear+0x6c>
		__ticks = 1;
    3f5e:	81 e0       	ldi	r24, 0x01	; 1
    3f60:	90 e0       	ldi	r25, 0x00	; 0
    3f62:	9e 83       	std	Y+6, r25	; 0x06
    3f64:	8d 83       	std	Y+5, r24	; 0x05
    3f66:	3f c0       	rjmp	.+126    	; 0x3fe6 <LCD_vClear+0xea>
	else if (__tmp > 65535)
    3f68:	6f 81       	ldd	r22, Y+7	; 0x07
    3f6a:	78 85       	ldd	r23, Y+8	; 0x08
    3f6c:	89 85       	ldd	r24, Y+9	; 0x09
    3f6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f70:	20 e0       	ldi	r18, 0x00	; 0
    3f72:	3f ef       	ldi	r19, 0xFF	; 255
    3f74:	4f e7       	ldi	r20, 0x7F	; 127
    3f76:	57 e4       	ldi	r21, 0x47	; 71
    3f78:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3f7c:	18 16       	cp	r1, r24
    3f7e:	4c f5       	brge	.+82     	; 0x3fd2 <LCD_vClear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f80:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f82:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f84:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f86:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f88:	20 e0       	ldi	r18, 0x00	; 0
    3f8a:	30 e0       	ldi	r19, 0x00	; 0
    3f8c:	40 e2       	ldi	r20, 0x20	; 32
    3f8e:	51 e4       	ldi	r21, 0x41	; 65
    3f90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f94:	dc 01       	movw	r26, r24
    3f96:	cb 01       	movw	r24, r22
    3f98:	bc 01       	movw	r22, r24
    3f9a:	cd 01       	movw	r24, r26
    3f9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fa0:	dc 01       	movw	r26, r24
    3fa2:	cb 01       	movw	r24, r22
    3fa4:	9e 83       	std	Y+6, r25	; 0x06
    3fa6:	8d 83       	std	Y+5, r24	; 0x05
    3fa8:	0f c0       	rjmp	.+30     	; 0x3fc8 <LCD_vClear+0xcc>
    3faa:	80 e9       	ldi	r24, 0x90	; 144
    3fac:	91 e0       	ldi	r25, 0x01	; 1
    3fae:	9c 83       	std	Y+4, r25	; 0x04
    3fb0:	8b 83       	std	Y+3, r24	; 0x03
    3fb2:	8b 81       	ldd	r24, Y+3	; 0x03
    3fb4:	9c 81       	ldd	r25, Y+4	; 0x04
    3fb6:	01 97       	sbiw	r24, 0x01	; 1
    3fb8:	f1 f7       	brne	.-4      	; 0x3fb6 <LCD_vClear+0xba>
    3fba:	9c 83       	std	Y+4, r25	; 0x04
    3fbc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fbe:	8d 81       	ldd	r24, Y+5	; 0x05
    3fc0:	9e 81       	ldd	r25, Y+6	; 0x06
    3fc2:	01 97       	sbiw	r24, 0x01	; 1
    3fc4:	9e 83       	std	Y+6, r25	; 0x06
    3fc6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fc8:	8d 81       	ldd	r24, Y+5	; 0x05
    3fca:	9e 81       	ldd	r25, Y+6	; 0x06
    3fcc:	00 97       	sbiw	r24, 0x00	; 0
    3fce:	69 f7       	brne	.-38     	; 0x3faa <LCD_vClear+0xae>
    3fd0:	14 c0       	rjmp	.+40     	; 0x3ffa <LCD_vClear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fd2:	6f 81       	ldd	r22, Y+7	; 0x07
    3fd4:	78 85       	ldd	r23, Y+8	; 0x08
    3fd6:	89 85       	ldd	r24, Y+9	; 0x09
    3fd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fde:	dc 01       	movw	r26, r24
    3fe0:	cb 01       	movw	r24, r22
    3fe2:	9e 83       	std	Y+6, r25	; 0x06
    3fe4:	8d 83       	std	Y+5, r24	; 0x05
    3fe6:	8d 81       	ldd	r24, Y+5	; 0x05
    3fe8:	9e 81       	ldd	r25, Y+6	; 0x06
    3fea:	9a 83       	std	Y+2, r25	; 0x02
    3fec:	89 83       	std	Y+1, r24	; 0x01
    3fee:	89 81       	ldd	r24, Y+1	; 0x01
    3ff0:	9a 81       	ldd	r25, Y+2	; 0x02
    3ff2:	01 97       	sbiw	r24, 0x01	; 1
    3ff4:	f1 f7       	brne	.-4      	; 0x3ff2 <LCD_vClear+0xf6>
    3ff6:	9a 83       	std	Y+2, r25	; 0x02
    3ff8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    3ffa:	2e 96       	adiw	r28, 0x0e	; 14
    3ffc:	0f b6       	in	r0, 0x3f	; 63
    3ffe:	f8 94       	cli
    4000:	de bf       	out	0x3e, r29	; 62
    4002:	0f be       	out	0x3f, r0	; 63
    4004:	cd bf       	out	0x3d, r28	; 61
    4006:	cf 91       	pop	r28
    4008:	df 91       	pop	r29
    400a:	08 95       	ret

0000400c <LCD_vWriteString>:
void LCD_vWriteString(u8 *ptr){
    400c:	df 93       	push	r29
    400e:	cf 93       	push	r28
    4010:	00 d0       	rcall	.+0      	; 0x4012 <LCD_vWriteString+0x6>
    4012:	0f 92       	push	r0
    4014:	cd b7       	in	r28, 0x3d	; 61
    4016:	de b7       	in	r29, 0x3e	; 62
    4018:	9b 83       	std	Y+3, r25	; 0x03
    401a:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
    401c:	19 82       	std	Y+1, r1	; 0x01
    401e:	0e c0       	rjmp	.+28     	; 0x403c <LCD_vWriteString+0x30>
	while(ptr[i]!='\0'){
		LCD_vWriteCharacter(ptr[i]);
    4020:	89 81       	ldd	r24, Y+1	; 0x01
    4022:	28 2f       	mov	r18, r24
    4024:	30 e0       	ldi	r19, 0x00	; 0
    4026:	8a 81       	ldd	r24, Y+2	; 0x02
    4028:	9b 81       	ldd	r25, Y+3	; 0x03
    402a:	fc 01       	movw	r30, r24
    402c:	e2 0f       	add	r30, r18
    402e:	f3 1f       	adc	r31, r19
    4030:	80 81       	ld	r24, Z
    4032:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <LCD_vWriteCharacter>
		i++;
    4036:	89 81       	ldd	r24, Y+1	; 0x01
    4038:	8f 5f       	subi	r24, 0xFF	; 255
    403a:	89 83       	std	Y+1, r24	; 0x01
	LCD_vSendCommand(DisplayClear);
	_delay_ms(2);
}
void LCD_vWriteString(u8 *ptr){
	u8 i=0;
	while(ptr[i]!='\0'){
    403c:	89 81       	ldd	r24, Y+1	; 0x01
    403e:	28 2f       	mov	r18, r24
    4040:	30 e0       	ldi	r19, 0x00	; 0
    4042:	8a 81       	ldd	r24, Y+2	; 0x02
    4044:	9b 81       	ldd	r25, Y+3	; 0x03
    4046:	fc 01       	movw	r30, r24
    4048:	e2 0f       	add	r30, r18
    404a:	f3 1f       	adc	r31, r19
    404c:	80 81       	ld	r24, Z
    404e:	88 23       	and	r24, r24
    4050:	39 f7       	brne	.-50     	; 0x4020 <LCD_vWriteString+0x14>
		LCD_vWriteCharacter(ptr[i]);
		i++;
	}
}
    4052:	0f 90       	pop	r0
    4054:	0f 90       	pop	r0
    4056:	0f 90       	pop	r0
    4058:	cf 91       	pop	r28
    405a:	df 91       	pop	r29
    405c:	08 95       	ret

0000405e <LCD_vCustomCharacter>:
void LCD_vCustomCharacter(u8 *ptr,u8 Location){
    405e:	df 93       	push	r29
    4060:	cf 93       	push	r28
    4062:	00 d0       	rcall	.+0      	; 0x4064 <LCD_vCustomCharacter+0x6>
    4064:	00 d0       	rcall	.+0      	; 0x4066 <LCD_vCustomCharacter+0x8>
    4066:	cd b7       	in	r28, 0x3d	; 61
    4068:	de b7       	in	r29, 0x3e	; 62
    406a:	9b 83       	std	Y+3, r25	; 0x03
    406c:	8a 83       	std	Y+2, r24	; 0x02
    406e:	6c 83       	std	Y+4, r22	; 0x04
	u8 i;
	LCD_vSendCommand((0x40)+(Location*8));
    4070:	8c 81       	ldd	r24, Y+4	; 0x04
    4072:	88 2f       	mov	r24, r24
    4074:	90 e0       	ldi	r25, 0x00	; 0
    4076:	08 96       	adiw	r24, 0x08	; 8
    4078:	88 0f       	add	r24, r24
    407a:	99 1f       	adc	r25, r25
    407c:	88 0f       	add	r24, r24
    407e:	99 1f       	adc	r25, r25
    4080:	88 0f       	add	r24, r24
    4082:	99 1f       	adc	r25, r25
    4084:	0e 94 7d 18 	call	0x30fa	; 0x30fa <LCD_vSendCommand>
	for(i=0;i<8;i++){
    4088:	19 82       	std	Y+1, r1	; 0x01
    408a:	0e c0       	rjmp	.+28     	; 0x40a8 <LCD_vCustomCharacter+0x4a>
		LCD_vWriteCharacter(ptr[i]);
    408c:	89 81       	ldd	r24, Y+1	; 0x01
    408e:	28 2f       	mov	r18, r24
    4090:	30 e0       	ldi	r19, 0x00	; 0
    4092:	8a 81       	ldd	r24, Y+2	; 0x02
    4094:	9b 81       	ldd	r25, Y+3	; 0x03
    4096:	fc 01       	movw	r30, r24
    4098:	e2 0f       	add	r30, r18
    409a:	f3 1f       	adc	r31, r19
    409c:	80 81       	ld	r24, Z
    409e:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <LCD_vWriteCharacter>
	}
}
void LCD_vCustomCharacter(u8 *ptr,u8 Location){
	u8 i;
	LCD_vSendCommand((0x40)+(Location*8));
	for(i=0;i<8;i++){
    40a2:	89 81       	ldd	r24, Y+1	; 0x01
    40a4:	8f 5f       	subi	r24, 0xFF	; 255
    40a6:	89 83       	std	Y+1, r24	; 0x01
    40a8:	89 81       	ldd	r24, Y+1	; 0x01
    40aa:	88 30       	cpi	r24, 0x08	; 8
    40ac:	78 f3       	brcs	.-34     	; 0x408c <LCD_vCustomCharacter+0x2e>
		LCD_vWriteCharacter(ptr[i]);
	}


}
    40ae:	0f 90       	pop	r0
    40b0:	0f 90       	pop	r0
    40b2:	0f 90       	pop	r0
    40b4:	0f 90       	pop	r0
    40b6:	cf 91       	pop	r28
    40b8:	df 91       	pop	r29
    40ba:	08 95       	ret

000040bc <LCD_vCLearOneChar>:
void LCD_vCLearOneChar(u8 Loc_u8Line,u8 Loc_u8CharPos){
    40bc:	df 93       	push	r29
    40be:	cf 93       	push	r28
    40c0:	cd b7       	in	r28, 0x3d	; 61
    40c2:	de b7       	in	r29, 0x3e	; 62
    40c4:	2a 97       	sbiw	r28, 0x0a	; 10
    40c6:	0f b6       	in	r0, 0x3f	; 63
    40c8:	f8 94       	cli
    40ca:	de bf       	out	0x3e, r29	; 62
    40cc:	0f be       	out	0x3f, r0	; 63
    40ce:	cd bf       	out	0x3d, r28	; 61
    40d0:	89 87       	std	Y+9, r24	; 0x09
    40d2:	6a 87       	std	Y+10, r22	; 0x0a
	u8 chr0[8]={0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
    40d4:	88 e0       	ldi	r24, 0x08	; 8
    40d6:	fe 01       	movw	r30, r28
    40d8:	31 96       	adiw	r30, 0x01	; 1
    40da:	df 01       	movw	r26, r30
    40dc:	98 2f       	mov	r25, r24
    40de:	1d 92       	st	X+, r1
    40e0:	9a 95       	dec	r25
    40e2:	e9 f7       	brne	.-6      	; 0x40de <LCD_vCLearOneChar+0x22>
	LCD_vCustomCharacter(chr0,1);
    40e4:	ce 01       	movw	r24, r28
    40e6:	01 96       	adiw	r24, 0x01	; 1
    40e8:	61 e0       	ldi	r22, 0x01	; 1
    40ea:	0e 94 2f 20 	call	0x405e	; 0x405e <LCD_vCustomCharacter>
	LCD_vGoTo(Loc_u8Line,Loc_u8CharPos);
    40ee:	89 85       	ldd	r24, Y+9	; 0x09
    40f0:	6a 85       	ldd	r22, Y+10	; 0x0a
    40f2:	0e 94 6d 1f 	call	0x3eda	; 0x3eda <LCD_vGoTo>
	LCD_vWriteCharacter(1);
    40f6:	81 e0       	ldi	r24, 0x01	; 1
    40f8:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <LCD_vWriteCharacter>
}
    40fc:	2a 96       	adiw	r28, 0x0a	; 10
    40fe:	0f b6       	in	r0, 0x3f	; 63
    4100:	f8 94       	cli
    4102:	de bf       	out	0x3e, r29	; 62
    4104:	0f be       	out	0x3f, r0	; 63
    4106:	cd bf       	out	0x3d, r28	; 61
    4108:	cf 91       	pop	r28
    410a:	df 91       	pop	r29
    410c:	08 95       	ret

0000410e <KAYPAD_vInit>:
* \Parameters (in) : None
* \Parameters (out): None
* \Return value:   : void  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void KAYPAD_vInit(){
    410e:	df 93       	push	r29
    4110:	cf 93       	push	r28
    4112:	cd b7       	in	r28, 0x3d	; 61
    4114:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPortDirection(KEYPAD_PORT,KEYPAD_DIRECTION);
    4116:	81 e0       	ldi	r24, 0x01	; 1
    4118:	6f e0       	ldi	r22, 0x0F	; 15
    411a:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <DIO_vSetPortDirection>
	DIO_vSetPortValue(KEYPAD_PORT,KEYPAD_VALUE);
    411e:	81 e0       	ldi	r24, 0x01	; 1
    4120:	6f ef       	ldi	r22, 0xFF	; 255
    4122:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <DIO_vSetPortValue>

}
    4126:	cf 91       	pop	r28
    4128:	df 91       	pop	r29
    412a:	08 95       	ret

0000412c <KAYPAD_u8GetKey>:
* \Parameters (in) : None
* \Parameters (out): None
* \Return value:   : unsigned char  E_OK
*                                    E_NOT_OK
*******************************************************************************/
u8 KAYPAD_u8GetKey(){
    412c:	df 93       	push	r29
    412e:	cf 93       	push	r28
    4130:	cd b7       	in	r28, 0x3d	; 61
    4132:	de b7       	in	r29, 0x3e	; 62
    4134:	65 97       	sbiw	r28, 0x15	; 21
    4136:	0f b6       	in	r0, 0x3f	; 63
    4138:	f8 94       	cli
    413a:	de bf       	out	0x3e, r29	; 62
    413c:	0f be       	out	0x3f, r0	; 63
    413e:	cd bf       	out	0x3d, r28	; 61
	u8 Loc_u8RowCounter, Loc_u8CoulomsCounter;
	u8 row , coulom, temp;
	coulom=3;
    4140:	83 e0       	ldi	r24, 0x03	; 3
    4142:	89 8b       	std	Y+17, r24	; 0x11
	u8 value=9;
    4144:	89 e0       	ldi	r24, 0x09	; 9
    4146:	8f 87       	std	Y+15, r24	; 0x0f
	for(Loc_u8CoulomsCounter=0;Loc_u8CoulomsCounter<4;Loc_u8CoulomsCounter++){
    4148:	1b 8a       	std	Y+19, r1	; 0x13
    414a:	b7 c0       	rjmp	.+366    	; 0x42ba <KAYPAD_u8GetKey+0x18e>
		DIO_vSetPinValue(KEYPAD_PORT,Loc_u8CoulomsCounter,Pin_Low);
    414c:	81 e0       	ldi	r24, 0x01	; 1
    414e:	6b 89       	ldd	r22, Y+19	; 0x13
    4150:	40 e0       	ldi	r20, 0x00	; 0
    4152:	0e 94 74 10 	call	0x20e8	; 0x20e8 <DIO_vSetPinValue>
		row=3;
    4156:	83 e0       	ldi	r24, 0x03	; 3
    4158:	8a 8b       	std	Y+18, r24	; 0x12
		for(Loc_u8RowCounter=4;Loc_u8RowCounter<8;Loc_u8RowCounter++){
    415a:	84 e0       	ldi	r24, 0x04	; 4
    415c:	8c 8b       	std	Y+20, r24	; 0x14
    415e:	9e c0       	rjmp	.+316    	; 0x429c <KAYPAD_u8GetKey+0x170>
			temp=DIO_u8PGetPinValue(KEYPAD_PORT,Loc_u8RowCounter);
    4160:	81 e0       	ldi	r24, 0x01	; 1
    4162:	6c 89       	ldd	r22, Y+20	; 0x14
    4164:	0e 94 4f 11 	call	0x229e	; 0x229e <DIO_u8PGetPinValue>
    4168:	88 8b       	std	Y+16, r24	; 0x10
			if(temp==0){
    416a:	88 89       	ldd	r24, Y+16	; 0x10
    416c:	88 23       	and	r24, r24
    416e:	09 f0       	breq	.+2      	; 0x4172 <KAYPAD_u8GetKey+0x46>
    4170:	8f c0       	rjmp	.+286    	; 0x4290 <KAYPAD_u8GetKey+0x164>
    4172:	80 e0       	ldi	r24, 0x00	; 0
    4174:	90 e0       	ldi	r25, 0x00	; 0
    4176:	a8 ec       	ldi	r26, 0xC8	; 200
    4178:	b1 e4       	ldi	r27, 0x41	; 65
    417a:	8b 87       	std	Y+11, r24	; 0x0b
    417c:	9c 87       	std	Y+12, r25	; 0x0c
    417e:	ad 87       	std	Y+13, r26	; 0x0d
    4180:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4182:	6b 85       	ldd	r22, Y+11	; 0x0b
    4184:	7c 85       	ldd	r23, Y+12	; 0x0c
    4186:	8d 85       	ldd	r24, Y+13	; 0x0d
    4188:	9e 85       	ldd	r25, Y+14	; 0x0e
    418a:	20 e0       	ldi	r18, 0x00	; 0
    418c:	30 e0       	ldi	r19, 0x00	; 0
    418e:	4a e7       	ldi	r20, 0x7A	; 122
    4190:	55 e4       	ldi	r21, 0x45	; 69
    4192:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4196:	dc 01       	movw	r26, r24
    4198:	cb 01       	movw	r24, r22
    419a:	8f 83       	std	Y+7, r24	; 0x07
    419c:	98 87       	std	Y+8, r25	; 0x08
    419e:	a9 87       	std	Y+9, r26	; 0x09
    41a0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    41a2:	6f 81       	ldd	r22, Y+7	; 0x07
    41a4:	78 85       	ldd	r23, Y+8	; 0x08
    41a6:	89 85       	ldd	r24, Y+9	; 0x09
    41a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    41aa:	20 e0       	ldi	r18, 0x00	; 0
    41ac:	30 e0       	ldi	r19, 0x00	; 0
    41ae:	40 e8       	ldi	r20, 0x80	; 128
    41b0:	5f e3       	ldi	r21, 0x3F	; 63
    41b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    41b6:	88 23       	and	r24, r24
    41b8:	2c f4       	brge	.+10     	; 0x41c4 <KAYPAD_u8GetKey+0x98>
		__ticks = 1;
    41ba:	81 e0       	ldi	r24, 0x01	; 1
    41bc:	90 e0       	ldi	r25, 0x00	; 0
    41be:	9e 83       	std	Y+6, r25	; 0x06
    41c0:	8d 83       	std	Y+5, r24	; 0x05
    41c2:	3f c0       	rjmp	.+126    	; 0x4242 <KAYPAD_u8GetKey+0x116>
	else if (__tmp > 65535)
    41c4:	6f 81       	ldd	r22, Y+7	; 0x07
    41c6:	78 85       	ldd	r23, Y+8	; 0x08
    41c8:	89 85       	ldd	r24, Y+9	; 0x09
    41ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    41cc:	20 e0       	ldi	r18, 0x00	; 0
    41ce:	3f ef       	ldi	r19, 0xFF	; 255
    41d0:	4f e7       	ldi	r20, 0x7F	; 127
    41d2:	57 e4       	ldi	r21, 0x47	; 71
    41d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    41d8:	18 16       	cp	r1, r24
    41da:	4c f5       	brge	.+82     	; 0x422e <KAYPAD_u8GetKey+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    41de:	7c 85       	ldd	r23, Y+12	; 0x0c
    41e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    41e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    41e4:	20 e0       	ldi	r18, 0x00	; 0
    41e6:	30 e0       	ldi	r19, 0x00	; 0
    41e8:	40 e2       	ldi	r20, 0x20	; 32
    41ea:	51 e4       	ldi	r21, 0x41	; 65
    41ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41f0:	dc 01       	movw	r26, r24
    41f2:	cb 01       	movw	r24, r22
    41f4:	bc 01       	movw	r22, r24
    41f6:	cd 01       	movw	r24, r26
    41f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41fc:	dc 01       	movw	r26, r24
    41fe:	cb 01       	movw	r24, r22
    4200:	9e 83       	std	Y+6, r25	; 0x06
    4202:	8d 83       	std	Y+5, r24	; 0x05
    4204:	0f c0       	rjmp	.+30     	; 0x4224 <KAYPAD_u8GetKey+0xf8>
    4206:	80 e9       	ldi	r24, 0x90	; 144
    4208:	91 e0       	ldi	r25, 0x01	; 1
    420a:	9c 83       	std	Y+4, r25	; 0x04
    420c:	8b 83       	std	Y+3, r24	; 0x03
    420e:	8b 81       	ldd	r24, Y+3	; 0x03
    4210:	9c 81       	ldd	r25, Y+4	; 0x04
    4212:	01 97       	sbiw	r24, 0x01	; 1
    4214:	f1 f7       	brne	.-4      	; 0x4212 <KAYPAD_u8GetKey+0xe6>
    4216:	9c 83       	std	Y+4, r25	; 0x04
    4218:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    421a:	8d 81       	ldd	r24, Y+5	; 0x05
    421c:	9e 81       	ldd	r25, Y+6	; 0x06
    421e:	01 97       	sbiw	r24, 0x01	; 1
    4220:	9e 83       	std	Y+6, r25	; 0x06
    4222:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4224:	8d 81       	ldd	r24, Y+5	; 0x05
    4226:	9e 81       	ldd	r25, Y+6	; 0x06
    4228:	00 97       	sbiw	r24, 0x00	; 0
    422a:	69 f7       	brne	.-38     	; 0x4206 <KAYPAD_u8GetKey+0xda>
    422c:	14 c0       	rjmp	.+40     	; 0x4256 <KAYPAD_u8GetKey+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    422e:	6f 81       	ldd	r22, Y+7	; 0x07
    4230:	78 85       	ldd	r23, Y+8	; 0x08
    4232:	89 85       	ldd	r24, Y+9	; 0x09
    4234:	9a 85       	ldd	r25, Y+10	; 0x0a
    4236:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    423a:	dc 01       	movw	r26, r24
    423c:	cb 01       	movw	r24, r22
    423e:	9e 83       	std	Y+6, r25	; 0x06
    4240:	8d 83       	std	Y+5, r24	; 0x05
    4242:	8d 81       	ldd	r24, Y+5	; 0x05
    4244:	9e 81       	ldd	r25, Y+6	; 0x06
    4246:	9a 83       	std	Y+2, r25	; 0x02
    4248:	89 83       	std	Y+1, r24	; 0x01
    424a:	89 81       	ldd	r24, Y+1	; 0x01
    424c:	9a 81       	ldd	r25, Y+2	; 0x02
    424e:	01 97       	sbiw	r24, 0x01	; 1
    4250:	f1 f7       	brne	.-4      	; 0x424e <KAYPAD_u8GetKey+0x122>
    4252:	9a 83       	std	Y+2, r25	; 0x02
    4254:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(25);
				temp=DIO_u8PGetPinValue(KEYPAD_PORT,Loc_u8RowCounter);
    4256:	81 e0       	ldi	r24, 0x01	; 1
    4258:	6c 89       	ldd	r22, Y+20	; 0x14
    425a:	0e 94 4f 11 	call	0x229e	; 0x229e <DIO_u8PGetPinValue>
    425e:	88 8b       	std	Y+16, r24	; 0x10
				if(temp==0){
    4260:	88 89       	ldd	r24, Y+16	; 0x10
    4262:	88 23       	and	r24, r24
    4264:	a9 f4       	brne	.+42     	; 0x4290 <KAYPAD_u8GetKey+0x164>
					value=arr[row][coulom];
    4266:	8a 89       	ldd	r24, Y+18	; 0x12
    4268:	48 2f       	mov	r20, r24
    426a:	50 e0       	ldi	r21, 0x00	; 0
    426c:	89 89       	ldd	r24, Y+17	; 0x11
    426e:	28 2f       	mov	r18, r24
    4270:	30 e0       	ldi	r19, 0x00	; 0
    4272:	ca 01       	movw	r24, r20
    4274:	88 0f       	add	r24, r24
    4276:	99 1f       	adc	r25, r25
    4278:	88 0f       	add	r24, r24
    427a:	99 1f       	adc	r25, r25
    427c:	82 0f       	add	r24, r18
    427e:	93 1f       	adc	r25, r19
    4280:	fc 01       	movw	r30, r24
    4282:	e3 55       	subi	r30, 0x53	; 83
    4284:	ff 4f       	sbci	r31, 0xFF	; 255
    4286:	80 81       	ld	r24, Z
    4288:	8f 87       	std	Y+15, r24	; 0x0f
					return value;
    428a:	8f 85       	ldd	r24, Y+15	; 0x0f
    428c:	8d 8b       	std	Y+21, r24	; 0x15
    428e:	1b c0       	rjmp	.+54     	; 0x42c6 <KAYPAD_u8GetKey+0x19a>
				}
			}
			row--;
    4290:	8a 89       	ldd	r24, Y+18	; 0x12
    4292:	81 50       	subi	r24, 0x01	; 1
    4294:	8a 8b       	std	Y+18, r24	; 0x12
	coulom=3;
	u8 value=9;
	for(Loc_u8CoulomsCounter=0;Loc_u8CoulomsCounter<4;Loc_u8CoulomsCounter++){
		DIO_vSetPinValue(KEYPAD_PORT,Loc_u8CoulomsCounter,Pin_Low);
		row=3;
		for(Loc_u8RowCounter=4;Loc_u8RowCounter<8;Loc_u8RowCounter++){
    4296:	8c 89       	ldd	r24, Y+20	; 0x14
    4298:	8f 5f       	subi	r24, 0xFF	; 255
    429a:	8c 8b       	std	Y+20, r24	; 0x14
    429c:	8c 89       	ldd	r24, Y+20	; 0x14
    429e:	88 30       	cpi	r24, 0x08	; 8
    42a0:	08 f4       	brcc	.+2      	; 0x42a4 <KAYPAD_u8GetKey+0x178>
    42a2:	5e cf       	rjmp	.-324    	; 0x4160 <KAYPAD_u8GetKey+0x34>
					return value;
				}
			}
			row--;
		}
		coulom--;
    42a4:	89 89       	ldd	r24, Y+17	; 0x11
    42a6:	81 50       	subi	r24, 0x01	; 1
    42a8:	89 8b       	std	Y+17, r24	; 0x11
		DIO_vSetPinValue(KEYPAD_PORT,Loc_u8CoulomsCounter,Pin_High);
    42aa:	81 e0       	ldi	r24, 0x01	; 1
    42ac:	6b 89       	ldd	r22, Y+19	; 0x13
    42ae:	41 e0       	ldi	r20, 0x01	; 1
    42b0:	0e 94 74 10 	call	0x20e8	; 0x20e8 <DIO_vSetPinValue>
u8 KAYPAD_u8GetKey(){
	u8 Loc_u8RowCounter, Loc_u8CoulomsCounter;
	u8 row , coulom, temp;
	coulom=3;
	u8 value=9;
	for(Loc_u8CoulomsCounter=0;Loc_u8CoulomsCounter<4;Loc_u8CoulomsCounter++){
    42b4:	8b 89       	ldd	r24, Y+19	; 0x13
    42b6:	8f 5f       	subi	r24, 0xFF	; 255
    42b8:	8b 8b       	std	Y+19, r24	; 0x13
    42ba:	8b 89       	ldd	r24, Y+19	; 0x13
    42bc:	84 30       	cpi	r24, 0x04	; 4
    42be:	08 f4       	brcc	.+2      	; 0x42c2 <KAYPAD_u8GetKey+0x196>
    42c0:	45 cf       	rjmp	.-374    	; 0x414c <KAYPAD_u8GetKey+0x20>
		}
		coulom--;
		DIO_vSetPinValue(KEYPAD_PORT,Loc_u8CoulomsCounter,Pin_High);
	}

	return 0xff;
    42c2:	8f ef       	ldi	r24, 0xFF	; 255
    42c4:	8d 8b       	std	Y+21, r24	; 0x15
    42c6:	8d 89       	ldd	r24, Y+21	; 0x15
}
    42c8:	65 96       	adiw	r28, 0x15	; 21
    42ca:	0f b6       	in	r0, 0x3f	; 63
    42cc:	f8 94       	cli
    42ce:	de bf       	out	0x3e, r29	; 62
    42d0:	0f be       	out	0x3f, r0	; 63
    42d2:	cd bf       	out	0x3d, r28	; 61
    42d4:	cf 91       	pop	r28
    42d6:	df 91       	pop	r29
    42d8:	08 95       	ret

000042da <H_Bridge_vInit>:
 *
 *  Created on: Jan 18, 2023
 *      Author: a7med
 */
#include "H_Bridge.h"
void H_Bridge_vInit(){
    42da:	df 93       	push	r29
    42dc:	cf 93       	push	r28
    42de:	cd b7       	in	r28, 0x3d	; 61
    42e0:	de b7       	in	r29, 0x3e	; 62
	//----------- on this part motor1 is connected to 3y and VCC and motor2 is connected to 4y and Ground
	SET_BIT(DDRD,5);	//---- EN1
    42e2:	a1 e3       	ldi	r26, 0x31	; 49
    42e4:	b0 e0       	ldi	r27, 0x00	; 0
    42e6:	e1 e3       	ldi	r30, 0x31	; 49
    42e8:	f0 e0       	ldi	r31, 0x00	; 0
    42ea:	80 81       	ld	r24, Z
    42ec:	80 62       	ori	r24, 0x20	; 32
    42ee:	8c 93       	st	X, r24
	SET_BIT(DDRC,5);	//--- 3A
    42f0:	a4 e3       	ldi	r26, 0x34	; 52
    42f2:	b0 e0       	ldi	r27, 0x00	; 0
    42f4:	e4 e3       	ldi	r30, 0x34	; 52
    42f6:	f0 e0       	ldi	r31, 0x00	; 0
    42f8:	80 81       	ld	r24, Z
    42fa:	80 62       	ori	r24, 0x20	; 32
    42fc:	8c 93       	st	X, r24
	SET_BIT(DDRC,6);	//--- 4A
    42fe:	a4 e3       	ldi	r26, 0x34	; 52
    4300:	b0 e0       	ldi	r27, 0x00	; 0
    4302:	e4 e3       	ldi	r30, 0x34	; 52
    4304:	f0 e0       	ldi	r31, 0x00	; 0
    4306:	80 81       	ld	r24, Z
    4308:	80 64       	ori	r24, 0x40	; 64
    430a:	8c 93       	st	X, r24
	//------- on this part the two motors are connected to 1Y and 2Y
	SET_BIT(DDRD,4);	//--- EN2
    430c:	a1 e3       	ldi	r26, 0x31	; 49
    430e:	b0 e0       	ldi	r27, 0x00	; 0
    4310:	e1 e3       	ldi	r30, 0x31	; 49
    4312:	f0 e0       	ldi	r31, 0x00	; 0
    4314:	80 81       	ld	r24, Z
    4316:	80 61       	ori	r24, 0x10	; 16
    4318:	8c 93       	st	X, r24
	SET_BIT(DDRC,3);	//--- 1A
    431a:	a4 e3       	ldi	r26, 0x34	; 52
    431c:	b0 e0       	ldi	r27, 0x00	; 0
    431e:	e4 e3       	ldi	r30, 0x34	; 52
    4320:	f0 e0       	ldi	r31, 0x00	; 0
    4322:	80 81       	ld	r24, Z
    4324:	88 60       	ori	r24, 0x08	; 8
    4326:	8c 93       	st	X, r24
	SET_BIT(DDRC,4);	//--- 2A
    4328:	a4 e3       	ldi	r26, 0x34	; 52
    432a:	b0 e0       	ldi	r27, 0x00	; 0
    432c:	e4 e3       	ldi	r30, 0x34	; 52
    432e:	f0 e0       	ldi	r31, 0x00	; 0
    4330:	80 81       	ld	r24, Z
    4332:	80 61       	ori	r24, 0x10	; 16
    4334:	8c 93       	st	X, r24
}
    4336:	cf 91       	pop	r28
    4338:	df 91       	pop	r29
    433a:	08 95       	ret

0000433c <H_Bridge_vRunM1AndStopM2>:
/* ---- Following 3 Functions if for ConnectionsToGroundAndVoltage ----*/
void H_Bridge_vRunM1AndStopM2(){
    433c:	df 93       	push	r29
    433e:	cf 93       	push	r28
    4340:	cd b7       	in	r28, 0x3d	; 61
    4342:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(PORTD,5);	//---EN1 High
    4344:	a2 e3       	ldi	r26, 0x32	; 50
    4346:	b0 e0       	ldi	r27, 0x00	; 0
    4348:	e2 e3       	ldi	r30, 0x32	; 50
    434a:	f0 e0       	ldi	r31, 0x00	; 0
    434c:	80 81       	ld	r24, Z
    434e:	80 62       	ori	r24, 0x20	; 32
    4350:	8c 93       	st	X, r24
	CLR_BIT(PORTC,5);	//---3A Low
    4352:	a5 e3       	ldi	r26, 0x35	; 53
    4354:	b0 e0       	ldi	r27, 0x00	; 0
    4356:	e5 e3       	ldi	r30, 0x35	; 53
    4358:	f0 e0       	ldi	r31, 0x00	; 0
    435a:	80 81       	ld	r24, Z
    435c:	8f 7d       	andi	r24, 0xDF	; 223
    435e:	8c 93       	st	X, r24
	CLR_BIT(PORTC,6);	//---4A Low
    4360:	a5 e3       	ldi	r26, 0x35	; 53
    4362:	b0 e0       	ldi	r27, 0x00	; 0
    4364:	e5 e3       	ldi	r30, 0x35	; 53
    4366:	f0 e0       	ldi	r31, 0x00	; 0
    4368:	80 81       	ld	r24, Z
    436a:	8f 7b       	andi	r24, 0xBF	; 191
    436c:	8c 93       	st	X, r24
}
    436e:	cf 91       	pop	r28
    4370:	df 91       	pop	r29
    4372:	08 95       	ret

00004374 <H_Bridge_vRunM2AndStopM1>:
void H_Bridge_vRunM2AndStopM1(){
    4374:	df 93       	push	r29
    4376:	cf 93       	push	r28
    4378:	cd b7       	in	r28, 0x3d	; 61
    437a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(PORTD,5);	//---EN1 High
    437c:	a2 e3       	ldi	r26, 0x32	; 50
    437e:	b0 e0       	ldi	r27, 0x00	; 0
    4380:	e2 e3       	ldi	r30, 0x32	; 50
    4382:	f0 e0       	ldi	r31, 0x00	; 0
    4384:	80 81       	ld	r24, Z
    4386:	80 62       	ori	r24, 0x20	; 32
    4388:	8c 93       	st	X, r24
	SET_BIT(PORTC,5);	//---3A High
    438a:	a5 e3       	ldi	r26, 0x35	; 53
    438c:	b0 e0       	ldi	r27, 0x00	; 0
    438e:	e5 e3       	ldi	r30, 0x35	; 53
    4390:	f0 e0       	ldi	r31, 0x00	; 0
    4392:	80 81       	ld	r24, Z
    4394:	80 62       	ori	r24, 0x20	; 32
    4396:	8c 93       	st	X, r24
	SET_BIT(PORTC,6);	//---4A High
    4398:	a5 e3       	ldi	r26, 0x35	; 53
    439a:	b0 e0       	ldi	r27, 0x00	; 0
    439c:	e5 e3       	ldi	r30, 0x35	; 53
    439e:	f0 e0       	ldi	r31, 0x00	; 0
    43a0:	80 81       	ld	r24, Z
    43a2:	80 64       	ori	r24, 0x40	; 64
    43a4:	8c 93       	st	X, r24
}
    43a6:	cf 91       	pop	r28
    43a8:	df 91       	pop	r29
    43aa:	08 95       	ret

000043ac <H_Bridge_vM1AndM2FreeRuningStop>:
void H_Bridge_vM1AndM2FreeRuningStop(){
    43ac:	df 93       	push	r29
    43ae:	cf 93       	push	r28
    43b0:	cd b7       	in	r28, 0x3d	; 61
    43b2:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(PORTD,5);	//---EN1 Low
    43b4:	a2 e3       	ldi	r26, 0x32	; 50
    43b6:	b0 e0       	ldi	r27, 0x00	; 0
    43b8:	e2 e3       	ldi	r30, 0x32	; 50
    43ba:	f0 e0       	ldi	r31, 0x00	; 0
    43bc:	80 81       	ld	r24, Z
    43be:	8f 7d       	andi	r24, 0xDF	; 223
    43c0:	8c 93       	st	X, r24
}
    43c2:	cf 91       	pop	r28
    43c4:	df 91       	pop	r29
    43c6:	08 95       	ret

000043c8 <H_Bridge_vM1AndM2TurnRight>:
/* ---- Following Functions if for BidirectionalDCMotorControl ----*/
void H_Bridge_vM1AndM2TurnRight(){
    43c8:	df 93       	push	r29
    43ca:	cf 93       	push	r28
    43cc:	cd b7       	in	r28, 0x3d	; 61
    43ce:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(PORTD,4);	//--- EN2 High
    43d0:	a2 e3       	ldi	r26, 0x32	; 50
    43d2:	b0 e0       	ldi	r27, 0x00	; 0
    43d4:	e2 e3       	ldi	r30, 0x32	; 50
    43d6:	f0 e0       	ldi	r31, 0x00	; 0
    43d8:	80 81       	ld	r24, Z
    43da:	80 61       	ori	r24, 0x10	; 16
    43dc:	8c 93       	st	X, r24
	CLR_BIT(PORTC,3);	//--- 1A Low
    43de:	a5 e3       	ldi	r26, 0x35	; 53
    43e0:	b0 e0       	ldi	r27, 0x00	; 0
    43e2:	e5 e3       	ldi	r30, 0x35	; 53
    43e4:	f0 e0       	ldi	r31, 0x00	; 0
    43e6:	80 81       	ld	r24, Z
    43e8:	87 7f       	andi	r24, 0xF7	; 247
    43ea:	8c 93       	st	X, r24
	SET_BIT(PORTC,4);	//--- 2A High
    43ec:	a5 e3       	ldi	r26, 0x35	; 53
    43ee:	b0 e0       	ldi	r27, 0x00	; 0
    43f0:	e5 e3       	ldi	r30, 0x35	; 53
    43f2:	f0 e0       	ldi	r31, 0x00	; 0
    43f4:	80 81       	ld	r24, Z
    43f6:	80 61       	ori	r24, 0x10	; 16
    43f8:	8c 93       	st	X, r24
}
    43fa:	cf 91       	pop	r28
    43fc:	df 91       	pop	r29
    43fe:	08 95       	ret

00004400 <H_Bridge_vM1AndM2TurnLeft>:
void H_Bridge_vM1AndM2TurnLeft(){
    4400:	df 93       	push	r29
    4402:	cf 93       	push	r28
    4404:	cd b7       	in	r28, 0x3d	; 61
    4406:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(PORTD,4);	//--- EN2 High
    4408:	a2 e3       	ldi	r26, 0x32	; 50
    440a:	b0 e0       	ldi	r27, 0x00	; 0
    440c:	e2 e3       	ldi	r30, 0x32	; 50
    440e:	f0 e0       	ldi	r31, 0x00	; 0
    4410:	80 81       	ld	r24, Z
    4412:	80 61       	ori	r24, 0x10	; 16
    4414:	8c 93       	st	X, r24
	SET_BIT(PORTC,3);	//--- 1A High
    4416:	a5 e3       	ldi	r26, 0x35	; 53
    4418:	b0 e0       	ldi	r27, 0x00	; 0
    441a:	e5 e3       	ldi	r30, 0x35	; 53
    441c:	f0 e0       	ldi	r31, 0x00	; 0
    441e:	80 81       	ld	r24, Z
    4420:	88 60       	ori	r24, 0x08	; 8
    4422:	8c 93       	st	X, r24
	CLR_BIT(PORTC,4);	//--- 2A Low
    4424:	a5 e3       	ldi	r26, 0x35	; 53
    4426:	b0 e0       	ldi	r27, 0x00	; 0
    4428:	e5 e3       	ldi	r30, 0x35	; 53
    442a:	f0 e0       	ldi	r31, 0x00	; 0
    442c:	80 81       	ld	r24, Z
    442e:	8f 7e       	andi	r24, 0xEF	; 239
    4430:	8c 93       	st	X, r24
}
    4432:	cf 91       	pop	r28
    4434:	df 91       	pop	r29
    4436:	08 95       	ret

00004438 <H_Bridge_vM1AndM2FastStop>:
void H_Bridge_vM1AndM2FastStop(){
    4438:	df 93       	push	r29
    443a:	cf 93       	push	r28
    443c:	cd b7       	in	r28, 0x3d	; 61
    443e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(PORTD,4);	//--- EN2 Low
    4440:	a2 e3       	ldi	r26, 0x32	; 50
    4442:	b0 e0       	ldi	r27, 0x00	; 0
    4444:	e2 e3       	ldi	r30, 0x32	; 50
    4446:	f0 e0       	ldi	r31, 0x00	; 0
    4448:	80 81       	ld	r24, Z
    444a:	8f 7e       	andi	r24, 0xEF	; 239
    444c:	8c 93       	st	X, r24
}
    444e:	cf 91       	pop	r28
    4450:	df 91       	pop	r29
    4452:	08 95       	ret

00004454 <APP_vPrintNumberSS>:
 *      Author: a7medDawoud
 */
#include "APP.h"

//------------ this function take two u8 numbers and print them on the 7Segme at the same time-----
void APP_vPrintNumberSS(u8 loc_u8SegmaPrintNumber1, u8 loc_u8SegmaPrintNumber2){
    4454:	df 93       	push	r29
    4456:	cf 93       	push	r28
    4458:	cd b7       	in	r28, 0x3d	; 61
    445a:	de b7       	in	r29, 0x3e	; 62
    445c:	a0 97       	sbiw	r28, 0x20	; 32
    445e:	0f b6       	in	r0, 0x3f	; 63
    4460:	f8 94       	cli
    4462:	de bf       	out	0x3e, r29	; 62
    4464:	0f be       	out	0x3f, r0	; 63
    4466:	cd bf       	out	0x3d, r28	; 61
    4468:	8f 8f       	std	Y+31, r24	; 0x1f
    446a:	68 a3       	std	Y+32, r22	; 0x20
	_7Segma_vInit();
    446c:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <_7Segma_vInit>
	u16 loc_delay;
	for(loc_delay=0;loc_delay<100;loc_delay++){
    4470:	1e 8e       	std	Y+30, r1	; 0x1e
    4472:	1d 8e       	std	Y+29, r1	; 0x1d
    4474:	ef c0       	rjmp	.+478    	; 0x4654 <APP_vPrintNumberSS+0x200>
		_7Segma_vPrintNumber1(loc_u8SegmaPrintNumber1);
    4476:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4478:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <_7Segma_vPrintNumber1>
    447c:	80 e0       	ldi	r24, 0x00	; 0
    447e:	90 e0       	ldi	r25, 0x00	; 0
    4480:	a0 e8       	ldi	r26, 0x80	; 128
    4482:	bf e3       	ldi	r27, 0x3F	; 63
    4484:	89 8f       	std	Y+25, r24	; 0x19
    4486:	9a 8f       	std	Y+26, r25	; 0x1a
    4488:	ab 8f       	std	Y+27, r26	; 0x1b
    448a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    448c:	69 8d       	ldd	r22, Y+25	; 0x19
    448e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4490:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4492:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4494:	20 e0       	ldi	r18, 0x00	; 0
    4496:	30 e0       	ldi	r19, 0x00	; 0
    4498:	4a e7       	ldi	r20, 0x7A	; 122
    449a:	55 e4       	ldi	r21, 0x45	; 69
    449c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44a0:	dc 01       	movw	r26, r24
    44a2:	cb 01       	movw	r24, r22
    44a4:	8d 8b       	std	Y+21, r24	; 0x15
    44a6:	9e 8b       	std	Y+22, r25	; 0x16
    44a8:	af 8b       	std	Y+23, r26	; 0x17
    44aa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    44ac:	6d 89       	ldd	r22, Y+21	; 0x15
    44ae:	7e 89       	ldd	r23, Y+22	; 0x16
    44b0:	8f 89       	ldd	r24, Y+23	; 0x17
    44b2:	98 8d       	ldd	r25, Y+24	; 0x18
    44b4:	20 e0       	ldi	r18, 0x00	; 0
    44b6:	30 e0       	ldi	r19, 0x00	; 0
    44b8:	40 e8       	ldi	r20, 0x80	; 128
    44ba:	5f e3       	ldi	r21, 0x3F	; 63
    44bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    44c0:	88 23       	and	r24, r24
    44c2:	2c f4       	brge	.+10     	; 0x44ce <APP_vPrintNumberSS+0x7a>
		__ticks = 1;
    44c4:	81 e0       	ldi	r24, 0x01	; 1
    44c6:	90 e0       	ldi	r25, 0x00	; 0
    44c8:	9c 8b       	std	Y+20, r25	; 0x14
    44ca:	8b 8b       	std	Y+19, r24	; 0x13
    44cc:	3f c0       	rjmp	.+126    	; 0x454c <APP_vPrintNumberSS+0xf8>
	else if (__tmp > 65535)
    44ce:	6d 89       	ldd	r22, Y+21	; 0x15
    44d0:	7e 89       	ldd	r23, Y+22	; 0x16
    44d2:	8f 89       	ldd	r24, Y+23	; 0x17
    44d4:	98 8d       	ldd	r25, Y+24	; 0x18
    44d6:	20 e0       	ldi	r18, 0x00	; 0
    44d8:	3f ef       	ldi	r19, 0xFF	; 255
    44da:	4f e7       	ldi	r20, 0x7F	; 127
    44dc:	57 e4       	ldi	r21, 0x47	; 71
    44de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    44e2:	18 16       	cp	r1, r24
    44e4:	4c f5       	brge	.+82     	; 0x4538 <APP_vPrintNumberSS+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44e6:	69 8d       	ldd	r22, Y+25	; 0x19
    44e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    44ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    44ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    44ee:	20 e0       	ldi	r18, 0x00	; 0
    44f0:	30 e0       	ldi	r19, 0x00	; 0
    44f2:	40 e2       	ldi	r20, 0x20	; 32
    44f4:	51 e4       	ldi	r21, 0x41	; 65
    44f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44fa:	dc 01       	movw	r26, r24
    44fc:	cb 01       	movw	r24, r22
    44fe:	bc 01       	movw	r22, r24
    4500:	cd 01       	movw	r24, r26
    4502:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4506:	dc 01       	movw	r26, r24
    4508:	cb 01       	movw	r24, r22
    450a:	9c 8b       	std	Y+20, r25	; 0x14
    450c:	8b 8b       	std	Y+19, r24	; 0x13
    450e:	0f c0       	rjmp	.+30     	; 0x452e <APP_vPrintNumberSS+0xda>
    4510:	80 e9       	ldi	r24, 0x90	; 144
    4512:	91 e0       	ldi	r25, 0x01	; 1
    4514:	9a 8b       	std	Y+18, r25	; 0x12
    4516:	89 8b       	std	Y+17, r24	; 0x11
    4518:	89 89       	ldd	r24, Y+17	; 0x11
    451a:	9a 89       	ldd	r25, Y+18	; 0x12
    451c:	01 97       	sbiw	r24, 0x01	; 1
    451e:	f1 f7       	brne	.-4      	; 0x451c <APP_vPrintNumberSS+0xc8>
    4520:	9a 8b       	std	Y+18, r25	; 0x12
    4522:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4524:	8b 89       	ldd	r24, Y+19	; 0x13
    4526:	9c 89       	ldd	r25, Y+20	; 0x14
    4528:	01 97       	sbiw	r24, 0x01	; 1
    452a:	9c 8b       	std	Y+20, r25	; 0x14
    452c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    452e:	8b 89       	ldd	r24, Y+19	; 0x13
    4530:	9c 89       	ldd	r25, Y+20	; 0x14
    4532:	00 97       	sbiw	r24, 0x00	; 0
    4534:	69 f7       	brne	.-38     	; 0x4510 <APP_vPrintNumberSS+0xbc>
    4536:	14 c0       	rjmp	.+40     	; 0x4560 <APP_vPrintNumberSS+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4538:	6d 89       	ldd	r22, Y+21	; 0x15
    453a:	7e 89       	ldd	r23, Y+22	; 0x16
    453c:	8f 89       	ldd	r24, Y+23	; 0x17
    453e:	98 8d       	ldd	r25, Y+24	; 0x18
    4540:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4544:	dc 01       	movw	r26, r24
    4546:	cb 01       	movw	r24, r22
    4548:	9c 8b       	std	Y+20, r25	; 0x14
    454a:	8b 8b       	std	Y+19, r24	; 0x13
    454c:	8b 89       	ldd	r24, Y+19	; 0x13
    454e:	9c 89       	ldd	r25, Y+20	; 0x14
    4550:	98 8b       	std	Y+16, r25	; 0x10
    4552:	8f 87       	std	Y+15, r24	; 0x0f
    4554:	8f 85       	ldd	r24, Y+15	; 0x0f
    4556:	98 89       	ldd	r25, Y+16	; 0x10
    4558:	01 97       	sbiw	r24, 0x01	; 1
    455a:	f1 f7       	brne	.-4      	; 0x4558 <APP_vPrintNumberSS+0x104>
    455c:	98 8b       	std	Y+16, r25	; 0x10
    455e:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		_7Segma_vPrintNumber2(loc_u8SegmaPrintNumber2);
    4560:	88 a1       	ldd	r24, Y+32	; 0x20
    4562:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <_7Segma_vPrintNumber2>
    4566:	80 e0       	ldi	r24, 0x00	; 0
    4568:	90 e0       	ldi	r25, 0x00	; 0
    456a:	a0 e8       	ldi	r26, 0x80	; 128
    456c:	bf e3       	ldi	r27, 0x3F	; 63
    456e:	8b 87       	std	Y+11, r24	; 0x0b
    4570:	9c 87       	std	Y+12, r25	; 0x0c
    4572:	ad 87       	std	Y+13, r26	; 0x0d
    4574:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4576:	6b 85       	ldd	r22, Y+11	; 0x0b
    4578:	7c 85       	ldd	r23, Y+12	; 0x0c
    457a:	8d 85       	ldd	r24, Y+13	; 0x0d
    457c:	9e 85       	ldd	r25, Y+14	; 0x0e
    457e:	20 e0       	ldi	r18, 0x00	; 0
    4580:	30 e0       	ldi	r19, 0x00	; 0
    4582:	4a e7       	ldi	r20, 0x7A	; 122
    4584:	55 e4       	ldi	r21, 0x45	; 69
    4586:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    458a:	dc 01       	movw	r26, r24
    458c:	cb 01       	movw	r24, r22
    458e:	8f 83       	std	Y+7, r24	; 0x07
    4590:	98 87       	std	Y+8, r25	; 0x08
    4592:	a9 87       	std	Y+9, r26	; 0x09
    4594:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4596:	6f 81       	ldd	r22, Y+7	; 0x07
    4598:	78 85       	ldd	r23, Y+8	; 0x08
    459a:	89 85       	ldd	r24, Y+9	; 0x09
    459c:	9a 85       	ldd	r25, Y+10	; 0x0a
    459e:	20 e0       	ldi	r18, 0x00	; 0
    45a0:	30 e0       	ldi	r19, 0x00	; 0
    45a2:	40 e8       	ldi	r20, 0x80	; 128
    45a4:	5f e3       	ldi	r21, 0x3F	; 63
    45a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    45aa:	88 23       	and	r24, r24
    45ac:	2c f4       	brge	.+10     	; 0x45b8 <APP_vPrintNumberSS+0x164>
		__ticks = 1;
    45ae:	81 e0       	ldi	r24, 0x01	; 1
    45b0:	90 e0       	ldi	r25, 0x00	; 0
    45b2:	9e 83       	std	Y+6, r25	; 0x06
    45b4:	8d 83       	std	Y+5, r24	; 0x05
    45b6:	3f c0       	rjmp	.+126    	; 0x4636 <APP_vPrintNumberSS+0x1e2>
	else if (__tmp > 65535)
    45b8:	6f 81       	ldd	r22, Y+7	; 0x07
    45ba:	78 85       	ldd	r23, Y+8	; 0x08
    45bc:	89 85       	ldd	r24, Y+9	; 0x09
    45be:	9a 85       	ldd	r25, Y+10	; 0x0a
    45c0:	20 e0       	ldi	r18, 0x00	; 0
    45c2:	3f ef       	ldi	r19, 0xFF	; 255
    45c4:	4f e7       	ldi	r20, 0x7F	; 127
    45c6:	57 e4       	ldi	r21, 0x47	; 71
    45c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    45cc:	18 16       	cp	r1, r24
    45ce:	4c f5       	brge	.+82     	; 0x4622 <APP_vPrintNumberSS+0x1ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    45d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    45d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    45d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    45d8:	20 e0       	ldi	r18, 0x00	; 0
    45da:	30 e0       	ldi	r19, 0x00	; 0
    45dc:	40 e2       	ldi	r20, 0x20	; 32
    45de:	51 e4       	ldi	r21, 0x41	; 65
    45e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45e4:	dc 01       	movw	r26, r24
    45e6:	cb 01       	movw	r24, r22
    45e8:	bc 01       	movw	r22, r24
    45ea:	cd 01       	movw	r24, r26
    45ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45f0:	dc 01       	movw	r26, r24
    45f2:	cb 01       	movw	r24, r22
    45f4:	9e 83       	std	Y+6, r25	; 0x06
    45f6:	8d 83       	std	Y+5, r24	; 0x05
    45f8:	0f c0       	rjmp	.+30     	; 0x4618 <APP_vPrintNumberSS+0x1c4>
    45fa:	80 e9       	ldi	r24, 0x90	; 144
    45fc:	91 e0       	ldi	r25, 0x01	; 1
    45fe:	9c 83       	std	Y+4, r25	; 0x04
    4600:	8b 83       	std	Y+3, r24	; 0x03
    4602:	8b 81       	ldd	r24, Y+3	; 0x03
    4604:	9c 81       	ldd	r25, Y+4	; 0x04
    4606:	01 97       	sbiw	r24, 0x01	; 1
    4608:	f1 f7       	brne	.-4      	; 0x4606 <APP_vPrintNumberSS+0x1b2>
    460a:	9c 83       	std	Y+4, r25	; 0x04
    460c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    460e:	8d 81       	ldd	r24, Y+5	; 0x05
    4610:	9e 81       	ldd	r25, Y+6	; 0x06
    4612:	01 97       	sbiw	r24, 0x01	; 1
    4614:	9e 83       	std	Y+6, r25	; 0x06
    4616:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4618:	8d 81       	ldd	r24, Y+5	; 0x05
    461a:	9e 81       	ldd	r25, Y+6	; 0x06
    461c:	00 97       	sbiw	r24, 0x00	; 0
    461e:	69 f7       	brne	.-38     	; 0x45fa <APP_vPrintNumberSS+0x1a6>
    4620:	14 c0       	rjmp	.+40     	; 0x464a <APP_vPrintNumberSS+0x1f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4622:	6f 81       	ldd	r22, Y+7	; 0x07
    4624:	78 85       	ldd	r23, Y+8	; 0x08
    4626:	89 85       	ldd	r24, Y+9	; 0x09
    4628:	9a 85       	ldd	r25, Y+10	; 0x0a
    462a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    462e:	dc 01       	movw	r26, r24
    4630:	cb 01       	movw	r24, r22
    4632:	9e 83       	std	Y+6, r25	; 0x06
    4634:	8d 83       	std	Y+5, r24	; 0x05
    4636:	8d 81       	ldd	r24, Y+5	; 0x05
    4638:	9e 81       	ldd	r25, Y+6	; 0x06
    463a:	9a 83       	std	Y+2, r25	; 0x02
    463c:	89 83       	std	Y+1, r24	; 0x01
    463e:	89 81       	ldd	r24, Y+1	; 0x01
    4640:	9a 81       	ldd	r25, Y+2	; 0x02
    4642:	01 97       	sbiw	r24, 0x01	; 1
    4644:	f1 f7       	brne	.-4      	; 0x4642 <APP_vPrintNumberSS+0x1ee>
    4646:	9a 83       	std	Y+2, r25	; 0x02
    4648:	89 83       	std	Y+1, r24	; 0x01

//------------ this function take two u8 numbers and print them on the 7Segme at the same time-----
void APP_vPrintNumberSS(u8 loc_u8SegmaPrintNumber1, u8 loc_u8SegmaPrintNumber2){
	_7Segma_vInit();
	u16 loc_delay;
	for(loc_delay=0;loc_delay<100;loc_delay++){
    464a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    464c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    464e:	01 96       	adiw	r24, 0x01	; 1
    4650:	9e 8f       	std	Y+30, r25	; 0x1e
    4652:	8d 8f       	std	Y+29, r24	; 0x1d
    4654:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4656:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4658:	84 36       	cpi	r24, 0x64	; 100
    465a:	91 05       	cpc	r25, r1
    465c:	08 f4       	brcc	.+2      	; 0x4660 <APP_vPrintNumberSS+0x20c>
    465e:	0b cf       	rjmp	.-490    	; 0x4476 <APP_vPrintNumberSS+0x22>
		_7Segma_vPrintNumber1(loc_u8SegmaPrintNumber1);
		_delay_ms(1);
		_7Segma_vPrintNumber2(loc_u8SegmaPrintNumber2);
		_delay_ms(1);
	}
}
    4660:	a0 96       	adiw	r28, 0x20	; 32
    4662:	0f b6       	in	r0, 0x3f	; 63
    4664:	f8 94       	cli
    4666:	de bf       	out	0x3e, r29	; 62
    4668:	0f be       	out	0x3f, r0	; 63
    466a:	cd bf       	out	0x3d, r28	; 61
    466c:	cf 91       	pop	r28
    466e:	df 91       	pop	r29
    4670:	08 95       	ret

00004672 <APP_vPrintTwoDigitNumberSS>:
void APP_vPrintTwoDigitNumberSS(u8 loc_u8SegmaPrintNumber){
    4672:	df 93       	push	r29
    4674:	cf 93       	push	r28
    4676:	0f 92       	push	r0
    4678:	cd b7       	in	r28, 0x3d	; 61
    467a:	de b7       	in	r29, 0x3e	; 62
    467c:	89 83       	std	Y+1, r24	; 0x01
	APP_vPrintNumberSS(loc_u8SegmaPrintNumber/10, loc_u8SegmaPrintNumber%10);
    467e:	89 81       	ldd	r24, Y+1	; 0x01
    4680:	9a e0       	ldi	r25, 0x0A	; 10
    4682:	69 2f       	mov	r22, r25
    4684:	0e 94 ca 34 	call	0x6994	; 0x6994 <__udivmodqi4>
    4688:	28 2f       	mov	r18, r24
    468a:	89 81       	ldd	r24, Y+1	; 0x01
    468c:	9a e0       	ldi	r25, 0x0A	; 10
    468e:	69 2f       	mov	r22, r25
    4690:	0e 94 ca 34 	call	0x6994	; 0x6994 <__udivmodqi4>
    4694:	89 2f       	mov	r24, r25
    4696:	98 2f       	mov	r25, r24
    4698:	82 2f       	mov	r24, r18
    469a:	69 2f       	mov	r22, r25
    469c:	0e 94 2a 22 	call	0x4454	; 0x4454 <APP_vPrintNumberSS>
}
    46a0:	0f 90       	pop	r0
    46a2:	cf 91       	pop	r28
    46a4:	df 91       	pop	r29
    46a6:	08 95       	ret

000046a8 <APP_vPrintDecimalNumberSS>:
//------------ this function take a f32 number and print it on the 7Segme-----
void APP_vPrintDecimalNumberSS(f32 loc_f32SegmaDecimalNumber){
    46a8:	df 93       	push	r29
    46aa:	cf 93       	push	r28
    46ac:	00 d0       	rcall	.+0      	; 0x46ae <APP_vPrintDecimalNumberSS+0x6>
    46ae:	00 d0       	rcall	.+0      	; 0x46b0 <APP_vPrintDecimalNumberSS+0x8>
    46b0:	00 d0       	rcall	.+0      	; 0x46b2 <APP_vPrintDecimalNumberSS+0xa>
    46b2:	cd b7       	in	r28, 0x3d	; 61
    46b4:	de b7       	in	r29, 0x3e	; 62
    46b6:	6b 83       	std	Y+3, r22	; 0x03
    46b8:	7c 83       	std	Y+4, r23	; 0x04
    46ba:	8d 83       	std	Y+5, r24	; 0x05
    46bc:	9e 83       	std	Y+6, r25	; 0x06
	//------------ DECIMAL POINT PIN------
	DIO_vSetPinDirection(PortB, Pin3, Pin_OutPut);
    46be:	81 e0       	ldi	r24, 0x01	; 1
    46c0:	63 e0       	ldi	r22, 0x03	; 3
    46c2:	41 e0       	ldi	r20, 0x01	; 1
    46c4:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <DIO_vSetPinDirection>
	u16 Loc_u16SegmaNumber=(loc_f32SegmaDecimalNumber*10);
    46c8:	6b 81       	ldd	r22, Y+3	; 0x03
    46ca:	7c 81       	ldd	r23, Y+4	; 0x04
    46cc:	8d 81       	ldd	r24, Y+5	; 0x05
    46ce:	9e 81       	ldd	r25, Y+6	; 0x06
    46d0:	20 e0       	ldi	r18, 0x00	; 0
    46d2:	30 e0       	ldi	r19, 0x00	; 0
    46d4:	40 e2       	ldi	r20, 0x20	; 32
    46d6:	51 e4       	ldi	r21, 0x41	; 65
    46d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46dc:	dc 01       	movw	r26, r24
    46de:	cb 01       	movw	r24, r22
    46e0:	bc 01       	movw	r22, r24
    46e2:	cd 01       	movw	r24, r26
    46e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46e8:	dc 01       	movw	r26, r24
    46ea:	cb 01       	movw	r24, r22
    46ec:	9a 83       	std	Y+2, r25	; 0x02
    46ee:	89 83       	std	Y+1, r24	; 0x01
	_7Segma_vEnableDot();
    46f0:	0e 94 31 15 	call	0x2a62	; 0x2a62 <_7Segma_vEnableDot>
	APP_vPrintNumberSS(Loc_u16SegmaNumber/10, Loc_u16SegmaNumber%10);
    46f4:	89 81       	ldd	r24, Y+1	; 0x01
    46f6:	9a 81       	ldd	r25, Y+2	; 0x02
    46f8:	2a e0       	ldi	r18, 0x0A	; 10
    46fa:	30 e0       	ldi	r19, 0x00	; 0
    46fc:	b9 01       	movw	r22, r18
    46fe:	0e 94 d6 34 	call	0x69ac	; 0x69ac <__udivmodhi4>
    4702:	cb 01       	movw	r24, r22
    4704:	48 2f       	mov	r20, r24
    4706:	89 81       	ldd	r24, Y+1	; 0x01
    4708:	9a 81       	ldd	r25, Y+2	; 0x02
    470a:	2a e0       	ldi	r18, 0x0A	; 10
    470c:	30 e0       	ldi	r19, 0x00	; 0
    470e:	b9 01       	movw	r22, r18
    4710:	0e 94 d6 34 	call	0x69ac	; 0x69ac <__udivmodhi4>
    4714:	98 2f       	mov	r25, r24
    4716:	84 2f       	mov	r24, r20
    4718:	69 2f       	mov	r22, r25
    471a:	0e 94 2a 22 	call	0x4454	; 0x4454 <APP_vPrintNumberSS>
	_7Segma_vDisbleDot();
    471e:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <_7Segma_vDisbleDot>
}
    4722:	26 96       	adiw	r28, 0x06	; 6
    4724:	0f b6       	in	r0, 0x3f	; 63
    4726:	f8 94       	cli
    4728:	de bf       	out	0x3e, r29	; 62
    472a:	0f be       	out	0x3f, r0	; 63
    472c:	cd bf       	out	0x3d, r28	; 61
    472e:	cf 91       	pop	r28
    4730:	df 91       	pop	r29
    4732:	08 95       	ret

00004734 <APP_vPrint0to99SS>:
//--------------- this function is used to print from 00 to 99--------
void APP_vPrint0to99SS(){
    4734:	df 93       	push	r29
    4736:	cf 93       	push	r28
    4738:	00 d0       	rcall	.+0      	; 0x473a <APP_vPrint0to99SS+0x6>
    473a:	cd b7       	in	r28, 0x3d	; 61
    473c:	de b7       	in	r29, 0x3e	; 62
	u8 Loc_Count,Loc_Count2;
	for(Loc_Count=0;Loc_Count<10;Loc_Count++){
    473e:	1a 82       	std	Y+2, r1	; 0x02
    4740:	0f c0       	rjmp	.+30     	; 0x4760 <APP_vPrint0to99SS+0x2c>
		for(Loc_Count2=0;Loc_Count2<10;Loc_Count2++){
    4742:	19 82       	std	Y+1, r1	; 0x01
    4744:	07 c0       	rjmp	.+14     	; 0x4754 <APP_vPrint0to99SS+0x20>
			APP_vPrintNumberSS(Loc_Count,Loc_Count2);
    4746:	8a 81       	ldd	r24, Y+2	; 0x02
    4748:	69 81       	ldd	r22, Y+1	; 0x01
    474a:	0e 94 2a 22 	call	0x4454	; 0x4454 <APP_vPrintNumberSS>
}
//--------------- this function is used to print from 00 to 99--------
void APP_vPrint0to99SS(){
	u8 Loc_Count,Loc_Count2;
	for(Loc_Count=0;Loc_Count<10;Loc_Count++){
		for(Loc_Count2=0;Loc_Count2<10;Loc_Count2++){
    474e:	89 81       	ldd	r24, Y+1	; 0x01
    4750:	8f 5f       	subi	r24, 0xFF	; 255
    4752:	89 83       	std	Y+1, r24	; 0x01
    4754:	89 81       	ldd	r24, Y+1	; 0x01
    4756:	8a 30       	cpi	r24, 0x0A	; 10
    4758:	b0 f3       	brcs	.-20     	; 0x4746 <APP_vPrint0to99SS+0x12>
	_7Segma_vDisbleDot();
}
//--------------- this function is used to print from 00 to 99--------
void APP_vPrint0to99SS(){
	u8 Loc_Count,Loc_Count2;
	for(Loc_Count=0;Loc_Count<10;Loc_Count++){
    475a:	8a 81       	ldd	r24, Y+2	; 0x02
    475c:	8f 5f       	subi	r24, 0xFF	; 255
    475e:	8a 83       	std	Y+2, r24	; 0x02
    4760:	8a 81       	ldd	r24, Y+2	; 0x02
    4762:	8a 30       	cpi	r24, 0x0A	; 10
    4764:	70 f3       	brcs	.-36     	; 0x4742 <APP_vPrint0to99SS+0xe>
		for(Loc_Count2=0;Loc_Count2<10;Loc_Count2++){
			APP_vPrintNumberSS(Loc_Count,Loc_Count2);
		}
	}
}
    4766:	0f 90       	pop	r0
    4768:	0f 90       	pop	r0
    476a:	cf 91       	pop	r28
    476c:	df 91       	pop	r29
    476e:	08 95       	ret

00004770 <APP_vPrint1MinuteSS>:
//--------------- this function is used to print 1 minute on the 7 segma--------
void APP_vPrint1MinuteSS(){
    4770:	df 93       	push	r29
    4772:	cf 93       	push	r28
    4774:	00 d0       	rcall	.+0      	; 0x4776 <APP_vPrint1MinuteSS+0x6>
    4776:	cd b7       	in	r28, 0x3d	; 61
    4778:	de b7       	in	r29, 0x3e	; 62
	u8 Loc_Count,loc_delay;
	for(Loc_Count=0;Loc_Count<=60;Loc_Count++){
    477a:	1a 82       	std	Y+2, r1	; 0x02
    477c:	0e c0       	rjmp	.+28     	; 0x479a <APP_vPrint1MinuteSS+0x2a>
		for(loc_delay=0;loc_delay<4;loc_delay++){
    477e:	19 82       	std	Y+1, r1	; 0x01
    4780:	06 c0       	rjmp	.+12     	; 0x478e <APP_vPrint1MinuteSS+0x1e>
			APP_vPrintTwoDigitNumberSS(Loc_Count);
    4782:	8a 81       	ldd	r24, Y+2	; 0x02
    4784:	0e 94 39 23 	call	0x4672	; 0x4672 <APP_vPrintTwoDigitNumberSS>
}
//--------------- this function is used to print 1 minute on the 7 segma--------
void APP_vPrint1MinuteSS(){
	u8 Loc_Count,loc_delay;
	for(Loc_Count=0;Loc_Count<=60;Loc_Count++){
		for(loc_delay=0;loc_delay<4;loc_delay++){
    4788:	89 81       	ldd	r24, Y+1	; 0x01
    478a:	8f 5f       	subi	r24, 0xFF	; 255
    478c:	89 83       	std	Y+1, r24	; 0x01
    478e:	89 81       	ldd	r24, Y+1	; 0x01
    4790:	84 30       	cpi	r24, 0x04	; 4
    4792:	b8 f3       	brcs	.-18     	; 0x4782 <APP_vPrint1MinuteSS+0x12>
	}
}
//--------------- this function is used to print 1 minute on the 7 segma--------
void APP_vPrint1MinuteSS(){
	u8 Loc_Count,loc_delay;
	for(Loc_Count=0;Loc_Count<=60;Loc_Count++){
    4794:	8a 81       	ldd	r24, Y+2	; 0x02
    4796:	8f 5f       	subi	r24, 0xFF	; 255
    4798:	8a 83       	std	Y+2, r24	; 0x02
    479a:	8a 81       	ldd	r24, Y+2	; 0x02
    479c:	8d 33       	cpi	r24, 0x3D	; 61
    479e:	78 f3       	brcs	.-34     	; 0x477e <APP_vPrint1MinuteSS+0xe>
		for(loc_delay=0;loc_delay<4;loc_delay++){
			APP_vPrintTwoDigitNumberSS(Loc_Count);
		}
	}
}
    47a0:	0f 90       	pop	r0
    47a2:	0f 90       	pop	r0
    47a4:	cf 91       	pop	r28
    47a6:	df 91       	pop	r29
    47a8:	08 95       	ret

000047aa <APP_vClickCounterPB>:
/*--------------- this function is used to count the
 * (number clicks on pushbutton 1 Subtracted from number clicks on pushbutton 2)
 * and print it on the 7Segma*/
void APP_vClickCounterPB(){
    47aa:	df 93       	push	r29
    47ac:	cf 93       	push	r28
    47ae:	0f 92       	push	r0
    47b0:	cd b7       	in	r28, 0x3d	; 61
    47b2:	de b7       	in	r29, 0x3e	; 62
	u8 Loc_Count;
	for(Loc_Count=0;Loc_Count<100;){
    47b4:	19 82       	std	Y+1, r1	; 0x01
    47b6:	22 c0       	rjmp	.+68     	; 0x47fc <APP_vClickCounterPB+0x52>
		if(PushButton_u8Button1()){
    47b8:	0e 94 19 16 	call	0x2c32	; 0x2c32 <PushButton_u8Button1>
    47bc:	88 23       	and	r24, r24
    47be:	51 f0       	breq	.+20     	; 0x47d4 <APP_vClickCounterPB+0x2a>
			Loc_Count++;
    47c0:	89 81       	ldd	r24, Y+1	; 0x01
    47c2:	8f 5f       	subi	r24, 0xFF	; 255
    47c4:	89 83       	std	Y+1, r24	; 0x01
			APP_vPrintTwoDigitNumberSS(Loc_Count);
    47c6:	89 81       	ldd	r24, Y+1	; 0x01
    47c8:	0e 94 39 23 	call	0x4672	; 0x4672 <APP_vPrintTwoDigitNumberSS>
			APP_vPrintTwoDigitNumberSS(Loc_Count);
    47cc:	89 81       	ldd	r24, Y+1	; 0x01
    47ce:	0e 94 39 23 	call	0x4672	; 0x4672 <APP_vPrintTwoDigitNumberSS>
    47d2:	14 c0       	rjmp	.+40     	; 0x47fc <APP_vClickCounterPB+0x52>
		}
		else if(PushButton_u8Button2()&&Loc_Count!=0){
    47d4:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <PushButton_u8Button2>
    47d8:	88 23       	and	r24, r24
    47da:	69 f0       	breq	.+26     	; 0x47f6 <APP_vClickCounterPB+0x4c>
    47dc:	89 81       	ldd	r24, Y+1	; 0x01
    47de:	88 23       	and	r24, r24
    47e0:	51 f0       	breq	.+20     	; 0x47f6 <APP_vClickCounterPB+0x4c>
			Loc_Count--;
    47e2:	89 81       	ldd	r24, Y+1	; 0x01
    47e4:	81 50       	subi	r24, 0x01	; 1
    47e6:	89 83       	std	Y+1, r24	; 0x01
			APP_vPrintTwoDigitNumberSS(Loc_Count);
    47e8:	89 81       	ldd	r24, Y+1	; 0x01
    47ea:	0e 94 39 23 	call	0x4672	; 0x4672 <APP_vPrintTwoDigitNumberSS>
			APP_vPrintTwoDigitNumberSS(Loc_Count);
    47ee:	89 81       	ldd	r24, Y+1	; 0x01
    47f0:	0e 94 39 23 	call	0x4672	; 0x4672 <APP_vPrintTwoDigitNumberSS>
    47f4:	03 c0       	rjmp	.+6      	; 0x47fc <APP_vClickCounterPB+0x52>
		}
		else{
			APP_vPrintTwoDigitNumberSS(Loc_Count);
    47f6:	89 81       	ldd	r24, Y+1	; 0x01
    47f8:	0e 94 39 23 	call	0x4672	; 0x4672 <APP_vPrintTwoDigitNumberSS>
/*--------------- this function is used to count the
 * (number clicks on pushbutton 1 Subtracted from number clicks on pushbutton 2)
 * and print it on the 7Segma*/
void APP_vClickCounterPB(){
	u8 Loc_Count;
	for(Loc_Count=0;Loc_Count<100;){
    47fc:	89 81       	ldd	r24, Y+1	; 0x01
    47fe:	84 36       	cpi	r24, 0x64	; 100
    4800:	d8 f2       	brcs	.-74     	; 0x47b8 <APP_vClickCounterPB+0xe>
		}
		else{
			APP_vPrintTwoDigitNumberSS(Loc_Count);
		}
	}
}
    4802:	0f 90       	pop	r0
    4804:	cf 91       	pop	r28
    4806:	df 91       	pop	r29
    4808:	08 95       	ret

0000480a <APP_v3Leds1MinuteEachSS>:
/*---------this function is used to count 3 minutes every minute a led will turn on--------*/
void APP_v3Leds1MinuteEachSS(){
    480a:	df 93       	push	r29
    480c:	cf 93       	push	r28
    480e:	cd b7       	in	r28, 0x3d	; 61
    4810:	de b7       	in	r29, 0x3e	; 62
    4812:	6c 97       	sbiw	r28, 0x1c	; 28
    4814:	0f b6       	in	r0, 0x3f	; 63
    4816:	f8 94       	cli
    4818:	de bf       	out	0x3e, r29	; 62
    481a:	0f be       	out	0x3f, r0	; 63
    481c:	cd bf       	out	0x3d, r28	; 61
	APP_vPrint1MinuteSS();
    481e:	0e 94 b8 23 	call	0x4770	; 0x4770 <APP_vPrint1MinuteSS>
	LedAndBuzzer_vLed0Open();
    4822:	0e 94 56 13 	call	0x26ac	; 0x26ac <LedAndBuzzer_vLed0Open>
	APP_vPrint1MinuteSS();
    4826:	0e 94 b8 23 	call	0x4770	; 0x4770 <APP_vPrint1MinuteSS>
	LedAndBuzzer_vLed1Open();
    482a:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LedAndBuzzer_vLed1Open>
	APP_vPrint1MinuteSS();
    482e:	0e 94 b8 23 	call	0x4770	; 0x4770 <APP_vPrint1MinuteSS>
	LedAndBuzzer_vLed2Open();
    4832:	0e 94 90 13 	call	0x2720	; 0x2720 <LedAndBuzzer_vLed2Open>
    4836:	80 e0       	ldi	r24, 0x00	; 0
    4838:	90 e0       	ldi	r25, 0x00	; 0
    483a:	aa e7       	ldi	r26, 0x7A	; 122
    483c:	b3 e4       	ldi	r27, 0x43	; 67
    483e:	89 8f       	std	Y+25, r24	; 0x19
    4840:	9a 8f       	std	Y+26, r25	; 0x1a
    4842:	ab 8f       	std	Y+27, r26	; 0x1b
    4844:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4846:	69 8d       	ldd	r22, Y+25	; 0x19
    4848:	7a 8d       	ldd	r23, Y+26	; 0x1a
    484a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    484c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    484e:	20 e0       	ldi	r18, 0x00	; 0
    4850:	30 e0       	ldi	r19, 0x00	; 0
    4852:	4a e7       	ldi	r20, 0x7A	; 122
    4854:	55 e4       	ldi	r21, 0x45	; 69
    4856:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    485a:	dc 01       	movw	r26, r24
    485c:	cb 01       	movw	r24, r22
    485e:	8d 8b       	std	Y+21, r24	; 0x15
    4860:	9e 8b       	std	Y+22, r25	; 0x16
    4862:	af 8b       	std	Y+23, r26	; 0x17
    4864:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4866:	6d 89       	ldd	r22, Y+21	; 0x15
    4868:	7e 89       	ldd	r23, Y+22	; 0x16
    486a:	8f 89       	ldd	r24, Y+23	; 0x17
    486c:	98 8d       	ldd	r25, Y+24	; 0x18
    486e:	20 e0       	ldi	r18, 0x00	; 0
    4870:	30 e0       	ldi	r19, 0x00	; 0
    4872:	40 e8       	ldi	r20, 0x80	; 128
    4874:	5f e3       	ldi	r21, 0x3F	; 63
    4876:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    487a:	88 23       	and	r24, r24
    487c:	2c f4       	brge	.+10     	; 0x4888 <APP_v3Leds1MinuteEachSS+0x7e>
		__ticks = 1;
    487e:	81 e0       	ldi	r24, 0x01	; 1
    4880:	90 e0       	ldi	r25, 0x00	; 0
    4882:	9c 8b       	std	Y+20, r25	; 0x14
    4884:	8b 8b       	std	Y+19, r24	; 0x13
    4886:	3f c0       	rjmp	.+126    	; 0x4906 <APP_v3Leds1MinuteEachSS+0xfc>
	else if (__tmp > 65535)
    4888:	6d 89       	ldd	r22, Y+21	; 0x15
    488a:	7e 89       	ldd	r23, Y+22	; 0x16
    488c:	8f 89       	ldd	r24, Y+23	; 0x17
    488e:	98 8d       	ldd	r25, Y+24	; 0x18
    4890:	20 e0       	ldi	r18, 0x00	; 0
    4892:	3f ef       	ldi	r19, 0xFF	; 255
    4894:	4f e7       	ldi	r20, 0x7F	; 127
    4896:	57 e4       	ldi	r21, 0x47	; 71
    4898:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    489c:	18 16       	cp	r1, r24
    489e:	4c f5       	brge	.+82     	; 0x48f2 <APP_v3Leds1MinuteEachSS+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    48a0:	69 8d       	ldd	r22, Y+25	; 0x19
    48a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    48a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    48a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    48a8:	20 e0       	ldi	r18, 0x00	; 0
    48aa:	30 e0       	ldi	r19, 0x00	; 0
    48ac:	40 e2       	ldi	r20, 0x20	; 32
    48ae:	51 e4       	ldi	r21, 0x41	; 65
    48b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48b4:	dc 01       	movw	r26, r24
    48b6:	cb 01       	movw	r24, r22
    48b8:	bc 01       	movw	r22, r24
    48ba:	cd 01       	movw	r24, r26
    48bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48c0:	dc 01       	movw	r26, r24
    48c2:	cb 01       	movw	r24, r22
    48c4:	9c 8b       	std	Y+20, r25	; 0x14
    48c6:	8b 8b       	std	Y+19, r24	; 0x13
    48c8:	0f c0       	rjmp	.+30     	; 0x48e8 <APP_v3Leds1MinuteEachSS+0xde>
    48ca:	80 e9       	ldi	r24, 0x90	; 144
    48cc:	91 e0       	ldi	r25, 0x01	; 1
    48ce:	9a 8b       	std	Y+18, r25	; 0x12
    48d0:	89 8b       	std	Y+17, r24	; 0x11
    48d2:	89 89       	ldd	r24, Y+17	; 0x11
    48d4:	9a 89       	ldd	r25, Y+18	; 0x12
    48d6:	01 97       	sbiw	r24, 0x01	; 1
    48d8:	f1 f7       	brne	.-4      	; 0x48d6 <APP_v3Leds1MinuteEachSS+0xcc>
    48da:	9a 8b       	std	Y+18, r25	; 0x12
    48dc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48de:	8b 89       	ldd	r24, Y+19	; 0x13
    48e0:	9c 89       	ldd	r25, Y+20	; 0x14
    48e2:	01 97       	sbiw	r24, 0x01	; 1
    48e4:	9c 8b       	std	Y+20, r25	; 0x14
    48e6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48e8:	8b 89       	ldd	r24, Y+19	; 0x13
    48ea:	9c 89       	ldd	r25, Y+20	; 0x14
    48ec:	00 97       	sbiw	r24, 0x00	; 0
    48ee:	69 f7       	brne	.-38     	; 0x48ca <APP_v3Leds1MinuteEachSS+0xc0>
    48f0:	14 c0       	rjmp	.+40     	; 0x491a <APP_v3Leds1MinuteEachSS+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48f2:	6d 89       	ldd	r22, Y+21	; 0x15
    48f4:	7e 89       	ldd	r23, Y+22	; 0x16
    48f6:	8f 89       	ldd	r24, Y+23	; 0x17
    48f8:	98 8d       	ldd	r25, Y+24	; 0x18
    48fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48fe:	dc 01       	movw	r26, r24
    4900:	cb 01       	movw	r24, r22
    4902:	9c 8b       	std	Y+20, r25	; 0x14
    4904:	8b 8b       	std	Y+19, r24	; 0x13
    4906:	8b 89       	ldd	r24, Y+19	; 0x13
    4908:	9c 89       	ldd	r25, Y+20	; 0x14
    490a:	98 8b       	std	Y+16, r25	; 0x10
    490c:	8f 87       	std	Y+15, r24	; 0x0f
    490e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4910:	98 89       	ldd	r25, Y+16	; 0x10
    4912:	01 97       	sbiw	r24, 0x01	; 1
    4914:	f1 f7       	brne	.-4      	; 0x4912 <APP_v3Leds1MinuteEachSS+0x108>
    4916:	98 8b       	std	Y+16, r25	; 0x10
    4918:	8f 87       	std	Y+15, r24	; 0x0f
    491a:	80 e0       	ldi	r24, 0x00	; 0
    491c:	90 e0       	ldi	r25, 0x00	; 0
    491e:	aa e7       	ldi	r26, 0x7A	; 122
    4920:	b3 e4       	ldi	r27, 0x43	; 67
    4922:	8b 87       	std	Y+11, r24	; 0x0b
    4924:	9c 87       	std	Y+12, r25	; 0x0c
    4926:	ad 87       	std	Y+13, r26	; 0x0d
    4928:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    492a:	6b 85       	ldd	r22, Y+11	; 0x0b
    492c:	7c 85       	ldd	r23, Y+12	; 0x0c
    492e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4930:	9e 85       	ldd	r25, Y+14	; 0x0e
    4932:	20 e0       	ldi	r18, 0x00	; 0
    4934:	30 e0       	ldi	r19, 0x00	; 0
    4936:	4a e7       	ldi	r20, 0x7A	; 122
    4938:	55 e4       	ldi	r21, 0x45	; 69
    493a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    493e:	dc 01       	movw	r26, r24
    4940:	cb 01       	movw	r24, r22
    4942:	8f 83       	std	Y+7, r24	; 0x07
    4944:	98 87       	std	Y+8, r25	; 0x08
    4946:	a9 87       	std	Y+9, r26	; 0x09
    4948:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    494a:	6f 81       	ldd	r22, Y+7	; 0x07
    494c:	78 85       	ldd	r23, Y+8	; 0x08
    494e:	89 85       	ldd	r24, Y+9	; 0x09
    4950:	9a 85       	ldd	r25, Y+10	; 0x0a
    4952:	20 e0       	ldi	r18, 0x00	; 0
    4954:	30 e0       	ldi	r19, 0x00	; 0
    4956:	40 e8       	ldi	r20, 0x80	; 128
    4958:	5f e3       	ldi	r21, 0x3F	; 63
    495a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    495e:	88 23       	and	r24, r24
    4960:	2c f4       	brge	.+10     	; 0x496c <APP_v3Leds1MinuteEachSS+0x162>
		__ticks = 1;
    4962:	81 e0       	ldi	r24, 0x01	; 1
    4964:	90 e0       	ldi	r25, 0x00	; 0
    4966:	9e 83       	std	Y+6, r25	; 0x06
    4968:	8d 83       	std	Y+5, r24	; 0x05
    496a:	3f c0       	rjmp	.+126    	; 0x49ea <APP_v3Leds1MinuteEachSS+0x1e0>
	else if (__tmp > 65535)
    496c:	6f 81       	ldd	r22, Y+7	; 0x07
    496e:	78 85       	ldd	r23, Y+8	; 0x08
    4970:	89 85       	ldd	r24, Y+9	; 0x09
    4972:	9a 85       	ldd	r25, Y+10	; 0x0a
    4974:	20 e0       	ldi	r18, 0x00	; 0
    4976:	3f ef       	ldi	r19, 0xFF	; 255
    4978:	4f e7       	ldi	r20, 0x7F	; 127
    497a:	57 e4       	ldi	r21, 0x47	; 71
    497c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4980:	18 16       	cp	r1, r24
    4982:	4c f5       	brge	.+82     	; 0x49d6 <APP_v3Leds1MinuteEachSS+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4984:	6b 85       	ldd	r22, Y+11	; 0x0b
    4986:	7c 85       	ldd	r23, Y+12	; 0x0c
    4988:	8d 85       	ldd	r24, Y+13	; 0x0d
    498a:	9e 85       	ldd	r25, Y+14	; 0x0e
    498c:	20 e0       	ldi	r18, 0x00	; 0
    498e:	30 e0       	ldi	r19, 0x00	; 0
    4990:	40 e2       	ldi	r20, 0x20	; 32
    4992:	51 e4       	ldi	r21, 0x41	; 65
    4994:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4998:	dc 01       	movw	r26, r24
    499a:	cb 01       	movw	r24, r22
    499c:	bc 01       	movw	r22, r24
    499e:	cd 01       	movw	r24, r26
    49a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49a4:	dc 01       	movw	r26, r24
    49a6:	cb 01       	movw	r24, r22
    49a8:	9e 83       	std	Y+6, r25	; 0x06
    49aa:	8d 83       	std	Y+5, r24	; 0x05
    49ac:	0f c0       	rjmp	.+30     	; 0x49cc <APP_v3Leds1MinuteEachSS+0x1c2>
    49ae:	80 e9       	ldi	r24, 0x90	; 144
    49b0:	91 e0       	ldi	r25, 0x01	; 1
    49b2:	9c 83       	std	Y+4, r25	; 0x04
    49b4:	8b 83       	std	Y+3, r24	; 0x03
    49b6:	8b 81       	ldd	r24, Y+3	; 0x03
    49b8:	9c 81       	ldd	r25, Y+4	; 0x04
    49ba:	01 97       	sbiw	r24, 0x01	; 1
    49bc:	f1 f7       	brne	.-4      	; 0x49ba <APP_v3Leds1MinuteEachSS+0x1b0>
    49be:	9c 83       	std	Y+4, r25	; 0x04
    49c0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49c2:	8d 81       	ldd	r24, Y+5	; 0x05
    49c4:	9e 81       	ldd	r25, Y+6	; 0x06
    49c6:	01 97       	sbiw	r24, 0x01	; 1
    49c8:	9e 83       	std	Y+6, r25	; 0x06
    49ca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49cc:	8d 81       	ldd	r24, Y+5	; 0x05
    49ce:	9e 81       	ldd	r25, Y+6	; 0x06
    49d0:	00 97       	sbiw	r24, 0x00	; 0
    49d2:	69 f7       	brne	.-38     	; 0x49ae <APP_v3Leds1MinuteEachSS+0x1a4>
    49d4:	14 c0       	rjmp	.+40     	; 0x49fe <APP_v3Leds1MinuteEachSS+0x1f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49d6:	6f 81       	ldd	r22, Y+7	; 0x07
    49d8:	78 85       	ldd	r23, Y+8	; 0x08
    49da:	89 85       	ldd	r24, Y+9	; 0x09
    49dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    49de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49e2:	dc 01       	movw	r26, r24
    49e4:	cb 01       	movw	r24, r22
    49e6:	9e 83       	std	Y+6, r25	; 0x06
    49e8:	8d 83       	std	Y+5, r24	; 0x05
    49ea:	8d 81       	ldd	r24, Y+5	; 0x05
    49ec:	9e 81       	ldd	r25, Y+6	; 0x06
    49ee:	9a 83       	std	Y+2, r25	; 0x02
    49f0:	89 83       	std	Y+1, r24	; 0x01
    49f2:	89 81       	ldd	r24, Y+1	; 0x01
    49f4:	9a 81       	ldd	r25, Y+2	; 0x02
    49f6:	01 97       	sbiw	r24, 0x01	; 1
    49f8:	f1 f7       	brne	.-4      	; 0x49f6 <APP_v3Leds1MinuteEachSS+0x1ec>
    49fa:	9a 83       	std	Y+2, r25	; 0x02
    49fc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(250);
	_delay_ms(250);
	LedAndBuzzer_vLed0Close();
    49fe:	0e 94 67 13 	call	0x26ce	; 0x26ce <LedAndBuzzer_vLed0Close>
	LedAndBuzzer_vLed1Close();
    4a02:	0e 94 84 13 	call	0x2708	; 0x2708 <LedAndBuzzer_vLed1Close>
	LedAndBuzzer_vLed2Close();
    4a06:	0e 94 a1 13 	call	0x2742	; 0x2742 <LedAndBuzzer_vLed2Close>
}
    4a0a:	6c 96       	adiw	r28, 0x1c	; 28
    4a0c:	0f b6       	in	r0, 0x3f	; 63
    4a0e:	f8 94       	cli
    4a10:	de bf       	out	0x3e, r29	; 62
    4a12:	0f be       	out	0x3f, r0	; 63
    4a14:	cd bf       	out	0x3d, r28	; 61
    4a16:	cf 91       	pop	r28
    4a18:	df 91       	pop	r29
    4a1a:	08 95       	ret

00004a1c <APP_vTaskFinsh>:
/*------------ this function is used to turn all LEDs and buzzer 3 times
 * -------------- to show that Task is finished--------*/
void APP_vTaskFinsh(){
    4a1c:	df 93       	push	r29
    4a1e:	cf 93       	push	r28
    4a20:	cd b7       	in	r28, 0x3d	; 61
    4a22:	de b7       	in	r29, 0x3e	; 62
	LedAndBuzzer_vFlash(3);
    4a24:	83 e0       	ldi	r24, 0x03	; 3
    4a26:	0e 94 ca 13 	call	0x2794	; 0x2794 <LedAndBuzzer_vFlash>
}
    4a2a:	cf 91       	pop	r28
    4a2c:	df 91       	pop	r29
    4a2e:	08 95       	ret

00004a30 <APP_vWriteStringManyTimesLCD>:
//-----------------
void APP_vWriteStringManyTimesLCD(u8 *Loc_u8Array,u8 Loc_u8size){
    4a30:	df 93       	push	r29
    4a32:	cf 93       	push	r28
    4a34:	cd b7       	in	r28, 0x3d	; 61
    4a36:	de b7       	in	r29, 0x3e	; 62
    4a38:	a0 97       	sbiw	r28, 0x20	; 32
    4a3a:	0f b6       	in	r0, 0x3f	; 63
    4a3c:	f8 94       	cli
    4a3e:	de bf       	out	0x3e, r29	; 62
    4a40:	0f be       	out	0x3f, r0	; 63
    4a42:	cd bf       	out	0x3d, r28	; 61
    4a44:	9f 8f       	std	Y+31, r25	; 0x1f
    4a46:	8e 8f       	std	Y+30, r24	; 0x1e
    4a48:	68 a3       	std	Y+32, r22	; 0x20
	LCD_vInit();
    4a4a:	0e 94 a7 19 	call	0x334e	; 0x334e <LCD_vInit>
	u8 i;
	for(i=0;i<=((16/Loc_u8size));i++){
    4a4e:	1d 8e       	std	Y+29, r1	; 0x1d
    4a50:	91 c0       	rjmp	.+290    	; 0x4b74 <APP_vWriteStringManyTimesLCD+0x144>
		LCD_vGoTo(LineOne,((Loc_u8size-1)*i));
    4a52:	88 a1       	ldd	r24, Y+32	; 0x20
    4a54:	88 2f       	mov	r24, r24
    4a56:	90 e0       	ldi	r25, 0x00	; 0
    4a58:	9c 01       	movw	r18, r24
    4a5a:	21 50       	subi	r18, 0x01	; 1
    4a5c:	30 40       	sbci	r19, 0x00	; 0
    4a5e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4a60:	88 2f       	mov	r24, r24
    4a62:	90 e0       	ldi	r25, 0x00	; 0
    4a64:	ac 01       	movw	r20, r24
    4a66:	24 9f       	mul	r18, r20
    4a68:	c0 01       	movw	r24, r0
    4a6a:	25 9f       	mul	r18, r21
    4a6c:	90 0d       	add	r25, r0
    4a6e:	34 9f       	mul	r19, r20
    4a70:	90 0d       	add	r25, r0
    4a72:	11 24       	eor	r1, r1
    4a74:	98 2f       	mov	r25, r24
    4a76:	80 e8       	ldi	r24, 0x80	; 128
    4a78:	69 2f       	mov	r22, r25
    4a7a:	0e 94 6d 1f 	call	0x3eda	; 0x3eda <LCD_vGoTo>
		LCD_vWriteString(Loc_u8Array);
    4a7e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4a80:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4a82:	0e 94 06 20 	call	0x400c	; 0x400c <LCD_vWriteString>
    4a86:	80 e0       	ldi	r24, 0x00	; 0
    4a88:	90 e0       	ldi	r25, 0x00	; 0
    4a8a:	aa e7       	ldi	r26, 0x7A	; 122
    4a8c:	b3 e4       	ldi	r27, 0x43	; 67
    4a8e:	89 8f       	std	Y+25, r24	; 0x19
    4a90:	9a 8f       	std	Y+26, r25	; 0x1a
    4a92:	ab 8f       	std	Y+27, r26	; 0x1b
    4a94:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a96:	69 8d       	ldd	r22, Y+25	; 0x19
    4a98:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4a9a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4a9c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4a9e:	20 e0       	ldi	r18, 0x00	; 0
    4aa0:	30 e0       	ldi	r19, 0x00	; 0
    4aa2:	4a e7       	ldi	r20, 0x7A	; 122
    4aa4:	55 e4       	ldi	r21, 0x45	; 69
    4aa6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4aaa:	dc 01       	movw	r26, r24
    4aac:	cb 01       	movw	r24, r22
    4aae:	8d 8b       	std	Y+21, r24	; 0x15
    4ab0:	9e 8b       	std	Y+22, r25	; 0x16
    4ab2:	af 8b       	std	Y+23, r26	; 0x17
    4ab4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4ab6:	6d 89       	ldd	r22, Y+21	; 0x15
    4ab8:	7e 89       	ldd	r23, Y+22	; 0x16
    4aba:	8f 89       	ldd	r24, Y+23	; 0x17
    4abc:	98 8d       	ldd	r25, Y+24	; 0x18
    4abe:	20 e0       	ldi	r18, 0x00	; 0
    4ac0:	30 e0       	ldi	r19, 0x00	; 0
    4ac2:	40 e8       	ldi	r20, 0x80	; 128
    4ac4:	5f e3       	ldi	r21, 0x3F	; 63
    4ac6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4aca:	88 23       	and	r24, r24
    4acc:	2c f4       	brge	.+10     	; 0x4ad8 <APP_vWriteStringManyTimesLCD+0xa8>
		__ticks = 1;
    4ace:	81 e0       	ldi	r24, 0x01	; 1
    4ad0:	90 e0       	ldi	r25, 0x00	; 0
    4ad2:	9c 8b       	std	Y+20, r25	; 0x14
    4ad4:	8b 8b       	std	Y+19, r24	; 0x13
    4ad6:	3f c0       	rjmp	.+126    	; 0x4b56 <APP_vWriteStringManyTimesLCD+0x126>
	else if (__tmp > 65535)
    4ad8:	6d 89       	ldd	r22, Y+21	; 0x15
    4ada:	7e 89       	ldd	r23, Y+22	; 0x16
    4adc:	8f 89       	ldd	r24, Y+23	; 0x17
    4ade:	98 8d       	ldd	r25, Y+24	; 0x18
    4ae0:	20 e0       	ldi	r18, 0x00	; 0
    4ae2:	3f ef       	ldi	r19, 0xFF	; 255
    4ae4:	4f e7       	ldi	r20, 0x7F	; 127
    4ae6:	57 e4       	ldi	r21, 0x47	; 71
    4ae8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4aec:	18 16       	cp	r1, r24
    4aee:	4c f5       	brge	.+82     	; 0x4b42 <APP_vWriteStringManyTimesLCD+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4af0:	69 8d       	ldd	r22, Y+25	; 0x19
    4af2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4af4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4af6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4af8:	20 e0       	ldi	r18, 0x00	; 0
    4afa:	30 e0       	ldi	r19, 0x00	; 0
    4afc:	40 e2       	ldi	r20, 0x20	; 32
    4afe:	51 e4       	ldi	r21, 0x41	; 65
    4b00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b04:	dc 01       	movw	r26, r24
    4b06:	cb 01       	movw	r24, r22
    4b08:	bc 01       	movw	r22, r24
    4b0a:	cd 01       	movw	r24, r26
    4b0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b10:	dc 01       	movw	r26, r24
    4b12:	cb 01       	movw	r24, r22
    4b14:	9c 8b       	std	Y+20, r25	; 0x14
    4b16:	8b 8b       	std	Y+19, r24	; 0x13
    4b18:	0f c0       	rjmp	.+30     	; 0x4b38 <APP_vWriteStringManyTimesLCD+0x108>
    4b1a:	80 e9       	ldi	r24, 0x90	; 144
    4b1c:	91 e0       	ldi	r25, 0x01	; 1
    4b1e:	9a 8b       	std	Y+18, r25	; 0x12
    4b20:	89 8b       	std	Y+17, r24	; 0x11
    4b22:	89 89       	ldd	r24, Y+17	; 0x11
    4b24:	9a 89       	ldd	r25, Y+18	; 0x12
    4b26:	01 97       	sbiw	r24, 0x01	; 1
    4b28:	f1 f7       	brne	.-4      	; 0x4b26 <APP_vWriteStringManyTimesLCD+0xf6>
    4b2a:	9a 8b       	std	Y+18, r25	; 0x12
    4b2c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b2e:	8b 89       	ldd	r24, Y+19	; 0x13
    4b30:	9c 89       	ldd	r25, Y+20	; 0x14
    4b32:	01 97       	sbiw	r24, 0x01	; 1
    4b34:	9c 8b       	std	Y+20, r25	; 0x14
    4b36:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b38:	8b 89       	ldd	r24, Y+19	; 0x13
    4b3a:	9c 89       	ldd	r25, Y+20	; 0x14
    4b3c:	00 97       	sbiw	r24, 0x00	; 0
    4b3e:	69 f7       	brne	.-38     	; 0x4b1a <APP_vWriteStringManyTimesLCD+0xea>
    4b40:	14 c0       	rjmp	.+40     	; 0x4b6a <APP_vWriteStringManyTimesLCD+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b42:	6d 89       	ldd	r22, Y+21	; 0x15
    4b44:	7e 89       	ldd	r23, Y+22	; 0x16
    4b46:	8f 89       	ldd	r24, Y+23	; 0x17
    4b48:	98 8d       	ldd	r25, Y+24	; 0x18
    4b4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b4e:	dc 01       	movw	r26, r24
    4b50:	cb 01       	movw	r24, r22
    4b52:	9c 8b       	std	Y+20, r25	; 0x14
    4b54:	8b 8b       	std	Y+19, r24	; 0x13
    4b56:	8b 89       	ldd	r24, Y+19	; 0x13
    4b58:	9c 89       	ldd	r25, Y+20	; 0x14
    4b5a:	98 8b       	std	Y+16, r25	; 0x10
    4b5c:	8f 87       	std	Y+15, r24	; 0x0f
    4b5e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4b60:	98 89       	ldd	r25, Y+16	; 0x10
    4b62:	01 97       	sbiw	r24, 0x01	; 1
    4b64:	f1 f7       	brne	.-4      	; 0x4b62 <APP_vWriteStringManyTimesLCD+0x132>
    4b66:	98 8b       	std	Y+16, r25	; 0x10
    4b68:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(250);
		LCD_vClear();
    4b6a:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <LCD_vClear>
}
//-----------------
void APP_vWriteStringManyTimesLCD(u8 *Loc_u8Array,u8 Loc_u8size){
	LCD_vInit();
	u8 i;
	for(i=0;i<=((16/Loc_u8size));i++){
    4b6e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4b70:	8f 5f       	subi	r24, 0xFF	; 255
    4b72:	8d 8f       	std	Y+29, r24	; 0x1d
    4b74:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4b76:	e8 2f       	mov	r30, r24
    4b78:	f0 e0       	ldi	r31, 0x00	; 0
    4b7a:	88 a1       	ldd	r24, Y+32	; 0x20
    4b7c:	28 2f       	mov	r18, r24
    4b7e:	30 e0       	ldi	r19, 0x00	; 0
    4b80:	80 e1       	ldi	r24, 0x10	; 16
    4b82:	90 e0       	ldi	r25, 0x00	; 0
    4b84:	b9 01       	movw	r22, r18
    4b86:	0e 94 ea 34 	call	0x69d4	; 0x69d4 <__divmodhi4>
    4b8a:	cb 01       	movw	r24, r22
    4b8c:	8e 17       	cp	r24, r30
    4b8e:	9f 07       	cpc	r25, r31
    4b90:	0c f0       	brlt	.+2      	; 0x4b94 <APP_vWriteStringManyTimesLCD+0x164>
    4b92:	5f cf       	rjmp	.-322    	; 0x4a52 <APP_vWriteStringManyTimesLCD+0x22>
		LCD_vGoTo(LineOne,((Loc_u8size-1)*i));
		LCD_vWriteString(Loc_u8Array);
		_delay_ms(250);
		LCD_vClear();
	}
	for(i=0;i<=((16/Loc_u8size));i++){
    4b94:	1d 8e       	std	Y+29, r1	; 0x1d
    4b96:	91 c0       	rjmp	.+290    	; 0x4cba <APP_vWriteStringManyTimesLCD+0x28a>
		LCD_vGoTo(LineTwo,((Loc_u8size-1)*i));
    4b98:	88 a1       	ldd	r24, Y+32	; 0x20
    4b9a:	88 2f       	mov	r24, r24
    4b9c:	90 e0       	ldi	r25, 0x00	; 0
    4b9e:	9c 01       	movw	r18, r24
    4ba0:	21 50       	subi	r18, 0x01	; 1
    4ba2:	30 40       	sbci	r19, 0x00	; 0
    4ba4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4ba6:	88 2f       	mov	r24, r24
    4ba8:	90 e0       	ldi	r25, 0x00	; 0
    4baa:	ac 01       	movw	r20, r24
    4bac:	24 9f       	mul	r18, r20
    4bae:	c0 01       	movw	r24, r0
    4bb0:	25 9f       	mul	r18, r21
    4bb2:	90 0d       	add	r25, r0
    4bb4:	34 9f       	mul	r19, r20
    4bb6:	90 0d       	add	r25, r0
    4bb8:	11 24       	eor	r1, r1
    4bba:	98 2f       	mov	r25, r24
    4bbc:	80 ec       	ldi	r24, 0xC0	; 192
    4bbe:	69 2f       	mov	r22, r25
    4bc0:	0e 94 6d 1f 	call	0x3eda	; 0x3eda <LCD_vGoTo>
		LCD_vWriteString(Loc_u8Array);
    4bc4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4bc6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4bc8:	0e 94 06 20 	call	0x400c	; 0x400c <LCD_vWriteString>
    4bcc:	80 e0       	ldi	r24, 0x00	; 0
    4bce:	90 e0       	ldi	r25, 0x00	; 0
    4bd0:	aa e7       	ldi	r26, 0x7A	; 122
    4bd2:	b3 e4       	ldi	r27, 0x43	; 67
    4bd4:	8b 87       	std	Y+11, r24	; 0x0b
    4bd6:	9c 87       	std	Y+12, r25	; 0x0c
    4bd8:	ad 87       	std	Y+13, r26	; 0x0d
    4bda:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4bdc:	6b 85       	ldd	r22, Y+11	; 0x0b
    4bde:	7c 85       	ldd	r23, Y+12	; 0x0c
    4be0:	8d 85       	ldd	r24, Y+13	; 0x0d
    4be2:	9e 85       	ldd	r25, Y+14	; 0x0e
    4be4:	20 e0       	ldi	r18, 0x00	; 0
    4be6:	30 e0       	ldi	r19, 0x00	; 0
    4be8:	4a e7       	ldi	r20, 0x7A	; 122
    4bea:	55 e4       	ldi	r21, 0x45	; 69
    4bec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bf0:	dc 01       	movw	r26, r24
    4bf2:	cb 01       	movw	r24, r22
    4bf4:	8f 83       	std	Y+7, r24	; 0x07
    4bf6:	98 87       	std	Y+8, r25	; 0x08
    4bf8:	a9 87       	std	Y+9, r26	; 0x09
    4bfa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4bfc:	6f 81       	ldd	r22, Y+7	; 0x07
    4bfe:	78 85       	ldd	r23, Y+8	; 0x08
    4c00:	89 85       	ldd	r24, Y+9	; 0x09
    4c02:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c04:	20 e0       	ldi	r18, 0x00	; 0
    4c06:	30 e0       	ldi	r19, 0x00	; 0
    4c08:	40 e8       	ldi	r20, 0x80	; 128
    4c0a:	5f e3       	ldi	r21, 0x3F	; 63
    4c0c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4c10:	88 23       	and	r24, r24
    4c12:	2c f4       	brge	.+10     	; 0x4c1e <APP_vWriteStringManyTimesLCD+0x1ee>
		__ticks = 1;
    4c14:	81 e0       	ldi	r24, 0x01	; 1
    4c16:	90 e0       	ldi	r25, 0x00	; 0
    4c18:	9e 83       	std	Y+6, r25	; 0x06
    4c1a:	8d 83       	std	Y+5, r24	; 0x05
    4c1c:	3f c0       	rjmp	.+126    	; 0x4c9c <APP_vWriteStringManyTimesLCD+0x26c>
	else if (__tmp > 65535)
    4c1e:	6f 81       	ldd	r22, Y+7	; 0x07
    4c20:	78 85       	ldd	r23, Y+8	; 0x08
    4c22:	89 85       	ldd	r24, Y+9	; 0x09
    4c24:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c26:	20 e0       	ldi	r18, 0x00	; 0
    4c28:	3f ef       	ldi	r19, 0xFF	; 255
    4c2a:	4f e7       	ldi	r20, 0x7F	; 127
    4c2c:	57 e4       	ldi	r21, 0x47	; 71
    4c2e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4c32:	18 16       	cp	r1, r24
    4c34:	4c f5       	brge	.+82     	; 0x4c88 <APP_vWriteStringManyTimesLCD+0x258>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c36:	6b 85       	ldd	r22, Y+11	; 0x0b
    4c38:	7c 85       	ldd	r23, Y+12	; 0x0c
    4c3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c3e:	20 e0       	ldi	r18, 0x00	; 0
    4c40:	30 e0       	ldi	r19, 0x00	; 0
    4c42:	40 e2       	ldi	r20, 0x20	; 32
    4c44:	51 e4       	ldi	r21, 0x41	; 65
    4c46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c4a:	dc 01       	movw	r26, r24
    4c4c:	cb 01       	movw	r24, r22
    4c4e:	bc 01       	movw	r22, r24
    4c50:	cd 01       	movw	r24, r26
    4c52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c56:	dc 01       	movw	r26, r24
    4c58:	cb 01       	movw	r24, r22
    4c5a:	9e 83       	std	Y+6, r25	; 0x06
    4c5c:	8d 83       	std	Y+5, r24	; 0x05
    4c5e:	0f c0       	rjmp	.+30     	; 0x4c7e <APP_vWriteStringManyTimesLCD+0x24e>
    4c60:	80 e9       	ldi	r24, 0x90	; 144
    4c62:	91 e0       	ldi	r25, 0x01	; 1
    4c64:	9c 83       	std	Y+4, r25	; 0x04
    4c66:	8b 83       	std	Y+3, r24	; 0x03
    4c68:	8b 81       	ldd	r24, Y+3	; 0x03
    4c6a:	9c 81       	ldd	r25, Y+4	; 0x04
    4c6c:	01 97       	sbiw	r24, 0x01	; 1
    4c6e:	f1 f7       	brne	.-4      	; 0x4c6c <APP_vWriteStringManyTimesLCD+0x23c>
    4c70:	9c 83       	std	Y+4, r25	; 0x04
    4c72:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c74:	8d 81       	ldd	r24, Y+5	; 0x05
    4c76:	9e 81       	ldd	r25, Y+6	; 0x06
    4c78:	01 97       	sbiw	r24, 0x01	; 1
    4c7a:	9e 83       	std	Y+6, r25	; 0x06
    4c7c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c7e:	8d 81       	ldd	r24, Y+5	; 0x05
    4c80:	9e 81       	ldd	r25, Y+6	; 0x06
    4c82:	00 97       	sbiw	r24, 0x00	; 0
    4c84:	69 f7       	brne	.-38     	; 0x4c60 <APP_vWriteStringManyTimesLCD+0x230>
    4c86:	14 c0       	rjmp	.+40     	; 0x4cb0 <APP_vWriteStringManyTimesLCD+0x280>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c88:	6f 81       	ldd	r22, Y+7	; 0x07
    4c8a:	78 85       	ldd	r23, Y+8	; 0x08
    4c8c:	89 85       	ldd	r24, Y+9	; 0x09
    4c8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c94:	dc 01       	movw	r26, r24
    4c96:	cb 01       	movw	r24, r22
    4c98:	9e 83       	std	Y+6, r25	; 0x06
    4c9a:	8d 83       	std	Y+5, r24	; 0x05
    4c9c:	8d 81       	ldd	r24, Y+5	; 0x05
    4c9e:	9e 81       	ldd	r25, Y+6	; 0x06
    4ca0:	9a 83       	std	Y+2, r25	; 0x02
    4ca2:	89 83       	std	Y+1, r24	; 0x01
    4ca4:	89 81       	ldd	r24, Y+1	; 0x01
    4ca6:	9a 81       	ldd	r25, Y+2	; 0x02
    4ca8:	01 97       	sbiw	r24, 0x01	; 1
    4caa:	f1 f7       	brne	.-4      	; 0x4ca8 <APP_vWriteStringManyTimesLCD+0x278>
    4cac:	9a 83       	std	Y+2, r25	; 0x02
    4cae:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(250);
		LCD_vClear();
    4cb0:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <LCD_vClear>
		LCD_vGoTo(LineOne,((Loc_u8size-1)*i));
		LCD_vWriteString(Loc_u8Array);
		_delay_ms(250);
		LCD_vClear();
	}
	for(i=0;i<=((16/Loc_u8size));i++){
    4cb4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4cb6:	8f 5f       	subi	r24, 0xFF	; 255
    4cb8:	8d 8f       	std	Y+29, r24	; 0x1d
    4cba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4cbc:	e8 2f       	mov	r30, r24
    4cbe:	f0 e0       	ldi	r31, 0x00	; 0
    4cc0:	88 a1       	ldd	r24, Y+32	; 0x20
    4cc2:	28 2f       	mov	r18, r24
    4cc4:	30 e0       	ldi	r19, 0x00	; 0
    4cc6:	80 e1       	ldi	r24, 0x10	; 16
    4cc8:	90 e0       	ldi	r25, 0x00	; 0
    4cca:	b9 01       	movw	r22, r18
    4ccc:	0e 94 ea 34 	call	0x69d4	; 0x69d4 <__divmodhi4>
    4cd0:	cb 01       	movw	r24, r22
    4cd2:	8e 17       	cp	r24, r30
    4cd4:	9f 07       	cpc	r25, r31
    4cd6:	0c f0       	brlt	.+2      	; 0x4cda <APP_vWriteStringManyTimesLCD+0x2aa>
    4cd8:	5f cf       	rjmp	.-322    	; 0x4b98 <APP_vWriteStringManyTimesLCD+0x168>
		LCD_vGoTo(LineTwo,((Loc_u8size-1)*i));
		LCD_vWriteString(Loc_u8Array);
		_delay_ms(250);
		LCD_vClear();
	}
}
    4cda:	a0 96       	adiw	r28, 0x20	; 32
    4cdc:	0f b6       	in	r0, 0x3f	; 63
    4cde:	f8 94       	cli
    4ce0:	de bf       	out	0x3e, r29	; 62
    4ce2:	0f be       	out	0x3f, r0	; 63
    4ce4:	cd bf       	out	0x3d, r28	; 61
    4ce6:	cf 91       	pop	r28
    4ce8:	df 91       	pop	r29
    4cea:	08 95       	ret

00004cec <APP_vToString>:
//-----------------
void APP_vToString(u8 str[], u16 num){
    4cec:	df 93       	push	r29
    4cee:	cf 93       	push	r28
    4cf0:	cd b7       	in	r28, 0x3d	; 61
    4cf2:	de b7       	in	r29, 0x3e	; 62
    4cf4:	2a 97       	sbiw	r28, 0x0a	; 10
    4cf6:	0f b6       	in	r0, 0x3f	; 63
    4cf8:	f8 94       	cli
    4cfa:	de bf       	out	0x3e, r29	; 62
    4cfc:	0f be       	out	0x3f, r0	; 63
    4cfe:	cd bf       	out	0x3d, r28	; 61
    4d00:	98 87       	std	Y+8, r25	; 0x08
    4d02:	8f 83       	std	Y+7, r24	; 0x07
    4d04:	7a 87       	std	Y+10, r23	; 0x0a
    4d06:	69 87       	std	Y+9, r22	; 0x09
	u8 i, len = 0 ;
    4d08:	1d 82       	std	Y+5, r1	; 0x05
	u16 n,rem;
	n = num;
    4d0a:	89 85       	ldd	r24, Y+9	; 0x09
    4d0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d0e:	9c 83       	std	Y+4, r25	; 0x04
    4d10:	8b 83       	std	Y+3, r24	; 0x03
    4d12:	0d c0       	rjmp	.+26     	; 0x4d2e <APP_vToString+0x42>
	while (n != 0)
	{
		len++;
    4d14:	8d 81       	ldd	r24, Y+5	; 0x05
    4d16:	8f 5f       	subi	r24, 0xFF	; 255
    4d18:	8d 83       	std	Y+5, r24	; 0x05
		n /= 10;
    4d1a:	8b 81       	ldd	r24, Y+3	; 0x03
    4d1c:	9c 81       	ldd	r25, Y+4	; 0x04
    4d1e:	2a e0       	ldi	r18, 0x0A	; 10
    4d20:	30 e0       	ldi	r19, 0x00	; 0
    4d22:	b9 01       	movw	r22, r18
    4d24:	0e 94 d6 34 	call	0x69ac	; 0x69ac <__udivmodhi4>
    4d28:	cb 01       	movw	r24, r22
    4d2a:	9c 83       	std	Y+4, r25	; 0x04
    4d2c:	8b 83       	std	Y+3, r24	; 0x03
//-----------------
void APP_vToString(u8 str[], u16 num){
	u8 i, len = 0 ;
	u16 n,rem;
	n = num;
	while (n != 0)
    4d2e:	8b 81       	ldd	r24, Y+3	; 0x03
    4d30:	9c 81       	ldd	r25, Y+4	; 0x04
    4d32:	00 97       	sbiw	r24, 0x00	; 0
    4d34:	79 f7       	brne	.-34     	; 0x4d14 <APP_vToString+0x28>
	{
		len++;
		n /= 10;
	}
	for (i = 0; i < len; i++)
    4d36:	1e 82       	std	Y+6, r1	; 0x06
    4d38:	29 c0       	rjmp	.+82     	; 0x4d8c <APP_vToString+0xa0>
	{
		rem = num % 10;
    4d3a:	89 85       	ldd	r24, Y+9	; 0x09
    4d3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d3e:	2a e0       	ldi	r18, 0x0A	; 10
    4d40:	30 e0       	ldi	r19, 0x00	; 0
    4d42:	b9 01       	movw	r22, r18
    4d44:	0e 94 d6 34 	call	0x69ac	; 0x69ac <__udivmodhi4>
    4d48:	9a 83       	std	Y+2, r25	; 0x02
    4d4a:	89 83       	std	Y+1, r24	; 0x01
		num = num / 10;
    4d4c:	89 85       	ldd	r24, Y+9	; 0x09
    4d4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d50:	2a e0       	ldi	r18, 0x0A	; 10
    4d52:	30 e0       	ldi	r19, 0x00	; 0
    4d54:	b9 01       	movw	r22, r18
    4d56:	0e 94 d6 34 	call	0x69ac	; 0x69ac <__udivmodhi4>
    4d5a:	cb 01       	movw	r24, r22
    4d5c:	9a 87       	std	Y+10, r25	; 0x0a
    4d5e:	89 87       	std	Y+9, r24	; 0x09
		str[len - (i + 1)] = rem + '0';
    4d60:	8d 81       	ldd	r24, Y+5	; 0x05
    4d62:	28 2f       	mov	r18, r24
    4d64:	30 e0       	ldi	r19, 0x00	; 0
    4d66:	8e 81       	ldd	r24, Y+6	; 0x06
    4d68:	88 2f       	mov	r24, r24
    4d6a:	90 e0       	ldi	r25, 0x00	; 0
    4d6c:	80 95       	com	r24
    4d6e:	90 95       	com	r25
    4d70:	82 0f       	add	r24, r18
    4d72:	93 1f       	adc	r25, r19
    4d74:	9c 01       	movw	r18, r24
    4d76:	8f 81       	ldd	r24, Y+7	; 0x07
    4d78:	98 85       	ldd	r25, Y+8	; 0x08
    4d7a:	fc 01       	movw	r30, r24
    4d7c:	e2 0f       	add	r30, r18
    4d7e:	f3 1f       	adc	r31, r19
    4d80:	89 81       	ldd	r24, Y+1	; 0x01
    4d82:	80 5d       	subi	r24, 0xD0	; 208
    4d84:	80 83       	st	Z, r24
	while (n != 0)
	{
		len++;
		n /= 10;
	}
	for (i = 0; i < len; i++)
    4d86:	8e 81       	ldd	r24, Y+6	; 0x06
    4d88:	8f 5f       	subi	r24, 0xFF	; 255
    4d8a:	8e 83       	std	Y+6, r24	; 0x06
    4d8c:	9e 81       	ldd	r25, Y+6	; 0x06
    4d8e:	8d 81       	ldd	r24, Y+5	; 0x05
    4d90:	98 17       	cp	r25, r24
    4d92:	98 f2       	brcs	.-90     	; 0x4d3a <APP_vToString+0x4e>
	{
		rem = num % 10;
		num = num / 10;
		str[len - (i + 1)] = rem + '0';
	}
	str[len] = '\0';
    4d94:	8d 81       	ldd	r24, Y+5	; 0x05
    4d96:	28 2f       	mov	r18, r24
    4d98:	30 e0       	ldi	r19, 0x00	; 0
    4d9a:	8f 81       	ldd	r24, Y+7	; 0x07
    4d9c:	98 85       	ldd	r25, Y+8	; 0x08
    4d9e:	fc 01       	movw	r30, r24
    4da0:	e2 0f       	add	r30, r18
    4da2:	f3 1f       	adc	r31, r19
    4da4:	10 82       	st	Z, r1
}
    4da6:	2a 96       	adiw	r28, 0x0a	; 10
    4da8:	0f b6       	in	r0, 0x3f	; 63
    4daa:	f8 94       	cli
    4dac:	de bf       	out	0x3e, r29	; 62
    4dae:	0f be       	out	0x3f, r0	; 63
    4db0:	cd bf       	out	0x3d, r28	; 61
    4db2:	cf 91       	pop	r28
    4db4:	df 91       	pop	r29
    4db6:	08 95       	ret

00004db8 <APP_vCalculatorLCD>:
//-----------------
void APP_vCalculatorLCD(){
    4db8:	0f 93       	push	r16
    4dba:	1f 93       	push	r17
    4dbc:	df 93       	push	r29
    4dbe:	cf 93       	push	r28
    4dc0:	cd b7       	in	r28, 0x3d	; 61
    4dc2:	de b7       	in	r29, 0x3e	; 62
    4dc4:	c8 57       	subi	r28, 0x78	; 120
    4dc6:	d0 40       	sbci	r29, 0x00	; 0
    4dc8:	0f b6       	in	r0, 0x3f	; 63
    4dca:	f8 94       	cli
    4dcc:	de bf       	out	0x3e, r29	; 62
    4dce:	0f be       	out	0x3f, r0	; 63
    4dd0:	cd bf       	out	0x3d, r28	; 61
	//-- while(!=)
	u8 Loc_u8Num1=0,Loc_u8Num2,Loc_u8Symbol1,Loc_u8Symbol2,Loc_u8sum;
    4dd2:	fe 01       	movw	r30, r28
    4dd4:	eb 58       	subi	r30, 0x8B	; 139
    4dd6:	ff 4f       	sbci	r31, 0xFF	; 255
    4dd8:	10 82       	st	Z, r1
	KAYPAD_vInit();
    4dda:	0e 94 87 20 	call	0x410e	; 0x410e <KAYPAD_vInit>
//Busy Wait
	while(1){
		Loc_u8Num1=KAYPAD_u8GetKey();
    4dde:	0e 94 96 20 	call	0x412c	; 0x412c <KAYPAD_u8GetKey>
    4de2:	fe 01       	movw	r30, r28
    4de4:	eb 58       	subi	r30, 0x8B	; 139
    4de6:	ff 4f       	sbci	r31, 0xFF	; 255
    4de8:	80 83       	st	Z, r24
    4dea:	fe 01       	movw	r30, r28
    4dec:	e3 59       	subi	r30, 0x93	; 147
    4dee:	ff 4f       	sbci	r31, 0xFF	; 255
    4df0:	80 e0       	ldi	r24, 0x00	; 0
    4df2:	90 e0       	ldi	r25, 0x00	; 0
    4df4:	a8 e4       	ldi	r26, 0x48	; 72
    4df6:	b2 e4       	ldi	r27, 0x42	; 66
    4df8:	80 83       	st	Z, r24
    4dfa:	91 83       	std	Z+1, r25	; 0x01
    4dfc:	a2 83       	std	Z+2, r26	; 0x02
    4dfe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e00:	8e 01       	movw	r16, r28
    4e02:	07 59       	subi	r16, 0x97	; 151
    4e04:	1f 4f       	sbci	r17, 0xFF	; 255
    4e06:	fe 01       	movw	r30, r28
    4e08:	e3 59       	subi	r30, 0x93	; 147
    4e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    4e0c:	60 81       	ld	r22, Z
    4e0e:	71 81       	ldd	r23, Z+1	; 0x01
    4e10:	82 81       	ldd	r24, Z+2	; 0x02
    4e12:	93 81       	ldd	r25, Z+3	; 0x03
    4e14:	20 e0       	ldi	r18, 0x00	; 0
    4e16:	30 e0       	ldi	r19, 0x00	; 0
    4e18:	4a e7       	ldi	r20, 0x7A	; 122
    4e1a:	55 e4       	ldi	r21, 0x45	; 69
    4e1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e20:	dc 01       	movw	r26, r24
    4e22:	cb 01       	movw	r24, r22
    4e24:	f8 01       	movw	r30, r16
    4e26:	80 83       	st	Z, r24
    4e28:	91 83       	std	Z+1, r25	; 0x01
    4e2a:	a2 83       	std	Z+2, r26	; 0x02
    4e2c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4e2e:	fe 01       	movw	r30, r28
    4e30:	e7 59       	subi	r30, 0x97	; 151
    4e32:	ff 4f       	sbci	r31, 0xFF	; 255
    4e34:	60 81       	ld	r22, Z
    4e36:	71 81       	ldd	r23, Z+1	; 0x01
    4e38:	82 81       	ldd	r24, Z+2	; 0x02
    4e3a:	93 81       	ldd	r25, Z+3	; 0x03
    4e3c:	20 e0       	ldi	r18, 0x00	; 0
    4e3e:	30 e0       	ldi	r19, 0x00	; 0
    4e40:	40 e8       	ldi	r20, 0x80	; 128
    4e42:	5f e3       	ldi	r21, 0x3F	; 63
    4e44:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4e48:	88 23       	and	r24, r24
    4e4a:	44 f4       	brge	.+16     	; 0x4e5c <APP_vCalculatorLCD+0xa4>
		__ticks = 1;
    4e4c:	fe 01       	movw	r30, r28
    4e4e:	e9 59       	subi	r30, 0x99	; 153
    4e50:	ff 4f       	sbci	r31, 0xFF	; 255
    4e52:	81 e0       	ldi	r24, 0x01	; 1
    4e54:	90 e0       	ldi	r25, 0x00	; 0
    4e56:	91 83       	std	Z+1, r25	; 0x01
    4e58:	80 83       	st	Z, r24
    4e5a:	64 c0       	rjmp	.+200    	; 0x4f24 <APP_vCalculatorLCD+0x16c>
	else if (__tmp > 65535)
    4e5c:	fe 01       	movw	r30, r28
    4e5e:	e7 59       	subi	r30, 0x97	; 151
    4e60:	ff 4f       	sbci	r31, 0xFF	; 255
    4e62:	60 81       	ld	r22, Z
    4e64:	71 81       	ldd	r23, Z+1	; 0x01
    4e66:	82 81       	ldd	r24, Z+2	; 0x02
    4e68:	93 81       	ldd	r25, Z+3	; 0x03
    4e6a:	20 e0       	ldi	r18, 0x00	; 0
    4e6c:	3f ef       	ldi	r19, 0xFF	; 255
    4e6e:	4f e7       	ldi	r20, 0x7F	; 127
    4e70:	57 e4       	ldi	r21, 0x47	; 71
    4e72:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4e76:	18 16       	cp	r1, r24
    4e78:	0c f0       	brlt	.+2      	; 0x4e7c <APP_vCalculatorLCD+0xc4>
    4e7a:	43 c0       	rjmp	.+134    	; 0x4f02 <APP_vCalculatorLCD+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e7c:	fe 01       	movw	r30, r28
    4e7e:	e3 59       	subi	r30, 0x93	; 147
    4e80:	ff 4f       	sbci	r31, 0xFF	; 255
    4e82:	60 81       	ld	r22, Z
    4e84:	71 81       	ldd	r23, Z+1	; 0x01
    4e86:	82 81       	ldd	r24, Z+2	; 0x02
    4e88:	93 81       	ldd	r25, Z+3	; 0x03
    4e8a:	20 e0       	ldi	r18, 0x00	; 0
    4e8c:	30 e0       	ldi	r19, 0x00	; 0
    4e8e:	40 e2       	ldi	r20, 0x20	; 32
    4e90:	51 e4       	ldi	r21, 0x41	; 65
    4e92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e96:	dc 01       	movw	r26, r24
    4e98:	cb 01       	movw	r24, r22
    4e9a:	8e 01       	movw	r16, r28
    4e9c:	09 59       	subi	r16, 0x99	; 153
    4e9e:	1f 4f       	sbci	r17, 0xFF	; 255
    4ea0:	bc 01       	movw	r22, r24
    4ea2:	cd 01       	movw	r24, r26
    4ea4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ea8:	dc 01       	movw	r26, r24
    4eaa:	cb 01       	movw	r24, r22
    4eac:	f8 01       	movw	r30, r16
    4eae:	91 83       	std	Z+1, r25	; 0x01
    4eb0:	80 83       	st	Z, r24
    4eb2:	1f c0       	rjmp	.+62     	; 0x4ef2 <APP_vCalculatorLCD+0x13a>
    4eb4:	fe 01       	movw	r30, r28
    4eb6:	eb 59       	subi	r30, 0x9B	; 155
    4eb8:	ff 4f       	sbci	r31, 0xFF	; 255
    4eba:	80 e9       	ldi	r24, 0x90	; 144
    4ebc:	91 e0       	ldi	r25, 0x01	; 1
    4ebe:	91 83       	std	Z+1, r25	; 0x01
    4ec0:	80 83       	st	Z, r24
    4ec2:	fe 01       	movw	r30, r28
    4ec4:	eb 59       	subi	r30, 0x9B	; 155
    4ec6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ec8:	80 81       	ld	r24, Z
    4eca:	91 81       	ldd	r25, Z+1	; 0x01
    4ecc:	01 97       	sbiw	r24, 0x01	; 1
    4ece:	f1 f7       	brne	.-4      	; 0x4ecc <APP_vCalculatorLCD+0x114>
    4ed0:	fe 01       	movw	r30, r28
    4ed2:	eb 59       	subi	r30, 0x9B	; 155
    4ed4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ed6:	91 83       	std	Z+1, r25	; 0x01
    4ed8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4eda:	de 01       	movw	r26, r28
    4edc:	a9 59       	subi	r26, 0x99	; 153
    4ede:	bf 4f       	sbci	r27, 0xFF	; 255
    4ee0:	fe 01       	movw	r30, r28
    4ee2:	e9 59       	subi	r30, 0x99	; 153
    4ee4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ee6:	80 81       	ld	r24, Z
    4ee8:	91 81       	ldd	r25, Z+1	; 0x01
    4eea:	01 97       	sbiw	r24, 0x01	; 1
    4eec:	11 96       	adiw	r26, 0x01	; 1
    4eee:	9c 93       	st	X, r25
    4ef0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ef2:	fe 01       	movw	r30, r28
    4ef4:	e9 59       	subi	r30, 0x99	; 153
    4ef6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ef8:	80 81       	ld	r24, Z
    4efa:	91 81       	ldd	r25, Z+1	; 0x01
    4efc:	00 97       	sbiw	r24, 0x00	; 0
    4efe:	d1 f6       	brne	.-76     	; 0x4eb4 <APP_vCalculatorLCD+0xfc>
    4f00:	28 c0       	rjmp	.+80     	; 0x4f52 <APP_vCalculatorLCD+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f02:	8e 01       	movw	r16, r28
    4f04:	09 59       	subi	r16, 0x99	; 153
    4f06:	1f 4f       	sbci	r17, 0xFF	; 255
    4f08:	fe 01       	movw	r30, r28
    4f0a:	e7 59       	subi	r30, 0x97	; 151
    4f0c:	ff 4f       	sbci	r31, 0xFF	; 255
    4f0e:	60 81       	ld	r22, Z
    4f10:	71 81       	ldd	r23, Z+1	; 0x01
    4f12:	82 81       	ldd	r24, Z+2	; 0x02
    4f14:	93 81       	ldd	r25, Z+3	; 0x03
    4f16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f1a:	dc 01       	movw	r26, r24
    4f1c:	cb 01       	movw	r24, r22
    4f1e:	f8 01       	movw	r30, r16
    4f20:	91 83       	std	Z+1, r25	; 0x01
    4f22:	80 83       	st	Z, r24
    4f24:	de 01       	movw	r26, r28
    4f26:	ad 59       	subi	r26, 0x9D	; 157
    4f28:	bf 4f       	sbci	r27, 0xFF	; 255
    4f2a:	fe 01       	movw	r30, r28
    4f2c:	e9 59       	subi	r30, 0x99	; 153
    4f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    4f30:	80 81       	ld	r24, Z
    4f32:	91 81       	ldd	r25, Z+1	; 0x01
    4f34:	11 96       	adiw	r26, 0x01	; 1
    4f36:	9c 93       	st	X, r25
    4f38:	8e 93       	st	-X, r24
    4f3a:	fe 01       	movw	r30, r28
    4f3c:	ed 59       	subi	r30, 0x9D	; 157
    4f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    4f40:	80 81       	ld	r24, Z
    4f42:	91 81       	ldd	r25, Z+1	; 0x01
    4f44:	01 97       	sbiw	r24, 0x01	; 1
    4f46:	f1 f7       	brne	.-4      	; 0x4f44 <APP_vCalculatorLCD+0x18c>
    4f48:	fe 01       	movw	r30, r28
    4f4a:	ed 59       	subi	r30, 0x9D	; 157
    4f4c:	ff 4f       	sbci	r31, 0xFF	; 255
    4f4e:	91 83       	std	Z+1, r25	; 0x01
    4f50:	80 83       	st	Z, r24
		_delay_ms(50);
		if(Loc_u8Num1!=0xff){
    4f52:	fe 01       	movw	r30, r28
    4f54:	eb 58       	subi	r30, 0x8B	; 139
    4f56:	ff 4f       	sbci	r31, 0xFF	; 255
    4f58:	80 81       	ld	r24, Z
    4f5a:	8f 3f       	cpi	r24, 0xFF	; 255
    4f5c:	09 f4       	brne	.+2      	; 0x4f60 <APP_vCalculatorLCD+0x1a8>
    4f5e:	3f cf       	rjmp	.-386    	; 0x4dde <APP_vCalculatorLCD+0x26>
			LCD_vInit();
    4f60:	0e 94 a7 19 	call	0x334e	; 0x334e <LCD_vInit>
			LCD_vWriteCharacter(Loc_u8Num1+48);
    4f64:	fe 01       	movw	r30, r28
    4f66:	eb 58       	subi	r30, 0x8B	; 139
    4f68:	ff 4f       	sbci	r31, 0xFF	; 255
    4f6a:	80 81       	ld	r24, Z
    4f6c:	80 5d       	subi	r24, 0xD0	; 208
    4f6e:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <LCD_vWriteCharacter>
    4f72:	fe 01       	movw	r30, r28
    4f74:	e1 5a       	subi	r30, 0xA1	; 161
    4f76:	ff 4f       	sbci	r31, 0xFF	; 255
    4f78:	80 e0       	ldi	r24, 0x00	; 0
    4f7a:	90 e0       	ldi	r25, 0x00	; 0
    4f7c:	a8 e4       	ldi	r26, 0x48	; 72
    4f7e:	b2 e4       	ldi	r27, 0x42	; 66
    4f80:	80 83       	st	Z, r24
    4f82:	91 83       	std	Z+1, r25	; 0x01
    4f84:	a2 83       	std	Z+2, r26	; 0x02
    4f86:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f88:	8e 01       	movw	r16, r28
    4f8a:	05 5a       	subi	r16, 0xA5	; 165
    4f8c:	1f 4f       	sbci	r17, 0xFF	; 255
    4f8e:	fe 01       	movw	r30, r28
    4f90:	e1 5a       	subi	r30, 0xA1	; 161
    4f92:	ff 4f       	sbci	r31, 0xFF	; 255
    4f94:	60 81       	ld	r22, Z
    4f96:	71 81       	ldd	r23, Z+1	; 0x01
    4f98:	82 81       	ldd	r24, Z+2	; 0x02
    4f9a:	93 81       	ldd	r25, Z+3	; 0x03
    4f9c:	20 e0       	ldi	r18, 0x00	; 0
    4f9e:	30 e0       	ldi	r19, 0x00	; 0
    4fa0:	4a e7       	ldi	r20, 0x7A	; 122
    4fa2:	55 e4       	ldi	r21, 0x45	; 69
    4fa4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fa8:	dc 01       	movw	r26, r24
    4faa:	cb 01       	movw	r24, r22
    4fac:	f8 01       	movw	r30, r16
    4fae:	80 83       	st	Z, r24
    4fb0:	91 83       	std	Z+1, r25	; 0x01
    4fb2:	a2 83       	std	Z+2, r26	; 0x02
    4fb4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4fb6:	fe 01       	movw	r30, r28
    4fb8:	e5 5a       	subi	r30, 0xA5	; 165
    4fba:	ff 4f       	sbci	r31, 0xFF	; 255
    4fbc:	60 81       	ld	r22, Z
    4fbe:	71 81       	ldd	r23, Z+1	; 0x01
    4fc0:	82 81       	ldd	r24, Z+2	; 0x02
    4fc2:	93 81       	ldd	r25, Z+3	; 0x03
    4fc4:	20 e0       	ldi	r18, 0x00	; 0
    4fc6:	30 e0       	ldi	r19, 0x00	; 0
    4fc8:	40 e8       	ldi	r20, 0x80	; 128
    4fca:	5f e3       	ldi	r21, 0x3F	; 63
    4fcc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4fd0:	88 23       	and	r24, r24
    4fd2:	44 f4       	brge	.+16     	; 0x4fe4 <APP_vCalculatorLCD+0x22c>
		__ticks = 1;
    4fd4:	fe 01       	movw	r30, r28
    4fd6:	e7 5a       	subi	r30, 0xA7	; 167
    4fd8:	ff 4f       	sbci	r31, 0xFF	; 255
    4fda:	81 e0       	ldi	r24, 0x01	; 1
    4fdc:	90 e0       	ldi	r25, 0x00	; 0
    4fde:	91 83       	std	Z+1, r25	; 0x01
    4fe0:	80 83       	st	Z, r24
    4fe2:	64 c0       	rjmp	.+200    	; 0x50ac <APP_vCalculatorLCD+0x2f4>
	else if (__tmp > 65535)
    4fe4:	fe 01       	movw	r30, r28
    4fe6:	e5 5a       	subi	r30, 0xA5	; 165
    4fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    4fea:	60 81       	ld	r22, Z
    4fec:	71 81       	ldd	r23, Z+1	; 0x01
    4fee:	82 81       	ldd	r24, Z+2	; 0x02
    4ff0:	93 81       	ldd	r25, Z+3	; 0x03
    4ff2:	20 e0       	ldi	r18, 0x00	; 0
    4ff4:	3f ef       	ldi	r19, 0xFF	; 255
    4ff6:	4f e7       	ldi	r20, 0x7F	; 127
    4ff8:	57 e4       	ldi	r21, 0x47	; 71
    4ffa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4ffe:	18 16       	cp	r1, r24
    5000:	0c f0       	brlt	.+2      	; 0x5004 <APP_vCalculatorLCD+0x24c>
    5002:	43 c0       	rjmp	.+134    	; 0x508a <APP_vCalculatorLCD+0x2d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5004:	fe 01       	movw	r30, r28
    5006:	e1 5a       	subi	r30, 0xA1	; 161
    5008:	ff 4f       	sbci	r31, 0xFF	; 255
    500a:	60 81       	ld	r22, Z
    500c:	71 81       	ldd	r23, Z+1	; 0x01
    500e:	82 81       	ldd	r24, Z+2	; 0x02
    5010:	93 81       	ldd	r25, Z+3	; 0x03
    5012:	20 e0       	ldi	r18, 0x00	; 0
    5014:	30 e0       	ldi	r19, 0x00	; 0
    5016:	40 e2       	ldi	r20, 0x20	; 32
    5018:	51 e4       	ldi	r21, 0x41	; 65
    501a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    501e:	dc 01       	movw	r26, r24
    5020:	cb 01       	movw	r24, r22
    5022:	8e 01       	movw	r16, r28
    5024:	07 5a       	subi	r16, 0xA7	; 167
    5026:	1f 4f       	sbci	r17, 0xFF	; 255
    5028:	bc 01       	movw	r22, r24
    502a:	cd 01       	movw	r24, r26
    502c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5030:	dc 01       	movw	r26, r24
    5032:	cb 01       	movw	r24, r22
    5034:	f8 01       	movw	r30, r16
    5036:	91 83       	std	Z+1, r25	; 0x01
    5038:	80 83       	st	Z, r24
    503a:	1f c0       	rjmp	.+62     	; 0x507a <APP_vCalculatorLCD+0x2c2>
    503c:	fe 01       	movw	r30, r28
    503e:	e9 5a       	subi	r30, 0xA9	; 169
    5040:	ff 4f       	sbci	r31, 0xFF	; 255
    5042:	80 e9       	ldi	r24, 0x90	; 144
    5044:	91 e0       	ldi	r25, 0x01	; 1
    5046:	91 83       	std	Z+1, r25	; 0x01
    5048:	80 83       	st	Z, r24
    504a:	fe 01       	movw	r30, r28
    504c:	e9 5a       	subi	r30, 0xA9	; 169
    504e:	ff 4f       	sbci	r31, 0xFF	; 255
    5050:	80 81       	ld	r24, Z
    5052:	91 81       	ldd	r25, Z+1	; 0x01
    5054:	01 97       	sbiw	r24, 0x01	; 1
    5056:	f1 f7       	brne	.-4      	; 0x5054 <APP_vCalculatorLCD+0x29c>
    5058:	fe 01       	movw	r30, r28
    505a:	e9 5a       	subi	r30, 0xA9	; 169
    505c:	ff 4f       	sbci	r31, 0xFF	; 255
    505e:	91 83       	std	Z+1, r25	; 0x01
    5060:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5062:	de 01       	movw	r26, r28
    5064:	a7 5a       	subi	r26, 0xA7	; 167
    5066:	bf 4f       	sbci	r27, 0xFF	; 255
    5068:	fe 01       	movw	r30, r28
    506a:	e7 5a       	subi	r30, 0xA7	; 167
    506c:	ff 4f       	sbci	r31, 0xFF	; 255
    506e:	80 81       	ld	r24, Z
    5070:	91 81       	ldd	r25, Z+1	; 0x01
    5072:	01 97       	sbiw	r24, 0x01	; 1
    5074:	11 96       	adiw	r26, 0x01	; 1
    5076:	9c 93       	st	X, r25
    5078:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    507a:	fe 01       	movw	r30, r28
    507c:	e7 5a       	subi	r30, 0xA7	; 167
    507e:	ff 4f       	sbci	r31, 0xFF	; 255
    5080:	80 81       	ld	r24, Z
    5082:	91 81       	ldd	r25, Z+1	; 0x01
    5084:	00 97       	sbiw	r24, 0x00	; 0
    5086:	d1 f6       	brne	.-76     	; 0x503c <APP_vCalculatorLCD+0x284>
    5088:	27 c0       	rjmp	.+78     	; 0x50d8 <APP_vCalculatorLCD+0x320>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    508a:	8e 01       	movw	r16, r28
    508c:	07 5a       	subi	r16, 0xA7	; 167
    508e:	1f 4f       	sbci	r17, 0xFF	; 255
    5090:	fe 01       	movw	r30, r28
    5092:	e5 5a       	subi	r30, 0xA5	; 165
    5094:	ff 4f       	sbci	r31, 0xFF	; 255
    5096:	60 81       	ld	r22, Z
    5098:	71 81       	ldd	r23, Z+1	; 0x01
    509a:	82 81       	ldd	r24, Z+2	; 0x02
    509c:	93 81       	ldd	r25, Z+3	; 0x03
    509e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50a2:	dc 01       	movw	r26, r24
    50a4:	cb 01       	movw	r24, r22
    50a6:	f8 01       	movw	r30, r16
    50a8:	91 83       	std	Z+1, r25	; 0x01
    50aa:	80 83       	st	Z, r24
    50ac:	de 01       	movw	r26, r28
    50ae:	ab 5a       	subi	r26, 0xAB	; 171
    50b0:	bf 4f       	sbci	r27, 0xFF	; 255
    50b2:	fe 01       	movw	r30, r28
    50b4:	e7 5a       	subi	r30, 0xA7	; 167
    50b6:	ff 4f       	sbci	r31, 0xFF	; 255
    50b8:	80 81       	ld	r24, Z
    50ba:	91 81       	ldd	r25, Z+1	; 0x01
    50bc:	8d 93       	st	X+, r24
    50be:	9c 93       	st	X, r25
    50c0:	fe 01       	movw	r30, r28
    50c2:	eb 5a       	subi	r30, 0xAB	; 171
    50c4:	ff 4f       	sbci	r31, 0xFF	; 255
    50c6:	80 81       	ld	r24, Z
    50c8:	91 81       	ldd	r25, Z+1	; 0x01
    50ca:	01 97       	sbiw	r24, 0x01	; 1
    50cc:	f1 f7       	brne	.-4      	; 0x50ca <APP_vCalculatorLCD+0x312>
    50ce:	fe 01       	movw	r30, r28
    50d0:	eb 5a       	subi	r30, 0xAB	; 171
    50d2:	ff 4f       	sbci	r31, 0xFF	; 255
    50d4:	91 83       	std	Z+1, r25	; 0x01
    50d6:	80 83       	st	Z, r24
			break;
		}
	}
	_delay_ms(50);
	KAYPAD_vInit();
    50d8:	0e 94 87 20 	call	0x410e	; 0x410e <KAYPAD_vInit>
	//--- delete all while 1 and replace it with if that take v and it count
	while(1){
		Loc_u8Symbol1=KAYPAD_u8GetKey();
    50dc:	0e 94 96 20 	call	0x412c	; 0x412c <KAYPAD_u8GetKey>
    50e0:	fe 01       	movw	r30, r28
    50e2:	ed 58       	subi	r30, 0x8D	; 141
    50e4:	ff 4f       	sbci	r31, 0xFF	; 255
    50e6:	80 83       	st	Z, r24
    50e8:	fe 01       	movw	r30, r28
    50ea:	ef 5a       	subi	r30, 0xAF	; 175
    50ec:	ff 4f       	sbci	r31, 0xFF	; 255
    50ee:	80 e0       	ldi	r24, 0x00	; 0
    50f0:	90 e0       	ldi	r25, 0x00	; 0
    50f2:	a8 e4       	ldi	r26, 0x48	; 72
    50f4:	b2 e4       	ldi	r27, 0x42	; 66
    50f6:	80 83       	st	Z, r24
    50f8:	91 83       	std	Z+1, r25	; 0x01
    50fa:	a2 83       	std	Z+2, r26	; 0x02
    50fc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    50fe:	8e 01       	movw	r16, r28
    5100:	03 5b       	subi	r16, 0xB3	; 179
    5102:	1f 4f       	sbci	r17, 0xFF	; 255
    5104:	fe 01       	movw	r30, r28
    5106:	ef 5a       	subi	r30, 0xAF	; 175
    5108:	ff 4f       	sbci	r31, 0xFF	; 255
    510a:	60 81       	ld	r22, Z
    510c:	71 81       	ldd	r23, Z+1	; 0x01
    510e:	82 81       	ldd	r24, Z+2	; 0x02
    5110:	93 81       	ldd	r25, Z+3	; 0x03
    5112:	20 e0       	ldi	r18, 0x00	; 0
    5114:	30 e0       	ldi	r19, 0x00	; 0
    5116:	4a e7       	ldi	r20, 0x7A	; 122
    5118:	55 e4       	ldi	r21, 0x45	; 69
    511a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    511e:	dc 01       	movw	r26, r24
    5120:	cb 01       	movw	r24, r22
    5122:	f8 01       	movw	r30, r16
    5124:	80 83       	st	Z, r24
    5126:	91 83       	std	Z+1, r25	; 0x01
    5128:	a2 83       	std	Z+2, r26	; 0x02
    512a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    512c:	fe 01       	movw	r30, r28
    512e:	e3 5b       	subi	r30, 0xB3	; 179
    5130:	ff 4f       	sbci	r31, 0xFF	; 255
    5132:	60 81       	ld	r22, Z
    5134:	71 81       	ldd	r23, Z+1	; 0x01
    5136:	82 81       	ldd	r24, Z+2	; 0x02
    5138:	93 81       	ldd	r25, Z+3	; 0x03
    513a:	20 e0       	ldi	r18, 0x00	; 0
    513c:	30 e0       	ldi	r19, 0x00	; 0
    513e:	40 e8       	ldi	r20, 0x80	; 128
    5140:	5f e3       	ldi	r21, 0x3F	; 63
    5142:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5146:	88 23       	and	r24, r24
    5148:	44 f4       	brge	.+16     	; 0x515a <APP_vCalculatorLCD+0x3a2>
		__ticks = 1;
    514a:	fe 01       	movw	r30, r28
    514c:	e5 5b       	subi	r30, 0xB5	; 181
    514e:	ff 4f       	sbci	r31, 0xFF	; 255
    5150:	81 e0       	ldi	r24, 0x01	; 1
    5152:	90 e0       	ldi	r25, 0x00	; 0
    5154:	91 83       	std	Z+1, r25	; 0x01
    5156:	80 83       	st	Z, r24
    5158:	64 c0       	rjmp	.+200    	; 0x5222 <APP_vCalculatorLCD+0x46a>
	else if (__tmp > 65535)
    515a:	fe 01       	movw	r30, r28
    515c:	e3 5b       	subi	r30, 0xB3	; 179
    515e:	ff 4f       	sbci	r31, 0xFF	; 255
    5160:	60 81       	ld	r22, Z
    5162:	71 81       	ldd	r23, Z+1	; 0x01
    5164:	82 81       	ldd	r24, Z+2	; 0x02
    5166:	93 81       	ldd	r25, Z+3	; 0x03
    5168:	20 e0       	ldi	r18, 0x00	; 0
    516a:	3f ef       	ldi	r19, 0xFF	; 255
    516c:	4f e7       	ldi	r20, 0x7F	; 127
    516e:	57 e4       	ldi	r21, 0x47	; 71
    5170:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5174:	18 16       	cp	r1, r24
    5176:	0c f0       	brlt	.+2      	; 0x517a <APP_vCalculatorLCD+0x3c2>
    5178:	43 c0       	rjmp	.+134    	; 0x5200 <APP_vCalculatorLCD+0x448>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    517a:	fe 01       	movw	r30, r28
    517c:	ef 5a       	subi	r30, 0xAF	; 175
    517e:	ff 4f       	sbci	r31, 0xFF	; 255
    5180:	60 81       	ld	r22, Z
    5182:	71 81       	ldd	r23, Z+1	; 0x01
    5184:	82 81       	ldd	r24, Z+2	; 0x02
    5186:	93 81       	ldd	r25, Z+3	; 0x03
    5188:	20 e0       	ldi	r18, 0x00	; 0
    518a:	30 e0       	ldi	r19, 0x00	; 0
    518c:	40 e2       	ldi	r20, 0x20	; 32
    518e:	51 e4       	ldi	r21, 0x41	; 65
    5190:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5194:	dc 01       	movw	r26, r24
    5196:	cb 01       	movw	r24, r22
    5198:	8e 01       	movw	r16, r28
    519a:	05 5b       	subi	r16, 0xB5	; 181
    519c:	1f 4f       	sbci	r17, 0xFF	; 255
    519e:	bc 01       	movw	r22, r24
    51a0:	cd 01       	movw	r24, r26
    51a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51a6:	dc 01       	movw	r26, r24
    51a8:	cb 01       	movw	r24, r22
    51aa:	f8 01       	movw	r30, r16
    51ac:	91 83       	std	Z+1, r25	; 0x01
    51ae:	80 83       	st	Z, r24
    51b0:	1f c0       	rjmp	.+62     	; 0x51f0 <APP_vCalculatorLCD+0x438>
    51b2:	fe 01       	movw	r30, r28
    51b4:	e7 5b       	subi	r30, 0xB7	; 183
    51b6:	ff 4f       	sbci	r31, 0xFF	; 255
    51b8:	80 e9       	ldi	r24, 0x90	; 144
    51ba:	91 e0       	ldi	r25, 0x01	; 1
    51bc:	91 83       	std	Z+1, r25	; 0x01
    51be:	80 83       	st	Z, r24
    51c0:	fe 01       	movw	r30, r28
    51c2:	e7 5b       	subi	r30, 0xB7	; 183
    51c4:	ff 4f       	sbci	r31, 0xFF	; 255
    51c6:	80 81       	ld	r24, Z
    51c8:	91 81       	ldd	r25, Z+1	; 0x01
    51ca:	01 97       	sbiw	r24, 0x01	; 1
    51cc:	f1 f7       	brne	.-4      	; 0x51ca <APP_vCalculatorLCD+0x412>
    51ce:	fe 01       	movw	r30, r28
    51d0:	e7 5b       	subi	r30, 0xB7	; 183
    51d2:	ff 4f       	sbci	r31, 0xFF	; 255
    51d4:	91 83       	std	Z+1, r25	; 0x01
    51d6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    51d8:	de 01       	movw	r26, r28
    51da:	a5 5b       	subi	r26, 0xB5	; 181
    51dc:	bf 4f       	sbci	r27, 0xFF	; 255
    51de:	fe 01       	movw	r30, r28
    51e0:	e5 5b       	subi	r30, 0xB5	; 181
    51e2:	ff 4f       	sbci	r31, 0xFF	; 255
    51e4:	80 81       	ld	r24, Z
    51e6:	91 81       	ldd	r25, Z+1	; 0x01
    51e8:	01 97       	sbiw	r24, 0x01	; 1
    51ea:	11 96       	adiw	r26, 0x01	; 1
    51ec:	9c 93       	st	X, r25
    51ee:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    51f0:	fe 01       	movw	r30, r28
    51f2:	e5 5b       	subi	r30, 0xB5	; 181
    51f4:	ff 4f       	sbci	r31, 0xFF	; 255
    51f6:	80 81       	ld	r24, Z
    51f8:	91 81       	ldd	r25, Z+1	; 0x01
    51fa:	00 97       	sbiw	r24, 0x00	; 0
    51fc:	d1 f6       	brne	.-76     	; 0x51b2 <APP_vCalculatorLCD+0x3fa>
    51fe:	28 c0       	rjmp	.+80     	; 0x5250 <APP_vCalculatorLCD+0x498>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5200:	8e 01       	movw	r16, r28
    5202:	05 5b       	subi	r16, 0xB5	; 181
    5204:	1f 4f       	sbci	r17, 0xFF	; 255
    5206:	fe 01       	movw	r30, r28
    5208:	e3 5b       	subi	r30, 0xB3	; 179
    520a:	ff 4f       	sbci	r31, 0xFF	; 255
    520c:	60 81       	ld	r22, Z
    520e:	71 81       	ldd	r23, Z+1	; 0x01
    5210:	82 81       	ldd	r24, Z+2	; 0x02
    5212:	93 81       	ldd	r25, Z+3	; 0x03
    5214:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5218:	dc 01       	movw	r26, r24
    521a:	cb 01       	movw	r24, r22
    521c:	f8 01       	movw	r30, r16
    521e:	91 83       	std	Z+1, r25	; 0x01
    5220:	80 83       	st	Z, r24
    5222:	de 01       	movw	r26, r28
    5224:	a9 5b       	subi	r26, 0xB9	; 185
    5226:	bf 4f       	sbci	r27, 0xFF	; 255
    5228:	fe 01       	movw	r30, r28
    522a:	e5 5b       	subi	r30, 0xB5	; 181
    522c:	ff 4f       	sbci	r31, 0xFF	; 255
    522e:	80 81       	ld	r24, Z
    5230:	91 81       	ldd	r25, Z+1	; 0x01
    5232:	11 96       	adiw	r26, 0x01	; 1
    5234:	9c 93       	st	X, r25
    5236:	8e 93       	st	-X, r24
    5238:	fe 01       	movw	r30, r28
    523a:	e9 5b       	subi	r30, 0xB9	; 185
    523c:	ff 4f       	sbci	r31, 0xFF	; 255
    523e:	80 81       	ld	r24, Z
    5240:	91 81       	ldd	r25, Z+1	; 0x01
    5242:	01 97       	sbiw	r24, 0x01	; 1
    5244:	f1 f7       	brne	.-4      	; 0x5242 <APP_vCalculatorLCD+0x48a>
    5246:	fe 01       	movw	r30, r28
    5248:	e9 5b       	subi	r30, 0xB9	; 185
    524a:	ff 4f       	sbci	r31, 0xFF	; 255
    524c:	91 83       	std	Z+1, r25	; 0x01
    524e:	80 83       	st	Z, r24
		_delay_ms(50);
		if(Loc_u8Symbol1=='/'||Loc_u8Symbol1=='*'||Loc_u8Symbol1=='-'||Loc_u8Symbol1=='+'||Loc_u8Symbol1=='%'){
    5250:	fe 01       	movw	r30, r28
    5252:	ed 58       	subi	r30, 0x8D	; 141
    5254:	ff 4f       	sbci	r31, 0xFF	; 255
    5256:	80 81       	ld	r24, Z
    5258:	8f 32       	cpi	r24, 0x2F	; 47
    525a:	c9 f0       	breq	.+50     	; 0x528e <APP_vCalculatorLCD+0x4d6>
    525c:	fe 01       	movw	r30, r28
    525e:	ed 58       	subi	r30, 0x8D	; 141
    5260:	ff 4f       	sbci	r31, 0xFF	; 255
    5262:	80 81       	ld	r24, Z
    5264:	8a 32       	cpi	r24, 0x2A	; 42
    5266:	99 f0       	breq	.+38     	; 0x528e <APP_vCalculatorLCD+0x4d6>
    5268:	fe 01       	movw	r30, r28
    526a:	ed 58       	subi	r30, 0x8D	; 141
    526c:	ff 4f       	sbci	r31, 0xFF	; 255
    526e:	80 81       	ld	r24, Z
    5270:	8d 32       	cpi	r24, 0x2D	; 45
    5272:	69 f0       	breq	.+26     	; 0x528e <APP_vCalculatorLCD+0x4d6>
    5274:	fe 01       	movw	r30, r28
    5276:	ed 58       	subi	r30, 0x8D	; 141
    5278:	ff 4f       	sbci	r31, 0xFF	; 255
    527a:	80 81       	ld	r24, Z
    527c:	8b 32       	cpi	r24, 0x2B	; 43
    527e:	39 f0       	breq	.+14     	; 0x528e <APP_vCalculatorLCD+0x4d6>
    5280:	fe 01       	movw	r30, r28
    5282:	ed 58       	subi	r30, 0x8D	; 141
    5284:	ff 4f       	sbci	r31, 0xFF	; 255
    5286:	80 81       	ld	r24, Z
    5288:	85 32       	cpi	r24, 0x25	; 37
    528a:	09 f0       	breq	.+2      	; 0x528e <APP_vCalculatorLCD+0x4d6>
    528c:	27 cf       	rjmp	.-434    	; 0x50dc <APP_vCalculatorLCD+0x324>
			LCD_vInitWithOutClear();
    528e:	0e 94 3c 1c 	call	0x3878	; 0x3878 <LCD_vInitWithOutClear>
			LCD_vGoTo(LineOne,1);
    5292:	80 e8       	ldi	r24, 0x80	; 128
    5294:	61 e0       	ldi	r22, 0x01	; 1
    5296:	0e 94 6d 1f 	call	0x3eda	; 0x3eda <LCD_vGoTo>
			LCD_vWriteCharacter(Loc_u8Symbol1);
    529a:	fe 01       	movw	r30, r28
    529c:	ed 58       	subi	r30, 0x8D	; 141
    529e:	ff 4f       	sbci	r31, 0xFF	; 255
    52a0:	80 81       	ld	r24, Z
    52a2:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <LCD_vWriteCharacter>
    52a6:	fe 01       	movw	r30, r28
    52a8:	ed 5b       	subi	r30, 0xBD	; 189
    52aa:	ff 4f       	sbci	r31, 0xFF	; 255
    52ac:	80 e0       	ldi	r24, 0x00	; 0
    52ae:	90 e0       	ldi	r25, 0x00	; 0
    52b0:	a8 e4       	ldi	r26, 0x48	; 72
    52b2:	b2 e4       	ldi	r27, 0x42	; 66
    52b4:	80 83       	st	Z, r24
    52b6:	91 83       	std	Z+1, r25	; 0x01
    52b8:	a2 83       	std	Z+2, r26	; 0x02
    52ba:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    52bc:	8e 01       	movw	r16, r28
    52be:	01 5c       	subi	r16, 0xC1	; 193
    52c0:	1f 4f       	sbci	r17, 0xFF	; 255
    52c2:	fe 01       	movw	r30, r28
    52c4:	ed 5b       	subi	r30, 0xBD	; 189
    52c6:	ff 4f       	sbci	r31, 0xFF	; 255
    52c8:	60 81       	ld	r22, Z
    52ca:	71 81       	ldd	r23, Z+1	; 0x01
    52cc:	82 81       	ldd	r24, Z+2	; 0x02
    52ce:	93 81       	ldd	r25, Z+3	; 0x03
    52d0:	20 e0       	ldi	r18, 0x00	; 0
    52d2:	30 e0       	ldi	r19, 0x00	; 0
    52d4:	4a e7       	ldi	r20, 0x7A	; 122
    52d6:	55 e4       	ldi	r21, 0x45	; 69
    52d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52dc:	dc 01       	movw	r26, r24
    52de:	cb 01       	movw	r24, r22
    52e0:	f8 01       	movw	r30, r16
    52e2:	80 83       	st	Z, r24
    52e4:	91 83       	std	Z+1, r25	; 0x01
    52e6:	a2 83       	std	Z+2, r26	; 0x02
    52e8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    52ea:	fe 01       	movw	r30, r28
    52ec:	ff 96       	adiw	r30, 0x3f	; 63
    52ee:	60 81       	ld	r22, Z
    52f0:	71 81       	ldd	r23, Z+1	; 0x01
    52f2:	82 81       	ldd	r24, Z+2	; 0x02
    52f4:	93 81       	ldd	r25, Z+3	; 0x03
    52f6:	20 e0       	ldi	r18, 0x00	; 0
    52f8:	30 e0       	ldi	r19, 0x00	; 0
    52fa:	40 e8       	ldi	r20, 0x80	; 128
    52fc:	5f e3       	ldi	r21, 0x3F	; 63
    52fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5302:	88 23       	and	r24, r24
    5304:	2c f4       	brge	.+10     	; 0x5310 <APP_vCalculatorLCD+0x558>
		__ticks = 1;
    5306:	81 e0       	ldi	r24, 0x01	; 1
    5308:	90 e0       	ldi	r25, 0x00	; 0
    530a:	9e af       	std	Y+62, r25	; 0x3e
    530c:	8d af       	std	Y+61, r24	; 0x3d
    530e:	46 c0       	rjmp	.+140    	; 0x539c <APP_vCalculatorLCD+0x5e4>
	else if (__tmp > 65535)
    5310:	fe 01       	movw	r30, r28
    5312:	ff 96       	adiw	r30, 0x3f	; 63
    5314:	60 81       	ld	r22, Z
    5316:	71 81       	ldd	r23, Z+1	; 0x01
    5318:	82 81       	ldd	r24, Z+2	; 0x02
    531a:	93 81       	ldd	r25, Z+3	; 0x03
    531c:	20 e0       	ldi	r18, 0x00	; 0
    531e:	3f ef       	ldi	r19, 0xFF	; 255
    5320:	4f e7       	ldi	r20, 0x7F	; 127
    5322:	57 e4       	ldi	r21, 0x47	; 71
    5324:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5328:	18 16       	cp	r1, r24
    532a:	64 f5       	brge	.+88     	; 0x5384 <APP_vCalculatorLCD+0x5cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    532c:	fe 01       	movw	r30, r28
    532e:	ed 5b       	subi	r30, 0xBD	; 189
    5330:	ff 4f       	sbci	r31, 0xFF	; 255
    5332:	60 81       	ld	r22, Z
    5334:	71 81       	ldd	r23, Z+1	; 0x01
    5336:	82 81       	ldd	r24, Z+2	; 0x02
    5338:	93 81       	ldd	r25, Z+3	; 0x03
    533a:	20 e0       	ldi	r18, 0x00	; 0
    533c:	30 e0       	ldi	r19, 0x00	; 0
    533e:	40 e2       	ldi	r20, 0x20	; 32
    5340:	51 e4       	ldi	r21, 0x41	; 65
    5342:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5346:	dc 01       	movw	r26, r24
    5348:	cb 01       	movw	r24, r22
    534a:	bc 01       	movw	r22, r24
    534c:	cd 01       	movw	r24, r26
    534e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5352:	dc 01       	movw	r26, r24
    5354:	cb 01       	movw	r24, r22
    5356:	9e af       	std	Y+62, r25	; 0x3e
    5358:	8d af       	std	Y+61, r24	; 0x3d
    535a:	0f c0       	rjmp	.+30     	; 0x537a <APP_vCalculatorLCD+0x5c2>
    535c:	80 e9       	ldi	r24, 0x90	; 144
    535e:	91 e0       	ldi	r25, 0x01	; 1
    5360:	9c af       	std	Y+60, r25	; 0x3c
    5362:	8b af       	std	Y+59, r24	; 0x3b
    5364:	8b ad       	ldd	r24, Y+59	; 0x3b
    5366:	9c ad       	ldd	r25, Y+60	; 0x3c
    5368:	01 97       	sbiw	r24, 0x01	; 1
    536a:	f1 f7       	brne	.-4      	; 0x5368 <APP_vCalculatorLCD+0x5b0>
    536c:	9c af       	std	Y+60, r25	; 0x3c
    536e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5370:	8d ad       	ldd	r24, Y+61	; 0x3d
    5372:	9e ad       	ldd	r25, Y+62	; 0x3e
    5374:	01 97       	sbiw	r24, 0x01	; 1
    5376:	9e af       	std	Y+62, r25	; 0x3e
    5378:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    537a:	8d ad       	ldd	r24, Y+61	; 0x3d
    537c:	9e ad       	ldd	r25, Y+62	; 0x3e
    537e:	00 97       	sbiw	r24, 0x00	; 0
    5380:	69 f7       	brne	.-38     	; 0x535c <APP_vCalculatorLCD+0x5a4>
    5382:	16 c0       	rjmp	.+44     	; 0x53b0 <APP_vCalculatorLCD+0x5f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5384:	fe 01       	movw	r30, r28
    5386:	ff 96       	adiw	r30, 0x3f	; 63
    5388:	60 81       	ld	r22, Z
    538a:	71 81       	ldd	r23, Z+1	; 0x01
    538c:	82 81       	ldd	r24, Z+2	; 0x02
    538e:	93 81       	ldd	r25, Z+3	; 0x03
    5390:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5394:	dc 01       	movw	r26, r24
    5396:	cb 01       	movw	r24, r22
    5398:	9e af       	std	Y+62, r25	; 0x3e
    539a:	8d af       	std	Y+61, r24	; 0x3d
    539c:	8d ad       	ldd	r24, Y+61	; 0x3d
    539e:	9e ad       	ldd	r25, Y+62	; 0x3e
    53a0:	9a af       	std	Y+58, r25	; 0x3a
    53a2:	89 af       	std	Y+57, r24	; 0x39
    53a4:	89 ad       	ldd	r24, Y+57	; 0x39
    53a6:	9a ad       	ldd	r25, Y+58	; 0x3a
    53a8:	01 97       	sbiw	r24, 0x01	; 1
    53aa:	f1 f7       	brne	.-4      	; 0x53a8 <APP_vCalculatorLCD+0x5f0>
    53ac:	9a af       	std	Y+58, r25	; 0x3a
    53ae:	89 af       	std	Y+57, r24	; 0x39
			break;
		}
	}
	_delay_ms(50);
	KAYPAD_vInit();
    53b0:	0e 94 87 20 	call	0x410e	; 0x410e <KAYPAD_vInit>
	while(1){
		Loc_u8Num2=KAYPAD_u8GetKey();
    53b4:	0e 94 96 20 	call	0x412c	; 0x412c <KAYPAD_u8GetKey>
    53b8:	fe 01       	movw	r30, r28
    53ba:	ec 58       	subi	r30, 0x8C	; 140
    53bc:	ff 4f       	sbci	r31, 0xFF	; 255
    53be:	80 83       	st	Z, r24
    53c0:	80 e0       	ldi	r24, 0x00	; 0
    53c2:	90 e0       	ldi	r25, 0x00	; 0
    53c4:	a8 e4       	ldi	r26, 0x48	; 72
    53c6:	b2 e4       	ldi	r27, 0x42	; 66
    53c8:	8d ab       	std	Y+53, r24	; 0x35
    53ca:	9e ab       	std	Y+54, r25	; 0x36
    53cc:	af ab       	std	Y+55, r26	; 0x37
    53ce:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    53d0:	6d a9       	ldd	r22, Y+53	; 0x35
    53d2:	7e a9       	ldd	r23, Y+54	; 0x36
    53d4:	8f a9       	ldd	r24, Y+55	; 0x37
    53d6:	98 ad       	ldd	r25, Y+56	; 0x38
    53d8:	20 e0       	ldi	r18, 0x00	; 0
    53da:	30 e0       	ldi	r19, 0x00	; 0
    53dc:	4a e7       	ldi	r20, 0x7A	; 122
    53de:	55 e4       	ldi	r21, 0x45	; 69
    53e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53e4:	dc 01       	movw	r26, r24
    53e6:	cb 01       	movw	r24, r22
    53e8:	89 ab       	std	Y+49, r24	; 0x31
    53ea:	9a ab       	std	Y+50, r25	; 0x32
    53ec:	ab ab       	std	Y+51, r26	; 0x33
    53ee:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    53f0:	69 a9       	ldd	r22, Y+49	; 0x31
    53f2:	7a a9       	ldd	r23, Y+50	; 0x32
    53f4:	8b a9       	ldd	r24, Y+51	; 0x33
    53f6:	9c a9       	ldd	r25, Y+52	; 0x34
    53f8:	20 e0       	ldi	r18, 0x00	; 0
    53fa:	30 e0       	ldi	r19, 0x00	; 0
    53fc:	40 e8       	ldi	r20, 0x80	; 128
    53fe:	5f e3       	ldi	r21, 0x3F	; 63
    5400:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5404:	88 23       	and	r24, r24
    5406:	2c f4       	brge	.+10     	; 0x5412 <APP_vCalculatorLCD+0x65a>
		__ticks = 1;
    5408:	81 e0       	ldi	r24, 0x01	; 1
    540a:	90 e0       	ldi	r25, 0x00	; 0
    540c:	98 ab       	std	Y+48, r25	; 0x30
    540e:	8f a7       	std	Y+47, r24	; 0x2f
    5410:	3f c0       	rjmp	.+126    	; 0x5490 <APP_vCalculatorLCD+0x6d8>
	else if (__tmp > 65535)
    5412:	69 a9       	ldd	r22, Y+49	; 0x31
    5414:	7a a9       	ldd	r23, Y+50	; 0x32
    5416:	8b a9       	ldd	r24, Y+51	; 0x33
    5418:	9c a9       	ldd	r25, Y+52	; 0x34
    541a:	20 e0       	ldi	r18, 0x00	; 0
    541c:	3f ef       	ldi	r19, 0xFF	; 255
    541e:	4f e7       	ldi	r20, 0x7F	; 127
    5420:	57 e4       	ldi	r21, 0x47	; 71
    5422:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5426:	18 16       	cp	r1, r24
    5428:	4c f5       	brge	.+82     	; 0x547c <APP_vCalculatorLCD+0x6c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    542a:	6d a9       	ldd	r22, Y+53	; 0x35
    542c:	7e a9       	ldd	r23, Y+54	; 0x36
    542e:	8f a9       	ldd	r24, Y+55	; 0x37
    5430:	98 ad       	ldd	r25, Y+56	; 0x38
    5432:	20 e0       	ldi	r18, 0x00	; 0
    5434:	30 e0       	ldi	r19, 0x00	; 0
    5436:	40 e2       	ldi	r20, 0x20	; 32
    5438:	51 e4       	ldi	r21, 0x41	; 65
    543a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    543e:	dc 01       	movw	r26, r24
    5440:	cb 01       	movw	r24, r22
    5442:	bc 01       	movw	r22, r24
    5444:	cd 01       	movw	r24, r26
    5446:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    544a:	dc 01       	movw	r26, r24
    544c:	cb 01       	movw	r24, r22
    544e:	98 ab       	std	Y+48, r25	; 0x30
    5450:	8f a7       	std	Y+47, r24	; 0x2f
    5452:	0f c0       	rjmp	.+30     	; 0x5472 <APP_vCalculatorLCD+0x6ba>
    5454:	80 e9       	ldi	r24, 0x90	; 144
    5456:	91 e0       	ldi	r25, 0x01	; 1
    5458:	9e a7       	std	Y+46, r25	; 0x2e
    545a:	8d a7       	std	Y+45, r24	; 0x2d
    545c:	8d a5       	ldd	r24, Y+45	; 0x2d
    545e:	9e a5       	ldd	r25, Y+46	; 0x2e
    5460:	01 97       	sbiw	r24, 0x01	; 1
    5462:	f1 f7       	brne	.-4      	; 0x5460 <APP_vCalculatorLCD+0x6a8>
    5464:	9e a7       	std	Y+46, r25	; 0x2e
    5466:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5468:	8f a5       	ldd	r24, Y+47	; 0x2f
    546a:	98 a9       	ldd	r25, Y+48	; 0x30
    546c:	01 97       	sbiw	r24, 0x01	; 1
    546e:	98 ab       	std	Y+48, r25	; 0x30
    5470:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5472:	8f a5       	ldd	r24, Y+47	; 0x2f
    5474:	98 a9       	ldd	r25, Y+48	; 0x30
    5476:	00 97       	sbiw	r24, 0x00	; 0
    5478:	69 f7       	brne	.-38     	; 0x5454 <APP_vCalculatorLCD+0x69c>
    547a:	14 c0       	rjmp	.+40     	; 0x54a4 <APP_vCalculatorLCD+0x6ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    547c:	69 a9       	ldd	r22, Y+49	; 0x31
    547e:	7a a9       	ldd	r23, Y+50	; 0x32
    5480:	8b a9       	ldd	r24, Y+51	; 0x33
    5482:	9c a9       	ldd	r25, Y+52	; 0x34
    5484:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5488:	dc 01       	movw	r26, r24
    548a:	cb 01       	movw	r24, r22
    548c:	98 ab       	std	Y+48, r25	; 0x30
    548e:	8f a7       	std	Y+47, r24	; 0x2f
    5490:	8f a5       	ldd	r24, Y+47	; 0x2f
    5492:	98 a9       	ldd	r25, Y+48	; 0x30
    5494:	9c a7       	std	Y+44, r25	; 0x2c
    5496:	8b a7       	std	Y+43, r24	; 0x2b
    5498:	8b a5       	ldd	r24, Y+43	; 0x2b
    549a:	9c a5       	ldd	r25, Y+44	; 0x2c
    549c:	01 97       	sbiw	r24, 0x01	; 1
    549e:	f1 f7       	brne	.-4      	; 0x549c <APP_vCalculatorLCD+0x6e4>
    54a0:	9c a7       	std	Y+44, r25	; 0x2c
    54a2:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(50);
		if(Loc_u8Num2!=0xff){
    54a4:	fe 01       	movw	r30, r28
    54a6:	ec 58       	subi	r30, 0x8C	; 140
    54a8:	ff 4f       	sbci	r31, 0xFF	; 255
    54aa:	80 81       	ld	r24, Z
    54ac:	8f 3f       	cpi	r24, 0xFF	; 255
    54ae:	09 f4       	brne	.+2      	; 0x54b2 <APP_vCalculatorLCD+0x6fa>
    54b0:	81 cf       	rjmp	.-254    	; 0x53b4 <APP_vCalculatorLCD+0x5fc>
			LCD_vInitWithOutClear();
    54b2:	0e 94 3c 1c 	call	0x3878	; 0x3878 <LCD_vInitWithOutClear>
			LCD_vGoTo(LineOne,2);
    54b6:	80 e8       	ldi	r24, 0x80	; 128
    54b8:	62 e0       	ldi	r22, 0x02	; 2
    54ba:	0e 94 6d 1f 	call	0x3eda	; 0x3eda <LCD_vGoTo>
			LCD_vWriteCharacter(Loc_u8Num2+48);
    54be:	fe 01       	movw	r30, r28
    54c0:	ec 58       	subi	r30, 0x8C	; 140
    54c2:	ff 4f       	sbci	r31, 0xFF	; 255
    54c4:	80 81       	ld	r24, Z
    54c6:	80 5d       	subi	r24, 0xD0	; 208
    54c8:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <LCD_vWriteCharacter>
    54cc:	80 e0       	ldi	r24, 0x00	; 0
    54ce:	90 e0       	ldi	r25, 0x00	; 0
    54d0:	a8 e4       	ldi	r26, 0x48	; 72
    54d2:	b2 e4       	ldi	r27, 0x42	; 66
    54d4:	8f a3       	std	Y+39, r24	; 0x27
    54d6:	98 a7       	std	Y+40, r25	; 0x28
    54d8:	a9 a7       	std	Y+41, r26	; 0x29
    54da:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    54dc:	6f a1       	ldd	r22, Y+39	; 0x27
    54de:	78 a5       	ldd	r23, Y+40	; 0x28
    54e0:	89 a5       	ldd	r24, Y+41	; 0x29
    54e2:	9a a5       	ldd	r25, Y+42	; 0x2a
    54e4:	20 e0       	ldi	r18, 0x00	; 0
    54e6:	30 e0       	ldi	r19, 0x00	; 0
    54e8:	4a e7       	ldi	r20, 0x7A	; 122
    54ea:	55 e4       	ldi	r21, 0x45	; 69
    54ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    54f0:	dc 01       	movw	r26, r24
    54f2:	cb 01       	movw	r24, r22
    54f4:	8b a3       	std	Y+35, r24	; 0x23
    54f6:	9c a3       	std	Y+36, r25	; 0x24
    54f8:	ad a3       	std	Y+37, r26	; 0x25
    54fa:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    54fc:	6b a1       	ldd	r22, Y+35	; 0x23
    54fe:	7c a1       	ldd	r23, Y+36	; 0x24
    5500:	8d a1       	ldd	r24, Y+37	; 0x25
    5502:	9e a1       	ldd	r25, Y+38	; 0x26
    5504:	20 e0       	ldi	r18, 0x00	; 0
    5506:	30 e0       	ldi	r19, 0x00	; 0
    5508:	40 e8       	ldi	r20, 0x80	; 128
    550a:	5f e3       	ldi	r21, 0x3F	; 63
    550c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5510:	88 23       	and	r24, r24
    5512:	2c f4       	brge	.+10     	; 0x551e <APP_vCalculatorLCD+0x766>
		__ticks = 1;
    5514:	81 e0       	ldi	r24, 0x01	; 1
    5516:	90 e0       	ldi	r25, 0x00	; 0
    5518:	9a a3       	std	Y+34, r25	; 0x22
    551a:	89 a3       	std	Y+33, r24	; 0x21
    551c:	3f c0       	rjmp	.+126    	; 0x559c <APP_vCalculatorLCD+0x7e4>
	else if (__tmp > 65535)
    551e:	6b a1       	ldd	r22, Y+35	; 0x23
    5520:	7c a1       	ldd	r23, Y+36	; 0x24
    5522:	8d a1       	ldd	r24, Y+37	; 0x25
    5524:	9e a1       	ldd	r25, Y+38	; 0x26
    5526:	20 e0       	ldi	r18, 0x00	; 0
    5528:	3f ef       	ldi	r19, 0xFF	; 255
    552a:	4f e7       	ldi	r20, 0x7F	; 127
    552c:	57 e4       	ldi	r21, 0x47	; 71
    552e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5532:	18 16       	cp	r1, r24
    5534:	4c f5       	brge	.+82     	; 0x5588 <APP_vCalculatorLCD+0x7d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5536:	6f a1       	ldd	r22, Y+39	; 0x27
    5538:	78 a5       	ldd	r23, Y+40	; 0x28
    553a:	89 a5       	ldd	r24, Y+41	; 0x29
    553c:	9a a5       	ldd	r25, Y+42	; 0x2a
    553e:	20 e0       	ldi	r18, 0x00	; 0
    5540:	30 e0       	ldi	r19, 0x00	; 0
    5542:	40 e2       	ldi	r20, 0x20	; 32
    5544:	51 e4       	ldi	r21, 0x41	; 65
    5546:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    554a:	dc 01       	movw	r26, r24
    554c:	cb 01       	movw	r24, r22
    554e:	bc 01       	movw	r22, r24
    5550:	cd 01       	movw	r24, r26
    5552:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5556:	dc 01       	movw	r26, r24
    5558:	cb 01       	movw	r24, r22
    555a:	9a a3       	std	Y+34, r25	; 0x22
    555c:	89 a3       	std	Y+33, r24	; 0x21
    555e:	0f c0       	rjmp	.+30     	; 0x557e <APP_vCalculatorLCD+0x7c6>
    5560:	80 e9       	ldi	r24, 0x90	; 144
    5562:	91 e0       	ldi	r25, 0x01	; 1
    5564:	98 a3       	std	Y+32, r25	; 0x20
    5566:	8f 8f       	std	Y+31, r24	; 0x1f
    5568:	8f 8d       	ldd	r24, Y+31	; 0x1f
    556a:	98 a1       	ldd	r25, Y+32	; 0x20
    556c:	01 97       	sbiw	r24, 0x01	; 1
    556e:	f1 f7       	brne	.-4      	; 0x556c <APP_vCalculatorLCD+0x7b4>
    5570:	98 a3       	std	Y+32, r25	; 0x20
    5572:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5574:	89 a1       	ldd	r24, Y+33	; 0x21
    5576:	9a a1       	ldd	r25, Y+34	; 0x22
    5578:	01 97       	sbiw	r24, 0x01	; 1
    557a:	9a a3       	std	Y+34, r25	; 0x22
    557c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    557e:	89 a1       	ldd	r24, Y+33	; 0x21
    5580:	9a a1       	ldd	r25, Y+34	; 0x22
    5582:	00 97       	sbiw	r24, 0x00	; 0
    5584:	69 f7       	brne	.-38     	; 0x5560 <APP_vCalculatorLCD+0x7a8>
    5586:	14 c0       	rjmp	.+40     	; 0x55b0 <APP_vCalculatorLCD+0x7f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5588:	6b a1       	ldd	r22, Y+35	; 0x23
    558a:	7c a1       	ldd	r23, Y+36	; 0x24
    558c:	8d a1       	ldd	r24, Y+37	; 0x25
    558e:	9e a1       	ldd	r25, Y+38	; 0x26
    5590:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5594:	dc 01       	movw	r26, r24
    5596:	cb 01       	movw	r24, r22
    5598:	9a a3       	std	Y+34, r25	; 0x22
    559a:	89 a3       	std	Y+33, r24	; 0x21
    559c:	89 a1       	ldd	r24, Y+33	; 0x21
    559e:	9a a1       	ldd	r25, Y+34	; 0x22
    55a0:	9e 8f       	std	Y+30, r25	; 0x1e
    55a2:	8d 8f       	std	Y+29, r24	; 0x1d
    55a4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    55a6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    55a8:	01 97       	sbiw	r24, 0x01	; 1
    55aa:	f1 f7       	brne	.-4      	; 0x55a8 <APP_vCalculatorLCD+0x7f0>
    55ac:	9e 8f       	std	Y+30, r25	; 0x1e
    55ae:	8d 8f       	std	Y+29, r24	; 0x1d
			break;
		}
	}
	_delay_ms(50);
	KAYPAD_vInit();
    55b0:	0e 94 87 20 	call	0x410e	; 0x410e <KAYPAD_vInit>
	while(1){
		Loc_u8Symbol2=KAYPAD_u8GetKey();
    55b4:	0e 94 96 20 	call	0x412c	; 0x412c <KAYPAD_u8GetKey>
    55b8:	fe 01       	movw	r30, r28
    55ba:	ee 58       	subi	r30, 0x8E	; 142
    55bc:	ff 4f       	sbci	r31, 0xFF	; 255
    55be:	80 83       	st	Z, r24
    55c0:	80 e0       	ldi	r24, 0x00	; 0
    55c2:	90 e0       	ldi	r25, 0x00	; 0
    55c4:	a8 e4       	ldi	r26, 0x48	; 72
    55c6:	b2 e4       	ldi	r27, 0x42	; 66
    55c8:	89 8f       	std	Y+25, r24	; 0x19
    55ca:	9a 8f       	std	Y+26, r25	; 0x1a
    55cc:	ab 8f       	std	Y+27, r26	; 0x1b
    55ce:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    55d0:	69 8d       	ldd	r22, Y+25	; 0x19
    55d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    55d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    55d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    55d8:	20 e0       	ldi	r18, 0x00	; 0
    55da:	30 e0       	ldi	r19, 0x00	; 0
    55dc:	4a e7       	ldi	r20, 0x7A	; 122
    55de:	55 e4       	ldi	r21, 0x45	; 69
    55e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55e4:	dc 01       	movw	r26, r24
    55e6:	cb 01       	movw	r24, r22
    55e8:	8d 8b       	std	Y+21, r24	; 0x15
    55ea:	9e 8b       	std	Y+22, r25	; 0x16
    55ec:	af 8b       	std	Y+23, r26	; 0x17
    55ee:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    55f0:	6d 89       	ldd	r22, Y+21	; 0x15
    55f2:	7e 89       	ldd	r23, Y+22	; 0x16
    55f4:	8f 89       	ldd	r24, Y+23	; 0x17
    55f6:	98 8d       	ldd	r25, Y+24	; 0x18
    55f8:	20 e0       	ldi	r18, 0x00	; 0
    55fa:	30 e0       	ldi	r19, 0x00	; 0
    55fc:	40 e8       	ldi	r20, 0x80	; 128
    55fe:	5f e3       	ldi	r21, 0x3F	; 63
    5600:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5604:	88 23       	and	r24, r24
    5606:	2c f4       	brge	.+10     	; 0x5612 <APP_vCalculatorLCD+0x85a>
		__ticks = 1;
    5608:	81 e0       	ldi	r24, 0x01	; 1
    560a:	90 e0       	ldi	r25, 0x00	; 0
    560c:	9c 8b       	std	Y+20, r25	; 0x14
    560e:	8b 8b       	std	Y+19, r24	; 0x13
    5610:	3f c0       	rjmp	.+126    	; 0x5690 <APP_vCalculatorLCD+0x8d8>
	else if (__tmp > 65535)
    5612:	6d 89       	ldd	r22, Y+21	; 0x15
    5614:	7e 89       	ldd	r23, Y+22	; 0x16
    5616:	8f 89       	ldd	r24, Y+23	; 0x17
    5618:	98 8d       	ldd	r25, Y+24	; 0x18
    561a:	20 e0       	ldi	r18, 0x00	; 0
    561c:	3f ef       	ldi	r19, 0xFF	; 255
    561e:	4f e7       	ldi	r20, 0x7F	; 127
    5620:	57 e4       	ldi	r21, 0x47	; 71
    5622:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5626:	18 16       	cp	r1, r24
    5628:	4c f5       	brge	.+82     	; 0x567c <APP_vCalculatorLCD+0x8c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    562a:	69 8d       	ldd	r22, Y+25	; 0x19
    562c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    562e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5630:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5632:	20 e0       	ldi	r18, 0x00	; 0
    5634:	30 e0       	ldi	r19, 0x00	; 0
    5636:	40 e2       	ldi	r20, 0x20	; 32
    5638:	51 e4       	ldi	r21, 0x41	; 65
    563a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    563e:	dc 01       	movw	r26, r24
    5640:	cb 01       	movw	r24, r22
    5642:	bc 01       	movw	r22, r24
    5644:	cd 01       	movw	r24, r26
    5646:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    564a:	dc 01       	movw	r26, r24
    564c:	cb 01       	movw	r24, r22
    564e:	9c 8b       	std	Y+20, r25	; 0x14
    5650:	8b 8b       	std	Y+19, r24	; 0x13
    5652:	0f c0       	rjmp	.+30     	; 0x5672 <APP_vCalculatorLCD+0x8ba>
    5654:	80 e9       	ldi	r24, 0x90	; 144
    5656:	91 e0       	ldi	r25, 0x01	; 1
    5658:	9a 8b       	std	Y+18, r25	; 0x12
    565a:	89 8b       	std	Y+17, r24	; 0x11
    565c:	89 89       	ldd	r24, Y+17	; 0x11
    565e:	9a 89       	ldd	r25, Y+18	; 0x12
    5660:	01 97       	sbiw	r24, 0x01	; 1
    5662:	f1 f7       	brne	.-4      	; 0x5660 <APP_vCalculatorLCD+0x8a8>
    5664:	9a 8b       	std	Y+18, r25	; 0x12
    5666:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5668:	8b 89       	ldd	r24, Y+19	; 0x13
    566a:	9c 89       	ldd	r25, Y+20	; 0x14
    566c:	01 97       	sbiw	r24, 0x01	; 1
    566e:	9c 8b       	std	Y+20, r25	; 0x14
    5670:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5672:	8b 89       	ldd	r24, Y+19	; 0x13
    5674:	9c 89       	ldd	r25, Y+20	; 0x14
    5676:	00 97       	sbiw	r24, 0x00	; 0
    5678:	69 f7       	brne	.-38     	; 0x5654 <APP_vCalculatorLCD+0x89c>
    567a:	14 c0       	rjmp	.+40     	; 0x56a4 <APP_vCalculatorLCD+0x8ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    567c:	6d 89       	ldd	r22, Y+21	; 0x15
    567e:	7e 89       	ldd	r23, Y+22	; 0x16
    5680:	8f 89       	ldd	r24, Y+23	; 0x17
    5682:	98 8d       	ldd	r25, Y+24	; 0x18
    5684:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5688:	dc 01       	movw	r26, r24
    568a:	cb 01       	movw	r24, r22
    568c:	9c 8b       	std	Y+20, r25	; 0x14
    568e:	8b 8b       	std	Y+19, r24	; 0x13
    5690:	8b 89       	ldd	r24, Y+19	; 0x13
    5692:	9c 89       	ldd	r25, Y+20	; 0x14
    5694:	98 8b       	std	Y+16, r25	; 0x10
    5696:	8f 87       	std	Y+15, r24	; 0x0f
    5698:	8f 85       	ldd	r24, Y+15	; 0x0f
    569a:	98 89       	ldd	r25, Y+16	; 0x10
    569c:	01 97       	sbiw	r24, 0x01	; 1
    569e:	f1 f7       	brne	.-4      	; 0x569c <APP_vCalculatorLCD+0x8e4>
    56a0:	98 8b       	std	Y+16, r25	; 0x10
    56a2:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(50);
		if(Loc_u8Symbol2=='='){
    56a4:	fe 01       	movw	r30, r28
    56a6:	ee 58       	subi	r30, 0x8E	; 142
    56a8:	ff 4f       	sbci	r31, 0xFF	; 255
    56aa:	80 81       	ld	r24, Z
    56ac:	8d 33       	cpi	r24, 0x3D	; 61
    56ae:	09 f0       	breq	.+2      	; 0x56b2 <APP_vCalculatorLCD+0x8fa>
    56b0:	81 cf       	rjmp	.-254    	; 0x55b4 <APP_vCalculatorLCD+0x7fc>
			LCD_vInitWithOutClear();
    56b2:	0e 94 3c 1c 	call	0x3878	; 0x3878 <LCD_vInitWithOutClear>
			LCD_vGoTo(LineOne,3);
    56b6:	80 e8       	ldi	r24, 0x80	; 128
    56b8:	63 e0       	ldi	r22, 0x03	; 3
    56ba:	0e 94 6d 1f 	call	0x3eda	; 0x3eda <LCD_vGoTo>
			LCD_vWriteCharacter(Loc_u8Symbol2);
    56be:	fe 01       	movw	r30, r28
    56c0:	ee 58       	subi	r30, 0x8E	; 142
    56c2:	ff 4f       	sbci	r31, 0xFF	; 255
    56c4:	80 81       	ld	r24, Z
    56c6:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <LCD_vWriteCharacter>
			break;
		}
	}
	if(Loc_u8Symbol1=='+'){
    56ca:	fe 01       	movw	r30, r28
    56cc:	ed 58       	subi	r30, 0x8D	; 141
    56ce:	ff 4f       	sbci	r31, 0xFF	; 255
    56d0:	80 81       	ld	r24, Z
    56d2:	8b 32       	cpi	r24, 0x2B	; 43
    56d4:	79 f4       	brne	.+30     	; 0x56f4 <APP_vCalculatorLCD+0x93c>
		Loc_u8sum=Loc_u8Num1+Loc_u8Num2;
    56d6:	9e 01       	movw	r18, r28
    56d8:	2f 58       	subi	r18, 0x8F	; 143
    56da:	3f 4f       	sbci	r19, 0xFF	; 255
    56dc:	fe 01       	movw	r30, r28
    56de:	eb 58       	subi	r30, 0x8B	; 139
    56e0:	ff 4f       	sbci	r31, 0xFF	; 255
    56e2:	de 01       	movw	r26, r28
    56e4:	ac 58       	subi	r26, 0x8C	; 140
    56e6:	bf 4f       	sbci	r27, 0xFF	; 255
    56e8:	90 81       	ld	r25, Z
    56ea:	8c 91       	ld	r24, X
    56ec:	89 0f       	add	r24, r25
    56ee:	f9 01       	movw	r30, r18
    56f0:	80 83       	st	Z, r24
    56f2:	5c c0       	rjmp	.+184    	; 0x57ac <APP_vCalculatorLCD+0x9f4>
	}
	else if(Loc_u8Symbol1=='-'){
    56f4:	fe 01       	movw	r30, r28
    56f6:	ed 58       	subi	r30, 0x8D	; 141
    56f8:	ff 4f       	sbci	r31, 0xFF	; 255
    56fa:	80 81       	ld	r24, Z
    56fc:	8d 32       	cpi	r24, 0x2D	; 45
    56fe:	89 f4       	brne	.+34     	; 0x5722 <APP_vCalculatorLCD+0x96a>
		Loc_u8sum=Loc_u8Num1-Loc_u8Num2;
    5700:	9e 01       	movw	r18, r28
    5702:	2f 58       	subi	r18, 0x8F	; 143
    5704:	3f 4f       	sbci	r19, 0xFF	; 255
    5706:	fe 01       	movw	r30, r28
    5708:	eb 58       	subi	r30, 0x8B	; 139
    570a:	ff 4f       	sbci	r31, 0xFF	; 255
    570c:	de 01       	movw	r26, r28
    570e:	ac 58       	subi	r26, 0x8C	; 140
    5710:	bf 4f       	sbci	r27, 0xFF	; 255
    5712:	90 81       	ld	r25, Z
    5714:	8c 91       	ld	r24, X
    5716:	f9 2f       	mov	r31, r25
    5718:	f8 1b       	sub	r31, r24
    571a:	8f 2f       	mov	r24, r31
    571c:	f9 01       	movw	r30, r18
    571e:	80 83       	st	Z, r24
    5720:	45 c0       	rjmp	.+138    	; 0x57ac <APP_vCalculatorLCD+0x9f4>
	}
	else if(Loc_u8Symbol1=='/'){
    5722:	fe 01       	movw	r30, r28
    5724:	ed 58       	subi	r30, 0x8D	; 141
    5726:	ff 4f       	sbci	r31, 0xFF	; 255
    5728:	80 81       	ld	r24, Z
    572a:	8f 32       	cpi	r24, 0x2F	; 47
    572c:	89 f4       	brne	.+34     	; 0x5750 <APP_vCalculatorLCD+0x998>
		Loc_u8sum=Loc_u8Num1/Loc_u8Num2;
    572e:	9e 01       	movw	r18, r28
    5730:	2f 58       	subi	r18, 0x8F	; 143
    5732:	3f 4f       	sbci	r19, 0xFF	; 255
    5734:	fe 01       	movw	r30, r28
    5736:	eb 58       	subi	r30, 0x8B	; 139
    5738:	ff 4f       	sbci	r31, 0xFF	; 255
    573a:	de 01       	movw	r26, r28
    573c:	ac 58       	subi	r26, 0x8C	; 140
    573e:	bf 4f       	sbci	r27, 0xFF	; 255
    5740:	80 81       	ld	r24, Z
    5742:	9c 91       	ld	r25, X
    5744:	69 2f       	mov	r22, r25
    5746:	0e 94 ca 34 	call	0x6994	; 0x6994 <__udivmodqi4>
    574a:	f9 01       	movw	r30, r18
    574c:	80 83       	st	Z, r24
    574e:	2e c0       	rjmp	.+92     	; 0x57ac <APP_vCalculatorLCD+0x9f4>
	}
	else if(Loc_u8Symbol1=='*'){
    5750:	fe 01       	movw	r30, r28
    5752:	ed 58       	subi	r30, 0x8D	; 141
    5754:	ff 4f       	sbci	r31, 0xFF	; 255
    5756:	80 81       	ld	r24, Z
    5758:	8a 32       	cpi	r24, 0x2A	; 42
    575a:	89 f4       	brne	.+34     	; 0x577e <APP_vCalculatorLCD+0x9c6>
		Loc_u8sum=Loc_u8Num1*Loc_u8Num2;
    575c:	9e 01       	movw	r18, r28
    575e:	2f 58       	subi	r18, 0x8F	; 143
    5760:	3f 4f       	sbci	r19, 0xFF	; 255
    5762:	fe 01       	movw	r30, r28
    5764:	eb 58       	subi	r30, 0x8B	; 139
    5766:	ff 4f       	sbci	r31, 0xFF	; 255
    5768:	de 01       	movw	r26, r28
    576a:	ac 58       	subi	r26, 0x8C	; 140
    576c:	bf 4f       	sbci	r27, 0xFF	; 255
    576e:	90 81       	ld	r25, Z
    5770:	8c 91       	ld	r24, X
    5772:	98 9f       	mul	r25, r24
    5774:	80 2d       	mov	r24, r0
    5776:	11 24       	eor	r1, r1
    5778:	f9 01       	movw	r30, r18
    577a:	80 83       	st	Z, r24
    577c:	17 c0       	rjmp	.+46     	; 0x57ac <APP_vCalculatorLCD+0x9f4>
	}
	else if(Loc_u8Symbol1=='%'){
    577e:	fe 01       	movw	r30, r28
    5780:	ed 58       	subi	r30, 0x8D	; 141
    5782:	ff 4f       	sbci	r31, 0xFF	; 255
    5784:	80 81       	ld	r24, Z
    5786:	85 32       	cpi	r24, 0x25	; 37
    5788:	89 f4       	brne	.+34     	; 0x57ac <APP_vCalculatorLCD+0x9f4>
		Loc_u8sum=Loc_u8Num1%Loc_u8Num2;
    578a:	9e 01       	movw	r18, r28
    578c:	2f 58       	subi	r18, 0x8F	; 143
    578e:	3f 4f       	sbci	r19, 0xFF	; 255
    5790:	fe 01       	movw	r30, r28
    5792:	eb 58       	subi	r30, 0x8B	; 139
    5794:	ff 4f       	sbci	r31, 0xFF	; 255
    5796:	de 01       	movw	r26, r28
    5798:	ac 58       	subi	r26, 0x8C	; 140
    579a:	bf 4f       	sbci	r27, 0xFF	; 255
    579c:	80 81       	ld	r24, Z
    579e:	9c 91       	ld	r25, X
    57a0:	69 2f       	mov	r22, r25
    57a2:	0e 94 ca 34 	call	0x6994	; 0x6994 <__udivmodqi4>
    57a6:	89 2f       	mov	r24, r25
    57a8:	f9 01       	movw	r30, r18
    57aa:	80 83       	st	Z, r24
	}
	else{
		//do nothing
	}
	LCD_vInitWithOutClear();
    57ac:	0e 94 3c 1c 	call	0x3878	; 0x3878 <LCD_vInitWithOutClear>
	LCD_vGoTo(LineOne,4);
    57b0:	80 e8       	ldi	r24, 0x80	; 128
    57b2:	64 e0       	ldi	r22, 0x04	; 4
    57b4:	0e 94 6d 1f 	call	0x3eda	; 0x3eda <LCD_vGoTo>
	u8 arr[3];
	APP_vToString(arr,Loc_u8sum);
    57b8:	fe 01       	movw	r30, r28
    57ba:	ef 58       	subi	r30, 0x8F	; 143
    57bc:	ff 4f       	sbci	r31, 0xFF	; 255
    57be:	80 81       	ld	r24, Z
    57c0:	28 2f       	mov	r18, r24
    57c2:	30 e0       	ldi	r19, 0x00	; 0
    57c4:	ce 01       	movw	r24, r28
    57c6:	8a 58       	subi	r24, 0x8A	; 138
    57c8:	9f 4f       	sbci	r25, 0xFF	; 255
    57ca:	b9 01       	movw	r22, r18
    57cc:	0e 94 76 26 	call	0x4cec	; 0x4cec <APP_vToString>
	LCD_vWriteString(arr);
    57d0:	ce 01       	movw	r24, r28
    57d2:	8a 58       	subi	r24, 0x8A	; 138
    57d4:	9f 4f       	sbci	r25, 0xFF	; 255
    57d6:	0e 94 06 20 	call	0x400c	; 0x400c <LCD_vWriteString>
    57da:	80 e0       	ldi	r24, 0x00	; 0
    57dc:	90 e0       	ldi	r25, 0x00	; 0
    57de:	a8 ec       	ldi	r26, 0xC8	; 200
    57e0:	b2 e4       	ldi	r27, 0x42	; 66
    57e2:	8b 87       	std	Y+11, r24	; 0x0b
    57e4:	9c 87       	std	Y+12, r25	; 0x0c
    57e6:	ad 87       	std	Y+13, r26	; 0x0d
    57e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    57ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    57ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    57ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    57f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    57f2:	20 e0       	ldi	r18, 0x00	; 0
    57f4:	30 e0       	ldi	r19, 0x00	; 0
    57f6:	4a e7       	ldi	r20, 0x7A	; 122
    57f8:	55 e4       	ldi	r21, 0x45	; 69
    57fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    57fe:	dc 01       	movw	r26, r24
    5800:	cb 01       	movw	r24, r22
    5802:	8f 83       	std	Y+7, r24	; 0x07
    5804:	98 87       	std	Y+8, r25	; 0x08
    5806:	a9 87       	std	Y+9, r26	; 0x09
    5808:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    580a:	6f 81       	ldd	r22, Y+7	; 0x07
    580c:	78 85       	ldd	r23, Y+8	; 0x08
    580e:	89 85       	ldd	r24, Y+9	; 0x09
    5810:	9a 85       	ldd	r25, Y+10	; 0x0a
    5812:	20 e0       	ldi	r18, 0x00	; 0
    5814:	30 e0       	ldi	r19, 0x00	; 0
    5816:	40 e8       	ldi	r20, 0x80	; 128
    5818:	5f e3       	ldi	r21, 0x3F	; 63
    581a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    581e:	88 23       	and	r24, r24
    5820:	2c f4       	brge	.+10     	; 0x582c <APP_vCalculatorLCD+0xa74>
		__ticks = 1;
    5822:	81 e0       	ldi	r24, 0x01	; 1
    5824:	90 e0       	ldi	r25, 0x00	; 0
    5826:	9e 83       	std	Y+6, r25	; 0x06
    5828:	8d 83       	std	Y+5, r24	; 0x05
    582a:	3f c0       	rjmp	.+126    	; 0x58aa <APP_vCalculatorLCD+0xaf2>
	else if (__tmp > 65535)
    582c:	6f 81       	ldd	r22, Y+7	; 0x07
    582e:	78 85       	ldd	r23, Y+8	; 0x08
    5830:	89 85       	ldd	r24, Y+9	; 0x09
    5832:	9a 85       	ldd	r25, Y+10	; 0x0a
    5834:	20 e0       	ldi	r18, 0x00	; 0
    5836:	3f ef       	ldi	r19, 0xFF	; 255
    5838:	4f e7       	ldi	r20, 0x7F	; 127
    583a:	57 e4       	ldi	r21, 0x47	; 71
    583c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5840:	18 16       	cp	r1, r24
    5842:	4c f5       	brge	.+82     	; 0x5896 <APP_vCalculatorLCD+0xade>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5844:	6b 85       	ldd	r22, Y+11	; 0x0b
    5846:	7c 85       	ldd	r23, Y+12	; 0x0c
    5848:	8d 85       	ldd	r24, Y+13	; 0x0d
    584a:	9e 85       	ldd	r25, Y+14	; 0x0e
    584c:	20 e0       	ldi	r18, 0x00	; 0
    584e:	30 e0       	ldi	r19, 0x00	; 0
    5850:	40 e2       	ldi	r20, 0x20	; 32
    5852:	51 e4       	ldi	r21, 0x41	; 65
    5854:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5858:	dc 01       	movw	r26, r24
    585a:	cb 01       	movw	r24, r22
    585c:	bc 01       	movw	r22, r24
    585e:	cd 01       	movw	r24, r26
    5860:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5864:	dc 01       	movw	r26, r24
    5866:	cb 01       	movw	r24, r22
    5868:	9e 83       	std	Y+6, r25	; 0x06
    586a:	8d 83       	std	Y+5, r24	; 0x05
    586c:	0f c0       	rjmp	.+30     	; 0x588c <APP_vCalculatorLCD+0xad4>
    586e:	80 e9       	ldi	r24, 0x90	; 144
    5870:	91 e0       	ldi	r25, 0x01	; 1
    5872:	9c 83       	std	Y+4, r25	; 0x04
    5874:	8b 83       	std	Y+3, r24	; 0x03
    5876:	8b 81       	ldd	r24, Y+3	; 0x03
    5878:	9c 81       	ldd	r25, Y+4	; 0x04
    587a:	01 97       	sbiw	r24, 0x01	; 1
    587c:	f1 f7       	brne	.-4      	; 0x587a <APP_vCalculatorLCD+0xac2>
    587e:	9c 83       	std	Y+4, r25	; 0x04
    5880:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5882:	8d 81       	ldd	r24, Y+5	; 0x05
    5884:	9e 81       	ldd	r25, Y+6	; 0x06
    5886:	01 97       	sbiw	r24, 0x01	; 1
    5888:	9e 83       	std	Y+6, r25	; 0x06
    588a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    588c:	8d 81       	ldd	r24, Y+5	; 0x05
    588e:	9e 81       	ldd	r25, Y+6	; 0x06
    5890:	00 97       	sbiw	r24, 0x00	; 0
    5892:	69 f7       	brne	.-38     	; 0x586e <APP_vCalculatorLCD+0xab6>
    5894:	14 c0       	rjmp	.+40     	; 0x58be <APP_vCalculatorLCD+0xb06>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5896:	6f 81       	ldd	r22, Y+7	; 0x07
    5898:	78 85       	ldd	r23, Y+8	; 0x08
    589a:	89 85       	ldd	r24, Y+9	; 0x09
    589c:	9a 85       	ldd	r25, Y+10	; 0x0a
    589e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    58a2:	dc 01       	movw	r26, r24
    58a4:	cb 01       	movw	r24, r22
    58a6:	9e 83       	std	Y+6, r25	; 0x06
    58a8:	8d 83       	std	Y+5, r24	; 0x05
    58aa:	8d 81       	ldd	r24, Y+5	; 0x05
    58ac:	9e 81       	ldd	r25, Y+6	; 0x06
    58ae:	9a 83       	std	Y+2, r25	; 0x02
    58b0:	89 83       	std	Y+1, r24	; 0x01
    58b2:	89 81       	ldd	r24, Y+1	; 0x01
    58b4:	9a 81       	ldd	r25, Y+2	; 0x02
    58b6:	01 97       	sbiw	r24, 0x01	; 1
    58b8:	f1 f7       	brne	.-4      	; 0x58b6 <APP_vCalculatorLCD+0xafe>
    58ba:	9a 83       	std	Y+2, r25	; 0x02
    58bc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
}
    58be:	c8 58       	subi	r28, 0x88	; 136
    58c0:	df 4f       	sbci	r29, 0xFF	; 255
    58c2:	0f b6       	in	r0, 0x3f	; 63
    58c4:	f8 94       	cli
    58c6:	de bf       	out	0x3e, r29	; 62
    58c8:	0f be       	out	0x3f, r0	; 63
    58ca:	cd bf       	out	0x3d, r28	; 61
    58cc:	cf 91       	pop	r28
    58ce:	df 91       	pop	r29
    58d0:	1f 91       	pop	r17
    58d2:	0f 91       	pop	r16
    58d4:	08 95       	ret

000058d6 <APP_vLocker>:
//-----------------
void APP_vLocker(u8 *Loc_CorrectUserName4,u8 *Loc_CorrectPassword3){
    58d6:	0f 93       	push	r16
    58d8:	1f 93       	push	r17
    58da:	df 93       	push	r29
    58dc:	cf 93       	push	r28
    58de:	cd b7       	in	r28, 0x3d	; 61
    58e0:	de b7       	in	r29, 0x3e	; 62
    58e2:	c6 5b       	subi	r28, 0xB6	; 182
    58e4:	d0 40       	sbci	r29, 0x00	; 0
    58e6:	0f b6       	in	r0, 0x3f	; 63
    58e8:	f8 94       	cli
    58ea:	de bf       	out	0x3e, r29	; 62
    58ec:	0f be       	out	0x3f, r0	; 63
    58ee:	cd bf       	out	0x3d, r28	; 61
    58f0:	fe 01       	movw	r30, r28
    58f2:	eb 56       	subi	r30, 0x6B	; 107
    58f4:	ff 4f       	sbci	r31, 0xFF	; 255
    58f6:	91 83       	std	Z+1, r25	; 0x01
    58f8:	80 83       	st	Z, r24
    58fa:	fe 01       	movw	r30, r28
    58fc:	e9 56       	subi	r30, 0x69	; 105
    58fe:	ff 4f       	sbci	r31, 0xFF	; 255
    5900:	71 83       	std	Z+1, r23	; 0x01
    5902:	60 83       	st	Z, r22
	u8 i;
	u8 user[4],pass[3];
	while(1){
		LCD_vInit();
    5904:	0e 94 a7 19 	call	0x334e	; 0x334e <LCD_vInit>
		u8 User[]="Enter UserNam";
    5908:	ce 01       	movw	r24, r28
    590a:	80 5b       	subi	r24, 0xB0	; 176
    590c:	9f 4f       	sbci	r25, 0xFF	; 255
    590e:	c7 56       	subi	r28, 0x67	; 103
    5910:	df 4f       	sbci	r29, 0xFF	; 255
    5912:	99 83       	std	Y+1, r25	; 0x01
    5914:	88 83       	st	Y, r24
    5916:	c9 59       	subi	r28, 0x99	; 153
    5918:	d0 40       	sbci	r29, 0x00	; 0
    591a:	80 e6       	ldi	r24, 0x60	; 96
    591c:	90 e0       	ldi	r25, 0x00	; 0
    591e:	c5 56       	subi	r28, 0x65	; 101
    5920:	df 4f       	sbci	r29, 0xFF	; 255
    5922:	99 83       	std	Y+1, r25	; 0x01
    5924:	88 83       	st	Y, r24
    5926:	cb 59       	subi	r28, 0x9B	; 155
    5928:	d0 40       	sbci	r29, 0x00	; 0
    592a:	9e e0       	ldi	r25, 0x0E	; 14
    592c:	c3 56       	subi	r28, 0x63	; 99
    592e:	df 4f       	sbci	r29, 0xFF	; 255
    5930:	98 83       	st	Y, r25
    5932:	cd 59       	subi	r28, 0x9D	; 157
    5934:	d0 40       	sbci	r29, 0x00	; 0
    5936:	c5 56       	subi	r28, 0x65	; 101
    5938:	df 4f       	sbci	r29, 0xFF	; 255
    593a:	e8 81       	ld	r30, Y
    593c:	f9 81       	ldd	r31, Y+1	; 0x01
    593e:	cb 59       	subi	r28, 0x9B	; 155
    5940:	d0 40       	sbci	r29, 0x00	; 0
    5942:	00 80       	ld	r0, Z
    5944:	c5 56       	subi	r28, 0x65	; 101
    5946:	df 4f       	sbci	r29, 0xFF	; 255
    5948:	88 81       	ld	r24, Y
    594a:	99 81       	ldd	r25, Y+1	; 0x01
    594c:	cb 59       	subi	r28, 0x9B	; 155
    594e:	d0 40       	sbci	r29, 0x00	; 0
    5950:	01 96       	adiw	r24, 0x01	; 1
    5952:	c5 56       	subi	r28, 0x65	; 101
    5954:	df 4f       	sbci	r29, 0xFF	; 255
    5956:	99 83       	std	Y+1, r25	; 0x01
    5958:	88 83       	st	Y, r24
    595a:	cb 59       	subi	r28, 0x9B	; 155
    595c:	d0 40       	sbci	r29, 0x00	; 0
    595e:	c7 56       	subi	r28, 0x67	; 103
    5960:	df 4f       	sbci	r29, 0xFF	; 255
    5962:	e8 81       	ld	r30, Y
    5964:	f9 81       	ldd	r31, Y+1	; 0x01
    5966:	c9 59       	subi	r28, 0x99	; 153
    5968:	d0 40       	sbci	r29, 0x00	; 0
    596a:	00 82       	st	Z, r0
    596c:	c7 56       	subi	r28, 0x67	; 103
    596e:	df 4f       	sbci	r29, 0xFF	; 255
    5970:	88 81       	ld	r24, Y
    5972:	99 81       	ldd	r25, Y+1	; 0x01
    5974:	c9 59       	subi	r28, 0x99	; 153
    5976:	d0 40       	sbci	r29, 0x00	; 0
    5978:	01 96       	adiw	r24, 0x01	; 1
    597a:	c7 56       	subi	r28, 0x67	; 103
    597c:	df 4f       	sbci	r29, 0xFF	; 255
    597e:	99 83       	std	Y+1, r25	; 0x01
    5980:	88 83       	st	Y, r24
    5982:	c9 59       	subi	r28, 0x99	; 153
    5984:	d0 40       	sbci	r29, 0x00	; 0
    5986:	c3 56       	subi	r28, 0x63	; 99
    5988:	df 4f       	sbci	r29, 0xFF	; 255
    598a:	98 81       	ld	r25, Y
    598c:	cd 59       	subi	r28, 0x9D	; 157
    598e:	d0 40       	sbci	r29, 0x00	; 0
    5990:	91 50       	subi	r25, 0x01	; 1
    5992:	c3 56       	subi	r28, 0x63	; 99
    5994:	df 4f       	sbci	r29, 0xFF	; 255
    5996:	98 83       	st	Y, r25
    5998:	cd 59       	subi	r28, 0x9D	; 157
    599a:	d0 40       	sbci	r29, 0x00	; 0
    599c:	c3 56       	subi	r28, 0x63	; 99
    599e:	df 4f       	sbci	r29, 0xFF	; 255
    59a0:	e8 81       	ld	r30, Y
    59a2:	cd 59       	subi	r28, 0x9D	; 157
    59a4:	d0 40       	sbci	r29, 0x00	; 0
    59a6:	ee 23       	and	r30, r30
    59a8:	31 f6       	brne	.-116    	; 0x5936 <APP_vLocker+0x60>
		LCD_vWriteString(User);
    59aa:	ce 01       	movw	r24, r28
    59ac:	80 5b       	subi	r24, 0xB0	; 176
    59ae:	9f 4f       	sbci	r25, 0xFF	; 255
    59b0:	0e 94 06 20 	call	0x400c	; 0x400c <LCD_vWriteString>
		for(i=0;i<4;i++){
    59b4:	fe 01       	movw	r30, r28
    59b6:	e8 5b       	subi	r30, 0xB8	; 184
    59b8:	ff 4f       	sbci	r31, 0xFF	; 255
    59ba:	10 82       	st	Z, r1
    59bc:	c9 c0       	rjmp	.+402    	; 0x5b50 <APP_vLocker+0x27a>
			KAYPAD_vInit();
    59be:	0e 94 87 20 	call	0x410e	; 0x410e <KAYPAD_vInit>
			while(1){
				user[i]=KAYPAD_u8GetKey();
    59c2:	fe 01       	movw	r30, r28
    59c4:	e8 5b       	subi	r30, 0xB8	; 184
    59c6:	ff 4f       	sbci	r31, 0xFF	; 255
    59c8:	80 81       	ld	r24, Z
    59ca:	08 2f       	mov	r16, r24
    59cc:	10 e0       	ldi	r17, 0x00	; 0
    59ce:	0e 94 96 20 	call	0x412c	; 0x412c <KAYPAD_u8GetKey>
    59d2:	28 2f       	mov	r18, r24
    59d4:	ce 01       	movw	r24, r28
    59d6:	87 5b       	subi	r24, 0xB7	; 183
    59d8:	9f 4f       	sbci	r25, 0xFF	; 255
    59da:	fc 01       	movw	r30, r24
    59dc:	e0 0f       	add	r30, r16
    59de:	f1 1f       	adc	r31, r17
    59e0:	20 83       	st	Z, r18
    59e2:	fe 01       	movw	r30, r28
    59e4:	ed 5b       	subi	r30, 0xBD	; 189
    59e6:	ff 4f       	sbci	r31, 0xFF	; 255
    59e8:	80 e0       	ldi	r24, 0x00	; 0
    59ea:	90 e0       	ldi	r25, 0x00	; 0
    59ec:	a8 e4       	ldi	r26, 0x48	; 72
    59ee:	b2 e4       	ldi	r27, 0x42	; 66
    59f0:	80 83       	st	Z, r24
    59f2:	91 83       	std	Z+1, r25	; 0x01
    59f4:	a2 83       	std	Z+2, r26	; 0x02
    59f6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    59f8:	8e 01       	movw	r16, r28
    59fa:	01 5c       	subi	r16, 0xC1	; 193
    59fc:	1f 4f       	sbci	r17, 0xFF	; 255
    59fe:	fe 01       	movw	r30, r28
    5a00:	ed 5b       	subi	r30, 0xBD	; 189
    5a02:	ff 4f       	sbci	r31, 0xFF	; 255
    5a04:	60 81       	ld	r22, Z
    5a06:	71 81       	ldd	r23, Z+1	; 0x01
    5a08:	82 81       	ldd	r24, Z+2	; 0x02
    5a0a:	93 81       	ldd	r25, Z+3	; 0x03
    5a0c:	20 e0       	ldi	r18, 0x00	; 0
    5a0e:	30 e0       	ldi	r19, 0x00	; 0
    5a10:	4a e7       	ldi	r20, 0x7A	; 122
    5a12:	55 e4       	ldi	r21, 0x45	; 69
    5a14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a18:	dc 01       	movw	r26, r24
    5a1a:	cb 01       	movw	r24, r22
    5a1c:	f8 01       	movw	r30, r16
    5a1e:	80 83       	st	Z, r24
    5a20:	91 83       	std	Z+1, r25	; 0x01
    5a22:	a2 83       	std	Z+2, r26	; 0x02
    5a24:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5a26:	fe 01       	movw	r30, r28
    5a28:	ff 96       	adiw	r30, 0x3f	; 63
    5a2a:	60 81       	ld	r22, Z
    5a2c:	71 81       	ldd	r23, Z+1	; 0x01
    5a2e:	82 81       	ldd	r24, Z+2	; 0x02
    5a30:	93 81       	ldd	r25, Z+3	; 0x03
    5a32:	20 e0       	ldi	r18, 0x00	; 0
    5a34:	30 e0       	ldi	r19, 0x00	; 0
    5a36:	40 e8       	ldi	r20, 0x80	; 128
    5a38:	5f e3       	ldi	r21, 0x3F	; 63
    5a3a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5a3e:	88 23       	and	r24, r24
    5a40:	2c f4       	brge	.+10     	; 0x5a4c <APP_vLocker+0x176>
		__ticks = 1;
    5a42:	81 e0       	ldi	r24, 0x01	; 1
    5a44:	90 e0       	ldi	r25, 0x00	; 0
    5a46:	9e af       	std	Y+62, r25	; 0x3e
    5a48:	8d af       	std	Y+61, r24	; 0x3d
    5a4a:	46 c0       	rjmp	.+140    	; 0x5ad8 <APP_vLocker+0x202>
	else if (__tmp > 65535)
    5a4c:	fe 01       	movw	r30, r28
    5a4e:	ff 96       	adiw	r30, 0x3f	; 63
    5a50:	60 81       	ld	r22, Z
    5a52:	71 81       	ldd	r23, Z+1	; 0x01
    5a54:	82 81       	ldd	r24, Z+2	; 0x02
    5a56:	93 81       	ldd	r25, Z+3	; 0x03
    5a58:	20 e0       	ldi	r18, 0x00	; 0
    5a5a:	3f ef       	ldi	r19, 0xFF	; 255
    5a5c:	4f e7       	ldi	r20, 0x7F	; 127
    5a5e:	57 e4       	ldi	r21, 0x47	; 71
    5a60:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5a64:	18 16       	cp	r1, r24
    5a66:	64 f5       	brge	.+88     	; 0x5ac0 <APP_vLocker+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5a68:	fe 01       	movw	r30, r28
    5a6a:	ed 5b       	subi	r30, 0xBD	; 189
    5a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    5a6e:	60 81       	ld	r22, Z
    5a70:	71 81       	ldd	r23, Z+1	; 0x01
    5a72:	82 81       	ldd	r24, Z+2	; 0x02
    5a74:	93 81       	ldd	r25, Z+3	; 0x03
    5a76:	20 e0       	ldi	r18, 0x00	; 0
    5a78:	30 e0       	ldi	r19, 0x00	; 0
    5a7a:	40 e2       	ldi	r20, 0x20	; 32
    5a7c:	51 e4       	ldi	r21, 0x41	; 65
    5a7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a82:	dc 01       	movw	r26, r24
    5a84:	cb 01       	movw	r24, r22
    5a86:	bc 01       	movw	r22, r24
    5a88:	cd 01       	movw	r24, r26
    5a8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a8e:	dc 01       	movw	r26, r24
    5a90:	cb 01       	movw	r24, r22
    5a92:	9e af       	std	Y+62, r25	; 0x3e
    5a94:	8d af       	std	Y+61, r24	; 0x3d
    5a96:	0f c0       	rjmp	.+30     	; 0x5ab6 <APP_vLocker+0x1e0>
    5a98:	80 e9       	ldi	r24, 0x90	; 144
    5a9a:	91 e0       	ldi	r25, 0x01	; 1
    5a9c:	9c af       	std	Y+60, r25	; 0x3c
    5a9e:	8b af       	std	Y+59, r24	; 0x3b
    5aa0:	8b ad       	ldd	r24, Y+59	; 0x3b
    5aa2:	9c ad       	ldd	r25, Y+60	; 0x3c
    5aa4:	01 97       	sbiw	r24, 0x01	; 1
    5aa6:	f1 f7       	brne	.-4      	; 0x5aa4 <APP_vLocker+0x1ce>
    5aa8:	9c af       	std	Y+60, r25	; 0x3c
    5aaa:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5aac:	8d ad       	ldd	r24, Y+61	; 0x3d
    5aae:	9e ad       	ldd	r25, Y+62	; 0x3e
    5ab0:	01 97       	sbiw	r24, 0x01	; 1
    5ab2:	9e af       	std	Y+62, r25	; 0x3e
    5ab4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5ab6:	8d ad       	ldd	r24, Y+61	; 0x3d
    5ab8:	9e ad       	ldd	r25, Y+62	; 0x3e
    5aba:	00 97       	sbiw	r24, 0x00	; 0
    5abc:	69 f7       	brne	.-38     	; 0x5a98 <APP_vLocker+0x1c2>
    5abe:	16 c0       	rjmp	.+44     	; 0x5aec <APP_vLocker+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5ac0:	fe 01       	movw	r30, r28
    5ac2:	ff 96       	adiw	r30, 0x3f	; 63
    5ac4:	60 81       	ld	r22, Z
    5ac6:	71 81       	ldd	r23, Z+1	; 0x01
    5ac8:	82 81       	ldd	r24, Z+2	; 0x02
    5aca:	93 81       	ldd	r25, Z+3	; 0x03
    5acc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ad0:	dc 01       	movw	r26, r24
    5ad2:	cb 01       	movw	r24, r22
    5ad4:	9e af       	std	Y+62, r25	; 0x3e
    5ad6:	8d af       	std	Y+61, r24	; 0x3d
    5ad8:	8d ad       	ldd	r24, Y+61	; 0x3d
    5ada:	9e ad       	ldd	r25, Y+62	; 0x3e
    5adc:	9a af       	std	Y+58, r25	; 0x3a
    5ade:	89 af       	std	Y+57, r24	; 0x39
    5ae0:	89 ad       	ldd	r24, Y+57	; 0x39
    5ae2:	9a ad       	ldd	r25, Y+58	; 0x3a
    5ae4:	01 97       	sbiw	r24, 0x01	; 1
    5ae6:	f1 f7       	brne	.-4      	; 0x5ae4 <APP_vLocker+0x20e>
    5ae8:	9a af       	std	Y+58, r25	; 0x3a
    5aea:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(50);
				if(user[i]!=0xff){
    5aec:	fe 01       	movw	r30, r28
    5aee:	e8 5b       	subi	r30, 0xB8	; 184
    5af0:	ff 4f       	sbci	r31, 0xFF	; 255
    5af2:	80 81       	ld	r24, Z
    5af4:	28 2f       	mov	r18, r24
    5af6:	30 e0       	ldi	r19, 0x00	; 0
    5af8:	ce 01       	movw	r24, r28
    5afa:	87 5b       	subi	r24, 0xB7	; 183
    5afc:	9f 4f       	sbci	r25, 0xFF	; 255
    5afe:	fc 01       	movw	r30, r24
    5b00:	e2 0f       	add	r30, r18
    5b02:	f3 1f       	adc	r31, r19
    5b04:	80 81       	ld	r24, Z
    5b06:	8f 3f       	cpi	r24, 0xFF	; 255
    5b08:	09 f4       	brne	.+2      	; 0x5b0c <APP_vLocker+0x236>
    5b0a:	5b cf       	rjmp	.-330    	; 0x59c2 <APP_vLocker+0xec>
					LCD_vInitWithOutClear();
    5b0c:	0e 94 3c 1c 	call	0x3878	; 0x3878 <LCD_vInitWithOutClear>
					LCD_vGoTo(LineTwo,i);
    5b10:	fe 01       	movw	r30, r28
    5b12:	e8 5b       	subi	r30, 0xB8	; 184
    5b14:	ff 4f       	sbci	r31, 0xFF	; 255
    5b16:	80 ec       	ldi	r24, 0xC0	; 192
    5b18:	60 81       	ld	r22, Z
    5b1a:	0e 94 6d 1f 	call	0x3eda	; 0x3eda <LCD_vGoTo>
					LCD_vWriteCharacter((user[i])+48);
    5b1e:	fe 01       	movw	r30, r28
    5b20:	e8 5b       	subi	r30, 0xB8	; 184
    5b22:	ff 4f       	sbci	r31, 0xFF	; 255
    5b24:	80 81       	ld	r24, Z
    5b26:	28 2f       	mov	r18, r24
    5b28:	30 e0       	ldi	r19, 0x00	; 0
    5b2a:	ce 01       	movw	r24, r28
    5b2c:	87 5b       	subi	r24, 0xB7	; 183
    5b2e:	9f 4f       	sbci	r25, 0xFF	; 255
    5b30:	fc 01       	movw	r30, r24
    5b32:	e2 0f       	add	r30, r18
    5b34:	f3 1f       	adc	r31, r19
    5b36:	80 81       	ld	r24, Z
    5b38:	80 5d       	subi	r24, 0xD0	; 208
    5b3a:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <LCD_vWriteCharacter>
	u8 user[4],pass[3];
	while(1){
		LCD_vInit();
		u8 User[]="Enter UserNam";
		LCD_vWriteString(User);
		for(i=0;i<4;i++){
    5b3e:	de 01       	movw	r26, r28
    5b40:	a8 5b       	subi	r26, 0xB8	; 184
    5b42:	bf 4f       	sbci	r27, 0xFF	; 255
    5b44:	fe 01       	movw	r30, r28
    5b46:	e8 5b       	subi	r30, 0xB8	; 184
    5b48:	ff 4f       	sbci	r31, 0xFF	; 255
    5b4a:	80 81       	ld	r24, Z
    5b4c:	8f 5f       	subi	r24, 0xFF	; 255
    5b4e:	8c 93       	st	X, r24
    5b50:	fe 01       	movw	r30, r28
    5b52:	e8 5b       	subi	r30, 0xB8	; 184
    5b54:	ff 4f       	sbci	r31, 0xFF	; 255
    5b56:	80 81       	ld	r24, Z
    5b58:	84 30       	cpi	r24, 0x04	; 4
    5b5a:	08 f4       	brcc	.+2      	; 0x5b5e <APP_vLocker+0x288>
    5b5c:	30 cf       	rjmp	.-416    	; 0x59be <APP_vLocker+0xe8>
					break;
				}
			}

		}
		if(APP_u8compareArray(Loc_CorrectUserName4,user,4)==0){
    5b5e:	fe 01       	movw	r30, r28
    5b60:	eb 56       	subi	r30, 0x6B	; 107
    5b62:	ff 4f       	sbci	r31, 0xFF	; 255
    5b64:	80 81       	ld	r24, Z
    5b66:	91 81       	ldd	r25, Z+1	; 0x01
    5b68:	9e 01       	movw	r18, r28
    5b6a:	27 5b       	subi	r18, 0xB7	; 183
    5b6c:	3f 4f       	sbci	r19, 0xFF	; 255
    5b6e:	b9 01       	movw	r22, r18
    5b70:	44 e0       	ldi	r20, 0x04	; 4
    5b72:	0e 94 dd 31 	call	0x63ba	; 0x63ba <APP_u8compareArray>
    5b76:	88 23       	and	r24, r24
    5b78:	09 f0       	breq	.+2      	; 0x5b7c <APP_vLocker+0x2a6>
    5b7a:	cb c0       	rjmp	.+406    	; 0x5d12 <APP_vLocker+0x43c>
			u8 Wrong[]="Wrong UserNam";
    5b7c:	ce 01       	movw	r24, r28
    5b7e:	82 5a       	subi	r24, 0xA2	; 162
    5b80:	9f 4f       	sbci	r25, 0xFF	; 255
    5b82:	c2 56       	subi	r28, 0x62	; 98
    5b84:	df 4f       	sbci	r29, 0xFF	; 255
    5b86:	99 83       	std	Y+1, r25	; 0x01
    5b88:	88 83       	st	Y, r24
    5b8a:	ce 59       	subi	r28, 0x9E	; 158
    5b8c:	d0 40       	sbci	r29, 0x00	; 0
    5b8e:	8e e6       	ldi	r24, 0x6E	; 110
    5b90:	90 e0       	ldi	r25, 0x00	; 0
    5b92:	c0 56       	subi	r28, 0x60	; 96
    5b94:	df 4f       	sbci	r29, 0xFF	; 255
    5b96:	99 83       	std	Y+1, r25	; 0x01
    5b98:	88 83       	st	Y, r24
    5b9a:	c0 5a       	subi	r28, 0xA0	; 160
    5b9c:	d0 40       	sbci	r29, 0x00	; 0
    5b9e:	9e e0       	ldi	r25, 0x0E	; 14
    5ba0:	ce 55       	subi	r28, 0x5E	; 94
    5ba2:	df 4f       	sbci	r29, 0xFF	; 255
    5ba4:	98 83       	st	Y, r25
    5ba6:	c2 5a       	subi	r28, 0xA2	; 162
    5ba8:	d0 40       	sbci	r29, 0x00	; 0
    5baa:	c0 56       	subi	r28, 0x60	; 96
    5bac:	df 4f       	sbci	r29, 0xFF	; 255
    5bae:	e8 81       	ld	r30, Y
    5bb0:	f9 81       	ldd	r31, Y+1	; 0x01
    5bb2:	c0 5a       	subi	r28, 0xA0	; 160
    5bb4:	d0 40       	sbci	r29, 0x00	; 0
    5bb6:	00 80       	ld	r0, Z
    5bb8:	c0 56       	subi	r28, 0x60	; 96
    5bba:	df 4f       	sbci	r29, 0xFF	; 255
    5bbc:	88 81       	ld	r24, Y
    5bbe:	99 81       	ldd	r25, Y+1	; 0x01
    5bc0:	c0 5a       	subi	r28, 0xA0	; 160
    5bc2:	d0 40       	sbci	r29, 0x00	; 0
    5bc4:	01 96       	adiw	r24, 0x01	; 1
    5bc6:	c0 56       	subi	r28, 0x60	; 96
    5bc8:	df 4f       	sbci	r29, 0xFF	; 255
    5bca:	99 83       	std	Y+1, r25	; 0x01
    5bcc:	88 83       	st	Y, r24
    5bce:	c0 5a       	subi	r28, 0xA0	; 160
    5bd0:	d0 40       	sbci	r29, 0x00	; 0
    5bd2:	c2 56       	subi	r28, 0x62	; 98
    5bd4:	df 4f       	sbci	r29, 0xFF	; 255
    5bd6:	e8 81       	ld	r30, Y
    5bd8:	f9 81       	ldd	r31, Y+1	; 0x01
    5bda:	ce 59       	subi	r28, 0x9E	; 158
    5bdc:	d0 40       	sbci	r29, 0x00	; 0
    5bde:	00 82       	st	Z, r0
    5be0:	c2 56       	subi	r28, 0x62	; 98
    5be2:	df 4f       	sbci	r29, 0xFF	; 255
    5be4:	88 81       	ld	r24, Y
    5be6:	99 81       	ldd	r25, Y+1	; 0x01
    5be8:	ce 59       	subi	r28, 0x9E	; 158
    5bea:	d0 40       	sbci	r29, 0x00	; 0
    5bec:	01 96       	adiw	r24, 0x01	; 1
    5bee:	c2 56       	subi	r28, 0x62	; 98
    5bf0:	df 4f       	sbci	r29, 0xFF	; 255
    5bf2:	99 83       	std	Y+1, r25	; 0x01
    5bf4:	88 83       	st	Y, r24
    5bf6:	ce 59       	subi	r28, 0x9E	; 158
    5bf8:	d0 40       	sbci	r29, 0x00	; 0
    5bfa:	ce 55       	subi	r28, 0x5E	; 94
    5bfc:	df 4f       	sbci	r29, 0xFF	; 255
    5bfe:	98 81       	ld	r25, Y
    5c00:	c2 5a       	subi	r28, 0xA2	; 162
    5c02:	d0 40       	sbci	r29, 0x00	; 0
    5c04:	91 50       	subi	r25, 0x01	; 1
    5c06:	ce 55       	subi	r28, 0x5E	; 94
    5c08:	df 4f       	sbci	r29, 0xFF	; 255
    5c0a:	98 83       	st	Y, r25
    5c0c:	c2 5a       	subi	r28, 0xA2	; 162
    5c0e:	d0 40       	sbci	r29, 0x00	; 0
    5c10:	ce 55       	subi	r28, 0x5E	; 94
    5c12:	df 4f       	sbci	r29, 0xFF	; 255
    5c14:	e8 81       	ld	r30, Y
    5c16:	c2 5a       	subi	r28, 0xA2	; 162
    5c18:	d0 40       	sbci	r29, 0x00	; 0
    5c1a:	ee 23       	and	r30, r30
    5c1c:	31 f6       	brne	.-116    	; 0x5baa <APP_vLocker+0x2d4>
			LCD_vInit();
    5c1e:	0e 94 a7 19 	call	0x334e	; 0x334e <LCD_vInit>
			LCD_vWriteString(Wrong);
    5c22:	ce 01       	movw	r24, r28
    5c24:	82 5a       	subi	r24, 0xA2	; 162
    5c26:	9f 4f       	sbci	r25, 0xFF	; 255
    5c28:	0e 94 06 20 	call	0x400c	; 0x400c <LCD_vWriteString>
    5c2c:	80 e0       	ldi	r24, 0x00	; 0
    5c2e:	90 e0       	ldi	r25, 0x00	; 0
    5c30:	aa e7       	ldi	r26, 0x7A	; 122
    5c32:	b3 e4       	ldi	r27, 0x43	; 67
    5c34:	8d ab       	std	Y+53, r24	; 0x35
    5c36:	9e ab       	std	Y+54, r25	; 0x36
    5c38:	af ab       	std	Y+55, r26	; 0x37
    5c3a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5c3c:	6d a9       	ldd	r22, Y+53	; 0x35
    5c3e:	7e a9       	ldd	r23, Y+54	; 0x36
    5c40:	8f a9       	ldd	r24, Y+55	; 0x37
    5c42:	98 ad       	ldd	r25, Y+56	; 0x38
    5c44:	20 e0       	ldi	r18, 0x00	; 0
    5c46:	30 e0       	ldi	r19, 0x00	; 0
    5c48:	4a e7       	ldi	r20, 0x7A	; 122
    5c4a:	55 e4       	ldi	r21, 0x45	; 69
    5c4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5c50:	dc 01       	movw	r26, r24
    5c52:	cb 01       	movw	r24, r22
    5c54:	89 ab       	std	Y+49, r24	; 0x31
    5c56:	9a ab       	std	Y+50, r25	; 0x32
    5c58:	ab ab       	std	Y+51, r26	; 0x33
    5c5a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5c5c:	69 a9       	ldd	r22, Y+49	; 0x31
    5c5e:	7a a9       	ldd	r23, Y+50	; 0x32
    5c60:	8b a9       	ldd	r24, Y+51	; 0x33
    5c62:	9c a9       	ldd	r25, Y+52	; 0x34
    5c64:	20 e0       	ldi	r18, 0x00	; 0
    5c66:	30 e0       	ldi	r19, 0x00	; 0
    5c68:	40 e8       	ldi	r20, 0x80	; 128
    5c6a:	5f e3       	ldi	r21, 0x3F	; 63
    5c6c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5c70:	88 23       	and	r24, r24
    5c72:	2c f4       	brge	.+10     	; 0x5c7e <APP_vLocker+0x3a8>
		__ticks = 1;
    5c74:	81 e0       	ldi	r24, 0x01	; 1
    5c76:	90 e0       	ldi	r25, 0x00	; 0
    5c78:	98 ab       	std	Y+48, r25	; 0x30
    5c7a:	8f a7       	std	Y+47, r24	; 0x2f
    5c7c:	3f c0       	rjmp	.+126    	; 0x5cfc <APP_vLocker+0x426>
	else if (__tmp > 65535)
    5c7e:	69 a9       	ldd	r22, Y+49	; 0x31
    5c80:	7a a9       	ldd	r23, Y+50	; 0x32
    5c82:	8b a9       	ldd	r24, Y+51	; 0x33
    5c84:	9c a9       	ldd	r25, Y+52	; 0x34
    5c86:	20 e0       	ldi	r18, 0x00	; 0
    5c88:	3f ef       	ldi	r19, 0xFF	; 255
    5c8a:	4f e7       	ldi	r20, 0x7F	; 127
    5c8c:	57 e4       	ldi	r21, 0x47	; 71
    5c8e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5c92:	18 16       	cp	r1, r24
    5c94:	4c f5       	brge	.+82     	; 0x5ce8 <APP_vLocker+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5c96:	6d a9       	ldd	r22, Y+53	; 0x35
    5c98:	7e a9       	ldd	r23, Y+54	; 0x36
    5c9a:	8f a9       	ldd	r24, Y+55	; 0x37
    5c9c:	98 ad       	ldd	r25, Y+56	; 0x38
    5c9e:	20 e0       	ldi	r18, 0x00	; 0
    5ca0:	30 e0       	ldi	r19, 0x00	; 0
    5ca2:	40 e2       	ldi	r20, 0x20	; 32
    5ca4:	51 e4       	ldi	r21, 0x41	; 65
    5ca6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5caa:	dc 01       	movw	r26, r24
    5cac:	cb 01       	movw	r24, r22
    5cae:	bc 01       	movw	r22, r24
    5cb0:	cd 01       	movw	r24, r26
    5cb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5cb6:	dc 01       	movw	r26, r24
    5cb8:	cb 01       	movw	r24, r22
    5cba:	98 ab       	std	Y+48, r25	; 0x30
    5cbc:	8f a7       	std	Y+47, r24	; 0x2f
    5cbe:	0f c0       	rjmp	.+30     	; 0x5cde <APP_vLocker+0x408>
    5cc0:	80 e9       	ldi	r24, 0x90	; 144
    5cc2:	91 e0       	ldi	r25, 0x01	; 1
    5cc4:	9e a7       	std	Y+46, r25	; 0x2e
    5cc6:	8d a7       	std	Y+45, r24	; 0x2d
    5cc8:	8d a5       	ldd	r24, Y+45	; 0x2d
    5cca:	9e a5       	ldd	r25, Y+46	; 0x2e
    5ccc:	01 97       	sbiw	r24, 0x01	; 1
    5cce:	f1 f7       	brne	.-4      	; 0x5ccc <APP_vLocker+0x3f6>
    5cd0:	9e a7       	std	Y+46, r25	; 0x2e
    5cd2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5cd4:	8f a5       	ldd	r24, Y+47	; 0x2f
    5cd6:	98 a9       	ldd	r25, Y+48	; 0x30
    5cd8:	01 97       	sbiw	r24, 0x01	; 1
    5cda:	98 ab       	std	Y+48, r25	; 0x30
    5cdc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5cde:	8f a5       	ldd	r24, Y+47	; 0x2f
    5ce0:	98 a9       	ldd	r25, Y+48	; 0x30
    5ce2:	00 97       	sbiw	r24, 0x00	; 0
    5ce4:	69 f7       	brne	.-38     	; 0x5cc0 <APP_vLocker+0x3ea>
    5ce6:	0e ce       	rjmp	.-996    	; 0x5904 <APP_vLocker+0x2e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5ce8:	69 a9       	ldd	r22, Y+49	; 0x31
    5cea:	7a a9       	ldd	r23, Y+50	; 0x32
    5cec:	8b a9       	ldd	r24, Y+51	; 0x33
    5cee:	9c a9       	ldd	r25, Y+52	; 0x34
    5cf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5cf4:	dc 01       	movw	r26, r24
    5cf6:	cb 01       	movw	r24, r22
    5cf8:	98 ab       	std	Y+48, r25	; 0x30
    5cfa:	8f a7       	std	Y+47, r24	; 0x2f
    5cfc:	8f a5       	ldd	r24, Y+47	; 0x2f
    5cfe:	98 a9       	ldd	r25, Y+48	; 0x30
    5d00:	9c a7       	std	Y+44, r25	; 0x2c
    5d02:	8b a7       	std	Y+43, r24	; 0x2b
    5d04:	8b a5       	ldd	r24, Y+43	; 0x2b
    5d06:	9c a5       	ldd	r25, Y+44	; 0x2c
    5d08:	01 97       	sbiw	r24, 0x01	; 1
    5d0a:	f1 f7       	brne	.-4      	; 0x5d08 <APP_vLocker+0x432>
    5d0c:	9c a7       	std	Y+44, r25	; 0x2c
    5d0e:	8b a7       	std	Y+43, r24	; 0x2b
    5d10:	f9 cd       	rjmp	.-1038   	; 0x5904 <APP_vLocker+0x2e>
			_delay_ms(250);
		}
		else if(APP_u8compareArray(Loc_CorrectUserName4,user,4)==1){
    5d12:	fe 01       	movw	r30, r28
    5d14:	eb 56       	subi	r30, 0x6B	; 107
    5d16:	ff 4f       	sbci	r31, 0xFF	; 255
    5d18:	80 81       	ld	r24, Z
    5d1a:	91 81       	ldd	r25, Z+1	; 0x01
    5d1c:	9e 01       	movw	r18, r28
    5d1e:	27 5b       	subi	r18, 0xB7	; 183
    5d20:	3f 4f       	sbci	r19, 0xFF	; 255
    5d22:	b9 01       	movw	r22, r18
    5d24:	44 e0       	ldi	r20, 0x04	; 4
    5d26:	0e 94 dd 31 	call	0x63ba	; 0x63ba <APP_u8compareArray>
    5d2a:	81 30       	cpi	r24, 0x01	; 1
    5d2c:	09 f0       	breq	.+2      	; 0x5d30 <APP_vLocker+0x45a>
    5d2e:	ea cd       	rjmp	.-1068   	; 0x5904 <APP_vLocker+0x2e>
		else{
			//do nothing
		}
	}
	u8 WrongPassCounter ;
	for(WrongPassCounter=0;WrongPassCounter<3;WrongPassCounter++){
    5d30:	fe 01       	movw	r30, r28
    5d32:	e9 5b       	subi	r30, 0xB9	; 185
    5d34:	ff 4f       	sbci	r31, 0xFF	; 255
    5d36:	10 82       	st	Z, r1
    5d38:	ce c2       	rjmp	.+1436   	; 0x62d6 <APP_vLocker+0xa00>
		LCD_vInit();
    5d3a:	0e 94 a7 19 	call	0x334e	; 0x334e <LCD_vInit>
		u8 Pass[]="Enter Pass";
    5d3e:	ce 01       	movw	r24, r28
    5d40:	84 59       	subi	r24, 0x94	; 148
    5d42:	9f 4f       	sbci	r25, 0xFF	; 255
    5d44:	cd 55       	subi	r28, 0x5D	; 93
    5d46:	df 4f       	sbci	r29, 0xFF	; 255
    5d48:	99 83       	std	Y+1, r25	; 0x01
    5d4a:	88 83       	st	Y, r24
    5d4c:	c3 5a       	subi	r28, 0xA3	; 163
    5d4e:	d0 40       	sbci	r29, 0x00	; 0
    5d50:	8c e7       	ldi	r24, 0x7C	; 124
    5d52:	90 e0       	ldi	r25, 0x00	; 0
    5d54:	cb 55       	subi	r28, 0x5B	; 91
    5d56:	df 4f       	sbci	r29, 0xFF	; 255
    5d58:	99 83       	std	Y+1, r25	; 0x01
    5d5a:	88 83       	st	Y, r24
    5d5c:	c5 5a       	subi	r28, 0xA5	; 165
    5d5e:	d0 40       	sbci	r29, 0x00	; 0
    5d60:	9b e0       	ldi	r25, 0x0B	; 11
    5d62:	c9 55       	subi	r28, 0x59	; 89
    5d64:	df 4f       	sbci	r29, 0xFF	; 255
    5d66:	98 83       	st	Y, r25
    5d68:	c7 5a       	subi	r28, 0xA7	; 167
    5d6a:	d0 40       	sbci	r29, 0x00	; 0
    5d6c:	cb 55       	subi	r28, 0x5B	; 91
    5d6e:	df 4f       	sbci	r29, 0xFF	; 255
    5d70:	e8 81       	ld	r30, Y
    5d72:	f9 81       	ldd	r31, Y+1	; 0x01
    5d74:	c5 5a       	subi	r28, 0xA5	; 165
    5d76:	d0 40       	sbci	r29, 0x00	; 0
    5d78:	00 80       	ld	r0, Z
    5d7a:	cb 55       	subi	r28, 0x5B	; 91
    5d7c:	df 4f       	sbci	r29, 0xFF	; 255
    5d7e:	88 81       	ld	r24, Y
    5d80:	99 81       	ldd	r25, Y+1	; 0x01
    5d82:	c5 5a       	subi	r28, 0xA5	; 165
    5d84:	d0 40       	sbci	r29, 0x00	; 0
    5d86:	01 96       	adiw	r24, 0x01	; 1
    5d88:	cb 55       	subi	r28, 0x5B	; 91
    5d8a:	df 4f       	sbci	r29, 0xFF	; 255
    5d8c:	99 83       	std	Y+1, r25	; 0x01
    5d8e:	88 83       	st	Y, r24
    5d90:	c5 5a       	subi	r28, 0xA5	; 165
    5d92:	d0 40       	sbci	r29, 0x00	; 0
    5d94:	cd 55       	subi	r28, 0x5D	; 93
    5d96:	df 4f       	sbci	r29, 0xFF	; 255
    5d98:	e8 81       	ld	r30, Y
    5d9a:	f9 81       	ldd	r31, Y+1	; 0x01
    5d9c:	c3 5a       	subi	r28, 0xA3	; 163
    5d9e:	d0 40       	sbci	r29, 0x00	; 0
    5da0:	00 82       	st	Z, r0
    5da2:	cd 55       	subi	r28, 0x5D	; 93
    5da4:	df 4f       	sbci	r29, 0xFF	; 255
    5da6:	88 81       	ld	r24, Y
    5da8:	99 81       	ldd	r25, Y+1	; 0x01
    5daa:	c3 5a       	subi	r28, 0xA3	; 163
    5dac:	d0 40       	sbci	r29, 0x00	; 0
    5dae:	01 96       	adiw	r24, 0x01	; 1
    5db0:	cd 55       	subi	r28, 0x5D	; 93
    5db2:	df 4f       	sbci	r29, 0xFF	; 255
    5db4:	99 83       	std	Y+1, r25	; 0x01
    5db6:	88 83       	st	Y, r24
    5db8:	c3 5a       	subi	r28, 0xA3	; 163
    5dba:	d0 40       	sbci	r29, 0x00	; 0
    5dbc:	c9 55       	subi	r28, 0x59	; 89
    5dbe:	df 4f       	sbci	r29, 0xFF	; 255
    5dc0:	98 81       	ld	r25, Y
    5dc2:	c7 5a       	subi	r28, 0xA7	; 167
    5dc4:	d0 40       	sbci	r29, 0x00	; 0
    5dc6:	91 50       	subi	r25, 0x01	; 1
    5dc8:	c9 55       	subi	r28, 0x59	; 89
    5dca:	df 4f       	sbci	r29, 0xFF	; 255
    5dcc:	98 83       	st	Y, r25
    5dce:	c7 5a       	subi	r28, 0xA7	; 167
    5dd0:	d0 40       	sbci	r29, 0x00	; 0
    5dd2:	c9 55       	subi	r28, 0x59	; 89
    5dd4:	df 4f       	sbci	r29, 0xFF	; 255
    5dd6:	e8 81       	ld	r30, Y
    5dd8:	c7 5a       	subi	r28, 0xA7	; 167
    5dda:	d0 40       	sbci	r29, 0x00	; 0
    5ddc:	ee 23       	and	r30, r30
    5dde:	31 f6       	brne	.-116    	; 0x5d6c <APP_vLocker+0x496>
		LCD_vWriteString(Pass);
    5de0:	ce 01       	movw	r24, r28
    5de2:	84 59       	subi	r24, 0x94	; 148
    5de4:	9f 4f       	sbci	r25, 0xFF	; 255
    5de6:	0e 94 06 20 	call	0x400c	; 0x400c <LCD_vWriteString>
		LCD_vGoTo(LineTwo,0);
    5dea:	80 ec       	ldi	r24, 0xC0	; 192
    5dec:	60 e0       	ldi	r22, 0x00	; 0
    5dee:	0e 94 6d 1f 	call	0x3eda	; 0x3eda <LCD_vGoTo>
		for(i=0;i<3;i++){
    5df2:	fe 01       	movw	r30, r28
    5df4:	e8 5b       	subi	r30, 0xB8	; 184
    5df6:	ff 4f       	sbci	r31, 0xFF	; 255
    5df8:	10 82       	st	Z, r1
    5dfa:	a9 c0       	rjmp	.+338    	; 0x5f4e <APP_vLocker+0x678>
			KAYPAD_vInit();
    5dfc:	0e 94 87 20 	call	0x410e	; 0x410e <KAYPAD_vInit>
			while(1){
				pass[i]=KAYPAD_u8GetKey();
    5e00:	fe 01       	movw	r30, r28
    5e02:	e8 5b       	subi	r30, 0xB8	; 184
    5e04:	ff 4f       	sbci	r31, 0xFF	; 255
    5e06:	80 81       	ld	r24, Z
    5e08:	08 2f       	mov	r16, r24
    5e0a:	10 e0       	ldi	r17, 0x00	; 0
    5e0c:	0e 94 96 20 	call	0x412c	; 0x412c <KAYPAD_u8GetKey>
    5e10:	28 2f       	mov	r18, r24
    5e12:	ce 01       	movw	r24, r28
    5e14:	83 5b       	subi	r24, 0xB3	; 179
    5e16:	9f 4f       	sbci	r25, 0xFF	; 255
    5e18:	fc 01       	movw	r30, r24
    5e1a:	e0 0f       	add	r30, r16
    5e1c:	f1 1f       	adc	r31, r17
    5e1e:	20 83       	st	Z, r18
    5e20:	80 e0       	ldi	r24, 0x00	; 0
    5e22:	90 e0       	ldi	r25, 0x00	; 0
    5e24:	a8 e4       	ldi	r26, 0x48	; 72
    5e26:	b2 e4       	ldi	r27, 0x42	; 66
    5e28:	8f a3       	std	Y+39, r24	; 0x27
    5e2a:	98 a7       	std	Y+40, r25	; 0x28
    5e2c:	a9 a7       	std	Y+41, r26	; 0x29
    5e2e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5e30:	6f a1       	ldd	r22, Y+39	; 0x27
    5e32:	78 a5       	ldd	r23, Y+40	; 0x28
    5e34:	89 a5       	ldd	r24, Y+41	; 0x29
    5e36:	9a a5       	ldd	r25, Y+42	; 0x2a
    5e38:	20 e0       	ldi	r18, 0x00	; 0
    5e3a:	30 e0       	ldi	r19, 0x00	; 0
    5e3c:	4a e7       	ldi	r20, 0x7A	; 122
    5e3e:	55 e4       	ldi	r21, 0x45	; 69
    5e40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5e44:	dc 01       	movw	r26, r24
    5e46:	cb 01       	movw	r24, r22
    5e48:	8b a3       	std	Y+35, r24	; 0x23
    5e4a:	9c a3       	std	Y+36, r25	; 0x24
    5e4c:	ad a3       	std	Y+37, r26	; 0x25
    5e4e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5e50:	6b a1       	ldd	r22, Y+35	; 0x23
    5e52:	7c a1       	ldd	r23, Y+36	; 0x24
    5e54:	8d a1       	ldd	r24, Y+37	; 0x25
    5e56:	9e a1       	ldd	r25, Y+38	; 0x26
    5e58:	20 e0       	ldi	r18, 0x00	; 0
    5e5a:	30 e0       	ldi	r19, 0x00	; 0
    5e5c:	40 e8       	ldi	r20, 0x80	; 128
    5e5e:	5f e3       	ldi	r21, 0x3F	; 63
    5e60:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5e64:	88 23       	and	r24, r24
    5e66:	2c f4       	brge	.+10     	; 0x5e72 <APP_vLocker+0x59c>
		__ticks = 1;
    5e68:	81 e0       	ldi	r24, 0x01	; 1
    5e6a:	90 e0       	ldi	r25, 0x00	; 0
    5e6c:	9a a3       	std	Y+34, r25	; 0x22
    5e6e:	89 a3       	std	Y+33, r24	; 0x21
    5e70:	3f c0       	rjmp	.+126    	; 0x5ef0 <APP_vLocker+0x61a>
	else if (__tmp > 65535)
    5e72:	6b a1       	ldd	r22, Y+35	; 0x23
    5e74:	7c a1       	ldd	r23, Y+36	; 0x24
    5e76:	8d a1       	ldd	r24, Y+37	; 0x25
    5e78:	9e a1       	ldd	r25, Y+38	; 0x26
    5e7a:	20 e0       	ldi	r18, 0x00	; 0
    5e7c:	3f ef       	ldi	r19, 0xFF	; 255
    5e7e:	4f e7       	ldi	r20, 0x7F	; 127
    5e80:	57 e4       	ldi	r21, 0x47	; 71
    5e82:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5e86:	18 16       	cp	r1, r24
    5e88:	4c f5       	brge	.+82     	; 0x5edc <APP_vLocker+0x606>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5e8a:	6f a1       	ldd	r22, Y+39	; 0x27
    5e8c:	78 a5       	ldd	r23, Y+40	; 0x28
    5e8e:	89 a5       	ldd	r24, Y+41	; 0x29
    5e90:	9a a5       	ldd	r25, Y+42	; 0x2a
    5e92:	20 e0       	ldi	r18, 0x00	; 0
    5e94:	30 e0       	ldi	r19, 0x00	; 0
    5e96:	40 e2       	ldi	r20, 0x20	; 32
    5e98:	51 e4       	ldi	r21, 0x41	; 65
    5e9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5e9e:	dc 01       	movw	r26, r24
    5ea0:	cb 01       	movw	r24, r22
    5ea2:	bc 01       	movw	r22, r24
    5ea4:	cd 01       	movw	r24, r26
    5ea6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5eaa:	dc 01       	movw	r26, r24
    5eac:	cb 01       	movw	r24, r22
    5eae:	9a a3       	std	Y+34, r25	; 0x22
    5eb0:	89 a3       	std	Y+33, r24	; 0x21
    5eb2:	0f c0       	rjmp	.+30     	; 0x5ed2 <APP_vLocker+0x5fc>
    5eb4:	80 e9       	ldi	r24, 0x90	; 144
    5eb6:	91 e0       	ldi	r25, 0x01	; 1
    5eb8:	98 a3       	std	Y+32, r25	; 0x20
    5eba:	8f 8f       	std	Y+31, r24	; 0x1f
    5ebc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5ebe:	98 a1       	ldd	r25, Y+32	; 0x20
    5ec0:	01 97       	sbiw	r24, 0x01	; 1
    5ec2:	f1 f7       	brne	.-4      	; 0x5ec0 <APP_vLocker+0x5ea>
    5ec4:	98 a3       	std	Y+32, r25	; 0x20
    5ec6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5ec8:	89 a1       	ldd	r24, Y+33	; 0x21
    5eca:	9a a1       	ldd	r25, Y+34	; 0x22
    5ecc:	01 97       	sbiw	r24, 0x01	; 1
    5ece:	9a a3       	std	Y+34, r25	; 0x22
    5ed0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5ed2:	89 a1       	ldd	r24, Y+33	; 0x21
    5ed4:	9a a1       	ldd	r25, Y+34	; 0x22
    5ed6:	00 97       	sbiw	r24, 0x00	; 0
    5ed8:	69 f7       	brne	.-38     	; 0x5eb4 <APP_vLocker+0x5de>
    5eda:	14 c0       	rjmp	.+40     	; 0x5f04 <APP_vLocker+0x62e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5edc:	6b a1       	ldd	r22, Y+35	; 0x23
    5ede:	7c a1       	ldd	r23, Y+36	; 0x24
    5ee0:	8d a1       	ldd	r24, Y+37	; 0x25
    5ee2:	9e a1       	ldd	r25, Y+38	; 0x26
    5ee4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ee8:	dc 01       	movw	r26, r24
    5eea:	cb 01       	movw	r24, r22
    5eec:	9a a3       	std	Y+34, r25	; 0x22
    5eee:	89 a3       	std	Y+33, r24	; 0x21
    5ef0:	89 a1       	ldd	r24, Y+33	; 0x21
    5ef2:	9a a1       	ldd	r25, Y+34	; 0x22
    5ef4:	9e 8f       	std	Y+30, r25	; 0x1e
    5ef6:	8d 8f       	std	Y+29, r24	; 0x1d
    5ef8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5efa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5efc:	01 97       	sbiw	r24, 0x01	; 1
    5efe:	f1 f7       	brne	.-4      	; 0x5efc <APP_vLocker+0x626>
    5f00:	9e 8f       	std	Y+30, r25	; 0x1e
    5f02:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(50);
				if(pass[i]!=0xff){
    5f04:	fe 01       	movw	r30, r28
    5f06:	e8 5b       	subi	r30, 0xB8	; 184
    5f08:	ff 4f       	sbci	r31, 0xFF	; 255
    5f0a:	80 81       	ld	r24, Z
    5f0c:	28 2f       	mov	r18, r24
    5f0e:	30 e0       	ldi	r19, 0x00	; 0
    5f10:	ce 01       	movw	r24, r28
    5f12:	83 5b       	subi	r24, 0xB3	; 179
    5f14:	9f 4f       	sbci	r25, 0xFF	; 255
    5f16:	fc 01       	movw	r30, r24
    5f18:	e2 0f       	add	r30, r18
    5f1a:	f3 1f       	adc	r31, r19
    5f1c:	80 81       	ld	r24, Z
    5f1e:	8f 3f       	cpi	r24, 0xFF	; 255
    5f20:	09 f4       	brne	.+2      	; 0x5f24 <APP_vLocker+0x64e>
    5f22:	6e cf       	rjmp	.-292    	; 0x5e00 <APP_vLocker+0x52a>
					LCD_vInitWithOutClear();
    5f24:	0e 94 3c 1c 	call	0x3878	; 0x3878 <LCD_vInitWithOutClear>
					LCD_vGoTo(LineTwo,i);
    5f28:	fe 01       	movw	r30, r28
    5f2a:	e8 5b       	subi	r30, 0xB8	; 184
    5f2c:	ff 4f       	sbci	r31, 0xFF	; 255
    5f2e:	80 ec       	ldi	r24, 0xC0	; 192
    5f30:	60 81       	ld	r22, Z
    5f32:	0e 94 6d 1f 	call	0x3eda	; 0x3eda <LCD_vGoTo>
					LCD_vWriteCharacter('*');
    5f36:	8a e2       	ldi	r24, 0x2A	; 42
    5f38:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <LCD_vWriteCharacter>
	for(WrongPassCounter=0;WrongPassCounter<3;WrongPassCounter++){
		LCD_vInit();
		u8 Pass[]="Enter Pass";
		LCD_vWriteString(Pass);
		LCD_vGoTo(LineTwo,0);
		for(i=0;i<3;i++){
    5f3c:	de 01       	movw	r26, r28
    5f3e:	a8 5b       	subi	r26, 0xB8	; 184
    5f40:	bf 4f       	sbci	r27, 0xFF	; 255
    5f42:	fe 01       	movw	r30, r28
    5f44:	e8 5b       	subi	r30, 0xB8	; 184
    5f46:	ff 4f       	sbci	r31, 0xFF	; 255
    5f48:	80 81       	ld	r24, Z
    5f4a:	8f 5f       	subi	r24, 0xFF	; 255
    5f4c:	8c 93       	st	X, r24
    5f4e:	fe 01       	movw	r30, r28
    5f50:	e8 5b       	subi	r30, 0xB8	; 184
    5f52:	ff 4f       	sbci	r31, 0xFF	; 255
    5f54:	80 81       	ld	r24, Z
    5f56:	83 30       	cpi	r24, 0x03	; 3
    5f58:	08 f4       	brcc	.+2      	; 0x5f5c <APP_vLocker+0x686>
    5f5a:	50 cf       	rjmp	.-352    	; 0x5dfc <APP_vLocker+0x526>
					LCD_vWriteCharacter('*');
					break;
				}
			}
		}
		if(APP_u8compareArray(Loc_CorrectPassword3,pass,3)==0){
    5f5c:	fe 01       	movw	r30, r28
    5f5e:	e9 56       	subi	r30, 0x69	; 105
    5f60:	ff 4f       	sbci	r31, 0xFF	; 255
    5f62:	80 81       	ld	r24, Z
    5f64:	91 81       	ldd	r25, Z+1	; 0x01
    5f66:	9e 01       	movw	r18, r28
    5f68:	23 5b       	subi	r18, 0xB3	; 179
    5f6a:	3f 4f       	sbci	r19, 0xFF	; 255
    5f6c:	b9 01       	movw	r22, r18
    5f6e:	43 e0       	ldi	r20, 0x03	; 3
    5f70:	0e 94 dd 31 	call	0x63ba	; 0x63ba <APP_u8compareArray>
    5f74:	88 23       	and	r24, r24
    5f76:	09 f0       	breq	.+2      	; 0x5f7a <APP_vLocker+0x6a4>
    5f78:	cb c0       	rjmp	.+406    	; 0x6110 <APP_vLocker+0x83a>
			LCD_vInit();
    5f7a:	0e 94 a7 19 	call	0x334e	; 0x334e <LCD_vInit>
			u8 Wrong[]="Wrong Pass";
    5f7e:	ce 01       	movw	r24, r28
    5f80:	89 58       	subi	r24, 0x89	; 137
    5f82:	9f 4f       	sbci	r25, 0xFF	; 255
    5f84:	c8 55       	subi	r28, 0x58	; 88
    5f86:	df 4f       	sbci	r29, 0xFF	; 255
    5f88:	99 83       	std	Y+1, r25	; 0x01
    5f8a:	88 83       	st	Y, r24
    5f8c:	c8 5a       	subi	r28, 0xA8	; 168
    5f8e:	d0 40       	sbci	r29, 0x00	; 0
    5f90:	87 e8       	ldi	r24, 0x87	; 135
    5f92:	90 e0       	ldi	r25, 0x00	; 0
    5f94:	c6 55       	subi	r28, 0x56	; 86
    5f96:	df 4f       	sbci	r29, 0xFF	; 255
    5f98:	99 83       	std	Y+1, r25	; 0x01
    5f9a:	88 83       	st	Y, r24
    5f9c:	ca 5a       	subi	r28, 0xAA	; 170
    5f9e:	d0 40       	sbci	r29, 0x00	; 0
    5fa0:	9b e0       	ldi	r25, 0x0B	; 11
    5fa2:	c4 55       	subi	r28, 0x54	; 84
    5fa4:	df 4f       	sbci	r29, 0xFF	; 255
    5fa6:	98 83       	st	Y, r25
    5fa8:	cc 5a       	subi	r28, 0xAC	; 172
    5faa:	d0 40       	sbci	r29, 0x00	; 0
    5fac:	c6 55       	subi	r28, 0x56	; 86
    5fae:	df 4f       	sbci	r29, 0xFF	; 255
    5fb0:	e8 81       	ld	r30, Y
    5fb2:	f9 81       	ldd	r31, Y+1	; 0x01
    5fb4:	ca 5a       	subi	r28, 0xAA	; 170
    5fb6:	d0 40       	sbci	r29, 0x00	; 0
    5fb8:	00 80       	ld	r0, Z
    5fba:	c6 55       	subi	r28, 0x56	; 86
    5fbc:	df 4f       	sbci	r29, 0xFF	; 255
    5fbe:	88 81       	ld	r24, Y
    5fc0:	99 81       	ldd	r25, Y+1	; 0x01
    5fc2:	ca 5a       	subi	r28, 0xAA	; 170
    5fc4:	d0 40       	sbci	r29, 0x00	; 0
    5fc6:	01 96       	adiw	r24, 0x01	; 1
    5fc8:	c6 55       	subi	r28, 0x56	; 86
    5fca:	df 4f       	sbci	r29, 0xFF	; 255
    5fcc:	99 83       	std	Y+1, r25	; 0x01
    5fce:	88 83       	st	Y, r24
    5fd0:	ca 5a       	subi	r28, 0xAA	; 170
    5fd2:	d0 40       	sbci	r29, 0x00	; 0
    5fd4:	c8 55       	subi	r28, 0x58	; 88
    5fd6:	df 4f       	sbci	r29, 0xFF	; 255
    5fd8:	e8 81       	ld	r30, Y
    5fda:	f9 81       	ldd	r31, Y+1	; 0x01
    5fdc:	c8 5a       	subi	r28, 0xA8	; 168
    5fde:	d0 40       	sbci	r29, 0x00	; 0
    5fe0:	00 82       	st	Z, r0
    5fe2:	c8 55       	subi	r28, 0x58	; 88
    5fe4:	df 4f       	sbci	r29, 0xFF	; 255
    5fe6:	88 81       	ld	r24, Y
    5fe8:	99 81       	ldd	r25, Y+1	; 0x01
    5fea:	c8 5a       	subi	r28, 0xA8	; 168
    5fec:	d0 40       	sbci	r29, 0x00	; 0
    5fee:	01 96       	adiw	r24, 0x01	; 1
    5ff0:	c8 55       	subi	r28, 0x58	; 88
    5ff2:	df 4f       	sbci	r29, 0xFF	; 255
    5ff4:	99 83       	std	Y+1, r25	; 0x01
    5ff6:	88 83       	st	Y, r24
    5ff8:	c8 5a       	subi	r28, 0xA8	; 168
    5ffa:	d0 40       	sbci	r29, 0x00	; 0
    5ffc:	c4 55       	subi	r28, 0x54	; 84
    5ffe:	df 4f       	sbci	r29, 0xFF	; 255
    6000:	98 81       	ld	r25, Y
    6002:	cc 5a       	subi	r28, 0xAC	; 172
    6004:	d0 40       	sbci	r29, 0x00	; 0
    6006:	91 50       	subi	r25, 0x01	; 1
    6008:	c4 55       	subi	r28, 0x54	; 84
    600a:	df 4f       	sbci	r29, 0xFF	; 255
    600c:	98 83       	st	Y, r25
    600e:	cc 5a       	subi	r28, 0xAC	; 172
    6010:	d0 40       	sbci	r29, 0x00	; 0
    6012:	c4 55       	subi	r28, 0x54	; 84
    6014:	df 4f       	sbci	r29, 0xFF	; 255
    6016:	e8 81       	ld	r30, Y
    6018:	cc 5a       	subi	r28, 0xAC	; 172
    601a:	d0 40       	sbci	r29, 0x00	; 0
    601c:	ee 23       	and	r30, r30
    601e:	31 f6       	brne	.-116    	; 0x5fac <APP_vLocker+0x6d6>
			LCD_vWriteString(Wrong);
    6020:	ce 01       	movw	r24, r28
    6022:	89 58       	subi	r24, 0x89	; 137
    6024:	9f 4f       	sbci	r25, 0xFF	; 255
    6026:	0e 94 06 20 	call	0x400c	; 0x400c <LCD_vWriteString>
    602a:	80 e0       	ldi	r24, 0x00	; 0
    602c:	90 e0       	ldi	r25, 0x00	; 0
    602e:	aa e7       	ldi	r26, 0x7A	; 122
    6030:	b3 e4       	ldi	r27, 0x43	; 67
    6032:	89 8f       	std	Y+25, r24	; 0x19
    6034:	9a 8f       	std	Y+26, r25	; 0x1a
    6036:	ab 8f       	std	Y+27, r26	; 0x1b
    6038:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    603a:	69 8d       	ldd	r22, Y+25	; 0x19
    603c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    603e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6040:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6042:	20 e0       	ldi	r18, 0x00	; 0
    6044:	30 e0       	ldi	r19, 0x00	; 0
    6046:	4a e7       	ldi	r20, 0x7A	; 122
    6048:	55 e4       	ldi	r21, 0x45	; 69
    604a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    604e:	dc 01       	movw	r26, r24
    6050:	cb 01       	movw	r24, r22
    6052:	8d 8b       	std	Y+21, r24	; 0x15
    6054:	9e 8b       	std	Y+22, r25	; 0x16
    6056:	af 8b       	std	Y+23, r26	; 0x17
    6058:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    605a:	6d 89       	ldd	r22, Y+21	; 0x15
    605c:	7e 89       	ldd	r23, Y+22	; 0x16
    605e:	8f 89       	ldd	r24, Y+23	; 0x17
    6060:	98 8d       	ldd	r25, Y+24	; 0x18
    6062:	20 e0       	ldi	r18, 0x00	; 0
    6064:	30 e0       	ldi	r19, 0x00	; 0
    6066:	40 e8       	ldi	r20, 0x80	; 128
    6068:	5f e3       	ldi	r21, 0x3F	; 63
    606a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    606e:	88 23       	and	r24, r24
    6070:	2c f4       	brge	.+10     	; 0x607c <APP_vLocker+0x7a6>
		__ticks = 1;
    6072:	81 e0       	ldi	r24, 0x01	; 1
    6074:	90 e0       	ldi	r25, 0x00	; 0
    6076:	9c 8b       	std	Y+20, r25	; 0x14
    6078:	8b 8b       	std	Y+19, r24	; 0x13
    607a:	3f c0       	rjmp	.+126    	; 0x60fa <APP_vLocker+0x824>
	else if (__tmp > 65535)
    607c:	6d 89       	ldd	r22, Y+21	; 0x15
    607e:	7e 89       	ldd	r23, Y+22	; 0x16
    6080:	8f 89       	ldd	r24, Y+23	; 0x17
    6082:	98 8d       	ldd	r25, Y+24	; 0x18
    6084:	20 e0       	ldi	r18, 0x00	; 0
    6086:	3f ef       	ldi	r19, 0xFF	; 255
    6088:	4f e7       	ldi	r20, 0x7F	; 127
    608a:	57 e4       	ldi	r21, 0x47	; 71
    608c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    6090:	18 16       	cp	r1, r24
    6092:	4c f5       	brge	.+82     	; 0x60e6 <APP_vLocker+0x810>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6094:	69 8d       	ldd	r22, Y+25	; 0x19
    6096:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6098:	8b 8d       	ldd	r24, Y+27	; 0x1b
    609a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    609c:	20 e0       	ldi	r18, 0x00	; 0
    609e:	30 e0       	ldi	r19, 0x00	; 0
    60a0:	40 e2       	ldi	r20, 0x20	; 32
    60a2:	51 e4       	ldi	r21, 0x41	; 65
    60a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    60a8:	dc 01       	movw	r26, r24
    60aa:	cb 01       	movw	r24, r22
    60ac:	bc 01       	movw	r22, r24
    60ae:	cd 01       	movw	r24, r26
    60b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    60b4:	dc 01       	movw	r26, r24
    60b6:	cb 01       	movw	r24, r22
    60b8:	9c 8b       	std	Y+20, r25	; 0x14
    60ba:	8b 8b       	std	Y+19, r24	; 0x13
    60bc:	0f c0       	rjmp	.+30     	; 0x60dc <APP_vLocker+0x806>
    60be:	80 e9       	ldi	r24, 0x90	; 144
    60c0:	91 e0       	ldi	r25, 0x01	; 1
    60c2:	9a 8b       	std	Y+18, r25	; 0x12
    60c4:	89 8b       	std	Y+17, r24	; 0x11
    60c6:	89 89       	ldd	r24, Y+17	; 0x11
    60c8:	9a 89       	ldd	r25, Y+18	; 0x12
    60ca:	01 97       	sbiw	r24, 0x01	; 1
    60cc:	f1 f7       	brne	.-4      	; 0x60ca <APP_vLocker+0x7f4>
    60ce:	9a 8b       	std	Y+18, r25	; 0x12
    60d0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    60d2:	8b 89       	ldd	r24, Y+19	; 0x13
    60d4:	9c 89       	ldd	r25, Y+20	; 0x14
    60d6:	01 97       	sbiw	r24, 0x01	; 1
    60d8:	9c 8b       	std	Y+20, r25	; 0x14
    60da:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    60dc:	8b 89       	ldd	r24, Y+19	; 0x13
    60de:	9c 89       	ldd	r25, Y+20	; 0x14
    60e0:	00 97       	sbiw	r24, 0x00	; 0
    60e2:	69 f7       	brne	.-38     	; 0x60be <APP_vLocker+0x7e8>
    60e4:	ef c0       	rjmp	.+478    	; 0x62c4 <APP_vLocker+0x9ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    60e6:	6d 89       	ldd	r22, Y+21	; 0x15
    60e8:	7e 89       	ldd	r23, Y+22	; 0x16
    60ea:	8f 89       	ldd	r24, Y+23	; 0x17
    60ec:	98 8d       	ldd	r25, Y+24	; 0x18
    60ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    60f2:	dc 01       	movw	r26, r24
    60f4:	cb 01       	movw	r24, r22
    60f6:	9c 8b       	std	Y+20, r25	; 0x14
    60f8:	8b 8b       	std	Y+19, r24	; 0x13
    60fa:	8b 89       	ldd	r24, Y+19	; 0x13
    60fc:	9c 89       	ldd	r25, Y+20	; 0x14
    60fe:	98 8b       	std	Y+16, r25	; 0x10
    6100:	8f 87       	std	Y+15, r24	; 0x0f
    6102:	8f 85       	ldd	r24, Y+15	; 0x0f
    6104:	98 89       	ldd	r25, Y+16	; 0x10
    6106:	01 97       	sbiw	r24, 0x01	; 1
    6108:	f1 f7       	brne	.-4      	; 0x6106 <APP_vLocker+0x830>
    610a:	98 8b       	std	Y+16, r25	; 0x10
    610c:	8f 87       	std	Y+15, r24	; 0x0f
    610e:	da c0       	rjmp	.+436    	; 0x62c4 <APP_vLocker+0x9ee>
			_delay_ms(250);
		}
		else if(APP_u8compareArray(Loc_CorrectPassword3,pass,3)==1){
    6110:	fe 01       	movw	r30, r28
    6112:	e9 56       	subi	r30, 0x69	; 105
    6114:	ff 4f       	sbci	r31, 0xFF	; 255
    6116:	80 81       	ld	r24, Z
    6118:	91 81       	ldd	r25, Z+1	; 0x01
    611a:	9e 01       	movw	r18, r28
    611c:	23 5b       	subi	r18, 0xB3	; 179
    611e:	3f 4f       	sbci	r19, 0xFF	; 255
    6120:	b9 01       	movw	r22, r18
    6122:	43 e0       	ldi	r20, 0x03	; 3
    6124:	0e 94 dd 31 	call	0x63ba	; 0x63ba <APP_u8compareArray>
    6128:	81 30       	cpi	r24, 0x01	; 1
    612a:	09 f0       	breq	.+2      	; 0x612e <APP_vLocker+0x858>
    612c:	cb c0       	rjmp	.+406    	; 0x62c4 <APP_vLocker+0x9ee>
			LCD_vInit();
    612e:	0e 94 a7 19 	call	0x334e	; 0x334e <LCD_vInit>
			u8 Welcome[]="Welcome";
    6132:	ce 01       	movw	r24, r28
    6134:	8e 57       	subi	r24, 0x7E	; 126
    6136:	9f 4f       	sbci	r25, 0xFF	; 255
    6138:	c3 55       	subi	r28, 0x53	; 83
    613a:	df 4f       	sbci	r29, 0xFF	; 255
    613c:	99 83       	std	Y+1, r25	; 0x01
    613e:	88 83       	st	Y, r24
    6140:	cd 5a       	subi	r28, 0xAD	; 173
    6142:	d0 40       	sbci	r29, 0x00	; 0
    6144:	82 e9       	ldi	r24, 0x92	; 146
    6146:	90 e0       	ldi	r25, 0x00	; 0
    6148:	c1 55       	subi	r28, 0x51	; 81
    614a:	df 4f       	sbci	r29, 0xFF	; 255
    614c:	99 83       	std	Y+1, r25	; 0x01
    614e:	88 83       	st	Y, r24
    6150:	cf 5a       	subi	r28, 0xAF	; 175
    6152:	d0 40       	sbci	r29, 0x00	; 0
    6154:	98 e0       	ldi	r25, 0x08	; 8
    6156:	cf 54       	subi	r28, 0x4F	; 79
    6158:	df 4f       	sbci	r29, 0xFF	; 255
    615a:	98 83       	st	Y, r25
    615c:	c1 5b       	subi	r28, 0xB1	; 177
    615e:	d0 40       	sbci	r29, 0x00	; 0
    6160:	c1 55       	subi	r28, 0x51	; 81
    6162:	df 4f       	sbci	r29, 0xFF	; 255
    6164:	e8 81       	ld	r30, Y
    6166:	f9 81       	ldd	r31, Y+1	; 0x01
    6168:	cf 5a       	subi	r28, 0xAF	; 175
    616a:	d0 40       	sbci	r29, 0x00	; 0
    616c:	00 80       	ld	r0, Z
    616e:	c1 55       	subi	r28, 0x51	; 81
    6170:	df 4f       	sbci	r29, 0xFF	; 255
    6172:	88 81       	ld	r24, Y
    6174:	99 81       	ldd	r25, Y+1	; 0x01
    6176:	cf 5a       	subi	r28, 0xAF	; 175
    6178:	d0 40       	sbci	r29, 0x00	; 0
    617a:	01 96       	adiw	r24, 0x01	; 1
    617c:	c1 55       	subi	r28, 0x51	; 81
    617e:	df 4f       	sbci	r29, 0xFF	; 255
    6180:	99 83       	std	Y+1, r25	; 0x01
    6182:	88 83       	st	Y, r24
    6184:	cf 5a       	subi	r28, 0xAF	; 175
    6186:	d0 40       	sbci	r29, 0x00	; 0
    6188:	c3 55       	subi	r28, 0x53	; 83
    618a:	df 4f       	sbci	r29, 0xFF	; 255
    618c:	e8 81       	ld	r30, Y
    618e:	f9 81       	ldd	r31, Y+1	; 0x01
    6190:	cd 5a       	subi	r28, 0xAD	; 173
    6192:	d0 40       	sbci	r29, 0x00	; 0
    6194:	00 82       	st	Z, r0
    6196:	c3 55       	subi	r28, 0x53	; 83
    6198:	df 4f       	sbci	r29, 0xFF	; 255
    619a:	88 81       	ld	r24, Y
    619c:	99 81       	ldd	r25, Y+1	; 0x01
    619e:	cd 5a       	subi	r28, 0xAD	; 173
    61a0:	d0 40       	sbci	r29, 0x00	; 0
    61a2:	01 96       	adiw	r24, 0x01	; 1
    61a4:	c3 55       	subi	r28, 0x53	; 83
    61a6:	df 4f       	sbci	r29, 0xFF	; 255
    61a8:	99 83       	std	Y+1, r25	; 0x01
    61aa:	88 83       	st	Y, r24
    61ac:	cd 5a       	subi	r28, 0xAD	; 173
    61ae:	d0 40       	sbci	r29, 0x00	; 0
    61b0:	cf 54       	subi	r28, 0x4F	; 79
    61b2:	df 4f       	sbci	r29, 0xFF	; 255
    61b4:	98 81       	ld	r25, Y
    61b6:	c1 5b       	subi	r28, 0xB1	; 177
    61b8:	d0 40       	sbci	r29, 0x00	; 0
    61ba:	91 50       	subi	r25, 0x01	; 1
    61bc:	cf 54       	subi	r28, 0x4F	; 79
    61be:	df 4f       	sbci	r29, 0xFF	; 255
    61c0:	98 83       	st	Y, r25
    61c2:	c1 5b       	subi	r28, 0xB1	; 177
    61c4:	d0 40       	sbci	r29, 0x00	; 0
    61c6:	cf 54       	subi	r28, 0x4F	; 79
    61c8:	df 4f       	sbci	r29, 0xFF	; 255
    61ca:	e8 81       	ld	r30, Y
    61cc:	c1 5b       	subi	r28, 0xB1	; 177
    61ce:	d0 40       	sbci	r29, 0x00	; 0
    61d0:	ee 23       	and	r30, r30
    61d2:	31 f6       	brne	.-116    	; 0x6160 <APP_vLocker+0x88a>
			LCD_vWriteString(Welcome);
    61d4:	ce 01       	movw	r24, r28
    61d6:	8e 57       	subi	r24, 0x7E	; 126
    61d8:	9f 4f       	sbci	r25, 0xFF	; 255
    61da:	0e 94 06 20 	call	0x400c	; 0x400c <LCD_vWriteString>
    61de:	80 e0       	ldi	r24, 0x00	; 0
    61e0:	90 e0       	ldi	r25, 0x00	; 0
    61e2:	aa e7       	ldi	r26, 0x7A	; 122
    61e4:	b3 e4       	ldi	r27, 0x43	; 67
    61e6:	8b 87       	std	Y+11, r24	; 0x0b
    61e8:	9c 87       	std	Y+12, r25	; 0x0c
    61ea:	ad 87       	std	Y+13, r26	; 0x0d
    61ec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    61ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    61f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    61f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    61f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    61f6:	20 e0       	ldi	r18, 0x00	; 0
    61f8:	30 e0       	ldi	r19, 0x00	; 0
    61fa:	4a e7       	ldi	r20, 0x7A	; 122
    61fc:	55 e4       	ldi	r21, 0x45	; 69
    61fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6202:	dc 01       	movw	r26, r24
    6204:	cb 01       	movw	r24, r22
    6206:	8f 83       	std	Y+7, r24	; 0x07
    6208:	98 87       	std	Y+8, r25	; 0x08
    620a:	a9 87       	std	Y+9, r26	; 0x09
    620c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    620e:	6f 81       	ldd	r22, Y+7	; 0x07
    6210:	78 85       	ldd	r23, Y+8	; 0x08
    6212:	89 85       	ldd	r24, Y+9	; 0x09
    6214:	9a 85       	ldd	r25, Y+10	; 0x0a
    6216:	20 e0       	ldi	r18, 0x00	; 0
    6218:	30 e0       	ldi	r19, 0x00	; 0
    621a:	40 e8       	ldi	r20, 0x80	; 128
    621c:	5f e3       	ldi	r21, 0x3F	; 63
    621e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    6222:	88 23       	and	r24, r24
    6224:	2c f4       	brge	.+10     	; 0x6230 <APP_vLocker+0x95a>
		__ticks = 1;
    6226:	81 e0       	ldi	r24, 0x01	; 1
    6228:	90 e0       	ldi	r25, 0x00	; 0
    622a:	9e 83       	std	Y+6, r25	; 0x06
    622c:	8d 83       	std	Y+5, r24	; 0x05
    622e:	3f c0       	rjmp	.+126    	; 0x62ae <APP_vLocker+0x9d8>
	else if (__tmp > 65535)
    6230:	6f 81       	ldd	r22, Y+7	; 0x07
    6232:	78 85       	ldd	r23, Y+8	; 0x08
    6234:	89 85       	ldd	r24, Y+9	; 0x09
    6236:	9a 85       	ldd	r25, Y+10	; 0x0a
    6238:	20 e0       	ldi	r18, 0x00	; 0
    623a:	3f ef       	ldi	r19, 0xFF	; 255
    623c:	4f e7       	ldi	r20, 0x7F	; 127
    623e:	57 e4       	ldi	r21, 0x47	; 71
    6240:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    6244:	18 16       	cp	r1, r24
    6246:	4c f5       	brge	.+82     	; 0x629a <APP_vLocker+0x9c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6248:	6b 85       	ldd	r22, Y+11	; 0x0b
    624a:	7c 85       	ldd	r23, Y+12	; 0x0c
    624c:	8d 85       	ldd	r24, Y+13	; 0x0d
    624e:	9e 85       	ldd	r25, Y+14	; 0x0e
    6250:	20 e0       	ldi	r18, 0x00	; 0
    6252:	30 e0       	ldi	r19, 0x00	; 0
    6254:	40 e2       	ldi	r20, 0x20	; 32
    6256:	51 e4       	ldi	r21, 0x41	; 65
    6258:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    625c:	dc 01       	movw	r26, r24
    625e:	cb 01       	movw	r24, r22
    6260:	bc 01       	movw	r22, r24
    6262:	cd 01       	movw	r24, r26
    6264:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6268:	dc 01       	movw	r26, r24
    626a:	cb 01       	movw	r24, r22
    626c:	9e 83       	std	Y+6, r25	; 0x06
    626e:	8d 83       	std	Y+5, r24	; 0x05
    6270:	0f c0       	rjmp	.+30     	; 0x6290 <APP_vLocker+0x9ba>
    6272:	80 e9       	ldi	r24, 0x90	; 144
    6274:	91 e0       	ldi	r25, 0x01	; 1
    6276:	9c 83       	std	Y+4, r25	; 0x04
    6278:	8b 83       	std	Y+3, r24	; 0x03
    627a:	8b 81       	ldd	r24, Y+3	; 0x03
    627c:	9c 81       	ldd	r25, Y+4	; 0x04
    627e:	01 97       	sbiw	r24, 0x01	; 1
    6280:	f1 f7       	brne	.-4      	; 0x627e <APP_vLocker+0x9a8>
    6282:	9c 83       	std	Y+4, r25	; 0x04
    6284:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6286:	8d 81       	ldd	r24, Y+5	; 0x05
    6288:	9e 81       	ldd	r25, Y+6	; 0x06
    628a:	01 97       	sbiw	r24, 0x01	; 1
    628c:	9e 83       	std	Y+6, r25	; 0x06
    628e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6290:	8d 81       	ldd	r24, Y+5	; 0x05
    6292:	9e 81       	ldd	r25, Y+6	; 0x06
    6294:	00 97       	sbiw	r24, 0x00	; 0
    6296:	69 f7       	brne	.-38     	; 0x6272 <APP_vLocker+0x99c>
    6298:	25 c0       	rjmp	.+74     	; 0x62e4 <APP_vLocker+0xa0e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    629a:	6f 81       	ldd	r22, Y+7	; 0x07
    629c:	78 85       	ldd	r23, Y+8	; 0x08
    629e:	89 85       	ldd	r24, Y+9	; 0x09
    62a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    62a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    62a6:	dc 01       	movw	r26, r24
    62a8:	cb 01       	movw	r24, r22
    62aa:	9e 83       	std	Y+6, r25	; 0x06
    62ac:	8d 83       	std	Y+5, r24	; 0x05
    62ae:	8d 81       	ldd	r24, Y+5	; 0x05
    62b0:	9e 81       	ldd	r25, Y+6	; 0x06
    62b2:	9a 83       	std	Y+2, r25	; 0x02
    62b4:	89 83       	std	Y+1, r24	; 0x01
    62b6:	89 81       	ldd	r24, Y+1	; 0x01
    62b8:	9a 81       	ldd	r25, Y+2	; 0x02
    62ba:	01 97       	sbiw	r24, 0x01	; 1
    62bc:	f1 f7       	brne	.-4      	; 0x62ba <APP_vLocker+0x9e4>
    62be:	9a 83       	std	Y+2, r25	; 0x02
    62c0:	89 83       	std	Y+1, r24	; 0x01
    62c2:	10 c0       	rjmp	.+32     	; 0x62e4 <APP_vLocker+0xa0e>
		else{
			//do nothing
		}
	}
	u8 WrongPassCounter ;
	for(WrongPassCounter=0;WrongPassCounter<3;WrongPassCounter++){
    62c4:	de 01       	movw	r26, r28
    62c6:	a9 5b       	subi	r26, 0xB9	; 185
    62c8:	bf 4f       	sbci	r27, 0xFF	; 255
    62ca:	fe 01       	movw	r30, r28
    62cc:	e9 5b       	subi	r30, 0xB9	; 185
    62ce:	ff 4f       	sbci	r31, 0xFF	; 255
    62d0:	80 81       	ld	r24, Z
    62d2:	8f 5f       	subi	r24, 0xFF	; 255
    62d4:	8c 93       	st	X, r24
    62d6:	fe 01       	movw	r30, r28
    62d8:	e9 5b       	subi	r30, 0xB9	; 185
    62da:	ff 4f       	sbci	r31, 0xFF	; 255
    62dc:	80 81       	ld	r24, Z
    62de:	83 30       	cpi	r24, 0x03	; 3
    62e0:	08 f4       	brcc	.+2      	; 0x62e4 <APP_vLocker+0xa0e>
    62e2:	2b cd       	rjmp	.-1450   	; 0x5d3a <APP_vLocker+0x464>
		}
		else{
			//do nothing
		}
	}
	if(WrongPassCounter==3){
    62e4:	fe 01       	movw	r30, r28
    62e6:	e9 5b       	subi	r30, 0xB9	; 185
    62e8:	ff 4f       	sbci	r31, 0xFF	; 255
    62ea:	80 81       	ld	r24, Z
    62ec:	83 30       	cpi	r24, 0x03	; 3
    62ee:	09 f0       	breq	.+2      	; 0x62f2 <APP_vLocker+0xa1c>
    62f0:	58 c0       	rjmp	.+176    	; 0x63a2 <APP_vLocker+0xacc>
		LCD_vInit();
    62f2:	0e 94 a7 19 	call	0x334e	; 0x334e <LCD_vInit>
		u8 Wrong1[]="Try latter";
    62f6:	ce 01       	movw	r24, r28
    62f8:	86 57       	subi	r24, 0x76	; 118
    62fa:	9f 4f       	sbci	r25, 0xFF	; 255
    62fc:	ce 54       	subi	r28, 0x4E	; 78
    62fe:	df 4f       	sbci	r29, 0xFF	; 255
    6300:	99 83       	std	Y+1, r25	; 0x01
    6302:	88 83       	st	Y, r24
    6304:	c2 5b       	subi	r28, 0xB2	; 178
    6306:	d0 40       	sbci	r29, 0x00	; 0
    6308:	8a e9       	ldi	r24, 0x9A	; 154
    630a:	90 e0       	ldi	r25, 0x00	; 0
    630c:	cc 54       	subi	r28, 0x4C	; 76
    630e:	df 4f       	sbci	r29, 0xFF	; 255
    6310:	99 83       	std	Y+1, r25	; 0x01
    6312:	88 83       	st	Y, r24
    6314:	c4 5b       	subi	r28, 0xB4	; 180
    6316:	d0 40       	sbci	r29, 0x00	; 0
    6318:	9b e0       	ldi	r25, 0x0B	; 11
    631a:	ca 54       	subi	r28, 0x4A	; 74
    631c:	df 4f       	sbci	r29, 0xFF	; 255
    631e:	98 83       	st	Y, r25
    6320:	c6 5b       	subi	r28, 0xB6	; 182
    6322:	d0 40       	sbci	r29, 0x00	; 0
    6324:	cc 54       	subi	r28, 0x4C	; 76
    6326:	df 4f       	sbci	r29, 0xFF	; 255
    6328:	e8 81       	ld	r30, Y
    632a:	f9 81       	ldd	r31, Y+1	; 0x01
    632c:	c4 5b       	subi	r28, 0xB4	; 180
    632e:	d0 40       	sbci	r29, 0x00	; 0
    6330:	00 80       	ld	r0, Z
    6332:	cc 54       	subi	r28, 0x4C	; 76
    6334:	df 4f       	sbci	r29, 0xFF	; 255
    6336:	88 81       	ld	r24, Y
    6338:	99 81       	ldd	r25, Y+1	; 0x01
    633a:	c4 5b       	subi	r28, 0xB4	; 180
    633c:	d0 40       	sbci	r29, 0x00	; 0
    633e:	01 96       	adiw	r24, 0x01	; 1
    6340:	cc 54       	subi	r28, 0x4C	; 76
    6342:	df 4f       	sbci	r29, 0xFF	; 255
    6344:	99 83       	std	Y+1, r25	; 0x01
    6346:	88 83       	st	Y, r24
    6348:	c4 5b       	subi	r28, 0xB4	; 180
    634a:	d0 40       	sbci	r29, 0x00	; 0
    634c:	ce 54       	subi	r28, 0x4E	; 78
    634e:	df 4f       	sbci	r29, 0xFF	; 255
    6350:	e8 81       	ld	r30, Y
    6352:	f9 81       	ldd	r31, Y+1	; 0x01
    6354:	c2 5b       	subi	r28, 0xB2	; 178
    6356:	d0 40       	sbci	r29, 0x00	; 0
    6358:	00 82       	st	Z, r0
    635a:	ce 54       	subi	r28, 0x4E	; 78
    635c:	df 4f       	sbci	r29, 0xFF	; 255
    635e:	88 81       	ld	r24, Y
    6360:	99 81       	ldd	r25, Y+1	; 0x01
    6362:	c2 5b       	subi	r28, 0xB2	; 178
    6364:	d0 40       	sbci	r29, 0x00	; 0
    6366:	01 96       	adiw	r24, 0x01	; 1
    6368:	ce 54       	subi	r28, 0x4E	; 78
    636a:	df 4f       	sbci	r29, 0xFF	; 255
    636c:	99 83       	std	Y+1, r25	; 0x01
    636e:	88 83       	st	Y, r24
    6370:	c2 5b       	subi	r28, 0xB2	; 178
    6372:	d0 40       	sbci	r29, 0x00	; 0
    6374:	ca 54       	subi	r28, 0x4A	; 74
    6376:	df 4f       	sbci	r29, 0xFF	; 255
    6378:	98 81       	ld	r25, Y
    637a:	c6 5b       	subi	r28, 0xB6	; 182
    637c:	d0 40       	sbci	r29, 0x00	; 0
    637e:	91 50       	subi	r25, 0x01	; 1
    6380:	ca 54       	subi	r28, 0x4A	; 74
    6382:	df 4f       	sbci	r29, 0xFF	; 255
    6384:	98 83       	st	Y, r25
    6386:	c6 5b       	subi	r28, 0xB6	; 182
    6388:	d0 40       	sbci	r29, 0x00	; 0
    638a:	ca 54       	subi	r28, 0x4A	; 74
    638c:	df 4f       	sbci	r29, 0xFF	; 255
    638e:	e8 81       	ld	r30, Y
    6390:	c6 5b       	subi	r28, 0xB6	; 182
    6392:	d0 40       	sbci	r29, 0x00	; 0
    6394:	ee 23       	and	r30, r30
    6396:	31 f6       	brne	.-116    	; 0x6324 <APP_vLocker+0xa4e>
		LCD_vWriteString(Wrong1);
    6398:	ce 01       	movw	r24, r28
    639a:	86 57       	subi	r24, 0x76	; 118
    639c:	9f 4f       	sbci	r25, 0xFF	; 255
    639e:	0e 94 06 20 	call	0x400c	; 0x400c <LCD_vWriteString>
	}
	else{
		//do nothing
	}
}
    63a2:	ca 54       	subi	r28, 0x4A	; 74
    63a4:	df 4f       	sbci	r29, 0xFF	; 255
    63a6:	0f b6       	in	r0, 0x3f	; 63
    63a8:	f8 94       	cli
    63aa:	de bf       	out	0x3e, r29	; 62
    63ac:	0f be       	out	0x3f, r0	; 63
    63ae:	cd bf       	out	0x3d, r28	; 61
    63b0:	cf 91       	pop	r28
    63b2:	df 91       	pop	r29
    63b4:	1f 91       	pop	r17
    63b6:	0f 91       	pop	r16
    63b8:	08 95       	ret

000063ba <APP_u8compareArray>:
//----------------
u8 APP_u8compareArray(u8 *ptr1,u8 *ptr2,u8 size){
    63ba:	df 93       	push	r29
    63bc:	cf 93       	push	r28
    63be:	cd b7       	in	r28, 0x3d	; 61
    63c0:	de b7       	in	r29, 0x3e	; 62
    63c2:	27 97       	sbiw	r28, 0x07	; 7
    63c4:	0f b6       	in	r0, 0x3f	; 63
    63c6:	f8 94       	cli
    63c8:	de bf       	out	0x3e, r29	; 62
    63ca:	0f be       	out	0x3f, r0	; 63
    63cc:	cd bf       	out	0x3d, r28	; 61
    63ce:	9b 83       	std	Y+3, r25	; 0x03
    63d0:	8a 83       	std	Y+2, r24	; 0x02
    63d2:	7d 83       	std	Y+5, r23	; 0x05
    63d4:	6c 83       	std	Y+4, r22	; 0x04
    63d6:	4e 83       	std	Y+6, r20	; 0x06
	u8 i;
	for(i=0;i<size;i++){
    63d8:	19 82       	std	Y+1, r1	; 0x01
    63da:	19 c0       	rjmp	.+50     	; 0x640e <APP_u8compareArray+0x54>
		if(ptr1[i]!=ptr2[i])
    63dc:	89 81       	ldd	r24, Y+1	; 0x01
    63de:	28 2f       	mov	r18, r24
    63e0:	30 e0       	ldi	r19, 0x00	; 0
    63e2:	8a 81       	ldd	r24, Y+2	; 0x02
    63e4:	9b 81       	ldd	r25, Y+3	; 0x03
    63e6:	fc 01       	movw	r30, r24
    63e8:	e2 0f       	add	r30, r18
    63ea:	f3 1f       	adc	r31, r19
    63ec:	40 81       	ld	r20, Z
    63ee:	89 81       	ldd	r24, Y+1	; 0x01
    63f0:	28 2f       	mov	r18, r24
    63f2:	30 e0       	ldi	r19, 0x00	; 0
    63f4:	8c 81       	ldd	r24, Y+4	; 0x04
    63f6:	9d 81       	ldd	r25, Y+5	; 0x05
    63f8:	fc 01       	movw	r30, r24
    63fa:	e2 0f       	add	r30, r18
    63fc:	f3 1f       	adc	r31, r19
    63fe:	80 81       	ld	r24, Z
    6400:	48 17       	cp	r20, r24
    6402:	11 f0       	breq	.+4      	; 0x6408 <APP_u8compareArray+0x4e>
			return 0;
    6404:	1f 82       	std	Y+7, r1	; 0x07
    6406:	09 c0       	rjmp	.+18     	; 0x641a <APP_u8compareArray+0x60>
	}
}
//----------------
u8 APP_u8compareArray(u8 *ptr1,u8 *ptr2,u8 size){
	u8 i;
	for(i=0;i<size;i++){
    6408:	89 81       	ldd	r24, Y+1	; 0x01
    640a:	8f 5f       	subi	r24, 0xFF	; 255
    640c:	89 83       	std	Y+1, r24	; 0x01
    640e:	99 81       	ldd	r25, Y+1	; 0x01
    6410:	8e 81       	ldd	r24, Y+6	; 0x06
    6412:	98 17       	cp	r25, r24
    6414:	18 f3       	brcs	.-58     	; 0x63dc <APP_u8compareArray+0x22>
		if(ptr1[i]!=ptr2[i])
			return 0;
	}
	return 1;
    6416:	81 e0       	ldi	r24, 0x01	; 1
    6418:	8f 83       	std	Y+7, r24	; 0x07
    641a:	8f 81       	ldd	r24, Y+7	; 0x07
}
    641c:	27 96       	adiw	r28, 0x07	; 7
    641e:	0f b6       	in	r0, 0x3f	; 63
    6420:	f8 94       	cli
    6422:	de bf       	out	0x3e, r29	; 62
    6424:	0f be       	out	0x3f, r0	; 63
    6426:	cd bf       	out	0x3d, r28	; 61
    6428:	cf 91       	pop	r28
    642a:	df 91       	pop	r29
    642c:	08 95       	ret

0000642e <APP_vVolumeLCD>:
//------------------------
void APP_vVolumeLCD(){
    642e:	df 93       	push	r29
    6430:	cf 93       	push	r28
    6432:	cd b7       	in	r28, 0x3d	; 61
    6434:	de b7       	in	r29, 0x3e	; 62
    6436:	a8 97       	sbiw	r28, 0x28	; 40
    6438:	0f b6       	in	r0, 0x3f	; 63
    643a:	f8 94       	cli
    643c:	de bf       	out	0x3e, r29	; 62
    643e:	0f be       	out	0x3f, r0	; 63
    6440:	cd bf       	out	0x3d, r28	; 61
	LCD_vInit();
    6442:	0e 94 a7 19 	call	0x334e	; 0x334e <LCD_vInit>
	u16 z;
	u8 counter=0,i,y;
    6446:	19 8a       	std	Y+17, r1	; 0x11
	u8 chrr[8]={0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,0x1F};
    6448:	ce 01       	movw	r24, r28
    644a:	44 96       	adiw	r24, 0x14	; 20
    644c:	9d a3       	std	Y+37, r25	; 0x25
    644e:	8c a3       	std	Y+36, r24	; 0x24
    6450:	ad eb       	ldi	r26, 0xBD	; 189
    6452:	b0 e0       	ldi	r27, 0x00	; 0
    6454:	bf a3       	std	Y+39, r27	; 0x27
    6456:	ae a3       	std	Y+38, r26	; 0x26
    6458:	b8 e0       	ldi	r27, 0x08	; 8
    645a:	b8 a7       	std	Y+40, r27	; 0x28
    645c:	ee a1       	ldd	r30, Y+38	; 0x26
    645e:	ff a1       	ldd	r31, Y+39	; 0x27
    6460:	00 80       	ld	r0, Z
    6462:	8e a1       	ldd	r24, Y+38	; 0x26
    6464:	9f a1       	ldd	r25, Y+39	; 0x27
    6466:	01 96       	adiw	r24, 0x01	; 1
    6468:	9f a3       	std	Y+39, r25	; 0x27
    646a:	8e a3       	std	Y+38, r24	; 0x26
    646c:	ac a1       	ldd	r26, Y+36	; 0x24
    646e:	bd a1       	ldd	r27, Y+37	; 0x25
    6470:	0c 92       	st	X, r0
    6472:	ec a1       	ldd	r30, Y+36	; 0x24
    6474:	fd a1       	ldd	r31, Y+37	; 0x25
    6476:	31 96       	adiw	r30, 0x01	; 1
    6478:	fd a3       	std	Y+37, r31	; 0x25
    647a:	ec a3       	std	Y+36, r30	; 0x24
    647c:	f8 a5       	ldd	r31, Y+40	; 0x28
    647e:	f1 50       	subi	r31, 0x01	; 1
    6480:	f8 a7       	std	Y+40, r31	; 0x28
    6482:	28 a5       	ldd	r18, Y+40	; 0x28
    6484:	22 23       	and	r18, r18
    6486:	51 f7       	brne	.-44     	; 0x645c <APP_vVolumeLCD+0x2e>
	u8 chr0[8]={0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
    6488:	88 e0       	ldi	r24, 0x08	; 8
    648a:	fe 01       	movw	r30, r28
    648c:	7c 96       	adiw	r30, 0x1c	; 28
    648e:	df 01       	movw	r26, r30
    6490:	28 2f       	mov	r18, r24
    6492:	1d 92       	st	X+, r1
    6494:	2a 95       	dec	r18
    6496:	e9 f7       	brne	.-6      	; 0x6492 <APP_vVolumeLCD+0x64>
	LCD_vCustomCharacter(chrr,0);
    6498:	ce 01       	movw	r24, r28
    649a:	44 96       	adiw	r24, 0x14	; 20
    649c:	60 e0       	ldi	r22, 0x00	; 0
    649e:	0e 94 2f 20 	call	0x405e	; 0x405e <LCD_vCustomCharacter>
	LCD_vCustomCharacter(chr0,1);
    64a2:	ce 01       	movw	r24, r28
    64a4:	4c 96       	adiw	r24, 0x1c	; 28
    64a6:	61 e0       	ldi	r22, 0x01	; 1
    64a8:	0e 94 2f 20 	call	0x405e	; 0x405e <LCD_vCustomCharacter>
	ADC_vInit(Polling,ADC1,FreeRunningMode);
    64ac:	a7 e2       	ldi	r26, 0x27	; 39
    64ae:	b0 e0       	ldi	r27, 0x00	; 0
    64b0:	e7 e2       	ldi	r30, 0x27	; 39
    64b2:	f0 e0       	ldi	r31, 0x00	; 0
    64b4:	80 81       	ld	r24, Z
    64b6:	81 60       	ori	r24, 0x01	; 1
    64b8:	8c 93       	st	X, r24
    64ba:	8c 91       	ld	r24, X
    64bc:	28 2f       	mov	r18, r24
    64be:	30 e0       	ldi	r19, 0x00	; 0
    64c0:	80 e0       	ldi	r24, 0x00	; 0
    64c2:	90 e0       	ldi	r25, 0x00	; 0
    64c4:	b9 01       	movw	r22, r18
    64c6:	41 e0       	ldi	r20, 0x01	; 1
    64c8:	50 e0       	ldi	r21, 0x00	; 0
    64ca:	0e 94 27 12 	call	0x244e	; 0x244e <ADC_vInit>
	while(1){
		z=ADC_vGetVal(FreeRunningMode);
    64ce:	81 e0       	ldi	r24, 0x01	; 1
    64d0:	90 e0       	ldi	r25, 0x00	; 0
    64d2:	0e 94 46 12 	call	0x248c	; 0x248c <ADC_vGetVal>
    64d6:	9b 8b       	std	Y+19, r25	; 0x13
    64d8:	8a 8b       	std	Y+18, r24	; 0x12
    64da:	09 c0       	rjmp	.+18     	; 0x64ee <APP_vVolumeLCD+0xc0>
		while(z>311){
			z=z-311;
    64dc:	8a 89       	ldd	r24, Y+18	; 0x12
    64de:	9b 89       	ldd	r25, Y+19	; 0x13
    64e0:	87 53       	subi	r24, 0x37	; 55
    64e2:	91 40       	sbci	r25, 0x01	; 1
    64e4:	9b 8b       	std	Y+19, r25	; 0x13
    64e6:	8a 8b       	std	Y+18, r24	; 0x12
			counter++;
    64e8:	89 89       	ldd	r24, Y+17	; 0x11
    64ea:	8f 5f       	subi	r24, 0xFF	; 255
    64ec:	89 8b       	std	Y+17, r24	; 0x11
	LCD_vCustomCharacter(chrr,0);
	LCD_vCustomCharacter(chr0,1);
	ADC_vInit(Polling,ADC1,FreeRunningMode);
	while(1){
		z=ADC_vGetVal(FreeRunningMode);
		while(z>311){
    64ee:	8a 89       	ldd	r24, Y+18	; 0x12
    64f0:	9b 89       	ldd	r25, Y+19	; 0x13
    64f2:	a1 e0       	ldi	r26, 0x01	; 1
    64f4:	88 33       	cpi	r24, 0x38	; 56
    64f6:	9a 07       	cpc	r25, r26
    64f8:	88 f7       	brcc	.-30     	; 0x64dc <APP_vVolumeLCD+0xae>
			z=z-311;
			counter++;
		}
		for(i=0;i<counter;i++){
    64fa:	18 8a       	std	Y+16, r1	; 0x10
    64fc:	06 c0       	rjmp	.+12     	; 0x650a <APP_vVolumeLCD+0xdc>
			LCD_vWriteCharacter(0);
    64fe:	80 e0       	ldi	r24, 0x00	; 0
    6500:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <LCD_vWriteCharacter>
		z=ADC_vGetVal(FreeRunningMode);
		while(z>311){
			z=z-311;
			counter++;
		}
		for(i=0;i<counter;i++){
    6504:	88 89       	ldd	r24, Y+16	; 0x10
    6506:	8f 5f       	subi	r24, 0xFF	; 255
    6508:	88 8b       	std	Y+16, r24	; 0x10
    650a:	98 89       	ldd	r25, Y+16	; 0x10
    650c:	89 89       	ldd	r24, Y+17	; 0x11
    650e:	98 17       	cp	r25, r24
    6510:	b0 f3       	brcs	.-20     	; 0x64fe <APP_vVolumeLCD+0xd0>
			LCD_vWriteCharacter(0);
		}
		for(i=y;i>counter;i--){
    6512:	8f 85       	ldd	r24, Y+15	; 0x0f
    6514:	88 8b       	std	Y+16, r24	; 0x10
    6516:	0a c0       	rjmp	.+20     	; 0x652c <APP_vVolumeLCD+0xfe>
			LCD_vGoTo(LineOne,i);
    6518:	80 e8       	ldi	r24, 0x80	; 128
    651a:	68 89       	ldd	r22, Y+16	; 0x10
    651c:	0e 94 6d 1f 	call	0x3eda	; 0x3eda <LCD_vGoTo>
			LCD_vWriteCharacter(1);
    6520:	81 e0       	ldi	r24, 0x01	; 1
    6522:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <LCD_vWriteCharacter>
			counter++;
		}
		for(i=0;i<counter;i++){
			LCD_vWriteCharacter(0);
		}
		for(i=y;i>counter;i--){
    6526:	88 89       	ldd	r24, Y+16	; 0x10
    6528:	81 50       	subi	r24, 0x01	; 1
    652a:	88 8b       	std	Y+16, r24	; 0x10
    652c:	98 89       	ldd	r25, Y+16	; 0x10
    652e:	89 89       	ldd	r24, Y+17	; 0x11
    6530:	89 17       	cp	r24, r25
    6532:	90 f3       	brcs	.-28     	; 0x6518 <APP_vVolumeLCD+0xea>
			LCD_vGoTo(LineOne,i);
			LCD_vWriteCharacter(1);
		}
		y=counter;
    6534:	89 89       	ldd	r24, Y+17	; 0x11
    6536:	8f 87       	std	Y+15, r24	; 0x0f
		if(counter==16){
    6538:	89 89       	ldd	r24, Y+17	; 0x11
    653a:	80 31       	cpi	r24, 0x10	; 16
    653c:	09 f0       	breq	.+2      	; 0x6540 <APP_vVolumeLCD+0x112>
    653e:	76 c0       	rjmp	.+236    	; 0x662c <APP_vVolumeLCD+0x1fe>
			LedAndBuzzer_vBuzzerOpen();
    6540:	0e 94 ad 13 	call	0x275a	; 0x275a <LedAndBuzzer_vBuzzerOpen>
    6544:	80 e0       	ldi	r24, 0x00	; 0
    6546:	90 e0       	ldi	r25, 0x00	; 0
    6548:	aa e7       	ldi	r26, 0x7A	; 122
    654a:	b3 e4       	ldi	r27, 0x43	; 67
    654c:	8b 87       	std	Y+11, r24	; 0x0b
    654e:	9c 87       	std	Y+12, r25	; 0x0c
    6550:	ad 87       	std	Y+13, r26	; 0x0d
    6552:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6554:	6b 85       	ldd	r22, Y+11	; 0x0b
    6556:	7c 85       	ldd	r23, Y+12	; 0x0c
    6558:	8d 85       	ldd	r24, Y+13	; 0x0d
    655a:	9e 85       	ldd	r25, Y+14	; 0x0e
    655c:	20 e0       	ldi	r18, 0x00	; 0
    655e:	30 e0       	ldi	r19, 0x00	; 0
    6560:	4a e7       	ldi	r20, 0x7A	; 122
    6562:	55 e4       	ldi	r21, 0x45	; 69
    6564:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6568:	dc 01       	movw	r26, r24
    656a:	cb 01       	movw	r24, r22
    656c:	8f 83       	std	Y+7, r24	; 0x07
    656e:	98 87       	std	Y+8, r25	; 0x08
    6570:	a9 87       	std	Y+9, r26	; 0x09
    6572:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6574:	6f 81       	ldd	r22, Y+7	; 0x07
    6576:	78 85       	ldd	r23, Y+8	; 0x08
    6578:	89 85       	ldd	r24, Y+9	; 0x09
    657a:	9a 85       	ldd	r25, Y+10	; 0x0a
    657c:	20 e0       	ldi	r18, 0x00	; 0
    657e:	30 e0       	ldi	r19, 0x00	; 0
    6580:	40 e8       	ldi	r20, 0x80	; 128
    6582:	5f e3       	ldi	r21, 0x3F	; 63
    6584:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    6588:	88 23       	and	r24, r24
    658a:	2c f4       	brge	.+10     	; 0x6596 <APP_vVolumeLCD+0x168>
		__ticks = 1;
    658c:	81 e0       	ldi	r24, 0x01	; 1
    658e:	90 e0       	ldi	r25, 0x00	; 0
    6590:	9e 83       	std	Y+6, r25	; 0x06
    6592:	8d 83       	std	Y+5, r24	; 0x05
    6594:	3f c0       	rjmp	.+126    	; 0x6614 <APP_vVolumeLCD+0x1e6>
	else if (__tmp > 65535)
    6596:	6f 81       	ldd	r22, Y+7	; 0x07
    6598:	78 85       	ldd	r23, Y+8	; 0x08
    659a:	89 85       	ldd	r24, Y+9	; 0x09
    659c:	9a 85       	ldd	r25, Y+10	; 0x0a
    659e:	20 e0       	ldi	r18, 0x00	; 0
    65a0:	3f ef       	ldi	r19, 0xFF	; 255
    65a2:	4f e7       	ldi	r20, 0x7F	; 127
    65a4:	57 e4       	ldi	r21, 0x47	; 71
    65a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    65aa:	18 16       	cp	r1, r24
    65ac:	4c f5       	brge	.+82     	; 0x6600 <APP_vVolumeLCD+0x1d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    65ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    65b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    65b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    65b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    65b6:	20 e0       	ldi	r18, 0x00	; 0
    65b8:	30 e0       	ldi	r19, 0x00	; 0
    65ba:	40 e2       	ldi	r20, 0x20	; 32
    65bc:	51 e4       	ldi	r21, 0x41	; 65
    65be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    65c2:	dc 01       	movw	r26, r24
    65c4:	cb 01       	movw	r24, r22
    65c6:	bc 01       	movw	r22, r24
    65c8:	cd 01       	movw	r24, r26
    65ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    65ce:	dc 01       	movw	r26, r24
    65d0:	cb 01       	movw	r24, r22
    65d2:	9e 83       	std	Y+6, r25	; 0x06
    65d4:	8d 83       	std	Y+5, r24	; 0x05
    65d6:	0f c0       	rjmp	.+30     	; 0x65f6 <APP_vVolumeLCD+0x1c8>
    65d8:	80 e9       	ldi	r24, 0x90	; 144
    65da:	91 e0       	ldi	r25, 0x01	; 1
    65dc:	9c 83       	std	Y+4, r25	; 0x04
    65de:	8b 83       	std	Y+3, r24	; 0x03
    65e0:	8b 81       	ldd	r24, Y+3	; 0x03
    65e2:	9c 81       	ldd	r25, Y+4	; 0x04
    65e4:	01 97       	sbiw	r24, 0x01	; 1
    65e6:	f1 f7       	brne	.-4      	; 0x65e4 <APP_vVolumeLCD+0x1b6>
    65e8:	9c 83       	std	Y+4, r25	; 0x04
    65ea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    65ec:	8d 81       	ldd	r24, Y+5	; 0x05
    65ee:	9e 81       	ldd	r25, Y+6	; 0x06
    65f0:	01 97       	sbiw	r24, 0x01	; 1
    65f2:	9e 83       	std	Y+6, r25	; 0x06
    65f4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    65f6:	8d 81       	ldd	r24, Y+5	; 0x05
    65f8:	9e 81       	ldd	r25, Y+6	; 0x06
    65fa:	00 97       	sbiw	r24, 0x00	; 0
    65fc:	69 f7       	brne	.-38     	; 0x65d8 <APP_vVolumeLCD+0x1aa>
    65fe:	14 c0       	rjmp	.+40     	; 0x6628 <APP_vVolumeLCD+0x1fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6600:	6f 81       	ldd	r22, Y+7	; 0x07
    6602:	78 85       	ldd	r23, Y+8	; 0x08
    6604:	89 85       	ldd	r24, Y+9	; 0x09
    6606:	9a 85       	ldd	r25, Y+10	; 0x0a
    6608:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    660c:	dc 01       	movw	r26, r24
    660e:	cb 01       	movw	r24, r22
    6610:	9e 83       	std	Y+6, r25	; 0x06
    6612:	8d 83       	std	Y+5, r24	; 0x05
    6614:	8d 81       	ldd	r24, Y+5	; 0x05
    6616:	9e 81       	ldd	r25, Y+6	; 0x06
    6618:	9a 83       	std	Y+2, r25	; 0x02
    661a:	89 83       	std	Y+1, r24	; 0x01
    661c:	89 81       	ldd	r24, Y+1	; 0x01
    661e:	9a 81       	ldd	r25, Y+2	; 0x02
    6620:	01 97       	sbiw	r24, 0x01	; 1
    6622:	f1 f7       	brne	.-4      	; 0x6620 <APP_vVolumeLCD+0x1f2>
    6624:	9a 83       	std	Y+2, r25	; 0x02
    6626:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(250);
			LedAndBuzzer_vBuzzerClose();
    6628:	0e 94 be 13 	call	0x277c	; 0x277c <LedAndBuzzer_vBuzzerClose>
		}
		LCD_vGoTo(LineOne,0);
    662c:	80 e8       	ldi	r24, 0x80	; 128
    662e:	60 e0       	ldi	r22, 0x00	; 0
    6630:	0e 94 6d 1f 	call	0x3eda	; 0x3eda <LCD_vGoTo>
		counter=0;
    6634:	19 8a       	std	Y+17, r1	; 0x11
    6636:	4b cf       	rjmp	.-362    	; 0x64ce <APP_vVolumeLCD+0xa0>

00006638 <APP_vVolumeVerticalLCD>:
	}
}
//-
void APP_vVolumeVerticalLCD(){
    6638:	df 93       	push	r29
    663a:	cf 93       	push	r28
    663c:	cd b7       	in	r28, 0x3d	; 61
    663e:	de b7       	in	r29, 0x3e	; 62
    6640:	c4 55       	subi	r28, 0x54	; 84
    6642:	d0 40       	sbci	r29, 0x00	; 0
    6644:	0f b6       	in	r0, 0x3f	; 63
    6646:	f8 94       	cli
    6648:	de bf       	out	0x3e, r29	; 62
    664a:	0f be       	out	0x3f, r0	; 63
    664c:	cd bf       	out	0x3d, r28	; 61
	LCD_vInit();
    664e:	0e 94 a7 19 	call	0x334e	; 0x334e <LCD_vInit>
	ADC_vInit();
    6652:	0e 94 27 12 	call	0x244e	; 0x244e <ADC_vInit>
	s16 z;
	s8 counter=0,i,j,y=0;
    6656:	1a 8a       	std	Y+18, r1	; 0x12
    6658:	1f 86       	std	Y+15, r1	; 0x0f
	u8 arr1[8][8];
	for(i=0;i<8;i++){
    665a:	19 8a       	std	Y+17, r1	; 0x11
    665c:	5d c0       	rjmp	.+186    	; 0x6718 <APP_vVolumeVerticalLCD+0xe0>
		for(j=i;j<8;j++){
    665e:	89 89       	ldd	r24, Y+17	; 0x11
    6660:	88 8b       	std	Y+16, r24	; 0x10
    6662:	1e c0       	rjmp	.+60     	; 0x66a0 <APP_vVolumeVerticalLCD+0x68>
			arr1[i][7-j]=0x00;
    6664:	89 89       	ldd	r24, Y+17	; 0x11
    6666:	68 2f       	mov	r22, r24
    6668:	70 e0       	ldi	r23, 0x00	; 0
    666a:	88 89       	ldd	r24, Y+16	; 0x10
    666c:	28 2f       	mov	r18, r24
    666e:	30 e0       	ldi	r19, 0x00	; 0
    6670:	87 e0       	ldi	r24, 0x07	; 7
    6672:	90 e0       	ldi	r25, 0x00	; 0
    6674:	ac 01       	movw	r20, r24
    6676:	42 1b       	sub	r20, r18
    6678:	53 0b       	sbc	r21, r19
    667a:	9b 01       	movw	r18, r22
    667c:	22 0f       	add	r18, r18
    667e:	33 1f       	adc	r19, r19
    6680:	22 0f       	add	r18, r18
    6682:	33 1f       	adc	r19, r19
    6684:	22 0f       	add	r18, r18
    6686:	33 1f       	adc	r19, r19
    6688:	ce 01       	movw	r24, r28
    668a:	01 96       	adiw	r24, 0x01	; 1
    668c:	82 0f       	add	r24, r18
    668e:	93 1f       	adc	r25, r19
    6690:	84 0f       	add	r24, r20
    6692:	95 1f       	adc	r25, r21
    6694:	fc 01       	movw	r30, r24
    6696:	74 96       	adiw	r30, 0x14	; 20
    6698:	10 82       	st	Z, r1
	ADC_vInit();
	s16 z;
	s8 counter=0,i,j,y=0;
	u8 arr1[8][8];
	for(i=0;i<8;i++){
		for(j=i;j<8;j++){
    669a:	88 89       	ldd	r24, Y+16	; 0x10
    669c:	8f 5f       	subi	r24, 0xFF	; 255
    669e:	88 8b       	std	Y+16, r24	; 0x10
    66a0:	88 89       	ldd	r24, Y+16	; 0x10
    66a2:	88 30       	cpi	r24, 0x08	; 8
    66a4:	f8 f2       	brcs	.-66     	; 0x6664 <APP_vVolumeVerticalLCD+0x2c>
			arr1[i][7-j]=0x00;
		}
		for(j=0;j<=i;j++){
    66a6:	18 8a       	std	Y+16, r1	; 0x10
    66a8:	1f c0       	rjmp	.+62     	; 0x66e8 <APP_vVolumeVerticalLCD+0xb0>
			arr1[i][7-j]=0x1F;
    66aa:	89 89       	ldd	r24, Y+17	; 0x11
    66ac:	68 2f       	mov	r22, r24
    66ae:	70 e0       	ldi	r23, 0x00	; 0
    66b0:	88 89       	ldd	r24, Y+16	; 0x10
    66b2:	28 2f       	mov	r18, r24
    66b4:	30 e0       	ldi	r19, 0x00	; 0
    66b6:	87 e0       	ldi	r24, 0x07	; 7
    66b8:	90 e0       	ldi	r25, 0x00	; 0
    66ba:	ac 01       	movw	r20, r24
    66bc:	42 1b       	sub	r20, r18
    66be:	53 0b       	sbc	r21, r19
    66c0:	9b 01       	movw	r18, r22
    66c2:	22 0f       	add	r18, r18
    66c4:	33 1f       	adc	r19, r19
    66c6:	22 0f       	add	r18, r18
    66c8:	33 1f       	adc	r19, r19
    66ca:	22 0f       	add	r18, r18
    66cc:	33 1f       	adc	r19, r19
    66ce:	ce 01       	movw	r24, r28
    66d0:	01 96       	adiw	r24, 0x01	; 1
    66d2:	82 0f       	add	r24, r18
    66d4:	93 1f       	adc	r25, r19
    66d6:	84 0f       	add	r24, r20
    66d8:	95 1f       	adc	r25, r21
    66da:	fc 01       	movw	r30, r24
    66dc:	74 96       	adiw	r30, 0x14	; 20
    66de:	8f e1       	ldi	r24, 0x1F	; 31
    66e0:	80 83       	st	Z, r24
	u8 arr1[8][8];
	for(i=0;i<8;i++){
		for(j=i;j<8;j++){
			arr1[i][7-j]=0x00;
		}
		for(j=0;j<=i;j++){
    66e2:	88 89       	ldd	r24, Y+16	; 0x10
    66e4:	8f 5f       	subi	r24, 0xFF	; 255
    66e6:	88 8b       	std	Y+16, r24	; 0x10
    66e8:	98 89       	ldd	r25, Y+16	; 0x10
    66ea:	89 89       	ldd	r24, Y+17	; 0x11
    66ec:	89 17       	cp	r24, r25
    66ee:	e8 f6       	brcc	.-70     	; 0x66aa <APP_vVolumeVerticalLCD+0x72>
			arr1[i][7-j]=0x1F;
		}
		LCD_vCustomCharacter(arr1[i],i);
    66f0:	9e 01       	movw	r18, r28
    66f2:	2b 5e       	subi	r18, 0xEB	; 235
    66f4:	3f 4f       	sbci	r19, 0xFF	; 255
    66f6:	89 89       	ldd	r24, Y+17	; 0x11
    66f8:	88 2f       	mov	r24, r24
    66fa:	90 e0       	ldi	r25, 0x00	; 0
    66fc:	88 0f       	add	r24, r24
    66fe:	99 1f       	adc	r25, r25
    6700:	88 0f       	add	r24, r24
    6702:	99 1f       	adc	r25, r25
    6704:	88 0f       	add	r24, r24
    6706:	99 1f       	adc	r25, r25
    6708:	82 0f       	add	r24, r18
    670a:	93 1f       	adc	r25, r19
    670c:	69 89       	ldd	r22, Y+17	; 0x11
    670e:	0e 94 2f 20 	call	0x405e	; 0x405e <LCD_vCustomCharacter>
	LCD_vInit();
	ADC_vInit();
	s16 z;
	s8 counter=0,i,j,y=0;
	u8 arr1[8][8];
	for(i=0;i<8;i++){
    6712:	89 89       	ldd	r24, Y+17	; 0x11
    6714:	8f 5f       	subi	r24, 0xFF	; 255
    6716:	89 8b       	std	Y+17, r24	; 0x11
    6718:	89 89       	ldd	r24, Y+17	; 0x11
    671a:	88 30       	cpi	r24, 0x08	; 8
    671c:	08 f4       	brcc	.+2      	; 0x6720 <APP_vVolumeVerticalLCD+0xe8>
    671e:	9f cf       	rjmp	.-194    	; 0x665e <APP_vVolumeVerticalLCD+0x26>
			arr1[i][7-j]=0x1F;
		}
		LCD_vCustomCharacter(arr1[i],i);
	}
	while(1){
		z=ADC_vGetVal();
    6720:	0e 94 46 12 	call	0x248c	; 0x248c <ADC_vGetVal>
    6724:	9c 8b       	std	Y+20, r25	; 0x14
    6726:	8b 8b       	std	Y+19, r24	; 0x13
    6728:	09 c0       	rjmp	.+18     	; 0x673c <APP_vVolumeVerticalLCD+0x104>
		while(z>611){
			z=z-611;
    672a:	8b 89       	ldd	r24, Y+19	; 0x13
    672c:	9c 89       	ldd	r25, Y+20	; 0x14
    672e:	83 56       	subi	r24, 0x63	; 99
    6730:	92 40       	sbci	r25, 0x02	; 2
    6732:	9c 8b       	std	Y+20, r25	; 0x14
    6734:	8b 8b       	std	Y+19, r24	; 0x13
			counter++;
    6736:	8a 89       	ldd	r24, Y+18	; 0x12
    6738:	8f 5f       	subi	r24, 0xFF	; 255
    673a:	8a 8b       	std	Y+18, r24	; 0x12
		}
		LCD_vCustomCharacter(arr1[i],i);
	}
	while(1){
		z=ADC_vGetVal();
		while(z>611){
    673c:	8b 89       	ldd	r24, Y+19	; 0x13
    673e:	9c 89       	ldd	r25, Y+20	; 0x14
    6740:	22 e0       	ldi	r18, 0x02	; 2
    6742:	84 36       	cpi	r24, 0x64	; 100
    6744:	92 07       	cpc	r25, r18
    6746:	8c f7       	brge	.-30     	; 0x672a <APP_vVolumeVerticalLCD+0xf2>
			z=z-611;
			counter++;
		}
		for(i=y;i<counter;i++){
    6748:	8f 85       	ldd	r24, Y+15	; 0x0f
    674a:	89 8b       	std	Y+17, r24	; 0x11
    674c:	0a c0       	rjmp	.+20     	; 0x6762 <APP_vVolumeVerticalLCD+0x12a>
			LCD_vGoTo(LineOne,i);
    674e:	80 e8       	ldi	r24, 0x80	; 128
    6750:	69 89       	ldd	r22, Y+17	; 0x11
    6752:	0e 94 6d 1f 	call	0x3eda	; 0x3eda <LCD_vGoTo>
			LCD_vWriteCharacter(i);
    6756:	89 89       	ldd	r24, Y+17	; 0x11
    6758:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <LCD_vWriteCharacter>
		z=ADC_vGetVal();
		while(z>611){
			z=z-611;
			counter++;
		}
		for(i=y;i<counter;i++){
    675c:	89 89       	ldd	r24, Y+17	; 0x11
    675e:	8f 5f       	subi	r24, 0xFF	; 255
    6760:	89 8b       	std	Y+17, r24	; 0x11
    6762:	99 89       	ldd	r25, Y+17	; 0x11
    6764:	8a 89       	ldd	r24, Y+18	; 0x12
    6766:	98 17       	cp	r25, r24
    6768:	90 f3       	brcs	.-28     	; 0x674e <APP_vVolumeVerticalLCD+0x116>
			LCD_vGoTo(LineOne,i);
			LCD_vWriteCharacter(i);
		}
		for(i=y;i>counter;i--){
    676a:	8f 85       	ldd	r24, Y+15	; 0x0f
    676c:	89 8b       	std	Y+17, r24	; 0x11
    676e:	0a c0       	rjmp	.+20     	; 0x6784 <APP_vVolumeVerticalLCD+0x14c>
			LCD_vGoTo(LineOne,i);
    6770:	80 e8       	ldi	r24, 0x80	; 128
    6772:	69 89       	ldd	r22, Y+17	; 0x11
    6774:	0e 94 6d 1f 	call	0x3eda	; 0x3eda <LCD_vGoTo>
			LCD_vWriteCharacter(0);
    6778:	80 e0       	ldi	r24, 0x00	; 0
    677a:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <LCD_vWriteCharacter>
		}
		for(i=y;i<counter;i++){
			LCD_vGoTo(LineOne,i);
			LCD_vWriteCharacter(i);
		}
		for(i=y;i>counter;i--){
    677e:	89 89       	ldd	r24, Y+17	; 0x11
    6780:	81 50       	subi	r24, 0x01	; 1
    6782:	89 8b       	std	Y+17, r24	; 0x11
    6784:	99 89       	ldd	r25, Y+17	; 0x11
    6786:	8a 89       	ldd	r24, Y+18	; 0x12
    6788:	89 17       	cp	r24, r25
    678a:	90 f3       	brcs	.-28     	; 0x6770 <APP_vVolumeVerticalLCD+0x138>
			LCD_vGoTo(LineOne,i);
			LCD_vWriteCharacter(0);
		}
		y=counter;
    678c:	8a 89       	ldd	r24, Y+18	; 0x12
    678e:	8f 87       	std	Y+15, r24	; 0x0f
		if(counter==8){
    6790:	8a 89       	ldd	r24, Y+18	; 0x12
    6792:	88 30       	cpi	r24, 0x08	; 8
    6794:	09 f0       	breq	.+2      	; 0x6798 <APP_vVolumeVerticalLCD+0x160>
    6796:	76 c0       	rjmp	.+236    	; 0x6884 <APP_vVolumeVerticalLCD+0x24c>
			LedAndBuzzer_vBuzzerOpen();
    6798:	0e 94 ad 13 	call	0x275a	; 0x275a <LedAndBuzzer_vBuzzerOpen>
    679c:	80 e0       	ldi	r24, 0x00	; 0
    679e:	90 e0       	ldi	r25, 0x00	; 0
    67a0:	aa e7       	ldi	r26, 0x7A	; 122
    67a2:	b3 e4       	ldi	r27, 0x43	; 67
    67a4:	8b 87       	std	Y+11, r24	; 0x0b
    67a6:	9c 87       	std	Y+12, r25	; 0x0c
    67a8:	ad 87       	std	Y+13, r26	; 0x0d
    67aa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    67ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    67ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    67b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    67b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    67b4:	20 e0       	ldi	r18, 0x00	; 0
    67b6:	30 e0       	ldi	r19, 0x00	; 0
    67b8:	4a e7       	ldi	r20, 0x7A	; 122
    67ba:	55 e4       	ldi	r21, 0x45	; 69
    67bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    67c0:	dc 01       	movw	r26, r24
    67c2:	cb 01       	movw	r24, r22
    67c4:	8f 83       	std	Y+7, r24	; 0x07
    67c6:	98 87       	std	Y+8, r25	; 0x08
    67c8:	a9 87       	std	Y+9, r26	; 0x09
    67ca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    67cc:	6f 81       	ldd	r22, Y+7	; 0x07
    67ce:	78 85       	ldd	r23, Y+8	; 0x08
    67d0:	89 85       	ldd	r24, Y+9	; 0x09
    67d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    67d4:	20 e0       	ldi	r18, 0x00	; 0
    67d6:	30 e0       	ldi	r19, 0x00	; 0
    67d8:	40 e8       	ldi	r20, 0x80	; 128
    67da:	5f e3       	ldi	r21, 0x3F	; 63
    67dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    67e0:	88 23       	and	r24, r24
    67e2:	2c f4       	brge	.+10     	; 0x67ee <APP_vVolumeVerticalLCD+0x1b6>
		__ticks = 1;
    67e4:	81 e0       	ldi	r24, 0x01	; 1
    67e6:	90 e0       	ldi	r25, 0x00	; 0
    67e8:	9e 83       	std	Y+6, r25	; 0x06
    67ea:	8d 83       	std	Y+5, r24	; 0x05
    67ec:	3f c0       	rjmp	.+126    	; 0x686c <APP_vVolumeVerticalLCD+0x234>
	else if (__tmp > 65535)
    67ee:	6f 81       	ldd	r22, Y+7	; 0x07
    67f0:	78 85       	ldd	r23, Y+8	; 0x08
    67f2:	89 85       	ldd	r24, Y+9	; 0x09
    67f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    67f6:	20 e0       	ldi	r18, 0x00	; 0
    67f8:	3f ef       	ldi	r19, 0xFF	; 255
    67fa:	4f e7       	ldi	r20, 0x7F	; 127
    67fc:	57 e4       	ldi	r21, 0x47	; 71
    67fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    6802:	18 16       	cp	r1, r24
    6804:	4c f5       	brge	.+82     	; 0x6858 <APP_vVolumeVerticalLCD+0x220>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6806:	6b 85       	ldd	r22, Y+11	; 0x0b
    6808:	7c 85       	ldd	r23, Y+12	; 0x0c
    680a:	8d 85       	ldd	r24, Y+13	; 0x0d
    680c:	9e 85       	ldd	r25, Y+14	; 0x0e
    680e:	20 e0       	ldi	r18, 0x00	; 0
    6810:	30 e0       	ldi	r19, 0x00	; 0
    6812:	40 e2       	ldi	r20, 0x20	; 32
    6814:	51 e4       	ldi	r21, 0x41	; 65
    6816:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    681a:	dc 01       	movw	r26, r24
    681c:	cb 01       	movw	r24, r22
    681e:	bc 01       	movw	r22, r24
    6820:	cd 01       	movw	r24, r26
    6822:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6826:	dc 01       	movw	r26, r24
    6828:	cb 01       	movw	r24, r22
    682a:	9e 83       	std	Y+6, r25	; 0x06
    682c:	8d 83       	std	Y+5, r24	; 0x05
    682e:	0f c0       	rjmp	.+30     	; 0x684e <APP_vVolumeVerticalLCD+0x216>
    6830:	80 e9       	ldi	r24, 0x90	; 144
    6832:	91 e0       	ldi	r25, 0x01	; 1
    6834:	9c 83       	std	Y+4, r25	; 0x04
    6836:	8b 83       	std	Y+3, r24	; 0x03
    6838:	8b 81       	ldd	r24, Y+3	; 0x03
    683a:	9c 81       	ldd	r25, Y+4	; 0x04
    683c:	01 97       	sbiw	r24, 0x01	; 1
    683e:	f1 f7       	brne	.-4      	; 0x683c <APP_vVolumeVerticalLCD+0x204>
    6840:	9c 83       	std	Y+4, r25	; 0x04
    6842:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6844:	8d 81       	ldd	r24, Y+5	; 0x05
    6846:	9e 81       	ldd	r25, Y+6	; 0x06
    6848:	01 97       	sbiw	r24, 0x01	; 1
    684a:	9e 83       	std	Y+6, r25	; 0x06
    684c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    684e:	8d 81       	ldd	r24, Y+5	; 0x05
    6850:	9e 81       	ldd	r25, Y+6	; 0x06
    6852:	00 97       	sbiw	r24, 0x00	; 0
    6854:	69 f7       	brne	.-38     	; 0x6830 <APP_vVolumeVerticalLCD+0x1f8>
    6856:	14 c0       	rjmp	.+40     	; 0x6880 <APP_vVolumeVerticalLCD+0x248>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6858:	6f 81       	ldd	r22, Y+7	; 0x07
    685a:	78 85       	ldd	r23, Y+8	; 0x08
    685c:	89 85       	ldd	r24, Y+9	; 0x09
    685e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6860:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6864:	dc 01       	movw	r26, r24
    6866:	cb 01       	movw	r24, r22
    6868:	9e 83       	std	Y+6, r25	; 0x06
    686a:	8d 83       	std	Y+5, r24	; 0x05
    686c:	8d 81       	ldd	r24, Y+5	; 0x05
    686e:	9e 81       	ldd	r25, Y+6	; 0x06
    6870:	9a 83       	std	Y+2, r25	; 0x02
    6872:	89 83       	std	Y+1, r24	; 0x01
    6874:	89 81       	ldd	r24, Y+1	; 0x01
    6876:	9a 81       	ldd	r25, Y+2	; 0x02
    6878:	01 97       	sbiw	r24, 0x01	; 1
    687a:	f1 f7       	brne	.-4      	; 0x6878 <APP_vVolumeVerticalLCD+0x240>
    687c:	9a 83       	std	Y+2, r25	; 0x02
    687e:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(250);
			LedAndBuzzer_vBuzzerClose();
    6880:	0e 94 be 13 	call	0x277c	; 0x277c <LedAndBuzzer_vBuzzerClose>
		}

		counter=0;
    6884:	1a 8a       	std	Y+18, r1	; 0x12
    6886:	4c cf       	rjmp	.-360    	; 0x6720 <APP_vVolumeVerticalLCD+0xe8>

00006888 <main>:
/*void TEST();
u16 z;
u8 arr[6];*/
/*void Test2();
u16 counter=0;*/
int main(void){
    6888:	df 93       	push	r29
    688a:	cf 93       	push	r28
    688c:	cd b7       	in	r28, 0x3d	; 61
    688e:	de b7       	in	r29, 0x3e	; 62

	while(1){
		while((GET_BIT(TWCR,7) !=0));
    6890:	e6 e5       	ldi	r30, 0x56	; 86
    6892:	f0 e0       	ldi	r31, 0x00	; 0
    6894:	80 81       	ld	r24, Z
    6896:	88 23       	and	r24, r24
    6898:	dc f3       	brlt	.-10     	; 0x6890 <main+0x8>
		SET_BIT(TWCR,2);
    689a:	a6 e5       	ldi	r26, 0x56	; 86
    689c:	b0 e0       	ldi	r27, 0x00	; 0
    689e:	e6 e5       	ldi	r30, 0x56	; 86
    68a0:	f0 e0       	ldi	r31, 0x00	; 0
    68a2:	80 81       	ld	r24, Z
    68a4:	84 60       	ori	r24, 0x04	; 4
    68a6:	8c 93       	st	X, r24

		SET_BIT(TWCR,5);
    68a8:	a6 e5       	ldi	r26, 0x56	; 86
    68aa:	b0 e0       	ldi	r27, 0x00	; 0
    68ac:	e6 e5       	ldi	r30, 0x56	; 86
    68ae:	f0 e0       	ldi	r31, 0x00	; 0
    68b0:	80 81       	ld	r24, Z
    68b2:	80 62       	ori	r24, 0x20	; 32
    68b4:	8c 93       	st	X, r24
		CLR_BIT(TWCR,7);
    68b6:	a6 e5       	ldi	r26, 0x56	; 86
    68b8:	b0 e0       	ldi	r27, 0x00	; 0
    68ba:	e6 e5       	ldi	r30, 0x56	; 86
    68bc:	f0 e0       	ldi	r31, 0x00	; 0
    68be:	80 81       	ld	r24, Z
    68c0:	8f 77       	andi	r24, 0x7F	; 127
    68c2:	8c 93       	st	X, r24
		while((GET_BIT(TWCR,7) !=0));
    68c4:	e6 e5       	ldi	r30, 0x56	; 86
    68c6:	f0 e0       	ldi	r31, 0x00	; 0
    68c8:	80 81       	ld	r24, Z
    68ca:	88 23       	and	r24, r24
    68cc:	dc f3       	brlt	.-10     	; 0x68c4 <main+0x3c>
		SET_BIT(TWCR,2);
    68ce:	a6 e5       	ldi	r26, 0x56	; 86
    68d0:	b0 e0       	ldi	r27, 0x00	; 0
    68d2:	e6 e5       	ldi	r30, 0x56	; 86
    68d4:	f0 e0       	ldi	r31, 0x00	; 0
    68d6:	80 81       	ld	r24, Z
    68d8:	84 60       	ori	r24, 0x04	; 4
    68da:	8c 93       	st	X, r24

		TWDR=0b00000010; //frist bit is for read or write
    68dc:	e3 e2       	ldi	r30, 0x23	; 35
    68de:	f0 e0       	ldi	r31, 0x00	; 0
    68e0:	82 e0       	ldi	r24, 0x02	; 2
    68e2:	80 83       	st	Z, r24
		CLR_BIT(TWCR,7);
    68e4:	a6 e5       	ldi	r26, 0x56	; 86
    68e6:	b0 e0       	ldi	r27, 0x00	; 0
    68e8:	e6 e5       	ldi	r30, 0x56	; 86
    68ea:	f0 e0       	ldi	r31, 0x00	; 0
    68ec:	80 81       	ld	r24, Z
    68ee:	8f 77       	andi	r24, 0x7F	; 127
    68f0:	8c 93       	st	X, r24
		while((GET_BIT(TWCR,7) !=0));
    68f2:	e6 e5       	ldi	r30, 0x56	; 86
    68f4:	f0 e0       	ldi	r31, 0x00	; 0
    68f6:	80 81       	ld	r24, Z
    68f8:	88 23       	and	r24, r24
    68fa:	dc f3       	brlt	.-10     	; 0x68f2 <main+0x6a>
		SET_BIT(TWCR,2);
    68fc:	a6 e5       	ldi	r26, 0x56	; 86
    68fe:	b0 e0       	ldi	r27, 0x00	; 0
    6900:	e6 e5       	ldi	r30, 0x56	; 86
    6902:	f0 e0       	ldi	r31, 0x00	; 0
    6904:	80 81       	ld	r24, Z
    6906:	84 60       	ori	r24, 0x04	; 4
    6908:	8c 93       	st	X, r24

		TWDR='A';
    690a:	e3 e2       	ldi	r30, 0x23	; 35
    690c:	f0 e0       	ldi	r31, 0x00	; 0
    690e:	81 e4       	ldi	r24, 0x41	; 65
    6910:	80 83       	st	Z, r24
		CLR_BIT(TWCR,7);
    6912:	a6 e5       	ldi	r26, 0x56	; 86
    6914:	b0 e0       	ldi	r27, 0x00	; 0
    6916:	e6 e5       	ldi	r30, 0x56	; 86
    6918:	f0 e0       	ldi	r31, 0x00	; 0
    691a:	80 81       	ld	r24, Z
    691c:	8f 77       	andi	r24, 0x7F	; 127
    691e:	8c 93       	st	X, r24
		while((GET_BIT(TWCR,7) !=0));
    6920:	e6 e5       	ldi	r30, 0x56	; 86
    6922:	f0 e0       	ldi	r31, 0x00	; 0
    6924:	80 81       	ld	r24, Z
    6926:	88 23       	and	r24, r24
    6928:	dc f3       	brlt	.-10     	; 0x6920 <main+0x98>
		SET_BIT(TWCR,2);
    692a:	a6 e5       	ldi	r26, 0x56	; 86
    692c:	b0 e0       	ldi	r27, 0x00	; 0
    692e:	e6 e5       	ldi	r30, 0x56	; 86
    6930:	f0 e0       	ldi	r31, 0x00	; 0
    6932:	80 81       	ld	r24, Z
    6934:	84 60       	ori	r24, 0x04	; 4
    6936:	8c 93       	st	X, r24

		SET_BIT(TWCR,4);
    6938:	a6 e5       	ldi	r26, 0x56	; 86
    693a:	b0 e0       	ldi	r27, 0x00	; 0
    693c:	e6 e5       	ldi	r30, 0x56	; 86
    693e:	f0 e0       	ldi	r31, 0x00	; 0
    6940:	80 81       	ld	r24, Z
    6942:	80 61       	ori	r24, 0x10	; 16
    6944:	8c 93       	st	X, r24
		CLR_BIT(TWCR,7);
    6946:	a6 e5       	ldi	r26, 0x56	; 86
    6948:	b0 e0       	ldi	r27, 0x00	; 0
    694a:	e6 e5       	ldi	r30, 0x56	; 86
    694c:	f0 e0       	ldi	r31, 0x00	; 0
    694e:	80 81       	ld	r24, Z
    6950:	8f 77       	andi	r24, 0x7F	; 127
    6952:	8c 93       	st	X, r24
    6954:	9d cf       	rjmp	.-198    	; 0x6890 <main+0x8>

00006956 <__mulsi3>:
    6956:	62 9f       	mul	r22, r18
    6958:	d0 01       	movw	r26, r0
    695a:	73 9f       	mul	r23, r19
    695c:	f0 01       	movw	r30, r0
    695e:	82 9f       	mul	r24, r18
    6960:	e0 0d       	add	r30, r0
    6962:	f1 1d       	adc	r31, r1
    6964:	64 9f       	mul	r22, r20
    6966:	e0 0d       	add	r30, r0
    6968:	f1 1d       	adc	r31, r1
    696a:	92 9f       	mul	r25, r18
    696c:	f0 0d       	add	r31, r0
    696e:	83 9f       	mul	r24, r19
    6970:	f0 0d       	add	r31, r0
    6972:	74 9f       	mul	r23, r20
    6974:	f0 0d       	add	r31, r0
    6976:	65 9f       	mul	r22, r21
    6978:	f0 0d       	add	r31, r0
    697a:	99 27       	eor	r25, r25
    697c:	72 9f       	mul	r23, r18
    697e:	b0 0d       	add	r27, r0
    6980:	e1 1d       	adc	r30, r1
    6982:	f9 1f       	adc	r31, r25
    6984:	63 9f       	mul	r22, r19
    6986:	b0 0d       	add	r27, r0
    6988:	e1 1d       	adc	r30, r1
    698a:	f9 1f       	adc	r31, r25
    698c:	bd 01       	movw	r22, r26
    698e:	cf 01       	movw	r24, r30
    6990:	11 24       	eor	r1, r1
    6992:	08 95       	ret

00006994 <__udivmodqi4>:
    6994:	99 1b       	sub	r25, r25
    6996:	79 e0       	ldi	r23, 0x09	; 9
    6998:	04 c0       	rjmp	.+8      	; 0x69a2 <__udivmodqi4_ep>

0000699a <__udivmodqi4_loop>:
    699a:	99 1f       	adc	r25, r25
    699c:	96 17       	cp	r25, r22
    699e:	08 f0       	brcs	.+2      	; 0x69a2 <__udivmodqi4_ep>
    69a0:	96 1b       	sub	r25, r22

000069a2 <__udivmodqi4_ep>:
    69a2:	88 1f       	adc	r24, r24
    69a4:	7a 95       	dec	r23
    69a6:	c9 f7       	brne	.-14     	; 0x699a <__udivmodqi4_loop>
    69a8:	80 95       	com	r24
    69aa:	08 95       	ret

000069ac <__udivmodhi4>:
    69ac:	aa 1b       	sub	r26, r26
    69ae:	bb 1b       	sub	r27, r27
    69b0:	51 e1       	ldi	r21, 0x11	; 17
    69b2:	07 c0       	rjmp	.+14     	; 0x69c2 <__udivmodhi4_ep>

000069b4 <__udivmodhi4_loop>:
    69b4:	aa 1f       	adc	r26, r26
    69b6:	bb 1f       	adc	r27, r27
    69b8:	a6 17       	cp	r26, r22
    69ba:	b7 07       	cpc	r27, r23
    69bc:	10 f0       	brcs	.+4      	; 0x69c2 <__udivmodhi4_ep>
    69be:	a6 1b       	sub	r26, r22
    69c0:	b7 0b       	sbc	r27, r23

000069c2 <__udivmodhi4_ep>:
    69c2:	88 1f       	adc	r24, r24
    69c4:	99 1f       	adc	r25, r25
    69c6:	5a 95       	dec	r21
    69c8:	a9 f7       	brne	.-22     	; 0x69b4 <__udivmodhi4_loop>
    69ca:	80 95       	com	r24
    69cc:	90 95       	com	r25
    69ce:	bc 01       	movw	r22, r24
    69d0:	cd 01       	movw	r24, r26
    69d2:	08 95       	ret

000069d4 <__divmodhi4>:
    69d4:	97 fb       	bst	r25, 7
    69d6:	09 2e       	mov	r0, r25
    69d8:	07 26       	eor	r0, r23
    69da:	0a d0       	rcall	.+20     	; 0x69f0 <__divmodhi4_neg1>
    69dc:	77 fd       	sbrc	r23, 7
    69de:	04 d0       	rcall	.+8      	; 0x69e8 <__divmodhi4_neg2>
    69e0:	e5 df       	rcall	.-54     	; 0x69ac <__udivmodhi4>
    69e2:	06 d0       	rcall	.+12     	; 0x69f0 <__divmodhi4_neg1>
    69e4:	00 20       	and	r0, r0
    69e6:	1a f4       	brpl	.+6      	; 0x69ee <__divmodhi4_exit>

000069e8 <__divmodhi4_neg2>:
    69e8:	70 95       	com	r23
    69ea:	61 95       	neg	r22
    69ec:	7f 4f       	sbci	r23, 0xFF	; 255

000069ee <__divmodhi4_exit>:
    69ee:	08 95       	ret

000069f0 <__divmodhi4_neg1>:
    69f0:	f6 f7       	brtc	.-4      	; 0x69ee <__divmodhi4_exit>
    69f2:	90 95       	com	r25
    69f4:	81 95       	neg	r24
    69f6:	9f 4f       	sbci	r25, 0xFF	; 255
    69f8:	08 95       	ret

000069fa <__divmodsi4>:
    69fa:	97 fb       	bst	r25, 7
    69fc:	09 2e       	mov	r0, r25
    69fe:	05 26       	eor	r0, r21
    6a00:	0e d0       	rcall	.+28     	; 0x6a1e <__divmodsi4_neg1>
    6a02:	57 fd       	sbrc	r21, 7
    6a04:	04 d0       	rcall	.+8      	; 0x6a0e <__divmodsi4_neg2>
    6a06:	14 d0       	rcall	.+40     	; 0x6a30 <__udivmodsi4>
    6a08:	0a d0       	rcall	.+20     	; 0x6a1e <__divmodsi4_neg1>
    6a0a:	00 1c       	adc	r0, r0
    6a0c:	38 f4       	brcc	.+14     	; 0x6a1c <__divmodsi4_exit>

00006a0e <__divmodsi4_neg2>:
    6a0e:	50 95       	com	r21
    6a10:	40 95       	com	r20
    6a12:	30 95       	com	r19
    6a14:	21 95       	neg	r18
    6a16:	3f 4f       	sbci	r19, 0xFF	; 255
    6a18:	4f 4f       	sbci	r20, 0xFF	; 255
    6a1a:	5f 4f       	sbci	r21, 0xFF	; 255

00006a1c <__divmodsi4_exit>:
    6a1c:	08 95       	ret

00006a1e <__divmodsi4_neg1>:
    6a1e:	f6 f7       	brtc	.-4      	; 0x6a1c <__divmodsi4_exit>
    6a20:	90 95       	com	r25
    6a22:	80 95       	com	r24
    6a24:	70 95       	com	r23
    6a26:	61 95       	neg	r22
    6a28:	7f 4f       	sbci	r23, 0xFF	; 255
    6a2a:	8f 4f       	sbci	r24, 0xFF	; 255
    6a2c:	9f 4f       	sbci	r25, 0xFF	; 255
    6a2e:	08 95       	ret

00006a30 <__udivmodsi4>:
    6a30:	a1 e2       	ldi	r26, 0x21	; 33
    6a32:	1a 2e       	mov	r1, r26
    6a34:	aa 1b       	sub	r26, r26
    6a36:	bb 1b       	sub	r27, r27
    6a38:	fd 01       	movw	r30, r26
    6a3a:	0d c0       	rjmp	.+26     	; 0x6a56 <__udivmodsi4_ep>

00006a3c <__udivmodsi4_loop>:
    6a3c:	aa 1f       	adc	r26, r26
    6a3e:	bb 1f       	adc	r27, r27
    6a40:	ee 1f       	adc	r30, r30
    6a42:	ff 1f       	adc	r31, r31
    6a44:	a2 17       	cp	r26, r18
    6a46:	b3 07       	cpc	r27, r19
    6a48:	e4 07       	cpc	r30, r20
    6a4a:	f5 07       	cpc	r31, r21
    6a4c:	20 f0       	brcs	.+8      	; 0x6a56 <__udivmodsi4_ep>
    6a4e:	a2 1b       	sub	r26, r18
    6a50:	b3 0b       	sbc	r27, r19
    6a52:	e4 0b       	sbc	r30, r20
    6a54:	f5 0b       	sbc	r31, r21

00006a56 <__udivmodsi4_ep>:
    6a56:	66 1f       	adc	r22, r22
    6a58:	77 1f       	adc	r23, r23
    6a5a:	88 1f       	adc	r24, r24
    6a5c:	99 1f       	adc	r25, r25
    6a5e:	1a 94       	dec	r1
    6a60:	69 f7       	brne	.-38     	; 0x6a3c <__udivmodsi4_loop>
    6a62:	60 95       	com	r22
    6a64:	70 95       	com	r23
    6a66:	80 95       	com	r24
    6a68:	90 95       	com	r25
    6a6a:	9b 01       	movw	r18, r22
    6a6c:	ac 01       	movw	r20, r24
    6a6e:	bd 01       	movw	r22, r26
    6a70:	cf 01       	movw	r24, r30
    6a72:	08 95       	ret

00006a74 <__prologue_saves__>:
    6a74:	2f 92       	push	r2
    6a76:	3f 92       	push	r3
    6a78:	4f 92       	push	r4
    6a7a:	5f 92       	push	r5
    6a7c:	6f 92       	push	r6
    6a7e:	7f 92       	push	r7
    6a80:	8f 92       	push	r8
    6a82:	9f 92       	push	r9
    6a84:	af 92       	push	r10
    6a86:	bf 92       	push	r11
    6a88:	cf 92       	push	r12
    6a8a:	df 92       	push	r13
    6a8c:	ef 92       	push	r14
    6a8e:	ff 92       	push	r15
    6a90:	0f 93       	push	r16
    6a92:	1f 93       	push	r17
    6a94:	cf 93       	push	r28
    6a96:	df 93       	push	r29
    6a98:	cd b7       	in	r28, 0x3d	; 61
    6a9a:	de b7       	in	r29, 0x3e	; 62
    6a9c:	ca 1b       	sub	r28, r26
    6a9e:	db 0b       	sbc	r29, r27
    6aa0:	0f b6       	in	r0, 0x3f	; 63
    6aa2:	f8 94       	cli
    6aa4:	de bf       	out	0x3e, r29	; 62
    6aa6:	0f be       	out	0x3f, r0	; 63
    6aa8:	cd bf       	out	0x3d, r28	; 61
    6aaa:	09 94       	ijmp

00006aac <__epilogue_restores__>:
    6aac:	2a 88       	ldd	r2, Y+18	; 0x12
    6aae:	39 88       	ldd	r3, Y+17	; 0x11
    6ab0:	48 88       	ldd	r4, Y+16	; 0x10
    6ab2:	5f 84       	ldd	r5, Y+15	; 0x0f
    6ab4:	6e 84       	ldd	r6, Y+14	; 0x0e
    6ab6:	7d 84       	ldd	r7, Y+13	; 0x0d
    6ab8:	8c 84       	ldd	r8, Y+12	; 0x0c
    6aba:	9b 84       	ldd	r9, Y+11	; 0x0b
    6abc:	aa 84       	ldd	r10, Y+10	; 0x0a
    6abe:	b9 84       	ldd	r11, Y+9	; 0x09
    6ac0:	c8 84       	ldd	r12, Y+8	; 0x08
    6ac2:	df 80       	ldd	r13, Y+7	; 0x07
    6ac4:	ee 80       	ldd	r14, Y+6	; 0x06
    6ac6:	fd 80       	ldd	r15, Y+5	; 0x05
    6ac8:	0c 81       	ldd	r16, Y+4	; 0x04
    6aca:	1b 81       	ldd	r17, Y+3	; 0x03
    6acc:	aa 81       	ldd	r26, Y+2	; 0x02
    6ace:	b9 81       	ldd	r27, Y+1	; 0x01
    6ad0:	ce 0f       	add	r28, r30
    6ad2:	d1 1d       	adc	r29, r1
    6ad4:	0f b6       	in	r0, 0x3f	; 63
    6ad6:	f8 94       	cli
    6ad8:	de bf       	out	0x3e, r29	; 62
    6ada:	0f be       	out	0x3f, r0	; 63
    6adc:	cd bf       	out	0x3d, r28	; 61
    6ade:	ed 01       	movw	r28, r26
    6ae0:	08 95       	ret

00006ae2 <_exit>:
    6ae2:	f8 94       	cli

00006ae4 <__stop_program>:
    6ae4:	ff cf       	rjmp	.-2      	; 0x6ae4 <__stop_program>
