
medo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006cf4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000066  00800060  00006cf4  00006d88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000040  008000c6  008000c6  00006dee  2**0
                  ALLOC
  3 .stab         00007dd0  00000000  00000000  00006df0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002f60  00000000  00000000  0000ebc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00011b20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00011c60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00011dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00013a19  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00014904  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000156b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00015814  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00015aa1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001626f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 1b 0f 	jmp	0x1e36	; 0x1e36 <__vector_1>
       8:	0c 94 4e 0f 	jmp	0x1e9c	; 0x1e9c <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 86 0a 	jmp	0x150c	; 0x150c <__vector_6>
      1c:	0c 94 ed 09 	jmp	0x13da	; 0x13da <__vector_7>
      20:	0c 94 20 0a 	jmp	0x1440	; 0x1440 <__vector_8>
      24:	0c 94 53 0a 	jmp	0x14a6	; 0x14a6 <__vector_9>
      28:	0c 94 3f 0b 	jmp	0x167e	; 0x167e <__vector_10>
      2c:	0c 94 72 0b 	jmp	0x16e4	; 0x16e4 <__vector_11>
      30:	0c 94 38 0c 	jmp	0x1870	; 0x1870 <__vector_12>
      34:	0c 94 f2 06 	jmp	0xde4	; 0xde4 <__vector_13>
      38:	0c 94 25 07 	jmp	0xe4a	; 0xe4a <__vector_14>
      3c:	0c 94 58 07 	jmp	0xeb0	; 0xeb0 <__vector_15>
      40:	0c 94 2b 14 	jmp	0x2856	; 0x2856 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 64 0d 	jmp	0x1ac8	; 0x1ac8 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ef       	ldi	r30, 0xF4	; 244
      68:	fc e6       	ldi	r31, 0x6C	; 108
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3c       	cpi	r26, 0xC6	; 198
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 ec       	ldi	r26, 0xC6	; 198
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 30       	cpi	r26, 0x06	; 6
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4c 35 	call	0x6a98	; 0x6a98 <main>
      8a:	0c 94 78 36 	jmp	0x6cf0	; 0x6cf0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 41 36 	jmp	0x6c82	; 0x6c82 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 ea       	ldi	r26, 0xA5	; 165
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 5d 36 	jmp	0x6cba	; 0x6cba <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 4d 36 	jmp	0x6c9a	; 0x6c9a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 69 36 	jmp	0x6cd2	; 0x6cd2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 4d 36 	jmp	0x6c9a	; 0x6c9a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 69 36 	jmp	0x6cd2	; 0x6cd2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 41 36 	jmp	0x6c82	; 0x6c82 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	85 ea       	ldi	r24, 0xA5	; 165
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 5d 36 	jmp	0x6cba	; 0x6cba <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 4d 36 	jmp	0x6c9a	; 0x6c9a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 69 36 	jmp	0x6cd2	; 0x6cd2 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 4d 36 	jmp	0x6c9a	; 0x6c9a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 69 36 	jmp	0x6cd2	; 0x6cd2 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 4d 36 	jmp	0x6c9a	; 0x6c9a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 69 36 	jmp	0x6cd2	; 0x6cd2 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 51 36 	jmp	0x6ca2	; 0x6ca2 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 6d 36 	jmp	0x6cda	; 0x6cda <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <OS_vInit>:
 */
#include "OS.h"

tasks a[NumOfTasks];
volatile u32 OS_Counter=0;
void OS_vInit(){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	Timer1_vInit();
     b4e:	0e 94 8b 07 	call	0xf16	; 0xf16 <Timer1_vInit>
	EXTI_vEnableGIE();
     b52:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <EXTI_vEnableGIE>
	Timer1_vCompareChannelAInterruptEnable();
     b56:	0e 94 a7 08 	call	0x114e	; 0x114e <Timer1_vCompareChannelAInterruptEnable>
}
     b5a:	cf 91       	pop	r28
     b5c:	df 91       	pop	r29
     b5e:	08 95       	ret

00000b60 <OS_AddTask>:
void OS_AddTask(u8 Loc_preuorty,u32 Loc_preucuty, void(*ptrr)(void)){
     b60:	df 93       	push	r29
     b62:	cf 93       	push	r28
     b64:	cd b7       	in	r28, 0x3d	; 61
     b66:	de b7       	in	r29, 0x3e	; 62
     b68:	27 97       	sbiw	r28, 0x07	; 7
     b6a:	0f b6       	in	r0, 0x3f	; 63
     b6c:	f8 94       	cli
     b6e:	de bf       	out	0x3e, r29	; 62
     b70:	0f be       	out	0x3f, r0	; 63
     b72:	cd bf       	out	0x3d, r28	; 61
     b74:	89 83       	std	Y+1, r24	; 0x01
     b76:	4a 83       	std	Y+2, r20	; 0x02
     b78:	5b 83       	std	Y+3, r21	; 0x03
     b7a:	6c 83       	std	Y+4, r22	; 0x04
     b7c:	7d 83       	std	Y+5, r23	; 0x05
     b7e:	3f 83       	std	Y+7, r19	; 0x07
     b80:	2e 83       	std	Y+6, r18	; 0x06
	a[Loc_preuorty].preucuty=Loc_preucuty;
     b82:	89 81       	ldd	r24, Y+1	; 0x01
     b84:	28 2f       	mov	r18, r24
     b86:	30 e0       	ldi	r19, 0x00	; 0
     b88:	c9 01       	movw	r24, r18
     b8a:	88 0f       	add	r24, r24
     b8c:	99 1f       	adc	r25, r25
     b8e:	82 0f       	add	r24, r18
     b90:	93 1f       	adc	r25, r19
     b92:	01 96       	adiw	r24, 0x01	; 1
     b94:	88 0f       	add	r24, r24
     b96:	99 1f       	adc	r25, r25
     b98:	fc 01       	movw	r30, r24
     b9a:	e3 51       	subi	r30, 0x13	; 19
     b9c:	ff 4f       	sbci	r31, 0xFF	; 255
     b9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ba0:	9b 81       	ldd	r25, Y+3	; 0x03
     ba2:	ac 81       	ldd	r26, Y+4	; 0x04
     ba4:	bd 81       	ldd	r27, Y+5	; 0x05
     ba6:	80 83       	st	Z, r24
     ba8:	91 83       	std	Z+1, r25	; 0x01
     baa:	a2 83       	std	Z+2, r26	; 0x02
     bac:	b3 83       	std	Z+3, r27	; 0x03
	a[Loc_preuorty].ptr=ptrr;
     bae:	89 81       	ldd	r24, Y+1	; 0x01
     bb0:	28 2f       	mov	r18, r24
     bb2:	30 e0       	ldi	r19, 0x00	; 0
     bb4:	4e 81       	ldd	r20, Y+6	; 0x06
     bb6:	5f 81       	ldd	r21, Y+7	; 0x07
     bb8:	c9 01       	movw	r24, r18
     bba:	88 0f       	add	r24, r24
     bbc:	99 1f       	adc	r25, r25
     bbe:	82 0f       	add	r24, r18
     bc0:	93 1f       	adc	r25, r19
     bc2:	88 0f       	add	r24, r24
     bc4:	99 1f       	adc	r25, r25
     bc6:	fc 01       	movw	r30, r24
     bc8:	e3 51       	subi	r30, 0x13	; 19
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	51 83       	std	Z+1, r21	; 0x01
     bce:	40 83       	st	Z, r20
}
     bd0:	27 96       	adiw	r28, 0x07	; 7
     bd2:	0f b6       	in	r0, 0x3f	; 63
     bd4:	f8 94       	cli
     bd6:	de bf       	out	0x3e, r29	; 62
     bd8:	0f be       	out	0x3f, r0	; 63
     bda:	cd bf       	out	0x3d, r28	; 61
     bdc:	cf 91       	pop	r28
     bde:	df 91       	pop	r29
     be0:	08 95       	ret

00000be2 <OS_Scheduler>:
void OS_Scheduler(){
     be2:	ef 92       	push	r14
     be4:	ff 92       	push	r15
     be6:	0f 93       	push	r16
     be8:	1f 93       	push	r17
     bea:	df 93       	push	r29
     bec:	cf 93       	push	r28
     bee:	0f 92       	push	r0
     bf0:	cd b7       	in	r28, 0x3d	; 61
     bf2:	de b7       	in	r29, 0x3e	; 62
	u8 i=0;
     bf4:	19 82       	std	Y+1, r1	; 0x01
	OS_Counter++;
     bf6:	80 91 c6 00 	lds	r24, 0x00C6
     bfa:	90 91 c7 00 	lds	r25, 0x00C7
     bfe:	a0 91 c8 00 	lds	r26, 0x00C8
     c02:	b0 91 c9 00 	lds	r27, 0x00C9
     c06:	01 96       	adiw	r24, 0x01	; 1
     c08:	a1 1d       	adc	r26, r1
     c0a:	b1 1d       	adc	r27, r1
     c0c:	80 93 c6 00 	sts	0x00C6, r24
     c10:	90 93 c7 00 	sts	0x00C7, r25
     c14:	a0 93 c8 00 	sts	0x00C8, r26
     c18:	b0 93 c9 00 	sts	0x00C9, r27
	for(i=0;i<NumOfTasks;i++){
     c1c:	19 82       	std	Y+1, r1	; 0x01
     c1e:	38 c0       	rjmp	.+112    	; 0xc90 <OS_Scheduler+0xae>

		if((OS_Counter % a[i].preucuty)==0){
     c20:	e0 90 c6 00 	lds	r14, 0x00C6
     c24:	f0 90 c7 00 	lds	r15, 0x00C7
     c28:	00 91 c8 00 	lds	r16, 0x00C8
     c2c:	10 91 c9 00 	lds	r17, 0x00C9
     c30:	89 81       	ldd	r24, Y+1	; 0x01
     c32:	28 2f       	mov	r18, r24
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	c9 01       	movw	r24, r18
     c38:	88 0f       	add	r24, r24
     c3a:	99 1f       	adc	r25, r25
     c3c:	82 0f       	add	r24, r18
     c3e:	93 1f       	adc	r25, r19
     c40:	01 96       	adiw	r24, 0x01	; 1
     c42:	88 0f       	add	r24, r24
     c44:	99 1f       	adc	r25, r25
     c46:	fc 01       	movw	r30, r24
     c48:	e3 51       	subi	r30, 0x13	; 19
     c4a:	ff 4f       	sbci	r31, 0xFF	; 255
     c4c:	20 81       	ld	r18, Z
     c4e:	31 81       	ldd	r19, Z+1	; 0x01
     c50:	42 81       	ldd	r20, Z+2	; 0x02
     c52:	53 81       	ldd	r21, Z+3	; 0x03
     c54:	c8 01       	movw	r24, r16
     c56:	b7 01       	movw	r22, r14
     c58:	0e 94 04 36 	call	0x6c08	; 0x6c08 <__udivmodsi4>
     c5c:	dc 01       	movw	r26, r24
     c5e:	cb 01       	movw	r24, r22
     c60:	00 97       	sbiw	r24, 0x00	; 0
     c62:	a1 05       	cpc	r26, r1
     c64:	b1 05       	cpc	r27, r1
     c66:	89 f4       	brne	.+34     	; 0xc8a <OS_Scheduler+0xa8>

			a[i].ptr();
     c68:	89 81       	ldd	r24, Y+1	; 0x01
     c6a:	28 2f       	mov	r18, r24
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	c9 01       	movw	r24, r18
     c70:	88 0f       	add	r24, r24
     c72:	99 1f       	adc	r25, r25
     c74:	82 0f       	add	r24, r18
     c76:	93 1f       	adc	r25, r19
     c78:	88 0f       	add	r24, r24
     c7a:	99 1f       	adc	r25, r25
     c7c:	fc 01       	movw	r30, r24
     c7e:	e3 51       	subi	r30, 0x13	; 19
     c80:	ff 4f       	sbci	r31, 0xFF	; 255
     c82:	01 90       	ld	r0, Z+
     c84:	f0 81       	ld	r31, Z
     c86:	e0 2d       	mov	r30, r0
     c88:	09 95       	icall
	a[Loc_preuorty].ptr=ptrr;
}
void OS_Scheduler(){
	u8 i=0;
	OS_Counter++;
	for(i=0;i<NumOfTasks;i++){
     c8a:	89 81       	ldd	r24, Y+1	; 0x01
     c8c:	8f 5f       	subi	r24, 0xFF	; 255
     c8e:	89 83       	std	Y+1, r24	; 0x01
     c90:	89 81       	ldd	r24, Y+1	; 0x01
     c92:	83 30       	cpi	r24, 0x03	; 3
     c94:	28 f2       	brcs	.-118    	; 0xc20 <OS_Scheduler+0x3e>
		if((OS_Counter % a[i].preucuty)==0){

			a[i].ptr();
		}
	}
}
     c96:	0f 90       	pop	r0
     c98:	cf 91       	pop	r28
     c9a:	df 91       	pop	r29
     c9c:	1f 91       	pop	r17
     c9e:	0f 91       	pop	r16
     ca0:	ff 90       	pop	r15
     ca2:	ef 90       	pop	r14
     ca4:	08 95       	ret

00000ca6 <OS_StartScheduler>:
void OS_StartScheduler(){
     ca6:	df 93       	push	r29
     ca8:	cf 93       	push	r28
     caa:	00 d0       	rcall	.+0      	; 0xcac <OS_StartScheduler+0x6>
     cac:	cd b7       	in	r28, 0x3d	; 61
     cae:	de b7       	in	r29, 0x3e	; 62
	u16 xx=((u32)Time_ms*SystemFrequancy_Khz)/T1Prescaler;
     cb0:	84 e2       	ldi	r24, 0x24	; 36
     cb2:	94 ef       	ldi	r25, 0xF4	; 244
     cb4:	9a 83       	std	Y+2, r25	; 0x02
     cb6:	89 83       	std	Y+1, r24	; 0x01
	Timer1_vChannelACopmareRegister(xx);
     cb8:	89 81       	ldd	r24, Y+1	; 0x01
     cba:	9a 81       	ldd	r25, Y+2	; 0x02
     cbc:	0e 94 67 09 	call	0x12ce	; 0x12ce <Timer1_vChannelACopmareRegister>
	Timer1_vChannelACompareCallBack(OS_Scheduler);
     cc0:	81 ef       	ldi	r24, 0xF1	; 241
     cc2:	95 e0       	ldi	r25, 0x05	; 5
     cc4:	0e 94 ab 09 	call	0x1356	; 0x1356 <Timer1_vChannelACompareCallBack>
}
     cc8:	0f 90       	pop	r0
     cca:	0f 90       	pop	r0
     ccc:	cf 91       	pop	r28
     cce:	df 91       	pop	r29
     cd0:	08 95       	ret

00000cd2 <UART_vInit>:
*
* \Sync\Async      : Synchronous
* \Parameters (in) : None
* \Parameters (out): None
*******************************************************************************/
void UART_vInit(){
     cd2:	df 93       	push	r29
     cd4:	cf 93       	push	r28
     cd6:	cd b7       	in	r28, 0x3d	; 61
     cd8:	de b7       	in	r29, 0x3e	; 62

	SET_BIT(UCSRB,7);
	SET_BIT(UCSRB,6);
	SET_BIT(UCSRB,5);
#elif UARTMode==UARTPolling
	UBRRL=BaudRateRegisters;
     cda:	e9 e2       	ldi	r30, 0x29	; 41
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	87 e6       	ldi	r24, 0x67	; 103
     ce0:	80 83       	st	Z, r24
	SET_BIT(UCSRB,3);
     ce2:	aa e2       	ldi	r26, 0x2A	; 42
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	ea e2       	ldi	r30, 0x2A	; 42
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	88 60       	ori	r24, 0x08	; 8
     cee:	8c 93       	st	X, r24
	SET_BIT(UCSRB,4);
     cf0:	aa e2       	ldi	r26, 0x2A	; 42
     cf2:	b0 e0       	ldi	r27, 0x00	; 0
     cf4:	ea e2       	ldi	r30, 0x2A	; 42
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	80 81       	ld	r24, Z
     cfa:	80 61       	ori	r24, 0x10	; 16
     cfc:	8c 93       	st	X, r24
	UCSRC=0b10000110;
     cfe:	e0 e4       	ldi	r30, 0x40	; 64
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	86 e8       	ldi	r24, 0x86	; 134
     d04:	80 83       	st	Z, r24
#endif
}
     d06:	cf 91       	pop	r28
     d08:	df 91       	pop	r29
     d0a:	08 95       	ret

00000d0c <UART_vSendChar>:
*
* \Sync\Async      : Asynchronous
* \Parameters (in) : Loc_SendChar	Data wanted to send
* \Parameters (out): None
*******************************************************************************/
void UART_vSendChar(u8 Loc_SendChar){
     d0c:	df 93       	push	r29
     d0e:	cf 93       	push	r28
     d10:	0f 92       	push	r0
     d12:	cd b7       	in	r28, 0x3d	; 61
     d14:	de b7       	in	r29, 0x3e	; 62
     d16:	89 83       	std	Y+1, r24	; 0x01
	while(!(GET_BIT(UCSRA,6)));
     d18:	ea e2       	ldi	r30, 0x2A	; 42
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	80 81       	ld	r24, Z
     d1e:	82 95       	swap	r24
     d20:	86 95       	lsr	r24
     d22:	86 95       	lsr	r24
     d24:	83 70       	andi	r24, 0x03	; 3
     d26:	88 2f       	mov	r24, r24
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	81 70       	andi	r24, 0x01	; 1
     d2c:	90 70       	andi	r25, 0x00	; 0
     d2e:	00 97       	sbiw	r24, 0x00	; 0
     d30:	99 f3       	breq	.-26     	; 0xd18 <UART_vSendChar+0xc>
	UDR=Loc_SendChar;
     d32:	ec e2       	ldi	r30, 0x2C	; 44
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	89 81       	ldd	r24, Y+1	; 0x01
     d38:	80 83       	st	Z, r24
}
     d3a:	0f 90       	pop	r0
     d3c:	cf 91       	pop	r28
     d3e:	df 91       	pop	r29
     d40:	08 95       	ret

00000d42 <UART_u8ReceiveChar>:
*
* \Sync\Async      : Asynchronous
* \Parameters (in) : None
* \Parameters (out): received data
*******************************************************************************/
u8 UART_u8ReceiveChar(){
     d42:	df 93       	push	r29
     d44:	cf 93       	push	r28
     d46:	cd b7       	in	r28, 0x3d	; 61
     d48:	de b7       	in	r29, 0x3e	; 62
	while(!(GET_BIT(UCSRA,7)));
     d4a:	ea e2       	ldi	r30, 0x2A	; 42
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	80 81       	ld	r24, Z
     d50:	88 23       	and	r24, r24
     d52:	dc f7       	brge	.-10     	; 0xd4a <UART_u8ReceiveChar+0x8>
	return UDR;
     d54:	ec e2       	ldi	r30, 0x2C	; 44
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	80 81       	ld	r24, Z
}
     d5a:	cf 91       	pop	r28
     d5c:	df 91       	pop	r29
     d5e:	08 95       	ret

00000d60 <UART_RXCompleteCallBack>:
*
* \Sync\Async      : Asynchronous
* \Parameters (in) : void(*ptr1)(void)
* \Parameters (out): None
*******************************************************************************/
void UART_RXCompleteCallBack(void(*ptr1)(void)){
     d60:	df 93       	push	r29
     d62:	cf 93       	push	r28
     d64:	00 d0       	rcall	.+0      	; 0xd66 <UART_RXCompleteCallBack+0x6>
     d66:	cd b7       	in	r28, 0x3d	; 61
     d68:	de b7       	in	r29, 0x3e	; 62
     d6a:	9a 83       	std	Y+2, r25	; 0x02
     d6c:	89 83       	std	Y+1, r24	; 0x01
	if(ptr1!='\0'){
     d6e:	89 81       	ldd	r24, Y+1	; 0x01
     d70:	9a 81       	ldd	r25, Y+2	; 0x02
     d72:	00 97       	sbiw	r24, 0x00	; 0
     d74:	31 f0       	breq	.+12     	; 0xd82 <UART_RXCompleteCallBack+0x22>
		Uptr1=ptr1;
     d76:	89 81       	ldd	r24, Y+1	; 0x01
     d78:	9a 81       	ldd	r25, Y+2	; 0x02
     d7a:	90 93 cb 00 	sts	0x00CB, r25
     d7e:	80 93 ca 00 	sts	0x00CA, r24
	}
}
     d82:	0f 90       	pop	r0
     d84:	0f 90       	pop	r0
     d86:	cf 91       	pop	r28
     d88:	df 91       	pop	r29
     d8a:	08 95       	ret

00000d8c <UART_TXCompleteCallBack>:
*
* \Sync\Async      : Asynchronous
* \Parameters (in) : void(*ptr1)(void)
* \Parameters (out): None
*******************************************************************************/
void UART_TXCompleteCallBack(void(*ptr2)(void)){
     d8c:	df 93       	push	r29
     d8e:	cf 93       	push	r28
     d90:	00 d0       	rcall	.+0      	; 0xd92 <UART_TXCompleteCallBack+0x6>
     d92:	cd b7       	in	r28, 0x3d	; 61
     d94:	de b7       	in	r29, 0x3e	; 62
     d96:	9a 83       	std	Y+2, r25	; 0x02
     d98:	89 83       	std	Y+1, r24	; 0x01
	if(ptr2!='\0'){
     d9a:	89 81       	ldd	r24, Y+1	; 0x01
     d9c:	9a 81       	ldd	r25, Y+2	; 0x02
     d9e:	00 97       	sbiw	r24, 0x00	; 0
     da0:	31 f0       	breq	.+12     	; 0xdae <UART_TXCompleteCallBack+0x22>
		Uptr2=ptr2;
     da2:	89 81       	ldd	r24, Y+1	; 0x01
     da4:	9a 81       	ldd	r25, Y+2	; 0x02
     da6:	90 93 cd 00 	sts	0x00CD, r25
     daa:	80 93 cc 00 	sts	0x00CC, r24
	}
}
     dae:	0f 90       	pop	r0
     db0:	0f 90       	pop	r0
     db2:	cf 91       	pop	r28
     db4:	df 91       	pop	r29
     db6:	08 95       	ret

00000db8 <UAART_DataRegisterEmptyCallBack>:
*
* \Sync\Async      : Asynchronous
* \Parameters (in) : void(*ptr1)(void)
* \Parameters (out): None
*******************************************************************************/
void UAART_DataRegisterEmptyCallBack(void(*ptr3)(void)){
     db8:	df 93       	push	r29
     dba:	cf 93       	push	r28
     dbc:	00 d0       	rcall	.+0      	; 0xdbe <UAART_DataRegisterEmptyCallBack+0x6>
     dbe:	cd b7       	in	r28, 0x3d	; 61
     dc0:	de b7       	in	r29, 0x3e	; 62
     dc2:	9a 83       	std	Y+2, r25	; 0x02
     dc4:	89 83       	std	Y+1, r24	; 0x01
	if(ptr3!='\0'){
     dc6:	89 81       	ldd	r24, Y+1	; 0x01
     dc8:	9a 81       	ldd	r25, Y+2	; 0x02
     dca:	00 97       	sbiw	r24, 0x00	; 0
     dcc:	31 f0       	breq	.+12     	; 0xdda <UAART_DataRegisterEmptyCallBack+0x22>
		Uptr3=ptr3;
     dce:	89 81       	ldd	r24, Y+1	; 0x01
     dd0:	9a 81       	ldd	r25, Y+2	; 0x02
     dd2:	90 93 cf 00 	sts	0x00CF, r25
     dd6:	80 93 ce 00 	sts	0x00CE, r24
	}
}
     dda:	0f 90       	pop	r0
     ddc:	0f 90       	pop	r0
     dde:	cf 91       	pop	r28
     de0:	df 91       	pop	r29
     de2:	08 95       	ret

00000de4 <__vector_13>:
/**********************************************************************************************************************
 *  Interrupts Service Routine
 *********************************************************************************************************************/
ISR(USART_RXC_vect){
     de4:	1f 92       	push	r1
     de6:	0f 92       	push	r0
     de8:	0f b6       	in	r0, 0x3f	; 63
     dea:	0f 92       	push	r0
     dec:	11 24       	eor	r1, r1
     dee:	2f 93       	push	r18
     df0:	3f 93       	push	r19
     df2:	4f 93       	push	r20
     df4:	5f 93       	push	r21
     df6:	6f 93       	push	r22
     df8:	7f 93       	push	r23
     dfa:	8f 93       	push	r24
     dfc:	9f 93       	push	r25
     dfe:	af 93       	push	r26
     e00:	bf 93       	push	r27
     e02:	ef 93       	push	r30
     e04:	ff 93       	push	r31
     e06:	df 93       	push	r29
     e08:	cf 93       	push	r28
     e0a:	cd b7       	in	r28, 0x3d	; 61
     e0c:	de b7       	in	r29, 0x3e	; 62
	if(Uptr1!='\0'){
     e0e:	80 91 ca 00 	lds	r24, 0x00CA
     e12:	90 91 cb 00 	lds	r25, 0x00CB
     e16:	00 97       	sbiw	r24, 0x00	; 0
     e18:	29 f0       	breq	.+10     	; 0xe24 <__vector_13+0x40>
		Uptr1();
     e1a:	e0 91 ca 00 	lds	r30, 0x00CA
     e1e:	f0 91 cb 00 	lds	r31, 0x00CB
     e22:	09 95       	icall
	}
}
     e24:	cf 91       	pop	r28
     e26:	df 91       	pop	r29
     e28:	ff 91       	pop	r31
     e2a:	ef 91       	pop	r30
     e2c:	bf 91       	pop	r27
     e2e:	af 91       	pop	r26
     e30:	9f 91       	pop	r25
     e32:	8f 91       	pop	r24
     e34:	7f 91       	pop	r23
     e36:	6f 91       	pop	r22
     e38:	5f 91       	pop	r21
     e3a:	4f 91       	pop	r20
     e3c:	3f 91       	pop	r19
     e3e:	2f 91       	pop	r18
     e40:	0f 90       	pop	r0
     e42:	0f be       	out	0x3f, r0	; 63
     e44:	0f 90       	pop	r0
     e46:	1f 90       	pop	r1
     e48:	18 95       	reti

00000e4a <__vector_14>:
ISR(USART_UDRE_vect){
     e4a:	1f 92       	push	r1
     e4c:	0f 92       	push	r0
     e4e:	0f b6       	in	r0, 0x3f	; 63
     e50:	0f 92       	push	r0
     e52:	11 24       	eor	r1, r1
     e54:	2f 93       	push	r18
     e56:	3f 93       	push	r19
     e58:	4f 93       	push	r20
     e5a:	5f 93       	push	r21
     e5c:	6f 93       	push	r22
     e5e:	7f 93       	push	r23
     e60:	8f 93       	push	r24
     e62:	9f 93       	push	r25
     e64:	af 93       	push	r26
     e66:	bf 93       	push	r27
     e68:	ef 93       	push	r30
     e6a:	ff 93       	push	r31
     e6c:	df 93       	push	r29
     e6e:	cf 93       	push	r28
     e70:	cd b7       	in	r28, 0x3d	; 61
     e72:	de b7       	in	r29, 0x3e	; 62
	if(Uptr2!='\0'){
     e74:	80 91 cc 00 	lds	r24, 0x00CC
     e78:	90 91 cd 00 	lds	r25, 0x00CD
     e7c:	00 97       	sbiw	r24, 0x00	; 0
     e7e:	29 f0       	breq	.+10     	; 0xe8a <__vector_14+0x40>
		Uptr2();
     e80:	e0 91 cc 00 	lds	r30, 0x00CC
     e84:	f0 91 cd 00 	lds	r31, 0x00CD
     e88:	09 95       	icall
	}
}
     e8a:	cf 91       	pop	r28
     e8c:	df 91       	pop	r29
     e8e:	ff 91       	pop	r31
     e90:	ef 91       	pop	r30
     e92:	bf 91       	pop	r27
     e94:	af 91       	pop	r26
     e96:	9f 91       	pop	r25
     e98:	8f 91       	pop	r24
     e9a:	7f 91       	pop	r23
     e9c:	6f 91       	pop	r22
     e9e:	5f 91       	pop	r21
     ea0:	4f 91       	pop	r20
     ea2:	3f 91       	pop	r19
     ea4:	2f 91       	pop	r18
     ea6:	0f 90       	pop	r0
     ea8:	0f be       	out	0x3f, r0	; 63
     eaa:	0f 90       	pop	r0
     eac:	1f 90       	pop	r1
     eae:	18 95       	reti

00000eb0 <__vector_15>:
ISR(USART_TXC_vect){
     eb0:	1f 92       	push	r1
     eb2:	0f 92       	push	r0
     eb4:	0f b6       	in	r0, 0x3f	; 63
     eb6:	0f 92       	push	r0
     eb8:	11 24       	eor	r1, r1
     eba:	2f 93       	push	r18
     ebc:	3f 93       	push	r19
     ebe:	4f 93       	push	r20
     ec0:	5f 93       	push	r21
     ec2:	6f 93       	push	r22
     ec4:	7f 93       	push	r23
     ec6:	8f 93       	push	r24
     ec8:	9f 93       	push	r25
     eca:	af 93       	push	r26
     ecc:	bf 93       	push	r27
     ece:	ef 93       	push	r30
     ed0:	ff 93       	push	r31
     ed2:	df 93       	push	r29
     ed4:	cf 93       	push	r28
     ed6:	cd b7       	in	r28, 0x3d	; 61
     ed8:	de b7       	in	r29, 0x3e	; 62
	if(Uptr3!='\0'){
     eda:	80 91 ce 00 	lds	r24, 0x00CE
     ede:	90 91 cf 00 	lds	r25, 0x00CF
     ee2:	00 97       	sbiw	r24, 0x00	; 0
     ee4:	29 f0       	breq	.+10     	; 0xef0 <__vector_15+0x40>
		Uptr3();
     ee6:	e0 91 ce 00 	lds	r30, 0x00CE
     eea:	f0 91 cf 00 	lds	r31, 0x00CF
     eee:	09 95       	icall
	}
}
     ef0:	cf 91       	pop	r28
     ef2:	df 91       	pop	r29
     ef4:	ff 91       	pop	r31
     ef6:	ef 91       	pop	r30
     ef8:	bf 91       	pop	r27
     efa:	af 91       	pop	r26
     efc:	9f 91       	pop	r25
     efe:	8f 91       	pop	r24
     f00:	7f 91       	pop	r23
     f02:	6f 91       	pop	r22
     f04:	5f 91       	pop	r21
     f06:	4f 91       	pop	r20
     f08:	3f 91       	pop	r19
     f0a:	2f 91       	pop	r18
     f0c:	0f 90       	pop	r0
     f0e:	0f be       	out	0x3f, r0	; 63
     f10:	0f 90       	pop	r0
     f12:	1f 90       	pop	r1
     f14:	18 95       	reti

00000f16 <Timer1_vInit>:
u16 T1TimeOn;
u8 T1OnCounts;
u16 T1TimeTotal;
u8 T1TotalCounts;

void Timer1_vInit(){
     f16:	df 93       	push	r29
     f18:	cf 93       	push	r28
     f1a:	cd b7       	in	r28, 0x3d	; 61
     f1c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(DDRD,5); // Set Channel A Pin as OutPut
     f1e:	a1 e3       	ldi	r26, 0x31	; 49
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	e1 e3       	ldi	r30, 0x31	; 49
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	80 62       	ori	r24, 0x20	; 32
     f2a:	8c 93       	st	X, r24
	SET_BIT(DDRD,4); // Set Channel B Pin as OutPut
     f2c:	a1 e3       	ldi	r26, 0x31	; 49
     f2e:	b0 e0       	ldi	r27, 0x00	; 0
     f30:	e1 e3       	ldi	r30, 0x31	; 49
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	80 61       	ori	r24, 0x10	; 16
     f38:	8c 93       	st	X, r24
#if Timer1_Mode==T1OverflowMode
	TCCR1A=0b00000000;
	TCCR1B=0b00000000|Timer1Prescaler;
#elif Timer1_Mode==T1CTCMode
	TCCR1A=0b00001100;
     f3a:	ef e4       	ldi	r30, 0x4F	; 79
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	8c e0       	ldi	r24, 0x0C	; 12
     f40:	80 83       	st	Z, r24
	TCCR1B=0b00001000|Timer1Prescaler;
     f42:	ee e4       	ldi	r30, 0x4E	; 78
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	8b e0       	ldi	r24, 0x0B	; 11
     f48:	80 83       	st	Z, r24
	Timer1_vOverflowCallBack(Timer1_vOverflowCounter);
	Timer1_vIputCaptureCallBack(Timer1_vInputCaptureCal);
	CLR_BIT(DDRD,6); // Make Pin6 PortD Input
	SET_BIT(TCCR1B,6);  // Capture At rising Edge
#endif
}
     f4a:	cf 91       	pop	r28
     f4c:	df 91       	pop	r29
     f4e:	08 95       	ret

00000f50 <Timer1_vIputCaptureUnit>:
void Timer1_vIputCaptureUnit(u32* duty,u32* Frequency){
     f50:	ef 92       	push	r14
     f52:	ff 92       	push	r15
     f54:	0f 93       	push	r16
     f56:	1f 93       	push	r17
     f58:	df 93       	push	r29
     f5a:	cf 93       	push	r28
     f5c:	00 d0       	rcall	.+0      	; 0xf5e <Timer1_vIputCaptureUnit+0xe>
     f5e:	00 d0       	rcall	.+0      	; 0xf60 <Timer1_vIputCaptureUnit+0x10>
     f60:	cd b7       	in	r28, 0x3d	; 61
     f62:	de b7       	in	r29, 0x3e	; 62
     f64:	9a 83       	std	Y+2, r25	; 0x02
     f66:	89 83       	std	Y+1, r24	; 0x01
     f68:	7c 83       	std	Y+4, r23	; 0x04
     f6a:	6b 83       	std	Y+3, r22	; 0x03
	if(T1Flag==3){
     f6c:	80 91 d8 00 	lds	r24, 0x00D8
     f70:	83 30       	cpi	r24, 0x03	; 3
     f72:	09 f0       	breq	.+2      	; 0xf76 <Timer1_vIputCaptureUnit+0x26>
     f74:	6f c0       	rjmp	.+222    	; 0x1054 <Timer1_vIputCaptureUnit+0x104>
		*duty=(u32)(((T1TimeOn+(T1OnCounts*65536))*100)/(T1TimeTotal)+(T1TotalCounts*65536));
     f76:	80 91 00 01 	lds	r24, 0x0100
     f7a:	90 91 01 01 	lds	r25, 0x0101
     f7e:	9c 01       	movw	r18, r24
     f80:	40 e0       	ldi	r20, 0x00	; 0
     f82:	50 e0       	ldi	r21, 0x00	; 0
     f84:	80 91 04 01 	lds	r24, 0x0104
     f88:	88 2f       	mov	r24, r24
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	a0 e0       	ldi	r26, 0x00	; 0
     f8e:	b0 e0       	ldi	r27, 0x00	; 0
     f90:	dc 01       	movw	r26, r24
     f92:	99 27       	eor	r25, r25
     f94:	88 27       	eor	r24, r24
     f96:	82 0f       	add	r24, r18
     f98:	93 1f       	adc	r25, r19
     f9a:	a4 1f       	adc	r26, r20
     f9c:	b5 1f       	adc	r27, r21
     f9e:	24 e6       	ldi	r18, 0x64	; 100
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	40 e0       	ldi	r20, 0x00	; 0
     fa4:	50 e0       	ldi	r21, 0x00	; 0
     fa6:	bc 01       	movw	r22, r24
     fa8:	cd 01       	movw	r24, r26
     faa:	0e 94 b2 35 	call	0x6b64	; 0x6b64 <__mulsi3>
     fae:	7b 01       	movw	r14, r22
     fb0:	8c 01       	movw	r16, r24
     fb2:	80 91 02 01 	lds	r24, 0x0102
     fb6:	90 91 03 01 	lds	r25, 0x0103
     fba:	9c 01       	movw	r18, r24
     fbc:	40 e0       	ldi	r20, 0x00	; 0
     fbe:	50 e0       	ldi	r21, 0x00	; 0
     fc0:	c8 01       	movw	r24, r16
     fc2:	b7 01       	movw	r22, r14
     fc4:	0e 94 26 36 	call	0x6c4c	; 0x6c4c <__divmodsi4>
     fc8:	da 01       	movw	r26, r20
     fca:	c9 01       	movw	r24, r18
     fcc:	9c 01       	movw	r18, r24
     fce:	ad 01       	movw	r20, r26
     fd0:	80 91 ff 00 	lds	r24, 0x00FF
     fd4:	88 2f       	mov	r24, r24
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	a0 e0       	ldi	r26, 0x00	; 0
     fda:	b0 e0       	ldi	r27, 0x00	; 0
     fdc:	dc 01       	movw	r26, r24
     fde:	99 27       	eor	r25, r25
     fe0:	88 27       	eor	r24, r24
     fe2:	82 0f       	add	r24, r18
     fe4:	93 1f       	adc	r25, r19
     fe6:	a4 1f       	adc	r26, r20
     fe8:	b5 1f       	adc	r27, r21
     fea:	e9 81       	ldd	r30, Y+1	; 0x01
     fec:	fa 81       	ldd	r31, Y+2	; 0x02
     fee:	80 83       	st	Z, r24
     ff0:	91 83       	std	Z+1, r25	; 0x01
     ff2:	a2 83       	std	Z+2, r26	; 0x02
     ff4:	b3 83       	std	Z+3, r27	; 0x03
		*Frequency=(u32)(T1SystemFrequency/((T1TimeTotal+(T1TotalCounts*65536))*T1InputCalcPrescaler));
     ff6:	80 91 02 01 	lds	r24, 0x0102
     ffa:	90 91 03 01 	lds	r25, 0x0103
     ffe:	9c 01       	movw	r18, r24
    1000:	40 e0       	ldi	r20, 0x00	; 0
    1002:	50 e0       	ldi	r21, 0x00	; 0
    1004:	80 91 ff 00 	lds	r24, 0x00FF
    1008:	88 2f       	mov	r24, r24
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	a0 e0       	ldi	r26, 0x00	; 0
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	dc 01       	movw	r26, r24
    1012:	99 27       	eor	r25, r25
    1014:	88 27       	eor	r24, r24
    1016:	82 0f       	add	r24, r18
    1018:	93 1f       	adc	r25, r19
    101a:	a4 1f       	adc	r26, r20
    101c:	b5 1f       	adc	r27, r21
    101e:	9c 01       	movw	r18, r24
    1020:	ad 01       	movw	r20, r26
    1022:	01 2e       	mov	r0, r17
    1024:	1a e0       	ldi	r17, 0x0A	; 10
    1026:	22 0f       	add	r18, r18
    1028:	33 1f       	adc	r19, r19
    102a:	44 1f       	adc	r20, r20
    102c:	55 1f       	adc	r21, r21
    102e:	1a 95       	dec	r17
    1030:	d1 f7       	brne	.-12     	; 0x1026 <Timer1_vIputCaptureUnit+0xd6>
    1032:	10 2d       	mov	r17, r0
    1034:	80 e0       	ldi	r24, 0x00	; 0
    1036:	94 e2       	ldi	r25, 0x24	; 36
    1038:	a4 ef       	ldi	r26, 0xF4	; 244
    103a:	b0 e0       	ldi	r27, 0x00	; 0
    103c:	bc 01       	movw	r22, r24
    103e:	cd 01       	movw	r24, r26
    1040:	0e 94 26 36 	call	0x6c4c	; 0x6c4c <__divmodsi4>
    1044:	da 01       	movw	r26, r20
    1046:	c9 01       	movw	r24, r18
    1048:	eb 81       	ldd	r30, Y+3	; 0x03
    104a:	fc 81       	ldd	r31, Y+4	; 0x04
    104c:	80 83       	st	Z, r24
    104e:	91 83       	std	Z+1, r25	; 0x01
    1050:	a2 83       	std	Z+2, r26	; 0x02
    1052:	b3 83       	std	Z+3, r27	; 0x03
	}
}
    1054:	0f 90       	pop	r0
    1056:	0f 90       	pop	r0
    1058:	0f 90       	pop	r0
    105a:	0f 90       	pop	r0
    105c:	cf 91       	pop	r28
    105e:	df 91       	pop	r29
    1060:	1f 91       	pop	r17
    1062:	0f 91       	pop	r16
    1064:	ff 90       	pop	r15
    1066:	ef 90       	pop	r14
    1068:	08 95       	ret

0000106a <Timer1_vOverflowCounter>:
void Timer1_vOverflowCounter(){
    106a:	df 93       	push	r29
    106c:	cf 93       	push	r28
    106e:	cd b7       	in	r28, 0x3d	; 61
    1070:	de b7       	in	r29, 0x3e	; 62
	T1Counter++;
    1072:	80 91 05 01 	lds	r24, 0x0105
    1076:	8f 5f       	subi	r24, 0xFF	; 255
    1078:	80 93 05 01 	sts	0x0105, r24
}
    107c:	cf 91       	pop	r28
    107e:	df 91       	pop	r29
    1080:	08 95       	ret

00001082 <Timer1_vInputCaptureCal>:
void Timer1_vInputCaptureCal(){
    1082:	df 93       	push	r29
    1084:	cf 93       	push	r28
    1086:	cd b7       	in	r28, 0x3d	; 61
    1088:	de b7       	in	r29, 0x3e	; 62
	if(T1Flag==0){
    108a:	80 91 d8 00 	lds	r24, 0x00D8
    108e:	88 23       	and	r24, r24
    1090:	f9 f4       	brne	.+62     	; 0x10d0 <Timer1_vInputCaptureCal+0x4e>
		Timer1_vPreLoadResgister(0);
    1092:	80 e0       	ldi	r24, 0x00	; 0
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	0e 94 39 09 	call	0x1272	; 0x1272 <Timer1_vPreLoadResgister>
		T1TimeOn=0;
    109a:	10 92 01 01 	sts	0x0101, r1
    109e:	10 92 00 01 	sts	0x0100, r1
		T1OnCounts=0;
    10a2:	10 92 04 01 	sts	0x0104, r1
		T1TimeTotal=0;
    10a6:	10 92 03 01 	sts	0x0103, r1
    10aa:	10 92 02 01 	sts	0x0102, r1
		T1TotalCounts=0;
    10ae:	10 92 ff 00 	sts	0x00FF, r1
		T1Counter=0;
    10b2:	10 92 05 01 	sts	0x0105, r1
		CLR_BIT(TCCR1B,6);
    10b6:	ae e4       	ldi	r26, 0x4E	; 78
    10b8:	b0 e0       	ldi	r27, 0x00	; 0
    10ba:	ee e4       	ldi	r30, 0x4E	; 78
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	80 81       	ld	r24, Z
    10c0:	8f 7b       	andi	r24, 0xBF	; 191
    10c2:	8c 93       	st	X, r24
		T1Flag++;
    10c4:	80 91 d8 00 	lds	r24, 0x00D8
    10c8:	8f 5f       	subi	r24, 0xFF	; 255
    10ca:	80 93 d8 00 	sts	0x00D8, r24
    10ce:	2e c0       	rjmp	.+92     	; 0x112c <Timer1_vInputCaptureCal+0xaa>
	}
	else if(T1Flag==1){
    10d0:	80 91 d8 00 	lds	r24, 0x00D8
    10d4:	81 30       	cpi	r24, 0x01	; 1
    10d6:	b9 f4       	brne	.+46     	; 0x1106 <Timer1_vInputCaptureCal+0x84>
		T1TimeOn=Timer1_vReadTCNT1();
    10d8:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <Timer1_vReadTCNT1>
    10dc:	90 93 01 01 	sts	0x0101, r25
    10e0:	80 93 00 01 	sts	0x0100, r24
		T1OnCounts=T1Counter;
    10e4:	80 91 05 01 	lds	r24, 0x0105
    10e8:	80 93 04 01 	sts	0x0104, r24
		SET_BIT(TCCR1B,6);
    10ec:	ae e4       	ldi	r26, 0x4E	; 78
    10ee:	b0 e0       	ldi	r27, 0x00	; 0
    10f0:	ee e4       	ldi	r30, 0x4E	; 78
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	80 64       	ori	r24, 0x40	; 64
    10f8:	8c 93       	st	X, r24
		T1Flag++;
    10fa:	80 91 d8 00 	lds	r24, 0x00D8
    10fe:	8f 5f       	subi	r24, 0xFF	; 255
    1100:	80 93 d8 00 	sts	0x00D8, r24
    1104:	13 c0       	rjmp	.+38     	; 0x112c <Timer1_vInputCaptureCal+0xaa>
	}
	else if(T1Flag==2){
    1106:	80 91 d8 00 	lds	r24, 0x00D8
    110a:	82 30       	cpi	r24, 0x02	; 2
    110c:	79 f4       	brne	.+30     	; 0x112c <Timer1_vInputCaptureCal+0xaa>
		T1TimeTotal=Timer1_vReadTCNT1();
    110e:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <Timer1_vReadTCNT1>
    1112:	90 93 03 01 	sts	0x0103, r25
    1116:	80 93 02 01 	sts	0x0102, r24
		T1TotalCounts=T1Counter;
    111a:	80 91 05 01 	lds	r24, 0x0105
    111e:	80 93 ff 00 	sts	0x00FF, r24
		T1Flag++;
    1122:	80 91 d8 00 	lds	r24, 0x00D8
    1126:	8f 5f       	subi	r24, 0xFF	; 255
    1128:	80 93 d8 00 	sts	0x00D8, r24
	}
}
    112c:	cf 91       	pop	r28
    112e:	df 91       	pop	r29
    1130:	08 95       	ret

00001132 <Timer1_vIputCaptureInterruptEnable>:
void Timer1_vIputCaptureInterruptEnable(){
    1132:	df 93       	push	r29
    1134:	cf 93       	push	r28
    1136:	cd b7       	in	r28, 0x3d	; 61
    1138:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,5);
    113a:	a9 e5       	ldi	r26, 0x59	; 89
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	e9 e5       	ldi	r30, 0x59	; 89
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
    1144:	80 62       	ori	r24, 0x20	; 32
    1146:	8c 93       	st	X, r24
}
    1148:	cf 91       	pop	r28
    114a:	df 91       	pop	r29
    114c:	08 95       	ret

0000114e <Timer1_vCompareChannelAInterruptEnable>:
void Timer1_vCompareChannelAInterruptEnable(){
    114e:	df 93       	push	r29
    1150:	cf 93       	push	r28
    1152:	cd b7       	in	r28, 0x3d	; 61
    1154:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,4);
    1156:	a9 e5       	ldi	r26, 0x59	; 89
    1158:	b0 e0       	ldi	r27, 0x00	; 0
    115a:	e9 e5       	ldi	r30, 0x59	; 89
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 81       	ld	r24, Z
    1160:	80 61       	ori	r24, 0x10	; 16
    1162:	8c 93       	st	X, r24
}
    1164:	cf 91       	pop	r28
    1166:	df 91       	pop	r29
    1168:	08 95       	ret

0000116a <Timer1_vCompareChannelBInterruptEnable>:
void Timer1_vCompareChannelBInterruptEnable(){
    116a:	df 93       	push	r29
    116c:	cf 93       	push	r28
    116e:	cd b7       	in	r28, 0x3d	; 61
    1170:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,3);
    1172:	a9 e5       	ldi	r26, 0x59	; 89
    1174:	b0 e0       	ldi	r27, 0x00	; 0
    1176:	e9 e5       	ldi	r30, 0x59	; 89
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 81       	ld	r24, Z
    117c:	88 60       	ori	r24, 0x08	; 8
    117e:	8c 93       	st	X, r24
}
    1180:	cf 91       	pop	r28
    1182:	df 91       	pop	r29
    1184:	08 95       	ret

00001186 <Timer1_vOverflowInterruptEnable>:
void Timer1_vOverflowInterruptEnable(){
    1186:	df 93       	push	r29
    1188:	cf 93       	push	r28
    118a:	cd b7       	in	r28, 0x3d	; 61
    118c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,2);
    118e:	a9 e5       	ldi	r26, 0x59	; 89
    1190:	b0 e0       	ldi	r27, 0x00	; 0
    1192:	e9 e5       	ldi	r30, 0x59	; 89
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	84 60       	ori	r24, 0x04	; 4
    119a:	8c 93       	st	X, r24
}
    119c:	cf 91       	pop	r28
    119e:	df 91       	pop	r29
    11a0:	08 95       	ret

000011a2 <Timer1_vReadCompareChannelAFlag>:
u8 Timer1_vReadCompareChannelAFlag(){
    11a2:	df 93       	push	r29
    11a4:	cf 93       	push	r28
    11a6:	cd b7       	in	r28, 0x3d	; 61
    11a8:	de b7       	in	r29, 0x3e	; 62
	return GET_BIT(TIFR,4);
    11aa:	e8 e5       	ldi	r30, 0x58	; 88
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	82 95       	swap	r24
    11b2:	8f 70       	andi	r24, 0x0F	; 15
    11b4:	81 70       	andi	r24, 0x01	; 1
}
    11b6:	cf 91       	pop	r28
    11b8:	df 91       	pop	r29
    11ba:	08 95       	ret

000011bc <Timer1_vReadCompareChannelBFlag>:
u8 Timer1_vReadCompareChannelBFlag(){
    11bc:	df 93       	push	r29
    11be:	cf 93       	push	r28
    11c0:	cd b7       	in	r28, 0x3d	; 61
    11c2:	de b7       	in	r29, 0x3e	; 62
	return GET_BIT(TIFR,3);
    11c4:	e8 e5       	ldi	r30, 0x58	; 88
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	80 81       	ld	r24, Z
    11ca:	86 95       	lsr	r24
    11cc:	86 95       	lsr	r24
    11ce:	86 95       	lsr	r24
    11d0:	81 70       	andi	r24, 0x01	; 1
}
    11d2:	cf 91       	pop	r28
    11d4:	df 91       	pop	r29
    11d6:	08 95       	ret

000011d8 <Timer1_vReadOverflowFlag>:
u8 Timer1_vReadOverflowFlag(){
    11d8:	df 93       	push	r29
    11da:	cf 93       	push	r28
    11dc:	cd b7       	in	r28, 0x3d	; 61
    11de:	de b7       	in	r29, 0x3e	; 62
	return GET_BIT(TIFR,2);
    11e0:	e8 e5       	ldi	r30, 0x58	; 88
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	80 81       	ld	r24, Z
    11e6:	86 95       	lsr	r24
    11e8:	86 95       	lsr	r24
    11ea:	81 70       	andi	r24, 0x01	; 1
}
    11ec:	cf 91       	pop	r28
    11ee:	df 91       	pop	r29
    11f0:	08 95       	ret

000011f2 <Timer1_vReadTCNT1>:
u16 Timer1_vReadTCNT1(){
    11f2:	df 93       	push	r29
    11f4:	cf 93       	push	r28
    11f6:	00 d0       	rcall	.+0      	; 0x11f8 <Timer1_vReadTCNT1+0x6>
    11f8:	cd b7       	in	r28, 0x3d	; 61
    11fa:	de b7       	in	r29, 0x3e	; 62
	u16 Read;
	Read=(((u16)TCNT1H)<<8);
    11fc:	ed e4       	ldi	r30, 0x4D	; 77
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	80 81       	ld	r24, Z
    1202:	88 2f       	mov	r24, r24
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	98 2f       	mov	r25, r24
    1208:	88 27       	eor	r24, r24
    120a:	9a 83       	std	Y+2, r25	; 0x02
    120c:	89 83       	std	Y+1, r24	; 0x01
	Read=Read|((u16)TCNT1L);
    120e:	ec e4       	ldi	r30, 0x4C	; 76
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	28 2f       	mov	r18, r24
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	89 81       	ldd	r24, Y+1	; 0x01
    121a:	9a 81       	ldd	r25, Y+2	; 0x02
    121c:	82 2b       	or	r24, r18
    121e:	93 2b       	or	r25, r19
    1220:	9a 83       	std	Y+2, r25	; 0x02
    1222:	89 83       	std	Y+1, r24	; 0x01
	return Read;
    1224:	89 81       	ldd	r24, Y+1	; 0x01
    1226:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1228:	0f 90       	pop	r0
    122a:	0f 90       	pop	r0
    122c:	cf 91       	pop	r28
    122e:	df 91       	pop	r29
    1230:	08 95       	ret

00001232 <Timer1_vReadInputCaptureRegister>:
u16 Timer1_vReadInputCaptureRegister(){
    1232:	df 93       	push	r29
    1234:	cf 93       	push	r28
    1236:	00 d0       	rcall	.+0      	; 0x1238 <Timer1_vReadInputCaptureRegister+0x6>
    1238:	cd b7       	in	r28, 0x3d	; 61
    123a:	de b7       	in	r29, 0x3e	; 62
	u16 Read;
	Read=(((u16)ICR1H)<<8);
    123c:	e7 e4       	ldi	r30, 0x47	; 71
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	80 81       	ld	r24, Z
    1242:	88 2f       	mov	r24, r24
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	98 2f       	mov	r25, r24
    1248:	88 27       	eor	r24, r24
    124a:	9a 83       	std	Y+2, r25	; 0x02
    124c:	89 83       	std	Y+1, r24	; 0x01
	Read=Read|((u16)ICR1L);
    124e:	e6 e4       	ldi	r30, 0x46	; 70
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	80 81       	ld	r24, Z
    1254:	28 2f       	mov	r18, r24
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	89 81       	ldd	r24, Y+1	; 0x01
    125a:	9a 81       	ldd	r25, Y+2	; 0x02
    125c:	82 2b       	or	r24, r18
    125e:	93 2b       	or	r25, r19
    1260:	9a 83       	std	Y+2, r25	; 0x02
    1262:	89 83       	std	Y+1, r24	; 0x01
	return Read;
    1264:	89 81       	ldd	r24, Y+1	; 0x01
    1266:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1268:	0f 90       	pop	r0
    126a:	0f 90       	pop	r0
    126c:	cf 91       	pop	r28
    126e:	df 91       	pop	r29
    1270:	08 95       	ret

00001272 <Timer1_vPreLoadResgister>:

void Timer1_vPreLoadResgister(u16 Loc_val){
    1272:	df 93       	push	r29
    1274:	cf 93       	push	r28
    1276:	00 d0       	rcall	.+0      	; 0x1278 <Timer1_vPreLoadResgister+0x6>
    1278:	cd b7       	in	r28, 0x3d	; 61
    127a:	de b7       	in	r29, 0x3e	; 62
    127c:	9a 83       	std	Y+2, r25	; 0x02
    127e:	89 83       	std	Y+1, r24	; 0x01
	TCNT1H=(Loc_val>>8);
    1280:	ed e4       	ldi	r30, 0x4D	; 77
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	89 81       	ldd	r24, Y+1	; 0x01
    1286:	9a 81       	ldd	r25, Y+2	; 0x02
    1288:	89 2f       	mov	r24, r25
    128a:	99 27       	eor	r25, r25
    128c:	80 83       	st	Z, r24
	TCNT1L=Loc_val;
    128e:	ec e4       	ldi	r30, 0x4C	; 76
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	89 81       	ldd	r24, Y+1	; 0x01
    1294:	80 83       	st	Z, r24
}
    1296:	0f 90       	pop	r0
    1298:	0f 90       	pop	r0
    129a:	cf 91       	pop	r28
    129c:	df 91       	pop	r29
    129e:	08 95       	ret

000012a0 <Timer1_vWriteICR1>:
void Timer1_vWriteICR1(u16 Loc_val){
    12a0:	df 93       	push	r29
    12a2:	cf 93       	push	r28
    12a4:	00 d0       	rcall	.+0      	; 0x12a6 <Timer1_vWriteICR1+0x6>
    12a6:	cd b7       	in	r28, 0x3d	; 61
    12a8:	de b7       	in	r29, 0x3e	; 62
    12aa:	9a 83       	std	Y+2, r25	; 0x02
    12ac:	89 83       	std	Y+1, r24	; 0x01
	ICR1H=(Loc_val>>8);
    12ae:	e7 e4       	ldi	r30, 0x47	; 71
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	89 81       	ldd	r24, Y+1	; 0x01
    12b4:	9a 81       	ldd	r25, Y+2	; 0x02
    12b6:	89 2f       	mov	r24, r25
    12b8:	99 27       	eor	r25, r25
    12ba:	80 83       	st	Z, r24
	ICR1L=Loc_val;
    12bc:	e6 e4       	ldi	r30, 0x46	; 70
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	89 81       	ldd	r24, Y+1	; 0x01
    12c2:	80 83       	st	Z, r24
}
    12c4:	0f 90       	pop	r0
    12c6:	0f 90       	pop	r0
    12c8:	cf 91       	pop	r28
    12ca:	df 91       	pop	r29
    12cc:	08 95       	ret

000012ce <Timer1_vChannelACopmareRegister>:
void Timer1_vChannelACopmareRegister(u16 Loc_val){
    12ce:	df 93       	push	r29
    12d0:	cf 93       	push	r28
    12d2:	00 d0       	rcall	.+0      	; 0x12d4 <Timer1_vChannelACopmareRegister+0x6>
    12d4:	cd b7       	in	r28, 0x3d	; 61
    12d6:	de b7       	in	r29, 0x3e	; 62
    12d8:	9a 83       	std	Y+2, r25	; 0x02
    12da:	89 83       	std	Y+1, r24	; 0x01
	OCR1AH=(Loc_val>>8);
    12dc:	eb e4       	ldi	r30, 0x4B	; 75
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	89 81       	ldd	r24, Y+1	; 0x01
    12e2:	9a 81       	ldd	r25, Y+2	; 0x02
    12e4:	89 2f       	mov	r24, r25
    12e6:	99 27       	eor	r25, r25
    12e8:	80 83       	st	Z, r24
	OCR1AL=Loc_val;
    12ea:	ea e4       	ldi	r30, 0x4A	; 74
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	89 81       	ldd	r24, Y+1	; 0x01
    12f0:	80 83       	st	Z, r24
}
    12f2:	0f 90       	pop	r0
    12f4:	0f 90       	pop	r0
    12f6:	cf 91       	pop	r28
    12f8:	df 91       	pop	r29
    12fa:	08 95       	ret

000012fc <Timer1_vChannelBCopmareRegister>:
void Timer1_vChannelBCopmareRegister(u16 Loc_val){
    12fc:	df 93       	push	r29
    12fe:	cf 93       	push	r28
    1300:	00 d0       	rcall	.+0      	; 0x1302 <Timer1_vChannelBCopmareRegister+0x6>
    1302:	cd b7       	in	r28, 0x3d	; 61
    1304:	de b7       	in	r29, 0x3e	; 62
    1306:	9a 83       	std	Y+2, r25	; 0x02
    1308:	89 83       	std	Y+1, r24	; 0x01
	OCR1BH=(Loc_val>>8);
    130a:	e9 e4       	ldi	r30, 0x49	; 73
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	89 81       	ldd	r24, Y+1	; 0x01
    1310:	9a 81       	ldd	r25, Y+2	; 0x02
    1312:	89 2f       	mov	r24, r25
    1314:	99 27       	eor	r25, r25
    1316:	80 83       	st	Z, r24
	OCR1BL=Loc_val;
    1318:	e8 e4       	ldi	r30, 0x48	; 72
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	89 81       	ldd	r24, Y+1	; 0x01
    131e:	80 83       	st	Z, r24
}
    1320:	0f 90       	pop	r0
    1322:	0f 90       	pop	r0
    1324:	cf 91       	pop	r28
    1326:	df 91       	pop	r29
    1328:	08 95       	ret

0000132a <Timer1_vOverflowCallBack>:
void Timer1_vOverflowCallBack(void(*ptr1)(void)){
    132a:	df 93       	push	r29
    132c:	cf 93       	push	r28
    132e:	00 d0       	rcall	.+0      	; 0x1330 <Timer1_vOverflowCallBack+0x6>
    1330:	cd b7       	in	r28, 0x3d	; 61
    1332:	de b7       	in	r29, 0x3e	; 62
    1334:	9a 83       	std	Y+2, r25	; 0x02
    1336:	89 83       	std	Y+1, r24	; 0x01
	if(ptr1!='\0'){
    1338:	89 81       	ldd	r24, Y+1	; 0x01
    133a:	9a 81       	ldd	r25, Y+2	; 0x02
    133c:	00 97       	sbiw	r24, 0x00	; 0
    133e:	31 f0       	breq	.+12     	; 0x134c <Timer1_vOverflowCallBack+0x22>
		T1Ptr1=ptr1;
    1340:	89 81       	ldd	r24, Y+1	; 0x01
    1342:	9a 81       	ldd	r25, Y+2	; 0x02
    1344:	90 93 d1 00 	sts	0x00D1, r25
    1348:	80 93 d0 00 	sts	0x00D0, r24
	}
}
    134c:	0f 90       	pop	r0
    134e:	0f 90       	pop	r0
    1350:	cf 91       	pop	r28
    1352:	df 91       	pop	r29
    1354:	08 95       	ret

00001356 <Timer1_vChannelACompareCallBack>:
void Timer1_vChannelACompareCallBack(void(*ptr2)(void)){
    1356:	df 93       	push	r29
    1358:	cf 93       	push	r28
    135a:	00 d0       	rcall	.+0      	; 0x135c <Timer1_vChannelACompareCallBack+0x6>
    135c:	cd b7       	in	r28, 0x3d	; 61
    135e:	de b7       	in	r29, 0x3e	; 62
    1360:	9a 83       	std	Y+2, r25	; 0x02
    1362:	89 83       	std	Y+1, r24	; 0x01
	if(ptr2!='\0'){
    1364:	89 81       	ldd	r24, Y+1	; 0x01
    1366:	9a 81       	ldd	r25, Y+2	; 0x02
    1368:	00 97       	sbiw	r24, 0x00	; 0
    136a:	31 f0       	breq	.+12     	; 0x1378 <Timer1_vChannelACompareCallBack+0x22>
		T1Ptr2=ptr2;
    136c:	89 81       	ldd	r24, Y+1	; 0x01
    136e:	9a 81       	ldd	r25, Y+2	; 0x02
    1370:	90 93 d3 00 	sts	0x00D3, r25
    1374:	80 93 d2 00 	sts	0x00D2, r24
	}
}
    1378:	0f 90       	pop	r0
    137a:	0f 90       	pop	r0
    137c:	cf 91       	pop	r28
    137e:	df 91       	pop	r29
    1380:	08 95       	ret

00001382 <Timer1_vChannelBCompareCallBack>:
void Timer1_vChannelBCompareCallBack(void(*ptr3)(void)){
    1382:	df 93       	push	r29
    1384:	cf 93       	push	r28
    1386:	00 d0       	rcall	.+0      	; 0x1388 <Timer1_vChannelBCompareCallBack+0x6>
    1388:	cd b7       	in	r28, 0x3d	; 61
    138a:	de b7       	in	r29, 0x3e	; 62
    138c:	9a 83       	std	Y+2, r25	; 0x02
    138e:	89 83       	std	Y+1, r24	; 0x01
	if(ptr3!='\0'){
    1390:	89 81       	ldd	r24, Y+1	; 0x01
    1392:	9a 81       	ldd	r25, Y+2	; 0x02
    1394:	00 97       	sbiw	r24, 0x00	; 0
    1396:	31 f0       	breq	.+12     	; 0x13a4 <Timer1_vChannelBCompareCallBack+0x22>
		T1Ptr3=ptr3;
    1398:	89 81       	ldd	r24, Y+1	; 0x01
    139a:	9a 81       	ldd	r25, Y+2	; 0x02
    139c:	90 93 d5 00 	sts	0x00D5, r25
    13a0:	80 93 d4 00 	sts	0x00D4, r24
	}
}
    13a4:	0f 90       	pop	r0
    13a6:	0f 90       	pop	r0
    13a8:	cf 91       	pop	r28
    13aa:	df 91       	pop	r29
    13ac:	08 95       	ret

000013ae <Timer1_vIputCaptureCallBack>:
void Timer1_vIputCaptureCallBack(void(*ptr4)(void)){
    13ae:	df 93       	push	r29
    13b0:	cf 93       	push	r28
    13b2:	00 d0       	rcall	.+0      	; 0x13b4 <Timer1_vIputCaptureCallBack+0x6>
    13b4:	cd b7       	in	r28, 0x3d	; 61
    13b6:	de b7       	in	r29, 0x3e	; 62
    13b8:	9a 83       	std	Y+2, r25	; 0x02
    13ba:	89 83       	std	Y+1, r24	; 0x01
	if(ptr4!='\0'){
    13bc:	89 81       	ldd	r24, Y+1	; 0x01
    13be:	9a 81       	ldd	r25, Y+2	; 0x02
    13c0:	00 97       	sbiw	r24, 0x00	; 0
    13c2:	31 f0       	breq	.+12     	; 0x13d0 <Timer1_vIputCaptureCallBack+0x22>
		T1Ptr4=ptr4;
    13c4:	89 81       	ldd	r24, Y+1	; 0x01
    13c6:	9a 81       	ldd	r25, Y+2	; 0x02
    13c8:	90 93 d7 00 	sts	0x00D7, r25
    13cc:	80 93 d6 00 	sts	0x00D6, r24
	}
}
    13d0:	0f 90       	pop	r0
    13d2:	0f 90       	pop	r0
    13d4:	cf 91       	pop	r28
    13d6:	df 91       	pop	r29
    13d8:	08 95       	ret

000013da <__vector_7>:
ISR(TIMER1_COMPA_vect){
    13da:	1f 92       	push	r1
    13dc:	0f 92       	push	r0
    13de:	0f b6       	in	r0, 0x3f	; 63
    13e0:	0f 92       	push	r0
    13e2:	11 24       	eor	r1, r1
    13e4:	2f 93       	push	r18
    13e6:	3f 93       	push	r19
    13e8:	4f 93       	push	r20
    13ea:	5f 93       	push	r21
    13ec:	6f 93       	push	r22
    13ee:	7f 93       	push	r23
    13f0:	8f 93       	push	r24
    13f2:	9f 93       	push	r25
    13f4:	af 93       	push	r26
    13f6:	bf 93       	push	r27
    13f8:	ef 93       	push	r30
    13fa:	ff 93       	push	r31
    13fc:	df 93       	push	r29
    13fe:	cf 93       	push	r28
    1400:	cd b7       	in	r28, 0x3d	; 61
    1402:	de b7       	in	r29, 0x3e	; 62
	if(T1Ptr2!='\0'){
    1404:	80 91 d2 00 	lds	r24, 0x00D2
    1408:	90 91 d3 00 	lds	r25, 0x00D3
    140c:	00 97       	sbiw	r24, 0x00	; 0
    140e:	29 f0       	breq	.+10     	; 0x141a <__vector_7+0x40>
		T1Ptr2();
    1410:	e0 91 d2 00 	lds	r30, 0x00D2
    1414:	f0 91 d3 00 	lds	r31, 0x00D3
    1418:	09 95       	icall
	}
}
    141a:	cf 91       	pop	r28
    141c:	df 91       	pop	r29
    141e:	ff 91       	pop	r31
    1420:	ef 91       	pop	r30
    1422:	bf 91       	pop	r27
    1424:	af 91       	pop	r26
    1426:	9f 91       	pop	r25
    1428:	8f 91       	pop	r24
    142a:	7f 91       	pop	r23
    142c:	6f 91       	pop	r22
    142e:	5f 91       	pop	r21
    1430:	4f 91       	pop	r20
    1432:	3f 91       	pop	r19
    1434:	2f 91       	pop	r18
    1436:	0f 90       	pop	r0
    1438:	0f be       	out	0x3f, r0	; 63
    143a:	0f 90       	pop	r0
    143c:	1f 90       	pop	r1
    143e:	18 95       	reti

00001440 <__vector_8>:
ISR(TIMER1_COMPB_vect){
    1440:	1f 92       	push	r1
    1442:	0f 92       	push	r0
    1444:	0f b6       	in	r0, 0x3f	; 63
    1446:	0f 92       	push	r0
    1448:	11 24       	eor	r1, r1
    144a:	2f 93       	push	r18
    144c:	3f 93       	push	r19
    144e:	4f 93       	push	r20
    1450:	5f 93       	push	r21
    1452:	6f 93       	push	r22
    1454:	7f 93       	push	r23
    1456:	8f 93       	push	r24
    1458:	9f 93       	push	r25
    145a:	af 93       	push	r26
    145c:	bf 93       	push	r27
    145e:	ef 93       	push	r30
    1460:	ff 93       	push	r31
    1462:	df 93       	push	r29
    1464:	cf 93       	push	r28
    1466:	cd b7       	in	r28, 0x3d	; 61
    1468:	de b7       	in	r29, 0x3e	; 62
	if(T1Ptr3!='\0'){
    146a:	80 91 d4 00 	lds	r24, 0x00D4
    146e:	90 91 d5 00 	lds	r25, 0x00D5
    1472:	00 97       	sbiw	r24, 0x00	; 0
    1474:	29 f0       	breq	.+10     	; 0x1480 <__vector_8+0x40>
		T1Ptr3();
    1476:	e0 91 d4 00 	lds	r30, 0x00D4
    147a:	f0 91 d5 00 	lds	r31, 0x00D5
    147e:	09 95       	icall
	}
}
    1480:	cf 91       	pop	r28
    1482:	df 91       	pop	r29
    1484:	ff 91       	pop	r31
    1486:	ef 91       	pop	r30
    1488:	bf 91       	pop	r27
    148a:	af 91       	pop	r26
    148c:	9f 91       	pop	r25
    148e:	8f 91       	pop	r24
    1490:	7f 91       	pop	r23
    1492:	6f 91       	pop	r22
    1494:	5f 91       	pop	r21
    1496:	4f 91       	pop	r20
    1498:	3f 91       	pop	r19
    149a:	2f 91       	pop	r18
    149c:	0f 90       	pop	r0
    149e:	0f be       	out	0x3f, r0	; 63
    14a0:	0f 90       	pop	r0
    14a2:	1f 90       	pop	r1
    14a4:	18 95       	reti

000014a6 <__vector_9>:
ISR(TIMER1_OVF_vect){
    14a6:	1f 92       	push	r1
    14a8:	0f 92       	push	r0
    14aa:	0f b6       	in	r0, 0x3f	; 63
    14ac:	0f 92       	push	r0
    14ae:	11 24       	eor	r1, r1
    14b0:	2f 93       	push	r18
    14b2:	3f 93       	push	r19
    14b4:	4f 93       	push	r20
    14b6:	5f 93       	push	r21
    14b8:	6f 93       	push	r22
    14ba:	7f 93       	push	r23
    14bc:	8f 93       	push	r24
    14be:	9f 93       	push	r25
    14c0:	af 93       	push	r26
    14c2:	bf 93       	push	r27
    14c4:	ef 93       	push	r30
    14c6:	ff 93       	push	r31
    14c8:	df 93       	push	r29
    14ca:	cf 93       	push	r28
    14cc:	cd b7       	in	r28, 0x3d	; 61
    14ce:	de b7       	in	r29, 0x3e	; 62
	if(T1Ptr1!='\0'){
    14d0:	80 91 d0 00 	lds	r24, 0x00D0
    14d4:	90 91 d1 00 	lds	r25, 0x00D1
    14d8:	00 97       	sbiw	r24, 0x00	; 0
    14da:	29 f0       	breq	.+10     	; 0x14e6 <__vector_9+0x40>
		T1Ptr1();
    14dc:	e0 91 d0 00 	lds	r30, 0x00D0
    14e0:	f0 91 d1 00 	lds	r31, 0x00D1
    14e4:	09 95       	icall
	}
}
    14e6:	cf 91       	pop	r28
    14e8:	df 91       	pop	r29
    14ea:	ff 91       	pop	r31
    14ec:	ef 91       	pop	r30
    14ee:	bf 91       	pop	r27
    14f0:	af 91       	pop	r26
    14f2:	9f 91       	pop	r25
    14f4:	8f 91       	pop	r24
    14f6:	7f 91       	pop	r23
    14f8:	6f 91       	pop	r22
    14fa:	5f 91       	pop	r21
    14fc:	4f 91       	pop	r20
    14fe:	3f 91       	pop	r19
    1500:	2f 91       	pop	r18
    1502:	0f 90       	pop	r0
    1504:	0f be       	out	0x3f, r0	; 63
    1506:	0f 90       	pop	r0
    1508:	1f 90       	pop	r1
    150a:	18 95       	reti

0000150c <__vector_6>:
ISR(TIMER1_CAPT_vect){
    150c:	1f 92       	push	r1
    150e:	0f 92       	push	r0
    1510:	0f b6       	in	r0, 0x3f	; 63
    1512:	0f 92       	push	r0
    1514:	11 24       	eor	r1, r1
    1516:	2f 93       	push	r18
    1518:	3f 93       	push	r19
    151a:	4f 93       	push	r20
    151c:	5f 93       	push	r21
    151e:	6f 93       	push	r22
    1520:	7f 93       	push	r23
    1522:	8f 93       	push	r24
    1524:	9f 93       	push	r25
    1526:	af 93       	push	r26
    1528:	bf 93       	push	r27
    152a:	ef 93       	push	r30
    152c:	ff 93       	push	r31
    152e:	df 93       	push	r29
    1530:	cf 93       	push	r28
    1532:	cd b7       	in	r28, 0x3d	; 61
    1534:	de b7       	in	r29, 0x3e	; 62
	if(T1Ptr4!='\0'){
    1536:	80 91 d6 00 	lds	r24, 0x00D6
    153a:	90 91 d7 00 	lds	r25, 0x00D7
    153e:	00 97       	sbiw	r24, 0x00	; 0
    1540:	29 f0       	breq	.+10     	; 0x154c <__vector_6+0x40>
		T1Ptr4();
    1542:	e0 91 d6 00 	lds	r30, 0x00D6
    1546:	f0 91 d7 00 	lds	r31, 0x00D7
    154a:	09 95       	icall
	}
}
    154c:	cf 91       	pop	r28
    154e:	df 91       	pop	r29
    1550:	ff 91       	pop	r31
    1552:	ef 91       	pop	r30
    1554:	bf 91       	pop	r27
    1556:	af 91       	pop	r26
    1558:	9f 91       	pop	r25
    155a:	8f 91       	pop	r24
    155c:	7f 91       	pop	r23
    155e:	6f 91       	pop	r22
    1560:	5f 91       	pop	r21
    1562:	4f 91       	pop	r20
    1564:	3f 91       	pop	r19
    1566:	2f 91       	pop	r18
    1568:	0f 90       	pop	r0
    156a:	0f be       	out	0x3f, r0	; 63
    156c:	0f 90       	pop	r0
    156e:	1f 90       	pop	r1
    1570:	18 95       	reti

00001572 <Timer0_vInit>:
 *      Author: a7med
 */
#include "Timer0.h"
void(*Tptr1)(void)='\0';
void(*Tptr2)(void)='\0';
void Timer0_vInit(){
    1572:	df 93       	push	r29
    1574:	cf 93       	push	r28
    1576:	cd b7       	in	r28, 0x3d	; 61
    1578:	de b7       	in	r29, 0x3e	; 62
#if Timer0_Mode==T0NormalMode
	TCCR0= 0x00|Timer0Prescaler;

#elif Timer0_Mode==T0CTCMode
	TCCR0=0x08|Timer0Prescaler;
    157a:	e3 e5       	ldi	r30, 0x53	; 83
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	8d e0       	ldi	r24, 0x0D	; 13
    1580:	80 83       	st	Z, r24
#elif Timer0_Mode==T0PWMFastMode
	TCCR0= 0x44|Timer0Prescaler;
#elif Timer0_Mode==T0PWMPhaseCorrectMode
	TCCR0= 0x40|Timer0Prescaler;
#endif
}
    1582:	cf 91       	pop	r28
    1584:	df 91       	pop	r29
    1586:	08 95       	ret

00001588 <Timer0_vEnableCompareInterrupt>:
void Timer0_vEnableCompareInterrupt(){
    1588:	df 93       	push	r29
    158a:	cf 93       	push	r28
    158c:	cd b7       	in	r28, 0x3d	; 61
    158e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,1);
    1590:	a9 e5       	ldi	r26, 0x59	; 89
    1592:	b0 e0       	ldi	r27, 0x00	; 0
    1594:	e9 e5       	ldi	r30, 0x59	; 89
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	80 81       	ld	r24, Z
    159a:	82 60       	ori	r24, 0x02	; 2
    159c:	8c 93       	st	X, r24
}
    159e:	cf 91       	pop	r28
    15a0:	df 91       	pop	r29
    15a2:	08 95       	ret

000015a4 <Timer0_vEnableOverflowInterrupt>:
void Timer0_vEnableOverflowInterrupt(){
    15a4:	df 93       	push	r29
    15a6:	cf 93       	push	r28
    15a8:	cd b7       	in	r28, 0x3d	; 61
    15aa:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,0);
    15ac:	a9 e5       	ldi	r26, 0x59	; 89
    15ae:	b0 e0       	ldi	r27, 0x00	; 0
    15b0:	e9 e5       	ldi	r30, 0x59	; 89
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	80 81       	ld	r24, Z
    15b6:	81 60       	ori	r24, 0x01	; 1
    15b8:	8c 93       	st	X, r24
}
    15ba:	cf 91       	pop	r28
    15bc:	df 91       	pop	r29
    15be:	08 95       	ret

000015c0 <Timer0_u8ReadCompareFlag>:
u8 Timer0_u8ReadCompareFlag(){
    15c0:	df 93       	push	r29
    15c2:	cf 93       	push	r28
    15c4:	cd b7       	in	r28, 0x3d	; 61
    15c6:	de b7       	in	r29, 0x3e	; 62
	return GET_BIT(TIFR,1);
    15c8:	e8 e5       	ldi	r30, 0x58	; 88
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	80 81       	ld	r24, Z
    15ce:	86 95       	lsr	r24
    15d0:	81 70       	andi	r24, 0x01	; 1
}
    15d2:	cf 91       	pop	r28
    15d4:	df 91       	pop	r29
    15d6:	08 95       	ret

000015d8 <Timer0_u8ReadOverflowFlag>:
u8 Timer0_u8ReadOverflowFlag(){
    15d8:	df 93       	push	r29
    15da:	cf 93       	push	r28
    15dc:	cd b7       	in	r28, 0x3d	; 61
    15de:	de b7       	in	r29, 0x3e	; 62
	return GET_BIT(TIFR,0);
    15e0:	e8 e5       	ldi	r30, 0x58	; 88
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	80 81       	ld	r24, Z
    15e6:	81 70       	andi	r24, 0x01	; 1
}
    15e8:	cf 91       	pop	r28
    15ea:	df 91       	pop	r29
    15ec:	08 95       	ret

000015ee <Timer0_vCounterRegister>:
void Timer0_vCounterRegister(u8 Loc_u8CounterVal){
    15ee:	df 93       	push	r29
    15f0:	cf 93       	push	r28
    15f2:	0f 92       	push	r0
    15f4:	cd b7       	in	r28, 0x3d	; 61
    15f6:	de b7       	in	r29, 0x3e	; 62
    15f8:	89 83       	std	Y+1, r24	; 0x01
	TCNT0= Loc_u8CounterVal;
    15fa:	e2 e5       	ldi	r30, 0x52	; 82
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	89 81       	ldd	r24, Y+1	; 0x01
    1600:	80 83       	st	Z, r24
}
    1602:	0f 90       	pop	r0
    1604:	cf 91       	pop	r28
    1606:	df 91       	pop	r29
    1608:	08 95       	ret

0000160a <Timer0_vCompareRegister>:
void Timer0_vCompareRegister(u8 Loc_u8CompareVal){
    160a:	df 93       	push	r29
    160c:	cf 93       	push	r28
    160e:	0f 92       	push	r0
    1610:	cd b7       	in	r28, 0x3d	; 61
    1612:	de b7       	in	r29, 0x3e	; 62
    1614:	89 83       	std	Y+1, r24	; 0x01
	OCR0=Loc_u8CompareVal;
    1616:	ec e5       	ldi	r30, 0x5C	; 92
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	89 81       	ldd	r24, Y+1	; 0x01
    161c:	80 83       	st	Z, r24
}
    161e:	0f 90       	pop	r0
    1620:	cf 91       	pop	r28
    1622:	df 91       	pop	r29
    1624:	08 95       	ret

00001626 <Timer0_vCompareCallBack>:
void Timer0_vCompareCallBack(void(*ptr)(void)){
    1626:	df 93       	push	r29
    1628:	cf 93       	push	r28
    162a:	00 d0       	rcall	.+0      	; 0x162c <Timer0_vCompareCallBack+0x6>
    162c:	cd b7       	in	r28, 0x3d	; 61
    162e:	de b7       	in	r29, 0x3e	; 62
    1630:	9a 83       	std	Y+2, r25	; 0x02
    1632:	89 83       	std	Y+1, r24	; 0x01
	if(ptr!='\0'){
    1634:	89 81       	ldd	r24, Y+1	; 0x01
    1636:	9a 81       	ldd	r25, Y+2	; 0x02
    1638:	00 97       	sbiw	r24, 0x00	; 0
    163a:	31 f0       	breq	.+12     	; 0x1648 <Timer0_vCompareCallBack+0x22>
		Tptr1=ptr;
    163c:	89 81       	ldd	r24, Y+1	; 0x01
    163e:	9a 81       	ldd	r25, Y+2	; 0x02
    1640:	90 93 da 00 	sts	0x00DA, r25
    1644:	80 93 d9 00 	sts	0x00D9, r24
	}
}
    1648:	0f 90       	pop	r0
    164a:	0f 90       	pop	r0
    164c:	cf 91       	pop	r28
    164e:	df 91       	pop	r29
    1650:	08 95       	ret

00001652 <Timer0_vOverflowCallBack>:
void Timer0_vOverflowCallBack(void(*ptr)(void)){
    1652:	df 93       	push	r29
    1654:	cf 93       	push	r28
    1656:	00 d0       	rcall	.+0      	; 0x1658 <Timer0_vOverflowCallBack+0x6>
    1658:	cd b7       	in	r28, 0x3d	; 61
    165a:	de b7       	in	r29, 0x3e	; 62
    165c:	9a 83       	std	Y+2, r25	; 0x02
    165e:	89 83       	std	Y+1, r24	; 0x01
	if(ptr!='\0'){
    1660:	89 81       	ldd	r24, Y+1	; 0x01
    1662:	9a 81       	ldd	r25, Y+2	; 0x02
    1664:	00 97       	sbiw	r24, 0x00	; 0
    1666:	31 f0       	breq	.+12     	; 0x1674 <Timer0_vOverflowCallBack+0x22>
		Tptr2=ptr;
    1668:	89 81       	ldd	r24, Y+1	; 0x01
    166a:	9a 81       	ldd	r25, Y+2	; 0x02
    166c:	90 93 dc 00 	sts	0x00DC, r25
    1670:	80 93 db 00 	sts	0x00DB, r24
	}
}
    1674:	0f 90       	pop	r0
    1676:	0f 90       	pop	r0
    1678:	cf 91       	pop	r28
    167a:	df 91       	pop	r29
    167c:	08 95       	ret

0000167e <__vector_10>:
ISR(TIMER0_COMP_vect){
    167e:	1f 92       	push	r1
    1680:	0f 92       	push	r0
    1682:	0f b6       	in	r0, 0x3f	; 63
    1684:	0f 92       	push	r0
    1686:	11 24       	eor	r1, r1
    1688:	2f 93       	push	r18
    168a:	3f 93       	push	r19
    168c:	4f 93       	push	r20
    168e:	5f 93       	push	r21
    1690:	6f 93       	push	r22
    1692:	7f 93       	push	r23
    1694:	8f 93       	push	r24
    1696:	9f 93       	push	r25
    1698:	af 93       	push	r26
    169a:	bf 93       	push	r27
    169c:	ef 93       	push	r30
    169e:	ff 93       	push	r31
    16a0:	df 93       	push	r29
    16a2:	cf 93       	push	r28
    16a4:	cd b7       	in	r28, 0x3d	; 61
    16a6:	de b7       	in	r29, 0x3e	; 62
	if(Tptr1!='\0'){
    16a8:	80 91 d9 00 	lds	r24, 0x00D9
    16ac:	90 91 da 00 	lds	r25, 0x00DA
    16b0:	00 97       	sbiw	r24, 0x00	; 0
    16b2:	29 f0       	breq	.+10     	; 0x16be <__vector_10+0x40>
		Tptr1();
    16b4:	e0 91 d9 00 	lds	r30, 0x00D9
    16b8:	f0 91 da 00 	lds	r31, 0x00DA
    16bc:	09 95       	icall
	}
}
    16be:	cf 91       	pop	r28
    16c0:	df 91       	pop	r29
    16c2:	ff 91       	pop	r31
    16c4:	ef 91       	pop	r30
    16c6:	bf 91       	pop	r27
    16c8:	af 91       	pop	r26
    16ca:	9f 91       	pop	r25
    16cc:	8f 91       	pop	r24
    16ce:	7f 91       	pop	r23
    16d0:	6f 91       	pop	r22
    16d2:	5f 91       	pop	r21
    16d4:	4f 91       	pop	r20
    16d6:	3f 91       	pop	r19
    16d8:	2f 91       	pop	r18
    16da:	0f 90       	pop	r0
    16dc:	0f be       	out	0x3f, r0	; 63
    16de:	0f 90       	pop	r0
    16e0:	1f 90       	pop	r1
    16e2:	18 95       	reti

000016e4 <__vector_11>:
ISR(TIMER0_OVF_vect){
    16e4:	1f 92       	push	r1
    16e6:	0f 92       	push	r0
    16e8:	0f b6       	in	r0, 0x3f	; 63
    16ea:	0f 92       	push	r0
    16ec:	11 24       	eor	r1, r1
    16ee:	2f 93       	push	r18
    16f0:	3f 93       	push	r19
    16f2:	4f 93       	push	r20
    16f4:	5f 93       	push	r21
    16f6:	6f 93       	push	r22
    16f8:	7f 93       	push	r23
    16fa:	8f 93       	push	r24
    16fc:	9f 93       	push	r25
    16fe:	af 93       	push	r26
    1700:	bf 93       	push	r27
    1702:	ef 93       	push	r30
    1704:	ff 93       	push	r31
    1706:	df 93       	push	r29
    1708:	cf 93       	push	r28
    170a:	cd b7       	in	r28, 0x3d	; 61
    170c:	de b7       	in	r29, 0x3e	; 62
	if(Tptr2!='\0'){
    170e:	80 91 db 00 	lds	r24, 0x00DB
    1712:	90 91 dc 00 	lds	r25, 0x00DC
    1716:	00 97       	sbiw	r24, 0x00	; 0
    1718:	29 f0       	breq	.+10     	; 0x1724 <__vector_11+0x40>
		Tptr2();
    171a:	e0 91 db 00 	lds	r30, 0x00DB
    171e:	f0 91 dc 00 	lds	r31, 0x00DC
    1722:	09 95       	icall
	}
}
    1724:	cf 91       	pop	r28
    1726:	df 91       	pop	r29
    1728:	ff 91       	pop	r31
    172a:	ef 91       	pop	r30
    172c:	bf 91       	pop	r27
    172e:	af 91       	pop	r26
    1730:	9f 91       	pop	r25
    1732:	8f 91       	pop	r24
    1734:	7f 91       	pop	r23
    1736:	6f 91       	pop	r22
    1738:	5f 91       	pop	r21
    173a:	4f 91       	pop	r20
    173c:	3f 91       	pop	r19
    173e:	2f 91       	pop	r18
    1740:	0f 90       	pop	r0
    1742:	0f be       	out	0x3f, r0	; 63
    1744:	0f 90       	pop	r0
    1746:	1f 90       	pop	r1
    1748:	18 95       	reti

0000174a <SPI_vInit>:
 */
#include "SPI.h"

void(*Sptr)(void)='\0';

void SPI_vInit(){
    174a:	df 93       	push	r29
    174c:	cf 93       	push	r28
    174e:	cd b7       	in	r28, 0x3d	; 61
    1750:	de b7       	in	r29, 0x3e	; 62
		CLR_BIT(DDRB,4);
		CLR_BIT(DDRB,5);
		SET_BIT(DDRB,6);
		CLR_BIT(DDRB,7);
	#elif SPIMode==SPIMaster
		SPCR=0b00110000|SPIPrescaler;
    1752:	ed e2       	ldi	r30, 0x2D	; 45
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	84 e3       	ldi	r24, 0x34	; 52
    1758:	80 83       	st	Z, r24
		CLR_BIT(SPSR,0);
    175a:	ae e2       	ldi	r26, 0x2E	; 46
    175c:	b0 e0       	ldi	r27, 0x00	; 0
    175e:	ee e2       	ldi	r30, 0x2E	; 46
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	80 81       	ld	r24, Z
    1764:	8e 7f       	andi	r24, 0xFE	; 254
    1766:	8c 93       	st	X, r24
		SET_BIT(DDRB,4);
    1768:	a7 e3       	ldi	r26, 0x37	; 55
    176a:	b0 e0       	ldi	r27, 0x00	; 0
    176c:	e7 e3       	ldi	r30, 0x37	; 55
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	80 81       	ld	r24, Z
    1772:	80 61       	ori	r24, 0x10	; 16
    1774:	8c 93       	st	X, r24
		SET_BIT(DDRB,5);
    1776:	a7 e3       	ldi	r26, 0x37	; 55
    1778:	b0 e0       	ldi	r27, 0x00	; 0
    177a:	e7 e3       	ldi	r30, 0x37	; 55
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	80 81       	ld	r24, Z
    1780:	80 62       	ori	r24, 0x20	; 32
    1782:	8c 93       	st	X, r24
		CLR_BIT(DDRB,6);
    1784:	a7 e3       	ldi	r26, 0x37	; 55
    1786:	b0 e0       	ldi	r27, 0x00	; 0
    1788:	e7 e3       	ldi	r30, 0x37	; 55
    178a:	f0 e0       	ldi	r31, 0x00	; 0
    178c:	80 81       	ld	r24, Z
    178e:	8f 7b       	andi	r24, 0xBF	; 191
    1790:	8c 93       	st	X, r24
		SET_BIT(DDRB,7);
    1792:	a7 e3       	ldi	r26, 0x37	; 55
    1794:	b0 e0       	ldi	r27, 0x00	; 0
    1796:	e7 e3       	ldi	r30, 0x37	; 55
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	80 81       	ld	r24, Z
    179c:	80 68       	ori	r24, 0x80	; 128
    179e:	8c 93       	st	X, r24

		SET_BIT(SPCR,6);
    17a0:	ad e2       	ldi	r26, 0x2D	; 45
    17a2:	b0 e0       	ldi	r27, 0x00	; 0
    17a4:	ed e2       	ldi	r30, 0x2D	; 45
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	80 81       	ld	r24, Z
    17aa:	80 64       	ori	r24, 0x40	; 64
    17ac:	8c 93       	st	X, r24
		CLR_BIT(DDRB,6);
		SET_BIT(DDRB,7);
	#endif
#endif

}
    17ae:	cf 91       	pop	r28
    17b0:	df 91       	pop	r29
    17b2:	08 95       	ret

000017b4 <SPI_vMasterWrite>:
void SPI_vMasterWrite(u8 Loc_WriteData){
    17b4:	df 93       	push	r29
    17b6:	cf 93       	push	r28
    17b8:	0f 92       	push	r0
    17ba:	cd b7       	in	r28, 0x3d	; 61
    17bc:	de b7       	in	r29, 0x3e	; 62
    17be:	89 83       	std	Y+1, r24	; 0x01
	SPDR=Loc_WriteData;
    17c0:	ef e2       	ldi	r30, 0x2F	; 47
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	89 81       	ldd	r24, Y+1	; 0x01
    17c6:	80 83       	st	Z, r24
	while(!GET_BIT(SPSR,7));
    17c8:	ee e2       	ldi	r30, 0x2E	; 46
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	80 81       	ld	r24, Z
    17ce:	88 23       	and	r24, r24
    17d0:	dc f7       	brge	.-10     	; 0x17c8 <SPI_vMasterWrite+0x14>
}
    17d2:	0f 90       	pop	r0
    17d4:	cf 91       	pop	r28
    17d6:	df 91       	pop	r29
    17d8:	08 95       	ret

000017da <SPI_vMasterReadWrite>:

void SPI_vMasterReadWrite(u8 Loc_WriteData,u8 *Loc_ReadData){
    17da:	df 93       	push	r29
    17dc:	cf 93       	push	r28
    17de:	00 d0       	rcall	.+0      	; 0x17e0 <SPI_vMasterReadWrite+0x6>
    17e0:	0f 92       	push	r0
    17e2:	cd b7       	in	r28, 0x3d	; 61
    17e4:	de b7       	in	r29, 0x3e	; 62
    17e6:	89 83       	std	Y+1, r24	; 0x01
    17e8:	7b 83       	std	Y+3, r23	; 0x03
    17ea:	6a 83       	std	Y+2, r22	; 0x02
	SPDR=Loc_WriteData;
    17ec:	ef e2       	ldi	r30, 0x2F	; 47
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	89 81       	ldd	r24, Y+1	; 0x01
    17f2:	80 83       	st	Z, r24
	while(!GET_BIT(SPSR,7));
    17f4:	ee e2       	ldi	r30, 0x2E	; 46
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	80 81       	ld	r24, Z
    17fa:	88 23       	and	r24, r24
    17fc:	dc f7       	brge	.-10     	; 0x17f4 <SPI_vMasterReadWrite+0x1a>
	*Loc_ReadData = SPDR;
    17fe:	ef e2       	ldi	r30, 0x2F	; 47
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	80 81       	ld	r24, Z
    1804:	ea 81       	ldd	r30, Y+2	; 0x02
    1806:	fb 81       	ldd	r31, Y+3	; 0x03
    1808:	80 83       	st	Z, r24
}
    180a:	0f 90       	pop	r0
    180c:	0f 90       	pop	r0
    180e:	0f 90       	pop	r0
    1810:	cf 91       	pop	r28
    1812:	df 91       	pop	r29
    1814:	08 95       	ret

00001816 <SPI_vSlaveRead>:

void SPI_vSlaveRead(u8 *Loc_ReadData){
    1816:	df 93       	push	r29
    1818:	cf 93       	push	r28
    181a:	00 d0       	rcall	.+0      	; 0x181c <SPI_vSlaveRead+0x6>
    181c:	cd b7       	in	r28, 0x3d	; 61
    181e:	de b7       	in	r29, 0x3e	; 62
    1820:	9a 83       	std	Y+2, r25	; 0x02
    1822:	89 83       	std	Y+1, r24	; 0x01
	while(!GET_BIT(SPSR,7));
    1824:	ee e2       	ldi	r30, 0x2E	; 46
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	80 81       	ld	r24, Z
    182a:	88 23       	and	r24, r24
    182c:	dc f7       	brge	.-10     	; 0x1824 <SPI_vSlaveRead+0xe>
	*Loc_ReadData = SPDR;
    182e:	ef e2       	ldi	r30, 0x2F	; 47
    1830:	f0 e0       	ldi	r31, 0x00	; 0
    1832:	80 81       	ld	r24, Z
    1834:	e9 81       	ldd	r30, Y+1	; 0x01
    1836:	fa 81       	ldd	r31, Y+2	; 0x02
    1838:	80 83       	st	Z, r24
}
    183a:	0f 90       	pop	r0
    183c:	0f 90       	pop	r0
    183e:	cf 91       	pop	r28
    1840:	df 91       	pop	r29
    1842:	08 95       	ret

00001844 <SPI_vTransferCompleteInterruptEnable>:
void SPI_vTransferCompleteInterruptEnable(void(*ptr)(void)){
    1844:	df 93       	push	r29
    1846:	cf 93       	push	r28
    1848:	00 d0       	rcall	.+0      	; 0x184a <SPI_vTransferCompleteInterruptEnable+0x6>
    184a:	cd b7       	in	r28, 0x3d	; 61
    184c:	de b7       	in	r29, 0x3e	; 62
    184e:	9a 83       	std	Y+2, r25	; 0x02
    1850:	89 83       	std	Y+1, r24	; 0x01
	if(ptr!='\0'){
    1852:	89 81       	ldd	r24, Y+1	; 0x01
    1854:	9a 81       	ldd	r25, Y+2	; 0x02
    1856:	00 97       	sbiw	r24, 0x00	; 0
    1858:	31 f0       	breq	.+12     	; 0x1866 <SPI_vTransferCompleteInterruptEnable+0x22>
		Sptr=ptr;
    185a:	89 81       	ldd	r24, Y+1	; 0x01
    185c:	9a 81       	ldd	r25, Y+2	; 0x02
    185e:	90 93 de 00 	sts	0x00DE, r25
    1862:	80 93 dd 00 	sts	0x00DD, r24
	}
}
    1866:	0f 90       	pop	r0
    1868:	0f 90       	pop	r0
    186a:	cf 91       	pop	r28
    186c:	df 91       	pop	r29
    186e:	08 95       	ret

00001870 <__vector_12>:
ISR(SPI_STC_vect){
    1870:	1f 92       	push	r1
    1872:	0f 92       	push	r0
    1874:	0f b6       	in	r0, 0x3f	; 63
    1876:	0f 92       	push	r0
    1878:	11 24       	eor	r1, r1
    187a:	2f 93       	push	r18
    187c:	3f 93       	push	r19
    187e:	4f 93       	push	r20
    1880:	5f 93       	push	r21
    1882:	6f 93       	push	r22
    1884:	7f 93       	push	r23
    1886:	8f 93       	push	r24
    1888:	9f 93       	push	r25
    188a:	af 93       	push	r26
    188c:	bf 93       	push	r27
    188e:	ef 93       	push	r30
    1890:	ff 93       	push	r31
    1892:	df 93       	push	r29
    1894:	cf 93       	push	r28
    1896:	cd b7       	in	r28, 0x3d	; 61
    1898:	de b7       	in	r29, 0x3e	; 62
	if(Sptr!='\0'){
    189a:	80 91 dd 00 	lds	r24, 0x00DD
    189e:	90 91 de 00 	lds	r25, 0x00DE
    18a2:	00 97       	sbiw	r24, 0x00	; 0
    18a4:	29 f0       	breq	.+10     	; 0x18b0 <__vector_12+0x40>
		Sptr();
    18a6:	e0 91 dd 00 	lds	r30, 0x00DD
    18aa:	f0 91 de 00 	lds	r31, 0x00DE
    18ae:	09 95       	icall
	}
}
    18b0:	cf 91       	pop	r28
    18b2:	df 91       	pop	r29
    18b4:	ff 91       	pop	r31
    18b6:	ef 91       	pop	r30
    18b8:	bf 91       	pop	r27
    18ba:	af 91       	pop	r26
    18bc:	9f 91       	pop	r25
    18be:	8f 91       	pop	r24
    18c0:	7f 91       	pop	r23
    18c2:	6f 91       	pop	r22
    18c4:	5f 91       	pop	r21
    18c6:	4f 91       	pop	r20
    18c8:	3f 91       	pop	r19
    18ca:	2f 91       	pop	r18
    18cc:	0f 90       	pop	r0
    18ce:	0f be       	out	0x3f, r0	; 63
    18d0:	0f 90       	pop	r0
    18d2:	1f 90       	pop	r1
    18d4:	18 95       	reti

000018d6 <I2C_vInit>:

#include "I2C.h"

void(*Iptr)(void)='\0';

void I2C_vInit(){
    18d6:	df 93       	push	r29
    18d8:	cf 93       	push	r28
    18da:	cd b7       	in	r28, 0x3d	; 61
    18dc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TWCR,TWIE);
	TWSR = I2CPrescaler;
	TWAR = assignedAddress;
#elif I2CMode==I2CPolling
	//		TWAR = assignedAddress;
	TWBR = 0x01;
    18de:	e0 e2       	ldi	r30, 0x20	; 32
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	81 e0       	ldi	r24, 0x01	; 1
    18e4:	80 83       	st	Z, r24
	CLR_BIT(TWSR,0);
    18e6:	a1 e2       	ldi	r26, 0x21	; 33
    18e8:	b0 e0       	ldi	r27, 0x00	; 0
    18ea:	e1 e2       	ldi	r30, 0x21	; 33
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	80 81       	ld	r24, Z
    18f0:	8e 7f       	andi	r24, 0xFE	; 254
    18f2:	8c 93       	st	X, r24
	CLR_BIT(TWSR,1);
    18f4:	a1 e2       	ldi	r26, 0x21	; 33
    18f6:	b0 e0       	ldi	r27, 0x00	; 0
    18f8:	e1 e2       	ldi	r30, 0x21	; 33
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	80 81       	ld	r24, Z
    18fe:	8d 7f       	andi	r24, 0xFD	; 253
    1900:	8c 93       	st	X, r24
	//		SET_BIT(TWCR,6);
	//		SET_BIT(TWCR,2);
#endif
}
    1902:	cf 91       	pop	r28
    1904:	df 91       	pop	r29
    1906:	08 95       	ret

00001908 <I2C_vSendStart>:
void I2C_vSendStart(){
    1908:	df 93       	push	r29
    190a:	cf 93       	push	r28
    190c:	cd b7       	in	r28, 0x3d	; 61
    190e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TWCR,2);
    1910:	a6 e5       	ldi	r26, 0x56	; 86
    1912:	b0 e0       	ldi	r27, 0x00	; 0
    1914:	e6 e5       	ldi	r30, 0x56	; 86
    1916:	f0 e0       	ldi	r31, 0x00	; 0
    1918:	80 81       	ld	r24, Z
    191a:	84 60       	ori	r24, 0x04	; 4
    191c:	8c 93       	st	X, r24
	SET_BIT(TWCR,5);
    191e:	a6 e5       	ldi	r26, 0x56	; 86
    1920:	b0 e0       	ldi	r27, 0x00	; 0
    1922:	e6 e5       	ldi	r30, 0x56	; 86
    1924:	f0 e0       	ldi	r31, 0x00	; 0
    1926:	80 81       	ld	r24, Z
    1928:	80 62       	ori	r24, 0x20	; 32
    192a:	8c 93       	st	X, r24
	SET_BIT(TWCR,7);
    192c:	a6 e5       	ldi	r26, 0x56	; 86
    192e:	b0 e0       	ldi	r27, 0x00	; 0
    1930:	e6 e5       	ldi	r30, 0x56	; 86
    1932:	f0 e0       	ldi	r31, 0x00	; 0
    1934:	80 81       	ld	r24, Z
    1936:	80 68       	ori	r24, 0x80	; 128
    1938:	8c 93       	st	X, r24
	while(!(GET_BIT(TWCR,7)));
    193a:	e6 e5       	ldi	r30, 0x56	; 86
    193c:	f0 e0       	ldi	r31, 0x00	; 0
    193e:	80 81       	ld	r24, Z
    1940:	88 23       	and	r24, r24
    1942:	dc f7       	brge	.-10     	; 0x193a <I2C_vSendStart+0x32>
//	while((TWSR&0xF8)!=0x08);
}
    1944:	cf 91       	pop	r28
    1946:	df 91       	pop	r29
    1948:	08 95       	ret

0000194a <I2C_vRepeatedSendStart>:
void I2C_vRepeatedSendStart(){
    194a:	df 93       	push	r29
    194c:	cf 93       	push	r28
    194e:	cd b7       	in	r28, 0x3d	; 61
    1950:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TWCR,2);
    1952:	a6 e5       	ldi	r26, 0x56	; 86
    1954:	b0 e0       	ldi	r27, 0x00	; 0
    1956:	e6 e5       	ldi	r30, 0x56	; 86
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	80 81       	ld	r24, Z
    195c:	84 60       	ori	r24, 0x04	; 4
    195e:	8c 93       	st	X, r24
	SET_BIT(TWCR,5);
    1960:	a6 e5       	ldi	r26, 0x56	; 86
    1962:	b0 e0       	ldi	r27, 0x00	; 0
    1964:	e6 e5       	ldi	r30, 0x56	; 86
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	80 81       	ld	r24, Z
    196a:	80 62       	ori	r24, 0x20	; 32
    196c:	8c 93       	st	X, r24
	SET_BIT(TWCR,7);
    196e:	a6 e5       	ldi	r26, 0x56	; 86
    1970:	b0 e0       	ldi	r27, 0x00	; 0
    1972:	e6 e5       	ldi	r30, 0x56	; 86
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	80 81       	ld	r24, Z
    1978:	80 68       	ori	r24, 0x80	; 128
    197a:	8c 93       	st	X, r24
	while(!(GET_BIT(TWCR,7)));
    197c:	e6 e5       	ldi	r30, 0x56	; 86
    197e:	f0 e0       	ldi	r31, 0x00	; 0
    1980:	80 81       	ld	r24, Z
    1982:	88 23       	and	r24, r24
    1984:	dc f7       	brge	.-10     	; 0x197c <I2C_vRepeatedSendStart+0x32>
//	while((TWSR&0xF8)!=0x10);

}
    1986:	cf 91       	pop	r28
    1988:	df 91       	pop	r29
    198a:	08 95       	ret

0000198c <I2C_vSendStop>:
void I2C_vSendStop(){
    198c:	df 93       	push	r29
    198e:	cf 93       	push	r28
    1990:	cd b7       	in	r28, 0x3d	; 61
    1992:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TWCR,2);
    1994:	a6 e5       	ldi	r26, 0x56	; 86
    1996:	b0 e0       	ldi	r27, 0x00	; 0
    1998:	e6 e5       	ldi	r30, 0x56	; 86
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	80 81       	ld	r24, Z
    199e:	84 60       	ori	r24, 0x04	; 4
    19a0:	8c 93       	st	X, r24
	SET_BIT(TWCR,4);
    19a2:	a6 e5       	ldi	r26, 0x56	; 86
    19a4:	b0 e0       	ldi	r27, 0x00	; 0
    19a6:	e6 e5       	ldi	r30, 0x56	; 86
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	80 81       	ld	r24, Z
    19ac:	80 61       	ori	r24, 0x10	; 16
    19ae:	8c 93       	st	X, r24
	SET_BIT(TWCR,7);
    19b0:	a6 e5       	ldi	r26, 0x56	; 86
    19b2:	b0 e0       	ldi	r27, 0x00	; 0
    19b4:	e6 e5       	ldi	r30, 0x56	; 86
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	80 81       	ld	r24, Z
    19ba:	80 68       	ori	r24, 0x80	; 128
    19bc:	8c 93       	st	X, r24
	while(!(GET_BIT(TWCR,7)));
    19be:	e6 e5       	ldi	r30, 0x56	; 86
    19c0:	f0 e0       	ldi	r31, 0x00	; 0
    19c2:	80 81       	ld	r24, Z
    19c4:	88 23       	and	r24, r24
    19c6:	dc f7       	brge	.-10     	; 0x19be <I2C_vSendStop+0x32>
}
    19c8:	cf 91       	pop	r28
    19ca:	df 91       	pop	r29
    19cc:	08 95       	ret

000019ce <I2C_vSendSlaveAdress>:
void I2C_vSendSlaveAdress(u8 Loc_SlaveAdress){
    19ce:	df 93       	push	r29
    19d0:	cf 93       	push	r28
    19d2:	0f 92       	push	r0
    19d4:	cd b7       	in	r28, 0x3d	; 61
    19d6:	de b7       	in	r29, 0x3e	; 62
    19d8:	89 83       	std	Y+1, r24	; 0x01
	TWDR=Loc_SlaveAdress; //frist bit is for read or write
    19da:	e3 e2       	ldi	r30, 0x23	; 35
    19dc:	f0 e0       	ldi	r31, 0x00	; 0
    19de:	89 81       	ldd	r24, Y+1	; 0x01
    19e0:	80 83       	st	Z, r24
	SET_BIT(TWCR,2);
    19e2:	a6 e5       	ldi	r26, 0x56	; 86
    19e4:	b0 e0       	ldi	r27, 0x00	; 0
    19e6:	e6 e5       	ldi	r30, 0x56	; 86
    19e8:	f0 e0       	ldi	r31, 0x00	; 0
    19ea:	80 81       	ld	r24, Z
    19ec:	84 60       	ori	r24, 0x04	; 4
    19ee:	8c 93       	st	X, r24
	SET_BIT(TWCR,7);
    19f0:	a6 e5       	ldi	r26, 0x56	; 86
    19f2:	b0 e0       	ldi	r27, 0x00	; 0
    19f4:	e6 e5       	ldi	r30, 0x56	; 86
    19f6:	f0 e0       	ldi	r31, 0x00	; 0
    19f8:	80 81       	ld	r24, Z
    19fa:	80 68       	ori	r24, 0x80	; 128
    19fc:	8c 93       	st	X, r24
	while(!(GET_BIT(TWCR,7)));
    19fe:	e6 e5       	ldi	r30, 0x56	; 86
    1a00:	f0 e0       	ldi	r31, 0x00	; 0
    1a02:	80 81       	ld	r24, Z
    1a04:	88 23       	and	r24, r24
    1a06:	dc f7       	brge	.-10     	; 0x19fe <I2C_vSendSlaveAdress+0x30>
	//while((TWSR&0xF8)!=0x18);

}
    1a08:	0f 90       	pop	r0
    1a0a:	cf 91       	pop	r28
    1a0c:	df 91       	pop	r29
    1a0e:	08 95       	ret

00001a10 <I2C_SendData>:
void I2C_SendData(u8 Loc_Data){
    1a10:	df 93       	push	r29
    1a12:	cf 93       	push	r28
    1a14:	0f 92       	push	r0
    1a16:	cd b7       	in	r28, 0x3d	; 61
    1a18:	de b7       	in	r29, 0x3e	; 62
    1a1a:	89 83       	std	Y+1, r24	; 0x01
	TWDR=Loc_Data;
    1a1c:	e3 e2       	ldi	r30, 0x23	; 35
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	89 81       	ldd	r24, Y+1	; 0x01
    1a22:	80 83       	st	Z, r24
	SET_BIT(TWCR,2);
    1a24:	a6 e5       	ldi	r26, 0x56	; 86
    1a26:	b0 e0       	ldi	r27, 0x00	; 0
    1a28:	e6 e5       	ldi	r30, 0x56	; 86
    1a2a:	f0 e0       	ldi	r31, 0x00	; 0
    1a2c:	80 81       	ld	r24, Z
    1a2e:	84 60       	ori	r24, 0x04	; 4
    1a30:	8c 93       	st	X, r24

	SET_BIT(TWCR,7);
    1a32:	a6 e5       	ldi	r26, 0x56	; 86
    1a34:	b0 e0       	ldi	r27, 0x00	; 0
    1a36:	e6 e5       	ldi	r30, 0x56	; 86
    1a38:	f0 e0       	ldi	r31, 0x00	; 0
    1a3a:	80 81       	ld	r24, Z
    1a3c:	80 68       	ori	r24, 0x80	; 128
    1a3e:	8c 93       	st	X, r24
	while(!(GET_BIT(TWCR,7)));
    1a40:	e6 e5       	ldi	r30, 0x56	; 86
    1a42:	f0 e0       	ldi	r31, 0x00	; 0
    1a44:	80 81       	ld	r24, Z
    1a46:	88 23       	and	r24, r24
    1a48:	dc f7       	brge	.-10     	; 0x1a40 <I2C_SendData+0x30>
	//while((TWSR&0xF8)!=0x28);

}
    1a4a:	0f 90       	pop	r0
    1a4c:	cf 91       	pop	r28
    1a4e:	df 91       	pop	r29
    1a50:	08 95       	ret

00001a52 <I2C_vReadData>:
void I2C_vReadData(u8* ptr){
    1a52:	df 93       	push	r29
    1a54:	cf 93       	push	r28
    1a56:	00 d0       	rcall	.+0      	; 0x1a58 <I2C_vReadData+0x6>
    1a58:	cd b7       	in	r28, 0x3d	; 61
    1a5a:	de b7       	in	r29, 0x3e	; 62
    1a5c:	9a 83       	std	Y+2, r25	; 0x02
    1a5e:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(TWCR,2);
    1a60:	a6 e5       	ldi	r26, 0x56	; 86
    1a62:	b0 e0       	ldi	r27, 0x00	; 0
    1a64:	e6 e5       	ldi	r30, 0x56	; 86
    1a66:	f0 e0       	ldi	r31, 0x00	; 0
    1a68:	80 81       	ld	r24, Z
    1a6a:	84 60       	ori	r24, 0x04	; 4
    1a6c:	8c 93       	st	X, r24

	SET_BIT(TWCR,7);
    1a6e:	a6 e5       	ldi	r26, 0x56	; 86
    1a70:	b0 e0       	ldi	r27, 0x00	; 0
    1a72:	e6 e5       	ldi	r30, 0x56	; 86
    1a74:	f0 e0       	ldi	r31, 0x00	; 0
    1a76:	80 81       	ld	r24, Z
    1a78:	80 68       	ori	r24, 0x80	; 128
    1a7a:	8c 93       	st	X, r24
	while(!(GET_BIT(TWCR,7)));
    1a7c:	e6 e5       	ldi	r30, 0x56	; 86
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	80 81       	ld	r24, Z
    1a82:	88 23       	and	r24, r24
    1a84:	dc f7       	brge	.-10     	; 0x1a7c <I2C_vReadData+0x2a>
	//while((TWSR&0xF8)!=0x58);
	*ptr=TWDR;
    1a86:	e3 e2       	ldi	r30, 0x23	; 35
    1a88:	f0 e0       	ldi	r31, 0x00	; 0
    1a8a:	80 81       	ld	r24, Z
    1a8c:	e9 81       	ldd	r30, Y+1	; 0x01
    1a8e:	fa 81       	ldd	r31, Y+2	; 0x02
    1a90:	80 83       	st	Z, r24

}
    1a92:	0f 90       	pop	r0
    1a94:	0f 90       	pop	r0
    1a96:	cf 91       	pop	r28
    1a98:	df 91       	pop	r29
    1a9a:	08 95       	ret

00001a9c <I2C_vJobFinishedInterruptEnable>:
void I2C_vJobFinishedInterruptEnable(void(*ptr)(void)){
    1a9c:	df 93       	push	r29
    1a9e:	cf 93       	push	r28
    1aa0:	00 d0       	rcall	.+0      	; 0x1aa2 <I2C_vJobFinishedInterruptEnable+0x6>
    1aa2:	cd b7       	in	r28, 0x3d	; 61
    1aa4:	de b7       	in	r29, 0x3e	; 62
    1aa6:	9a 83       	std	Y+2, r25	; 0x02
    1aa8:	89 83       	std	Y+1, r24	; 0x01
	if(ptr!='\0'){
    1aaa:	89 81       	ldd	r24, Y+1	; 0x01
    1aac:	9a 81       	ldd	r25, Y+2	; 0x02
    1aae:	00 97       	sbiw	r24, 0x00	; 0
    1ab0:	31 f0       	breq	.+12     	; 0x1abe <I2C_vJobFinishedInterruptEnable+0x22>
		Iptr=ptr;
    1ab2:	89 81       	ldd	r24, Y+1	; 0x01
    1ab4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ab6:	90 93 e0 00 	sts	0x00E0, r25
    1aba:	80 93 df 00 	sts	0x00DF, r24
	}
}
    1abe:	0f 90       	pop	r0
    1ac0:	0f 90       	pop	r0
    1ac2:	cf 91       	pop	r28
    1ac4:	df 91       	pop	r29
    1ac6:	08 95       	ret

00001ac8 <__vector_19>:
ISR(TWI_vect){
    1ac8:	1f 92       	push	r1
    1aca:	0f 92       	push	r0
    1acc:	0f b6       	in	r0, 0x3f	; 63
    1ace:	0f 92       	push	r0
    1ad0:	11 24       	eor	r1, r1
    1ad2:	2f 93       	push	r18
    1ad4:	3f 93       	push	r19
    1ad6:	4f 93       	push	r20
    1ad8:	5f 93       	push	r21
    1ada:	6f 93       	push	r22
    1adc:	7f 93       	push	r23
    1ade:	8f 93       	push	r24
    1ae0:	9f 93       	push	r25
    1ae2:	af 93       	push	r26
    1ae4:	bf 93       	push	r27
    1ae6:	ef 93       	push	r30
    1ae8:	ff 93       	push	r31
    1aea:	df 93       	push	r29
    1aec:	cf 93       	push	r28
    1aee:	cd b7       	in	r28, 0x3d	; 61
    1af0:	de b7       	in	r29, 0x3e	; 62
	if(Iptr!='\0'){
    1af2:	80 91 df 00 	lds	r24, 0x00DF
    1af6:	90 91 e0 00 	lds	r25, 0x00E0
    1afa:	00 97       	sbiw	r24, 0x00	; 0
    1afc:	29 f0       	breq	.+10     	; 0x1b08 <__vector_19+0x40>
		Iptr();
    1afe:	e0 91 df 00 	lds	r30, 0x00DF
    1b02:	f0 91 e0 00 	lds	r31, 0x00E0
    1b06:	09 95       	icall
	}
}
    1b08:	cf 91       	pop	r28
    1b0a:	df 91       	pop	r29
    1b0c:	ff 91       	pop	r31
    1b0e:	ef 91       	pop	r30
    1b10:	bf 91       	pop	r27
    1b12:	af 91       	pop	r26
    1b14:	9f 91       	pop	r25
    1b16:	8f 91       	pop	r24
    1b18:	7f 91       	pop	r23
    1b1a:	6f 91       	pop	r22
    1b1c:	5f 91       	pop	r21
    1b1e:	4f 91       	pop	r20
    1b20:	3f 91       	pop	r19
    1b22:	2f 91       	pop	r18
    1b24:	0f 90       	pop	r0
    1b26:	0f be       	out	0x3f, r0	; 63
    1b28:	0f 90       	pop	r0
    1b2a:	1f 90       	pop	r1
    1b2c:	18 95       	reti

00001b2e <EXTI_vEnableGIE>:
#include "EXTI.h"

void(*Gptr0)(void)='\0';
void(*Gptr1)(void)='\0';
void(*Gptr2)(void)='\0';
void EXTI_vEnableGIE(void){
    1b2e:	df 93       	push	r29
    1b30:	cf 93       	push	r28
    1b32:	cd b7       	in	r28, 0x3d	; 61
    1b34:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
    1b36:	af e5       	ldi	r26, 0x5F	; 95
    1b38:	b0 e0       	ldi	r27, 0x00	; 0
    1b3a:	ef e5       	ldi	r30, 0x5F	; 95
    1b3c:	f0 e0       	ldi	r31, 0x00	; 0
    1b3e:	80 81       	ld	r24, Z
    1b40:	80 68       	ori	r24, 0x80	; 128
    1b42:	8c 93       	st	X, r24
}
    1b44:	cf 91       	pop	r28
    1b46:	df 91       	pop	r29
    1b48:	08 95       	ret

00001b4a <EXTI_vEnablePIE>:
void EXTI_vEnablePIE(u8 Loc_u8InterruptNumber){
    1b4a:	df 93       	push	r29
    1b4c:	cf 93       	push	r28
    1b4e:	0f 92       	push	r0
    1b50:	cd b7       	in	r28, 0x3d	; 61
    1b52:	de b7       	in	r29, 0x3e	; 62
    1b54:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8InterruptNumber<=INT2){
    1b56:	89 81       	ldd	r24, Y+1	; 0x01
    1b58:	83 30       	cpi	r24, 0x03	; 3
    1b5a:	00 f5       	brcc	.+64     	; 0x1b9c <EXTI_vEnablePIE+0x52>
		if(Loc_u8InterruptNumber==INT0){
    1b5c:	89 81       	ldd	r24, Y+1	; 0x01
    1b5e:	88 23       	and	r24, r24
    1b60:	41 f4       	brne	.+16     	; 0x1b72 <EXTI_vEnablePIE+0x28>
			SET_BIT(GICR,6);
    1b62:	ab e5       	ldi	r26, 0x5B	; 91
    1b64:	b0 e0       	ldi	r27, 0x00	; 0
    1b66:	eb e5       	ldi	r30, 0x5B	; 91
    1b68:	f0 e0       	ldi	r31, 0x00	; 0
    1b6a:	80 81       	ld	r24, Z
    1b6c:	80 64       	ori	r24, 0x40	; 64
    1b6e:	8c 93       	st	X, r24
    1b70:	15 c0       	rjmp	.+42     	; 0x1b9c <EXTI_vEnablePIE+0x52>
		}
		else if(Loc_u8InterruptNumber==INT1){
    1b72:	89 81       	ldd	r24, Y+1	; 0x01
    1b74:	81 30       	cpi	r24, 0x01	; 1
    1b76:	41 f4       	brne	.+16     	; 0x1b88 <EXTI_vEnablePIE+0x3e>
			SET_BIT(GICR,7);
    1b78:	ab e5       	ldi	r26, 0x5B	; 91
    1b7a:	b0 e0       	ldi	r27, 0x00	; 0
    1b7c:	eb e5       	ldi	r30, 0x5B	; 91
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	80 81       	ld	r24, Z
    1b82:	80 68       	ori	r24, 0x80	; 128
    1b84:	8c 93       	st	X, r24
    1b86:	0a c0       	rjmp	.+20     	; 0x1b9c <EXTI_vEnablePIE+0x52>
		}
		else if(Loc_u8InterruptNumber==INT2){
    1b88:	89 81       	ldd	r24, Y+1	; 0x01
    1b8a:	82 30       	cpi	r24, 0x02	; 2
    1b8c:	39 f4       	brne	.+14     	; 0x1b9c <EXTI_vEnablePIE+0x52>
			SET_BIT(GICR,5);
    1b8e:	ab e5       	ldi	r26, 0x5B	; 91
    1b90:	b0 e0       	ldi	r27, 0x00	; 0
    1b92:	eb e5       	ldi	r30, 0x5B	; 91
    1b94:	f0 e0       	ldi	r31, 0x00	; 0
    1b96:	80 81       	ld	r24, Z
    1b98:	80 62       	ori	r24, 0x20	; 32
    1b9a:	8c 93       	st	X, r24
		}
	}
	else {
		//do nothing
	}
}
    1b9c:	0f 90       	pop	r0
    1b9e:	cf 91       	pop	r28
    1ba0:	df 91       	pop	r29
    1ba2:	08 95       	ret

00001ba4 <EXIT_vReadPIF>:
u8 EXIT_vReadPIF(u8 Loc_u8InterruptNumber){
    1ba4:	df 93       	push	r29
    1ba6:	cf 93       	push	r28
    1ba8:	00 d0       	rcall	.+0      	; 0x1baa <EXIT_vReadPIF+0x6>
    1baa:	cd b7       	in	r28, 0x3d	; 61
    1bac:	de b7       	in	r29, 0x3e	; 62
    1bae:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8InterruptNumber<=INT2){
    1bb0:	89 81       	ldd	r24, Y+1	; 0x01
    1bb2:	83 30       	cpi	r24, 0x03	; 3
    1bb4:	38 f5       	brcc	.+78     	; 0x1c04 <EXIT_vReadPIF+0x60>
			if(Loc_u8InterruptNumber==INT0){
    1bb6:	89 81       	ldd	r24, Y+1	; 0x01
    1bb8:	88 23       	and	r24, r24
    1bba:	59 f4       	brne	.+22     	; 0x1bd2 <EXIT_vReadPIF+0x2e>
				return GET_BIT(GIFR,6);
    1bbc:	ea e5       	ldi	r30, 0x5A	; 90
    1bbe:	f0 e0       	ldi	r31, 0x00	; 0
    1bc0:	80 81       	ld	r24, Z
    1bc2:	82 95       	swap	r24
    1bc4:	86 95       	lsr	r24
    1bc6:	86 95       	lsr	r24
    1bc8:	83 70       	andi	r24, 0x03	; 3
    1bca:	98 2f       	mov	r25, r24
    1bcc:	91 70       	andi	r25, 0x01	; 1
    1bce:	9a 83       	std	Y+2, r25	; 0x02
    1bd0:	1b c0       	rjmp	.+54     	; 0x1c08 <EXIT_vReadPIF+0x64>
			}
			else if(Loc_u8InterruptNumber==INT1){
    1bd2:	89 81       	ldd	r24, Y+1	; 0x01
    1bd4:	81 30       	cpi	r24, 0x01	; 1
    1bd6:	49 f4       	brne	.+18     	; 0x1bea <EXIT_vReadPIF+0x46>
				return GET_BIT(GIFR,7);
    1bd8:	ea e5       	ldi	r30, 0x5A	; 90
    1bda:	f0 e0       	ldi	r31, 0x00	; 0
    1bdc:	80 81       	ld	r24, Z
    1bde:	98 2f       	mov	r25, r24
    1be0:	99 1f       	adc	r25, r25
    1be2:	99 27       	eor	r25, r25
    1be4:	99 1f       	adc	r25, r25
    1be6:	9a 83       	std	Y+2, r25	; 0x02
    1be8:	0f c0       	rjmp	.+30     	; 0x1c08 <EXIT_vReadPIF+0x64>
			}
			else if(Loc_u8InterruptNumber==INT2){
    1bea:	89 81       	ldd	r24, Y+1	; 0x01
    1bec:	82 30       	cpi	r24, 0x02	; 2
    1bee:	51 f4       	brne	.+20     	; 0x1c04 <EXIT_vReadPIF+0x60>
				return GET_BIT(GIFR,5);
    1bf0:	ea e5       	ldi	r30, 0x5A	; 90
    1bf2:	f0 e0       	ldi	r31, 0x00	; 0
    1bf4:	80 81       	ld	r24, Z
    1bf6:	82 95       	swap	r24
    1bf8:	86 95       	lsr	r24
    1bfa:	87 70       	andi	r24, 0x07	; 7
    1bfc:	98 2f       	mov	r25, r24
    1bfe:	91 70       	andi	r25, 0x01	; 1
    1c00:	9a 83       	std	Y+2, r25	; 0x02
    1c02:	02 c0       	rjmp	.+4      	; 0x1c08 <EXIT_vReadPIF+0x64>
			}
		}
		else {
			//do nothing
		}
	return 0xff;
    1c04:	8f ef       	ldi	r24, 0xFF	; 255
    1c06:	8a 83       	std	Y+2, r24	; 0x02
    1c08:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1c0a:	0f 90       	pop	r0
    1c0c:	0f 90       	pop	r0
    1c0e:	cf 91       	pop	r28
    1c10:	df 91       	pop	r29
    1c12:	08 95       	ret

00001c14 <EXTI_vSenseControl>:
void EXTI_vSenseControl(u8 Loc_u8InterruptNumber,u8 Loc_u8Mode){
    1c14:	df 93       	push	r29
    1c16:	cf 93       	push	r28
    1c18:	00 d0       	rcall	.+0      	; 0x1c1a <EXTI_vSenseControl+0x6>
    1c1a:	cd b7       	in	r28, 0x3d	; 61
    1c1c:	de b7       	in	r29, 0x3e	; 62
    1c1e:	89 83       	std	Y+1, r24	; 0x01
    1c20:	6a 83       	std	Y+2, r22	; 0x02

	if (Loc_u8InterruptNumber<=INT2){
    1c22:	89 81       	ldd	r24, Y+1	; 0x01
    1c24:	83 30       	cpi	r24, 0x03	; 3
    1c26:	08 f0       	brcs	.+2      	; 0x1c2a <EXTI_vSenseControl+0x16>
    1c28:	bf c0       	rjmp	.+382    	; 0x1da8 <EXTI_vSenseControl+0x194>
		if(Loc_u8InterruptNumber==INT0){
    1c2a:	89 81       	ldd	r24, Y+1	; 0x01
    1c2c:	88 23       	and	r24, r24
    1c2e:	09 f0       	breq	.+2      	; 0x1c32 <EXTI_vSenseControl+0x1e>
    1c30:	4d c0       	rjmp	.+154    	; 0x1ccc <EXTI_vSenseControl+0xb8>
			if(Loc_u8Mode<=Falling_Edge){
    1c32:	8a 81       	ldd	r24, Y+2	; 0x02
    1c34:	84 30       	cpi	r24, 0x04	; 4
    1c36:	08 f0       	brcs	.+2      	; 0x1c3a <EXTI_vSenseControl+0x26>
    1c38:	b7 c0       	rjmp	.+366    	; 0x1da8 <EXTI_vSenseControl+0x194>
				if(Loc_u8Mode==Low_Level){
    1c3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3c:	88 23       	and	r24, r24
    1c3e:	79 f4       	brne	.+30     	; 0x1c5e <EXTI_vSenseControl+0x4a>
					CLR_BIT(MCUCR,0);
    1c40:	a5 e5       	ldi	r26, 0x55	; 85
    1c42:	b0 e0       	ldi	r27, 0x00	; 0
    1c44:	e5 e5       	ldi	r30, 0x55	; 85
    1c46:	f0 e0       	ldi	r31, 0x00	; 0
    1c48:	80 81       	ld	r24, Z
    1c4a:	8e 7f       	andi	r24, 0xFE	; 254
    1c4c:	8c 93       	st	X, r24
					CLR_BIT(MCUCR,1);
    1c4e:	a5 e5       	ldi	r26, 0x55	; 85
    1c50:	b0 e0       	ldi	r27, 0x00	; 0
    1c52:	e5 e5       	ldi	r30, 0x55	; 85
    1c54:	f0 e0       	ldi	r31, 0x00	; 0
    1c56:	80 81       	ld	r24, Z
    1c58:	8d 7f       	andi	r24, 0xFD	; 253
    1c5a:	8c 93       	st	X, r24
    1c5c:	a5 c0       	rjmp	.+330    	; 0x1da8 <EXTI_vSenseControl+0x194>
				}
				else if(Loc_u8Mode==Any_Change){
    1c5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c60:	81 30       	cpi	r24, 0x01	; 1
    1c62:	79 f4       	brne	.+30     	; 0x1c82 <EXTI_vSenseControl+0x6e>
					SET_BIT(MCUCR,0);
    1c64:	a5 e5       	ldi	r26, 0x55	; 85
    1c66:	b0 e0       	ldi	r27, 0x00	; 0
    1c68:	e5 e5       	ldi	r30, 0x55	; 85
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	80 81       	ld	r24, Z
    1c6e:	81 60       	ori	r24, 0x01	; 1
    1c70:	8c 93       	st	X, r24
					CLR_BIT(MCUCR,1);
    1c72:	a5 e5       	ldi	r26, 0x55	; 85
    1c74:	b0 e0       	ldi	r27, 0x00	; 0
    1c76:	e5 e5       	ldi	r30, 0x55	; 85
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	80 81       	ld	r24, Z
    1c7c:	8d 7f       	andi	r24, 0xFD	; 253
    1c7e:	8c 93       	st	X, r24
    1c80:	93 c0       	rjmp	.+294    	; 0x1da8 <EXTI_vSenseControl+0x194>
				}
				else if(Loc_u8Mode==Rising_Egde){
    1c82:	8a 81       	ldd	r24, Y+2	; 0x02
    1c84:	82 30       	cpi	r24, 0x02	; 2
    1c86:	79 f4       	brne	.+30     	; 0x1ca6 <EXTI_vSenseControl+0x92>
					SET_BIT(MCUCR,0);
    1c88:	a5 e5       	ldi	r26, 0x55	; 85
    1c8a:	b0 e0       	ldi	r27, 0x00	; 0
    1c8c:	e5 e5       	ldi	r30, 0x55	; 85
    1c8e:	f0 e0       	ldi	r31, 0x00	; 0
    1c90:	80 81       	ld	r24, Z
    1c92:	81 60       	ori	r24, 0x01	; 1
    1c94:	8c 93       	st	X, r24
					SET_BIT(MCUCR,1);
    1c96:	a5 e5       	ldi	r26, 0x55	; 85
    1c98:	b0 e0       	ldi	r27, 0x00	; 0
    1c9a:	e5 e5       	ldi	r30, 0x55	; 85
    1c9c:	f0 e0       	ldi	r31, 0x00	; 0
    1c9e:	80 81       	ld	r24, Z
    1ca0:	82 60       	ori	r24, 0x02	; 2
    1ca2:	8c 93       	st	X, r24
    1ca4:	81 c0       	rjmp	.+258    	; 0x1da8 <EXTI_vSenseControl+0x194>
				}
				else if(Loc_u8Mode==Falling_Edge){
    1ca6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca8:	83 30       	cpi	r24, 0x03	; 3
    1caa:	09 f0       	breq	.+2      	; 0x1cae <EXTI_vSenseControl+0x9a>
    1cac:	7d c0       	rjmp	.+250    	; 0x1da8 <EXTI_vSenseControl+0x194>
					CLR_BIT(MCUCR,0);
    1cae:	a5 e5       	ldi	r26, 0x55	; 85
    1cb0:	b0 e0       	ldi	r27, 0x00	; 0
    1cb2:	e5 e5       	ldi	r30, 0x55	; 85
    1cb4:	f0 e0       	ldi	r31, 0x00	; 0
    1cb6:	80 81       	ld	r24, Z
    1cb8:	8e 7f       	andi	r24, 0xFE	; 254
    1cba:	8c 93       	st	X, r24
					SET_BIT(MCUCR,1);
    1cbc:	a5 e5       	ldi	r26, 0x55	; 85
    1cbe:	b0 e0       	ldi	r27, 0x00	; 0
    1cc0:	e5 e5       	ldi	r30, 0x55	; 85
    1cc2:	f0 e0       	ldi	r31, 0x00	; 0
    1cc4:	80 81       	ld	r24, Z
    1cc6:	82 60       	ori	r24, 0x02	; 2
    1cc8:	8c 93       	st	X, r24
    1cca:	6e c0       	rjmp	.+220    	; 0x1da8 <EXTI_vSenseControl+0x194>
			else{
				//do nothing
			}
		}

		else if(Loc_u8InterruptNumber==INT1){
    1ccc:	89 81       	ldd	r24, Y+1	; 0x01
    1cce:	81 30       	cpi	r24, 0x01	; 1
    1cd0:	09 f0       	breq	.+2      	; 0x1cd4 <EXTI_vSenseControl+0xc0>
    1cd2:	4c c0       	rjmp	.+152    	; 0x1d6c <EXTI_vSenseControl+0x158>
			if(Loc_u8Mode<=Falling_Edge){
    1cd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd6:	84 30       	cpi	r24, 0x04	; 4
    1cd8:	08 f0       	brcs	.+2      	; 0x1cdc <EXTI_vSenseControl+0xc8>
    1cda:	66 c0       	rjmp	.+204    	; 0x1da8 <EXTI_vSenseControl+0x194>
				if(Loc_u8Mode==Low_Level){
    1cdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cde:	88 23       	and	r24, r24
    1ce0:	79 f4       	brne	.+30     	; 0x1d00 <EXTI_vSenseControl+0xec>
					CLR_BIT(MCUCR,2);
    1ce2:	a5 e5       	ldi	r26, 0x55	; 85
    1ce4:	b0 e0       	ldi	r27, 0x00	; 0
    1ce6:	e5 e5       	ldi	r30, 0x55	; 85
    1ce8:	f0 e0       	ldi	r31, 0x00	; 0
    1cea:	80 81       	ld	r24, Z
    1cec:	8b 7f       	andi	r24, 0xFB	; 251
    1cee:	8c 93       	st	X, r24
					CLR_BIT(MCUCR,3);
    1cf0:	a5 e5       	ldi	r26, 0x55	; 85
    1cf2:	b0 e0       	ldi	r27, 0x00	; 0
    1cf4:	e5 e5       	ldi	r30, 0x55	; 85
    1cf6:	f0 e0       	ldi	r31, 0x00	; 0
    1cf8:	80 81       	ld	r24, Z
    1cfa:	87 7f       	andi	r24, 0xF7	; 247
    1cfc:	8c 93       	st	X, r24
    1cfe:	54 c0       	rjmp	.+168    	; 0x1da8 <EXTI_vSenseControl+0x194>
				}
				else if(Loc_u8Mode==Any_Change){
    1d00:	8a 81       	ldd	r24, Y+2	; 0x02
    1d02:	81 30       	cpi	r24, 0x01	; 1
    1d04:	79 f4       	brne	.+30     	; 0x1d24 <EXTI_vSenseControl+0x110>
					SET_BIT(MCUCR,2);
    1d06:	a5 e5       	ldi	r26, 0x55	; 85
    1d08:	b0 e0       	ldi	r27, 0x00	; 0
    1d0a:	e5 e5       	ldi	r30, 0x55	; 85
    1d0c:	f0 e0       	ldi	r31, 0x00	; 0
    1d0e:	80 81       	ld	r24, Z
    1d10:	84 60       	ori	r24, 0x04	; 4
    1d12:	8c 93       	st	X, r24
					CLR_BIT(MCUCR,3);
    1d14:	a5 e5       	ldi	r26, 0x55	; 85
    1d16:	b0 e0       	ldi	r27, 0x00	; 0
    1d18:	e5 e5       	ldi	r30, 0x55	; 85
    1d1a:	f0 e0       	ldi	r31, 0x00	; 0
    1d1c:	80 81       	ld	r24, Z
    1d1e:	87 7f       	andi	r24, 0xF7	; 247
    1d20:	8c 93       	st	X, r24
    1d22:	42 c0       	rjmp	.+132    	; 0x1da8 <EXTI_vSenseControl+0x194>
				}
				else if(Loc_u8Mode==Rising_Egde){
    1d24:	8a 81       	ldd	r24, Y+2	; 0x02
    1d26:	82 30       	cpi	r24, 0x02	; 2
    1d28:	79 f4       	brne	.+30     	; 0x1d48 <EXTI_vSenseControl+0x134>
					SET_BIT(MCUCR,2);
    1d2a:	a5 e5       	ldi	r26, 0x55	; 85
    1d2c:	b0 e0       	ldi	r27, 0x00	; 0
    1d2e:	e5 e5       	ldi	r30, 0x55	; 85
    1d30:	f0 e0       	ldi	r31, 0x00	; 0
    1d32:	80 81       	ld	r24, Z
    1d34:	84 60       	ori	r24, 0x04	; 4
    1d36:	8c 93       	st	X, r24
					SET_BIT(MCUCR,3);
    1d38:	a5 e5       	ldi	r26, 0x55	; 85
    1d3a:	b0 e0       	ldi	r27, 0x00	; 0
    1d3c:	e5 e5       	ldi	r30, 0x55	; 85
    1d3e:	f0 e0       	ldi	r31, 0x00	; 0
    1d40:	80 81       	ld	r24, Z
    1d42:	88 60       	ori	r24, 0x08	; 8
    1d44:	8c 93       	st	X, r24
    1d46:	30 c0       	rjmp	.+96     	; 0x1da8 <EXTI_vSenseControl+0x194>
				}
				else if(Loc_u8Mode==Falling_Edge){
    1d48:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4a:	83 30       	cpi	r24, 0x03	; 3
    1d4c:	69 f5       	brne	.+90     	; 0x1da8 <EXTI_vSenseControl+0x194>
					CLR_BIT(MCUCR,2);
    1d4e:	a5 e5       	ldi	r26, 0x55	; 85
    1d50:	b0 e0       	ldi	r27, 0x00	; 0
    1d52:	e5 e5       	ldi	r30, 0x55	; 85
    1d54:	f0 e0       	ldi	r31, 0x00	; 0
    1d56:	80 81       	ld	r24, Z
    1d58:	8b 7f       	andi	r24, 0xFB	; 251
    1d5a:	8c 93       	st	X, r24
					SET_BIT(MCUCR,3);
    1d5c:	a5 e5       	ldi	r26, 0x55	; 85
    1d5e:	b0 e0       	ldi	r27, 0x00	; 0
    1d60:	e5 e5       	ldi	r30, 0x55	; 85
    1d62:	f0 e0       	ldi	r31, 0x00	; 0
    1d64:	80 81       	ld	r24, Z
    1d66:	88 60       	ori	r24, 0x08	; 8
    1d68:	8c 93       	st	X, r24
    1d6a:	1e c0       	rjmp	.+60     	; 0x1da8 <EXTI_vSenseControl+0x194>
			}
			else{
				//do nothing
			}
		}
		else if(Loc_u8InterruptNumber==INT2){
    1d6c:	89 81       	ldd	r24, Y+1	; 0x01
    1d6e:	82 30       	cpi	r24, 0x02	; 2
    1d70:	d9 f4       	brne	.+54     	; 0x1da8 <EXTI_vSenseControl+0x194>
			if(Loc_u8Mode==Falling_Edge||Loc_u8Mode==Rising_Egde){
    1d72:	8a 81       	ldd	r24, Y+2	; 0x02
    1d74:	83 30       	cpi	r24, 0x03	; 3
    1d76:	19 f0       	breq	.+6      	; 0x1d7e <EXTI_vSenseControl+0x16a>
    1d78:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7a:	82 30       	cpi	r24, 0x02	; 2
    1d7c:	a9 f4       	brne	.+42     	; 0x1da8 <EXTI_vSenseControl+0x194>
				if(Loc_u8Mode==Rising_Egde){
    1d7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d80:	82 30       	cpi	r24, 0x02	; 2
    1d82:	41 f4       	brne	.+16     	; 0x1d94 <EXTI_vSenseControl+0x180>
					SET_BIT(MCUCSR,6);
    1d84:	a4 e5       	ldi	r26, 0x54	; 84
    1d86:	b0 e0       	ldi	r27, 0x00	; 0
    1d88:	e4 e5       	ldi	r30, 0x54	; 84
    1d8a:	f0 e0       	ldi	r31, 0x00	; 0
    1d8c:	80 81       	ld	r24, Z
    1d8e:	80 64       	ori	r24, 0x40	; 64
    1d90:	8c 93       	st	X, r24
    1d92:	0a c0       	rjmp	.+20     	; 0x1da8 <EXTI_vSenseControl+0x194>
				}
				else if(Loc_u8Mode==Falling_Edge){
    1d94:	8a 81       	ldd	r24, Y+2	; 0x02
    1d96:	83 30       	cpi	r24, 0x03	; 3
    1d98:	39 f4       	brne	.+14     	; 0x1da8 <EXTI_vSenseControl+0x194>
					CLR_BIT(MCUCSR,6);
    1d9a:	a4 e5       	ldi	r26, 0x54	; 84
    1d9c:	b0 e0       	ldi	r27, 0x00	; 0
    1d9e:	e4 e5       	ldi	r30, 0x54	; 84
    1da0:	f0 e0       	ldi	r31, 0x00	; 0
    1da2:	80 81       	ld	r24, Z
    1da4:	8f 7b       	andi	r24, 0xBF	; 191
    1da6:	8c 93       	st	X, r24
	}
	else{
		//do nothing
	}

}
    1da8:	0f 90       	pop	r0
    1daa:	0f 90       	pop	r0
    1dac:	cf 91       	pop	r28
    1dae:	df 91       	pop	r29
    1db0:	08 95       	ret

00001db2 <EXTI_INT0CallBack>:
void EXTI_INT0CallBack(void(*ptr)(void)){
    1db2:	df 93       	push	r29
    1db4:	cf 93       	push	r28
    1db6:	00 d0       	rcall	.+0      	; 0x1db8 <EXTI_INT0CallBack+0x6>
    1db8:	cd b7       	in	r28, 0x3d	; 61
    1dba:	de b7       	in	r29, 0x3e	; 62
    1dbc:	9a 83       	std	Y+2, r25	; 0x02
    1dbe:	89 83       	std	Y+1, r24	; 0x01
	if(ptr!='\0'){
    1dc0:	89 81       	ldd	r24, Y+1	; 0x01
    1dc2:	9a 81       	ldd	r25, Y+2	; 0x02
    1dc4:	00 97       	sbiw	r24, 0x00	; 0
    1dc6:	31 f0       	breq	.+12     	; 0x1dd4 <EXTI_INT0CallBack+0x22>
		Gptr0=ptr;
    1dc8:	89 81       	ldd	r24, Y+1	; 0x01
    1dca:	9a 81       	ldd	r25, Y+2	; 0x02
    1dcc:	90 93 e2 00 	sts	0x00E2, r25
    1dd0:	80 93 e1 00 	sts	0x00E1, r24
	}
}
    1dd4:	0f 90       	pop	r0
    1dd6:	0f 90       	pop	r0
    1dd8:	cf 91       	pop	r28
    1dda:	df 91       	pop	r29
    1ddc:	08 95       	ret

00001dde <EXTI_INT1CallBack>:
void EXTI_INT1CallBack(void(*ptr)(void)){
    1dde:	df 93       	push	r29
    1de0:	cf 93       	push	r28
    1de2:	00 d0       	rcall	.+0      	; 0x1de4 <EXTI_INT1CallBack+0x6>
    1de4:	cd b7       	in	r28, 0x3d	; 61
    1de6:	de b7       	in	r29, 0x3e	; 62
    1de8:	9a 83       	std	Y+2, r25	; 0x02
    1dea:	89 83       	std	Y+1, r24	; 0x01
	if(ptr!='\0'){
    1dec:	89 81       	ldd	r24, Y+1	; 0x01
    1dee:	9a 81       	ldd	r25, Y+2	; 0x02
    1df0:	00 97       	sbiw	r24, 0x00	; 0
    1df2:	31 f0       	breq	.+12     	; 0x1e00 <EXTI_INT1CallBack+0x22>
		Gptr1=ptr;
    1df4:	89 81       	ldd	r24, Y+1	; 0x01
    1df6:	9a 81       	ldd	r25, Y+2	; 0x02
    1df8:	90 93 e4 00 	sts	0x00E4, r25
    1dfc:	80 93 e3 00 	sts	0x00E3, r24
	}
}
    1e00:	0f 90       	pop	r0
    1e02:	0f 90       	pop	r0
    1e04:	cf 91       	pop	r28
    1e06:	df 91       	pop	r29
    1e08:	08 95       	ret

00001e0a <EXTI_INT2CallBack>:
void EXTI_INT2CallBack(void(*ptr)(void)){
    1e0a:	df 93       	push	r29
    1e0c:	cf 93       	push	r28
    1e0e:	00 d0       	rcall	.+0      	; 0x1e10 <EXTI_INT2CallBack+0x6>
    1e10:	cd b7       	in	r28, 0x3d	; 61
    1e12:	de b7       	in	r29, 0x3e	; 62
    1e14:	9a 83       	std	Y+2, r25	; 0x02
    1e16:	89 83       	std	Y+1, r24	; 0x01
	if(ptr!='\0'){
    1e18:	89 81       	ldd	r24, Y+1	; 0x01
    1e1a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e1c:	00 97       	sbiw	r24, 0x00	; 0
    1e1e:	31 f0       	breq	.+12     	; 0x1e2c <EXTI_INT2CallBack+0x22>
		Gptr2=ptr;
    1e20:	89 81       	ldd	r24, Y+1	; 0x01
    1e22:	9a 81       	ldd	r25, Y+2	; 0x02
    1e24:	90 93 e6 00 	sts	0x00E6, r25
    1e28:	80 93 e5 00 	sts	0x00E5, r24
	}
}
    1e2c:	0f 90       	pop	r0
    1e2e:	0f 90       	pop	r0
    1e30:	cf 91       	pop	r28
    1e32:	df 91       	pop	r29
    1e34:	08 95       	ret

00001e36 <__vector_1>:
ISR(INT0_vect){
    1e36:	1f 92       	push	r1
    1e38:	0f 92       	push	r0
    1e3a:	0f b6       	in	r0, 0x3f	; 63
    1e3c:	0f 92       	push	r0
    1e3e:	11 24       	eor	r1, r1
    1e40:	2f 93       	push	r18
    1e42:	3f 93       	push	r19
    1e44:	4f 93       	push	r20
    1e46:	5f 93       	push	r21
    1e48:	6f 93       	push	r22
    1e4a:	7f 93       	push	r23
    1e4c:	8f 93       	push	r24
    1e4e:	9f 93       	push	r25
    1e50:	af 93       	push	r26
    1e52:	bf 93       	push	r27
    1e54:	ef 93       	push	r30
    1e56:	ff 93       	push	r31
    1e58:	df 93       	push	r29
    1e5a:	cf 93       	push	r28
    1e5c:	cd b7       	in	r28, 0x3d	; 61
    1e5e:	de b7       	in	r29, 0x3e	; 62
	if(Gptr0!='\0'){
    1e60:	80 91 e1 00 	lds	r24, 0x00E1
    1e64:	90 91 e2 00 	lds	r25, 0x00E2
    1e68:	00 97       	sbiw	r24, 0x00	; 0
    1e6a:	29 f0       	breq	.+10     	; 0x1e76 <__vector_1+0x40>
		Gptr0();
    1e6c:	e0 91 e1 00 	lds	r30, 0x00E1
    1e70:	f0 91 e2 00 	lds	r31, 0x00E2
    1e74:	09 95       	icall
	}
}
    1e76:	cf 91       	pop	r28
    1e78:	df 91       	pop	r29
    1e7a:	ff 91       	pop	r31
    1e7c:	ef 91       	pop	r30
    1e7e:	bf 91       	pop	r27
    1e80:	af 91       	pop	r26
    1e82:	9f 91       	pop	r25
    1e84:	8f 91       	pop	r24
    1e86:	7f 91       	pop	r23
    1e88:	6f 91       	pop	r22
    1e8a:	5f 91       	pop	r21
    1e8c:	4f 91       	pop	r20
    1e8e:	3f 91       	pop	r19
    1e90:	2f 91       	pop	r18
    1e92:	0f 90       	pop	r0
    1e94:	0f be       	out	0x3f, r0	; 63
    1e96:	0f 90       	pop	r0
    1e98:	1f 90       	pop	r1
    1e9a:	18 95       	reti

00001e9c <__vector_2>:
ISR(INT1_vect){
    1e9c:	1f 92       	push	r1
    1e9e:	0f 92       	push	r0
    1ea0:	0f b6       	in	r0, 0x3f	; 63
    1ea2:	0f 92       	push	r0
    1ea4:	11 24       	eor	r1, r1
    1ea6:	2f 93       	push	r18
    1ea8:	3f 93       	push	r19
    1eaa:	4f 93       	push	r20
    1eac:	5f 93       	push	r21
    1eae:	6f 93       	push	r22
    1eb0:	7f 93       	push	r23
    1eb2:	8f 93       	push	r24
    1eb4:	9f 93       	push	r25
    1eb6:	af 93       	push	r26
    1eb8:	bf 93       	push	r27
    1eba:	ef 93       	push	r30
    1ebc:	ff 93       	push	r31
    1ebe:	df 93       	push	r29
    1ec0:	cf 93       	push	r28
    1ec2:	cd b7       	in	r28, 0x3d	; 61
    1ec4:	de b7       	in	r29, 0x3e	; 62
	if(Gptr1!='\0'){
    1ec6:	80 91 e3 00 	lds	r24, 0x00E3
    1eca:	90 91 e4 00 	lds	r25, 0x00E4
    1ece:	00 97       	sbiw	r24, 0x00	; 0
    1ed0:	29 f0       	breq	.+10     	; 0x1edc <__vector_2+0x40>
		Gptr1();
    1ed2:	e0 91 e3 00 	lds	r30, 0x00E3
    1ed6:	f0 91 e4 00 	lds	r31, 0x00E4
    1eda:	09 95       	icall
	}
}
    1edc:	cf 91       	pop	r28
    1ede:	df 91       	pop	r29
    1ee0:	ff 91       	pop	r31
    1ee2:	ef 91       	pop	r30
    1ee4:	bf 91       	pop	r27
    1ee6:	af 91       	pop	r26
    1ee8:	9f 91       	pop	r25
    1eea:	8f 91       	pop	r24
    1eec:	7f 91       	pop	r23
    1eee:	6f 91       	pop	r22
    1ef0:	5f 91       	pop	r21
    1ef2:	4f 91       	pop	r20
    1ef4:	3f 91       	pop	r19
    1ef6:	2f 91       	pop	r18
    1ef8:	0f 90       	pop	r0
    1efa:	0f be       	out	0x3f, r0	; 63
    1efc:	0f 90       	pop	r0
    1efe:	1f 90       	pop	r1
    1f00:	18 95       	reti

00001f02 <INT2_vect>:
ISR(INT2_vect){
    1f02:	1f 92       	push	r1
    1f04:	0f 92       	push	r0
    1f06:	0f b6       	in	r0, 0x3f	; 63
    1f08:	0f 92       	push	r0
    1f0a:	11 24       	eor	r1, r1
    1f0c:	2f 93       	push	r18
    1f0e:	3f 93       	push	r19
    1f10:	4f 93       	push	r20
    1f12:	5f 93       	push	r21
    1f14:	6f 93       	push	r22
    1f16:	7f 93       	push	r23
    1f18:	8f 93       	push	r24
    1f1a:	9f 93       	push	r25
    1f1c:	af 93       	push	r26
    1f1e:	bf 93       	push	r27
    1f20:	ef 93       	push	r30
    1f22:	ff 93       	push	r31
    1f24:	df 93       	push	r29
    1f26:	cf 93       	push	r28
    1f28:	cd b7       	in	r28, 0x3d	; 61
    1f2a:	de b7       	in	r29, 0x3e	; 62
	if(Gptr2!='\0'){
    1f2c:	80 91 e5 00 	lds	r24, 0x00E5
    1f30:	90 91 e6 00 	lds	r25, 0x00E6
    1f34:	00 97       	sbiw	r24, 0x00	; 0
    1f36:	29 f0       	breq	.+10     	; 0x1f42 <INT2_vect+0x40>
		Gptr2();
    1f38:	e0 91 e5 00 	lds	r30, 0x00E5
    1f3c:	f0 91 e6 00 	lds	r31, 0x00E6
    1f40:	09 95       	icall
	}
}
    1f42:	cf 91       	pop	r28
    1f44:	df 91       	pop	r29
    1f46:	ff 91       	pop	r31
    1f48:	ef 91       	pop	r30
    1f4a:	bf 91       	pop	r27
    1f4c:	af 91       	pop	r26
    1f4e:	9f 91       	pop	r25
    1f50:	8f 91       	pop	r24
    1f52:	7f 91       	pop	r23
    1f54:	6f 91       	pop	r22
    1f56:	5f 91       	pop	r21
    1f58:	4f 91       	pop	r20
    1f5a:	3f 91       	pop	r19
    1f5c:	2f 91       	pop	r18
    1f5e:	0f 90       	pop	r0
    1f60:	0f be       	out	0x3f, r0	; 63
    1f62:	0f 90       	pop	r0
    1f64:	1f 90       	pop	r1
    1f66:	18 95       	reti

00001f68 <DIO_vSetPortDirection>:

 * \Parameters (in) : Loc_u8PortID   PORT wanted to change it's Direction
 * 					Loc_u8PortDirection	    choose direction Input or Output
 * \Parameters (out): None
 *******************************************************************************/
void DIO_vSetPortDirection(u8 Loc_u8PortID, u8 Loc_u8PortDirection){
    1f68:	df 93       	push	r29
    1f6a:	cf 93       	push	r28
    1f6c:	00 d0       	rcall	.+0      	; 0x1f6e <DIO_vSetPortDirection+0x6>
    1f6e:	cd b7       	in	r28, 0x3d	; 61
    1f70:	de b7       	in	r29, 0x3e	; 62
    1f72:	89 83       	std	Y+1, r24	; 0x01
    1f74:	6a 83       	std	Y+2, r22	; 0x02
	if(Loc_u8PortID<=PortD){
    1f76:	89 81       	ldd	r24, Y+1	; 0x01
    1f78:	84 30       	cpi	r24, 0x04	; 4
    1f7a:	f8 f4       	brcc	.+62     	; 0x1fba <DIO_vSetPortDirection+0x52>
		if(Loc_u8PortID==PortA){
    1f7c:	89 81       	ldd	r24, Y+1	; 0x01
    1f7e:	88 23       	and	r24, r24
    1f80:	29 f4       	brne	.+10     	; 0x1f8c <DIO_vSetPortDirection+0x24>
			DDRA = Loc_u8PortDirection;
    1f82:	ea e3       	ldi	r30, 0x3A	; 58
    1f84:	f0 e0       	ldi	r31, 0x00	; 0
    1f86:	8a 81       	ldd	r24, Y+2	; 0x02
    1f88:	80 83       	st	Z, r24
    1f8a:	17 c0       	rjmp	.+46     	; 0x1fba <DIO_vSetPortDirection+0x52>
		}
		else if(Loc_u8PortID==PortB){
    1f8c:	89 81       	ldd	r24, Y+1	; 0x01
    1f8e:	81 30       	cpi	r24, 0x01	; 1
    1f90:	29 f4       	brne	.+10     	; 0x1f9c <DIO_vSetPortDirection+0x34>
			DDRB = Loc_u8PortDirection;
    1f92:	e7 e3       	ldi	r30, 0x37	; 55
    1f94:	f0 e0       	ldi	r31, 0x00	; 0
    1f96:	8a 81       	ldd	r24, Y+2	; 0x02
    1f98:	80 83       	st	Z, r24
    1f9a:	0f c0       	rjmp	.+30     	; 0x1fba <DIO_vSetPortDirection+0x52>
		}
		else if(Loc_u8PortID==PortC){
    1f9c:	89 81       	ldd	r24, Y+1	; 0x01
    1f9e:	82 30       	cpi	r24, 0x02	; 2
    1fa0:	29 f4       	brne	.+10     	; 0x1fac <DIO_vSetPortDirection+0x44>
			DDRC = Loc_u8PortDirection;
    1fa2:	e4 e3       	ldi	r30, 0x34	; 52
    1fa4:	f0 e0       	ldi	r31, 0x00	; 0
    1fa6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa8:	80 83       	st	Z, r24
    1faa:	07 c0       	rjmp	.+14     	; 0x1fba <DIO_vSetPortDirection+0x52>
		}
		else if(Loc_u8PortID==PortD){
    1fac:	89 81       	ldd	r24, Y+1	; 0x01
    1fae:	83 30       	cpi	r24, 0x03	; 3
    1fb0:	21 f4       	brne	.+8      	; 0x1fba <DIO_vSetPortDirection+0x52>
			DDRD = Loc_u8PortDirection;
    1fb2:	e1 e3       	ldi	r30, 0x31	; 49
    1fb4:	f0 e0       	ldi	r31, 0x00	; 0
    1fb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb8:	80 83       	st	Z, r24
		}
	}
	else{
		//do nothing
	}
}
    1fba:	0f 90       	pop	r0
    1fbc:	0f 90       	pop	r0
    1fbe:	cf 91       	pop	r28
    1fc0:	df 91       	pop	r29
    1fc2:	08 95       	ret

00001fc4 <DIO_vSetPortValue>:

* \Parameters (in) : Loc_u8PortID   PORT wanted to change it's value
* 					Loc_u8PortDirection	    choose value High or Low
* \Parameters (out): None
*******************************************************************************/
void DIO_vSetPortValue(u8 Loc_u8PortID, u8 Loc_u8PortValue){
    1fc4:	df 93       	push	r29
    1fc6:	cf 93       	push	r28
    1fc8:	00 d0       	rcall	.+0      	; 0x1fca <DIO_vSetPortValue+0x6>
    1fca:	cd b7       	in	r28, 0x3d	; 61
    1fcc:	de b7       	in	r29, 0x3e	; 62
    1fce:	89 83       	std	Y+1, r24	; 0x01
    1fd0:	6a 83       	std	Y+2, r22	; 0x02
	if(Loc_u8PortID<=PortD){
    1fd2:	89 81       	ldd	r24, Y+1	; 0x01
    1fd4:	84 30       	cpi	r24, 0x04	; 4
    1fd6:	f8 f4       	brcc	.+62     	; 0x2016 <DIO_vSetPortValue+0x52>
		if(Loc_u8PortID==PortA){
    1fd8:	89 81       	ldd	r24, Y+1	; 0x01
    1fda:	88 23       	and	r24, r24
    1fdc:	29 f4       	brne	.+10     	; 0x1fe8 <DIO_vSetPortValue+0x24>
			PORTA = Loc_u8PortValue;
    1fde:	eb e3       	ldi	r30, 0x3B	; 59
    1fe0:	f0 e0       	ldi	r31, 0x00	; 0
    1fe2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe4:	80 83       	st	Z, r24
    1fe6:	17 c0       	rjmp	.+46     	; 0x2016 <DIO_vSetPortValue+0x52>
		}
		else if(Loc_u8PortID==PortB){
    1fe8:	89 81       	ldd	r24, Y+1	; 0x01
    1fea:	81 30       	cpi	r24, 0x01	; 1
    1fec:	29 f4       	brne	.+10     	; 0x1ff8 <DIO_vSetPortValue+0x34>
			PORTB = Loc_u8PortValue;
    1fee:	e8 e3       	ldi	r30, 0x38	; 56
    1ff0:	f0 e0       	ldi	r31, 0x00	; 0
    1ff2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff4:	80 83       	st	Z, r24
    1ff6:	0f c0       	rjmp	.+30     	; 0x2016 <DIO_vSetPortValue+0x52>
		}
		else if(Loc_u8PortID==PortC){
    1ff8:	89 81       	ldd	r24, Y+1	; 0x01
    1ffa:	82 30       	cpi	r24, 0x02	; 2
    1ffc:	29 f4       	brne	.+10     	; 0x2008 <DIO_vSetPortValue+0x44>
			PORTC = Loc_u8PortValue;
    1ffe:	e5 e3       	ldi	r30, 0x35	; 53
    2000:	f0 e0       	ldi	r31, 0x00	; 0
    2002:	8a 81       	ldd	r24, Y+2	; 0x02
    2004:	80 83       	st	Z, r24
    2006:	07 c0       	rjmp	.+14     	; 0x2016 <DIO_vSetPortValue+0x52>
		}
		else if(Loc_u8PortID==PortD){
    2008:	89 81       	ldd	r24, Y+1	; 0x01
    200a:	83 30       	cpi	r24, 0x03	; 3
    200c:	21 f4       	brne	.+8      	; 0x2016 <DIO_vSetPortValue+0x52>
			PORTD = Loc_u8PortValue;
    200e:	e2 e3       	ldi	r30, 0x32	; 50
    2010:	f0 e0       	ldi	r31, 0x00	; 0
    2012:	8a 81       	ldd	r24, Y+2	; 0x02
    2014:	80 83       	st	Z, r24
		}
	}
	else{
		//do nothing
	}
}
    2016:	0f 90       	pop	r0
    2018:	0f 90       	pop	r0
    201a:	cf 91       	pop	r28
    201c:	df 91       	pop	r29
    201e:	08 95       	ret

00002020 <DIO_u8PGetPortValue>:

* \Parameters (in) : Loc_u8PortID   PORT wanted to Read it's value
* \Parameters (out): PINx
*  \Return value:   : unsigned char
*******************************************************************************/
u8 DIO_u8PGetPortValue(u8 Loc_u8PortID){
    2020:	df 93       	push	r29
    2022:	cf 93       	push	r28
    2024:	00 d0       	rcall	.+0      	; 0x2026 <DIO_u8PGetPortValue+0x6>
    2026:	cd b7       	in	r28, 0x3d	; 61
    2028:	de b7       	in	r29, 0x3e	; 62
    202a:	89 83       	std	Y+1, r24	; 0x01
	if(Loc_u8PortID<=PortD){
    202c:	89 81       	ldd	r24, Y+1	; 0x01
    202e:	84 30       	cpi	r24, 0x04	; 4
    2030:	00 f5       	brcc	.+64     	; 0x2072 <DIO_u8PGetPortValue+0x52>
		if(Loc_u8PortID==PortA){
    2032:	89 81       	ldd	r24, Y+1	; 0x01
    2034:	88 23       	and	r24, r24
    2036:	29 f4       	brne	.+10     	; 0x2042 <DIO_u8PGetPortValue+0x22>
			return PINA;
    2038:	e9 e3       	ldi	r30, 0x39	; 57
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	80 81       	ld	r24, Z
    203e:	8a 83       	std	Y+2, r24	; 0x02
    2040:	1a c0       	rjmp	.+52     	; 0x2076 <DIO_u8PGetPortValue+0x56>
		}
		else if(Loc_u8PortID==PortB){
    2042:	89 81       	ldd	r24, Y+1	; 0x01
    2044:	81 30       	cpi	r24, 0x01	; 1
    2046:	29 f4       	brne	.+10     	; 0x2052 <DIO_u8PGetPortValue+0x32>
			return PINB;
    2048:	e6 e3       	ldi	r30, 0x36	; 54
    204a:	f0 e0       	ldi	r31, 0x00	; 0
    204c:	80 81       	ld	r24, Z
    204e:	8a 83       	std	Y+2, r24	; 0x02
    2050:	12 c0       	rjmp	.+36     	; 0x2076 <DIO_u8PGetPortValue+0x56>
		}
		else if(Loc_u8PortID==PortC){
    2052:	89 81       	ldd	r24, Y+1	; 0x01
    2054:	82 30       	cpi	r24, 0x02	; 2
    2056:	29 f4       	brne	.+10     	; 0x2062 <DIO_u8PGetPortValue+0x42>
			return PINC;
    2058:	e3 e3       	ldi	r30, 0x33	; 51
    205a:	f0 e0       	ldi	r31, 0x00	; 0
    205c:	80 81       	ld	r24, Z
    205e:	8a 83       	std	Y+2, r24	; 0x02
    2060:	0a c0       	rjmp	.+20     	; 0x2076 <DIO_u8PGetPortValue+0x56>
		}
		else if(Loc_u8PortID==PortD){
    2062:	89 81       	ldd	r24, Y+1	; 0x01
    2064:	83 30       	cpi	r24, 0x03	; 3
    2066:	29 f4       	brne	.+10     	; 0x2072 <DIO_u8PGetPortValue+0x52>
			return PIND;
    2068:	e0 e3       	ldi	r30, 0x30	; 48
    206a:	f0 e0       	ldi	r31, 0x00	; 0
    206c:	80 81       	ld	r24, Z
    206e:	8a 83       	std	Y+2, r24	; 0x02
    2070:	02 c0       	rjmp	.+4      	; 0x2076 <DIO_u8PGetPortValue+0x56>
		}
	}
	else{
		//do nothing
	}
	return 0xff;
    2072:	8f ef       	ldi	r24, 0xFF	; 255
    2074:	8a 83       	std	Y+2, r24	; 0x02
    2076:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2078:	0f 90       	pop	r0
    207a:	0f 90       	pop	r0
    207c:	cf 91       	pop	r28
    207e:	df 91       	pop	r29
    2080:	08 95       	ret

00002082 <DIO_vTogPortValue>:
*

* \Parameters (in) : Loc_u8PortID  PORT wanted to Toggle it's value
* \Parameters (out): None
*******************************************************************************/
void DIO_vTogPortValue(u8 Loc_u8PortID){
    2082:	df 93       	push	r29
    2084:	cf 93       	push	r28
    2086:	0f 92       	push	r0
    2088:	cd b7       	in	r28, 0x3d	; 61
    208a:	de b7       	in	r29, 0x3e	; 62
    208c:	89 83       	std	Y+1, r24	; 0x01
	if(Loc_u8PortID<=PortD){
    208e:	89 81       	ldd	r24, Y+1	; 0x01
    2090:	84 30       	cpi	r24, 0x04	; 4
    2092:	58 f5       	brcc	.+86     	; 0x20ea <DIO_vTogPortValue+0x68>
		if(Loc_u8PortID==PortA){
    2094:	89 81       	ldd	r24, Y+1	; 0x01
    2096:	88 23       	and	r24, r24
    2098:	41 f4       	brne	.+16     	; 0x20aa <DIO_vTogPortValue+0x28>
			PORTA = ~PORTA;
    209a:	ab e3       	ldi	r26, 0x3B	; 59
    209c:	b0 e0       	ldi	r27, 0x00	; 0
    209e:	eb e3       	ldi	r30, 0x3B	; 59
    20a0:	f0 e0       	ldi	r31, 0x00	; 0
    20a2:	80 81       	ld	r24, Z
    20a4:	80 95       	com	r24
    20a6:	8c 93       	st	X, r24
    20a8:	20 c0       	rjmp	.+64     	; 0x20ea <DIO_vTogPortValue+0x68>
		}
		else if(Loc_u8PortID==PortB){
    20aa:	89 81       	ldd	r24, Y+1	; 0x01
    20ac:	81 30       	cpi	r24, 0x01	; 1
    20ae:	41 f4       	brne	.+16     	; 0x20c0 <DIO_vTogPortValue+0x3e>
			PORTB = ~PORTB;
    20b0:	a8 e3       	ldi	r26, 0x38	; 56
    20b2:	b0 e0       	ldi	r27, 0x00	; 0
    20b4:	e8 e3       	ldi	r30, 0x38	; 56
    20b6:	f0 e0       	ldi	r31, 0x00	; 0
    20b8:	80 81       	ld	r24, Z
    20ba:	80 95       	com	r24
    20bc:	8c 93       	st	X, r24
    20be:	15 c0       	rjmp	.+42     	; 0x20ea <DIO_vTogPortValue+0x68>
		}
		else if(Loc_u8PortID==PortC){
    20c0:	89 81       	ldd	r24, Y+1	; 0x01
    20c2:	82 30       	cpi	r24, 0x02	; 2
    20c4:	41 f4       	brne	.+16     	; 0x20d6 <DIO_vTogPortValue+0x54>
			PORTC = ~PORTC;
    20c6:	a5 e3       	ldi	r26, 0x35	; 53
    20c8:	b0 e0       	ldi	r27, 0x00	; 0
    20ca:	e5 e3       	ldi	r30, 0x35	; 53
    20cc:	f0 e0       	ldi	r31, 0x00	; 0
    20ce:	80 81       	ld	r24, Z
    20d0:	80 95       	com	r24
    20d2:	8c 93       	st	X, r24
    20d4:	0a c0       	rjmp	.+20     	; 0x20ea <DIO_vTogPortValue+0x68>
		}
		else if(Loc_u8PortID==PortD){
    20d6:	89 81       	ldd	r24, Y+1	; 0x01
    20d8:	83 30       	cpi	r24, 0x03	; 3
    20da:	39 f4       	brne	.+14     	; 0x20ea <DIO_vTogPortValue+0x68>
			PORTD = ~PORTD;
    20dc:	a2 e3       	ldi	r26, 0x32	; 50
    20de:	b0 e0       	ldi	r27, 0x00	; 0
    20e0:	e2 e3       	ldi	r30, 0x32	; 50
    20e2:	f0 e0       	ldi	r31, 0x00	; 0
    20e4:	80 81       	ld	r24, Z
    20e6:	80 95       	com	r24
    20e8:	8c 93       	st	X, r24
		}
	}
	else{
		//do nothing
	}
}
    20ea:	0f 90       	pop	r0
    20ec:	cf 91       	pop	r28
    20ee:	df 91       	pop	r29
    20f0:	08 95       	ret

000020f2 <DIO_vSetPinDirection>:
* \Parameters (in) : Loc_u8PortID   PIN PORT
* 					Loc_u8PinID		PIN wanted to change it's direction
* 					Loc_u8PinDirection  choose PIN direction (InPut,OutPut)
* \Parameters (out): None
*******************************************************************************/
void DIO_vSetPinDirection(u8 Loc_u8PortID, u8 Loc_u8PinID, u8 Loc_u8PinDirection){
    20f2:	df 93       	push	r29
    20f4:	cf 93       	push	r28
    20f6:	00 d0       	rcall	.+0      	; 0x20f8 <DIO_vSetPinDirection+0x6>
    20f8:	0f 92       	push	r0
    20fa:	cd b7       	in	r28, 0x3d	; 61
    20fc:	de b7       	in	r29, 0x3e	; 62
    20fe:	89 83       	std	Y+1, r24	; 0x01
    2100:	6a 83       	std	Y+2, r22	; 0x02
    2102:	4b 83       	std	Y+3, r20	; 0x03
	if (Loc_u8PinDirection==Pin_OutPut){
    2104:	8b 81       	ldd	r24, Y+3	; 0x03
    2106:	81 30       	cpi	r24, 0x01	; 1
    2108:	09 f0       	breq	.+2      	; 0x210c <DIO_vSetPinDirection+0x1a>
    210a:	75 c0       	rjmp	.+234    	; 0x21f6 <DIO_vSetPinDirection+0x104>

		if(Loc_u8PortID<=PortD){
    210c:	89 81       	ldd	r24, Y+1	; 0x01
    210e:	84 30       	cpi	r24, 0x04	; 4
    2110:	08 f0       	brcs	.+2      	; 0x2114 <DIO_vSetPinDirection+0x22>
    2112:	ec c0       	rjmp	.+472    	; 0x22ec <DIO_vSetPinDirection+0x1fa>
			if(Loc_u8PortID==PortA){
    2114:	89 81       	ldd	r24, Y+1	; 0x01
    2116:	88 23       	and	r24, r24
    2118:	c9 f4       	brne	.+50     	; 0x214c <DIO_vSetPinDirection+0x5a>
				DDRA = SET_BIT(DDRA, Loc_u8PinID);
    211a:	4a e3       	ldi	r20, 0x3A	; 58
    211c:	50 e0       	ldi	r21, 0x00	; 0
    211e:	aa e3       	ldi	r26, 0x3A	; 58
    2120:	b0 e0       	ldi	r27, 0x00	; 0
    2122:	ea e3       	ldi	r30, 0x3A	; 58
    2124:	f0 e0       	ldi	r31, 0x00	; 0
    2126:	80 81       	ld	r24, Z
    2128:	68 2f       	mov	r22, r24
    212a:	8a 81       	ldd	r24, Y+2	; 0x02
    212c:	28 2f       	mov	r18, r24
    212e:	30 e0       	ldi	r19, 0x00	; 0
    2130:	81 e0       	ldi	r24, 0x01	; 1
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	02 2e       	mov	r0, r18
    2136:	02 c0       	rjmp	.+4      	; 0x213c <DIO_vSetPinDirection+0x4a>
    2138:	88 0f       	add	r24, r24
    213a:	99 1f       	adc	r25, r25
    213c:	0a 94       	dec	r0
    213e:	e2 f7       	brpl	.-8      	; 0x2138 <DIO_vSetPinDirection+0x46>
    2140:	86 2b       	or	r24, r22
    2142:	8c 93       	st	X, r24
    2144:	8c 91       	ld	r24, X
    2146:	fa 01       	movw	r30, r20
    2148:	80 83       	st	Z, r24
    214a:	d0 c0       	rjmp	.+416    	; 0x22ec <DIO_vSetPinDirection+0x1fa>
			}
			else if(Loc_u8PortID==PortB){
    214c:	89 81       	ldd	r24, Y+1	; 0x01
    214e:	81 30       	cpi	r24, 0x01	; 1
    2150:	c9 f4       	brne	.+50     	; 0x2184 <DIO_vSetPinDirection+0x92>
				DDRB = SET_BIT(DDRB, Loc_u8PinID);
    2152:	47 e3       	ldi	r20, 0x37	; 55
    2154:	50 e0       	ldi	r21, 0x00	; 0
    2156:	a7 e3       	ldi	r26, 0x37	; 55
    2158:	b0 e0       	ldi	r27, 0x00	; 0
    215a:	e7 e3       	ldi	r30, 0x37	; 55
    215c:	f0 e0       	ldi	r31, 0x00	; 0
    215e:	80 81       	ld	r24, Z
    2160:	68 2f       	mov	r22, r24
    2162:	8a 81       	ldd	r24, Y+2	; 0x02
    2164:	28 2f       	mov	r18, r24
    2166:	30 e0       	ldi	r19, 0x00	; 0
    2168:	81 e0       	ldi	r24, 0x01	; 1
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	02 2e       	mov	r0, r18
    216e:	02 c0       	rjmp	.+4      	; 0x2174 <DIO_vSetPinDirection+0x82>
    2170:	88 0f       	add	r24, r24
    2172:	99 1f       	adc	r25, r25
    2174:	0a 94       	dec	r0
    2176:	e2 f7       	brpl	.-8      	; 0x2170 <DIO_vSetPinDirection+0x7e>
    2178:	86 2b       	or	r24, r22
    217a:	8c 93       	st	X, r24
    217c:	8c 91       	ld	r24, X
    217e:	fa 01       	movw	r30, r20
    2180:	80 83       	st	Z, r24
    2182:	b4 c0       	rjmp	.+360    	; 0x22ec <DIO_vSetPinDirection+0x1fa>
			}
			else if(Loc_u8PortID==PortC){
    2184:	89 81       	ldd	r24, Y+1	; 0x01
    2186:	82 30       	cpi	r24, 0x02	; 2
    2188:	c9 f4       	brne	.+50     	; 0x21bc <DIO_vSetPinDirection+0xca>
				DDRC = SET_BIT(DDRC, Loc_u8PinID);
    218a:	44 e3       	ldi	r20, 0x34	; 52
    218c:	50 e0       	ldi	r21, 0x00	; 0
    218e:	a4 e3       	ldi	r26, 0x34	; 52
    2190:	b0 e0       	ldi	r27, 0x00	; 0
    2192:	e4 e3       	ldi	r30, 0x34	; 52
    2194:	f0 e0       	ldi	r31, 0x00	; 0
    2196:	80 81       	ld	r24, Z
    2198:	68 2f       	mov	r22, r24
    219a:	8a 81       	ldd	r24, Y+2	; 0x02
    219c:	28 2f       	mov	r18, r24
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	81 e0       	ldi	r24, 0x01	; 1
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	02 2e       	mov	r0, r18
    21a6:	02 c0       	rjmp	.+4      	; 0x21ac <DIO_vSetPinDirection+0xba>
    21a8:	88 0f       	add	r24, r24
    21aa:	99 1f       	adc	r25, r25
    21ac:	0a 94       	dec	r0
    21ae:	e2 f7       	brpl	.-8      	; 0x21a8 <DIO_vSetPinDirection+0xb6>
    21b0:	86 2b       	or	r24, r22
    21b2:	8c 93       	st	X, r24
    21b4:	8c 91       	ld	r24, X
    21b6:	fa 01       	movw	r30, r20
    21b8:	80 83       	st	Z, r24
    21ba:	98 c0       	rjmp	.+304    	; 0x22ec <DIO_vSetPinDirection+0x1fa>
			}
			else if(Loc_u8PortID==PortD){
    21bc:	89 81       	ldd	r24, Y+1	; 0x01
    21be:	83 30       	cpi	r24, 0x03	; 3
    21c0:	09 f0       	breq	.+2      	; 0x21c4 <DIO_vSetPinDirection+0xd2>
    21c2:	94 c0       	rjmp	.+296    	; 0x22ec <DIO_vSetPinDirection+0x1fa>
				DDRD = SET_BIT(DDRD, Loc_u8PinID);
    21c4:	41 e3       	ldi	r20, 0x31	; 49
    21c6:	50 e0       	ldi	r21, 0x00	; 0
    21c8:	a1 e3       	ldi	r26, 0x31	; 49
    21ca:	b0 e0       	ldi	r27, 0x00	; 0
    21cc:	e1 e3       	ldi	r30, 0x31	; 49
    21ce:	f0 e0       	ldi	r31, 0x00	; 0
    21d0:	80 81       	ld	r24, Z
    21d2:	68 2f       	mov	r22, r24
    21d4:	8a 81       	ldd	r24, Y+2	; 0x02
    21d6:	28 2f       	mov	r18, r24
    21d8:	30 e0       	ldi	r19, 0x00	; 0
    21da:	81 e0       	ldi	r24, 0x01	; 1
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	02 2e       	mov	r0, r18
    21e0:	02 c0       	rjmp	.+4      	; 0x21e6 <DIO_vSetPinDirection+0xf4>
    21e2:	88 0f       	add	r24, r24
    21e4:	99 1f       	adc	r25, r25
    21e6:	0a 94       	dec	r0
    21e8:	e2 f7       	brpl	.-8      	; 0x21e2 <DIO_vSetPinDirection+0xf0>
    21ea:	86 2b       	or	r24, r22
    21ec:	8c 93       	st	X, r24
    21ee:	8c 91       	ld	r24, X
    21f0:	fa 01       	movw	r30, r20
    21f2:	80 83       	st	Z, r24
    21f4:	7b c0       	rjmp	.+246    	; 0x22ec <DIO_vSetPinDirection+0x1fa>
		else{
			//do nothing
		}

	}
	else if(Loc_u8PinDirection==Pin_InPut){
    21f6:	8b 81       	ldd	r24, Y+3	; 0x03
    21f8:	88 23       	and	r24, r24
    21fa:	09 f0       	breq	.+2      	; 0x21fe <DIO_vSetPinDirection+0x10c>
    21fc:	77 c0       	rjmp	.+238    	; 0x22ec <DIO_vSetPinDirection+0x1fa>

		if(Loc_u8PortID<=PortD){
    21fe:	89 81       	ldd	r24, Y+1	; 0x01
    2200:	84 30       	cpi	r24, 0x04	; 4
    2202:	08 f0       	brcs	.+2      	; 0x2206 <DIO_vSetPinDirection+0x114>
    2204:	73 c0       	rjmp	.+230    	; 0x22ec <DIO_vSetPinDirection+0x1fa>
			if(Loc_u8PortID==PortA){
    2206:	89 81       	ldd	r24, Y+1	; 0x01
    2208:	88 23       	and	r24, r24
    220a:	d1 f4       	brne	.+52     	; 0x2240 <DIO_vSetPinDirection+0x14e>
				DDRA = CLR_BIT(DDRA, Loc_u8PinID);
    220c:	4a e3       	ldi	r20, 0x3A	; 58
    220e:	50 e0       	ldi	r21, 0x00	; 0
    2210:	aa e3       	ldi	r26, 0x3A	; 58
    2212:	b0 e0       	ldi	r27, 0x00	; 0
    2214:	ea e3       	ldi	r30, 0x3A	; 58
    2216:	f0 e0       	ldi	r31, 0x00	; 0
    2218:	80 81       	ld	r24, Z
    221a:	68 2f       	mov	r22, r24
    221c:	8a 81       	ldd	r24, Y+2	; 0x02
    221e:	28 2f       	mov	r18, r24
    2220:	30 e0       	ldi	r19, 0x00	; 0
    2222:	81 e0       	ldi	r24, 0x01	; 1
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	02 2e       	mov	r0, r18
    2228:	02 c0       	rjmp	.+4      	; 0x222e <DIO_vSetPinDirection+0x13c>
    222a:	88 0f       	add	r24, r24
    222c:	99 1f       	adc	r25, r25
    222e:	0a 94       	dec	r0
    2230:	e2 f7       	brpl	.-8      	; 0x222a <DIO_vSetPinDirection+0x138>
    2232:	80 95       	com	r24
    2234:	86 23       	and	r24, r22
    2236:	8c 93       	st	X, r24
    2238:	8c 91       	ld	r24, X
    223a:	fa 01       	movw	r30, r20
    223c:	80 83       	st	Z, r24
    223e:	56 c0       	rjmp	.+172    	; 0x22ec <DIO_vSetPinDirection+0x1fa>
			}
			else if(Loc_u8PortID==PortB){
    2240:	89 81       	ldd	r24, Y+1	; 0x01
    2242:	81 30       	cpi	r24, 0x01	; 1
    2244:	d1 f4       	brne	.+52     	; 0x227a <DIO_vSetPinDirection+0x188>
				DDRB = CLR_BIT(DDRB, Loc_u8PinID);
    2246:	47 e3       	ldi	r20, 0x37	; 55
    2248:	50 e0       	ldi	r21, 0x00	; 0
    224a:	a7 e3       	ldi	r26, 0x37	; 55
    224c:	b0 e0       	ldi	r27, 0x00	; 0
    224e:	e7 e3       	ldi	r30, 0x37	; 55
    2250:	f0 e0       	ldi	r31, 0x00	; 0
    2252:	80 81       	ld	r24, Z
    2254:	68 2f       	mov	r22, r24
    2256:	8a 81       	ldd	r24, Y+2	; 0x02
    2258:	28 2f       	mov	r18, r24
    225a:	30 e0       	ldi	r19, 0x00	; 0
    225c:	81 e0       	ldi	r24, 0x01	; 1
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	02 2e       	mov	r0, r18
    2262:	02 c0       	rjmp	.+4      	; 0x2268 <DIO_vSetPinDirection+0x176>
    2264:	88 0f       	add	r24, r24
    2266:	99 1f       	adc	r25, r25
    2268:	0a 94       	dec	r0
    226a:	e2 f7       	brpl	.-8      	; 0x2264 <DIO_vSetPinDirection+0x172>
    226c:	80 95       	com	r24
    226e:	86 23       	and	r24, r22
    2270:	8c 93       	st	X, r24
    2272:	8c 91       	ld	r24, X
    2274:	fa 01       	movw	r30, r20
    2276:	80 83       	st	Z, r24
    2278:	39 c0       	rjmp	.+114    	; 0x22ec <DIO_vSetPinDirection+0x1fa>
			}
			else if(Loc_u8PortID==PortC){
    227a:	89 81       	ldd	r24, Y+1	; 0x01
    227c:	82 30       	cpi	r24, 0x02	; 2
    227e:	d1 f4       	brne	.+52     	; 0x22b4 <DIO_vSetPinDirection+0x1c2>
				DDRC = CLR_BIT(DDRC, Loc_u8PinID);
    2280:	44 e3       	ldi	r20, 0x34	; 52
    2282:	50 e0       	ldi	r21, 0x00	; 0
    2284:	a4 e3       	ldi	r26, 0x34	; 52
    2286:	b0 e0       	ldi	r27, 0x00	; 0
    2288:	e4 e3       	ldi	r30, 0x34	; 52
    228a:	f0 e0       	ldi	r31, 0x00	; 0
    228c:	80 81       	ld	r24, Z
    228e:	68 2f       	mov	r22, r24
    2290:	8a 81       	ldd	r24, Y+2	; 0x02
    2292:	28 2f       	mov	r18, r24
    2294:	30 e0       	ldi	r19, 0x00	; 0
    2296:	81 e0       	ldi	r24, 0x01	; 1
    2298:	90 e0       	ldi	r25, 0x00	; 0
    229a:	02 2e       	mov	r0, r18
    229c:	02 c0       	rjmp	.+4      	; 0x22a2 <DIO_vSetPinDirection+0x1b0>
    229e:	88 0f       	add	r24, r24
    22a0:	99 1f       	adc	r25, r25
    22a2:	0a 94       	dec	r0
    22a4:	e2 f7       	brpl	.-8      	; 0x229e <DIO_vSetPinDirection+0x1ac>
    22a6:	80 95       	com	r24
    22a8:	86 23       	and	r24, r22
    22aa:	8c 93       	st	X, r24
    22ac:	8c 91       	ld	r24, X
    22ae:	fa 01       	movw	r30, r20
    22b0:	80 83       	st	Z, r24
    22b2:	1c c0       	rjmp	.+56     	; 0x22ec <DIO_vSetPinDirection+0x1fa>
			}
			else if(Loc_u8PortID==PortD){
    22b4:	89 81       	ldd	r24, Y+1	; 0x01
    22b6:	83 30       	cpi	r24, 0x03	; 3
    22b8:	c9 f4       	brne	.+50     	; 0x22ec <DIO_vSetPinDirection+0x1fa>
				DDRD = CLR_BIT(DDRD, Loc_u8PinID);
    22ba:	41 e3       	ldi	r20, 0x31	; 49
    22bc:	50 e0       	ldi	r21, 0x00	; 0
    22be:	a1 e3       	ldi	r26, 0x31	; 49
    22c0:	b0 e0       	ldi	r27, 0x00	; 0
    22c2:	e1 e3       	ldi	r30, 0x31	; 49
    22c4:	f0 e0       	ldi	r31, 0x00	; 0
    22c6:	80 81       	ld	r24, Z
    22c8:	68 2f       	mov	r22, r24
    22ca:	8a 81       	ldd	r24, Y+2	; 0x02
    22cc:	28 2f       	mov	r18, r24
    22ce:	30 e0       	ldi	r19, 0x00	; 0
    22d0:	81 e0       	ldi	r24, 0x01	; 1
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	02 2e       	mov	r0, r18
    22d6:	02 c0       	rjmp	.+4      	; 0x22dc <DIO_vSetPinDirection+0x1ea>
    22d8:	88 0f       	add	r24, r24
    22da:	99 1f       	adc	r25, r25
    22dc:	0a 94       	dec	r0
    22de:	e2 f7       	brpl	.-8      	; 0x22d8 <DIO_vSetPinDirection+0x1e6>
    22e0:	80 95       	com	r24
    22e2:	86 23       	and	r24, r22
    22e4:	8c 93       	st	X, r24
    22e6:	8c 91       	ld	r24, X
    22e8:	fa 01       	movw	r30, r20
    22ea:	80 83       	st	Z, r24
	}
	else{
		//do nothing
	}

}
    22ec:	0f 90       	pop	r0
    22ee:	0f 90       	pop	r0
    22f0:	0f 90       	pop	r0
    22f2:	cf 91       	pop	r28
    22f4:	df 91       	pop	r29
    22f6:	08 95       	ret

000022f8 <DIO_vSetPinValue>:
* \Parameters (in) : Loc_u8PortID   PIN PORT
* 					Loc_u8PinID		PIN wanted to change it's value
* 					Loc_u8PinDirection  choose PIN value (Pin_High,Pin_Low)
* \Parameters (out): None
*******************************************************************************/
void DIO_vSetPinValue(u8 Loc_u8PortID, u8 Loc_u8PinID, u8 Loc_u8PinValue){
    22f8:	df 93       	push	r29
    22fa:	cf 93       	push	r28
    22fc:	00 d0       	rcall	.+0      	; 0x22fe <DIO_vSetPinValue+0x6>
    22fe:	0f 92       	push	r0
    2300:	cd b7       	in	r28, 0x3d	; 61
    2302:	de b7       	in	r29, 0x3e	; 62
    2304:	89 83       	std	Y+1, r24	; 0x01
    2306:	6a 83       	std	Y+2, r22	; 0x02
    2308:	4b 83       	std	Y+3, r20	; 0x03
	if(Loc_u8PinValue==Pin_High){
    230a:	8b 81       	ldd	r24, Y+3	; 0x03
    230c:	81 30       	cpi	r24, 0x01	; 1
    230e:	09 f0       	breq	.+2      	; 0x2312 <DIO_vSetPinValue+0x1a>
    2310:	61 c0       	rjmp	.+194    	; 0x23d4 <DIO_vSetPinValue+0xdc>
		if(Loc_u8PortID<=PortD){
    2312:	89 81       	ldd	r24, Y+1	; 0x01
    2314:	84 30       	cpi	r24, 0x04	; 4
    2316:	08 f0       	brcs	.+2      	; 0x231a <DIO_vSetPinValue+0x22>
    2318:	c4 c0       	rjmp	.+392    	; 0x24a2 <DIO_vSetPinValue+0x1aa>
			if(Loc_u8PortID==PortA){
    231a:	89 81       	ldd	r24, Y+1	; 0x01
    231c:	88 23       	and	r24, r24
    231e:	a1 f4       	brne	.+40     	; 0x2348 <DIO_vSetPinValue+0x50>
				SET_BIT(PORTA, Loc_u8PinID);
    2320:	ab e3       	ldi	r26, 0x3B	; 59
    2322:	b0 e0       	ldi	r27, 0x00	; 0
    2324:	eb e3       	ldi	r30, 0x3B	; 59
    2326:	f0 e0       	ldi	r31, 0x00	; 0
    2328:	80 81       	ld	r24, Z
    232a:	48 2f       	mov	r20, r24
    232c:	8a 81       	ldd	r24, Y+2	; 0x02
    232e:	28 2f       	mov	r18, r24
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	81 e0       	ldi	r24, 0x01	; 1
    2334:	90 e0       	ldi	r25, 0x00	; 0
    2336:	02 2e       	mov	r0, r18
    2338:	02 c0       	rjmp	.+4      	; 0x233e <DIO_vSetPinValue+0x46>
    233a:	88 0f       	add	r24, r24
    233c:	99 1f       	adc	r25, r25
    233e:	0a 94       	dec	r0
    2340:	e2 f7       	brpl	.-8      	; 0x233a <DIO_vSetPinValue+0x42>
    2342:	84 2b       	or	r24, r20
    2344:	8c 93       	st	X, r24
    2346:	ad c0       	rjmp	.+346    	; 0x24a2 <DIO_vSetPinValue+0x1aa>
			}
			else if(Loc_u8PortID==PortB){
    2348:	89 81       	ldd	r24, Y+1	; 0x01
    234a:	81 30       	cpi	r24, 0x01	; 1
    234c:	a1 f4       	brne	.+40     	; 0x2376 <DIO_vSetPinValue+0x7e>
				SET_BIT(PORTB, Loc_u8PinID);
    234e:	a8 e3       	ldi	r26, 0x38	; 56
    2350:	b0 e0       	ldi	r27, 0x00	; 0
    2352:	e8 e3       	ldi	r30, 0x38	; 56
    2354:	f0 e0       	ldi	r31, 0x00	; 0
    2356:	80 81       	ld	r24, Z
    2358:	48 2f       	mov	r20, r24
    235a:	8a 81       	ldd	r24, Y+2	; 0x02
    235c:	28 2f       	mov	r18, r24
    235e:	30 e0       	ldi	r19, 0x00	; 0
    2360:	81 e0       	ldi	r24, 0x01	; 1
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	02 2e       	mov	r0, r18
    2366:	02 c0       	rjmp	.+4      	; 0x236c <DIO_vSetPinValue+0x74>
    2368:	88 0f       	add	r24, r24
    236a:	99 1f       	adc	r25, r25
    236c:	0a 94       	dec	r0
    236e:	e2 f7       	brpl	.-8      	; 0x2368 <DIO_vSetPinValue+0x70>
    2370:	84 2b       	or	r24, r20
    2372:	8c 93       	st	X, r24
    2374:	96 c0       	rjmp	.+300    	; 0x24a2 <DIO_vSetPinValue+0x1aa>
			}
			else if(Loc_u8PortID==PortC){
    2376:	89 81       	ldd	r24, Y+1	; 0x01
    2378:	82 30       	cpi	r24, 0x02	; 2
    237a:	a1 f4       	brne	.+40     	; 0x23a4 <DIO_vSetPinValue+0xac>
				SET_BIT(PORTC, Loc_u8PinID);
    237c:	a5 e3       	ldi	r26, 0x35	; 53
    237e:	b0 e0       	ldi	r27, 0x00	; 0
    2380:	e5 e3       	ldi	r30, 0x35	; 53
    2382:	f0 e0       	ldi	r31, 0x00	; 0
    2384:	80 81       	ld	r24, Z
    2386:	48 2f       	mov	r20, r24
    2388:	8a 81       	ldd	r24, Y+2	; 0x02
    238a:	28 2f       	mov	r18, r24
    238c:	30 e0       	ldi	r19, 0x00	; 0
    238e:	81 e0       	ldi	r24, 0x01	; 1
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	02 2e       	mov	r0, r18
    2394:	02 c0       	rjmp	.+4      	; 0x239a <DIO_vSetPinValue+0xa2>
    2396:	88 0f       	add	r24, r24
    2398:	99 1f       	adc	r25, r25
    239a:	0a 94       	dec	r0
    239c:	e2 f7       	brpl	.-8      	; 0x2396 <DIO_vSetPinValue+0x9e>
    239e:	84 2b       	or	r24, r20
    23a0:	8c 93       	st	X, r24
    23a2:	7f c0       	rjmp	.+254    	; 0x24a2 <DIO_vSetPinValue+0x1aa>
			}
			else if(Loc_u8PortID==PortD){
    23a4:	89 81       	ldd	r24, Y+1	; 0x01
    23a6:	83 30       	cpi	r24, 0x03	; 3
    23a8:	09 f0       	breq	.+2      	; 0x23ac <DIO_vSetPinValue+0xb4>
    23aa:	7b c0       	rjmp	.+246    	; 0x24a2 <DIO_vSetPinValue+0x1aa>
				SET_BIT(PORTD, Loc_u8PinID);
    23ac:	a2 e3       	ldi	r26, 0x32	; 50
    23ae:	b0 e0       	ldi	r27, 0x00	; 0
    23b0:	e2 e3       	ldi	r30, 0x32	; 50
    23b2:	f0 e0       	ldi	r31, 0x00	; 0
    23b4:	80 81       	ld	r24, Z
    23b6:	48 2f       	mov	r20, r24
    23b8:	8a 81       	ldd	r24, Y+2	; 0x02
    23ba:	28 2f       	mov	r18, r24
    23bc:	30 e0       	ldi	r19, 0x00	; 0
    23be:	81 e0       	ldi	r24, 0x01	; 1
    23c0:	90 e0       	ldi	r25, 0x00	; 0
    23c2:	02 2e       	mov	r0, r18
    23c4:	02 c0       	rjmp	.+4      	; 0x23ca <DIO_vSetPinValue+0xd2>
    23c6:	88 0f       	add	r24, r24
    23c8:	99 1f       	adc	r25, r25
    23ca:	0a 94       	dec	r0
    23cc:	e2 f7       	brpl	.-8      	; 0x23c6 <DIO_vSetPinValue+0xce>
    23ce:	84 2b       	or	r24, r20
    23d0:	8c 93       	st	X, r24
    23d2:	67 c0       	rjmp	.+206    	; 0x24a2 <DIO_vSetPinValue+0x1aa>
		}
		else{
			//do nothing
		}
	}
	else if(Loc_u8PinValue==Pin_Low){
    23d4:	8b 81       	ldd	r24, Y+3	; 0x03
    23d6:	88 23       	and	r24, r24
    23d8:	09 f0       	breq	.+2      	; 0x23dc <DIO_vSetPinValue+0xe4>
    23da:	63 c0       	rjmp	.+198    	; 0x24a2 <DIO_vSetPinValue+0x1aa>

		if(Loc_u8PortID<=PortD){
    23dc:	89 81       	ldd	r24, Y+1	; 0x01
    23de:	84 30       	cpi	r24, 0x04	; 4
    23e0:	08 f0       	brcs	.+2      	; 0x23e4 <DIO_vSetPinValue+0xec>
    23e2:	5f c0       	rjmp	.+190    	; 0x24a2 <DIO_vSetPinValue+0x1aa>
			if(Loc_u8PortID==PortA){
    23e4:	89 81       	ldd	r24, Y+1	; 0x01
    23e6:	88 23       	and	r24, r24
    23e8:	a9 f4       	brne	.+42     	; 0x2414 <DIO_vSetPinValue+0x11c>
				CLR_BIT(PORTA, Loc_u8PinID);
    23ea:	ab e3       	ldi	r26, 0x3B	; 59
    23ec:	b0 e0       	ldi	r27, 0x00	; 0
    23ee:	eb e3       	ldi	r30, 0x3B	; 59
    23f0:	f0 e0       	ldi	r31, 0x00	; 0
    23f2:	80 81       	ld	r24, Z
    23f4:	48 2f       	mov	r20, r24
    23f6:	8a 81       	ldd	r24, Y+2	; 0x02
    23f8:	28 2f       	mov	r18, r24
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	81 e0       	ldi	r24, 0x01	; 1
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	02 2e       	mov	r0, r18
    2402:	02 c0       	rjmp	.+4      	; 0x2408 <DIO_vSetPinValue+0x110>
    2404:	88 0f       	add	r24, r24
    2406:	99 1f       	adc	r25, r25
    2408:	0a 94       	dec	r0
    240a:	e2 f7       	brpl	.-8      	; 0x2404 <DIO_vSetPinValue+0x10c>
    240c:	80 95       	com	r24
    240e:	84 23       	and	r24, r20
    2410:	8c 93       	st	X, r24
    2412:	47 c0       	rjmp	.+142    	; 0x24a2 <DIO_vSetPinValue+0x1aa>
			}
			else if(Loc_u8PortID==PortB){
    2414:	89 81       	ldd	r24, Y+1	; 0x01
    2416:	81 30       	cpi	r24, 0x01	; 1
    2418:	a9 f4       	brne	.+42     	; 0x2444 <DIO_vSetPinValue+0x14c>
				CLR_BIT(PORTB, Loc_u8PinID);
    241a:	a8 e3       	ldi	r26, 0x38	; 56
    241c:	b0 e0       	ldi	r27, 0x00	; 0
    241e:	e8 e3       	ldi	r30, 0x38	; 56
    2420:	f0 e0       	ldi	r31, 0x00	; 0
    2422:	80 81       	ld	r24, Z
    2424:	48 2f       	mov	r20, r24
    2426:	8a 81       	ldd	r24, Y+2	; 0x02
    2428:	28 2f       	mov	r18, r24
    242a:	30 e0       	ldi	r19, 0x00	; 0
    242c:	81 e0       	ldi	r24, 0x01	; 1
    242e:	90 e0       	ldi	r25, 0x00	; 0
    2430:	02 2e       	mov	r0, r18
    2432:	02 c0       	rjmp	.+4      	; 0x2438 <DIO_vSetPinValue+0x140>
    2434:	88 0f       	add	r24, r24
    2436:	99 1f       	adc	r25, r25
    2438:	0a 94       	dec	r0
    243a:	e2 f7       	brpl	.-8      	; 0x2434 <DIO_vSetPinValue+0x13c>
    243c:	80 95       	com	r24
    243e:	84 23       	and	r24, r20
    2440:	8c 93       	st	X, r24
    2442:	2f c0       	rjmp	.+94     	; 0x24a2 <DIO_vSetPinValue+0x1aa>
			}
			else if(Loc_u8PortID==PortC){
    2444:	89 81       	ldd	r24, Y+1	; 0x01
    2446:	82 30       	cpi	r24, 0x02	; 2
    2448:	a9 f4       	brne	.+42     	; 0x2474 <DIO_vSetPinValue+0x17c>
				CLR_BIT(PORTC, Loc_u8PinID);
    244a:	a5 e3       	ldi	r26, 0x35	; 53
    244c:	b0 e0       	ldi	r27, 0x00	; 0
    244e:	e5 e3       	ldi	r30, 0x35	; 53
    2450:	f0 e0       	ldi	r31, 0x00	; 0
    2452:	80 81       	ld	r24, Z
    2454:	48 2f       	mov	r20, r24
    2456:	8a 81       	ldd	r24, Y+2	; 0x02
    2458:	28 2f       	mov	r18, r24
    245a:	30 e0       	ldi	r19, 0x00	; 0
    245c:	81 e0       	ldi	r24, 0x01	; 1
    245e:	90 e0       	ldi	r25, 0x00	; 0
    2460:	02 2e       	mov	r0, r18
    2462:	02 c0       	rjmp	.+4      	; 0x2468 <DIO_vSetPinValue+0x170>
    2464:	88 0f       	add	r24, r24
    2466:	99 1f       	adc	r25, r25
    2468:	0a 94       	dec	r0
    246a:	e2 f7       	brpl	.-8      	; 0x2464 <DIO_vSetPinValue+0x16c>
    246c:	80 95       	com	r24
    246e:	84 23       	and	r24, r20
    2470:	8c 93       	st	X, r24
    2472:	17 c0       	rjmp	.+46     	; 0x24a2 <DIO_vSetPinValue+0x1aa>
			}
			else if(Loc_u8PortID==PortD){
    2474:	89 81       	ldd	r24, Y+1	; 0x01
    2476:	83 30       	cpi	r24, 0x03	; 3
    2478:	a1 f4       	brne	.+40     	; 0x24a2 <DIO_vSetPinValue+0x1aa>
				CLR_BIT(PORTD, Loc_u8PinID);
    247a:	a2 e3       	ldi	r26, 0x32	; 50
    247c:	b0 e0       	ldi	r27, 0x00	; 0
    247e:	e2 e3       	ldi	r30, 0x32	; 50
    2480:	f0 e0       	ldi	r31, 0x00	; 0
    2482:	80 81       	ld	r24, Z
    2484:	48 2f       	mov	r20, r24
    2486:	8a 81       	ldd	r24, Y+2	; 0x02
    2488:	28 2f       	mov	r18, r24
    248a:	30 e0       	ldi	r19, 0x00	; 0
    248c:	81 e0       	ldi	r24, 0x01	; 1
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	02 2e       	mov	r0, r18
    2492:	02 c0       	rjmp	.+4      	; 0x2498 <DIO_vSetPinValue+0x1a0>
    2494:	88 0f       	add	r24, r24
    2496:	99 1f       	adc	r25, r25
    2498:	0a 94       	dec	r0
    249a:	e2 f7       	brpl	.-8      	; 0x2494 <DIO_vSetPinValue+0x19c>
    249c:	80 95       	com	r24
    249e:	84 23       	and	r24, r20
    24a0:	8c 93       	st	X, r24
		}
		else{
			//do nothing
		}
	}
}
    24a2:	0f 90       	pop	r0
    24a4:	0f 90       	pop	r0
    24a6:	0f 90       	pop	r0
    24a8:	cf 91       	pop	r28
    24aa:	df 91       	pop	r29
    24ac:	08 95       	ret

000024ae <DIO_u8PGetPinValue>:
* \Parameters (in) : Loc_u8PortID   PIN PORT
* 					Loc_u8PinID		PIN wanted to read it's value
* \Parameters (out): PINx  value(0,1)
*  \Return value:   : unsigned char
*******************************************************************************/
u8 DIO_u8PGetPinValue(u8 Loc_u8PortID, u8 Loc_u8PinID){
    24ae:	df 93       	push	r29
    24b0:	cf 93       	push	r28
    24b2:	00 d0       	rcall	.+0      	; 0x24b4 <DIO_u8PGetPinValue+0x6>
    24b4:	0f 92       	push	r0
    24b6:	cd b7       	in	r28, 0x3d	; 61
    24b8:	de b7       	in	r29, 0x3e	; 62
    24ba:	89 83       	std	Y+1, r24	; 0x01
    24bc:	6a 83       	std	Y+2, r22	; 0x02
	if(Loc_u8PortID<=PortD){
    24be:	89 81       	ldd	r24, Y+1	; 0x01
    24c0:	84 30       	cpi	r24, 0x04	; 4
    24c2:	08 f0       	brcs	.+2      	; 0x24c6 <DIO_u8PGetPinValue+0x18>
    24c4:	58 c0       	rjmp	.+176    	; 0x2576 <DIO_u8PGetPinValue+0xc8>
		if(Loc_u8PortID==PortA){
    24c6:	89 81       	ldd	r24, Y+1	; 0x01
    24c8:	88 23       	and	r24, r24
    24ca:	99 f4       	brne	.+38     	; 0x24f2 <DIO_u8PGetPinValue+0x44>
			return GET_BIT(PINA, Loc_u8PinID);
    24cc:	e9 e3       	ldi	r30, 0x39	; 57
    24ce:	f0 e0       	ldi	r31, 0x00	; 0
    24d0:	80 81       	ld	r24, Z
    24d2:	28 2f       	mov	r18, r24
    24d4:	30 e0       	ldi	r19, 0x00	; 0
    24d6:	8a 81       	ldd	r24, Y+2	; 0x02
    24d8:	88 2f       	mov	r24, r24
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	a9 01       	movw	r20, r18
    24de:	02 c0       	rjmp	.+4      	; 0x24e4 <DIO_u8PGetPinValue+0x36>
    24e0:	55 95       	asr	r21
    24e2:	47 95       	ror	r20
    24e4:	8a 95       	dec	r24
    24e6:	e2 f7       	brpl	.-8      	; 0x24e0 <DIO_u8PGetPinValue+0x32>
    24e8:	ca 01       	movw	r24, r20
    24ea:	58 2f       	mov	r21, r24
    24ec:	51 70       	andi	r21, 0x01	; 1
    24ee:	5b 83       	std	Y+3, r21	; 0x03
    24f0:	44 c0       	rjmp	.+136    	; 0x257a <DIO_u8PGetPinValue+0xcc>
		}
		else if(Loc_u8PortID==PortB){
    24f2:	89 81       	ldd	r24, Y+1	; 0x01
    24f4:	81 30       	cpi	r24, 0x01	; 1
    24f6:	99 f4       	brne	.+38     	; 0x251e <DIO_u8PGetPinValue+0x70>
			return GET_BIT(PINB, Loc_u8PinID);
    24f8:	e6 e3       	ldi	r30, 0x36	; 54
    24fa:	f0 e0       	ldi	r31, 0x00	; 0
    24fc:	80 81       	ld	r24, Z
    24fe:	28 2f       	mov	r18, r24
    2500:	30 e0       	ldi	r19, 0x00	; 0
    2502:	8a 81       	ldd	r24, Y+2	; 0x02
    2504:	88 2f       	mov	r24, r24
    2506:	90 e0       	ldi	r25, 0x00	; 0
    2508:	a9 01       	movw	r20, r18
    250a:	02 c0       	rjmp	.+4      	; 0x2510 <DIO_u8PGetPinValue+0x62>
    250c:	55 95       	asr	r21
    250e:	47 95       	ror	r20
    2510:	8a 95       	dec	r24
    2512:	e2 f7       	brpl	.-8      	; 0x250c <DIO_u8PGetPinValue+0x5e>
    2514:	ca 01       	movw	r24, r20
    2516:	58 2f       	mov	r21, r24
    2518:	51 70       	andi	r21, 0x01	; 1
    251a:	5b 83       	std	Y+3, r21	; 0x03
    251c:	2e c0       	rjmp	.+92     	; 0x257a <DIO_u8PGetPinValue+0xcc>
		}
		else if(Loc_u8PortID==PortC){
    251e:	89 81       	ldd	r24, Y+1	; 0x01
    2520:	82 30       	cpi	r24, 0x02	; 2
    2522:	99 f4       	brne	.+38     	; 0x254a <DIO_u8PGetPinValue+0x9c>
			return GET_BIT(PINC, Loc_u8PinID);
    2524:	e3 e3       	ldi	r30, 0x33	; 51
    2526:	f0 e0       	ldi	r31, 0x00	; 0
    2528:	80 81       	ld	r24, Z
    252a:	28 2f       	mov	r18, r24
    252c:	30 e0       	ldi	r19, 0x00	; 0
    252e:	8a 81       	ldd	r24, Y+2	; 0x02
    2530:	88 2f       	mov	r24, r24
    2532:	90 e0       	ldi	r25, 0x00	; 0
    2534:	a9 01       	movw	r20, r18
    2536:	02 c0       	rjmp	.+4      	; 0x253c <DIO_u8PGetPinValue+0x8e>
    2538:	55 95       	asr	r21
    253a:	47 95       	ror	r20
    253c:	8a 95       	dec	r24
    253e:	e2 f7       	brpl	.-8      	; 0x2538 <DIO_u8PGetPinValue+0x8a>
    2540:	ca 01       	movw	r24, r20
    2542:	58 2f       	mov	r21, r24
    2544:	51 70       	andi	r21, 0x01	; 1
    2546:	5b 83       	std	Y+3, r21	; 0x03
    2548:	18 c0       	rjmp	.+48     	; 0x257a <DIO_u8PGetPinValue+0xcc>
		}
		else if(Loc_u8PortID==PortD){
    254a:	89 81       	ldd	r24, Y+1	; 0x01
    254c:	83 30       	cpi	r24, 0x03	; 3
    254e:	99 f4       	brne	.+38     	; 0x2576 <DIO_u8PGetPinValue+0xc8>
			return GET_BIT(PIND, Loc_u8PinID);
    2550:	e0 e3       	ldi	r30, 0x30	; 48
    2552:	f0 e0       	ldi	r31, 0x00	; 0
    2554:	80 81       	ld	r24, Z
    2556:	28 2f       	mov	r18, r24
    2558:	30 e0       	ldi	r19, 0x00	; 0
    255a:	8a 81       	ldd	r24, Y+2	; 0x02
    255c:	88 2f       	mov	r24, r24
    255e:	90 e0       	ldi	r25, 0x00	; 0
    2560:	a9 01       	movw	r20, r18
    2562:	02 c0       	rjmp	.+4      	; 0x2568 <DIO_u8PGetPinValue+0xba>
    2564:	55 95       	asr	r21
    2566:	47 95       	ror	r20
    2568:	8a 95       	dec	r24
    256a:	e2 f7       	brpl	.-8      	; 0x2564 <DIO_u8PGetPinValue+0xb6>
    256c:	ca 01       	movw	r24, r20
    256e:	58 2f       	mov	r21, r24
    2570:	51 70       	andi	r21, 0x01	; 1
    2572:	5b 83       	std	Y+3, r21	; 0x03
    2574:	02 c0       	rjmp	.+4      	; 0x257a <DIO_u8PGetPinValue+0xcc>
		}
	}
	else{
		//do nothing
	}
	return 0xff;
    2576:	8f ef       	ldi	r24, 0xFF	; 255
    2578:	8b 83       	std	Y+3, r24	; 0x03
    257a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    257c:	0f 90       	pop	r0
    257e:	0f 90       	pop	r0
    2580:	0f 90       	pop	r0
    2582:	cf 91       	pop	r28
    2584:	df 91       	pop	r29
    2586:	08 95       	ret

00002588 <DIO_vTogPinValue>:
*
* \Parameters (in) : Loc_u8PortID   PIN PORT
* 					Loc_u8PinID		PIN wanted to Toggle it's value
* \Parameters (out): None
*******************************************************************************/
void DIO_vTogPinValue(u8 Loc_u8PortID, u8 Loc_u8PinID){
    2588:	df 93       	push	r29
    258a:	cf 93       	push	r28
    258c:	00 d0       	rcall	.+0      	; 0x258e <DIO_vTogPinValue+0x6>
    258e:	cd b7       	in	r28, 0x3d	; 61
    2590:	de b7       	in	r29, 0x3e	; 62
    2592:	89 83       	std	Y+1, r24	; 0x01
    2594:	6a 83       	std	Y+2, r22	; 0x02
	if(Loc_u8PortID<=PortD){
    2596:	89 81       	ldd	r24, Y+1	; 0x01
    2598:	84 30       	cpi	r24, 0x04	; 4
    259a:	08 f0       	brcs	.+2      	; 0x259e <DIO_vTogPinValue+0x16>
    259c:	5b c0       	rjmp	.+182    	; 0x2654 <DIO_vTogPinValue+0xcc>
		if(Loc_u8PortID==PortA){
    259e:	89 81       	ldd	r24, Y+1	; 0x01
    25a0:	88 23       	and	r24, r24
    25a2:	a1 f4       	brne	.+40     	; 0x25cc <DIO_vTogPinValue+0x44>
			TOG_BIT(PORTA, Loc_u8PinID);
    25a4:	ab e3       	ldi	r26, 0x3B	; 59
    25a6:	b0 e0       	ldi	r27, 0x00	; 0
    25a8:	eb e3       	ldi	r30, 0x3B	; 59
    25aa:	f0 e0       	ldi	r31, 0x00	; 0
    25ac:	80 81       	ld	r24, Z
    25ae:	48 2f       	mov	r20, r24
    25b0:	8a 81       	ldd	r24, Y+2	; 0x02
    25b2:	28 2f       	mov	r18, r24
    25b4:	30 e0       	ldi	r19, 0x00	; 0
    25b6:	81 e0       	ldi	r24, 0x01	; 1
    25b8:	90 e0       	ldi	r25, 0x00	; 0
    25ba:	02 2e       	mov	r0, r18
    25bc:	02 c0       	rjmp	.+4      	; 0x25c2 <DIO_vTogPinValue+0x3a>
    25be:	88 0f       	add	r24, r24
    25c0:	99 1f       	adc	r25, r25
    25c2:	0a 94       	dec	r0
    25c4:	e2 f7       	brpl	.-8      	; 0x25be <DIO_vTogPinValue+0x36>
    25c6:	84 27       	eor	r24, r20
    25c8:	8c 93       	st	X, r24
    25ca:	44 c0       	rjmp	.+136    	; 0x2654 <DIO_vTogPinValue+0xcc>
		}
		else if(Loc_u8PortID==PortB){
    25cc:	89 81       	ldd	r24, Y+1	; 0x01
    25ce:	81 30       	cpi	r24, 0x01	; 1
    25d0:	a1 f4       	brne	.+40     	; 0x25fa <DIO_vTogPinValue+0x72>
			TOG_BIT(PORTB, Loc_u8PinID);
    25d2:	a8 e3       	ldi	r26, 0x38	; 56
    25d4:	b0 e0       	ldi	r27, 0x00	; 0
    25d6:	e8 e3       	ldi	r30, 0x38	; 56
    25d8:	f0 e0       	ldi	r31, 0x00	; 0
    25da:	80 81       	ld	r24, Z
    25dc:	48 2f       	mov	r20, r24
    25de:	8a 81       	ldd	r24, Y+2	; 0x02
    25e0:	28 2f       	mov	r18, r24
    25e2:	30 e0       	ldi	r19, 0x00	; 0
    25e4:	81 e0       	ldi	r24, 0x01	; 1
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	02 2e       	mov	r0, r18
    25ea:	02 c0       	rjmp	.+4      	; 0x25f0 <DIO_vTogPinValue+0x68>
    25ec:	88 0f       	add	r24, r24
    25ee:	99 1f       	adc	r25, r25
    25f0:	0a 94       	dec	r0
    25f2:	e2 f7       	brpl	.-8      	; 0x25ec <DIO_vTogPinValue+0x64>
    25f4:	84 27       	eor	r24, r20
    25f6:	8c 93       	st	X, r24
    25f8:	2d c0       	rjmp	.+90     	; 0x2654 <DIO_vTogPinValue+0xcc>
		}
		else if(Loc_u8PortID==PortC){
    25fa:	89 81       	ldd	r24, Y+1	; 0x01
    25fc:	82 30       	cpi	r24, 0x02	; 2
    25fe:	a1 f4       	brne	.+40     	; 0x2628 <DIO_vTogPinValue+0xa0>
			TOG_BIT(PORTC, Loc_u8PinID);
    2600:	a5 e3       	ldi	r26, 0x35	; 53
    2602:	b0 e0       	ldi	r27, 0x00	; 0
    2604:	e5 e3       	ldi	r30, 0x35	; 53
    2606:	f0 e0       	ldi	r31, 0x00	; 0
    2608:	80 81       	ld	r24, Z
    260a:	48 2f       	mov	r20, r24
    260c:	8a 81       	ldd	r24, Y+2	; 0x02
    260e:	28 2f       	mov	r18, r24
    2610:	30 e0       	ldi	r19, 0x00	; 0
    2612:	81 e0       	ldi	r24, 0x01	; 1
    2614:	90 e0       	ldi	r25, 0x00	; 0
    2616:	02 2e       	mov	r0, r18
    2618:	02 c0       	rjmp	.+4      	; 0x261e <DIO_vTogPinValue+0x96>
    261a:	88 0f       	add	r24, r24
    261c:	99 1f       	adc	r25, r25
    261e:	0a 94       	dec	r0
    2620:	e2 f7       	brpl	.-8      	; 0x261a <DIO_vTogPinValue+0x92>
    2622:	84 27       	eor	r24, r20
    2624:	8c 93       	st	X, r24
    2626:	16 c0       	rjmp	.+44     	; 0x2654 <DIO_vTogPinValue+0xcc>
		}
		else if(Loc_u8PortID==PortD){
    2628:	89 81       	ldd	r24, Y+1	; 0x01
    262a:	83 30       	cpi	r24, 0x03	; 3
    262c:	99 f4       	brne	.+38     	; 0x2654 <DIO_vTogPinValue+0xcc>
			TOG_BIT(PORTD, Loc_u8PinID);
    262e:	a2 e3       	ldi	r26, 0x32	; 50
    2630:	b0 e0       	ldi	r27, 0x00	; 0
    2632:	e2 e3       	ldi	r30, 0x32	; 50
    2634:	f0 e0       	ldi	r31, 0x00	; 0
    2636:	80 81       	ld	r24, Z
    2638:	48 2f       	mov	r20, r24
    263a:	8a 81       	ldd	r24, Y+2	; 0x02
    263c:	28 2f       	mov	r18, r24
    263e:	30 e0       	ldi	r19, 0x00	; 0
    2640:	81 e0       	ldi	r24, 0x01	; 1
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	02 2e       	mov	r0, r18
    2646:	02 c0       	rjmp	.+4      	; 0x264c <DIO_vTogPinValue+0xc4>
    2648:	88 0f       	add	r24, r24
    264a:	99 1f       	adc	r25, r25
    264c:	0a 94       	dec	r0
    264e:	e2 f7       	brpl	.-8      	; 0x2648 <DIO_vTogPinValue+0xc0>
    2650:	84 27       	eor	r24, r20
    2652:	8c 93       	st	X, r24
		}
	}
	else{
		//do nothing
	}
}
    2654:	0f 90       	pop	r0
    2656:	0f 90       	pop	r0
    2658:	cf 91       	pop	r28
    265a:	df 91       	pop	r29
    265c:	08 95       	ret

0000265e <ADC_vInit>:
 *      Author: a7med
 */
void(*Aptr)(void)='\0';

#include "ADC.h"
void ADC_vInit(){
    265e:	df 93       	push	r29
    2660:	cf 93       	push	r28
    2662:	cd b7       	in	r28, 0x3d	; 61
    2664:	de b7       	in	r29, 0x3e	; 62
#if PollingOrInterrupt==Polling
	#if	ADCMode==SingleConvertion
		ADCSRA = 0x87;
	#elif ADCMode==FreeRunningMode
		ADCSRA = 0xA7;
    2666:	e6 e2       	ldi	r30, 0x26	; 38
    2668:	f0 e0       	ldi	r31, 0x00	; 0
    266a:	87 ea       	ldi	r24, 0xA7	; 167
    266c:	80 83       	st	Z, r24
		SFIOR = SFIOR|0x00;
    266e:	a0 e5       	ldi	r26, 0x50	; 80
    2670:	b0 e0       	ldi	r27, 0x00	; 0
    2672:	e0 e5       	ldi	r30, 0x50	; 80
    2674:	f0 e0       	ldi	r31, 0x00	; 0
    2676:	80 81       	ld	r24, Z
    2678:	8c 93       	st	X, r24
		CLR_BIT(SFIOR,5);
		SET_BIT(SFIOR,6);
		CLR_BIT(SFIOR,7);
	#endif
#endif
	ADMUX=(0x60|((ADCNum)&0x1F));
    267a:	27 e2       	ldi	r18, 0x27	; 39
    267c:	30 e0       	ldi	r19, 0x00	; 0
    267e:	a7 e2       	ldi	r26, 0x27	; 39
    2680:	b0 e0       	ldi	r27, 0x00	; 0
    2682:	e7 e2       	ldi	r30, 0x27	; 39
    2684:	f0 e0       	ldi	r31, 0x00	; 0
    2686:	80 81       	ld	r24, Z
    2688:	81 60       	ori	r24, 0x01	; 1
    268a:	8c 93       	st	X, r24
    268c:	8c 91       	ld	r24, X
    268e:	8f 71       	andi	r24, 0x1F	; 31
    2690:	80 66       	ori	r24, 0x60	; 96
    2692:	f9 01       	movw	r30, r18
    2694:	80 83       	st	Z, r24
	}
    2696:	cf 91       	pop	r28
    2698:	df 91       	pop	r29
    269a:	08 95       	ret

0000269c <ADC_vGetVal>:
	u16 ADC_vGetVal(){
    269c:	df 93       	push	r29
    269e:	cf 93       	push	r28
    26a0:	cd b7       	in	r28, 0x3d	; 61
    26a2:	de b7       	in	r29, 0x3e	; 62
    26a4:	66 97       	sbiw	r28, 0x16	; 22
    26a6:	0f b6       	in	r0, 0x3f	; 63
    26a8:	f8 94       	cli
    26aa:	de bf       	out	0x3e, r29	; 62
    26ac:	0f be       	out	0x3f, r0	; 63
    26ae:	cd bf       	out	0x3d, r28	; 61
		StartConversion;
    26b0:	a6 e2       	ldi	r26, 0x26	; 38
    26b2:	b0 e0       	ldi	r27, 0x00	; 0
    26b4:	e6 e2       	ldi	r30, 0x26	; 38
    26b6:	f0 e0       	ldi	r31, 0x00	; 0
    26b8:	80 81       	ld	r24, Z
    26ba:	80 64       	ori	r24, 0x40	; 64
    26bc:	8c 93       	st	X, r24
		u32 y;
		u32 z;
	#if ADCMode==FreeRunningMode
			while((ADIF)==0);
    26be:	e6 e2       	ldi	r30, 0x26	; 38
    26c0:	f0 e0       	ldi	r31, 0x00	; 0
    26c2:	80 81       	ld	r24, Z
    26c4:	82 95       	swap	r24
    26c6:	8f 70       	andi	r24, 0x0F	; 15
    26c8:	88 2f       	mov	r24, r24
    26ca:	90 e0       	ldi	r25, 0x00	; 0
    26cc:	81 70       	andi	r24, 0x01	; 1
    26ce:	90 70       	andi	r25, 0x00	; 0
    26d0:	00 97       	sbiw	r24, 0x00	; 0
    26d2:	a9 f3       	breq	.-22     	; 0x26be <ADC_vGetVal+0x22>
    26d4:	80 e0       	ldi	r24, 0x00	; 0
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	a0 e2       	ldi	r26, 0x20	; 32
    26da:	b1 e4       	ldi	r27, 0x41	; 65
    26dc:	8b 87       	std	Y+11, r24	; 0x0b
    26de:	9c 87       	std	Y+12, r25	; 0x0c
    26e0:	ad 87       	std	Y+13, r26	; 0x0d
    26e2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    26e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    26e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    26ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    26ec:	20 e0       	ldi	r18, 0x00	; 0
    26ee:	30 e0       	ldi	r19, 0x00	; 0
    26f0:	4a e7       	ldi	r20, 0x7A	; 122
    26f2:	55 e4       	ldi	r21, 0x45	; 69
    26f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26f8:	dc 01       	movw	r26, r24
    26fa:	cb 01       	movw	r24, r22
    26fc:	8f 83       	std	Y+7, r24	; 0x07
    26fe:	98 87       	std	Y+8, r25	; 0x08
    2700:	a9 87       	std	Y+9, r26	; 0x09
    2702:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2704:	6f 81       	ldd	r22, Y+7	; 0x07
    2706:	78 85       	ldd	r23, Y+8	; 0x08
    2708:	89 85       	ldd	r24, Y+9	; 0x09
    270a:	9a 85       	ldd	r25, Y+10	; 0x0a
    270c:	20 e0       	ldi	r18, 0x00	; 0
    270e:	30 e0       	ldi	r19, 0x00	; 0
    2710:	40 e8       	ldi	r20, 0x80	; 128
    2712:	5f e3       	ldi	r21, 0x3F	; 63
    2714:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2718:	88 23       	and	r24, r24
    271a:	2c f4       	brge	.+10     	; 0x2726 <ADC_vGetVal+0x8a>
		__ticks = 1;
    271c:	81 e0       	ldi	r24, 0x01	; 1
    271e:	90 e0       	ldi	r25, 0x00	; 0
    2720:	9e 83       	std	Y+6, r25	; 0x06
    2722:	8d 83       	std	Y+5, r24	; 0x05
    2724:	3f c0       	rjmp	.+126    	; 0x27a4 <ADC_vGetVal+0x108>
	else if (__tmp > 65535)
    2726:	6f 81       	ldd	r22, Y+7	; 0x07
    2728:	78 85       	ldd	r23, Y+8	; 0x08
    272a:	89 85       	ldd	r24, Y+9	; 0x09
    272c:	9a 85       	ldd	r25, Y+10	; 0x0a
    272e:	20 e0       	ldi	r18, 0x00	; 0
    2730:	3f ef       	ldi	r19, 0xFF	; 255
    2732:	4f e7       	ldi	r20, 0x7F	; 127
    2734:	57 e4       	ldi	r21, 0x47	; 71
    2736:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    273a:	18 16       	cp	r1, r24
    273c:	4c f5       	brge	.+82     	; 0x2790 <ADC_vGetVal+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    273e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2740:	7c 85       	ldd	r23, Y+12	; 0x0c
    2742:	8d 85       	ldd	r24, Y+13	; 0x0d
    2744:	9e 85       	ldd	r25, Y+14	; 0x0e
    2746:	20 e0       	ldi	r18, 0x00	; 0
    2748:	30 e0       	ldi	r19, 0x00	; 0
    274a:	40 e2       	ldi	r20, 0x20	; 32
    274c:	51 e4       	ldi	r21, 0x41	; 65
    274e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2752:	dc 01       	movw	r26, r24
    2754:	cb 01       	movw	r24, r22
    2756:	bc 01       	movw	r22, r24
    2758:	cd 01       	movw	r24, r26
    275a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    275e:	dc 01       	movw	r26, r24
    2760:	cb 01       	movw	r24, r22
    2762:	9e 83       	std	Y+6, r25	; 0x06
    2764:	8d 83       	std	Y+5, r24	; 0x05
    2766:	0f c0       	rjmp	.+30     	; 0x2786 <ADC_vGetVal+0xea>
    2768:	80 e9       	ldi	r24, 0x90	; 144
    276a:	91 e0       	ldi	r25, 0x01	; 1
    276c:	9c 83       	std	Y+4, r25	; 0x04
    276e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2770:	8b 81       	ldd	r24, Y+3	; 0x03
    2772:	9c 81       	ldd	r25, Y+4	; 0x04
    2774:	01 97       	sbiw	r24, 0x01	; 1
    2776:	f1 f7       	brne	.-4      	; 0x2774 <ADC_vGetVal+0xd8>
    2778:	9c 83       	std	Y+4, r25	; 0x04
    277a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    277c:	8d 81       	ldd	r24, Y+5	; 0x05
    277e:	9e 81       	ldd	r25, Y+6	; 0x06
    2780:	01 97       	sbiw	r24, 0x01	; 1
    2782:	9e 83       	std	Y+6, r25	; 0x06
    2784:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2786:	8d 81       	ldd	r24, Y+5	; 0x05
    2788:	9e 81       	ldd	r25, Y+6	; 0x06
    278a:	00 97       	sbiw	r24, 0x00	; 0
    278c:	69 f7       	brne	.-38     	; 0x2768 <ADC_vGetVal+0xcc>
    278e:	14 c0       	rjmp	.+40     	; 0x27b8 <ADC_vGetVal+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2790:	6f 81       	ldd	r22, Y+7	; 0x07
    2792:	78 85       	ldd	r23, Y+8	; 0x08
    2794:	89 85       	ldd	r24, Y+9	; 0x09
    2796:	9a 85       	ldd	r25, Y+10	; 0x0a
    2798:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    279c:	dc 01       	movw	r26, r24
    279e:	cb 01       	movw	r24, r22
    27a0:	9e 83       	std	Y+6, r25	; 0x06
    27a2:	8d 83       	std	Y+5, r24	; 0x05
    27a4:	8d 81       	ldd	r24, Y+5	; 0x05
    27a6:	9e 81       	ldd	r25, Y+6	; 0x06
    27a8:	9a 83       	std	Y+2, r25	; 0x02
    27aa:	89 83       	std	Y+1, r24	; 0x01
    27ac:	89 81       	ldd	r24, Y+1	; 0x01
    27ae:	9a 81       	ldd	r25, Y+2	; 0x02
    27b0:	01 97       	sbiw	r24, 0x01	; 1
    27b2:	f1 f7       	brne	.-4      	; 0x27b0 <ADC_vGetVal+0x114>
    27b4:	9a 83       	std	Y+2, r25	; 0x02
    27b6:	89 83       	std	Y+1, r24	; 0x01
	#elif ADCMode==SingleConvertion
			StartConversion;
			while(CheckConversoin==1);
	#endif
		_delay_ms(10);
		y = (((u32)ADCH)<<2);
    27b8:	e5 e2       	ldi	r30, 0x25	; 37
    27ba:	f0 e0       	ldi	r31, 0x00	; 0
    27bc:	80 81       	ld	r24, Z
    27be:	88 2f       	mov	r24, r24
    27c0:	90 e0       	ldi	r25, 0x00	; 0
    27c2:	a0 e0       	ldi	r26, 0x00	; 0
    27c4:	b0 e0       	ldi	r27, 0x00	; 0
    27c6:	88 0f       	add	r24, r24
    27c8:	99 1f       	adc	r25, r25
    27ca:	aa 1f       	adc	r26, r26
    27cc:	bb 1f       	adc	r27, r27
    27ce:	88 0f       	add	r24, r24
    27d0:	99 1f       	adc	r25, r25
    27d2:	aa 1f       	adc	r26, r26
    27d4:	bb 1f       	adc	r27, r27
    27d6:	8b 8b       	std	Y+19, r24	; 0x13
    27d8:	9c 8b       	std	Y+20, r25	; 0x14
    27da:	ad 8b       	std	Y+21, r26	; 0x15
    27dc:	be 8b       	std	Y+22, r27	; 0x16
		z = (y*5000)/1024;
    27de:	8b 89       	ldd	r24, Y+19	; 0x13
    27e0:	9c 89       	ldd	r25, Y+20	; 0x14
    27e2:	ad 89       	ldd	r26, Y+21	; 0x15
    27e4:	be 89       	ldd	r27, Y+22	; 0x16
    27e6:	28 e8       	ldi	r18, 0x88	; 136
    27e8:	33 e1       	ldi	r19, 0x13	; 19
    27ea:	40 e0       	ldi	r20, 0x00	; 0
    27ec:	50 e0       	ldi	r21, 0x00	; 0
    27ee:	bc 01       	movw	r22, r24
    27f0:	cd 01       	movw	r24, r26
    27f2:	0e 94 b2 35 	call	0x6b64	; 0x6b64 <__mulsi3>
    27f6:	dc 01       	movw	r26, r24
    27f8:	cb 01       	movw	r24, r22
    27fa:	07 2e       	mov	r0, r23
    27fc:	7a e0       	ldi	r23, 0x0A	; 10
    27fe:	b6 95       	lsr	r27
    2800:	a7 95       	ror	r26
    2802:	97 95       	ror	r25
    2804:	87 95       	ror	r24
    2806:	7a 95       	dec	r23
    2808:	d1 f7       	brne	.-12     	; 0x27fe <ADC_vGetVal+0x162>
    280a:	70 2d       	mov	r23, r0
    280c:	8f 87       	std	Y+15, r24	; 0x0f
    280e:	98 8b       	std	Y+16, r25	; 0x10
    2810:	a9 8b       	std	Y+17, r26	; 0x11
    2812:	ba 8b       	std	Y+18, r27	; 0x12
		return z;
    2814:	8f 85       	ldd	r24, Y+15	; 0x0f
    2816:	98 89       	ldd	r25, Y+16	; 0x10
	}
    2818:	66 96       	adiw	r28, 0x16	; 22
    281a:	0f b6       	in	r0, 0x3f	; 63
    281c:	f8 94       	cli
    281e:	de bf       	out	0x3e, r29	; 62
    2820:	0f be       	out	0x3f, r0	; 63
    2822:	cd bf       	out	0x3d, r28	; 61
    2824:	cf 91       	pop	r28
    2826:	df 91       	pop	r29
    2828:	08 95       	ret

0000282a <ADC_vADCCallBack>:
	void ADC_vADCCallBack(void(*ptr)(void)){
    282a:	df 93       	push	r29
    282c:	cf 93       	push	r28
    282e:	00 d0       	rcall	.+0      	; 0x2830 <ADC_vADCCallBack+0x6>
    2830:	cd b7       	in	r28, 0x3d	; 61
    2832:	de b7       	in	r29, 0x3e	; 62
    2834:	9a 83       	std	Y+2, r25	; 0x02
    2836:	89 83       	std	Y+1, r24	; 0x01
		if(ptr!='\0'){
    2838:	89 81       	ldd	r24, Y+1	; 0x01
    283a:	9a 81       	ldd	r25, Y+2	; 0x02
    283c:	00 97       	sbiw	r24, 0x00	; 0
    283e:	31 f0       	breq	.+12     	; 0x284c <ADC_vADCCallBack+0x22>
			Aptr=ptr;
    2840:	89 81       	ldd	r24, Y+1	; 0x01
    2842:	9a 81       	ldd	r25, Y+2	; 0x02
    2844:	90 93 e8 00 	sts	0x00E8, r25
    2848:	80 93 e7 00 	sts	0x00E7, r24
		}
	}
    284c:	0f 90       	pop	r0
    284e:	0f 90       	pop	r0
    2850:	cf 91       	pop	r28
    2852:	df 91       	pop	r29
    2854:	08 95       	ret

00002856 <__vector_16>:
ISR(ADC_vect){
    2856:	1f 92       	push	r1
    2858:	0f 92       	push	r0
    285a:	0f b6       	in	r0, 0x3f	; 63
    285c:	0f 92       	push	r0
    285e:	11 24       	eor	r1, r1
    2860:	2f 93       	push	r18
    2862:	3f 93       	push	r19
    2864:	4f 93       	push	r20
    2866:	5f 93       	push	r21
    2868:	6f 93       	push	r22
    286a:	7f 93       	push	r23
    286c:	8f 93       	push	r24
    286e:	9f 93       	push	r25
    2870:	af 93       	push	r26
    2872:	bf 93       	push	r27
    2874:	ef 93       	push	r30
    2876:	ff 93       	push	r31
    2878:	df 93       	push	r29
    287a:	cf 93       	push	r28
    287c:	cd b7       	in	r28, 0x3d	; 61
    287e:	de b7       	in	r29, 0x3e	; 62
		if(Aptr!='\0'){
    2880:	80 91 e7 00 	lds	r24, 0x00E7
    2884:	90 91 e8 00 	lds	r25, 0x00E8
    2888:	00 97       	sbiw	r24, 0x00	; 0
    288a:	29 f0       	breq	.+10     	; 0x2896 <__vector_16+0x40>
			Aptr();
    288c:	e0 91 e7 00 	lds	r30, 0x00E7
    2890:	f0 91 e8 00 	lds	r31, 0x00E8
    2894:	09 95       	icall
		}
	}
    2896:	cf 91       	pop	r28
    2898:	df 91       	pop	r29
    289a:	ff 91       	pop	r31
    289c:	ef 91       	pop	r30
    289e:	bf 91       	pop	r27
    28a0:	af 91       	pop	r26
    28a2:	9f 91       	pop	r25
    28a4:	8f 91       	pop	r24
    28a6:	7f 91       	pop	r23
    28a8:	6f 91       	pop	r22
    28aa:	5f 91       	pop	r21
    28ac:	4f 91       	pop	r20
    28ae:	3f 91       	pop	r19
    28b0:	2f 91       	pop	r18
    28b2:	0f 90       	pop	r0
    28b4:	0f be       	out	0x3f, r0	; 63
    28b6:	0f 90       	pop	r0
    28b8:	1f 90       	pop	r1
    28ba:	18 95       	reti

000028bc <LedAndBuzzer_vLed0Open>:
* \Description     : this function is used to open the led0 which is connected to PortC Pin2
*
* \Parameters (in) : None
* \Parameters (out): None
*******************************************************************************/
void LedAndBuzzer_vLed0Open(){
    28bc:	df 93       	push	r29
    28be:	cf 93       	push	r28
    28c0:	cd b7       	in	r28, 0x3d	; 61
    28c2:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPinDirection(PortC, Pin2, Pin_OutPut);
    28c4:	82 e0       	ldi	r24, 0x02	; 2
    28c6:	62 e0       	ldi	r22, 0x02	; 2
    28c8:	41 e0       	ldi	r20, 0x01	; 1
    28ca:	0e 94 79 10 	call	0x20f2	; 0x20f2 <DIO_vSetPinDirection>
	DIO_vSetPinValue(PortC, Pin2, Pin_High);
    28ce:	82 e0       	ldi	r24, 0x02	; 2
    28d0:	62 e0       	ldi	r22, 0x02	; 2
    28d2:	41 e0       	ldi	r20, 0x01	; 1
    28d4:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <DIO_vSetPinValue>
}
    28d8:	cf 91       	pop	r28
    28da:	df 91       	pop	r29
    28dc:	08 95       	ret

000028de <LedAndBuzzer_vLed0Close>:
* \Description     : this function is used to Close the led0 which is connected to PortC Pin2
*
* \Parameters (in) : None
* \Parameters (out): None
*******************************************************************************/
void LedAndBuzzer_vLed0Close(){
    28de:	df 93       	push	r29
    28e0:	cf 93       	push	r28
    28e2:	cd b7       	in	r28, 0x3d	; 61
    28e4:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPinValue(PortC, Pin2, Pin_Low);
    28e6:	82 e0       	ldi	r24, 0x02	; 2
    28e8:	62 e0       	ldi	r22, 0x02	; 2
    28ea:	40 e0       	ldi	r20, 0x00	; 0
    28ec:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <DIO_vSetPinValue>
}
    28f0:	cf 91       	pop	r28
    28f2:	df 91       	pop	r29
    28f4:	08 95       	ret

000028f6 <LedAndBuzzer_vLed1Open>:
* \Description     : this function is used to open the led1 which is connected to PortC Pin7
*
* \Parameters (in) : None
* \Parameters (out): None
*******************************************************************************/
void LedAndBuzzer_vLed1Open(){
    28f6:	df 93       	push	r29
    28f8:	cf 93       	push	r28
    28fa:	cd b7       	in	r28, 0x3d	; 61
    28fc:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPinDirection(PortC, Pin7, Pin_OutPut);
    28fe:	82 e0       	ldi	r24, 0x02	; 2
    2900:	67 e0       	ldi	r22, 0x07	; 7
    2902:	41 e0       	ldi	r20, 0x01	; 1
    2904:	0e 94 79 10 	call	0x20f2	; 0x20f2 <DIO_vSetPinDirection>
	DIO_vSetPinValue(PortC, Pin7, Pin_High);
    2908:	82 e0       	ldi	r24, 0x02	; 2
    290a:	67 e0       	ldi	r22, 0x07	; 7
    290c:	41 e0       	ldi	r20, 0x01	; 1
    290e:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <DIO_vSetPinValue>
}
    2912:	cf 91       	pop	r28
    2914:	df 91       	pop	r29
    2916:	08 95       	ret

00002918 <LedAndBuzzer_vLed1Close>:
* \Description     : this function is used to Close the led1 which is connected to PortC Pin7
*
* \Parameters (in) : None
* \Parameters (out): None
*******************************************************************************/
void LedAndBuzzer_vLed1Close(){
    2918:	df 93       	push	r29
    291a:	cf 93       	push	r28
    291c:	cd b7       	in	r28, 0x3d	; 61
    291e:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPinValue(PortC, Pin7, Pin_Low);
    2920:	82 e0       	ldi	r24, 0x02	; 2
    2922:	67 e0       	ldi	r22, 0x07	; 7
    2924:	40 e0       	ldi	r20, 0x00	; 0
    2926:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <DIO_vSetPinValue>
}
    292a:	cf 91       	pop	r28
    292c:	df 91       	pop	r29
    292e:	08 95       	ret

00002930 <LedAndBuzzer_vLed2Open>:
* \Description     : this function is used to open the led2 which is connected to PortD Pin3
*
* \Parameters (in) : None
* \Parameters (out): None
*******************************************************************************/
void LedAndBuzzer_vLed2Open(){
    2930:	df 93       	push	r29
    2932:	cf 93       	push	r28
    2934:	cd b7       	in	r28, 0x3d	; 61
    2936:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPinDirection(PortD, Pin3, Pin_OutPut);
    2938:	83 e0       	ldi	r24, 0x03	; 3
    293a:	63 e0       	ldi	r22, 0x03	; 3
    293c:	41 e0       	ldi	r20, 0x01	; 1
    293e:	0e 94 79 10 	call	0x20f2	; 0x20f2 <DIO_vSetPinDirection>
	DIO_vSetPinValue(PortD, Pin3, Pin_High);
    2942:	83 e0       	ldi	r24, 0x03	; 3
    2944:	63 e0       	ldi	r22, 0x03	; 3
    2946:	41 e0       	ldi	r20, 0x01	; 1
    2948:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <DIO_vSetPinValue>
}
    294c:	cf 91       	pop	r28
    294e:	df 91       	pop	r29
    2950:	08 95       	ret

00002952 <LedAndBuzzer_vLed2Close>:
* \Description     : this function is used to Close the led2 which is connected to PortD Pin3
*
* \Parameters (in) : None
* \Parameters (out): None
*******************************************************************************/
void LedAndBuzzer_vLed2Close(){
    2952:	df 93       	push	r29
    2954:	cf 93       	push	r28
    2956:	cd b7       	in	r28, 0x3d	; 61
    2958:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPinValue(PortD, Pin3, Pin_Low);
    295a:	83 e0       	ldi	r24, 0x03	; 3
    295c:	63 e0       	ldi	r22, 0x03	; 3
    295e:	40 e0       	ldi	r20, 0x00	; 0
    2960:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <DIO_vSetPinValue>
}
    2964:	cf 91       	pop	r28
    2966:	df 91       	pop	r29
    2968:	08 95       	ret

0000296a <LedAndBuzzer_vBuzzerOpen>:
* \Description     : this function is used to open the Buzzer which is connected to PortA Pin3
*
* \Parameters (in) : None
* \Parameters (out): None
*******************************************************************************/
void LedAndBuzzer_vBuzzerOpen(){
    296a:	df 93       	push	r29
    296c:	cf 93       	push	r28
    296e:	cd b7       	in	r28, 0x3d	; 61
    2970:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPinDirection(PortA, Pin3, Pin_OutPut);
    2972:	80 e0       	ldi	r24, 0x00	; 0
    2974:	63 e0       	ldi	r22, 0x03	; 3
    2976:	41 e0       	ldi	r20, 0x01	; 1
    2978:	0e 94 79 10 	call	0x20f2	; 0x20f2 <DIO_vSetPinDirection>
	DIO_vSetPinValue(PortA, Pin3, Pin_High);
    297c:	80 e0       	ldi	r24, 0x00	; 0
    297e:	63 e0       	ldi	r22, 0x03	; 3
    2980:	41 e0       	ldi	r20, 0x01	; 1
    2982:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <DIO_vSetPinValue>
}
    2986:	cf 91       	pop	r28
    2988:	df 91       	pop	r29
    298a:	08 95       	ret

0000298c <LedAndBuzzer_vBuzzerClose>:
* \Description     : this function is used to Close the Buzzer which is connected to PortA Pin3
*
* \Parameters (in) : None
* \Parameters (out): None
*******************************************************************************/
void LedAndBuzzer_vBuzzerClose(){
    298c:	df 93       	push	r29
    298e:	cf 93       	push	r28
    2990:	cd b7       	in	r28, 0x3d	; 61
    2992:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPinValue(PortA, Pin3, Pin_Low);
    2994:	80 e0       	ldi	r24, 0x00	; 0
    2996:	63 e0       	ldi	r22, 0x03	; 3
    2998:	40 e0       	ldi	r20, 0x00	; 0
    299a:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <DIO_vSetPinValue>
}
    299e:	cf 91       	pop	r28
    29a0:	df 91       	pop	r29
    29a2:	08 95       	ret

000029a4 <LedAndBuzzer_vFlash>:
* \Description     : this function is used to turn on the LEDs and Buzzer for .25sec number of times
*
* \Parameters (in) : u8 Loc_vNumberOfFlashes	Number of LEDs and Buzzer WILL on and off
* \Parameters (out): None
*******************************************************************************/
void LedAndBuzzer_vFlash(u8 Loc_vNumberOfFlashes){
    29a4:	df 93       	push	r29
    29a6:	cf 93       	push	r28
    29a8:	cd b7       	in	r28, 0x3d	; 61
    29aa:	de b7       	in	r29, 0x3e	; 62
    29ac:	6e 97       	sbiw	r28, 0x1e	; 30
    29ae:	0f b6       	in	r0, 0x3f	; 63
    29b0:	f8 94       	cli
    29b2:	de bf       	out	0x3e, r29	; 62
    29b4:	0f be       	out	0x3f, r0	; 63
    29b6:	cd bf       	out	0x3d, r28	; 61
    29b8:	8e 8f       	std	Y+30, r24	; 0x1e
	u8 count;
	for(count=0;count<Loc_vNumberOfFlashes;count++){
    29ba:	1d 8e       	std	Y+29, r1	; 0x1d
    29bc:	f7 c0       	rjmp	.+494    	; 0x2bac <LedAndBuzzer_vFlash+0x208>
		LedAndBuzzer_vBuzzerOpen();
    29be:	0e 94 b5 14 	call	0x296a	; 0x296a <LedAndBuzzer_vBuzzerOpen>
		LedAndBuzzer_vLed0Open();
    29c2:	0e 94 5e 14 	call	0x28bc	; 0x28bc <LedAndBuzzer_vLed0Open>
		LedAndBuzzer_vLed1Open();
    29c6:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <LedAndBuzzer_vLed1Open>
		LedAndBuzzer_vLed2Open();
    29ca:	0e 94 98 14 	call	0x2930	; 0x2930 <LedAndBuzzer_vLed2Open>
    29ce:	80 e0       	ldi	r24, 0x00	; 0
    29d0:	90 e0       	ldi	r25, 0x00	; 0
    29d2:	aa e7       	ldi	r26, 0x7A	; 122
    29d4:	b3 e4       	ldi	r27, 0x43	; 67
    29d6:	89 8f       	std	Y+25, r24	; 0x19
    29d8:	9a 8f       	std	Y+26, r25	; 0x1a
    29da:	ab 8f       	std	Y+27, r26	; 0x1b
    29dc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29de:	69 8d       	ldd	r22, Y+25	; 0x19
    29e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29e6:	20 e0       	ldi	r18, 0x00	; 0
    29e8:	30 e0       	ldi	r19, 0x00	; 0
    29ea:	4a e7       	ldi	r20, 0x7A	; 122
    29ec:	55 e4       	ldi	r21, 0x45	; 69
    29ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29f2:	dc 01       	movw	r26, r24
    29f4:	cb 01       	movw	r24, r22
    29f6:	8d 8b       	std	Y+21, r24	; 0x15
    29f8:	9e 8b       	std	Y+22, r25	; 0x16
    29fa:	af 8b       	std	Y+23, r26	; 0x17
    29fc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    29fe:	6d 89       	ldd	r22, Y+21	; 0x15
    2a00:	7e 89       	ldd	r23, Y+22	; 0x16
    2a02:	8f 89       	ldd	r24, Y+23	; 0x17
    2a04:	98 8d       	ldd	r25, Y+24	; 0x18
    2a06:	20 e0       	ldi	r18, 0x00	; 0
    2a08:	30 e0       	ldi	r19, 0x00	; 0
    2a0a:	40 e8       	ldi	r20, 0x80	; 128
    2a0c:	5f e3       	ldi	r21, 0x3F	; 63
    2a0e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a12:	88 23       	and	r24, r24
    2a14:	2c f4       	brge	.+10     	; 0x2a20 <LedAndBuzzer_vFlash+0x7c>
		__ticks = 1;
    2a16:	81 e0       	ldi	r24, 0x01	; 1
    2a18:	90 e0       	ldi	r25, 0x00	; 0
    2a1a:	9c 8b       	std	Y+20, r25	; 0x14
    2a1c:	8b 8b       	std	Y+19, r24	; 0x13
    2a1e:	3f c0       	rjmp	.+126    	; 0x2a9e <LedAndBuzzer_vFlash+0xfa>
	else if (__tmp > 65535)
    2a20:	6d 89       	ldd	r22, Y+21	; 0x15
    2a22:	7e 89       	ldd	r23, Y+22	; 0x16
    2a24:	8f 89       	ldd	r24, Y+23	; 0x17
    2a26:	98 8d       	ldd	r25, Y+24	; 0x18
    2a28:	20 e0       	ldi	r18, 0x00	; 0
    2a2a:	3f ef       	ldi	r19, 0xFF	; 255
    2a2c:	4f e7       	ldi	r20, 0x7F	; 127
    2a2e:	57 e4       	ldi	r21, 0x47	; 71
    2a30:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a34:	18 16       	cp	r1, r24
    2a36:	4c f5       	brge	.+82     	; 0x2a8a <LedAndBuzzer_vFlash+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a38:	69 8d       	ldd	r22, Y+25	; 0x19
    2a3a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a3c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a3e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a40:	20 e0       	ldi	r18, 0x00	; 0
    2a42:	30 e0       	ldi	r19, 0x00	; 0
    2a44:	40 e2       	ldi	r20, 0x20	; 32
    2a46:	51 e4       	ldi	r21, 0x41	; 65
    2a48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a4c:	dc 01       	movw	r26, r24
    2a4e:	cb 01       	movw	r24, r22
    2a50:	bc 01       	movw	r22, r24
    2a52:	cd 01       	movw	r24, r26
    2a54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a58:	dc 01       	movw	r26, r24
    2a5a:	cb 01       	movw	r24, r22
    2a5c:	9c 8b       	std	Y+20, r25	; 0x14
    2a5e:	8b 8b       	std	Y+19, r24	; 0x13
    2a60:	0f c0       	rjmp	.+30     	; 0x2a80 <LedAndBuzzer_vFlash+0xdc>
    2a62:	80 e9       	ldi	r24, 0x90	; 144
    2a64:	91 e0       	ldi	r25, 0x01	; 1
    2a66:	9a 8b       	std	Y+18, r25	; 0x12
    2a68:	89 8b       	std	Y+17, r24	; 0x11
    2a6a:	89 89       	ldd	r24, Y+17	; 0x11
    2a6c:	9a 89       	ldd	r25, Y+18	; 0x12
    2a6e:	01 97       	sbiw	r24, 0x01	; 1
    2a70:	f1 f7       	brne	.-4      	; 0x2a6e <LedAndBuzzer_vFlash+0xca>
    2a72:	9a 8b       	std	Y+18, r25	; 0x12
    2a74:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a76:	8b 89       	ldd	r24, Y+19	; 0x13
    2a78:	9c 89       	ldd	r25, Y+20	; 0x14
    2a7a:	01 97       	sbiw	r24, 0x01	; 1
    2a7c:	9c 8b       	std	Y+20, r25	; 0x14
    2a7e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a80:	8b 89       	ldd	r24, Y+19	; 0x13
    2a82:	9c 89       	ldd	r25, Y+20	; 0x14
    2a84:	00 97       	sbiw	r24, 0x00	; 0
    2a86:	69 f7       	brne	.-38     	; 0x2a62 <LedAndBuzzer_vFlash+0xbe>
    2a88:	14 c0       	rjmp	.+40     	; 0x2ab2 <LedAndBuzzer_vFlash+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a8a:	6d 89       	ldd	r22, Y+21	; 0x15
    2a8c:	7e 89       	ldd	r23, Y+22	; 0x16
    2a8e:	8f 89       	ldd	r24, Y+23	; 0x17
    2a90:	98 8d       	ldd	r25, Y+24	; 0x18
    2a92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a96:	dc 01       	movw	r26, r24
    2a98:	cb 01       	movw	r24, r22
    2a9a:	9c 8b       	std	Y+20, r25	; 0x14
    2a9c:	8b 8b       	std	Y+19, r24	; 0x13
    2a9e:	8b 89       	ldd	r24, Y+19	; 0x13
    2aa0:	9c 89       	ldd	r25, Y+20	; 0x14
    2aa2:	98 8b       	std	Y+16, r25	; 0x10
    2aa4:	8f 87       	std	Y+15, r24	; 0x0f
    2aa6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2aa8:	98 89       	ldd	r25, Y+16	; 0x10
    2aaa:	01 97       	sbiw	r24, 0x01	; 1
    2aac:	f1 f7       	brne	.-4      	; 0x2aaa <LedAndBuzzer_vFlash+0x106>
    2aae:	98 8b       	std	Y+16, r25	; 0x10
    2ab0:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(250);
		LedAndBuzzer_vBuzzerClose();
    2ab2:	0e 94 c6 14 	call	0x298c	; 0x298c <LedAndBuzzer_vBuzzerClose>
		LedAndBuzzer_vLed2Close();
    2ab6:	0e 94 a9 14 	call	0x2952	; 0x2952 <LedAndBuzzer_vLed2Close>
		LedAndBuzzer_vLed0Close();
    2aba:	0e 94 6f 14 	call	0x28de	; 0x28de <LedAndBuzzer_vLed0Close>
		LedAndBuzzer_vLed1Close();
    2abe:	0e 94 8c 14 	call	0x2918	; 0x2918 <LedAndBuzzer_vLed1Close>
    2ac2:	80 e0       	ldi	r24, 0x00	; 0
    2ac4:	90 e0       	ldi	r25, 0x00	; 0
    2ac6:	aa e7       	ldi	r26, 0x7A	; 122
    2ac8:	b3 e4       	ldi	r27, 0x43	; 67
    2aca:	8b 87       	std	Y+11, r24	; 0x0b
    2acc:	9c 87       	std	Y+12, r25	; 0x0c
    2ace:	ad 87       	std	Y+13, r26	; 0x0d
    2ad0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ad2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ad4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ad6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ad8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ada:	20 e0       	ldi	r18, 0x00	; 0
    2adc:	30 e0       	ldi	r19, 0x00	; 0
    2ade:	4a e7       	ldi	r20, 0x7A	; 122
    2ae0:	55 e4       	ldi	r21, 0x45	; 69
    2ae2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ae6:	dc 01       	movw	r26, r24
    2ae8:	cb 01       	movw	r24, r22
    2aea:	8f 83       	std	Y+7, r24	; 0x07
    2aec:	98 87       	std	Y+8, r25	; 0x08
    2aee:	a9 87       	std	Y+9, r26	; 0x09
    2af0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2af2:	6f 81       	ldd	r22, Y+7	; 0x07
    2af4:	78 85       	ldd	r23, Y+8	; 0x08
    2af6:	89 85       	ldd	r24, Y+9	; 0x09
    2af8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2afa:	20 e0       	ldi	r18, 0x00	; 0
    2afc:	30 e0       	ldi	r19, 0x00	; 0
    2afe:	40 e8       	ldi	r20, 0x80	; 128
    2b00:	5f e3       	ldi	r21, 0x3F	; 63
    2b02:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b06:	88 23       	and	r24, r24
    2b08:	2c f4       	brge	.+10     	; 0x2b14 <LedAndBuzzer_vFlash+0x170>
		__ticks = 1;
    2b0a:	81 e0       	ldi	r24, 0x01	; 1
    2b0c:	90 e0       	ldi	r25, 0x00	; 0
    2b0e:	9e 83       	std	Y+6, r25	; 0x06
    2b10:	8d 83       	std	Y+5, r24	; 0x05
    2b12:	3f c0       	rjmp	.+126    	; 0x2b92 <LedAndBuzzer_vFlash+0x1ee>
	else if (__tmp > 65535)
    2b14:	6f 81       	ldd	r22, Y+7	; 0x07
    2b16:	78 85       	ldd	r23, Y+8	; 0x08
    2b18:	89 85       	ldd	r24, Y+9	; 0x09
    2b1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b1c:	20 e0       	ldi	r18, 0x00	; 0
    2b1e:	3f ef       	ldi	r19, 0xFF	; 255
    2b20:	4f e7       	ldi	r20, 0x7F	; 127
    2b22:	57 e4       	ldi	r21, 0x47	; 71
    2b24:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b28:	18 16       	cp	r1, r24
    2b2a:	4c f5       	brge	.+82     	; 0x2b7e <LedAndBuzzer_vFlash+0x1da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b30:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b32:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b34:	20 e0       	ldi	r18, 0x00	; 0
    2b36:	30 e0       	ldi	r19, 0x00	; 0
    2b38:	40 e2       	ldi	r20, 0x20	; 32
    2b3a:	51 e4       	ldi	r21, 0x41	; 65
    2b3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b40:	dc 01       	movw	r26, r24
    2b42:	cb 01       	movw	r24, r22
    2b44:	bc 01       	movw	r22, r24
    2b46:	cd 01       	movw	r24, r26
    2b48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b4c:	dc 01       	movw	r26, r24
    2b4e:	cb 01       	movw	r24, r22
    2b50:	9e 83       	std	Y+6, r25	; 0x06
    2b52:	8d 83       	std	Y+5, r24	; 0x05
    2b54:	0f c0       	rjmp	.+30     	; 0x2b74 <LedAndBuzzer_vFlash+0x1d0>
    2b56:	80 e9       	ldi	r24, 0x90	; 144
    2b58:	91 e0       	ldi	r25, 0x01	; 1
    2b5a:	9c 83       	std	Y+4, r25	; 0x04
    2b5c:	8b 83       	std	Y+3, r24	; 0x03
    2b5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b60:	9c 81       	ldd	r25, Y+4	; 0x04
    2b62:	01 97       	sbiw	r24, 0x01	; 1
    2b64:	f1 f7       	brne	.-4      	; 0x2b62 <LedAndBuzzer_vFlash+0x1be>
    2b66:	9c 83       	std	Y+4, r25	; 0x04
    2b68:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b6a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b6c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b6e:	01 97       	sbiw	r24, 0x01	; 1
    2b70:	9e 83       	std	Y+6, r25	; 0x06
    2b72:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b74:	8d 81       	ldd	r24, Y+5	; 0x05
    2b76:	9e 81       	ldd	r25, Y+6	; 0x06
    2b78:	00 97       	sbiw	r24, 0x00	; 0
    2b7a:	69 f7       	brne	.-38     	; 0x2b56 <LedAndBuzzer_vFlash+0x1b2>
    2b7c:	14 c0       	rjmp	.+40     	; 0x2ba6 <LedAndBuzzer_vFlash+0x202>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b7e:	6f 81       	ldd	r22, Y+7	; 0x07
    2b80:	78 85       	ldd	r23, Y+8	; 0x08
    2b82:	89 85       	ldd	r24, Y+9	; 0x09
    2b84:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b8a:	dc 01       	movw	r26, r24
    2b8c:	cb 01       	movw	r24, r22
    2b8e:	9e 83       	std	Y+6, r25	; 0x06
    2b90:	8d 83       	std	Y+5, r24	; 0x05
    2b92:	8d 81       	ldd	r24, Y+5	; 0x05
    2b94:	9e 81       	ldd	r25, Y+6	; 0x06
    2b96:	9a 83       	std	Y+2, r25	; 0x02
    2b98:	89 83       	std	Y+1, r24	; 0x01
    2b9a:	89 81       	ldd	r24, Y+1	; 0x01
    2b9c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b9e:	01 97       	sbiw	r24, 0x01	; 1
    2ba0:	f1 f7       	brne	.-4      	; 0x2b9e <LedAndBuzzer_vFlash+0x1fa>
    2ba2:	9a 83       	std	Y+2, r25	; 0x02
    2ba4:	89 83       	std	Y+1, r24	; 0x01
* \Parameters (in) : u8 Loc_vNumberOfFlashes	Number of LEDs and Buzzer WILL on and off
* \Parameters (out): None
*******************************************************************************/
void LedAndBuzzer_vFlash(u8 Loc_vNumberOfFlashes){
	u8 count;
	for(count=0;count<Loc_vNumberOfFlashes;count++){
    2ba6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ba8:	8f 5f       	subi	r24, 0xFF	; 255
    2baa:	8d 8f       	std	Y+29, r24	; 0x1d
    2bac:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2bae:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2bb0:	98 17       	cp	r25, r24
    2bb2:	08 f4       	brcc	.+2      	; 0x2bb6 <LedAndBuzzer_vFlash+0x212>
    2bb4:	04 cf       	rjmp	.-504    	; 0x29be <LedAndBuzzer_vFlash+0x1a>
		LedAndBuzzer_vLed2Close();
		LedAndBuzzer_vLed0Close();
		LedAndBuzzer_vLed1Close();
		_delay_ms(250);
	}
}
    2bb6:	6e 96       	adiw	r28, 0x1e	; 30
    2bb8:	0f b6       	in	r0, 0x3f	; 63
    2bba:	f8 94       	cli
    2bbc:	de bf       	out	0x3e, r29	; 62
    2bbe:	0f be       	out	0x3f, r0	; 63
    2bc0:	cd bf       	out	0x3d, r28	; 61
    2bc2:	cf 91       	pop	r28
    2bc4:	df 91       	pop	r29
    2bc6:	08 95       	ret

00002bc8 <_7Segma_vInit>:
 *      and PortA Pin4, Pin5, Pin6, and Pin7 is used to show number .
 */

#include "_7Segma.h"
//------------ SET pins connected to the 7segma as out puts
void _7Segma_vInit(){
    2bc8:	df 93       	push	r29
    2bca:	cf 93       	push	r28
    2bcc:	cd b7       	in	r28, 0x3d	; 61
    2bce:	de b7       	in	r29, 0x3e	; 62
	/*----------7SEG_A-->PORTA .4
				7SEG_B-->PORTA .5
				7SEG_C-->PORTA .6
				7SEG_D-->PORTA .7*/
	DIO_vSetPinDirection(PortA, Pin4, Pin_OutPut);
    2bd0:	80 e0       	ldi	r24, 0x00	; 0
    2bd2:	64 e0       	ldi	r22, 0x04	; 4
    2bd4:	41 e0       	ldi	r20, 0x01	; 1
    2bd6:	0e 94 79 10 	call	0x20f2	; 0x20f2 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PortA, Pin5, Pin_OutPut);
    2bda:	80 e0       	ldi	r24, 0x00	; 0
    2bdc:	65 e0       	ldi	r22, 0x05	; 5
    2bde:	41 e0       	ldi	r20, 0x01	; 1
    2be0:	0e 94 79 10 	call	0x20f2	; 0x20f2 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PortA, Pin6, Pin_OutPut);
    2be4:	80 e0       	ldi	r24, 0x00	; 0
    2be6:	66 e0       	ldi	r22, 0x06	; 6
    2be8:	41 e0       	ldi	r20, 0x01	; 1
    2bea:	0e 94 79 10 	call	0x20f2	; 0x20f2 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PortA, Pin7, Pin_OutPut);
    2bee:	80 e0       	ldi	r24, 0x00	; 0
    2bf0:	67 e0       	ldi	r22, 0x07	; 7
    2bf2:	41 e0       	ldi	r20, 0x01	; 1
    2bf4:	0e 94 79 10 	call	0x20f2	; 0x20f2 <DIO_vSetPinDirection>
	//-------------ENABLE LINES PINS ----------------
	DIO_vSetPinDirection(PortB, Pin2, Pin_OutPut);
    2bf8:	81 e0       	ldi	r24, 0x01	; 1
    2bfa:	62 e0       	ldi	r22, 0x02	; 2
    2bfc:	41 e0       	ldi	r20, 0x01	; 1
    2bfe:	0e 94 79 10 	call	0x20f2	; 0x20f2 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PortB, Pin1, Pin_OutPut);
    2c02:	81 e0       	ldi	r24, 0x01	; 1
    2c04:	61 e0       	ldi	r22, 0x01	; 1
    2c06:	41 e0       	ldi	r20, 0x01	; 1
    2c08:	0e 94 79 10 	call	0x20f2	; 0x20f2 <DIO_vSetPinDirection>
}
    2c0c:	cf 91       	pop	r28
    2c0e:	df 91       	pop	r29
    2c10:	08 95       	ret

00002c12 <_7Segma_vEnable1>:
//-----------enable 7Segma 1 -----------
void _7Segma_vEnable1(){
    2c12:	df 93       	push	r29
    2c14:	cf 93       	push	r28
    2c16:	cd b7       	in	r28, 0x3d	; 61
    2c18:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPinValue(PortB, Pin1, Pin_High);
    2c1a:	81 e0       	ldi	r24, 0x01	; 1
    2c1c:	61 e0       	ldi	r22, 0x01	; 1
    2c1e:	41 e0       	ldi	r20, 0x01	; 1
    2c20:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <DIO_vSetPinValue>
}
    2c24:	cf 91       	pop	r28
    2c26:	df 91       	pop	r29
    2c28:	08 95       	ret

00002c2a <_7Segma_vEnable2>:
//-----------enable 7Segma 2 -----------
void _7Segma_vEnable2(){
    2c2a:	df 93       	push	r29
    2c2c:	cf 93       	push	r28
    2c2e:	cd b7       	in	r28, 0x3d	; 61
    2c30:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPinValue(PortB, Pin2, Pin_High);
    2c32:	81 e0       	ldi	r24, 0x01	; 1
    2c34:	62 e0       	ldi	r22, 0x02	; 2
    2c36:	41 e0       	ldi	r20, 0x01	; 1
    2c38:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <DIO_vSetPinValue>
}
    2c3c:	cf 91       	pop	r28
    2c3e:	df 91       	pop	r29
    2c40:	08 95       	ret

00002c42 <_7Segma_vDisable1>:
//-----------Disable 7Segma 1
void _7Segma_vDisable1(){
    2c42:	df 93       	push	r29
    2c44:	cf 93       	push	r28
    2c46:	cd b7       	in	r28, 0x3d	; 61
    2c48:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPinValue(PortB, Pin1, Pin_Low);
    2c4a:	81 e0       	ldi	r24, 0x01	; 1
    2c4c:	61 e0       	ldi	r22, 0x01	; 1
    2c4e:	40 e0       	ldi	r20, 0x00	; 0
    2c50:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <DIO_vSetPinValue>
}
    2c54:	cf 91       	pop	r28
    2c56:	df 91       	pop	r29
    2c58:	08 95       	ret

00002c5a <_7Segma_vDisable2>:
//-----------Disable 7Segma 2
void _7Segma_vDisable2(){
    2c5a:	df 93       	push	r29
    2c5c:	cf 93       	push	r28
    2c5e:	cd b7       	in	r28, 0x3d	; 61
    2c60:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPinValue(PortB, Pin2, Pin_Low);
    2c62:	81 e0       	ldi	r24, 0x01	; 1
    2c64:	62 e0       	ldi	r22, 0x02	; 2
    2c66:	40 e0       	ldi	r20, 0x00	; 0
    2c68:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <DIO_vSetPinValue>
}
    2c6c:	cf 91       	pop	r28
    2c6e:	df 91       	pop	r29
    2c70:	08 95       	ret

00002c72 <_7Segma_vEnableDot>:
//------------enable 7Segma Dot
void _7Segma_vEnableDot(){
    2c72:	df 93       	push	r29
    2c74:	cf 93       	push	r28
    2c76:	cd b7       	in	r28, 0x3d	; 61
    2c78:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPinValue(PortB, Pin3, Pin_High);
    2c7a:	81 e0       	ldi	r24, 0x01	; 1
    2c7c:	63 e0       	ldi	r22, 0x03	; 3
    2c7e:	41 e0       	ldi	r20, 0x01	; 1
    2c80:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <DIO_vSetPinValue>
}
    2c84:	cf 91       	pop	r28
    2c86:	df 91       	pop	r29
    2c88:	08 95       	ret

00002c8a <_7Segma_vDisbleDot>:
//------------Disable 7Segma Dot
void _7Segma_vDisbleDot(){
    2c8a:	df 93       	push	r29
    2c8c:	cf 93       	push	r28
    2c8e:	cd b7       	in	r28, 0x3d	; 61
    2c90:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPinValue(PortB, Pin3, Pin_Low);
    2c92:	81 e0       	ldi	r24, 0x01	; 1
    2c94:	63 e0       	ldi	r22, 0x03	; 3
    2c96:	40 e0       	ldi	r20, 0x00	; 0
    2c98:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <DIO_vSetPinValue>
}
    2c9c:	cf 91       	pop	r28
    2c9e:	df 91       	pop	r29
    2ca0:	08 95       	ret

00002ca2 <_7Segma_vShow>:
//----------Show Value on 7Segma ----------
void _7Segma_vShow(u8 loc_u8SegmaShowNumber){
    2ca2:	df 93       	push	r29
    2ca4:	cf 93       	push	r28
    2ca6:	0f 92       	push	r0
    2ca8:	cd b7       	in	r28, 0x3d	; 61
    2caa:	de b7       	in	r29, 0x3e	; 62
    2cac:	89 83       	std	Y+1, r24	; 0x01
	loc_u8SegmaShowNumber= (loc_u8SegmaShowNumber<<4);
    2cae:	89 81       	ldd	r24, Y+1	; 0x01
    2cb0:	82 95       	swap	r24
    2cb2:	80 7f       	andi	r24, 0xF0	; 240
    2cb4:	89 83       	std	Y+1, r24	; 0x01
	DIO_vSetPortValue(PortA, loc_u8SegmaShowNumber);
    2cb6:	80 e0       	ldi	r24, 0x00	; 0
    2cb8:	69 81       	ldd	r22, Y+1	; 0x01
    2cba:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <DIO_vSetPortValue>
}
    2cbe:	0f 90       	pop	r0
    2cc0:	cf 91       	pop	r28
    2cc2:	df 91       	pop	r29
    2cc4:	08 95       	ret

00002cc6 <_7Segma_vPrintNumber1>:
//------------ this function take a u8 number and print it on the left 7Segme------
void _7Segma_vPrintNumber1(u8 loc_u8SegmaPrintNumber){
    2cc6:	df 93       	push	r29
    2cc8:	cf 93       	push	r28
    2cca:	0f 92       	push	r0
    2ccc:	cd b7       	in	r28, 0x3d	; 61
    2cce:	de b7       	in	r29, 0x3e	; 62
    2cd0:	89 83       	std	Y+1, r24	; 0x01
	_7Segma_vEnable1();
    2cd2:	0e 94 09 16 	call	0x2c12	; 0x2c12 <_7Segma_vEnable1>
	_7Segma_vShow(loc_u8SegmaPrintNumber);
    2cd6:	89 81       	ldd	r24, Y+1	; 0x01
    2cd8:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <_7Segma_vShow>
	_7Segma_vDisable1();
    2cdc:	0e 94 21 16 	call	0x2c42	; 0x2c42 <_7Segma_vDisable1>
}
    2ce0:	0f 90       	pop	r0
    2ce2:	cf 91       	pop	r28
    2ce4:	df 91       	pop	r29
    2ce6:	08 95       	ret

00002ce8 <_7Segma_vPrintNumber2>:
//------------ this function take a u8 number and print it on the right 7Segme-----
void _7Segma_vPrintNumber2(u8 loc_u8SegmaPrintNumber){
    2ce8:	df 93       	push	r29
    2cea:	cf 93       	push	r28
    2cec:	0f 92       	push	r0
    2cee:	cd b7       	in	r28, 0x3d	; 61
    2cf0:	de b7       	in	r29, 0x3e	; 62
    2cf2:	89 83       	std	Y+1, r24	; 0x01
	_7Segma_vEnable2();
    2cf4:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <_7Segma_vEnable2>
	_7Segma_vShow(loc_u8SegmaPrintNumber);
    2cf8:	89 81       	ldd	r24, Y+1	; 0x01
    2cfa:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <_7Segma_vShow>
	_7Segma_vDisable2();
    2cfe:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <_7Segma_vDisable2>
}
    2d02:	0f 90       	pop	r0
    2d04:	cf 91       	pop	r28
    2d06:	df 91       	pop	r29
    2d08:	08 95       	ret

00002d0a <PushButton_u8Button0>:
*
* \Parameters (in) : None
* \Parameters (out): u8
* \Return value:   : 0 or 1
*******************************************************************************/
u8 PushButton_u8Button0(){
    2d0a:	df 93       	push	r29
    2d0c:	cf 93       	push	r28
    2d0e:	cd b7       	in	r28, 0x3d	; 61
    2d10:	de b7       	in	r29, 0x3e	; 62
    2d12:	2f 97       	sbiw	r28, 0x0f	; 15
    2d14:	0f b6       	in	r0, 0x3f	; 63
    2d16:	f8 94       	cli
    2d18:	de bf       	out	0x3e, r29	; 62
    2d1a:	0f be       	out	0x3f, r0	; 63
    2d1c:	cd bf       	out	0x3d, r28	; 61
	DIO_vSetPinDirection(PortB, Pin0, Pin_InPut);
    2d1e:	81 e0       	ldi	r24, 0x01	; 1
    2d20:	60 e0       	ldi	r22, 0x00	; 0
    2d22:	40 e0       	ldi	r20, 0x00	; 0
    2d24:	0e 94 79 10 	call	0x20f2	; 0x20f2 <DIO_vSetPinDirection>
	if(DIO_u8PGetPinValue(PortB,Pin0)){
    2d28:	81 e0       	ldi	r24, 0x01	; 1
    2d2a:	60 e0       	ldi	r22, 0x00	; 0
    2d2c:	0e 94 57 12 	call	0x24ae	; 0x24ae <DIO_u8PGetPinValue>
    2d30:	88 23       	and	r24, r24
    2d32:	09 f4       	brne	.+2      	; 0x2d36 <PushButton_u8Button0+0x2c>
    2d34:	7b c0       	rjmp	.+246    	; 0x2e2c <PushButton_u8Button0+0x122>
    2d36:	80 e0       	ldi	r24, 0x00	; 0
    2d38:	90 e0       	ldi	r25, 0x00	; 0
    2d3a:	a8 ec       	ldi	r26, 0xC8	; 200
    2d3c:	b1 e4       	ldi	r27, 0x41	; 65
    2d3e:	8b 87       	std	Y+11, r24	; 0x0b
    2d40:	9c 87       	std	Y+12, r25	; 0x0c
    2d42:	ad 87       	std	Y+13, r26	; 0x0d
    2d44:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d46:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d48:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d4e:	20 e0       	ldi	r18, 0x00	; 0
    2d50:	30 e0       	ldi	r19, 0x00	; 0
    2d52:	4a e7       	ldi	r20, 0x7A	; 122
    2d54:	55 e4       	ldi	r21, 0x45	; 69
    2d56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d5a:	dc 01       	movw	r26, r24
    2d5c:	cb 01       	movw	r24, r22
    2d5e:	8f 83       	std	Y+7, r24	; 0x07
    2d60:	98 87       	std	Y+8, r25	; 0x08
    2d62:	a9 87       	std	Y+9, r26	; 0x09
    2d64:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d66:	6f 81       	ldd	r22, Y+7	; 0x07
    2d68:	78 85       	ldd	r23, Y+8	; 0x08
    2d6a:	89 85       	ldd	r24, Y+9	; 0x09
    2d6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d6e:	20 e0       	ldi	r18, 0x00	; 0
    2d70:	30 e0       	ldi	r19, 0x00	; 0
    2d72:	40 e8       	ldi	r20, 0x80	; 128
    2d74:	5f e3       	ldi	r21, 0x3F	; 63
    2d76:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d7a:	88 23       	and	r24, r24
    2d7c:	2c f4       	brge	.+10     	; 0x2d88 <PushButton_u8Button0+0x7e>
		__ticks = 1;
    2d7e:	81 e0       	ldi	r24, 0x01	; 1
    2d80:	90 e0       	ldi	r25, 0x00	; 0
    2d82:	9e 83       	std	Y+6, r25	; 0x06
    2d84:	8d 83       	std	Y+5, r24	; 0x05
    2d86:	3f c0       	rjmp	.+126    	; 0x2e06 <PushButton_u8Button0+0xfc>
	else if (__tmp > 65535)
    2d88:	6f 81       	ldd	r22, Y+7	; 0x07
    2d8a:	78 85       	ldd	r23, Y+8	; 0x08
    2d8c:	89 85       	ldd	r24, Y+9	; 0x09
    2d8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d90:	20 e0       	ldi	r18, 0x00	; 0
    2d92:	3f ef       	ldi	r19, 0xFF	; 255
    2d94:	4f e7       	ldi	r20, 0x7F	; 127
    2d96:	57 e4       	ldi	r21, 0x47	; 71
    2d98:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d9c:	18 16       	cp	r1, r24
    2d9e:	4c f5       	brge	.+82     	; 0x2df2 <PushButton_u8Button0+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2da0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2da2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2da4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2da6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2da8:	20 e0       	ldi	r18, 0x00	; 0
    2daa:	30 e0       	ldi	r19, 0x00	; 0
    2dac:	40 e2       	ldi	r20, 0x20	; 32
    2dae:	51 e4       	ldi	r21, 0x41	; 65
    2db0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2db4:	dc 01       	movw	r26, r24
    2db6:	cb 01       	movw	r24, r22
    2db8:	bc 01       	movw	r22, r24
    2dba:	cd 01       	movw	r24, r26
    2dbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dc0:	dc 01       	movw	r26, r24
    2dc2:	cb 01       	movw	r24, r22
    2dc4:	9e 83       	std	Y+6, r25	; 0x06
    2dc6:	8d 83       	std	Y+5, r24	; 0x05
    2dc8:	0f c0       	rjmp	.+30     	; 0x2de8 <PushButton_u8Button0+0xde>
    2dca:	80 e9       	ldi	r24, 0x90	; 144
    2dcc:	91 e0       	ldi	r25, 0x01	; 1
    2dce:	9c 83       	std	Y+4, r25	; 0x04
    2dd0:	8b 83       	std	Y+3, r24	; 0x03
    2dd2:	8b 81       	ldd	r24, Y+3	; 0x03
    2dd4:	9c 81       	ldd	r25, Y+4	; 0x04
    2dd6:	01 97       	sbiw	r24, 0x01	; 1
    2dd8:	f1 f7       	brne	.-4      	; 0x2dd6 <PushButton_u8Button0+0xcc>
    2dda:	9c 83       	std	Y+4, r25	; 0x04
    2ddc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dde:	8d 81       	ldd	r24, Y+5	; 0x05
    2de0:	9e 81       	ldd	r25, Y+6	; 0x06
    2de2:	01 97       	sbiw	r24, 0x01	; 1
    2de4:	9e 83       	std	Y+6, r25	; 0x06
    2de6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2de8:	8d 81       	ldd	r24, Y+5	; 0x05
    2dea:	9e 81       	ldd	r25, Y+6	; 0x06
    2dec:	00 97       	sbiw	r24, 0x00	; 0
    2dee:	69 f7       	brne	.-38     	; 0x2dca <PushButton_u8Button0+0xc0>
    2df0:	14 c0       	rjmp	.+40     	; 0x2e1a <PushButton_u8Button0+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2df2:	6f 81       	ldd	r22, Y+7	; 0x07
    2df4:	78 85       	ldd	r23, Y+8	; 0x08
    2df6:	89 85       	ldd	r24, Y+9	; 0x09
    2df8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dfe:	dc 01       	movw	r26, r24
    2e00:	cb 01       	movw	r24, r22
    2e02:	9e 83       	std	Y+6, r25	; 0x06
    2e04:	8d 83       	std	Y+5, r24	; 0x05
    2e06:	8d 81       	ldd	r24, Y+5	; 0x05
    2e08:	9e 81       	ldd	r25, Y+6	; 0x06
    2e0a:	9a 83       	std	Y+2, r25	; 0x02
    2e0c:	89 83       	std	Y+1, r24	; 0x01
    2e0e:	89 81       	ldd	r24, Y+1	; 0x01
    2e10:	9a 81       	ldd	r25, Y+2	; 0x02
    2e12:	01 97       	sbiw	r24, 0x01	; 1
    2e14:	f1 f7       	brne	.-4      	; 0x2e12 <PushButton_u8Button0+0x108>
    2e16:	9a 83       	std	Y+2, r25	; 0x02
    2e18:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(25);
		if(DIO_u8PGetPinValue(PortB,Pin0)){
    2e1a:	81 e0       	ldi	r24, 0x01	; 1
    2e1c:	60 e0       	ldi	r22, 0x00	; 0
    2e1e:	0e 94 57 12 	call	0x24ae	; 0x24ae <DIO_u8PGetPinValue>
    2e22:	88 23       	and	r24, r24
    2e24:	19 f0       	breq	.+6      	; 0x2e2c <PushButton_u8Button0+0x122>
			return 1;
    2e26:	81 e0       	ldi	r24, 0x01	; 1
    2e28:	8f 87       	std	Y+15, r24	; 0x0f
    2e2a:	01 c0       	rjmp	.+2      	; 0x2e2e <PushButton_u8Button0+0x124>
		}
	}
	return 0;
    2e2c:	1f 86       	std	Y+15, r1	; 0x0f
    2e2e:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    2e30:	2f 96       	adiw	r28, 0x0f	; 15
    2e32:	0f b6       	in	r0, 0x3f	; 63
    2e34:	f8 94       	cli
    2e36:	de bf       	out	0x3e, r29	; 62
    2e38:	0f be       	out	0x3f, r0	; 63
    2e3a:	cd bf       	out	0x3d, r28	; 61
    2e3c:	cf 91       	pop	r28
    2e3e:	df 91       	pop	r29
    2e40:	08 95       	ret

00002e42 <PushButton_u8Button1>:
*
* \Parameters (in) : None
* \Parameters (out): u8
* \Return value:   : 0 or 1
*******************************************************************************/
u8 PushButton_u8Button1(){
    2e42:	df 93       	push	r29
    2e44:	cf 93       	push	r28
    2e46:	cd b7       	in	r28, 0x3d	; 61
    2e48:	de b7       	in	r29, 0x3e	; 62
    2e4a:	2f 97       	sbiw	r28, 0x0f	; 15
    2e4c:	0f b6       	in	r0, 0x3f	; 63
    2e4e:	f8 94       	cli
    2e50:	de bf       	out	0x3e, r29	; 62
    2e52:	0f be       	out	0x3f, r0	; 63
    2e54:	cd bf       	out	0x3d, r28	; 61
	DIO_vSetPinDirection(PortD, Pin6, Pin_InPut);
    2e56:	83 e0       	ldi	r24, 0x03	; 3
    2e58:	66 e0       	ldi	r22, 0x06	; 6
    2e5a:	40 e0       	ldi	r20, 0x00	; 0
    2e5c:	0e 94 79 10 	call	0x20f2	; 0x20f2 <DIO_vSetPinDirection>
	if(DIO_u8PGetPinValue(PortD,Pin6)){
    2e60:	83 e0       	ldi	r24, 0x03	; 3
    2e62:	66 e0       	ldi	r22, 0x06	; 6
    2e64:	0e 94 57 12 	call	0x24ae	; 0x24ae <DIO_u8PGetPinValue>
    2e68:	88 23       	and	r24, r24
    2e6a:	09 f4       	brne	.+2      	; 0x2e6e <PushButton_u8Button1+0x2c>
    2e6c:	7b c0       	rjmp	.+246    	; 0x2f64 <PushButton_u8Button1+0x122>
    2e6e:	80 e0       	ldi	r24, 0x00	; 0
    2e70:	90 e0       	ldi	r25, 0x00	; 0
    2e72:	a8 ec       	ldi	r26, 0xC8	; 200
    2e74:	b1 e4       	ldi	r27, 0x41	; 65
    2e76:	8b 87       	std	Y+11, r24	; 0x0b
    2e78:	9c 87       	std	Y+12, r25	; 0x0c
    2e7a:	ad 87       	std	Y+13, r26	; 0x0d
    2e7c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e80:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e82:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e84:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e86:	20 e0       	ldi	r18, 0x00	; 0
    2e88:	30 e0       	ldi	r19, 0x00	; 0
    2e8a:	4a e7       	ldi	r20, 0x7A	; 122
    2e8c:	55 e4       	ldi	r21, 0x45	; 69
    2e8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e92:	dc 01       	movw	r26, r24
    2e94:	cb 01       	movw	r24, r22
    2e96:	8f 83       	std	Y+7, r24	; 0x07
    2e98:	98 87       	std	Y+8, r25	; 0x08
    2e9a:	a9 87       	std	Y+9, r26	; 0x09
    2e9c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e9e:	6f 81       	ldd	r22, Y+7	; 0x07
    2ea0:	78 85       	ldd	r23, Y+8	; 0x08
    2ea2:	89 85       	ldd	r24, Y+9	; 0x09
    2ea4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ea6:	20 e0       	ldi	r18, 0x00	; 0
    2ea8:	30 e0       	ldi	r19, 0x00	; 0
    2eaa:	40 e8       	ldi	r20, 0x80	; 128
    2eac:	5f e3       	ldi	r21, 0x3F	; 63
    2eae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2eb2:	88 23       	and	r24, r24
    2eb4:	2c f4       	brge	.+10     	; 0x2ec0 <PushButton_u8Button1+0x7e>
		__ticks = 1;
    2eb6:	81 e0       	ldi	r24, 0x01	; 1
    2eb8:	90 e0       	ldi	r25, 0x00	; 0
    2eba:	9e 83       	std	Y+6, r25	; 0x06
    2ebc:	8d 83       	std	Y+5, r24	; 0x05
    2ebe:	3f c0       	rjmp	.+126    	; 0x2f3e <PushButton_u8Button1+0xfc>
	else if (__tmp > 65535)
    2ec0:	6f 81       	ldd	r22, Y+7	; 0x07
    2ec2:	78 85       	ldd	r23, Y+8	; 0x08
    2ec4:	89 85       	ldd	r24, Y+9	; 0x09
    2ec6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ec8:	20 e0       	ldi	r18, 0x00	; 0
    2eca:	3f ef       	ldi	r19, 0xFF	; 255
    2ecc:	4f e7       	ldi	r20, 0x7F	; 127
    2ece:	57 e4       	ldi	r21, 0x47	; 71
    2ed0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ed4:	18 16       	cp	r1, r24
    2ed6:	4c f5       	brge	.+82     	; 0x2f2a <PushButton_u8Button1+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ed8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2eda:	7c 85       	ldd	r23, Y+12	; 0x0c
    2edc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ede:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ee0:	20 e0       	ldi	r18, 0x00	; 0
    2ee2:	30 e0       	ldi	r19, 0x00	; 0
    2ee4:	40 e2       	ldi	r20, 0x20	; 32
    2ee6:	51 e4       	ldi	r21, 0x41	; 65
    2ee8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eec:	dc 01       	movw	r26, r24
    2eee:	cb 01       	movw	r24, r22
    2ef0:	bc 01       	movw	r22, r24
    2ef2:	cd 01       	movw	r24, r26
    2ef4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ef8:	dc 01       	movw	r26, r24
    2efa:	cb 01       	movw	r24, r22
    2efc:	9e 83       	std	Y+6, r25	; 0x06
    2efe:	8d 83       	std	Y+5, r24	; 0x05
    2f00:	0f c0       	rjmp	.+30     	; 0x2f20 <PushButton_u8Button1+0xde>
    2f02:	80 e9       	ldi	r24, 0x90	; 144
    2f04:	91 e0       	ldi	r25, 0x01	; 1
    2f06:	9c 83       	std	Y+4, r25	; 0x04
    2f08:	8b 83       	std	Y+3, r24	; 0x03
    2f0a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f0c:	9c 81       	ldd	r25, Y+4	; 0x04
    2f0e:	01 97       	sbiw	r24, 0x01	; 1
    2f10:	f1 f7       	brne	.-4      	; 0x2f0e <PushButton_u8Button1+0xcc>
    2f12:	9c 83       	std	Y+4, r25	; 0x04
    2f14:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f16:	8d 81       	ldd	r24, Y+5	; 0x05
    2f18:	9e 81       	ldd	r25, Y+6	; 0x06
    2f1a:	01 97       	sbiw	r24, 0x01	; 1
    2f1c:	9e 83       	std	Y+6, r25	; 0x06
    2f1e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f20:	8d 81       	ldd	r24, Y+5	; 0x05
    2f22:	9e 81       	ldd	r25, Y+6	; 0x06
    2f24:	00 97       	sbiw	r24, 0x00	; 0
    2f26:	69 f7       	brne	.-38     	; 0x2f02 <PushButton_u8Button1+0xc0>
    2f28:	14 c0       	rjmp	.+40     	; 0x2f52 <PushButton_u8Button1+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f2a:	6f 81       	ldd	r22, Y+7	; 0x07
    2f2c:	78 85       	ldd	r23, Y+8	; 0x08
    2f2e:	89 85       	ldd	r24, Y+9	; 0x09
    2f30:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f36:	dc 01       	movw	r26, r24
    2f38:	cb 01       	movw	r24, r22
    2f3a:	9e 83       	std	Y+6, r25	; 0x06
    2f3c:	8d 83       	std	Y+5, r24	; 0x05
    2f3e:	8d 81       	ldd	r24, Y+5	; 0x05
    2f40:	9e 81       	ldd	r25, Y+6	; 0x06
    2f42:	9a 83       	std	Y+2, r25	; 0x02
    2f44:	89 83       	std	Y+1, r24	; 0x01
    2f46:	89 81       	ldd	r24, Y+1	; 0x01
    2f48:	9a 81       	ldd	r25, Y+2	; 0x02
    2f4a:	01 97       	sbiw	r24, 0x01	; 1
    2f4c:	f1 f7       	brne	.-4      	; 0x2f4a <PushButton_u8Button1+0x108>
    2f4e:	9a 83       	std	Y+2, r25	; 0x02
    2f50:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(25);
		if(DIO_u8PGetPinValue(PortD,Pin6)){
    2f52:	83 e0       	ldi	r24, 0x03	; 3
    2f54:	66 e0       	ldi	r22, 0x06	; 6
    2f56:	0e 94 57 12 	call	0x24ae	; 0x24ae <DIO_u8PGetPinValue>
    2f5a:	88 23       	and	r24, r24
    2f5c:	19 f0       	breq	.+6      	; 0x2f64 <PushButton_u8Button1+0x122>
			return 1;
    2f5e:	81 e0       	ldi	r24, 0x01	; 1
    2f60:	8f 87       	std	Y+15, r24	; 0x0f
    2f62:	01 c0       	rjmp	.+2      	; 0x2f66 <PushButton_u8Button1+0x124>
		}
	}
	return 0;
    2f64:	1f 86       	std	Y+15, r1	; 0x0f
    2f66:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    2f68:	2f 96       	adiw	r28, 0x0f	; 15
    2f6a:	0f b6       	in	r0, 0x3f	; 63
    2f6c:	f8 94       	cli
    2f6e:	de bf       	out	0x3e, r29	; 62
    2f70:	0f be       	out	0x3f, r0	; 63
    2f72:	cd bf       	out	0x3d, r28	; 61
    2f74:	cf 91       	pop	r28
    2f76:	df 91       	pop	r29
    2f78:	08 95       	ret

00002f7a <PushButton_u8Button2>:
*
* \Parameters (in) : None
* \Parameters (out): u8
* \Return value:   : 0 or 1
*******************************************************************************/
u8 PushButton_u8Button2(){
    2f7a:	df 93       	push	r29
    2f7c:	cf 93       	push	r28
    2f7e:	cd b7       	in	r28, 0x3d	; 61
    2f80:	de b7       	in	r29, 0x3e	; 62
    2f82:	2f 97       	sbiw	r28, 0x0f	; 15
    2f84:	0f b6       	in	r0, 0x3f	; 63
    2f86:	f8 94       	cli
    2f88:	de bf       	out	0x3e, r29	; 62
    2f8a:	0f be       	out	0x3f, r0	; 63
    2f8c:	cd bf       	out	0x3d, r28	; 61
	DIO_vSetPinDirection(PortD, Pin2, Pin_InPut);
    2f8e:	83 e0       	ldi	r24, 0x03	; 3
    2f90:	62 e0       	ldi	r22, 0x02	; 2
    2f92:	40 e0       	ldi	r20, 0x00	; 0
    2f94:	0e 94 79 10 	call	0x20f2	; 0x20f2 <DIO_vSetPinDirection>
	if(DIO_u8PGetPinValue(PortD,Pin2)){
    2f98:	83 e0       	ldi	r24, 0x03	; 3
    2f9a:	62 e0       	ldi	r22, 0x02	; 2
    2f9c:	0e 94 57 12 	call	0x24ae	; 0x24ae <DIO_u8PGetPinValue>
    2fa0:	88 23       	and	r24, r24
    2fa2:	09 f4       	brne	.+2      	; 0x2fa6 <PushButton_u8Button2+0x2c>
    2fa4:	7b c0       	rjmp	.+246    	; 0x309c <PushButton_u8Button2+0x122>
    2fa6:	80 e0       	ldi	r24, 0x00	; 0
    2fa8:	90 e0       	ldi	r25, 0x00	; 0
    2faa:	a8 ec       	ldi	r26, 0xC8	; 200
    2fac:	b1 e4       	ldi	r27, 0x41	; 65
    2fae:	8b 87       	std	Y+11, r24	; 0x0b
    2fb0:	9c 87       	std	Y+12, r25	; 0x0c
    2fb2:	ad 87       	std	Y+13, r26	; 0x0d
    2fb4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fb6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fb8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fba:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fbc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fbe:	20 e0       	ldi	r18, 0x00	; 0
    2fc0:	30 e0       	ldi	r19, 0x00	; 0
    2fc2:	4a e7       	ldi	r20, 0x7A	; 122
    2fc4:	55 e4       	ldi	r21, 0x45	; 69
    2fc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fca:	dc 01       	movw	r26, r24
    2fcc:	cb 01       	movw	r24, r22
    2fce:	8f 83       	std	Y+7, r24	; 0x07
    2fd0:	98 87       	std	Y+8, r25	; 0x08
    2fd2:	a9 87       	std	Y+9, r26	; 0x09
    2fd4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2fd6:	6f 81       	ldd	r22, Y+7	; 0x07
    2fd8:	78 85       	ldd	r23, Y+8	; 0x08
    2fda:	89 85       	ldd	r24, Y+9	; 0x09
    2fdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fde:	20 e0       	ldi	r18, 0x00	; 0
    2fe0:	30 e0       	ldi	r19, 0x00	; 0
    2fe2:	40 e8       	ldi	r20, 0x80	; 128
    2fe4:	5f e3       	ldi	r21, 0x3F	; 63
    2fe6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2fea:	88 23       	and	r24, r24
    2fec:	2c f4       	brge	.+10     	; 0x2ff8 <PushButton_u8Button2+0x7e>
		__ticks = 1;
    2fee:	81 e0       	ldi	r24, 0x01	; 1
    2ff0:	90 e0       	ldi	r25, 0x00	; 0
    2ff2:	9e 83       	std	Y+6, r25	; 0x06
    2ff4:	8d 83       	std	Y+5, r24	; 0x05
    2ff6:	3f c0       	rjmp	.+126    	; 0x3076 <PushButton_u8Button2+0xfc>
	else if (__tmp > 65535)
    2ff8:	6f 81       	ldd	r22, Y+7	; 0x07
    2ffa:	78 85       	ldd	r23, Y+8	; 0x08
    2ffc:	89 85       	ldd	r24, Y+9	; 0x09
    2ffe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3000:	20 e0       	ldi	r18, 0x00	; 0
    3002:	3f ef       	ldi	r19, 0xFF	; 255
    3004:	4f e7       	ldi	r20, 0x7F	; 127
    3006:	57 e4       	ldi	r21, 0x47	; 71
    3008:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    300c:	18 16       	cp	r1, r24
    300e:	4c f5       	brge	.+82     	; 0x3062 <PushButton_u8Button2+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3010:	6b 85       	ldd	r22, Y+11	; 0x0b
    3012:	7c 85       	ldd	r23, Y+12	; 0x0c
    3014:	8d 85       	ldd	r24, Y+13	; 0x0d
    3016:	9e 85       	ldd	r25, Y+14	; 0x0e
    3018:	20 e0       	ldi	r18, 0x00	; 0
    301a:	30 e0       	ldi	r19, 0x00	; 0
    301c:	40 e2       	ldi	r20, 0x20	; 32
    301e:	51 e4       	ldi	r21, 0x41	; 65
    3020:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3024:	dc 01       	movw	r26, r24
    3026:	cb 01       	movw	r24, r22
    3028:	bc 01       	movw	r22, r24
    302a:	cd 01       	movw	r24, r26
    302c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3030:	dc 01       	movw	r26, r24
    3032:	cb 01       	movw	r24, r22
    3034:	9e 83       	std	Y+6, r25	; 0x06
    3036:	8d 83       	std	Y+5, r24	; 0x05
    3038:	0f c0       	rjmp	.+30     	; 0x3058 <PushButton_u8Button2+0xde>
    303a:	80 e9       	ldi	r24, 0x90	; 144
    303c:	91 e0       	ldi	r25, 0x01	; 1
    303e:	9c 83       	std	Y+4, r25	; 0x04
    3040:	8b 83       	std	Y+3, r24	; 0x03
    3042:	8b 81       	ldd	r24, Y+3	; 0x03
    3044:	9c 81       	ldd	r25, Y+4	; 0x04
    3046:	01 97       	sbiw	r24, 0x01	; 1
    3048:	f1 f7       	brne	.-4      	; 0x3046 <PushButton_u8Button2+0xcc>
    304a:	9c 83       	std	Y+4, r25	; 0x04
    304c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    304e:	8d 81       	ldd	r24, Y+5	; 0x05
    3050:	9e 81       	ldd	r25, Y+6	; 0x06
    3052:	01 97       	sbiw	r24, 0x01	; 1
    3054:	9e 83       	std	Y+6, r25	; 0x06
    3056:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3058:	8d 81       	ldd	r24, Y+5	; 0x05
    305a:	9e 81       	ldd	r25, Y+6	; 0x06
    305c:	00 97       	sbiw	r24, 0x00	; 0
    305e:	69 f7       	brne	.-38     	; 0x303a <PushButton_u8Button2+0xc0>
    3060:	14 c0       	rjmp	.+40     	; 0x308a <PushButton_u8Button2+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3062:	6f 81       	ldd	r22, Y+7	; 0x07
    3064:	78 85       	ldd	r23, Y+8	; 0x08
    3066:	89 85       	ldd	r24, Y+9	; 0x09
    3068:	9a 85       	ldd	r25, Y+10	; 0x0a
    306a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    306e:	dc 01       	movw	r26, r24
    3070:	cb 01       	movw	r24, r22
    3072:	9e 83       	std	Y+6, r25	; 0x06
    3074:	8d 83       	std	Y+5, r24	; 0x05
    3076:	8d 81       	ldd	r24, Y+5	; 0x05
    3078:	9e 81       	ldd	r25, Y+6	; 0x06
    307a:	9a 83       	std	Y+2, r25	; 0x02
    307c:	89 83       	std	Y+1, r24	; 0x01
    307e:	89 81       	ldd	r24, Y+1	; 0x01
    3080:	9a 81       	ldd	r25, Y+2	; 0x02
    3082:	01 97       	sbiw	r24, 0x01	; 1
    3084:	f1 f7       	brne	.-4      	; 0x3082 <PushButton_u8Button2+0x108>
    3086:	9a 83       	std	Y+2, r25	; 0x02
    3088:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(25);
		if(DIO_u8PGetPinValue(PortD,Pin2)){
    308a:	83 e0       	ldi	r24, 0x03	; 3
    308c:	62 e0       	ldi	r22, 0x02	; 2
    308e:	0e 94 57 12 	call	0x24ae	; 0x24ae <DIO_u8PGetPinValue>
    3092:	88 23       	and	r24, r24
    3094:	19 f0       	breq	.+6      	; 0x309c <PushButton_u8Button2+0x122>
			return 1;
    3096:	81 e0       	ldi	r24, 0x01	; 1
    3098:	8f 87       	std	Y+15, r24	; 0x0f
    309a:	01 c0       	rjmp	.+2      	; 0x309e <PushButton_u8Button2+0x124>
		}
	}
	return 0;
    309c:	1f 86       	std	Y+15, r1	; 0x0f
    309e:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    30a0:	2f 96       	adiw	r28, 0x0f	; 15
    30a2:	0f b6       	in	r0, 0x3f	; 63
    30a4:	f8 94       	cli
    30a6:	de bf       	out	0x3e, r29	; 62
    30a8:	0f be       	out	0x3f, r0	; 63
    30aa:	cd bf       	out	0x3d, r28	; 61
    30ac:	cf 91       	pop	r28
    30ae:	df 91       	pop	r29
    30b0:	08 95       	ret

000030b2 <PushButton_u8Button1LonPress>:
*
* \Parameters (in) : None
* \Parameters (out): u8
* \Return value:   : 0 or 1
*******************************************************************************/
u8 PushButton_u8Button1LonPress(){
    30b2:	df 93       	push	r29
    30b4:	cf 93       	push	r28
    30b6:	cd b7       	in	r28, 0x3d	; 61
    30b8:	de b7       	in	r29, 0x3e	; 62
    30ba:	2f 97       	sbiw	r28, 0x0f	; 15
    30bc:	0f b6       	in	r0, 0x3f	; 63
    30be:	f8 94       	cli
    30c0:	de bf       	out	0x3e, r29	; 62
    30c2:	0f be       	out	0x3f, r0	; 63
    30c4:	cd bf       	out	0x3d, r28	; 61
	if(PushButton_u8Button1()){
    30c6:	0e 94 21 17 	call	0x2e42	; 0x2e42 <PushButton_u8Button1>
    30ca:	88 23       	and	r24, r24
    30cc:	09 f4       	brne	.+2      	; 0x30d0 <PushButton_u8Button1LonPress+0x1e>
    30ce:	7b c0       	rjmp	.+246    	; 0x31c6 <PushButton_u8Button1LonPress+0x114>
    30d0:	72 c0       	rjmp	.+228    	; 0x31b6 <PushButton_u8Button1LonPress+0x104>
		while(PushButton_u8Button1()){
    30d2:	80 e0       	ldi	r24, 0x00	; 0
    30d4:	90 e0       	ldi	r25, 0x00	; 0
    30d6:	a0 e2       	ldi	r26, 0x20	; 32
    30d8:	b1 e4       	ldi	r27, 0x41	; 65
    30da:	8b 87       	std	Y+11, r24	; 0x0b
    30dc:	9c 87       	std	Y+12, r25	; 0x0c
    30de:	ad 87       	std	Y+13, r26	; 0x0d
    30e0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    30e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    30e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    30e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    30ea:	20 e0       	ldi	r18, 0x00	; 0
    30ec:	30 e0       	ldi	r19, 0x00	; 0
    30ee:	4a e7       	ldi	r20, 0x7A	; 122
    30f0:	55 e4       	ldi	r21, 0x45	; 69
    30f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30f6:	dc 01       	movw	r26, r24
    30f8:	cb 01       	movw	r24, r22
    30fa:	8f 83       	std	Y+7, r24	; 0x07
    30fc:	98 87       	std	Y+8, r25	; 0x08
    30fe:	a9 87       	std	Y+9, r26	; 0x09
    3100:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3102:	6f 81       	ldd	r22, Y+7	; 0x07
    3104:	78 85       	ldd	r23, Y+8	; 0x08
    3106:	89 85       	ldd	r24, Y+9	; 0x09
    3108:	9a 85       	ldd	r25, Y+10	; 0x0a
    310a:	20 e0       	ldi	r18, 0x00	; 0
    310c:	30 e0       	ldi	r19, 0x00	; 0
    310e:	40 e8       	ldi	r20, 0x80	; 128
    3110:	5f e3       	ldi	r21, 0x3F	; 63
    3112:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3116:	88 23       	and	r24, r24
    3118:	2c f4       	brge	.+10     	; 0x3124 <PushButton_u8Button1LonPress+0x72>
		__ticks = 1;
    311a:	81 e0       	ldi	r24, 0x01	; 1
    311c:	90 e0       	ldi	r25, 0x00	; 0
    311e:	9e 83       	std	Y+6, r25	; 0x06
    3120:	8d 83       	std	Y+5, r24	; 0x05
    3122:	3f c0       	rjmp	.+126    	; 0x31a2 <PushButton_u8Button1LonPress+0xf0>
	else if (__tmp > 65535)
    3124:	6f 81       	ldd	r22, Y+7	; 0x07
    3126:	78 85       	ldd	r23, Y+8	; 0x08
    3128:	89 85       	ldd	r24, Y+9	; 0x09
    312a:	9a 85       	ldd	r25, Y+10	; 0x0a
    312c:	20 e0       	ldi	r18, 0x00	; 0
    312e:	3f ef       	ldi	r19, 0xFF	; 255
    3130:	4f e7       	ldi	r20, 0x7F	; 127
    3132:	57 e4       	ldi	r21, 0x47	; 71
    3134:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3138:	18 16       	cp	r1, r24
    313a:	4c f5       	brge	.+82     	; 0x318e <PushButton_u8Button1LonPress+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    313c:	6b 85       	ldd	r22, Y+11	; 0x0b
    313e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3140:	8d 85       	ldd	r24, Y+13	; 0x0d
    3142:	9e 85       	ldd	r25, Y+14	; 0x0e
    3144:	20 e0       	ldi	r18, 0x00	; 0
    3146:	30 e0       	ldi	r19, 0x00	; 0
    3148:	40 e2       	ldi	r20, 0x20	; 32
    314a:	51 e4       	ldi	r21, 0x41	; 65
    314c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3150:	dc 01       	movw	r26, r24
    3152:	cb 01       	movw	r24, r22
    3154:	bc 01       	movw	r22, r24
    3156:	cd 01       	movw	r24, r26
    3158:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    315c:	dc 01       	movw	r26, r24
    315e:	cb 01       	movw	r24, r22
    3160:	9e 83       	std	Y+6, r25	; 0x06
    3162:	8d 83       	std	Y+5, r24	; 0x05
    3164:	0f c0       	rjmp	.+30     	; 0x3184 <PushButton_u8Button1LonPress+0xd2>
    3166:	80 e9       	ldi	r24, 0x90	; 144
    3168:	91 e0       	ldi	r25, 0x01	; 1
    316a:	9c 83       	std	Y+4, r25	; 0x04
    316c:	8b 83       	std	Y+3, r24	; 0x03
    316e:	8b 81       	ldd	r24, Y+3	; 0x03
    3170:	9c 81       	ldd	r25, Y+4	; 0x04
    3172:	01 97       	sbiw	r24, 0x01	; 1
    3174:	f1 f7       	brne	.-4      	; 0x3172 <PushButton_u8Button1LonPress+0xc0>
    3176:	9c 83       	std	Y+4, r25	; 0x04
    3178:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    317a:	8d 81       	ldd	r24, Y+5	; 0x05
    317c:	9e 81       	ldd	r25, Y+6	; 0x06
    317e:	01 97       	sbiw	r24, 0x01	; 1
    3180:	9e 83       	std	Y+6, r25	; 0x06
    3182:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3184:	8d 81       	ldd	r24, Y+5	; 0x05
    3186:	9e 81       	ldd	r25, Y+6	; 0x06
    3188:	00 97       	sbiw	r24, 0x00	; 0
    318a:	69 f7       	brne	.-38     	; 0x3166 <PushButton_u8Button1LonPress+0xb4>
    318c:	14 c0       	rjmp	.+40     	; 0x31b6 <PushButton_u8Button1LonPress+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    318e:	6f 81       	ldd	r22, Y+7	; 0x07
    3190:	78 85       	ldd	r23, Y+8	; 0x08
    3192:	89 85       	ldd	r24, Y+9	; 0x09
    3194:	9a 85       	ldd	r25, Y+10	; 0x0a
    3196:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    319a:	dc 01       	movw	r26, r24
    319c:	cb 01       	movw	r24, r22
    319e:	9e 83       	std	Y+6, r25	; 0x06
    31a0:	8d 83       	std	Y+5, r24	; 0x05
    31a2:	8d 81       	ldd	r24, Y+5	; 0x05
    31a4:	9e 81       	ldd	r25, Y+6	; 0x06
    31a6:	9a 83       	std	Y+2, r25	; 0x02
    31a8:	89 83       	std	Y+1, r24	; 0x01
    31aa:	89 81       	ldd	r24, Y+1	; 0x01
    31ac:	9a 81       	ldd	r25, Y+2	; 0x02
    31ae:	01 97       	sbiw	r24, 0x01	; 1
    31b0:	f1 f7       	brne	.-4      	; 0x31ae <PushButton_u8Button1LonPress+0xfc>
    31b2:	9a 83       	std	Y+2, r25	; 0x02
    31b4:	89 83       	std	Y+1, r24	; 0x01
    31b6:	0e 94 21 17 	call	0x2e42	; 0x2e42 <PushButton_u8Button1>
    31ba:	88 23       	and	r24, r24
    31bc:	09 f0       	breq	.+2      	; 0x31c0 <PushButton_u8Button1LonPress+0x10e>
    31be:	89 cf       	rjmp	.-238    	; 0x30d2 <PushButton_u8Button1LonPress+0x20>
			_delay_ms(10);
		}
		return 1;
    31c0:	81 e0       	ldi	r24, 0x01	; 1
    31c2:	8f 87       	std	Y+15, r24	; 0x0f
    31c4:	01 c0       	rjmp	.+2      	; 0x31c8 <PushButton_u8Button1LonPress+0x116>
	}
	else{
		return 0;
    31c6:	1f 86       	std	Y+15, r1	; 0x0f
    31c8:	8f 85       	ldd	r24, Y+15	; 0x0f
	}
}
    31ca:	2f 96       	adiw	r28, 0x0f	; 15
    31cc:	0f b6       	in	r0, 0x3f	; 63
    31ce:	f8 94       	cli
    31d0:	de bf       	out	0x3e, r29	; 62
    31d2:	0f be       	out	0x3f, r0	; 63
    31d4:	cd bf       	out	0x3d, r28	; 61
    31d6:	cf 91       	pop	r28
    31d8:	df 91       	pop	r29
    31da:	08 95       	ret

000031dc <PushButton_u8Button2OneSec>:
*
* \Parameters (in) : None
* \Parameters (out): u8
* \Return value:   : 0 or 1
*******************************************************************************/
u8 PushButton_u8Button2OneSec(){
    31dc:	df 93       	push	r29
    31de:	cf 93       	push	r28
    31e0:	cd b7       	in	r28, 0x3d	; 61
    31e2:	de b7       	in	r29, 0x3e	; 62
    31e4:	60 97       	sbiw	r28, 0x10	; 16
    31e6:	0f b6       	in	r0, 0x3f	; 63
    31e8:	f8 94       	cli
    31ea:	de bf       	out	0x3e, r29	; 62
    31ec:	0f be       	out	0x3f, r0	; 63
    31ee:	cd bf       	out	0x3d, r28	; 61
	u8 Delay=0;
    31f0:	1f 86       	std	Y+15, r1	; 0x0f
    31f2:	75 c0       	rjmp	.+234    	; 0x32de <PushButton_u8Button2OneSec+0x102>
	while(PushButton_u8Button2()){
    31f4:	80 e0       	ldi	r24, 0x00	; 0
    31f6:	90 e0       	ldi	r25, 0x00	; 0
    31f8:	a0 e2       	ldi	r26, 0x20	; 32
    31fa:	b1 e4       	ldi	r27, 0x41	; 65
    31fc:	8b 87       	std	Y+11, r24	; 0x0b
    31fe:	9c 87       	std	Y+12, r25	; 0x0c
    3200:	ad 87       	std	Y+13, r26	; 0x0d
    3202:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3204:	6b 85       	ldd	r22, Y+11	; 0x0b
    3206:	7c 85       	ldd	r23, Y+12	; 0x0c
    3208:	8d 85       	ldd	r24, Y+13	; 0x0d
    320a:	9e 85       	ldd	r25, Y+14	; 0x0e
    320c:	20 e0       	ldi	r18, 0x00	; 0
    320e:	30 e0       	ldi	r19, 0x00	; 0
    3210:	4a e7       	ldi	r20, 0x7A	; 122
    3212:	55 e4       	ldi	r21, 0x45	; 69
    3214:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3218:	dc 01       	movw	r26, r24
    321a:	cb 01       	movw	r24, r22
    321c:	8f 83       	std	Y+7, r24	; 0x07
    321e:	98 87       	std	Y+8, r25	; 0x08
    3220:	a9 87       	std	Y+9, r26	; 0x09
    3222:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3224:	6f 81       	ldd	r22, Y+7	; 0x07
    3226:	78 85       	ldd	r23, Y+8	; 0x08
    3228:	89 85       	ldd	r24, Y+9	; 0x09
    322a:	9a 85       	ldd	r25, Y+10	; 0x0a
    322c:	20 e0       	ldi	r18, 0x00	; 0
    322e:	30 e0       	ldi	r19, 0x00	; 0
    3230:	40 e8       	ldi	r20, 0x80	; 128
    3232:	5f e3       	ldi	r21, 0x3F	; 63
    3234:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3238:	88 23       	and	r24, r24
    323a:	2c f4       	brge	.+10     	; 0x3246 <PushButton_u8Button2OneSec+0x6a>
		__ticks = 1;
    323c:	81 e0       	ldi	r24, 0x01	; 1
    323e:	90 e0       	ldi	r25, 0x00	; 0
    3240:	9e 83       	std	Y+6, r25	; 0x06
    3242:	8d 83       	std	Y+5, r24	; 0x05
    3244:	3f c0       	rjmp	.+126    	; 0x32c4 <PushButton_u8Button2OneSec+0xe8>
	else if (__tmp > 65535)
    3246:	6f 81       	ldd	r22, Y+7	; 0x07
    3248:	78 85       	ldd	r23, Y+8	; 0x08
    324a:	89 85       	ldd	r24, Y+9	; 0x09
    324c:	9a 85       	ldd	r25, Y+10	; 0x0a
    324e:	20 e0       	ldi	r18, 0x00	; 0
    3250:	3f ef       	ldi	r19, 0xFF	; 255
    3252:	4f e7       	ldi	r20, 0x7F	; 127
    3254:	57 e4       	ldi	r21, 0x47	; 71
    3256:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    325a:	18 16       	cp	r1, r24
    325c:	4c f5       	brge	.+82     	; 0x32b0 <PushButton_u8Button2OneSec+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    325e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3260:	7c 85       	ldd	r23, Y+12	; 0x0c
    3262:	8d 85       	ldd	r24, Y+13	; 0x0d
    3264:	9e 85       	ldd	r25, Y+14	; 0x0e
    3266:	20 e0       	ldi	r18, 0x00	; 0
    3268:	30 e0       	ldi	r19, 0x00	; 0
    326a:	40 e2       	ldi	r20, 0x20	; 32
    326c:	51 e4       	ldi	r21, 0x41	; 65
    326e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3272:	dc 01       	movw	r26, r24
    3274:	cb 01       	movw	r24, r22
    3276:	bc 01       	movw	r22, r24
    3278:	cd 01       	movw	r24, r26
    327a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    327e:	dc 01       	movw	r26, r24
    3280:	cb 01       	movw	r24, r22
    3282:	9e 83       	std	Y+6, r25	; 0x06
    3284:	8d 83       	std	Y+5, r24	; 0x05
    3286:	0f c0       	rjmp	.+30     	; 0x32a6 <PushButton_u8Button2OneSec+0xca>
    3288:	80 e9       	ldi	r24, 0x90	; 144
    328a:	91 e0       	ldi	r25, 0x01	; 1
    328c:	9c 83       	std	Y+4, r25	; 0x04
    328e:	8b 83       	std	Y+3, r24	; 0x03
    3290:	8b 81       	ldd	r24, Y+3	; 0x03
    3292:	9c 81       	ldd	r25, Y+4	; 0x04
    3294:	01 97       	sbiw	r24, 0x01	; 1
    3296:	f1 f7       	brne	.-4      	; 0x3294 <PushButton_u8Button2OneSec+0xb8>
    3298:	9c 83       	std	Y+4, r25	; 0x04
    329a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    329c:	8d 81       	ldd	r24, Y+5	; 0x05
    329e:	9e 81       	ldd	r25, Y+6	; 0x06
    32a0:	01 97       	sbiw	r24, 0x01	; 1
    32a2:	9e 83       	std	Y+6, r25	; 0x06
    32a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32a6:	8d 81       	ldd	r24, Y+5	; 0x05
    32a8:	9e 81       	ldd	r25, Y+6	; 0x06
    32aa:	00 97       	sbiw	r24, 0x00	; 0
    32ac:	69 f7       	brne	.-38     	; 0x3288 <PushButton_u8Button2OneSec+0xac>
    32ae:	14 c0       	rjmp	.+40     	; 0x32d8 <PushButton_u8Button2OneSec+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32b0:	6f 81       	ldd	r22, Y+7	; 0x07
    32b2:	78 85       	ldd	r23, Y+8	; 0x08
    32b4:	89 85       	ldd	r24, Y+9	; 0x09
    32b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    32b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32bc:	dc 01       	movw	r26, r24
    32be:	cb 01       	movw	r24, r22
    32c0:	9e 83       	std	Y+6, r25	; 0x06
    32c2:	8d 83       	std	Y+5, r24	; 0x05
    32c4:	8d 81       	ldd	r24, Y+5	; 0x05
    32c6:	9e 81       	ldd	r25, Y+6	; 0x06
    32c8:	9a 83       	std	Y+2, r25	; 0x02
    32ca:	89 83       	std	Y+1, r24	; 0x01
    32cc:	89 81       	ldd	r24, Y+1	; 0x01
    32ce:	9a 81       	ldd	r25, Y+2	; 0x02
    32d0:	01 97       	sbiw	r24, 0x01	; 1
    32d2:	f1 f7       	brne	.-4      	; 0x32d0 <PushButton_u8Button2OneSec+0xf4>
    32d4:	9a 83       	std	Y+2, r25	; 0x02
    32d6:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		Delay++;
    32d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    32da:	8f 5f       	subi	r24, 0xFF	; 255
    32dc:	8f 87       	std	Y+15, r24	; 0x0f
* \Parameters (out): u8
* \Return value:   : 0 or 1
*******************************************************************************/
u8 PushButton_u8Button2OneSec(){
	u8 Delay=0;
	while(PushButton_u8Button2()){
    32de:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <PushButton_u8Button2>
    32e2:	88 23       	and	r24, r24
    32e4:	09 f0       	breq	.+2      	; 0x32e8 <PushButton_u8Button2OneSec+0x10c>
    32e6:	86 cf       	rjmp	.-244    	; 0x31f4 <PushButton_u8Button2OneSec+0x18>
		_delay_ms(10);
		Delay++;
	}
	if(Delay>29){
    32e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    32ea:	8e 31       	cpi	r24, 0x1E	; 30
    32ec:	18 f0       	brcs	.+6      	; 0x32f4 <PushButton_u8Button2OneSec+0x118>
		return 1;
    32ee:	81 e0       	ldi	r24, 0x01	; 1
    32f0:	88 8b       	std	Y+16, r24	; 0x10
    32f2:	01 c0       	rjmp	.+2      	; 0x32f6 <PushButton_u8Button2OneSec+0x11a>
	}
	else{
		return 0;
    32f4:	18 8a       	std	Y+16, r1	; 0x10
    32f6:	88 89       	ldd	r24, Y+16	; 0x10
	}
}
    32f8:	60 96       	adiw	r28, 0x10	; 16
    32fa:	0f b6       	in	r0, 0x3f	; 63
    32fc:	f8 94       	cli
    32fe:	de bf       	out	0x3e, r29	; 62
    3300:	0f be       	out	0x3f, r0	; 63
    3302:	cd bf       	out	0x3d, r28	; 61
    3304:	cf 91       	pop	r28
    3306:	df 91       	pop	r29
    3308:	08 95       	ret

0000330a <LCD_vSendCommand>:
 *
 *  Created on: Dec 30, 2022
 *      Author: a7med
 */
#include "LCD.h"
void LCD_vSendCommand(u8 Loc_u8Command){
    330a:	df 93       	push	r29
    330c:	cf 93       	push	r28
    330e:	cd b7       	in	r28, 0x3d	; 61
    3310:	de b7       	in	r29, 0x3e	; 62
    3312:	6d 97       	sbiw	r28, 0x1d	; 29
    3314:	0f b6       	in	r0, 0x3f	; 63
    3316:	f8 94       	cli
    3318:	de bf       	out	0x3e, r29	; 62
    331a:	0f be       	out	0x3f, r0	; 63
    331c:	cd bf       	out	0x3d, r28	; 61
    331e:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_vSetPinValue(PortB, Pin1, Pin_Low);
    3320:	81 e0       	ldi	r24, 0x01	; 1
    3322:	61 e0       	ldi	r22, 0x01	; 1
    3324:	40 e0       	ldi	r20, 0x00	; 0
    3326:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <DIO_vSetPinValue>
	DIO_vSetPinValue(PortB, Pin2, Pin_Low);
    332a:	81 e0       	ldi	r24, 0x01	; 1
    332c:	62 e0       	ldi	r22, 0x02	; 2
    332e:	40 e0       	ldi	r20, 0x00	; 0
    3330:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <DIO_vSetPinValue>
	DIO_vSetPinValue(PortB, Pin3, Pin_Low);
    3334:	81 e0       	ldi	r24, 0x01	; 1
    3336:	63 e0       	ldi	r22, 0x03	; 3
    3338:	40 e0       	ldi	r20, 0x00	; 0
    333a:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <DIO_vSetPinValue>
	//------Send command-------
	DIO_vSetPortValue(PortA,(Loc_u8Command)&0xF0);
    333e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3340:	98 2f       	mov	r25, r24
    3342:	90 7f       	andi	r25, 0xF0	; 240
    3344:	80 e0       	ldi	r24, 0x00	; 0
    3346:	69 2f       	mov	r22, r25
    3348:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <DIO_vSetPortValue>
	DIO_vSetPinValue(PortB, Pin3, Pin_High);
    334c:	81 e0       	ldi	r24, 0x01	; 1
    334e:	63 e0       	ldi	r22, 0x03	; 3
    3350:	41 e0       	ldi	r20, 0x01	; 1
    3352:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <DIO_vSetPinValue>
    3356:	80 e0       	ldi	r24, 0x00	; 0
    3358:	90 e0       	ldi	r25, 0x00	; 0
    335a:	a0 e2       	ldi	r26, 0x20	; 32
    335c:	b1 e4       	ldi	r27, 0x41	; 65
    335e:	89 8f       	std	Y+25, r24	; 0x19
    3360:	9a 8f       	std	Y+26, r25	; 0x1a
    3362:	ab 8f       	std	Y+27, r26	; 0x1b
    3364:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3366:	69 8d       	ldd	r22, Y+25	; 0x19
    3368:	7a 8d       	ldd	r23, Y+26	; 0x1a
    336a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    336c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    336e:	20 e0       	ldi	r18, 0x00	; 0
    3370:	30 e0       	ldi	r19, 0x00	; 0
    3372:	4a e7       	ldi	r20, 0x7A	; 122
    3374:	55 e4       	ldi	r21, 0x45	; 69
    3376:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    337a:	dc 01       	movw	r26, r24
    337c:	cb 01       	movw	r24, r22
    337e:	8d 8b       	std	Y+21, r24	; 0x15
    3380:	9e 8b       	std	Y+22, r25	; 0x16
    3382:	af 8b       	std	Y+23, r26	; 0x17
    3384:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3386:	6d 89       	ldd	r22, Y+21	; 0x15
    3388:	7e 89       	ldd	r23, Y+22	; 0x16
    338a:	8f 89       	ldd	r24, Y+23	; 0x17
    338c:	98 8d       	ldd	r25, Y+24	; 0x18
    338e:	20 e0       	ldi	r18, 0x00	; 0
    3390:	30 e0       	ldi	r19, 0x00	; 0
    3392:	40 e8       	ldi	r20, 0x80	; 128
    3394:	5f e3       	ldi	r21, 0x3F	; 63
    3396:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    339a:	88 23       	and	r24, r24
    339c:	2c f4       	brge	.+10     	; 0x33a8 <LCD_vSendCommand+0x9e>
		__ticks = 1;
    339e:	81 e0       	ldi	r24, 0x01	; 1
    33a0:	90 e0       	ldi	r25, 0x00	; 0
    33a2:	9c 8b       	std	Y+20, r25	; 0x14
    33a4:	8b 8b       	std	Y+19, r24	; 0x13
    33a6:	3f c0       	rjmp	.+126    	; 0x3426 <LCD_vSendCommand+0x11c>
	else if (__tmp > 65535)
    33a8:	6d 89       	ldd	r22, Y+21	; 0x15
    33aa:	7e 89       	ldd	r23, Y+22	; 0x16
    33ac:	8f 89       	ldd	r24, Y+23	; 0x17
    33ae:	98 8d       	ldd	r25, Y+24	; 0x18
    33b0:	20 e0       	ldi	r18, 0x00	; 0
    33b2:	3f ef       	ldi	r19, 0xFF	; 255
    33b4:	4f e7       	ldi	r20, 0x7F	; 127
    33b6:	57 e4       	ldi	r21, 0x47	; 71
    33b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33bc:	18 16       	cp	r1, r24
    33be:	4c f5       	brge	.+82     	; 0x3412 <LCD_vSendCommand+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33c0:	69 8d       	ldd	r22, Y+25	; 0x19
    33c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    33c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    33c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    33c8:	20 e0       	ldi	r18, 0x00	; 0
    33ca:	30 e0       	ldi	r19, 0x00	; 0
    33cc:	40 e2       	ldi	r20, 0x20	; 32
    33ce:	51 e4       	ldi	r21, 0x41	; 65
    33d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33d4:	dc 01       	movw	r26, r24
    33d6:	cb 01       	movw	r24, r22
    33d8:	bc 01       	movw	r22, r24
    33da:	cd 01       	movw	r24, r26
    33dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33e0:	dc 01       	movw	r26, r24
    33e2:	cb 01       	movw	r24, r22
    33e4:	9c 8b       	std	Y+20, r25	; 0x14
    33e6:	8b 8b       	std	Y+19, r24	; 0x13
    33e8:	0f c0       	rjmp	.+30     	; 0x3408 <LCD_vSendCommand+0xfe>
    33ea:	80 e9       	ldi	r24, 0x90	; 144
    33ec:	91 e0       	ldi	r25, 0x01	; 1
    33ee:	9a 8b       	std	Y+18, r25	; 0x12
    33f0:	89 8b       	std	Y+17, r24	; 0x11
    33f2:	89 89       	ldd	r24, Y+17	; 0x11
    33f4:	9a 89       	ldd	r25, Y+18	; 0x12
    33f6:	01 97       	sbiw	r24, 0x01	; 1
    33f8:	f1 f7       	brne	.-4      	; 0x33f6 <LCD_vSendCommand+0xec>
    33fa:	9a 8b       	std	Y+18, r25	; 0x12
    33fc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33fe:	8b 89       	ldd	r24, Y+19	; 0x13
    3400:	9c 89       	ldd	r25, Y+20	; 0x14
    3402:	01 97       	sbiw	r24, 0x01	; 1
    3404:	9c 8b       	std	Y+20, r25	; 0x14
    3406:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3408:	8b 89       	ldd	r24, Y+19	; 0x13
    340a:	9c 89       	ldd	r25, Y+20	; 0x14
    340c:	00 97       	sbiw	r24, 0x00	; 0
    340e:	69 f7       	brne	.-38     	; 0x33ea <LCD_vSendCommand+0xe0>
    3410:	14 c0       	rjmp	.+40     	; 0x343a <LCD_vSendCommand+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3412:	6d 89       	ldd	r22, Y+21	; 0x15
    3414:	7e 89       	ldd	r23, Y+22	; 0x16
    3416:	8f 89       	ldd	r24, Y+23	; 0x17
    3418:	98 8d       	ldd	r25, Y+24	; 0x18
    341a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    341e:	dc 01       	movw	r26, r24
    3420:	cb 01       	movw	r24, r22
    3422:	9c 8b       	std	Y+20, r25	; 0x14
    3424:	8b 8b       	std	Y+19, r24	; 0x13
    3426:	8b 89       	ldd	r24, Y+19	; 0x13
    3428:	9c 89       	ldd	r25, Y+20	; 0x14
    342a:	98 8b       	std	Y+16, r25	; 0x10
    342c:	8f 87       	std	Y+15, r24	; 0x0f
    342e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3430:	98 89       	ldd	r25, Y+16	; 0x10
    3432:	01 97       	sbiw	r24, 0x01	; 1
    3434:	f1 f7       	brne	.-4      	; 0x3432 <LCD_vSendCommand+0x128>
    3436:	98 8b       	std	Y+16, r25	; 0x10
    3438:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	DIO_vSetPinValue(PortB, Pin3, Pin_Low);
    343a:	81 e0       	ldi	r24, 0x01	; 1
    343c:	63 e0       	ldi	r22, 0x03	; 3
    343e:	40 e0       	ldi	r20, 0x00	; 0
    3440:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <DIO_vSetPinValue>
	DIO_vSetPortValue(PortA,(Loc_u8Command<<4));
    3444:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3446:	98 2f       	mov	r25, r24
    3448:	92 95       	swap	r25
    344a:	90 7f       	andi	r25, 0xF0	; 240
    344c:	80 e0       	ldi	r24, 0x00	; 0
    344e:	69 2f       	mov	r22, r25
    3450:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <DIO_vSetPortValue>
	DIO_vSetPinValue(PortB, Pin3, Pin_High);
    3454:	81 e0       	ldi	r24, 0x01	; 1
    3456:	63 e0       	ldi	r22, 0x03	; 3
    3458:	41 e0       	ldi	r20, 0x01	; 1
    345a:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <DIO_vSetPinValue>
    345e:	80 e0       	ldi	r24, 0x00	; 0
    3460:	90 e0       	ldi	r25, 0x00	; 0
    3462:	a0 e2       	ldi	r26, 0x20	; 32
    3464:	b1 e4       	ldi	r27, 0x41	; 65
    3466:	8b 87       	std	Y+11, r24	; 0x0b
    3468:	9c 87       	std	Y+12, r25	; 0x0c
    346a:	ad 87       	std	Y+13, r26	; 0x0d
    346c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    346e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3470:	7c 85       	ldd	r23, Y+12	; 0x0c
    3472:	8d 85       	ldd	r24, Y+13	; 0x0d
    3474:	9e 85       	ldd	r25, Y+14	; 0x0e
    3476:	20 e0       	ldi	r18, 0x00	; 0
    3478:	30 e0       	ldi	r19, 0x00	; 0
    347a:	4a e7       	ldi	r20, 0x7A	; 122
    347c:	55 e4       	ldi	r21, 0x45	; 69
    347e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3482:	dc 01       	movw	r26, r24
    3484:	cb 01       	movw	r24, r22
    3486:	8f 83       	std	Y+7, r24	; 0x07
    3488:	98 87       	std	Y+8, r25	; 0x08
    348a:	a9 87       	std	Y+9, r26	; 0x09
    348c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    348e:	6f 81       	ldd	r22, Y+7	; 0x07
    3490:	78 85       	ldd	r23, Y+8	; 0x08
    3492:	89 85       	ldd	r24, Y+9	; 0x09
    3494:	9a 85       	ldd	r25, Y+10	; 0x0a
    3496:	20 e0       	ldi	r18, 0x00	; 0
    3498:	30 e0       	ldi	r19, 0x00	; 0
    349a:	40 e8       	ldi	r20, 0x80	; 128
    349c:	5f e3       	ldi	r21, 0x3F	; 63
    349e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    34a2:	88 23       	and	r24, r24
    34a4:	2c f4       	brge	.+10     	; 0x34b0 <LCD_vSendCommand+0x1a6>
		__ticks = 1;
    34a6:	81 e0       	ldi	r24, 0x01	; 1
    34a8:	90 e0       	ldi	r25, 0x00	; 0
    34aa:	9e 83       	std	Y+6, r25	; 0x06
    34ac:	8d 83       	std	Y+5, r24	; 0x05
    34ae:	3f c0       	rjmp	.+126    	; 0x352e <LCD_vSendCommand+0x224>
	else if (__tmp > 65535)
    34b0:	6f 81       	ldd	r22, Y+7	; 0x07
    34b2:	78 85       	ldd	r23, Y+8	; 0x08
    34b4:	89 85       	ldd	r24, Y+9	; 0x09
    34b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    34b8:	20 e0       	ldi	r18, 0x00	; 0
    34ba:	3f ef       	ldi	r19, 0xFF	; 255
    34bc:	4f e7       	ldi	r20, 0x7F	; 127
    34be:	57 e4       	ldi	r21, 0x47	; 71
    34c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    34c4:	18 16       	cp	r1, r24
    34c6:	4c f5       	brge	.+82     	; 0x351a <LCD_vSendCommand+0x210>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    34ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    34cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    34ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    34d0:	20 e0       	ldi	r18, 0x00	; 0
    34d2:	30 e0       	ldi	r19, 0x00	; 0
    34d4:	40 e2       	ldi	r20, 0x20	; 32
    34d6:	51 e4       	ldi	r21, 0x41	; 65
    34d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34dc:	dc 01       	movw	r26, r24
    34de:	cb 01       	movw	r24, r22
    34e0:	bc 01       	movw	r22, r24
    34e2:	cd 01       	movw	r24, r26
    34e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34e8:	dc 01       	movw	r26, r24
    34ea:	cb 01       	movw	r24, r22
    34ec:	9e 83       	std	Y+6, r25	; 0x06
    34ee:	8d 83       	std	Y+5, r24	; 0x05
    34f0:	0f c0       	rjmp	.+30     	; 0x3510 <LCD_vSendCommand+0x206>
    34f2:	80 e9       	ldi	r24, 0x90	; 144
    34f4:	91 e0       	ldi	r25, 0x01	; 1
    34f6:	9c 83       	std	Y+4, r25	; 0x04
    34f8:	8b 83       	std	Y+3, r24	; 0x03
    34fa:	8b 81       	ldd	r24, Y+3	; 0x03
    34fc:	9c 81       	ldd	r25, Y+4	; 0x04
    34fe:	01 97       	sbiw	r24, 0x01	; 1
    3500:	f1 f7       	brne	.-4      	; 0x34fe <LCD_vSendCommand+0x1f4>
    3502:	9c 83       	std	Y+4, r25	; 0x04
    3504:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3506:	8d 81       	ldd	r24, Y+5	; 0x05
    3508:	9e 81       	ldd	r25, Y+6	; 0x06
    350a:	01 97       	sbiw	r24, 0x01	; 1
    350c:	9e 83       	std	Y+6, r25	; 0x06
    350e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3510:	8d 81       	ldd	r24, Y+5	; 0x05
    3512:	9e 81       	ldd	r25, Y+6	; 0x06
    3514:	00 97       	sbiw	r24, 0x00	; 0
    3516:	69 f7       	brne	.-38     	; 0x34f2 <LCD_vSendCommand+0x1e8>
    3518:	14 c0       	rjmp	.+40     	; 0x3542 <LCD_vSendCommand+0x238>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    351a:	6f 81       	ldd	r22, Y+7	; 0x07
    351c:	78 85       	ldd	r23, Y+8	; 0x08
    351e:	89 85       	ldd	r24, Y+9	; 0x09
    3520:	9a 85       	ldd	r25, Y+10	; 0x0a
    3522:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3526:	dc 01       	movw	r26, r24
    3528:	cb 01       	movw	r24, r22
    352a:	9e 83       	std	Y+6, r25	; 0x06
    352c:	8d 83       	std	Y+5, r24	; 0x05
    352e:	8d 81       	ldd	r24, Y+5	; 0x05
    3530:	9e 81       	ldd	r25, Y+6	; 0x06
    3532:	9a 83       	std	Y+2, r25	; 0x02
    3534:	89 83       	std	Y+1, r24	; 0x01
    3536:	89 81       	ldd	r24, Y+1	; 0x01
    3538:	9a 81       	ldd	r25, Y+2	; 0x02
    353a:	01 97       	sbiw	r24, 0x01	; 1
    353c:	f1 f7       	brne	.-4      	; 0x353a <LCD_vSendCommand+0x230>
    353e:	9a 83       	std	Y+2, r25	; 0x02
    3540:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	DIO_vSetPinValue(PortB, Pin3, Pin_Low);
    3542:	81 e0       	ldi	r24, 0x01	; 1
    3544:	63 e0       	ldi	r22, 0x03	; 3
    3546:	40 e0       	ldi	r20, 0x00	; 0
    3548:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <DIO_vSetPinValue>


}
    354c:	6d 96       	adiw	r28, 0x1d	; 29
    354e:	0f b6       	in	r0, 0x3f	; 63
    3550:	f8 94       	cli
    3552:	de bf       	out	0x3e, r29	; 62
    3554:	0f be       	out	0x3f, r0	; 63
    3556:	cd bf       	out	0x3d, r28	; 61
    3558:	cf 91       	pop	r28
    355a:	df 91       	pop	r29
    355c:	08 95       	ret

0000355e <LCD_vInit>:
void LCD_vInit(){
    355e:	0f 93       	push	r16
    3560:	1f 93       	push	r17
    3562:	df 93       	push	r29
    3564:	cf 93       	push	r28
    3566:	cd b7       	in	r28, 0x3d	; 61
    3568:	de b7       	in	r29, 0x3e	; 62
    356a:	c6 54       	subi	r28, 0x46	; 70
    356c:	d0 40       	sbci	r29, 0x00	; 0
    356e:	0f b6       	in	r0, 0x3f	; 63
    3570:	f8 94       	cli
    3572:	de bf       	out	0x3e, r29	; 62
    3574:	0f be       	out	0x3f, r0	; 63
    3576:	cd bf       	out	0x3d, r28	; 61
	//------Set used pins as output-----
	DIO_vSetPinDirection(PortB, Pin1, Pin_OutPut);
    3578:	81 e0       	ldi	r24, 0x01	; 1
    357a:	61 e0       	ldi	r22, 0x01	; 1
    357c:	41 e0       	ldi	r20, 0x01	; 1
    357e:	0e 94 79 10 	call	0x20f2	; 0x20f2 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PortB, Pin3, Pin_OutPut);
    3582:	81 e0       	ldi	r24, 0x01	; 1
    3584:	63 e0       	ldi	r22, 0x03	; 3
    3586:	41 e0       	ldi	r20, 0x01	; 1
    3588:	0e 94 79 10 	call	0x20f2	; 0x20f2 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PortB, Pin2, Pin_OutPut);
    358c:	81 e0       	ldi	r24, 0x01	; 1
    358e:	62 e0       	ldi	r22, 0x02	; 2
    3590:	41 e0       	ldi	r20, 0x01	; 1
    3592:	0e 94 79 10 	call	0x20f2	; 0x20f2 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PortA, Pin4, Pin_OutPut);
    3596:	80 e0       	ldi	r24, 0x00	; 0
    3598:	64 e0       	ldi	r22, 0x04	; 4
    359a:	41 e0       	ldi	r20, 0x01	; 1
    359c:	0e 94 79 10 	call	0x20f2	; 0x20f2 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PortA, Pin5, Pin_OutPut);
    35a0:	80 e0       	ldi	r24, 0x00	; 0
    35a2:	65 e0       	ldi	r22, 0x05	; 5
    35a4:	41 e0       	ldi	r20, 0x01	; 1
    35a6:	0e 94 79 10 	call	0x20f2	; 0x20f2 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PortA, Pin6, Pin_OutPut);
    35aa:	80 e0       	ldi	r24, 0x00	; 0
    35ac:	66 e0       	ldi	r22, 0x06	; 6
    35ae:	41 e0       	ldi	r20, 0x01	; 1
    35b0:	0e 94 79 10 	call	0x20f2	; 0x20f2 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PortA, Pin7, Pin_OutPut);
    35b4:	80 e0       	ldi	r24, 0x00	; 0
    35b6:	67 e0       	ldi	r22, 0x07	; 7
    35b8:	41 e0       	ldi	r20, 0x01	; 1
    35ba:	0e 94 79 10 	call	0x20f2	; 0x20f2 <DIO_vSetPinDirection>
    35be:	fe 01       	movw	r30, r28
    35c0:	ed 5b       	subi	r30, 0xBD	; 189
    35c2:	ff 4f       	sbci	r31, 0xFF	; 255
    35c4:	80 e0       	ldi	r24, 0x00	; 0
    35c6:	90 e0       	ldi	r25, 0x00	; 0
    35c8:	a8 e4       	ldi	r26, 0x48	; 72
    35ca:	b2 e4       	ldi	r27, 0x42	; 66
    35cc:	80 83       	st	Z, r24
    35ce:	91 83       	std	Z+1, r25	; 0x01
    35d0:	a2 83       	std	Z+2, r26	; 0x02
    35d2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35d4:	8e 01       	movw	r16, r28
    35d6:	01 5c       	subi	r16, 0xC1	; 193
    35d8:	1f 4f       	sbci	r17, 0xFF	; 255
    35da:	fe 01       	movw	r30, r28
    35dc:	ed 5b       	subi	r30, 0xBD	; 189
    35de:	ff 4f       	sbci	r31, 0xFF	; 255
    35e0:	60 81       	ld	r22, Z
    35e2:	71 81       	ldd	r23, Z+1	; 0x01
    35e4:	82 81       	ldd	r24, Z+2	; 0x02
    35e6:	93 81       	ldd	r25, Z+3	; 0x03
    35e8:	20 e0       	ldi	r18, 0x00	; 0
    35ea:	30 e0       	ldi	r19, 0x00	; 0
    35ec:	4a e7       	ldi	r20, 0x7A	; 122
    35ee:	55 e4       	ldi	r21, 0x45	; 69
    35f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35f4:	dc 01       	movw	r26, r24
    35f6:	cb 01       	movw	r24, r22
    35f8:	f8 01       	movw	r30, r16
    35fa:	80 83       	st	Z, r24
    35fc:	91 83       	std	Z+1, r25	; 0x01
    35fe:	a2 83       	std	Z+2, r26	; 0x02
    3600:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3602:	fe 01       	movw	r30, r28
    3604:	ff 96       	adiw	r30, 0x3f	; 63
    3606:	60 81       	ld	r22, Z
    3608:	71 81       	ldd	r23, Z+1	; 0x01
    360a:	82 81       	ldd	r24, Z+2	; 0x02
    360c:	93 81       	ldd	r25, Z+3	; 0x03
    360e:	20 e0       	ldi	r18, 0x00	; 0
    3610:	30 e0       	ldi	r19, 0x00	; 0
    3612:	40 e8       	ldi	r20, 0x80	; 128
    3614:	5f e3       	ldi	r21, 0x3F	; 63
    3616:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    361a:	88 23       	and	r24, r24
    361c:	2c f4       	brge	.+10     	; 0x3628 <LCD_vInit+0xca>
		__ticks = 1;
    361e:	81 e0       	ldi	r24, 0x01	; 1
    3620:	90 e0       	ldi	r25, 0x00	; 0
    3622:	9e af       	std	Y+62, r25	; 0x3e
    3624:	8d af       	std	Y+61, r24	; 0x3d
    3626:	46 c0       	rjmp	.+140    	; 0x36b4 <LCD_vInit+0x156>
	else if (__tmp > 65535)
    3628:	fe 01       	movw	r30, r28
    362a:	ff 96       	adiw	r30, 0x3f	; 63
    362c:	60 81       	ld	r22, Z
    362e:	71 81       	ldd	r23, Z+1	; 0x01
    3630:	82 81       	ldd	r24, Z+2	; 0x02
    3632:	93 81       	ldd	r25, Z+3	; 0x03
    3634:	20 e0       	ldi	r18, 0x00	; 0
    3636:	3f ef       	ldi	r19, 0xFF	; 255
    3638:	4f e7       	ldi	r20, 0x7F	; 127
    363a:	57 e4       	ldi	r21, 0x47	; 71
    363c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3640:	18 16       	cp	r1, r24
    3642:	64 f5       	brge	.+88     	; 0x369c <LCD_vInit+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3644:	fe 01       	movw	r30, r28
    3646:	ed 5b       	subi	r30, 0xBD	; 189
    3648:	ff 4f       	sbci	r31, 0xFF	; 255
    364a:	60 81       	ld	r22, Z
    364c:	71 81       	ldd	r23, Z+1	; 0x01
    364e:	82 81       	ldd	r24, Z+2	; 0x02
    3650:	93 81       	ldd	r25, Z+3	; 0x03
    3652:	20 e0       	ldi	r18, 0x00	; 0
    3654:	30 e0       	ldi	r19, 0x00	; 0
    3656:	40 e2       	ldi	r20, 0x20	; 32
    3658:	51 e4       	ldi	r21, 0x41	; 65
    365a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    365e:	dc 01       	movw	r26, r24
    3660:	cb 01       	movw	r24, r22
    3662:	bc 01       	movw	r22, r24
    3664:	cd 01       	movw	r24, r26
    3666:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    366a:	dc 01       	movw	r26, r24
    366c:	cb 01       	movw	r24, r22
    366e:	9e af       	std	Y+62, r25	; 0x3e
    3670:	8d af       	std	Y+61, r24	; 0x3d
    3672:	0f c0       	rjmp	.+30     	; 0x3692 <LCD_vInit+0x134>
    3674:	80 e9       	ldi	r24, 0x90	; 144
    3676:	91 e0       	ldi	r25, 0x01	; 1
    3678:	9c af       	std	Y+60, r25	; 0x3c
    367a:	8b af       	std	Y+59, r24	; 0x3b
    367c:	8b ad       	ldd	r24, Y+59	; 0x3b
    367e:	9c ad       	ldd	r25, Y+60	; 0x3c
    3680:	01 97       	sbiw	r24, 0x01	; 1
    3682:	f1 f7       	brne	.-4      	; 0x3680 <LCD_vInit+0x122>
    3684:	9c af       	std	Y+60, r25	; 0x3c
    3686:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3688:	8d ad       	ldd	r24, Y+61	; 0x3d
    368a:	9e ad       	ldd	r25, Y+62	; 0x3e
    368c:	01 97       	sbiw	r24, 0x01	; 1
    368e:	9e af       	std	Y+62, r25	; 0x3e
    3690:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3692:	8d ad       	ldd	r24, Y+61	; 0x3d
    3694:	9e ad       	ldd	r25, Y+62	; 0x3e
    3696:	00 97       	sbiw	r24, 0x00	; 0
    3698:	69 f7       	brne	.-38     	; 0x3674 <LCD_vInit+0x116>
    369a:	16 c0       	rjmp	.+44     	; 0x36c8 <LCD_vInit+0x16a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    369c:	fe 01       	movw	r30, r28
    369e:	ff 96       	adiw	r30, 0x3f	; 63
    36a0:	60 81       	ld	r22, Z
    36a2:	71 81       	ldd	r23, Z+1	; 0x01
    36a4:	82 81       	ldd	r24, Z+2	; 0x02
    36a6:	93 81       	ldd	r25, Z+3	; 0x03
    36a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36ac:	dc 01       	movw	r26, r24
    36ae:	cb 01       	movw	r24, r22
    36b0:	9e af       	std	Y+62, r25	; 0x3e
    36b2:	8d af       	std	Y+61, r24	; 0x3d
    36b4:	8d ad       	ldd	r24, Y+61	; 0x3d
    36b6:	9e ad       	ldd	r25, Y+62	; 0x3e
    36b8:	9a af       	std	Y+58, r25	; 0x3a
    36ba:	89 af       	std	Y+57, r24	; 0x39
    36bc:	89 ad       	ldd	r24, Y+57	; 0x39
    36be:	9a ad       	ldd	r25, Y+58	; 0x3a
    36c0:	01 97       	sbiw	r24, 0x01	; 1
    36c2:	f1 f7       	brne	.-4      	; 0x36c0 <LCD_vInit+0x162>
    36c4:	9a af       	std	Y+58, r25	; 0x3a
    36c6:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(50);
	LCD_vSendCommand(FunctionSet);
    36c8:	88 e2       	ldi	r24, 0x28	; 40
    36ca:	0e 94 85 19 	call	0x330a	; 0x330a <LCD_vSendCommand>
    36ce:	80 e0       	ldi	r24, 0x00	; 0
    36d0:	90 e0       	ldi	r25, 0x00	; 0
    36d2:	a0 e0       	ldi	r26, 0x00	; 0
    36d4:	b0 e4       	ldi	r27, 0x40	; 64
    36d6:	8d ab       	std	Y+53, r24	; 0x35
    36d8:	9e ab       	std	Y+54, r25	; 0x36
    36da:	af ab       	std	Y+55, r26	; 0x37
    36dc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36de:	6d a9       	ldd	r22, Y+53	; 0x35
    36e0:	7e a9       	ldd	r23, Y+54	; 0x36
    36e2:	8f a9       	ldd	r24, Y+55	; 0x37
    36e4:	98 ad       	ldd	r25, Y+56	; 0x38
    36e6:	20 e0       	ldi	r18, 0x00	; 0
    36e8:	30 e0       	ldi	r19, 0x00	; 0
    36ea:	4a e7       	ldi	r20, 0x7A	; 122
    36ec:	55 e4       	ldi	r21, 0x45	; 69
    36ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36f2:	dc 01       	movw	r26, r24
    36f4:	cb 01       	movw	r24, r22
    36f6:	89 ab       	std	Y+49, r24	; 0x31
    36f8:	9a ab       	std	Y+50, r25	; 0x32
    36fa:	ab ab       	std	Y+51, r26	; 0x33
    36fc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    36fe:	69 a9       	ldd	r22, Y+49	; 0x31
    3700:	7a a9       	ldd	r23, Y+50	; 0x32
    3702:	8b a9       	ldd	r24, Y+51	; 0x33
    3704:	9c a9       	ldd	r25, Y+52	; 0x34
    3706:	20 e0       	ldi	r18, 0x00	; 0
    3708:	30 e0       	ldi	r19, 0x00	; 0
    370a:	40 e8       	ldi	r20, 0x80	; 128
    370c:	5f e3       	ldi	r21, 0x3F	; 63
    370e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3712:	88 23       	and	r24, r24
    3714:	2c f4       	brge	.+10     	; 0x3720 <LCD_vInit+0x1c2>
		__ticks = 1;
    3716:	81 e0       	ldi	r24, 0x01	; 1
    3718:	90 e0       	ldi	r25, 0x00	; 0
    371a:	98 ab       	std	Y+48, r25	; 0x30
    371c:	8f a7       	std	Y+47, r24	; 0x2f
    371e:	3f c0       	rjmp	.+126    	; 0x379e <LCD_vInit+0x240>
	else if (__tmp > 65535)
    3720:	69 a9       	ldd	r22, Y+49	; 0x31
    3722:	7a a9       	ldd	r23, Y+50	; 0x32
    3724:	8b a9       	ldd	r24, Y+51	; 0x33
    3726:	9c a9       	ldd	r25, Y+52	; 0x34
    3728:	20 e0       	ldi	r18, 0x00	; 0
    372a:	3f ef       	ldi	r19, 0xFF	; 255
    372c:	4f e7       	ldi	r20, 0x7F	; 127
    372e:	57 e4       	ldi	r21, 0x47	; 71
    3730:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3734:	18 16       	cp	r1, r24
    3736:	4c f5       	brge	.+82     	; 0x378a <LCD_vInit+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3738:	6d a9       	ldd	r22, Y+53	; 0x35
    373a:	7e a9       	ldd	r23, Y+54	; 0x36
    373c:	8f a9       	ldd	r24, Y+55	; 0x37
    373e:	98 ad       	ldd	r25, Y+56	; 0x38
    3740:	20 e0       	ldi	r18, 0x00	; 0
    3742:	30 e0       	ldi	r19, 0x00	; 0
    3744:	40 e2       	ldi	r20, 0x20	; 32
    3746:	51 e4       	ldi	r21, 0x41	; 65
    3748:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    374c:	dc 01       	movw	r26, r24
    374e:	cb 01       	movw	r24, r22
    3750:	bc 01       	movw	r22, r24
    3752:	cd 01       	movw	r24, r26
    3754:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3758:	dc 01       	movw	r26, r24
    375a:	cb 01       	movw	r24, r22
    375c:	98 ab       	std	Y+48, r25	; 0x30
    375e:	8f a7       	std	Y+47, r24	; 0x2f
    3760:	0f c0       	rjmp	.+30     	; 0x3780 <LCD_vInit+0x222>
    3762:	80 e9       	ldi	r24, 0x90	; 144
    3764:	91 e0       	ldi	r25, 0x01	; 1
    3766:	9e a7       	std	Y+46, r25	; 0x2e
    3768:	8d a7       	std	Y+45, r24	; 0x2d
    376a:	8d a5       	ldd	r24, Y+45	; 0x2d
    376c:	9e a5       	ldd	r25, Y+46	; 0x2e
    376e:	01 97       	sbiw	r24, 0x01	; 1
    3770:	f1 f7       	brne	.-4      	; 0x376e <LCD_vInit+0x210>
    3772:	9e a7       	std	Y+46, r25	; 0x2e
    3774:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3776:	8f a5       	ldd	r24, Y+47	; 0x2f
    3778:	98 a9       	ldd	r25, Y+48	; 0x30
    377a:	01 97       	sbiw	r24, 0x01	; 1
    377c:	98 ab       	std	Y+48, r25	; 0x30
    377e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3780:	8f a5       	ldd	r24, Y+47	; 0x2f
    3782:	98 a9       	ldd	r25, Y+48	; 0x30
    3784:	00 97       	sbiw	r24, 0x00	; 0
    3786:	69 f7       	brne	.-38     	; 0x3762 <LCD_vInit+0x204>
    3788:	14 c0       	rjmp	.+40     	; 0x37b2 <LCD_vInit+0x254>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    378a:	69 a9       	ldd	r22, Y+49	; 0x31
    378c:	7a a9       	ldd	r23, Y+50	; 0x32
    378e:	8b a9       	ldd	r24, Y+51	; 0x33
    3790:	9c a9       	ldd	r25, Y+52	; 0x34
    3792:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3796:	dc 01       	movw	r26, r24
    3798:	cb 01       	movw	r24, r22
    379a:	98 ab       	std	Y+48, r25	; 0x30
    379c:	8f a7       	std	Y+47, r24	; 0x2f
    379e:	8f a5       	ldd	r24, Y+47	; 0x2f
    37a0:	98 a9       	ldd	r25, Y+48	; 0x30
    37a2:	9c a7       	std	Y+44, r25	; 0x2c
    37a4:	8b a7       	std	Y+43, r24	; 0x2b
    37a6:	8b a5       	ldd	r24, Y+43	; 0x2b
    37a8:	9c a5       	ldd	r25, Y+44	; 0x2c
    37aa:	01 97       	sbiw	r24, 0x01	; 1
    37ac:	f1 f7       	brne	.-4      	; 0x37aa <LCD_vInit+0x24c>
    37ae:	9c a7       	std	Y+44, r25	; 0x2c
    37b0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	LCD_vSendCommand(DisplayOnControl);
    37b2:	8e e0       	ldi	r24, 0x0E	; 14
    37b4:	0e 94 85 19 	call	0x330a	; 0x330a <LCD_vSendCommand>
    37b8:	80 e0       	ldi	r24, 0x00	; 0
    37ba:	90 e0       	ldi	r25, 0x00	; 0
    37bc:	a0 e0       	ldi	r26, 0x00	; 0
    37be:	b0 e4       	ldi	r27, 0x40	; 64
    37c0:	8f a3       	std	Y+39, r24	; 0x27
    37c2:	98 a7       	std	Y+40, r25	; 0x28
    37c4:	a9 a7       	std	Y+41, r26	; 0x29
    37c6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37c8:	6f a1       	ldd	r22, Y+39	; 0x27
    37ca:	78 a5       	ldd	r23, Y+40	; 0x28
    37cc:	89 a5       	ldd	r24, Y+41	; 0x29
    37ce:	9a a5       	ldd	r25, Y+42	; 0x2a
    37d0:	20 e0       	ldi	r18, 0x00	; 0
    37d2:	30 e0       	ldi	r19, 0x00	; 0
    37d4:	4a e7       	ldi	r20, 0x7A	; 122
    37d6:	55 e4       	ldi	r21, 0x45	; 69
    37d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37dc:	dc 01       	movw	r26, r24
    37de:	cb 01       	movw	r24, r22
    37e0:	8b a3       	std	Y+35, r24	; 0x23
    37e2:	9c a3       	std	Y+36, r25	; 0x24
    37e4:	ad a3       	std	Y+37, r26	; 0x25
    37e6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    37e8:	6b a1       	ldd	r22, Y+35	; 0x23
    37ea:	7c a1       	ldd	r23, Y+36	; 0x24
    37ec:	8d a1       	ldd	r24, Y+37	; 0x25
    37ee:	9e a1       	ldd	r25, Y+38	; 0x26
    37f0:	20 e0       	ldi	r18, 0x00	; 0
    37f2:	30 e0       	ldi	r19, 0x00	; 0
    37f4:	40 e8       	ldi	r20, 0x80	; 128
    37f6:	5f e3       	ldi	r21, 0x3F	; 63
    37f8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    37fc:	88 23       	and	r24, r24
    37fe:	2c f4       	brge	.+10     	; 0x380a <LCD_vInit+0x2ac>
		__ticks = 1;
    3800:	81 e0       	ldi	r24, 0x01	; 1
    3802:	90 e0       	ldi	r25, 0x00	; 0
    3804:	9a a3       	std	Y+34, r25	; 0x22
    3806:	89 a3       	std	Y+33, r24	; 0x21
    3808:	3f c0       	rjmp	.+126    	; 0x3888 <LCD_vInit+0x32a>
	else if (__tmp > 65535)
    380a:	6b a1       	ldd	r22, Y+35	; 0x23
    380c:	7c a1       	ldd	r23, Y+36	; 0x24
    380e:	8d a1       	ldd	r24, Y+37	; 0x25
    3810:	9e a1       	ldd	r25, Y+38	; 0x26
    3812:	20 e0       	ldi	r18, 0x00	; 0
    3814:	3f ef       	ldi	r19, 0xFF	; 255
    3816:	4f e7       	ldi	r20, 0x7F	; 127
    3818:	57 e4       	ldi	r21, 0x47	; 71
    381a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    381e:	18 16       	cp	r1, r24
    3820:	4c f5       	brge	.+82     	; 0x3874 <LCD_vInit+0x316>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3822:	6f a1       	ldd	r22, Y+39	; 0x27
    3824:	78 a5       	ldd	r23, Y+40	; 0x28
    3826:	89 a5       	ldd	r24, Y+41	; 0x29
    3828:	9a a5       	ldd	r25, Y+42	; 0x2a
    382a:	20 e0       	ldi	r18, 0x00	; 0
    382c:	30 e0       	ldi	r19, 0x00	; 0
    382e:	40 e2       	ldi	r20, 0x20	; 32
    3830:	51 e4       	ldi	r21, 0x41	; 65
    3832:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3836:	dc 01       	movw	r26, r24
    3838:	cb 01       	movw	r24, r22
    383a:	bc 01       	movw	r22, r24
    383c:	cd 01       	movw	r24, r26
    383e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3842:	dc 01       	movw	r26, r24
    3844:	cb 01       	movw	r24, r22
    3846:	9a a3       	std	Y+34, r25	; 0x22
    3848:	89 a3       	std	Y+33, r24	; 0x21
    384a:	0f c0       	rjmp	.+30     	; 0x386a <LCD_vInit+0x30c>
    384c:	80 e9       	ldi	r24, 0x90	; 144
    384e:	91 e0       	ldi	r25, 0x01	; 1
    3850:	98 a3       	std	Y+32, r25	; 0x20
    3852:	8f 8f       	std	Y+31, r24	; 0x1f
    3854:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3856:	98 a1       	ldd	r25, Y+32	; 0x20
    3858:	01 97       	sbiw	r24, 0x01	; 1
    385a:	f1 f7       	brne	.-4      	; 0x3858 <LCD_vInit+0x2fa>
    385c:	98 a3       	std	Y+32, r25	; 0x20
    385e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3860:	89 a1       	ldd	r24, Y+33	; 0x21
    3862:	9a a1       	ldd	r25, Y+34	; 0x22
    3864:	01 97       	sbiw	r24, 0x01	; 1
    3866:	9a a3       	std	Y+34, r25	; 0x22
    3868:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    386a:	89 a1       	ldd	r24, Y+33	; 0x21
    386c:	9a a1       	ldd	r25, Y+34	; 0x22
    386e:	00 97       	sbiw	r24, 0x00	; 0
    3870:	69 f7       	brne	.-38     	; 0x384c <LCD_vInit+0x2ee>
    3872:	14 c0       	rjmp	.+40     	; 0x389c <LCD_vInit+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3874:	6b a1       	ldd	r22, Y+35	; 0x23
    3876:	7c a1       	ldd	r23, Y+36	; 0x24
    3878:	8d a1       	ldd	r24, Y+37	; 0x25
    387a:	9e a1       	ldd	r25, Y+38	; 0x26
    387c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3880:	dc 01       	movw	r26, r24
    3882:	cb 01       	movw	r24, r22
    3884:	9a a3       	std	Y+34, r25	; 0x22
    3886:	89 a3       	std	Y+33, r24	; 0x21
    3888:	89 a1       	ldd	r24, Y+33	; 0x21
    388a:	9a a1       	ldd	r25, Y+34	; 0x22
    388c:	9e 8f       	std	Y+30, r25	; 0x1e
    388e:	8d 8f       	std	Y+29, r24	; 0x1d
    3890:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3892:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3894:	01 97       	sbiw	r24, 0x01	; 1
    3896:	f1 f7       	brne	.-4      	; 0x3894 <LCD_vInit+0x336>
    3898:	9e 8f       	std	Y+30, r25	; 0x1e
    389a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	LCD_vSendCommand(DisplayClear);
    389c:	81 e0       	ldi	r24, 0x01	; 1
    389e:	0e 94 85 19 	call	0x330a	; 0x330a <LCD_vSendCommand>
    38a2:	80 e0       	ldi	r24, 0x00	; 0
    38a4:	90 e0       	ldi	r25, 0x00	; 0
    38a6:	a0 e0       	ldi	r26, 0x00	; 0
    38a8:	b0 e4       	ldi	r27, 0x40	; 64
    38aa:	89 8f       	std	Y+25, r24	; 0x19
    38ac:	9a 8f       	std	Y+26, r25	; 0x1a
    38ae:	ab 8f       	std	Y+27, r26	; 0x1b
    38b0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38b2:	69 8d       	ldd	r22, Y+25	; 0x19
    38b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    38b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    38b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    38ba:	20 e0       	ldi	r18, 0x00	; 0
    38bc:	30 e0       	ldi	r19, 0x00	; 0
    38be:	4a e7       	ldi	r20, 0x7A	; 122
    38c0:	55 e4       	ldi	r21, 0x45	; 69
    38c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38c6:	dc 01       	movw	r26, r24
    38c8:	cb 01       	movw	r24, r22
    38ca:	8d 8b       	std	Y+21, r24	; 0x15
    38cc:	9e 8b       	std	Y+22, r25	; 0x16
    38ce:	af 8b       	std	Y+23, r26	; 0x17
    38d0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    38d2:	6d 89       	ldd	r22, Y+21	; 0x15
    38d4:	7e 89       	ldd	r23, Y+22	; 0x16
    38d6:	8f 89       	ldd	r24, Y+23	; 0x17
    38d8:	98 8d       	ldd	r25, Y+24	; 0x18
    38da:	20 e0       	ldi	r18, 0x00	; 0
    38dc:	30 e0       	ldi	r19, 0x00	; 0
    38de:	40 e8       	ldi	r20, 0x80	; 128
    38e0:	5f e3       	ldi	r21, 0x3F	; 63
    38e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    38e6:	88 23       	and	r24, r24
    38e8:	2c f4       	brge	.+10     	; 0x38f4 <LCD_vInit+0x396>
		__ticks = 1;
    38ea:	81 e0       	ldi	r24, 0x01	; 1
    38ec:	90 e0       	ldi	r25, 0x00	; 0
    38ee:	9c 8b       	std	Y+20, r25	; 0x14
    38f0:	8b 8b       	std	Y+19, r24	; 0x13
    38f2:	3f c0       	rjmp	.+126    	; 0x3972 <LCD_vInit+0x414>
	else if (__tmp > 65535)
    38f4:	6d 89       	ldd	r22, Y+21	; 0x15
    38f6:	7e 89       	ldd	r23, Y+22	; 0x16
    38f8:	8f 89       	ldd	r24, Y+23	; 0x17
    38fa:	98 8d       	ldd	r25, Y+24	; 0x18
    38fc:	20 e0       	ldi	r18, 0x00	; 0
    38fe:	3f ef       	ldi	r19, 0xFF	; 255
    3900:	4f e7       	ldi	r20, 0x7F	; 127
    3902:	57 e4       	ldi	r21, 0x47	; 71
    3904:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3908:	18 16       	cp	r1, r24
    390a:	4c f5       	brge	.+82     	; 0x395e <LCD_vInit+0x400>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    390c:	69 8d       	ldd	r22, Y+25	; 0x19
    390e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3910:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3912:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3914:	20 e0       	ldi	r18, 0x00	; 0
    3916:	30 e0       	ldi	r19, 0x00	; 0
    3918:	40 e2       	ldi	r20, 0x20	; 32
    391a:	51 e4       	ldi	r21, 0x41	; 65
    391c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3920:	dc 01       	movw	r26, r24
    3922:	cb 01       	movw	r24, r22
    3924:	bc 01       	movw	r22, r24
    3926:	cd 01       	movw	r24, r26
    3928:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    392c:	dc 01       	movw	r26, r24
    392e:	cb 01       	movw	r24, r22
    3930:	9c 8b       	std	Y+20, r25	; 0x14
    3932:	8b 8b       	std	Y+19, r24	; 0x13
    3934:	0f c0       	rjmp	.+30     	; 0x3954 <LCD_vInit+0x3f6>
    3936:	80 e9       	ldi	r24, 0x90	; 144
    3938:	91 e0       	ldi	r25, 0x01	; 1
    393a:	9a 8b       	std	Y+18, r25	; 0x12
    393c:	89 8b       	std	Y+17, r24	; 0x11
    393e:	89 89       	ldd	r24, Y+17	; 0x11
    3940:	9a 89       	ldd	r25, Y+18	; 0x12
    3942:	01 97       	sbiw	r24, 0x01	; 1
    3944:	f1 f7       	brne	.-4      	; 0x3942 <LCD_vInit+0x3e4>
    3946:	9a 8b       	std	Y+18, r25	; 0x12
    3948:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    394a:	8b 89       	ldd	r24, Y+19	; 0x13
    394c:	9c 89       	ldd	r25, Y+20	; 0x14
    394e:	01 97       	sbiw	r24, 0x01	; 1
    3950:	9c 8b       	std	Y+20, r25	; 0x14
    3952:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3954:	8b 89       	ldd	r24, Y+19	; 0x13
    3956:	9c 89       	ldd	r25, Y+20	; 0x14
    3958:	00 97       	sbiw	r24, 0x00	; 0
    395a:	69 f7       	brne	.-38     	; 0x3936 <LCD_vInit+0x3d8>
    395c:	14 c0       	rjmp	.+40     	; 0x3986 <LCD_vInit+0x428>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    395e:	6d 89       	ldd	r22, Y+21	; 0x15
    3960:	7e 89       	ldd	r23, Y+22	; 0x16
    3962:	8f 89       	ldd	r24, Y+23	; 0x17
    3964:	98 8d       	ldd	r25, Y+24	; 0x18
    3966:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    396a:	dc 01       	movw	r26, r24
    396c:	cb 01       	movw	r24, r22
    396e:	9c 8b       	std	Y+20, r25	; 0x14
    3970:	8b 8b       	std	Y+19, r24	; 0x13
    3972:	8b 89       	ldd	r24, Y+19	; 0x13
    3974:	9c 89       	ldd	r25, Y+20	; 0x14
    3976:	98 8b       	std	Y+16, r25	; 0x10
    3978:	8f 87       	std	Y+15, r24	; 0x0f
    397a:	8f 85       	ldd	r24, Y+15	; 0x0f
    397c:	98 89       	ldd	r25, Y+16	; 0x10
    397e:	01 97       	sbiw	r24, 0x01	; 1
    3980:	f1 f7       	brne	.-4      	; 0x397e <LCD_vInit+0x420>
    3982:	98 8b       	std	Y+16, r25	; 0x10
    3984:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	LCD_vSendCommand(EnrtyMode);
    3986:	86 e0       	ldi	r24, 0x06	; 6
    3988:	0e 94 85 19 	call	0x330a	; 0x330a <LCD_vSendCommand>
    398c:	80 e0       	ldi	r24, 0x00	; 0
    398e:	90 e0       	ldi	r25, 0x00	; 0
    3990:	a0 e0       	ldi	r26, 0x00	; 0
    3992:	b0 e4       	ldi	r27, 0x40	; 64
    3994:	8b 87       	std	Y+11, r24	; 0x0b
    3996:	9c 87       	std	Y+12, r25	; 0x0c
    3998:	ad 87       	std	Y+13, r26	; 0x0d
    399a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    399c:	6b 85       	ldd	r22, Y+11	; 0x0b
    399e:	7c 85       	ldd	r23, Y+12	; 0x0c
    39a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    39a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    39a4:	20 e0       	ldi	r18, 0x00	; 0
    39a6:	30 e0       	ldi	r19, 0x00	; 0
    39a8:	4a e7       	ldi	r20, 0x7A	; 122
    39aa:	55 e4       	ldi	r21, 0x45	; 69
    39ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39b0:	dc 01       	movw	r26, r24
    39b2:	cb 01       	movw	r24, r22
    39b4:	8f 83       	std	Y+7, r24	; 0x07
    39b6:	98 87       	std	Y+8, r25	; 0x08
    39b8:	a9 87       	std	Y+9, r26	; 0x09
    39ba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    39bc:	6f 81       	ldd	r22, Y+7	; 0x07
    39be:	78 85       	ldd	r23, Y+8	; 0x08
    39c0:	89 85       	ldd	r24, Y+9	; 0x09
    39c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    39c4:	20 e0       	ldi	r18, 0x00	; 0
    39c6:	30 e0       	ldi	r19, 0x00	; 0
    39c8:	40 e8       	ldi	r20, 0x80	; 128
    39ca:	5f e3       	ldi	r21, 0x3F	; 63
    39cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    39d0:	88 23       	and	r24, r24
    39d2:	2c f4       	brge	.+10     	; 0x39de <LCD_vInit+0x480>
		__ticks = 1;
    39d4:	81 e0       	ldi	r24, 0x01	; 1
    39d6:	90 e0       	ldi	r25, 0x00	; 0
    39d8:	9e 83       	std	Y+6, r25	; 0x06
    39da:	8d 83       	std	Y+5, r24	; 0x05
    39dc:	3f c0       	rjmp	.+126    	; 0x3a5c <LCD_vInit+0x4fe>
	else if (__tmp > 65535)
    39de:	6f 81       	ldd	r22, Y+7	; 0x07
    39e0:	78 85       	ldd	r23, Y+8	; 0x08
    39e2:	89 85       	ldd	r24, Y+9	; 0x09
    39e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    39e6:	20 e0       	ldi	r18, 0x00	; 0
    39e8:	3f ef       	ldi	r19, 0xFF	; 255
    39ea:	4f e7       	ldi	r20, 0x7F	; 127
    39ec:	57 e4       	ldi	r21, 0x47	; 71
    39ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    39f2:	18 16       	cp	r1, r24
    39f4:	4c f5       	brge	.+82     	; 0x3a48 <LCD_vInit+0x4ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    39f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    39fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    39fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    39fe:	20 e0       	ldi	r18, 0x00	; 0
    3a00:	30 e0       	ldi	r19, 0x00	; 0
    3a02:	40 e2       	ldi	r20, 0x20	; 32
    3a04:	51 e4       	ldi	r21, 0x41	; 65
    3a06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a0a:	dc 01       	movw	r26, r24
    3a0c:	cb 01       	movw	r24, r22
    3a0e:	bc 01       	movw	r22, r24
    3a10:	cd 01       	movw	r24, r26
    3a12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a16:	dc 01       	movw	r26, r24
    3a18:	cb 01       	movw	r24, r22
    3a1a:	9e 83       	std	Y+6, r25	; 0x06
    3a1c:	8d 83       	std	Y+5, r24	; 0x05
    3a1e:	0f c0       	rjmp	.+30     	; 0x3a3e <LCD_vInit+0x4e0>
    3a20:	80 e9       	ldi	r24, 0x90	; 144
    3a22:	91 e0       	ldi	r25, 0x01	; 1
    3a24:	9c 83       	std	Y+4, r25	; 0x04
    3a26:	8b 83       	std	Y+3, r24	; 0x03
    3a28:	8b 81       	ldd	r24, Y+3	; 0x03
    3a2a:	9c 81       	ldd	r25, Y+4	; 0x04
    3a2c:	01 97       	sbiw	r24, 0x01	; 1
    3a2e:	f1 f7       	brne	.-4      	; 0x3a2c <LCD_vInit+0x4ce>
    3a30:	9c 83       	std	Y+4, r25	; 0x04
    3a32:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a34:	8d 81       	ldd	r24, Y+5	; 0x05
    3a36:	9e 81       	ldd	r25, Y+6	; 0x06
    3a38:	01 97       	sbiw	r24, 0x01	; 1
    3a3a:	9e 83       	std	Y+6, r25	; 0x06
    3a3c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a3e:	8d 81       	ldd	r24, Y+5	; 0x05
    3a40:	9e 81       	ldd	r25, Y+6	; 0x06
    3a42:	00 97       	sbiw	r24, 0x00	; 0
    3a44:	69 f7       	brne	.-38     	; 0x3a20 <LCD_vInit+0x4c2>
    3a46:	14 c0       	rjmp	.+40     	; 0x3a70 <LCD_vInit+0x512>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a48:	6f 81       	ldd	r22, Y+7	; 0x07
    3a4a:	78 85       	ldd	r23, Y+8	; 0x08
    3a4c:	89 85       	ldd	r24, Y+9	; 0x09
    3a4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a54:	dc 01       	movw	r26, r24
    3a56:	cb 01       	movw	r24, r22
    3a58:	9e 83       	std	Y+6, r25	; 0x06
    3a5a:	8d 83       	std	Y+5, r24	; 0x05
    3a5c:	8d 81       	ldd	r24, Y+5	; 0x05
    3a5e:	9e 81       	ldd	r25, Y+6	; 0x06
    3a60:	9a 83       	std	Y+2, r25	; 0x02
    3a62:	89 83       	std	Y+1, r24	; 0x01
    3a64:	89 81       	ldd	r24, Y+1	; 0x01
    3a66:	9a 81       	ldd	r25, Y+2	; 0x02
    3a68:	01 97       	sbiw	r24, 0x01	; 1
    3a6a:	f1 f7       	brne	.-4      	; 0x3a68 <LCD_vInit+0x50a>
    3a6c:	9a 83       	std	Y+2, r25	; 0x02
    3a6e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

}
    3a70:	ca 5b       	subi	r28, 0xBA	; 186
    3a72:	df 4f       	sbci	r29, 0xFF	; 255
    3a74:	0f b6       	in	r0, 0x3f	; 63
    3a76:	f8 94       	cli
    3a78:	de bf       	out	0x3e, r29	; 62
    3a7a:	0f be       	out	0x3f, r0	; 63
    3a7c:	cd bf       	out	0x3d, r28	; 61
    3a7e:	cf 91       	pop	r28
    3a80:	df 91       	pop	r29
    3a82:	1f 91       	pop	r17
    3a84:	0f 91       	pop	r16
    3a86:	08 95       	ret

00003a88 <LCD_vInitWithOutClear>:
void LCD_vInitWithOutClear(){
    3a88:	df 93       	push	r29
    3a8a:	cf 93       	push	r28
    3a8c:	cd b7       	in	r28, 0x3d	; 61
    3a8e:	de b7       	in	r29, 0x3e	; 62
    3a90:	e8 97       	sbiw	r28, 0x38	; 56
    3a92:	0f b6       	in	r0, 0x3f	; 63
    3a94:	f8 94       	cli
    3a96:	de bf       	out	0x3e, r29	; 62
    3a98:	0f be       	out	0x3f, r0	; 63
    3a9a:	cd bf       	out	0x3d, r28	; 61
	DIO_vSetPinDirection(PortB, Pin1, Pin_OutPut);
    3a9c:	81 e0       	ldi	r24, 0x01	; 1
    3a9e:	61 e0       	ldi	r22, 0x01	; 1
    3aa0:	41 e0       	ldi	r20, 0x01	; 1
    3aa2:	0e 94 79 10 	call	0x20f2	; 0x20f2 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PortB, Pin3, Pin_OutPut);
    3aa6:	81 e0       	ldi	r24, 0x01	; 1
    3aa8:	63 e0       	ldi	r22, 0x03	; 3
    3aaa:	41 e0       	ldi	r20, 0x01	; 1
    3aac:	0e 94 79 10 	call	0x20f2	; 0x20f2 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PortB, Pin2, Pin_OutPut);
    3ab0:	81 e0       	ldi	r24, 0x01	; 1
    3ab2:	62 e0       	ldi	r22, 0x02	; 2
    3ab4:	41 e0       	ldi	r20, 0x01	; 1
    3ab6:	0e 94 79 10 	call	0x20f2	; 0x20f2 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PortA, Pin4, Pin_OutPut);
    3aba:	80 e0       	ldi	r24, 0x00	; 0
    3abc:	64 e0       	ldi	r22, 0x04	; 4
    3abe:	41 e0       	ldi	r20, 0x01	; 1
    3ac0:	0e 94 79 10 	call	0x20f2	; 0x20f2 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PortA, Pin5, Pin_OutPut);
    3ac4:	80 e0       	ldi	r24, 0x00	; 0
    3ac6:	65 e0       	ldi	r22, 0x05	; 5
    3ac8:	41 e0       	ldi	r20, 0x01	; 1
    3aca:	0e 94 79 10 	call	0x20f2	; 0x20f2 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PortA, Pin6, Pin_OutPut);
    3ace:	80 e0       	ldi	r24, 0x00	; 0
    3ad0:	66 e0       	ldi	r22, 0x06	; 6
    3ad2:	41 e0       	ldi	r20, 0x01	; 1
    3ad4:	0e 94 79 10 	call	0x20f2	; 0x20f2 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PortA, Pin7, Pin_OutPut);
    3ad8:	80 e0       	ldi	r24, 0x00	; 0
    3ada:	67 e0       	ldi	r22, 0x07	; 7
    3adc:	41 e0       	ldi	r20, 0x01	; 1
    3ade:	0e 94 79 10 	call	0x20f2	; 0x20f2 <DIO_vSetPinDirection>
    3ae2:	80 e0       	ldi	r24, 0x00	; 0
    3ae4:	90 e0       	ldi	r25, 0x00	; 0
    3ae6:	a8 e4       	ldi	r26, 0x48	; 72
    3ae8:	b2 e4       	ldi	r27, 0x42	; 66
    3aea:	8d ab       	std	Y+53, r24	; 0x35
    3aec:	9e ab       	std	Y+54, r25	; 0x36
    3aee:	af ab       	std	Y+55, r26	; 0x37
    3af0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3af2:	6d a9       	ldd	r22, Y+53	; 0x35
    3af4:	7e a9       	ldd	r23, Y+54	; 0x36
    3af6:	8f a9       	ldd	r24, Y+55	; 0x37
    3af8:	98 ad       	ldd	r25, Y+56	; 0x38
    3afa:	20 e0       	ldi	r18, 0x00	; 0
    3afc:	30 e0       	ldi	r19, 0x00	; 0
    3afe:	4a e7       	ldi	r20, 0x7A	; 122
    3b00:	55 e4       	ldi	r21, 0x45	; 69
    3b02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b06:	dc 01       	movw	r26, r24
    3b08:	cb 01       	movw	r24, r22
    3b0a:	89 ab       	std	Y+49, r24	; 0x31
    3b0c:	9a ab       	std	Y+50, r25	; 0x32
    3b0e:	ab ab       	std	Y+51, r26	; 0x33
    3b10:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3b12:	69 a9       	ldd	r22, Y+49	; 0x31
    3b14:	7a a9       	ldd	r23, Y+50	; 0x32
    3b16:	8b a9       	ldd	r24, Y+51	; 0x33
    3b18:	9c a9       	ldd	r25, Y+52	; 0x34
    3b1a:	20 e0       	ldi	r18, 0x00	; 0
    3b1c:	30 e0       	ldi	r19, 0x00	; 0
    3b1e:	40 e8       	ldi	r20, 0x80	; 128
    3b20:	5f e3       	ldi	r21, 0x3F	; 63
    3b22:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3b26:	88 23       	and	r24, r24
    3b28:	2c f4       	brge	.+10     	; 0x3b34 <LCD_vInitWithOutClear+0xac>
		__ticks = 1;
    3b2a:	81 e0       	ldi	r24, 0x01	; 1
    3b2c:	90 e0       	ldi	r25, 0x00	; 0
    3b2e:	98 ab       	std	Y+48, r25	; 0x30
    3b30:	8f a7       	std	Y+47, r24	; 0x2f
    3b32:	3f c0       	rjmp	.+126    	; 0x3bb2 <LCD_vInitWithOutClear+0x12a>
	else if (__tmp > 65535)
    3b34:	69 a9       	ldd	r22, Y+49	; 0x31
    3b36:	7a a9       	ldd	r23, Y+50	; 0x32
    3b38:	8b a9       	ldd	r24, Y+51	; 0x33
    3b3a:	9c a9       	ldd	r25, Y+52	; 0x34
    3b3c:	20 e0       	ldi	r18, 0x00	; 0
    3b3e:	3f ef       	ldi	r19, 0xFF	; 255
    3b40:	4f e7       	ldi	r20, 0x7F	; 127
    3b42:	57 e4       	ldi	r21, 0x47	; 71
    3b44:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3b48:	18 16       	cp	r1, r24
    3b4a:	4c f5       	brge	.+82     	; 0x3b9e <LCD_vInitWithOutClear+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b4c:	6d a9       	ldd	r22, Y+53	; 0x35
    3b4e:	7e a9       	ldd	r23, Y+54	; 0x36
    3b50:	8f a9       	ldd	r24, Y+55	; 0x37
    3b52:	98 ad       	ldd	r25, Y+56	; 0x38
    3b54:	20 e0       	ldi	r18, 0x00	; 0
    3b56:	30 e0       	ldi	r19, 0x00	; 0
    3b58:	40 e2       	ldi	r20, 0x20	; 32
    3b5a:	51 e4       	ldi	r21, 0x41	; 65
    3b5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b60:	dc 01       	movw	r26, r24
    3b62:	cb 01       	movw	r24, r22
    3b64:	bc 01       	movw	r22, r24
    3b66:	cd 01       	movw	r24, r26
    3b68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b6c:	dc 01       	movw	r26, r24
    3b6e:	cb 01       	movw	r24, r22
    3b70:	98 ab       	std	Y+48, r25	; 0x30
    3b72:	8f a7       	std	Y+47, r24	; 0x2f
    3b74:	0f c0       	rjmp	.+30     	; 0x3b94 <LCD_vInitWithOutClear+0x10c>
    3b76:	80 e9       	ldi	r24, 0x90	; 144
    3b78:	91 e0       	ldi	r25, 0x01	; 1
    3b7a:	9e a7       	std	Y+46, r25	; 0x2e
    3b7c:	8d a7       	std	Y+45, r24	; 0x2d
    3b7e:	8d a5       	ldd	r24, Y+45	; 0x2d
    3b80:	9e a5       	ldd	r25, Y+46	; 0x2e
    3b82:	01 97       	sbiw	r24, 0x01	; 1
    3b84:	f1 f7       	brne	.-4      	; 0x3b82 <LCD_vInitWithOutClear+0xfa>
    3b86:	9e a7       	std	Y+46, r25	; 0x2e
    3b88:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b8a:	8f a5       	ldd	r24, Y+47	; 0x2f
    3b8c:	98 a9       	ldd	r25, Y+48	; 0x30
    3b8e:	01 97       	sbiw	r24, 0x01	; 1
    3b90:	98 ab       	std	Y+48, r25	; 0x30
    3b92:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b94:	8f a5       	ldd	r24, Y+47	; 0x2f
    3b96:	98 a9       	ldd	r25, Y+48	; 0x30
    3b98:	00 97       	sbiw	r24, 0x00	; 0
    3b9a:	69 f7       	brne	.-38     	; 0x3b76 <LCD_vInitWithOutClear+0xee>
    3b9c:	14 c0       	rjmp	.+40     	; 0x3bc6 <LCD_vInitWithOutClear+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b9e:	69 a9       	ldd	r22, Y+49	; 0x31
    3ba0:	7a a9       	ldd	r23, Y+50	; 0x32
    3ba2:	8b a9       	ldd	r24, Y+51	; 0x33
    3ba4:	9c a9       	ldd	r25, Y+52	; 0x34
    3ba6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3baa:	dc 01       	movw	r26, r24
    3bac:	cb 01       	movw	r24, r22
    3bae:	98 ab       	std	Y+48, r25	; 0x30
    3bb0:	8f a7       	std	Y+47, r24	; 0x2f
    3bb2:	8f a5       	ldd	r24, Y+47	; 0x2f
    3bb4:	98 a9       	ldd	r25, Y+48	; 0x30
    3bb6:	9c a7       	std	Y+44, r25	; 0x2c
    3bb8:	8b a7       	std	Y+43, r24	; 0x2b
    3bba:	8b a5       	ldd	r24, Y+43	; 0x2b
    3bbc:	9c a5       	ldd	r25, Y+44	; 0x2c
    3bbe:	01 97       	sbiw	r24, 0x01	; 1
    3bc0:	f1 f7       	brne	.-4      	; 0x3bbe <LCD_vInitWithOutClear+0x136>
    3bc2:	9c a7       	std	Y+44, r25	; 0x2c
    3bc4:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(50);
	LCD_vSendCommand(FunctionSet);
    3bc6:	88 e2       	ldi	r24, 0x28	; 40
    3bc8:	0e 94 85 19 	call	0x330a	; 0x330a <LCD_vSendCommand>
    3bcc:	80 e0       	ldi	r24, 0x00	; 0
    3bce:	90 e0       	ldi	r25, 0x00	; 0
    3bd0:	a0 e0       	ldi	r26, 0x00	; 0
    3bd2:	b0 e4       	ldi	r27, 0x40	; 64
    3bd4:	8f a3       	std	Y+39, r24	; 0x27
    3bd6:	98 a7       	std	Y+40, r25	; 0x28
    3bd8:	a9 a7       	std	Y+41, r26	; 0x29
    3bda:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bdc:	6f a1       	ldd	r22, Y+39	; 0x27
    3bde:	78 a5       	ldd	r23, Y+40	; 0x28
    3be0:	89 a5       	ldd	r24, Y+41	; 0x29
    3be2:	9a a5       	ldd	r25, Y+42	; 0x2a
    3be4:	20 e0       	ldi	r18, 0x00	; 0
    3be6:	30 e0       	ldi	r19, 0x00	; 0
    3be8:	4a e7       	ldi	r20, 0x7A	; 122
    3bea:	55 e4       	ldi	r21, 0x45	; 69
    3bec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bf0:	dc 01       	movw	r26, r24
    3bf2:	cb 01       	movw	r24, r22
    3bf4:	8b a3       	std	Y+35, r24	; 0x23
    3bf6:	9c a3       	std	Y+36, r25	; 0x24
    3bf8:	ad a3       	std	Y+37, r26	; 0x25
    3bfa:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3bfc:	6b a1       	ldd	r22, Y+35	; 0x23
    3bfe:	7c a1       	ldd	r23, Y+36	; 0x24
    3c00:	8d a1       	ldd	r24, Y+37	; 0x25
    3c02:	9e a1       	ldd	r25, Y+38	; 0x26
    3c04:	20 e0       	ldi	r18, 0x00	; 0
    3c06:	30 e0       	ldi	r19, 0x00	; 0
    3c08:	40 e8       	ldi	r20, 0x80	; 128
    3c0a:	5f e3       	ldi	r21, 0x3F	; 63
    3c0c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3c10:	88 23       	and	r24, r24
    3c12:	2c f4       	brge	.+10     	; 0x3c1e <LCD_vInitWithOutClear+0x196>
		__ticks = 1;
    3c14:	81 e0       	ldi	r24, 0x01	; 1
    3c16:	90 e0       	ldi	r25, 0x00	; 0
    3c18:	9a a3       	std	Y+34, r25	; 0x22
    3c1a:	89 a3       	std	Y+33, r24	; 0x21
    3c1c:	3f c0       	rjmp	.+126    	; 0x3c9c <LCD_vInitWithOutClear+0x214>
	else if (__tmp > 65535)
    3c1e:	6b a1       	ldd	r22, Y+35	; 0x23
    3c20:	7c a1       	ldd	r23, Y+36	; 0x24
    3c22:	8d a1       	ldd	r24, Y+37	; 0x25
    3c24:	9e a1       	ldd	r25, Y+38	; 0x26
    3c26:	20 e0       	ldi	r18, 0x00	; 0
    3c28:	3f ef       	ldi	r19, 0xFF	; 255
    3c2a:	4f e7       	ldi	r20, 0x7F	; 127
    3c2c:	57 e4       	ldi	r21, 0x47	; 71
    3c2e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3c32:	18 16       	cp	r1, r24
    3c34:	4c f5       	brge	.+82     	; 0x3c88 <LCD_vInitWithOutClear+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c36:	6f a1       	ldd	r22, Y+39	; 0x27
    3c38:	78 a5       	ldd	r23, Y+40	; 0x28
    3c3a:	89 a5       	ldd	r24, Y+41	; 0x29
    3c3c:	9a a5       	ldd	r25, Y+42	; 0x2a
    3c3e:	20 e0       	ldi	r18, 0x00	; 0
    3c40:	30 e0       	ldi	r19, 0x00	; 0
    3c42:	40 e2       	ldi	r20, 0x20	; 32
    3c44:	51 e4       	ldi	r21, 0x41	; 65
    3c46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c4a:	dc 01       	movw	r26, r24
    3c4c:	cb 01       	movw	r24, r22
    3c4e:	bc 01       	movw	r22, r24
    3c50:	cd 01       	movw	r24, r26
    3c52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c56:	dc 01       	movw	r26, r24
    3c58:	cb 01       	movw	r24, r22
    3c5a:	9a a3       	std	Y+34, r25	; 0x22
    3c5c:	89 a3       	std	Y+33, r24	; 0x21
    3c5e:	0f c0       	rjmp	.+30     	; 0x3c7e <LCD_vInitWithOutClear+0x1f6>
    3c60:	80 e9       	ldi	r24, 0x90	; 144
    3c62:	91 e0       	ldi	r25, 0x01	; 1
    3c64:	98 a3       	std	Y+32, r25	; 0x20
    3c66:	8f 8f       	std	Y+31, r24	; 0x1f
    3c68:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3c6a:	98 a1       	ldd	r25, Y+32	; 0x20
    3c6c:	01 97       	sbiw	r24, 0x01	; 1
    3c6e:	f1 f7       	brne	.-4      	; 0x3c6c <LCD_vInitWithOutClear+0x1e4>
    3c70:	98 a3       	std	Y+32, r25	; 0x20
    3c72:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c74:	89 a1       	ldd	r24, Y+33	; 0x21
    3c76:	9a a1       	ldd	r25, Y+34	; 0x22
    3c78:	01 97       	sbiw	r24, 0x01	; 1
    3c7a:	9a a3       	std	Y+34, r25	; 0x22
    3c7c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c7e:	89 a1       	ldd	r24, Y+33	; 0x21
    3c80:	9a a1       	ldd	r25, Y+34	; 0x22
    3c82:	00 97       	sbiw	r24, 0x00	; 0
    3c84:	69 f7       	brne	.-38     	; 0x3c60 <LCD_vInitWithOutClear+0x1d8>
    3c86:	14 c0       	rjmp	.+40     	; 0x3cb0 <LCD_vInitWithOutClear+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c88:	6b a1       	ldd	r22, Y+35	; 0x23
    3c8a:	7c a1       	ldd	r23, Y+36	; 0x24
    3c8c:	8d a1       	ldd	r24, Y+37	; 0x25
    3c8e:	9e a1       	ldd	r25, Y+38	; 0x26
    3c90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c94:	dc 01       	movw	r26, r24
    3c96:	cb 01       	movw	r24, r22
    3c98:	9a a3       	std	Y+34, r25	; 0x22
    3c9a:	89 a3       	std	Y+33, r24	; 0x21
    3c9c:	89 a1       	ldd	r24, Y+33	; 0x21
    3c9e:	9a a1       	ldd	r25, Y+34	; 0x22
    3ca0:	9e 8f       	std	Y+30, r25	; 0x1e
    3ca2:	8d 8f       	std	Y+29, r24	; 0x1d
    3ca4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3ca6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3ca8:	01 97       	sbiw	r24, 0x01	; 1
    3caa:	f1 f7       	brne	.-4      	; 0x3ca8 <LCD_vInitWithOutClear+0x220>
    3cac:	9e 8f       	std	Y+30, r25	; 0x1e
    3cae:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	LCD_vSendCommand(DisplayOnControl);
    3cb0:	8e e0       	ldi	r24, 0x0E	; 14
    3cb2:	0e 94 85 19 	call	0x330a	; 0x330a <LCD_vSendCommand>
    3cb6:	80 e0       	ldi	r24, 0x00	; 0
    3cb8:	90 e0       	ldi	r25, 0x00	; 0
    3cba:	a0 e0       	ldi	r26, 0x00	; 0
    3cbc:	b0 e4       	ldi	r27, 0x40	; 64
    3cbe:	89 8f       	std	Y+25, r24	; 0x19
    3cc0:	9a 8f       	std	Y+26, r25	; 0x1a
    3cc2:	ab 8f       	std	Y+27, r26	; 0x1b
    3cc4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cc6:	69 8d       	ldd	r22, Y+25	; 0x19
    3cc8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3cca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ccc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3cce:	20 e0       	ldi	r18, 0x00	; 0
    3cd0:	30 e0       	ldi	r19, 0x00	; 0
    3cd2:	4a e7       	ldi	r20, 0x7A	; 122
    3cd4:	55 e4       	ldi	r21, 0x45	; 69
    3cd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cda:	dc 01       	movw	r26, r24
    3cdc:	cb 01       	movw	r24, r22
    3cde:	8d 8b       	std	Y+21, r24	; 0x15
    3ce0:	9e 8b       	std	Y+22, r25	; 0x16
    3ce2:	af 8b       	std	Y+23, r26	; 0x17
    3ce4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3ce6:	6d 89       	ldd	r22, Y+21	; 0x15
    3ce8:	7e 89       	ldd	r23, Y+22	; 0x16
    3cea:	8f 89       	ldd	r24, Y+23	; 0x17
    3cec:	98 8d       	ldd	r25, Y+24	; 0x18
    3cee:	20 e0       	ldi	r18, 0x00	; 0
    3cf0:	30 e0       	ldi	r19, 0x00	; 0
    3cf2:	40 e8       	ldi	r20, 0x80	; 128
    3cf4:	5f e3       	ldi	r21, 0x3F	; 63
    3cf6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3cfa:	88 23       	and	r24, r24
    3cfc:	2c f4       	brge	.+10     	; 0x3d08 <LCD_vInitWithOutClear+0x280>
		__ticks = 1;
    3cfe:	81 e0       	ldi	r24, 0x01	; 1
    3d00:	90 e0       	ldi	r25, 0x00	; 0
    3d02:	9c 8b       	std	Y+20, r25	; 0x14
    3d04:	8b 8b       	std	Y+19, r24	; 0x13
    3d06:	3f c0       	rjmp	.+126    	; 0x3d86 <LCD_vInitWithOutClear+0x2fe>
	else if (__tmp > 65535)
    3d08:	6d 89       	ldd	r22, Y+21	; 0x15
    3d0a:	7e 89       	ldd	r23, Y+22	; 0x16
    3d0c:	8f 89       	ldd	r24, Y+23	; 0x17
    3d0e:	98 8d       	ldd	r25, Y+24	; 0x18
    3d10:	20 e0       	ldi	r18, 0x00	; 0
    3d12:	3f ef       	ldi	r19, 0xFF	; 255
    3d14:	4f e7       	ldi	r20, 0x7F	; 127
    3d16:	57 e4       	ldi	r21, 0x47	; 71
    3d18:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3d1c:	18 16       	cp	r1, r24
    3d1e:	4c f5       	brge	.+82     	; 0x3d72 <LCD_vInitWithOutClear+0x2ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d20:	69 8d       	ldd	r22, Y+25	; 0x19
    3d22:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3d24:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3d26:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3d28:	20 e0       	ldi	r18, 0x00	; 0
    3d2a:	30 e0       	ldi	r19, 0x00	; 0
    3d2c:	40 e2       	ldi	r20, 0x20	; 32
    3d2e:	51 e4       	ldi	r21, 0x41	; 65
    3d30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d34:	dc 01       	movw	r26, r24
    3d36:	cb 01       	movw	r24, r22
    3d38:	bc 01       	movw	r22, r24
    3d3a:	cd 01       	movw	r24, r26
    3d3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d40:	dc 01       	movw	r26, r24
    3d42:	cb 01       	movw	r24, r22
    3d44:	9c 8b       	std	Y+20, r25	; 0x14
    3d46:	8b 8b       	std	Y+19, r24	; 0x13
    3d48:	0f c0       	rjmp	.+30     	; 0x3d68 <LCD_vInitWithOutClear+0x2e0>
    3d4a:	80 e9       	ldi	r24, 0x90	; 144
    3d4c:	91 e0       	ldi	r25, 0x01	; 1
    3d4e:	9a 8b       	std	Y+18, r25	; 0x12
    3d50:	89 8b       	std	Y+17, r24	; 0x11
    3d52:	89 89       	ldd	r24, Y+17	; 0x11
    3d54:	9a 89       	ldd	r25, Y+18	; 0x12
    3d56:	01 97       	sbiw	r24, 0x01	; 1
    3d58:	f1 f7       	brne	.-4      	; 0x3d56 <LCD_vInitWithOutClear+0x2ce>
    3d5a:	9a 8b       	std	Y+18, r25	; 0x12
    3d5c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d5e:	8b 89       	ldd	r24, Y+19	; 0x13
    3d60:	9c 89       	ldd	r25, Y+20	; 0x14
    3d62:	01 97       	sbiw	r24, 0x01	; 1
    3d64:	9c 8b       	std	Y+20, r25	; 0x14
    3d66:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d68:	8b 89       	ldd	r24, Y+19	; 0x13
    3d6a:	9c 89       	ldd	r25, Y+20	; 0x14
    3d6c:	00 97       	sbiw	r24, 0x00	; 0
    3d6e:	69 f7       	brne	.-38     	; 0x3d4a <LCD_vInitWithOutClear+0x2c2>
    3d70:	14 c0       	rjmp	.+40     	; 0x3d9a <LCD_vInitWithOutClear+0x312>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d72:	6d 89       	ldd	r22, Y+21	; 0x15
    3d74:	7e 89       	ldd	r23, Y+22	; 0x16
    3d76:	8f 89       	ldd	r24, Y+23	; 0x17
    3d78:	98 8d       	ldd	r25, Y+24	; 0x18
    3d7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d7e:	dc 01       	movw	r26, r24
    3d80:	cb 01       	movw	r24, r22
    3d82:	9c 8b       	std	Y+20, r25	; 0x14
    3d84:	8b 8b       	std	Y+19, r24	; 0x13
    3d86:	8b 89       	ldd	r24, Y+19	; 0x13
    3d88:	9c 89       	ldd	r25, Y+20	; 0x14
    3d8a:	98 8b       	std	Y+16, r25	; 0x10
    3d8c:	8f 87       	std	Y+15, r24	; 0x0f
    3d8e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d90:	98 89       	ldd	r25, Y+16	; 0x10
    3d92:	01 97       	sbiw	r24, 0x01	; 1
    3d94:	f1 f7       	brne	.-4      	; 0x3d92 <LCD_vInitWithOutClear+0x30a>
    3d96:	98 8b       	std	Y+16, r25	; 0x10
    3d98:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	LCD_vSendCommand(EnrtyMode);
    3d9a:	86 e0       	ldi	r24, 0x06	; 6
    3d9c:	0e 94 85 19 	call	0x330a	; 0x330a <LCD_vSendCommand>
    3da0:	80 e0       	ldi	r24, 0x00	; 0
    3da2:	90 e0       	ldi	r25, 0x00	; 0
    3da4:	a0 e0       	ldi	r26, 0x00	; 0
    3da6:	b0 e4       	ldi	r27, 0x40	; 64
    3da8:	8b 87       	std	Y+11, r24	; 0x0b
    3daa:	9c 87       	std	Y+12, r25	; 0x0c
    3dac:	ad 87       	std	Y+13, r26	; 0x0d
    3dae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3db0:	6b 85       	ldd	r22, Y+11	; 0x0b
    3db2:	7c 85       	ldd	r23, Y+12	; 0x0c
    3db4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3db6:	9e 85       	ldd	r25, Y+14	; 0x0e
    3db8:	20 e0       	ldi	r18, 0x00	; 0
    3dba:	30 e0       	ldi	r19, 0x00	; 0
    3dbc:	4a e7       	ldi	r20, 0x7A	; 122
    3dbe:	55 e4       	ldi	r21, 0x45	; 69
    3dc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dc4:	dc 01       	movw	r26, r24
    3dc6:	cb 01       	movw	r24, r22
    3dc8:	8f 83       	std	Y+7, r24	; 0x07
    3dca:	98 87       	std	Y+8, r25	; 0x08
    3dcc:	a9 87       	std	Y+9, r26	; 0x09
    3dce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3dd0:	6f 81       	ldd	r22, Y+7	; 0x07
    3dd2:	78 85       	ldd	r23, Y+8	; 0x08
    3dd4:	89 85       	ldd	r24, Y+9	; 0x09
    3dd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dd8:	20 e0       	ldi	r18, 0x00	; 0
    3dda:	30 e0       	ldi	r19, 0x00	; 0
    3ddc:	40 e8       	ldi	r20, 0x80	; 128
    3dde:	5f e3       	ldi	r21, 0x3F	; 63
    3de0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3de4:	88 23       	and	r24, r24
    3de6:	2c f4       	brge	.+10     	; 0x3df2 <LCD_vInitWithOutClear+0x36a>
		__ticks = 1;
    3de8:	81 e0       	ldi	r24, 0x01	; 1
    3dea:	90 e0       	ldi	r25, 0x00	; 0
    3dec:	9e 83       	std	Y+6, r25	; 0x06
    3dee:	8d 83       	std	Y+5, r24	; 0x05
    3df0:	3f c0       	rjmp	.+126    	; 0x3e70 <LCD_vInitWithOutClear+0x3e8>
	else if (__tmp > 65535)
    3df2:	6f 81       	ldd	r22, Y+7	; 0x07
    3df4:	78 85       	ldd	r23, Y+8	; 0x08
    3df6:	89 85       	ldd	r24, Y+9	; 0x09
    3df8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dfa:	20 e0       	ldi	r18, 0x00	; 0
    3dfc:	3f ef       	ldi	r19, 0xFF	; 255
    3dfe:	4f e7       	ldi	r20, 0x7F	; 127
    3e00:	57 e4       	ldi	r21, 0x47	; 71
    3e02:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3e06:	18 16       	cp	r1, r24
    3e08:	4c f5       	brge	.+82     	; 0x3e5c <LCD_vInitWithOutClear+0x3d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e0a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e0c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e10:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e12:	20 e0       	ldi	r18, 0x00	; 0
    3e14:	30 e0       	ldi	r19, 0x00	; 0
    3e16:	40 e2       	ldi	r20, 0x20	; 32
    3e18:	51 e4       	ldi	r21, 0x41	; 65
    3e1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e1e:	dc 01       	movw	r26, r24
    3e20:	cb 01       	movw	r24, r22
    3e22:	bc 01       	movw	r22, r24
    3e24:	cd 01       	movw	r24, r26
    3e26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e2a:	dc 01       	movw	r26, r24
    3e2c:	cb 01       	movw	r24, r22
    3e2e:	9e 83       	std	Y+6, r25	; 0x06
    3e30:	8d 83       	std	Y+5, r24	; 0x05
    3e32:	0f c0       	rjmp	.+30     	; 0x3e52 <LCD_vInitWithOutClear+0x3ca>
    3e34:	80 e9       	ldi	r24, 0x90	; 144
    3e36:	91 e0       	ldi	r25, 0x01	; 1
    3e38:	9c 83       	std	Y+4, r25	; 0x04
    3e3a:	8b 83       	std	Y+3, r24	; 0x03
    3e3c:	8b 81       	ldd	r24, Y+3	; 0x03
    3e3e:	9c 81       	ldd	r25, Y+4	; 0x04
    3e40:	01 97       	sbiw	r24, 0x01	; 1
    3e42:	f1 f7       	brne	.-4      	; 0x3e40 <LCD_vInitWithOutClear+0x3b8>
    3e44:	9c 83       	std	Y+4, r25	; 0x04
    3e46:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e48:	8d 81       	ldd	r24, Y+5	; 0x05
    3e4a:	9e 81       	ldd	r25, Y+6	; 0x06
    3e4c:	01 97       	sbiw	r24, 0x01	; 1
    3e4e:	9e 83       	std	Y+6, r25	; 0x06
    3e50:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e52:	8d 81       	ldd	r24, Y+5	; 0x05
    3e54:	9e 81       	ldd	r25, Y+6	; 0x06
    3e56:	00 97       	sbiw	r24, 0x00	; 0
    3e58:	69 f7       	brne	.-38     	; 0x3e34 <LCD_vInitWithOutClear+0x3ac>
    3e5a:	14 c0       	rjmp	.+40     	; 0x3e84 <LCD_vInitWithOutClear+0x3fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e5c:	6f 81       	ldd	r22, Y+7	; 0x07
    3e5e:	78 85       	ldd	r23, Y+8	; 0x08
    3e60:	89 85       	ldd	r24, Y+9	; 0x09
    3e62:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e68:	dc 01       	movw	r26, r24
    3e6a:	cb 01       	movw	r24, r22
    3e6c:	9e 83       	std	Y+6, r25	; 0x06
    3e6e:	8d 83       	std	Y+5, r24	; 0x05
    3e70:	8d 81       	ldd	r24, Y+5	; 0x05
    3e72:	9e 81       	ldd	r25, Y+6	; 0x06
    3e74:	9a 83       	std	Y+2, r25	; 0x02
    3e76:	89 83       	std	Y+1, r24	; 0x01
    3e78:	89 81       	ldd	r24, Y+1	; 0x01
    3e7a:	9a 81       	ldd	r25, Y+2	; 0x02
    3e7c:	01 97       	sbiw	r24, 0x01	; 1
    3e7e:	f1 f7       	brne	.-4      	; 0x3e7c <LCD_vInitWithOutClear+0x3f4>
    3e80:	9a 83       	std	Y+2, r25	; 0x02
    3e82:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    3e84:	e8 96       	adiw	r28, 0x38	; 56
    3e86:	0f b6       	in	r0, 0x3f	; 63
    3e88:	f8 94       	cli
    3e8a:	de bf       	out	0x3e, r29	; 62
    3e8c:	0f be       	out	0x3f, r0	; 63
    3e8e:	cd bf       	out	0x3d, r28	; 61
    3e90:	cf 91       	pop	r28
    3e92:	df 91       	pop	r29
    3e94:	08 95       	ret

00003e96 <LCD_vWriteCharacter>:
void LCD_vWriteCharacter(u8 Loc_u8Character){
    3e96:	df 93       	push	r29
    3e98:	cf 93       	push	r28
    3e9a:	cd b7       	in	r28, 0x3d	; 61
    3e9c:	de b7       	in	r29, 0x3e	; 62
    3e9e:	6d 97       	sbiw	r28, 0x1d	; 29
    3ea0:	0f b6       	in	r0, 0x3f	; 63
    3ea2:	f8 94       	cli
    3ea4:	de bf       	out	0x3e, r29	; 62
    3ea6:	0f be       	out	0x3f, r0	; 63
    3ea8:	cd bf       	out	0x3d, r28	; 61
    3eaa:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_vSetPinValue(PortB, Pin1, Pin_High);
    3eac:	81 e0       	ldi	r24, 0x01	; 1
    3eae:	61 e0       	ldi	r22, 0x01	; 1
    3eb0:	41 e0       	ldi	r20, 0x01	; 1
    3eb2:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <DIO_vSetPinValue>
	DIO_vSetPinValue(PortB, Pin2, Pin_Low);
    3eb6:	81 e0       	ldi	r24, 0x01	; 1
    3eb8:	62 e0       	ldi	r22, 0x02	; 2
    3eba:	40 e0       	ldi	r20, 0x00	; 0
    3ebc:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <DIO_vSetPinValue>
	DIO_vSetPinValue(PortB, Pin3, Pin_Low);
    3ec0:	81 e0       	ldi	r24, 0x01	; 1
    3ec2:	63 e0       	ldi	r22, 0x03	; 3
    3ec4:	40 e0       	ldi	r20, 0x00	; 0
    3ec6:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <DIO_vSetPinValue>
	//------Send command-------
	DIO_vSetPortValue(PortA,(Loc_u8Character)&0xF0);
    3eca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3ecc:	98 2f       	mov	r25, r24
    3ece:	90 7f       	andi	r25, 0xF0	; 240
    3ed0:	80 e0       	ldi	r24, 0x00	; 0
    3ed2:	69 2f       	mov	r22, r25
    3ed4:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <DIO_vSetPortValue>
	DIO_vSetPinValue(PortB, Pin3, Pin_High);
    3ed8:	81 e0       	ldi	r24, 0x01	; 1
    3eda:	63 e0       	ldi	r22, 0x03	; 3
    3edc:	41 e0       	ldi	r20, 0x01	; 1
    3ede:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <DIO_vSetPinValue>
    3ee2:	80 e0       	ldi	r24, 0x00	; 0
    3ee4:	90 e0       	ldi	r25, 0x00	; 0
    3ee6:	a0 e2       	ldi	r26, 0x20	; 32
    3ee8:	b1 e4       	ldi	r27, 0x41	; 65
    3eea:	89 8f       	std	Y+25, r24	; 0x19
    3eec:	9a 8f       	std	Y+26, r25	; 0x1a
    3eee:	ab 8f       	std	Y+27, r26	; 0x1b
    3ef0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ef2:	69 8d       	ldd	r22, Y+25	; 0x19
    3ef4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3ef6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ef8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3efa:	20 e0       	ldi	r18, 0x00	; 0
    3efc:	30 e0       	ldi	r19, 0x00	; 0
    3efe:	4a e7       	ldi	r20, 0x7A	; 122
    3f00:	55 e4       	ldi	r21, 0x45	; 69
    3f02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f06:	dc 01       	movw	r26, r24
    3f08:	cb 01       	movw	r24, r22
    3f0a:	8d 8b       	std	Y+21, r24	; 0x15
    3f0c:	9e 8b       	std	Y+22, r25	; 0x16
    3f0e:	af 8b       	std	Y+23, r26	; 0x17
    3f10:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3f12:	6d 89       	ldd	r22, Y+21	; 0x15
    3f14:	7e 89       	ldd	r23, Y+22	; 0x16
    3f16:	8f 89       	ldd	r24, Y+23	; 0x17
    3f18:	98 8d       	ldd	r25, Y+24	; 0x18
    3f1a:	20 e0       	ldi	r18, 0x00	; 0
    3f1c:	30 e0       	ldi	r19, 0x00	; 0
    3f1e:	40 e8       	ldi	r20, 0x80	; 128
    3f20:	5f e3       	ldi	r21, 0x3F	; 63
    3f22:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3f26:	88 23       	and	r24, r24
    3f28:	2c f4       	brge	.+10     	; 0x3f34 <LCD_vWriteCharacter+0x9e>
		__ticks = 1;
    3f2a:	81 e0       	ldi	r24, 0x01	; 1
    3f2c:	90 e0       	ldi	r25, 0x00	; 0
    3f2e:	9c 8b       	std	Y+20, r25	; 0x14
    3f30:	8b 8b       	std	Y+19, r24	; 0x13
    3f32:	3f c0       	rjmp	.+126    	; 0x3fb2 <LCD_vWriteCharacter+0x11c>
	else if (__tmp > 65535)
    3f34:	6d 89       	ldd	r22, Y+21	; 0x15
    3f36:	7e 89       	ldd	r23, Y+22	; 0x16
    3f38:	8f 89       	ldd	r24, Y+23	; 0x17
    3f3a:	98 8d       	ldd	r25, Y+24	; 0x18
    3f3c:	20 e0       	ldi	r18, 0x00	; 0
    3f3e:	3f ef       	ldi	r19, 0xFF	; 255
    3f40:	4f e7       	ldi	r20, 0x7F	; 127
    3f42:	57 e4       	ldi	r21, 0x47	; 71
    3f44:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3f48:	18 16       	cp	r1, r24
    3f4a:	4c f5       	brge	.+82     	; 0x3f9e <LCD_vWriteCharacter+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f4c:	69 8d       	ldd	r22, Y+25	; 0x19
    3f4e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3f50:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3f52:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3f54:	20 e0       	ldi	r18, 0x00	; 0
    3f56:	30 e0       	ldi	r19, 0x00	; 0
    3f58:	40 e2       	ldi	r20, 0x20	; 32
    3f5a:	51 e4       	ldi	r21, 0x41	; 65
    3f5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f60:	dc 01       	movw	r26, r24
    3f62:	cb 01       	movw	r24, r22
    3f64:	bc 01       	movw	r22, r24
    3f66:	cd 01       	movw	r24, r26
    3f68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f6c:	dc 01       	movw	r26, r24
    3f6e:	cb 01       	movw	r24, r22
    3f70:	9c 8b       	std	Y+20, r25	; 0x14
    3f72:	8b 8b       	std	Y+19, r24	; 0x13
    3f74:	0f c0       	rjmp	.+30     	; 0x3f94 <LCD_vWriteCharacter+0xfe>
    3f76:	80 e9       	ldi	r24, 0x90	; 144
    3f78:	91 e0       	ldi	r25, 0x01	; 1
    3f7a:	9a 8b       	std	Y+18, r25	; 0x12
    3f7c:	89 8b       	std	Y+17, r24	; 0x11
    3f7e:	89 89       	ldd	r24, Y+17	; 0x11
    3f80:	9a 89       	ldd	r25, Y+18	; 0x12
    3f82:	01 97       	sbiw	r24, 0x01	; 1
    3f84:	f1 f7       	brne	.-4      	; 0x3f82 <LCD_vWriteCharacter+0xec>
    3f86:	9a 8b       	std	Y+18, r25	; 0x12
    3f88:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f8a:	8b 89       	ldd	r24, Y+19	; 0x13
    3f8c:	9c 89       	ldd	r25, Y+20	; 0x14
    3f8e:	01 97       	sbiw	r24, 0x01	; 1
    3f90:	9c 8b       	std	Y+20, r25	; 0x14
    3f92:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f94:	8b 89       	ldd	r24, Y+19	; 0x13
    3f96:	9c 89       	ldd	r25, Y+20	; 0x14
    3f98:	00 97       	sbiw	r24, 0x00	; 0
    3f9a:	69 f7       	brne	.-38     	; 0x3f76 <LCD_vWriteCharacter+0xe0>
    3f9c:	14 c0       	rjmp	.+40     	; 0x3fc6 <LCD_vWriteCharacter+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f9e:	6d 89       	ldd	r22, Y+21	; 0x15
    3fa0:	7e 89       	ldd	r23, Y+22	; 0x16
    3fa2:	8f 89       	ldd	r24, Y+23	; 0x17
    3fa4:	98 8d       	ldd	r25, Y+24	; 0x18
    3fa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3faa:	dc 01       	movw	r26, r24
    3fac:	cb 01       	movw	r24, r22
    3fae:	9c 8b       	std	Y+20, r25	; 0x14
    3fb0:	8b 8b       	std	Y+19, r24	; 0x13
    3fb2:	8b 89       	ldd	r24, Y+19	; 0x13
    3fb4:	9c 89       	ldd	r25, Y+20	; 0x14
    3fb6:	98 8b       	std	Y+16, r25	; 0x10
    3fb8:	8f 87       	std	Y+15, r24	; 0x0f
    3fba:	8f 85       	ldd	r24, Y+15	; 0x0f
    3fbc:	98 89       	ldd	r25, Y+16	; 0x10
    3fbe:	01 97       	sbiw	r24, 0x01	; 1
    3fc0:	f1 f7       	brne	.-4      	; 0x3fbe <LCD_vWriteCharacter+0x128>
    3fc2:	98 8b       	std	Y+16, r25	; 0x10
    3fc4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	DIO_vSetPinValue(PortB, Pin3, Pin_Low);
    3fc6:	81 e0       	ldi	r24, 0x01	; 1
    3fc8:	63 e0       	ldi	r22, 0x03	; 3
    3fca:	40 e0       	ldi	r20, 0x00	; 0
    3fcc:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <DIO_vSetPinValue>
	DIO_vSetPortValue(PortA,(Loc_u8Character<<4));
    3fd0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3fd2:	98 2f       	mov	r25, r24
    3fd4:	92 95       	swap	r25
    3fd6:	90 7f       	andi	r25, 0xF0	; 240
    3fd8:	80 e0       	ldi	r24, 0x00	; 0
    3fda:	69 2f       	mov	r22, r25
    3fdc:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <DIO_vSetPortValue>
	DIO_vSetPinValue(PortB, Pin3, Pin_High);
    3fe0:	81 e0       	ldi	r24, 0x01	; 1
    3fe2:	63 e0       	ldi	r22, 0x03	; 3
    3fe4:	41 e0       	ldi	r20, 0x01	; 1
    3fe6:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <DIO_vSetPinValue>
    3fea:	80 e0       	ldi	r24, 0x00	; 0
    3fec:	90 e0       	ldi	r25, 0x00	; 0
    3fee:	a0 e2       	ldi	r26, 0x20	; 32
    3ff0:	b1 e4       	ldi	r27, 0x41	; 65
    3ff2:	8b 87       	std	Y+11, r24	; 0x0b
    3ff4:	9c 87       	std	Y+12, r25	; 0x0c
    3ff6:	ad 87       	std	Y+13, r26	; 0x0d
    3ff8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ffa:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ffc:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ffe:	8d 85       	ldd	r24, Y+13	; 0x0d
    4000:	9e 85       	ldd	r25, Y+14	; 0x0e
    4002:	20 e0       	ldi	r18, 0x00	; 0
    4004:	30 e0       	ldi	r19, 0x00	; 0
    4006:	4a e7       	ldi	r20, 0x7A	; 122
    4008:	55 e4       	ldi	r21, 0x45	; 69
    400a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    400e:	dc 01       	movw	r26, r24
    4010:	cb 01       	movw	r24, r22
    4012:	8f 83       	std	Y+7, r24	; 0x07
    4014:	98 87       	std	Y+8, r25	; 0x08
    4016:	a9 87       	std	Y+9, r26	; 0x09
    4018:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    401a:	6f 81       	ldd	r22, Y+7	; 0x07
    401c:	78 85       	ldd	r23, Y+8	; 0x08
    401e:	89 85       	ldd	r24, Y+9	; 0x09
    4020:	9a 85       	ldd	r25, Y+10	; 0x0a
    4022:	20 e0       	ldi	r18, 0x00	; 0
    4024:	30 e0       	ldi	r19, 0x00	; 0
    4026:	40 e8       	ldi	r20, 0x80	; 128
    4028:	5f e3       	ldi	r21, 0x3F	; 63
    402a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    402e:	88 23       	and	r24, r24
    4030:	2c f4       	brge	.+10     	; 0x403c <LCD_vWriteCharacter+0x1a6>
		__ticks = 1;
    4032:	81 e0       	ldi	r24, 0x01	; 1
    4034:	90 e0       	ldi	r25, 0x00	; 0
    4036:	9e 83       	std	Y+6, r25	; 0x06
    4038:	8d 83       	std	Y+5, r24	; 0x05
    403a:	3f c0       	rjmp	.+126    	; 0x40ba <LCD_vWriteCharacter+0x224>
	else if (__tmp > 65535)
    403c:	6f 81       	ldd	r22, Y+7	; 0x07
    403e:	78 85       	ldd	r23, Y+8	; 0x08
    4040:	89 85       	ldd	r24, Y+9	; 0x09
    4042:	9a 85       	ldd	r25, Y+10	; 0x0a
    4044:	20 e0       	ldi	r18, 0x00	; 0
    4046:	3f ef       	ldi	r19, 0xFF	; 255
    4048:	4f e7       	ldi	r20, 0x7F	; 127
    404a:	57 e4       	ldi	r21, 0x47	; 71
    404c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4050:	18 16       	cp	r1, r24
    4052:	4c f5       	brge	.+82     	; 0x40a6 <LCD_vWriteCharacter+0x210>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4054:	6b 85       	ldd	r22, Y+11	; 0x0b
    4056:	7c 85       	ldd	r23, Y+12	; 0x0c
    4058:	8d 85       	ldd	r24, Y+13	; 0x0d
    405a:	9e 85       	ldd	r25, Y+14	; 0x0e
    405c:	20 e0       	ldi	r18, 0x00	; 0
    405e:	30 e0       	ldi	r19, 0x00	; 0
    4060:	40 e2       	ldi	r20, 0x20	; 32
    4062:	51 e4       	ldi	r21, 0x41	; 65
    4064:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4068:	dc 01       	movw	r26, r24
    406a:	cb 01       	movw	r24, r22
    406c:	bc 01       	movw	r22, r24
    406e:	cd 01       	movw	r24, r26
    4070:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4074:	dc 01       	movw	r26, r24
    4076:	cb 01       	movw	r24, r22
    4078:	9e 83       	std	Y+6, r25	; 0x06
    407a:	8d 83       	std	Y+5, r24	; 0x05
    407c:	0f c0       	rjmp	.+30     	; 0x409c <LCD_vWriteCharacter+0x206>
    407e:	80 e9       	ldi	r24, 0x90	; 144
    4080:	91 e0       	ldi	r25, 0x01	; 1
    4082:	9c 83       	std	Y+4, r25	; 0x04
    4084:	8b 83       	std	Y+3, r24	; 0x03
    4086:	8b 81       	ldd	r24, Y+3	; 0x03
    4088:	9c 81       	ldd	r25, Y+4	; 0x04
    408a:	01 97       	sbiw	r24, 0x01	; 1
    408c:	f1 f7       	brne	.-4      	; 0x408a <LCD_vWriteCharacter+0x1f4>
    408e:	9c 83       	std	Y+4, r25	; 0x04
    4090:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4092:	8d 81       	ldd	r24, Y+5	; 0x05
    4094:	9e 81       	ldd	r25, Y+6	; 0x06
    4096:	01 97       	sbiw	r24, 0x01	; 1
    4098:	9e 83       	std	Y+6, r25	; 0x06
    409a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    409c:	8d 81       	ldd	r24, Y+5	; 0x05
    409e:	9e 81       	ldd	r25, Y+6	; 0x06
    40a0:	00 97       	sbiw	r24, 0x00	; 0
    40a2:	69 f7       	brne	.-38     	; 0x407e <LCD_vWriteCharacter+0x1e8>
    40a4:	14 c0       	rjmp	.+40     	; 0x40ce <LCD_vWriteCharacter+0x238>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40a6:	6f 81       	ldd	r22, Y+7	; 0x07
    40a8:	78 85       	ldd	r23, Y+8	; 0x08
    40aa:	89 85       	ldd	r24, Y+9	; 0x09
    40ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    40ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40b2:	dc 01       	movw	r26, r24
    40b4:	cb 01       	movw	r24, r22
    40b6:	9e 83       	std	Y+6, r25	; 0x06
    40b8:	8d 83       	std	Y+5, r24	; 0x05
    40ba:	8d 81       	ldd	r24, Y+5	; 0x05
    40bc:	9e 81       	ldd	r25, Y+6	; 0x06
    40be:	9a 83       	std	Y+2, r25	; 0x02
    40c0:	89 83       	std	Y+1, r24	; 0x01
    40c2:	89 81       	ldd	r24, Y+1	; 0x01
    40c4:	9a 81       	ldd	r25, Y+2	; 0x02
    40c6:	01 97       	sbiw	r24, 0x01	; 1
    40c8:	f1 f7       	brne	.-4      	; 0x40c6 <LCD_vWriteCharacter+0x230>
    40ca:	9a 83       	std	Y+2, r25	; 0x02
    40cc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	DIO_vSetPinValue(PortB, Pin3, Pin_Low);
    40ce:	81 e0       	ldi	r24, 0x01	; 1
    40d0:	63 e0       	ldi	r22, 0x03	; 3
    40d2:	40 e0       	ldi	r20, 0x00	; 0
    40d4:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <DIO_vSetPinValue>



}
    40d8:	6d 96       	adiw	r28, 0x1d	; 29
    40da:	0f b6       	in	r0, 0x3f	; 63
    40dc:	f8 94       	cli
    40de:	de bf       	out	0x3e, r29	; 62
    40e0:	0f be       	out	0x3f, r0	; 63
    40e2:	cd bf       	out	0x3d, r28	; 61
    40e4:	cf 91       	pop	r28
    40e6:	df 91       	pop	r29
    40e8:	08 95       	ret

000040ea <LCD_vGoTo>:
void LCD_vGoTo(u8 Loc_u8Line, u8 Loc_u8CharPos){
    40ea:	df 93       	push	r29
    40ec:	cf 93       	push	r28
    40ee:	00 d0       	rcall	.+0      	; 0x40f0 <LCD_vGoTo+0x6>
    40f0:	cd b7       	in	r28, 0x3d	; 61
    40f2:	de b7       	in	r29, 0x3e	; 62
    40f4:	89 83       	std	Y+1, r24	; 0x01
    40f6:	6a 83       	std	Y+2, r22	; 0x02
	LCD_vSendCommand(Loc_u8Line|Loc_u8CharPos);
    40f8:	89 81       	ldd	r24, Y+1	; 0x01
    40fa:	9a 81       	ldd	r25, Y+2	; 0x02
    40fc:	89 2b       	or	r24, r25
    40fe:	0e 94 85 19 	call	0x330a	; 0x330a <LCD_vSendCommand>
}
    4102:	0f 90       	pop	r0
    4104:	0f 90       	pop	r0
    4106:	cf 91       	pop	r28
    4108:	df 91       	pop	r29
    410a:	08 95       	ret

0000410c <LCD_vClear>:
void LCD_vClear(){
    410c:	df 93       	push	r29
    410e:	cf 93       	push	r28
    4110:	cd b7       	in	r28, 0x3d	; 61
    4112:	de b7       	in	r29, 0x3e	; 62
    4114:	2e 97       	sbiw	r28, 0x0e	; 14
    4116:	0f b6       	in	r0, 0x3f	; 63
    4118:	f8 94       	cli
    411a:	de bf       	out	0x3e, r29	; 62
    411c:	0f be       	out	0x3f, r0	; 63
    411e:	cd bf       	out	0x3d, r28	; 61
	LCD_vSendCommand(DisplayClear);
    4120:	81 e0       	ldi	r24, 0x01	; 1
    4122:	0e 94 85 19 	call	0x330a	; 0x330a <LCD_vSendCommand>
    4126:	80 e0       	ldi	r24, 0x00	; 0
    4128:	90 e0       	ldi	r25, 0x00	; 0
    412a:	a0 e0       	ldi	r26, 0x00	; 0
    412c:	b0 e4       	ldi	r27, 0x40	; 64
    412e:	8b 87       	std	Y+11, r24	; 0x0b
    4130:	9c 87       	std	Y+12, r25	; 0x0c
    4132:	ad 87       	std	Y+13, r26	; 0x0d
    4134:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4136:	6b 85       	ldd	r22, Y+11	; 0x0b
    4138:	7c 85       	ldd	r23, Y+12	; 0x0c
    413a:	8d 85       	ldd	r24, Y+13	; 0x0d
    413c:	9e 85       	ldd	r25, Y+14	; 0x0e
    413e:	20 e0       	ldi	r18, 0x00	; 0
    4140:	30 e0       	ldi	r19, 0x00	; 0
    4142:	4a e7       	ldi	r20, 0x7A	; 122
    4144:	55 e4       	ldi	r21, 0x45	; 69
    4146:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    414a:	dc 01       	movw	r26, r24
    414c:	cb 01       	movw	r24, r22
    414e:	8f 83       	std	Y+7, r24	; 0x07
    4150:	98 87       	std	Y+8, r25	; 0x08
    4152:	a9 87       	std	Y+9, r26	; 0x09
    4154:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4156:	6f 81       	ldd	r22, Y+7	; 0x07
    4158:	78 85       	ldd	r23, Y+8	; 0x08
    415a:	89 85       	ldd	r24, Y+9	; 0x09
    415c:	9a 85       	ldd	r25, Y+10	; 0x0a
    415e:	20 e0       	ldi	r18, 0x00	; 0
    4160:	30 e0       	ldi	r19, 0x00	; 0
    4162:	40 e8       	ldi	r20, 0x80	; 128
    4164:	5f e3       	ldi	r21, 0x3F	; 63
    4166:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    416a:	88 23       	and	r24, r24
    416c:	2c f4       	brge	.+10     	; 0x4178 <LCD_vClear+0x6c>
		__ticks = 1;
    416e:	81 e0       	ldi	r24, 0x01	; 1
    4170:	90 e0       	ldi	r25, 0x00	; 0
    4172:	9e 83       	std	Y+6, r25	; 0x06
    4174:	8d 83       	std	Y+5, r24	; 0x05
    4176:	3f c0       	rjmp	.+126    	; 0x41f6 <LCD_vClear+0xea>
	else if (__tmp > 65535)
    4178:	6f 81       	ldd	r22, Y+7	; 0x07
    417a:	78 85       	ldd	r23, Y+8	; 0x08
    417c:	89 85       	ldd	r24, Y+9	; 0x09
    417e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4180:	20 e0       	ldi	r18, 0x00	; 0
    4182:	3f ef       	ldi	r19, 0xFF	; 255
    4184:	4f e7       	ldi	r20, 0x7F	; 127
    4186:	57 e4       	ldi	r21, 0x47	; 71
    4188:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    418c:	18 16       	cp	r1, r24
    418e:	4c f5       	brge	.+82     	; 0x41e2 <LCD_vClear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4190:	6b 85       	ldd	r22, Y+11	; 0x0b
    4192:	7c 85       	ldd	r23, Y+12	; 0x0c
    4194:	8d 85       	ldd	r24, Y+13	; 0x0d
    4196:	9e 85       	ldd	r25, Y+14	; 0x0e
    4198:	20 e0       	ldi	r18, 0x00	; 0
    419a:	30 e0       	ldi	r19, 0x00	; 0
    419c:	40 e2       	ldi	r20, 0x20	; 32
    419e:	51 e4       	ldi	r21, 0x41	; 65
    41a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41a4:	dc 01       	movw	r26, r24
    41a6:	cb 01       	movw	r24, r22
    41a8:	bc 01       	movw	r22, r24
    41aa:	cd 01       	movw	r24, r26
    41ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41b0:	dc 01       	movw	r26, r24
    41b2:	cb 01       	movw	r24, r22
    41b4:	9e 83       	std	Y+6, r25	; 0x06
    41b6:	8d 83       	std	Y+5, r24	; 0x05
    41b8:	0f c0       	rjmp	.+30     	; 0x41d8 <LCD_vClear+0xcc>
    41ba:	80 e9       	ldi	r24, 0x90	; 144
    41bc:	91 e0       	ldi	r25, 0x01	; 1
    41be:	9c 83       	std	Y+4, r25	; 0x04
    41c0:	8b 83       	std	Y+3, r24	; 0x03
    41c2:	8b 81       	ldd	r24, Y+3	; 0x03
    41c4:	9c 81       	ldd	r25, Y+4	; 0x04
    41c6:	01 97       	sbiw	r24, 0x01	; 1
    41c8:	f1 f7       	brne	.-4      	; 0x41c6 <LCD_vClear+0xba>
    41ca:	9c 83       	std	Y+4, r25	; 0x04
    41cc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41ce:	8d 81       	ldd	r24, Y+5	; 0x05
    41d0:	9e 81       	ldd	r25, Y+6	; 0x06
    41d2:	01 97       	sbiw	r24, 0x01	; 1
    41d4:	9e 83       	std	Y+6, r25	; 0x06
    41d6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41d8:	8d 81       	ldd	r24, Y+5	; 0x05
    41da:	9e 81       	ldd	r25, Y+6	; 0x06
    41dc:	00 97       	sbiw	r24, 0x00	; 0
    41de:	69 f7       	brne	.-38     	; 0x41ba <LCD_vClear+0xae>
    41e0:	14 c0       	rjmp	.+40     	; 0x420a <LCD_vClear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41e2:	6f 81       	ldd	r22, Y+7	; 0x07
    41e4:	78 85       	ldd	r23, Y+8	; 0x08
    41e6:	89 85       	ldd	r24, Y+9	; 0x09
    41e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    41ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41ee:	dc 01       	movw	r26, r24
    41f0:	cb 01       	movw	r24, r22
    41f2:	9e 83       	std	Y+6, r25	; 0x06
    41f4:	8d 83       	std	Y+5, r24	; 0x05
    41f6:	8d 81       	ldd	r24, Y+5	; 0x05
    41f8:	9e 81       	ldd	r25, Y+6	; 0x06
    41fa:	9a 83       	std	Y+2, r25	; 0x02
    41fc:	89 83       	std	Y+1, r24	; 0x01
    41fe:	89 81       	ldd	r24, Y+1	; 0x01
    4200:	9a 81       	ldd	r25, Y+2	; 0x02
    4202:	01 97       	sbiw	r24, 0x01	; 1
    4204:	f1 f7       	brne	.-4      	; 0x4202 <LCD_vClear+0xf6>
    4206:	9a 83       	std	Y+2, r25	; 0x02
    4208:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    420a:	2e 96       	adiw	r28, 0x0e	; 14
    420c:	0f b6       	in	r0, 0x3f	; 63
    420e:	f8 94       	cli
    4210:	de bf       	out	0x3e, r29	; 62
    4212:	0f be       	out	0x3f, r0	; 63
    4214:	cd bf       	out	0x3d, r28	; 61
    4216:	cf 91       	pop	r28
    4218:	df 91       	pop	r29
    421a:	08 95       	ret

0000421c <LCD_vWriteString>:
void LCD_vWriteString(u8 *ptr){
    421c:	df 93       	push	r29
    421e:	cf 93       	push	r28
    4220:	00 d0       	rcall	.+0      	; 0x4222 <LCD_vWriteString+0x6>
    4222:	0f 92       	push	r0
    4224:	cd b7       	in	r28, 0x3d	; 61
    4226:	de b7       	in	r29, 0x3e	; 62
    4228:	9b 83       	std	Y+3, r25	; 0x03
    422a:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
    422c:	19 82       	std	Y+1, r1	; 0x01
    422e:	0e c0       	rjmp	.+28     	; 0x424c <LCD_vWriteString+0x30>
	while(ptr[i]!='\0'){
		LCD_vWriteCharacter(ptr[i]);
    4230:	89 81       	ldd	r24, Y+1	; 0x01
    4232:	28 2f       	mov	r18, r24
    4234:	30 e0       	ldi	r19, 0x00	; 0
    4236:	8a 81       	ldd	r24, Y+2	; 0x02
    4238:	9b 81       	ldd	r25, Y+3	; 0x03
    423a:	fc 01       	movw	r30, r24
    423c:	e2 0f       	add	r30, r18
    423e:	f3 1f       	adc	r31, r19
    4240:	80 81       	ld	r24, Z
    4242:	0e 94 4b 1f 	call	0x3e96	; 0x3e96 <LCD_vWriteCharacter>
		i++;
    4246:	89 81       	ldd	r24, Y+1	; 0x01
    4248:	8f 5f       	subi	r24, 0xFF	; 255
    424a:	89 83       	std	Y+1, r24	; 0x01
	LCD_vSendCommand(DisplayClear);
	_delay_ms(2);
}
void LCD_vWriteString(u8 *ptr){
	u8 i=0;
	while(ptr[i]!='\0'){
    424c:	89 81       	ldd	r24, Y+1	; 0x01
    424e:	28 2f       	mov	r18, r24
    4250:	30 e0       	ldi	r19, 0x00	; 0
    4252:	8a 81       	ldd	r24, Y+2	; 0x02
    4254:	9b 81       	ldd	r25, Y+3	; 0x03
    4256:	fc 01       	movw	r30, r24
    4258:	e2 0f       	add	r30, r18
    425a:	f3 1f       	adc	r31, r19
    425c:	80 81       	ld	r24, Z
    425e:	88 23       	and	r24, r24
    4260:	39 f7       	brne	.-50     	; 0x4230 <LCD_vWriteString+0x14>
		LCD_vWriteCharacter(ptr[i]);
		i++;
	}
}
    4262:	0f 90       	pop	r0
    4264:	0f 90       	pop	r0
    4266:	0f 90       	pop	r0
    4268:	cf 91       	pop	r28
    426a:	df 91       	pop	r29
    426c:	08 95       	ret

0000426e <LCD_vCustomCharacter>:
void LCD_vCustomCharacter(u8 *ptr,u8 Location){
    426e:	df 93       	push	r29
    4270:	cf 93       	push	r28
    4272:	00 d0       	rcall	.+0      	; 0x4274 <LCD_vCustomCharacter+0x6>
    4274:	00 d0       	rcall	.+0      	; 0x4276 <LCD_vCustomCharacter+0x8>
    4276:	cd b7       	in	r28, 0x3d	; 61
    4278:	de b7       	in	r29, 0x3e	; 62
    427a:	9b 83       	std	Y+3, r25	; 0x03
    427c:	8a 83       	std	Y+2, r24	; 0x02
    427e:	6c 83       	std	Y+4, r22	; 0x04
	u8 i;
	LCD_vSendCommand((0x40)+(Location*8));
    4280:	8c 81       	ldd	r24, Y+4	; 0x04
    4282:	88 2f       	mov	r24, r24
    4284:	90 e0       	ldi	r25, 0x00	; 0
    4286:	08 96       	adiw	r24, 0x08	; 8
    4288:	88 0f       	add	r24, r24
    428a:	99 1f       	adc	r25, r25
    428c:	88 0f       	add	r24, r24
    428e:	99 1f       	adc	r25, r25
    4290:	88 0f       	add	r24, r24
    4292:	99 1f       	adc	r25, r25
    4294:	0e 94 85 19 	call	0x330a	; 0x330a <LCD_vSendCommand>
	for(i=0;i<8;i++){
    4298:	19 82       	std	Y+1, r1	; 0x01
    429a:	0e c0       	rjmp	.+28     	; 0x42b8 <LCD_vCustomCharacter+0x4a>
		LCD_vWriteCharacter(ptr[i]);
    429c:	89 81       	ldd	r24, Y+1	; 0x01
    429e:	28 2f       	mov	r18, r24
    42a0:	30 e0       	ldi	r19, 0x00	; 0
    42a2:	8a 81       	ldd	r24, Y+2	; 0x02
    42a4:	9b 81       	ldd	r25, Y+3	; 0x03
    42a6:	fc 01       	movw	r30, r24
    42a8:	e2 0f       	add	r30, r18
    42aa:	f3 1f       	adc	r31, r19
    42ac:	80 81       	ld	r24, Z
    42ae:	0e 94 4b 1f 	call	0x3e96	; 0x3e96 <LCD_vWriteCharacter>
	}
}
void LCD_vCustomCharacter(u8 *ptr,u8 Location){
	u8 i;
	LCD_vSendCommand((0x40)+(Location*8));
	for(i=0;i<8;i++){
    42b2:	89 81       	ldd	r24, Y+1	; 0x01
    42b4:	8f 5f       	subi	r24, 0xFF	; 255
    42b6:	89 83       	std	Y+1, r24	; 0x01
    42b8:	89 81       	ldd	r24, Y+1	; 0x01
    42ba:	88 30       	cpi	r24, 0x08	; 8
    42bc:	78 f3       	brcs	.-34     	; 0x429c <LCD_vCustomCharacter+0x2e>
		LCD_vWriteCharacter(ptr[i]);
	}


}
    42be:	0f 90       	pop	r0
    42c0:	0f 90       	pop	r0
    42c2:	0f 90       	pop	r0
    42c4:	0f 90       	pop	r0
    42c6:	cf 91       	pop	r28
    42c8:	df 91       	pop	r29
    42ca:	08 95       	ret

000042cc <LCD_vCLearOneChar>:
void LCD_vCLearOneChar(u8 Loc_u8Line,u8 Loc_u8CharPos){
    42cc:	df 93       	push	r29
    42ce:	cf 93       	push	r28
    42d0:	cd b7       	in	r28, 0x3d	; 61
    42d2:	de b7       	in	r29, 0x3e	; 62
    42d4:	2a 97       	sbiw	r28, 0x0a	; 10
    42d6:	0f b6       	in	r0, 0x3f	; 63
    42d8:	f8 94       	cli
    42da:	de bf       	out	0x3e, r29	; 62
    42dc:	0f be       	out	0x3f, r0	; 63
    42de:	cd bf       	out	0x3d, r28	; 61
    42e0:	89 87       	std	Y+9, r24	; 0x09
    42e2:	6a 87       	std	Y+10, r22	; 0x0a
	u8 chr0[8]={0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
    42e4:	88 e0       	ldi	r24, 0x08	; 8
    42e6:	fe 01       	movw	r30, r28
    42e8:	31 96       	adiw	r30, 0x01	; 1
    42ea:	df 01       	movw	r26, r30
    42ec:	98 2f       	mov	r25, r24
    42ee:	1d 92       	st	X+, r1
    42f0:	9a 95       	dec	r25
    42f2:	e9 f7       	brne	.-6      	; 0x42ee <LCD_vCLearOneChar+0x22>
	LCD_vCustomCharacter(chr0,1);
    42f4:	ce 01       	movw	r24, r28
    42f6:	01 96       	adiw	r24, 0x01	; 1
    42f8:	61 e0       	ldi	r22, 0x01	; 1
    42fa:	0e 94 37 21 	call	0x426e	; 0x426e <LCD_vCustomCharacter>
	LCD_vGoTo(Loc_u8Line,Loc_u8CharPos);
    42fe:	89 85       	ldd	r24, Y+9	; 0x09
    4300:	6a 85       	ldd	r22, Y+10	; 0x0a
    4302:	0e 94 75 20 	call	0x40ea	; 0x40ea <LCD_vGoTo>
	LCD_vWriteCharacter(1);
    4306:	81 e0       	ldi	r24, 0x01	; 1
    4308:	0e 94 4b 1f 	call	0x3e96	; 0x3e96 <LCD_vWriteCharacter>
}
    430c:	2a 96       	adiw	r28, 0x0a	; 10
    430e:	0f b6       	in	r0, 0x3f	; 63
    4310:	f8 94       	cli
    4312:	de bf       	out	0x3e, r29	; 62
    4314:	0f be       	out	0x3f, r0	; 63
    4316:	cd bf       	out	0x3d, r28	; 61
    4318:	cf 91       	pop	r28
    431a:	df 91       	pop	r29
    431c:	08 95       	ret

0000431e <KAYPAD_vInit>:
* \Parameters (in) : None
* \Parameters (out): None
* \Return value:   : void  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void KAYPAD_vInit(){
    431e:	df 93       	push	r29
    4320:	cf 93       	push	r28
    4322:	cd b7       	in	r28, 0x3d	; 61
    4324:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPortDirection(KEYPAD_PORT,KEYPAD_DIRECTION);
    4326:	81 e0       	ldi	r24, 0x01	; 1
    4328:	6f e0       	ldi	r22, 0x0F	; 15
    432a:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <DIO_vSetPortDirection>
	DIO_vSetPortValue(KEYPAD_PORT,KEYPAD_VALUE);
    432e:	81 e0       	ldi	r24, 0x01	; 1
    4330:	6f ef       	ldi	r22, 0xFF	; 255
    4332:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <DIO_vSetPortValue>

}
    4336:	cf 91       	pop	r28
    4338:	df 91       	pop	r29
    433a:	08 95       	ret

0000433c <KAYPAD_u8GetKey>:
* \Parameters (in) : None
* \Parameters (out): None
* \Return value:   : unsigned char  E_OK
*                                    E_NOT_OK
*******************************************************************************/
u8 KAYPAD_u8GetKey(){
    433c:	df 93       	push	r29
    433e:	cf 93       	push	r28
    4340:	cd b7       	in	r28, 0x3d	; 61
    4342:	de b7       	in	r29, 0x3e	; 62
    4344:	65 97       	sbiw	r28, 0x15	; 21
    4346:	0f b6       	in	r0, 0x3f	; 63
    4348:	f8 94       	cli
    434a:	de bf       	out	0x3e, r29	; 62
    434c:	0f be       	out	0x3f, r0	; 63
    434e:	cd bf       	out	0x3d, r28	; 61
	u8 Loc_u8RowCounter, Loc_u8CoulomsCounter;
	u8 row , coulom, temp;
	coulom=3;
    4350:	83 e0       	ldi	r24, 0x03	; 3
    4352:	89 8b       	std	Y+17, r24	; 0x11
	u8 value=9;
    4354:	89 e0       	ldi	r24, 0x09	; 9
    4356:	8f 87       	std	Y+15, r24	; 0x0f
	for(Loc_u8CoulomsCounter=0;Loc_u8CoulomsCounter<4;Loc_u8CoulomsCounter++){
    4358:	1b 8a       	std	Y+19, r1	; 0x13
    435a:	b7 c0       	rjmp	.+366    	; 0x44ca <KAYPAD_u8GetKey+0x18e>
		DIO_vSetPinValue(KEYPAD_PORT,Loc_u8CoulomsCounter,Pin_Low);
    435c:	81 e0       	ldi	r24, 0x01	; 1
    435e:	6b 89       	ldd	r22, Y+19	; 0x13
    4360:	40 e0       	ldi	r20, 0x00	; 0
    4362:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <DIO_vSetPinValue>
		row=3;
    4366:	83 e0       	ldi	r24, 0x03	; 3
    4368:	8a 8b       	std	Y+18, r24	; 0x12
		for(Loc_u8RowCounter=4;Loc_u8RowCounter<8;Loc_u8RowCounter++){
    436a:	84 e0       	ldi	r24, 0x04	; 4
    436c:	8c 8b       	std	Y+20, r24	; 0x14
    436e:	9e c0       	rjmp	.+316    	; 0x44ac <KAYPAD_u8GetKey+0x170>
			temp=DIO_u8PGetPinValue(KEYPAD_PORT,Loc_u8RowCounter);
    4370:	81 e0       	ldi	r24, 0x01	; 1
    4372:	6c 89       	ldd	r22, Y+20	; 0x14
    4374:	0e 94 57 12 	call	0x24ae	; 0x24ae <DIO_u8PGetPinValue>
    4378:	88 8b       	std	Y+16, r24	; 0x10
			if(temp==0){
    437a:	88 89       	ldd	r24, Y+16	; 0x10
    437c:	88 23       	and	r24, r24
    437e:	09 f0       	breq	.+2      	; 0x4382 <KAYPAD_u8GetKey+0x46>
    4380:	8f c0       	rjmp	.+286    	; 0x44a0 <KAYPAD_u8GetKey+0x164>
    4382:	80 e0       	ldi	r24, 0x00	; 0
    4384:	90 e0       	ldi	r25, 0x00	; 0
    4386:	a8 ec       	ldi	r26, 0xC8	; 200
    4388:	b1 e4       	ldi	r27, 0x41	; 65
    438a:	8b 87       	std	Y+11, r24	; 0x0b
    438c:	9c 87       	std	Y+12, r25	; 0x0c
    438e:	ad 87       	std	Y+13, r26	; 0x0d
    4390:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4392:	6b 85       	ldd	r22, Y+11	; 0x0b
    4394:	7c 85       	ldd	r23, Y+12	; 0x0c
    4396:	8d 85       	ldd	r24, Y+13	; 0x0d
    4398:	9e 85       	ldd	r25, Y+14	; 0x0e
    439a:	20 e0       	ldi	r18, 0x00	; 0
    439c:	30 e0       	ldi	r19, 0x00	; 0
    439e:	4a e7       	ldi	r20, 0x7A	; 122
    43a0:	55 e4       	ldi	r21, 0x45	; 69
    43a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43a6:	dc 01       	movw	r26, r24
    43a8:	cb 01       	movw	r24, r22
    43aa:	8f 83       	std	Y+7, r24	; 0x07
    43ac:	98 87       	std	Y+8, r25	; 0x08
    43ae:	a9 87       	std	Y+9, r26	; 0x09
    43b0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    43b2:	6f 81       	ldd	r22, Y+7	; 0x07
    43b4:	78 85       	ldd	r23, Y+8	; 0x08
    43b6:	89 85       	ldd	r24, Y+9	; 0x09
    43b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    43ba:	20 e0       	ldi	r18, 0x00	; 0
    43bc:	30 e0       	ldi	r19, 0x00	; 0
    43be:	40 e8       	ldi	r20, 0x80	; 128
    43c0:	5f e3       	ldi	r21, 0x3F	; 63
    43c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    43c6:	88 23       	and	r24, r24
    43c8:	2c f4       	brge	.+10     	; 0x43d4 <KAYPAD_u8GetKey+0x98>
		__ticks = 1;
    43ca:	81 e0       	ldi	r24, 0x01	; 1
    43cc:	90 e0       	ldi	r25, 0x00	; 0
    43ce:	9e 83       	std	Y+6, r25	; 0x06
    43d0:	8d 83       	std	Y+5, r24	; 0x05
    43d2:	3f c0       	rjmp	.+126    	; 0x4452 <KAYPAD_u8GetKey+0x116>
	else if (__tmp > 65535)
    43d4:	6f 81       	ldd	r22, Y+7	; 0x07
    43d6:	78 85       	ldd	r23, Y+8	; 0x08
    43d8:	89 85       	ldd	r24, Y+9	; 0x09
    43da:	9a 85       	ldd	r25, Y+10	; 0x0a
    43dc:	20 e0       	ldi	r18, 0x00	; 0
    43de:	3f ef       	ldi	r19, 0xFF	; 255
    43e0:	4f e7       	ldi	r20, 0x7F	; 127
    43e2:	57 e4       	ldi	r21, 0x47	; 71
    43e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    43e8:	18 16       	cp	r1, r24
    43ea:	4c f5       	brge	.+82     	; 0x443e <KAYPAD_u8GetKey+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    43ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    43f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    43f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    43f4:	20 e0       	ldi	r18, 0x00	; 0
    43f6:	30 e0       	ldi	r19, 0x00	; 0
    43f8:	40 e2       	ldi	r20, 0x20	; 32
    43fa:	51 e4       	ldi	r21, 0x41	; 65
    43fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4400:	dc 01       	movw	r26, r24
    4402:	cb 01       	movw	r24, r22
    4404:	bc 01       	movw	r22, r24
    4406:	cd 01       	movw	r24, r26
    4408:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    440c:	dc 01       	movw	r26, r24
    440e:	cb 01       	movw	r24, r22
    4410:	9e 83       	std	Y+6, r25	; 0x06
    4412:	8d 83       	std	Y+5, r24	; 0x05
    4414:	0f c0       	rjmp	.+30     	; 0x4434 <KAYPAD_u8GetKey+0xf8>
    4416:	80 e9       	ldi	r24, 0x90	; 144
    4418:	91 e0       	ldi	r25, 0x01	; 1
    441a:	9c 83       	std	Y+4, r25	; 0x04
    441c:	8b 83       	std	Y+3, r24	; 0x03
    441e:	8b 81       	ldd	r24, Y+3	; 0x03
    4420:	9c 81       	ldd	r25, Y+4	; 0x04
    4422:	01 97       	sbiw	r24, 0x01	; 1
    4424:	f1 f7       	brne	.-4      	; 0x4422 <KAYPAD_u8GetKey+0xe6>
    4426:	9c 83       	std	Y+4, r25	; 0x04
    4428:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    442a:	8d 81       	ldd	r24, Y+5	; 0x05
    442c:	9e 81       	ldd	r25, Y+6	; 0x06
    442e:	01 97       	sbiw	r24, 0x01	; 1
    4430:	9e 83       	std	Y+6, r25	; 0x06
    4432:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4434:	8d 81       	ldd	r24, Y+5	; 0x05
    4436:	9e 81       	ldd	r25, Y+6	; 0x06
    4438:	00 97       	sbiw	r24, 0x00	; 0
    443a:	69 f7       	brne	.-38     	; 0x4416 <KAYPAD_u8GetKey+0xda>
    443c:	14 c0       	rjmp	.+40     	; 0x4466 <KAYPAD_u8GetKey+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    443e:	6f 81       	ldd	r22, Y+7	; 0x07
    4440:	78 85       	ldd	r23, Y+8	; 0x08
    4442:	89 85       	ldd	r24, Y+9	; 0x09
    4444:	9a 85       	ldd	r25, Y+10	; 0x0a
    4446:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    444a:	dc 01       	movw	r26, r24
    444c:	cb 01       	movw	r24, r22
    444e:	9e 83       	std	Y+6, r25	; 0x06
    4450:	8d 83       	std	Y+5, r24	; 0x05
    4452:	8d 81       	ldd	r24, Y+5	; 0x05
    4454:	9e 81       	ldd	r25, Y+6	; 0x06
    4456:	9a 83       	std	Y+2, r25	; 0x02
    4458:	89 83       	std	Y+1, r24	; 0x01
    445a:	89 81       	ldd	r24, Y+1	; 0x01
    445c:	9a 81       	ldd	r25, Y+2	; 0x02
    445e:	01 97       	sbiw	r24, 0x01	; 1
    4460:	f1 f7       	brne	.-4      	; 0x445e <KAYPAD_u8GetKey+0x122>
    4462:	9a 83       	std	Y+2, r25	; 0x02
    4464:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(25);
				temp=DIO_u8PGetPinValue(KEYPAD_PORT,Loc_u8RowCounter);
    4466:	81 e0       	ldi	r24, 0x01	; 1
    4468:	6c 89       	ldd	r22, Y+20	; 0x14
    446a:	0e 94 57 12 	call	0x24ae	; 0x24ae <DIO_u8PGetPinValue>
    446e:	88 8b       	std	Y+16, r24	; 0x10
				if(temp==0){
    4470:	88 89       	ldd	r24, Y+16	; 0x10
    4472:	88 23       	and	r24, r24
    4474:	a9 f4       	brne	.+42     	; 0x44a0 <KAYPAD_u8GetKey+0x164>
					value=arr[row][coulom];
    4476:	8a 89       	ldd	r24, Y+18	; 0x12
    4478:	48 2f       	mov	r20, r24
    447a:	50 e0       	ldi	r21, 0x00	; 0
    447c:	89 89       	ldd	r24, Y+17	; 0x11
    447e:	28 2f       	mov	r18, r24
    4480:	30 e0       	ldi	r19, 0x00	; 0
    4482:	ca 01       	movw	r24, r20
    4484:	88 0f       	add	r24, r24
    4486:	99 1f       	adc	r25, r25
    4488:	88 0f       	add	r24, r24
    448a:	99 1f       	adc	r25, r25
    448c:	82 0f       	add	r24, r18
    448e:	93 1f       	adc	r25, r19
    4490:	fc 01       	movw	r30, r24
    4492:	e3 55       	subi	r30, 0x53	; 83
    4494:	ff 4f       	sbci	r31, 0xFF	; 255
    4496:	80 81       	ld	r24, Z
    4498:	8f 87       	std	Y+15, r24	; 0x0f
					return value;
    449a:	8f 85       	ldd	r24, Y+15	; 0x0f
    449c:	8d 8b       	std	Y+21, r24	; 0x15
    449e:	1b c0       	rjmp	.+54     	; 0x44d6 <KAYPAD_u8GetKey+0x19a>
				}
			}
			row--;
    44a0:	8a 89       	ldd	r24, Y+18	; 0x12
    44a2:	81 50       	subi	r24, 0x01	; 1
    44a4:	8a 8b       	std	Y+18, r24	; 0x12
	coulom=3;
	u8 value=9;
	for(Loc_u8CoulomsCounter=0;Loc_u8CoulomsCounter<4;Loc_u8CoulomsCounter++){
		DIO_vSetPinValue(KEYPAD_PORT,Loc_u8CoulomsCounter,Pin_Low);
		row=3;
		for(Loc_u8RowCounter=4;Loc_u8RowCounter<8;Loc_u8RowCounter++){
    44a6:	8c 89       	ldd	r24, Y+20	; 0x14
    44a8:	8f 5f       	subi	r24, 0xFF	; 255
    44aa:	8c 8b       	std	Y+20, r24	; 0x14
    44ac:	8c 89       	ldd	r24, Y+20	; 0x14
    44ae:	88 30       	cpi	r24, 0x08	; 8
    44b0:	08 f4       	brcc	.+2      	; 0x44b4 <KAYPAD_u8GetKey+0x178>
    44b2:	5e cf       	rjmp	.-324    	; 0x4370 <KAYPAD_u8GetKey+0x34>
					return value;
				}
			}
			row--;
		}
		coulom--;
    44b4:	89 89       	ldd	r24, Y+17	; 0x11
    44b6:	81 50       	subi	r24, 0x01	; 1
    44b8:	89 8b       	std	Y+17, r24	; 0x11
		DIO_vSetPinValue(KEYPAD_PORT,Loc_u8CoulomsCounter,Pin_High);
    44ba:	81 e0       	ldi	r24, 0x01	; 1
    44bc:	6b 89       	ldd	r22, Y+19	; 0x13
    44be:	41 e0       	ldi	r20, 0x01	; 1
    44c0:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <DIO_vSetPinValue>
u8 KAYPAD_u8GetKey(){
	u8 Loc_u8RowCounter, Loc_u8CoulomsCounter;
	u8 row , coulom, temp;
	coulom=3;
	u8 value=9;
	for(Loc_u8CoulomsCounter=0;Loc_u8CoulomsCounter<4;Loc_u8CoulomsCounter++){
    44c4:	8b 89       	ldd	r24, Y+19	; 0x13
    44c6:	8f 5f       	subi	r24, 0xFF	; 255
    44c8:	8b 8b       	std	Y+19, r24	; 0x13
    44ca:	8b 89       	ldd	r24, Y+19	; 0x13
    44cc:	84 30       	cpi	r24, 0x04	; 4
    44ce:	08 f4       	brcc	.+2      	; 0x44d2 <KAYPAD_u8GetKey+0x196>
    44d0:	45 cf       	rjmp	.-374    	; 0x435c <KAYPAD_u8GetKey+0x20>
		}
		coulom--;
		DIO_vSetPinValue(KEYPAD_PORT,Loc_u8CoulomsCounter,Pin_High);
	}

	return 0xff;
    44d2:	8f ef       	ldi	r24, 0xFF	; 255
    44d4:	8d 8b       	std	Y+21, r24	; 0x15
    44d6:	8d 89       	ldd	r24, Y+21	; 0x15
}
    44d8:	65 96       	adiw	r28, 0x15	; 21
    44da:	0f b6       	in	r0, 0x3f	; 63
    44dc:	f8 94       	cli
    44de:	de bf       	out	0x3e, r29	; 62
    44e0:	0f be       	out	0x3f, r0	; 63
    44e2:	cd bf       	out	0x3d, r28	; 61
    44e4:	cf 91       	pop	r28
    44e6:	df 91       	pop	r29
    44e8:	08 95       	ret

000044ea <H_Bridge_vInit>:
 *
 *  Created on: Jan 18, 2023
 *      Author: a7med
 */
#include "H_Bridge.h"
void H_Bridge_vInit(){
    44ea:	df 93       	push	r29
    44ec:	cf 93       	push	r28
    44ee:	cd b7       	in	r28, 0x3d	; 61
    44f0:	de b7       	in	r29, 0x3e	; 62
	//----------- on this part motor1 is connected to 3y and VCC and motor2 is connected to 4y and Ground
	SET_BIT(DDRD,5);	//---- EN1
    44f2:	a1 e3       	ldi	r26, 0x31	; 49
    44f4:	b0 e0       	ldi	r27, 0x00	; 0
    44f6:	e1 e3       	ldi	r30, 0x31	; 49
    44f8:	f0 e0       	ldi	r31, 0x00	; 0
    44fa:	80 81       	ld	r24, Z
    44fc:	80 62       	ori	r24, 0x20	; 32
    44fe:	8c 93       	st	X, r24
	SET_BIT(DDRC,5);	//--- 3A
    4500:	a4 e3       	ldi	r26, 0x34	; 52
    4502:	b0 e0       	ldi	r27, 0x00	; 0
    4504:	e4 e3       	ldi	r30, 0x34	; 52
    4506:	f0 e0       	ldi	r31, 0x00	; 0
    4508:	80 81       	ld	r24, Z
    450a:	80 62       	ori	r24, 0x20	; 32
    450c:	8c 93       	st	X, r24
	SET_BIT(DDRC,6);	//--- 4A
    450e:	a4 e3       	ldi	r26, 0x34	; 52
    4510:	b0 e0       	ldi	r27, 0x00	; 0
    4512:	e4 e3       	ldi	r30, 0x34	; 52
    4514:	f0 e0       	ldi	r31, 0x00	; 0
    4516:	80 81       	ld	r24, Z
    4518:	80 64       	ori	r24, 0x40	; 64
    451a:	8c 93       	st	X, r24
	//------- on this part the two motors are connected to 1Y and 2Y
	SET_BIT(DDRD,4);	//--- EN2
    451c:	a1 e3       	ldi	r26, 0x31	; 49
    451e:	b0 e0       	ldi	r27, 0x00	; 0
    4520:	e1 e3       	ldi	r30, 0x31	; 49
    4522:	f0 e0       	ldi	r31, 0x00	; 0
    4524:	80 81       	ld	r24, Z
    4526:	80 61       	ori	r24, 0x10	; 16
    4528:	8c 93       	st	X, r24
	SET_BIT(DDRC,3);	//--- 1A
    452a:	a4 e3       	ldi	r26, 0x34	; 52
    452c:	b0 e0       	ldi	r27, 0x00	; 0
    452e:	e4 e3       	ldi	r30, 0x34	; 52
    4530:	f0 e0       	ldi	r31, 0x00	; 0
    4532:	80 81       	ld	r24, Z
    4534:	88 60       	ori	r24, 0x08	; 8
    4536:	8c 93       	st	X, r24
	SET_BIT(DDRC,4);	//--- 2A
    4538:	a4 e3       	ldi	r26, 0x34	; 52
    453a:	b0 e0       	ldi	r27, 0x00	; 0
    453c:	e4 e3       	ldi	r30, 0x34	; 52
    453e:	f0 e0       	ldi	r31, 0x00	; 0
    4540:	80 81       	ld	r24, Z
    4542:	80 61       	ori	r24, 0x10	; 16
    4544:	8c 93       	st	X, r24
}
    4546:	cf 91       	pop	r28
    4548:	df 91       	pop	r29
    454a:	08 95       	ret

0000454c <H_Bridge_vRunM1AndStopM2>:
/* ---- Following 3 Functions if for ConnectionsToGroundAndVoltage ----*/
void H_Bridge_vRunM1AndStopM2(){
    454c:	df 93       	push	r29
    454e:	cf 93       	push	r28
    4550:	cd b7       	in	r28, 0x3d	; 61
    4552:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(PORTD,5);	//---EN1 High
    4554:	a2 e3       	ldi	r26, 0x32	; 50
    4556:	b0 e0       	ldi	r27, 0x00	; 0
    4558:	e2 e3       	ldi	r30, 0x32	; 50
    455a:	f0 e0       	ldi	r31, 0x00	; 0
    455c:	80 81       	ld	r24, Z
    455e:	80 62       	ori	r24, 0x20	; 32
    4560:	8c 93       	st	X, r24
	CLR_BIT(PORTC,5);	//---3A Low
    4562:	a5 e3       	ldi	r26, 0x35	; 53
    4564:	b0 e0       	ldi	r27, 0x00	; 0
    4566:	e5 e3       	ldi	r30, 0x35	; 53
    4568:	f0 e0       	ldi	r31, 0x00	; 0
    456a:	80 81       	ld	r24, Z
    456c:	8f 7d       	andi	r24, 0xDF	; 223
    456e:	8c 93       	st	X, r24
	CLR_BIT(PORTC,6);	//---4A Low
    4570:	a5 e3       	ldi	r26, 0x35	; 53
    4572:	b0 e0       	ldi	r27, 0x00	; 0
    4574:	e5 e3       	ldi	r30, 0x35	; 53
    4576:	f0 e0       	ldi	r31, 0x00	; 0
    4578:	80 81       	ld	r24, Z
    457a:	8f 7b       	andi	r24, 0xBF	; 191
    457c:	8c 93       	st	X, r24
}
    457e:	cf 91       	pop	r28
    4580:	df 91       	pop	r29
    4582:	08 95       	ret

00004584 <H_Bridge_vRunM2AndStopM1>:
void H_Bridge_vRunM2AndStopM1(){
    4584:	df 93       	push	r29
    4586:	cf 93       	push	r28
    4588:	cd b7       	in	r28, 0x3d	; 61
    458a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(PORTD,5);	//---EN1 High
    458c:	a2 e3       	ldi	r26, 0x32	; 50
    458e:	b0 e0       	ldi	r27, 0x00	; 0
    4590:	e2 e3       	ldi	r30, 0x32	; 50
    4592:	f0 e0       	ldi	r31, 0x00	; 0
    4594:	80 81       	ld	r24, Z
    4596:	80 62       	ori	r24, 0x20	; 32
    4598:	8c 93       	st	X, r24
	SET_BIT(PORTC,5);	//---3A High
    459a:	a5 e3       	ldi	r26, 0x35	; 53
    459c:	b0 e0       	ldi	r27, 0x00	; 0
    459e:	e5 e3       	ldi	r30, 0x35	; 53
    45a0:	f0 e0       	ldi	r31, 0x00	; 0
    45a2:	80 81       	ld	r24, Z
    45a4:	80 62       	ori	r24, 0x20	; 32
    45a6:	8c 93       	st	X, r24
	SET_BIT(PORTC,6);	//---4A High
    45a8:	a5 e3       	ldi	r26, 0x35	; 53
    45aa:	b0 e0       	ldi	r27, 0x00	; 0
    45ac:	e5 e3       	ldi	r30, 0x35	; 53
    45ae:	f0 e0       	ldi	r31, 0x00	; 0
    45b0:	80 81       	ld	r24, Z
    45b2:	80 64       	ori	r24, 0x40	; 64
    45b4:	8c 93       	st	X, r24
}
    45b6:	cf 91       	pop	r28
    45b8:	df 91       	pop	r29
    45ba:	08 95       	ret

000045bc <H_Bridge_vM1AndM2FreeRuningStop>:
void H_Bridge_vM1AndM2FreeRuningStop(){
    45bc:	df 93       	push	r29
    45be:	cf 93       	push	r28
    45c0:	cd b7       	in	r28, 0x3d	; 61
    45c2:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(PORTD,5);	//---EN1 Low
    45c4:	a2 e3       	ldi	r26, 0x32	; 50
    45c6:	b0 e0       	ldi	r27, 0x00	; 0
    45c8:	e2 e3       	ldi	r30, 0x32	; 50
    45ca:	f0 e0       	ldi	r31, 0x00	; 0
    45cc:	80 81       	ld	r24, Z
    45ce:	8f 7d       	andi	r24, 0xDF	; 223
    45d0:	8c 93       	st	X, r24
}
    45d2:	cf 91       	pop	r28
    45d4:	df 91       	pop	r29
    45d6:	08 95       	ret

000045d8 <H_Bridge_vM1AndM2TurnRight>:
/* ---- Following Functions if for BidirectionalDCMotorControl ----*/
void H_Bridge_vM1AndM2TurnRight(){
    45d8:	df 93       	push	r29
    45da:	cf 93       	push	r28
    45dc:	cd b7       	in	r28, 0x3d	; 61
    45de:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(PORTD,4);	//--- EN2 High
    45e0:	a2 e3       	ldi	r26, 0x32	; 50
    45e2:	b0 e0       	ldi	r27, 0x00	; 0
    45e4:	e2 e3       	ldi	r30, 0x32	; 50
    45e6:	f0 e0       	ldi	r31, 0x00	; 0
    45e8:	80 81       	ld	r24, Z
    45ea:	80 61       	ori	r24, 0x10	; 16
    45ec:	8c 93       	st	X, r24
	CLR_BIT(PORTC,3);	//--- 1A Low
    45ee:	a5 e3       	ldi	r26, 0x35	; 53
    45f0:	b0 e0       	ldi	r27, 0x00	; 0
    45f2:	e5 e3       	ldi	r30, 0x35	; 53
    45f4:	f0 e0       	ldi	r31, 0x00	; 0
    45f6:	80 81       	ld	r24, Z
    45f8:	87 7f       	andi	r24, 0xF7	; 247
    45fa:	8c 93       	st	X, r24
	SET_BIT(PORTC,4);	//--- 2A High
    45fc:	a5 e3       	ldi	r26, 0x35	; 53
    45fe:	b0 e0       	ldi	r27, 0x00	; 0
    4600:	e5 e3       	ldi	r30, 0x35	; 53
    4602:	f0 e0       	ldi	r31, 0x00	; 0
    4604:	80 81       	ld	r24, Z
    4606:	80 61       	ori	r24, 0x10	; 16
    4608:	8c 93       	st	X, r24
}
    460a:	cf 91       	pop	r28
    460c:	df 91       	pop	r29
    460e:	08 95       	ret

00004610 <H_Bridge_vM1AndM2TurnLeft>:
void H_Bridge_vM1AndM2TurnLeft(){
    4610:	df 93       	push	r29
    4612:	cf 93       	push	r28
    4614:	cd b7       	in	r28, 0x3d	; 61
    4616:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(PORTD,4);	//--- EN2 High
    4618:	a2 e3       	ldi	r26, 0x32	; 50
    461a:	b0 e0       	ldi	r27, 0x00	; 0
    461c:	e2 e3       	ldi	r30, 0x32	; 50
    461e:	f0 e0       	ldi	r31, 0x00	; 0
    4620:	80 81       	ld	r24, Z
    4622:	80 61       	ori	r24, 0x10	; 16
    4624:	8c 93       	st	X, r24
	SET_BIT(PORTC,3);	//--- 1A High
    4626:	a5 e3       	ldi	r26, 0x35	; 53
    4628:	b0 e0       	ldi	r27, 0x00	; 0
    462a:	e5 e3       	ldi	r30, 0x35	; 53
    462c:	f0 e0       	ldi	r31, 0x00	; 0
    462e:	80 81       	ld	r24, Z
    4630:	88 60       	ori	r24, 0x08	; 8
    4632:	8c 93       	st	X, r24
	CLR_BIT(PORTC,4);	//--- 2A Low
    4634:	a5 e3       	ldi	r26, 0x35	; 53
    4636:	b0 e0       	ldi	r27, 0x00	; 0
    4638:	e5 e3       	ldi	r30, 0x35	; 53
    463a:	f0 e0       	ldi	r31, 0x00	; 0
    463c:	80 81       	ld	r24, Z
    463e:	8f 7e       	andi	r24, 0xEF	; 239
    4640:	8c 93       	st	X, r24
}
    4642:	cf 91       	pop	r28
    4644:	df 91       	pop	r29
    4646:	08 95       	ret

00004648 <H_Bridge_vM1AndM2FastStop>:
void H_Bridge_vM1AndM2FastStop(){
    4648:	df 93       	push	r29
    464a:	cf 93       	push	r28
    464c:	cd b7       	in	r28, 0x3d	; 61
    464e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(PORTD,4);	//--- EN2 Low
    4650:	a2 e3       	ldi	r26, 0x32	; 50
    4652:	b0 e0       	ldi	r27, 0x00	; 0
    4654:	e2 e3       	ldi	r30, 0x32	; 50
    4656:	f0 e0       	ldi	r31, 0x00	; 0
    4658:	80 81       	ld	r24, Z
    465a:	8f 7e       	andi	r24, 0xEF	; 239
    465c:	8c 93       	st	X, r24
}
    465e:	cf 91       	pop	r28
    4660:	df 91       	pop	r29
    4662:	08 95       	ret

00004664 <APP_vPrintNumberSS>:
 *      Author: a7medDawoud
 */
#include "APP.h"

//------------ this function take two u8 numbers and print them on the 7Segme at the same time-----
void APP_vPrintNumberSS(u8 loc_u8SegmaPrintNumber1, u8 loc_u8SegmaPrintNumber2){
    4664:	df 93       	push	r29
    4666:	cf 93       	push	r28
    4668:	cd b7       	in	r28, 0x3d	; 61
    466a:	de b7       	in	r29, 0x3e	; 62
    466c:	a0 97       	sbiw	r28, 0x20	; 32
    466e:	0f b6       	in	r0, 0x3f	; 63
    4670:	f8 94       	cli
    4672:	de bf       	out	0x3e, r29	; 62
    4674:	0f be       	out	0x3f, r0	; 63
    4676:	cd bf       	out	0x3d, r28	; 61
    4678:	8f 8f       	std	Y+31, r24	; 0x1f
    467a:	68 a3       	std	Y+32, r22	; 0x20
	_7Segma_vInit();
    467c:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <_7Segma_vInit>
	u16 loc_delay;
	for(loc_delay=0;loc_delay<100;loc_delay++){
    4680:	1e 8e       	std	Y+30, r1	; 0x1e
    4682:	1d 8e       	std	Y+29, r1	; 0x1d
    4684:	ef c0       	rjmp	.+478    	; 0x4864 <APP_vPrintNumberSS+0x200>
		_7Segma_vPrintNumber1(loc_u8SegmaPrintNumber1);
    4686:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4688:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <_7Segma_vPrintNumber1>
    468c:	80 e0       	ldi	r24, 0x00	; 0
    468e:	90 e0       	ldi	r25, 0x00	; 0
    4690:	a0 e8       	ldi	r26, 0x80	; 128
    4692:	bf e3       	ldi	r27, 0x3F	; 63
    4694:	89 8f       	std	Y+25, r24	; 0x19
    4696:	9a 8f       	std	Y+26, r25	; 0x1a
    4698:	ab 8f       	std	Y+27, r26	; 0x1b
    469a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    469c:	69 8d       	ldd	r22, Y+25	; 0x19
    469e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    46a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    46a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    46a4:	20 e0       	ldi	r18, 0x00	; 0
    46a6:	30 e0       	ldi	r19, 0x00	; 0
    46a8:	4a e7       	ldi	r20, 0x7A	; 122
    46aa:	55 e4       	ldi	r21, 0x45	; 69
    46ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46b0:	dc 01       	movw	r26, r24
    46b2:	cb 01       	movw	r24, r22
    46b4:	8d 8b       	std	Y+21, r24	; 0x15
    46b6:	9e 8b       	std	Y+22, r25	; 0x16
    46b8:	af 8b       	std	Y+23, r26	; 0x17
    46ba:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    46bc:	6d 89       	ldd	r22, Y+21	; 0x15
    46be:	7e 89       	ldd	r23, Y+22	; 0x16
    46c0:	8f 89       	ldd	r24, Y+23	; 0x17
    46c2:	98 8d       	ldd	r25, Y+24	; 0x18
    46c4:	20 e0       	ldi	r18, 0x00	; 0
    46c6:	30 e0       	ldi	r19, 0x00	; 0
    46c8:	40 e8       	ldi	r20, 0x80	; 128
    46ca:	5f e3       	ldi	r21, 0x3F	; 63
    46cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    46d0:	88 23       	and	r24, r24
    46d2:	2c f4       	brge	.+10     	; 0x46de <APP_vPrintNumberSS+0x7a>
		__ticks = 1;
    46d4:	81 e0       	ldi	r24, 0x01	; 1
    46d6:	90 e0       	ldi	r25, 0x00	; 0
    46d8:	9c 8b       	std	Y+20, r25	; 0x14
    46da:	8b 8b       	std	Y+19, r24	; 0x13
    46dc:	3f c0       	rjmp	.+126    	; 0x475c <APP_vPrintNumberSS+0xf8>
	else if (__tmp > 65535)
    46de:	6d 89       	ldd	r22, Y+21	; 0x15
    46e0:	7e 89       	ldd	r23, Y+22	; 0x16
    46e2:	8f 89       	ldd	r24, Y+23	; 0x17
    46e4:	98 8d       	ldd	r25, Y+24	; 0x18
    46e6:	20 e0       	ldi	r18, 0x00	; 0
    46e8:	3f ef       	ldi	r19, 0xFF	; 255
    46ea:	4f e7       	ldi	r20, 0x7F	; 127
    46ec:	57 e4       	ldi	r21, 0x47	; 71
    46ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    46f2:	18 16       	cp	r1, r24
    46f4:	4c f5       	brge	.+82     	; 0x4748 <APP_vPrintNumberSS+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46f6:	69 8d       	ldd	r22, Y+25	; 0x19
    46f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    46fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    46fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    46fe:	20 e0       	ldi	r18, 0x00	; 0
    4700:	30 e0       	ldi	r19, 0x00	; 0
    4702:	40 e2       	ldi	r20, 0x20	; 32
    4704:	51 e4       	ldi	r21, 0x41	; 65
    4706:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    470a:	dc 01       	movw	r26, r24
    470c:	cb 01       	movw	r24, r22
    470e:	bc 01       	movw	r22, r24
    4710:	cd 01       	movw	r24, r26
    4712:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4716:	dc 01       	movw	r26, r24
    4718:	cb 01       	movw	r24, r22
    471a:	9c 8b       	std	Y+20, r25	; 0x14
    471c:	8b 8b       	std	Y+19, r24	; 0x13
    471e:	0f c0       	rjmp	.+30     	; 0x473e <APP_vPrintNumberSS+0xda>
    4720:	80 e9       	ldi	r24, 0x90	; 144
    4722:	91 e0       	ldi	r25, 0x01	; 1
    4724:	9a 8b       	std	Y+18, r25	; 0x12
    4726:	89 8b       	std	Y+17, r24	; 0x11
    4728:	89 89       	ldd	r24, Y+17	; 0x11
    472a:	9a 89       	ldd	r25, Y+18	; 0x12
    472c:	01 97       	sbiw	r24, 0x01	; 1
    472e:	f1 f7       	brne	.-4      	; 0x472c <APP_vPrintNumberSS+0xc8>
    4730:	9a 8b       	std	Y+18, r25	; 0x12
    4732:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4734:	8b 89       	ldd	r24, Y+19	; 0x13
    4736:	9c 89       	ldd	r25, Y+20	; 0x14
    4738:	01 97       	sbiw	r24, 0x01	; 1
    473a:	9c 8b       	std	Y+20, r25	; 0x14
    473c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    473e:	8b 89       	ldd	r24, Y+19	; 0x13
    4740:	9c 89       	ldd	r25, Y+20	; 0x14
    4742:	00 97       	sbiw	r24, 0x00	; 0
    4744:	69 f7       	brne	.-38     	; 0x4720 <APP_vPrintNumberSS+0xbc>
    4746:	14 c0       	rjmp	.+40     	; 0x4770 <APP_vPrintNumberSS+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4748:	6d 89       	ldd	r22, Y+21	; 0x15
    474a:	7e 89       	ldd	r23, Y+22	; 0x16
    474c:	8f 89       	ldd	r24, Y+23	; 0x17
    474e:	98 8d       	ldd	r25, Y+24	; 0x18
    4750:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4754:	dc 01       	movw	r26, r24
    4756:	cb 01       	movw	r24, r22
    4758:	9c 8b       	std	Y+20, r25	; 0x14
    475a:	8b 8b       	std	Y+19, r24	; 0x13
    475c:	8b 89       	ldd	r24, Y+19	; 0x13
    475e:	9c 89       	ldd	r25, Y+20	; 0x14
    4760:	98 8b       	std	Y+16, r25	; 0x10
    4762:	8f 87       	std	Y+15, r24	; 0x0f
    4764:	8f 85       	ldd	r24, Y+15	; 0x0f
    4766:	98 89       	ldd	r25, Y+16	; 0x10
    4768:	01 97       	sbiw	r24, 0x01	; 1
    476a:	f1 f7       	brne	.-4      	; 0x4768 <APP_vPrintNumberSS+0x104>
    476c:	98 8b       	std	Y+16, r25	; 0x10
    476e:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		_7Segma_vPrintNumber2(loc_u8SegmaPrintNumber2);
    4770:	88 a1       	ldd	r24, Y+32	; 0x20
    4772:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <_7Segma_vPrintNumber2>
    4776:	80 e0       	ldi	r24, 0x00	; 0
    4778:	90 e0       	ldi	r25, 0x00	; 0
    477a:	a0 e8       	ldi	r26, 0x80	; 128
    477c:	bf e3       	ldi	r27, 0x3F	; 63
    477e:	8b 87       	std	Y+11, r24	; 0x0b
    4780:	9c 87       	std	Y+12, r25	; 0x0c
    4782:	ad 87       	std	Y+13, r26	; 0x0d
    4784:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4786:	6b 85       	ldd	r22, Y+11	; 0x0b
    4788:	7c 85       	ldd	r23, Y+12	; 0x0c
    478a:	8d 85       	ldd	r24, Y+13	; 0x0d
    478c:	9e 85       	ldd	r25, Y+14	; 0x0e
    478e:	20 e0       	ldi	r18, 0x00	; 0
    4790:	30 e0       	ldi	r19, 0x00	; 0
    4792:	4a e7       	ldi	r20, 0x7A	; 122
    4794:	55 e4       	ldi	r21, 0x45	; 69
    4796:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    479a:	dc 01       	movw	r26, r24
    479c:	cb 01       	movw	r24, r22
    479e:	8f 83       	std	Y+7, r24	; 0x07
    47a0:	98 87       	std	Y+8, r25	; 0x08
    47a2:	a9 87       	std	Y+9, r26	; 0x09
    47a4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    47a6:	6f 81       	ldd	r22, Y+7	; 0x07
    47a8:	78 85       	ldd	r23, Y+8	; 0x08
    47aa:	89 85       	ldd	r24, Y+9	; 0x09
    47ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    47ae:	20 e0       	ldi	r18, 0x00	; 0
    47b0:	30 e0       	ldi	r19, 0x00	; 0
    47b2:	40 e8       	ldi	r20, 0x80	; 128
    47b4:	5f e3       	ldi	r21, 0x3F	; 63
    47b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    47ba:	88 23       	and	r24, r24
    47bc:	2c f4       	brge	.+10     	; 0x47c8 <APP_vPrintNumberSS+0x164>
		__ticks = 1;
    47be:	81 e0       	ldi	r24, 0x01	; 1
    47c0:	90 e0       	ldi	r25, 0x00	; 0
    47c2:	9e 83       	std	Y+6, r25	; 0x06
    47c4:	8d 83       	std	Y+5, r24	; 0x05
    47c6:	3f c0       	rjmp	.+126    	; 0x4846 <APP_vPrintNumberSS+0x1e2>
	else if (__tmp > 65535)
    47c8:	6f 81       	ldd	r22, Y+7	; 0x07
    47ca:	78 85       	ldd	r23, Y+8	; 0x08
    47cc:	89 85       	ldd	r24, Y+9	; 0x09
    47ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    47d0:	20 e0       	ldi	r18, 0x00	; 0
    47d2:	3f ef       	ldi	r19, 0xFF	; 255
    47d4:	4f e7       	ldi	r20, 0x7F	; 127
    47d6:	57 e4       	ldi	r21, 0x47	; 71
    47d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    47dc:	18 16       	cp	r1, r24
    47de:	4c f5       	brge	.+82     	; 0x4832 <APP_vPrintNumberSS+0x1ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    47e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    47e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    47e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    47e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    47e8:	20 e0       	ldi	r18, 0x00	; 0
    47ea:	30 e0       	ldi	r19, 0x00	; 0
    47ec:	40 e2       	ldi	r20, 0x20	; 32
    47ee:	51 e4       	ldi	r21, 0x41	; 65
    47f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47f4:	dc 01       	movw	r26, r24
    47f6:	cb 01       	movw	r24, r22
    47f8:	bc 01       	movw	r22, r24
    47fa:	cd 01       	movw	r24, r26
    47fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4800:	dc 01       	movw	r26, r24
    4802:	cb 01       	movw	r24, r22
    4804:	9e 83       	std	Y+6, r25	; 0x06
    4806:	8d 83       	std	Y+5, r24	; 0x05
    4808:	0f c0       	rjmp	.+30     	; 0x4828 <APP_vPrintNumberSS+0x1c4>
    480a:	80 e9       	ldi	r24, 0x90	; 144
    480c:	91 e0       	ldi	r25, 0x01	; 1
    480e:	9c 83       	std	Y+4, r25	; 0x04
    4810:	8b 83       	std	Y+3, r24	; 0x03
    4812:	8b 81       	ldd	r24, Y+3	; 0x03
    4814:	9c 81       	ldd	r25, Y+4	; 0x04
    4816:	01 97       	sbiw	r24, 0x01	; 1
    4818:	f1 f7       	brne	.-4      	; 0x4816 <APP_vPrintNumberSS+0x1b2>
    481a:	9c 83       	std	Y+4, r25	; 0x04
    481c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    481e:	8d 81       	ldd	r24, Y+5	; 0x05
    4820:	9e 81       	ldd	r25, Y+6	; 0x06
    4822:	01 97       	sbiw	r24, 0x01	; 1
    4824:	9e 83       	std	Y+6, r25	; 0x06
    4826:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4828:	8d 81       	ldd	r24, Y+5	; 0x05
    482a:	9e 81       	ldd	r25, Y+6	; 0x06
    482c:	00 97       	sbiw	r24, 0x00	; 0
    482e:	69 f7       	brne	.-38     	; 0x480a <APP_vPrintNumberSS+0x1a6>
    4830:	14 c0       	rjmp	.+40     	; 0x485a <APP_vPrintNumberSS+0x1f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4832:	6f 81       	ldd	r22, Y+7	; 0x07
    4834:	78 85       	ldd	r23, Y+8	; 0x08
    4836:	89 85       	ldd	r24, Y+9	; 0x09
    4838:	9a 85       	ldd	r25, Y+10	; 0x0a
    483a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    483e:	dc 01       	movw	r26, r24
    4840:	cb 01       	movw	r24, r22
    4842:	9e 83       	std	Y+6, r25	; 0x06
    4844:	8d 83       	std	Y+5, r24	; 0x05
    4846:	8d 81       	ldd	r24, Y+5	; 0x05
    4848:	9e 81       	ldd	r25, Y+6	; 0x06
    484a:	9a 83       	std	Y+2, r25	; 0x02
    484c:	89 83       	std	Y+1, r24	; 0x01
    484e:	89 81       	ldd	r24, Y+1	; 0x01
    4850:	9a 81       	ldd	r25, Y+2	; 0x02
    4852:	01 97       	sbiw	r24, 0x01	; 1
    4854:	f1 f7       	brne	.-4      	; 0x4852 <APP_vPrintNumberSS+0x1ee>
    4856:	9a 83       	std	Y+2, r25	; 0x02
    4858:	89 83       	std	Y+1, r24	; 0x01

//------------ this function take two u8 numbers and print them on the 7Segme at the same time-----
void APP_vPrintNumberSS(u8 loc_u8SegmaPrintNumber1, u8 loc_u8SegmaPrintNumber2){
	_7Segma_vInit();
	u16 loc_delay;
	for(loc_delay=0;loc_delay<100;loc_delay++){
    485a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    485c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    485e:	01 96       	adiw	r24, 0x01	; 1
    4860:	9e 8f       	std	Y+30, r25	; 0x1e
    4862:	8d 8f       	std	Y+29, r24	; 0x1d
    4864:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4866:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4868:	84 36       	cpi	r24, 0x64	; 100
    486a:	91 05       	cpc	r25, r1
    486c:	08 f4       	brcc	.+2      	; 0x4870 <APP_vPrintNumberSS+0x20c>
    486e:	0b cf       	rjmp	.-490    	; 0x4686 <APP_vPrintNumberSS+0x22>
		_7Segma_vPrintNumber1(loc_u8SegmaPrintNumber1);
		_delay_ms(1);
		_7Segma_vPrintNumber2(loc_u8SegmaPrintNumber2);
		_delay_ms(1);
	}
}
    4870:	a0 96       	adiw	r28, 0x20	; 32
    4872:	0f b6       	in	r0, 0x3f	; 63
    4874:	f8 94       	cli
    4876:	de bf       	out	0x3e, r29	; 62
    4878:	0f be       	out	0x3f, r0	; 63
    487a:	cd bf       	out	0x3d, r28	; 61
    487c:	cf 91       	pop	r28
    487e:	df 91       	pop	r29
    4880:	08 95       	ret

00004882 <APP_vPrintTwoDigitNumberSS>:
void APP_vPrintTwoDigitNumberSS(u8 loc_u8SegmaPrintNumber){
    4882:	df 93       	push	r29
    4884:	cf 93       	push	r28
    4886:	0f 92       	push	r0
    4888:	cd b7       	in	r28, 0x3d	; 61
    488a:	de b7       	in	r29, 0x3e	; 62
    488c:	89 83       	std	Y+1, r24	; 0x01
	APP_vPrintNumberSS(loc_u8SegmaPrintNumber/10, loc_u8SegmaPrintNumber%10);
    488e:	89 81       	ldd	r24, Y+1	; 0x01
    4890:	9a e0       	ldi	r25, 0x0A	; 10
    4892:	69 2f       	mov	r22, r25
    4894:	0e 94 d1 35 	call	0x6ba2	; 0x6ba2 <__udivmodqi4>
    4898:	28 2f       	mov	r18, r24
    489a:	89 81       	ldd	r24, Y+1	; 0x01
    489c:	9a e0       	ldi	r25, 0x0A	; 10
    489e:	69 2f       	mov	r22, r25
    48a0:	0e 94 d1 35 	call	0x6ba2	; 0x6ba2 <__udivmodqi4>
    48a4:	89 2f       	mov	r24, r25
    48a6:	98 2f       	mov	r25, r24
    48a8:	82 2f       	mov	r24, r18
    48aa:	69 2f       	mov	r22, r25
    48ac:	0e 94 32 23 	call	0x4664	; 0x4664 <APP_vPrintNumberSS>
}
    48b0:	0f 90       	pop	r0
    48b2:	cf 91       	pop	r28
    48b4:	df 91       	pop	r29
    48b6:	08 95       	ret

000048b8 <APP_vPrintDecimalNumberSS>:
//------------ this function take a f32 number and print it on the 7Segme-----
void APP_vPrintDecimalNumberSS(f32 loc_f32SegmaDecimalNumber){
    48b8:	df 93       	push	r29
    48ba:	cf 93       	push	r28
    48bc:	00 d0       	rcall	.+0      	; 0x48be <APP_vPrintDecimalNumberSS+0x6>
    48be:	00 d0       	rcall	.+0      	; 0x48c0 <APP_vPrintDecimalNumberSS+0x8>
    48c0:	00 d0       	rcall	.+0      	; 0x48c2 <APP_vPrintDecimalNumberSS+0xa>
    48c2:	cd b7       	in	r28, 0x3d	; 61
    48c4:	de b7       	in	r29, 0x3e	; 62
    48c6:	6b 83       	std	Y+3, r22	; 0x03
    48c8:	7c 83       	std	Y+4, r23	; 0x04
    48ca:	8d 83       	std	Y+5, r24	; 0x05
    48cc:	9e 83       	std	Y+6, r25	; 0x06
	//------------ DECIMAL POINT PIN------
	DIO_vSetPinDirection(PortB, Pin3, Pin_OutPut);
    48ce:	81 e0       	ldi	r24, 0x01	; 1
    48d0:	63 e0       	ldi	r22, 0x03	; 3
    48d2:	41 e0       	ldi	r20, 0x01	; 1
    48d4:	0e 94 79 10 	call	0x20f2	; 0x20f2 <DIO_vSetPinDirection>
	u16 Loc_u16SegmaNumber=(loc_f32SegmaDecimalNumber*10);
    48d8:	6b 81       	ldd	r22, Y+3	; 0x03
    48da:	7c 81       	ldd	r23, Y+4	; 0x04
    48dc:	8d 81       	ldd	r24, Y+5	; 0x05
    48de:	9e 81       	ldd	r25, Y+6	; 0x06
    48e0:	20 e0       	ldi	r18, 0x00	; 0
    48e2:	30 e0       	ldi	r19, 0x00	; 0
    48e4:	40 e2       	ldi	r20, 0x20	; 32
    48e6:	51 e4       	ldi	r21, 0x41	; 65
    48e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48ec:	dc 01       	movw	r26, r24
    48ee:	cb 01       	movw	r24, r22
    48f0:	bc 01       	movw	r22, r24
    48f2:	cd 01       	movw	r24, r26
    48f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48f8:	dc 01       	movw	r26, r24
    48fa:	cb 01       	movw	r24, r22
    48fc:	9a 83       	std	Y+2, r25	; 0x02
    48fe:	89 83       	std	Y+1, r24	; 0x01
	_7Segma_vEnableDot();
    4900:	0e 94 39 16 	call	0x2c72	; 0x2c72 <_7Segma_vEnableDot>
	APP_vPrintNumberSS(Loc_u16SegmaNumber/10, Loc_u16SegmaNumber%10);
    4904:	89 81       	ldd	r24, Y+1	; 0x01
    4906:	9a 81       	ldd	r25, Y+2	; 0x02
    4908:	2a e0       	ldi	r18, 0x0A	; 10
    490a:	30 e0       	ldi	r19, 0x00	; 0
    490c:	b9 01       	movw	r22, r18
    490e:	0e 94 dd 35 	call	0x6bba	; 0x6bba <__udivmodhi4>
    4912:	cb 01       	movw	r24, r22
    4914:	48 2f       	mov	r20, r24
    4916:	89 81       	ldd	r24, Y+1	; 0x01
    4918:	9a 81       	ldd	r25, Y+2	; 0x02
    491a:	2a e0       	ldi	r18, 0x0A	; 10
    491c:	30 e0       	ldi	r19, 0x00	; 0
    491e:	b9 01       	movw	r22, r18
    4920:	0e 94 dd 35 	call	0x6bba	; 0x6bba <__udivmodhi4>
    4924:	98 2f       	mov	r25, r24
    4926:	84 2f       	mov	r24, r20
    4928:	69 2f       	mov	r22, r25
    492a:	0e 94 32 23 	call	0x4664	; 0x4664 <APP_vPrintNumberSS>
	_7Segma_vDisbleDot();
    492e:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <_7Segma_vDisbleDot>
}
    4932:	26 96       	adiw	r28, 0x06	; 6
    4934:	0f b6       	in	r0, 0x3f	; 63
    4936:	f8 94       	cli
    4938:	de bf       	out	0x3e, r29	; 62
    493a:	0f be       	out	0x3f, r0	; 63
    493c:	cd bf       	out	0x3d, r28	; 61
    493e:	cf 91       	pop	r28
    4940:	df 91       	pop	r29
    4942:	08 95       	ret

00004944 <APP_vPrint0to99SS>:
//--------------- this function is used to print from 00 to 99--------
void APP_vPrint0to99SS(){
    4944:	df 93       	push	r29
    4946:	cf 93       	push	r28
    4948:	00 d0       	rcall	.+0      	; 0x494a <APP_vPrint0to99SS+0x6>
    494a:	cd b7       	in	r28, 0x3d	; 61
    494c:	de b7       	in	r29, 0x3e	; 62
	u8 Loc_Count,Loc_Count2;
	for(Loc_Count=0;Loc_Count<10;Loc_Count++){
    494e:	1a 82       	std	Y+2, r1	; 0x02
    4950:	0f c0       	rjmp	.+30     	; 0x4970 <APP_vPrint0to99SS+0x2c>
		for(Loc_Count2=0;Loc_Count2<10;Loc_Count2++){
    4952:	19 82       	std	Y+1, r1	; 0x01
    4954:	07 c0       	rjmp	.+14     	; 0x4964 <APP_vPrint0to99SS+0x20>
			APP_vPrintNumberSS(Loc_Count,Loc_Count2);
    4956:	8a 81       	ldd	r24, Y+2	; 0x02
    4958:	69 81       	ldd	r22, Y+1	; 0x01
    495a:	0e 94 32 23 	call	0x4664	; 0x4664 <APP_vPrintNumberSS>
}
//--------------- this function is used to print from 00 to 99--------
void APP_vPrint0to99SS(){
	u8 Loc_Count,Loc_Count2;
	for(Loc_Count=0;Loc_Count<10;Loc_Count++){
		for(Loc_Count2=0;Loc_Count2<10;Loc_Count2++){
    495e:	89 81       	ldd	r24, Y+1	; 0x01
    4960:	8f 5f       	subi	r24, 0xFF	; 255
    4962:	89 83       	std	Y+1, r24	; 0x01
    4964:	89 81       	ldd	r24, Y+1	; 0x01
    4966:	8a 30       	cpi	r24, 0x0A	; 10
    4968:	b0 f3       	brcs	.-20     	; 0x4956 <APP_vPrint0to99SS+0x12>
	_7Segma_vDisbleDot();
}
//--------------- this function is used to print from 00 to 99--------
void APP_vPrint0to99SS(){
	u8 Loc_Count,Loc_Count2;
	for(Loc_Count=0;Loc_Count<10;Loc_Count++){
    496a:	8a 81       	ldd	r24, Y+2	; 0x02
    496c:	8f 5f       	subi	r24, 0xFF	; 255
    496e:	8a 83       	std	Y+2, r24	; 0x02
    4970:	8a 81       	ldd	r24, Y+2	; 0x02
    4972:	8a 30       	cpi	r24, 0x0A	; 10
    4974:	70 f3       	brcs	.-36     	; 0x4952 <APP_vPrint0to99SS+0xe>
		for(Loc_Count2=0;Loc_Count2<10;Loc_Count2++){
			APP_vPrintNumberSS(Loc_Count,Loc_Count2);
		}
	}
}
    4976:	0f 90       	pop	r0
    4978:	0f 90       	pop	r0
    497a:	cf 91       	pop	r28
    497c:	df 91       	pop	r29
    497e:	08 95       	ret

00004980 <APP_vPrint1MinuteSS>:
//--------------- this function is used to print 1 minute on the 7 segma--------
void APP_vPrint1MinuteSS(){
    4980:	df 93       	push	r29
    4982:	cf 93       	push	r28
    4984:	00 d0       	rcall	.+0      	; 0x4986 <APP_vPrint1MinuteSS+0x6>
    4986:	cd b7       	in	r28, 0x3d	; 61
    4988:	de b7       	in	r29, 0x3e	; 62
	u8 Loc_Count,loc_delay;
	for(Loc_Count=0;Loc_Count<=60;Loc_Count++){
    498a:	1a 82       	std	Y+2, r1	; 0x02
    498c:	0e c0       	rjmp	.+28     	; 0x49aa <APP_vPrint1MinuteSS+0x2a>
		for(loc_delay=0;loc_delay<4;loc_delay++){
    498e:	19 82       	std	Y+1, r1	; 0x01
    4990:	06 c0       	rjmp	.+12     	; 0x499e <APP_vPrint1MinuteSS+0x1e>
			APP_vPrintTwoDigitNumberSS(Loc_Count);
    4992:	8a 81       	ldd	r24, Y+2	; 0x02
    4994:	0e 94 41 24 	call	0x4882	; 0x4882 <APP_vPrintTwoDigitNumberSS>
}
//--------------- this function is used to print 1 minute on the 7 segma--------
void APP_vPrint1MinuteSS(){
	u8 Loc_Count,loc_delay;
	for(Loc_Count=0;Loc_Count<=60;Loc_Count++){
		for(loc_delay=0;loc_delay<4;loc_delay++){
    4998:	89 81       	ldd	r24, Y+1	; 0x01
    499a:	8f 5f       	subi	r24, 0xFF	; 255
    499c:	89 83       	std	Y+1, r24	; 0x01
    499e:	89 81       	ldd	r24, Y+1	; 0x01
    49a0:	84 30       	cpi	r24, 0x04	; 4
    49a2:	b8 f3       	brcs	.-18     	; 0x4992 <APP_vPrint1MinuteSS+0x12>
	}
}
//--------------- this function is used to print 1 minute on the 7 segma--------
void APP_vPrint1MinuteSS(){
	u8 Loc_Count,loc_delay;
	for(Loc_Count=0;Loc_Count<=60;Loc_Count++){
    49a4:	8a 81       	ldd	r24, Y+2	; 0x02
    49a6:	8f 5f       	subi	r24, 0xFF	; 255
    49a8:	8a 83       	std	Y+2, r24	; 0x02
    49aa:	8a 81       	ldd	r24, Y+2	; 0x02
    49ac:	8d 33       	cpi	r24, 0x3D	; 61
    49ae:	78 f3       	brcs	.-34     	; 0x498e <APP_vPrint1MinuteSS+0xe>
		for(loc_delay=0;loc_delay<4;loc_delay++){
			APP_vPrintTwoDigitNumberSS(Loc_Count);
		}
	}
}
    49b0:	0f 90       	pop	r0
    49b2:	0f 90       	pop	r0
    49b4:	cf 91       	pop	r28
    49b6:	df 91       	pop	r29
    49b8:	08 95       	ret

000049ba <APP_vClickCounterPB>:
/*--------------- this function is used to count the
 * (number clicks on pushbutton 1 Subtracted from number clicks on pushbutton 2)
 * and print it on the 7Segma*/
void APP_vClickCounterPB(){
    49ba:	df 93       	push	r29
    49bc:	cf 93       	push	r28
    49be:	0f 92       	push	r0
    49c0:	cd b7       	in	r28, 0x3d	; 61
    49c2:	de b7       	in	r29, 0x3e	; 62
	u8 Loc_Count;
	for(Loc_Count=0;Loc_Count<100;){
    49c4:	19 82       	std	Y+1, r1	; 0x01
    49c6:	22 c0       	rjmp	.+68     	; 0x4a0c <APP_vClickCounterPB+0x52>
		if(PushButton_u8Button1()){
    49c8:	0e 94 21 17 	call	0x2e42	; 0x2e42 <PushButton_u8Button1>
    49cc:	88 23       	and	r24, r24
    49ce:	51 f0       	breq	.+20     	; 0x49e4 <APP_vClickCounterPB+0x2a>
			Loc_Count++;
    49d0:	89 81       	ldd	r24, Y+1	; 0x01
    49d2:	8f 5f       	subi	r24, 0xFF	; 255
    49d4:	89 83       	std	Y+1, r24	; 0x01
			APP_vPrintTwoDigitNumberSS(Loc_Count);
    49d6:	89 81       	ldd	r24, Y+1	; 0x01
    49d8:	0e 94 41 24 	call	0x4882	; 0x4882 <APP_vPrintTwoDigitNumberSS>
			APP_vPrintTwoDigitNumberSS(Loc_Count);
    49dc:	89 81       	ldd	r24, Y+1	; 0x01
    49de:	0e 94 41 24 	call	0x4882	; 0x4882 <APP_vPrintTwoDigitNumberSS>
    49e2:	14 c0       	rjmp	.+40     	; 0x4a0c <APP_vClickCounterPB+0x52>
		}
		else if(PushButton_u8Button2()&&Loc_Count!=0){
    49e4:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <PushButton_u8Button2>
    49e8:	88 23       	and	r24, r24
    49ea:	69 f0       	breq	.+26     	; 0x4a06 <APP_vClickCounterPB+0x4c>
    49ec:	89 81       	ldd	r24, Y+1	; 0x01
    49ee:	88 23       	and	r24, r24
    49f0:	51 f0       	breq	.+20     	; 0x4a06 <APP_vClickCounterPB+0x4c>
			Loc_Count--;
    49f2:	89 81       	ldd	r24, Y+1	; 0x01
    49f4:	81 50       	subi	r24, 0x01	; 1
    49f6:	89 83       	std	Y+1, r24	; 0x01
			APP_vPrintTwoDigitNumberSS(Loc_Count);
    49f8:	89 81       	ldd	r24, Y+1	; 0x01
    49fa:	0e 94 41 24 	call	0x4882	; 0x4882 <APP_vPrintTwoDigitNumberSS>
			APP_vPrintTwoDigitNumberSS(Loc_Count);
    49fe:	89 81       	ldd	r24, Y+1	; 0x01
    4a00:	0e 94 41 24 	call	0x4882	; 0x4882 <APP_vPrintTwoDigitNumberSS>
    4a04:	03 c0       	rjmp	.+6      	; 0x4a0c <APP_vClickCounterPB+0x52>
		}
		else{
			APP_vPrintTwoDigitNumberSS(Loc_Count);
    4a06:	89 81       	ldd	r24, Y+1	; 0x01
    4a08:	0e 94 41 24 	call	0x4882	; 0x4882 <APP_vPrintTwoDigitNumberSS>
/*--------------- this function is used to count the
 * (number clicks on pushbutton 1 Subtracted from number clicks on pushbutton 2)
 * and print it on the 7Segma*/
void APP_vClickCounterPB(){
	u8 Loc_Count;
	for(Loc_Count=0;Loc_Count<100;){
    4a0c:	89 81       	ldd	r24, Y+1	; 0x01
    4a0e:	84 36       	cpi	r24, 0x64	; 100
    4a10:	d8 f2       	brcs	.-74     	; 0x49c8 <APP_vClickCounterPB+0xe>
		}
		else{
			APP_vPrintTwoDigitNumberSS(Loc_Count);
		}
	}
}
    4a12:	0f 90       	pop	r0
    4a14:	cf 91       	pop	r28
    4a16:	df 91       	pop	r29
    4a18:	08 95       	ret

00004a1a <APP_v3Leds1MinuteEachSS>:
/*---------this function is used to count 3 minutes every minute a led will turn on--------*/
void APP_v3Leds1MinuteEachSS(){
    4a1a:	df 93       	push	r29
    4a1c:	cf 93       	push	r28
    4a1e:	cd b7       	in	r28, 0x3d	; 61
    4a20:	de b7       	in	r29, 0x3e	; 62
    4a22:	6c 97       	sbiw	r28, 0x1c	; 28
    4a24:	0f b6       	in	r0, 0x3f	; 63
    4a26:	f8 94       	cli
    4a28:	de bf       	out	0x3e, r29	; 62
    4a2a:	0f be       	out	0x3f, r0	; 63
    4a2c:	cd bf       	out	0x3d, r28	; 61
	APP_vPrint1MinuteSS();
    4a2e:	0e 94 c0 24 	call	0x4980	; 0x4980 <APP_vPrint1MinuteSS>
	LedAndBuzzer_vLed0Open();
    4a32:	0e 94 5e 14 	call	0x28bc	; 0x28bc <LedAndBuzzer_vLed0Open>
	APP_vPrint1MinuteSS();
    4a36:	0e 94 c0 24 	call	0x4980	; 0x4980 <APP_vPrint1MinuteSS>
	LedAndBuzzer_vLed1Open();
    4a3a:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <LedAndBuzzer_vLed1Open>
	APP_vPrint1MinuteSS();
    4a3e:	0e 94 c0 24 	call	0x4980	; 0x4980 <APP_vPrint1MinuteSS>
	LedAndBuzzer_vLed2Open();
    4a42:	0e 94 98 14 	call	0x2930	; 0x2930 <LedAndBuzzer_vLed2Open>
    4a46:	80 e0       	ldi	r24, 0x00	; 0
    4a48:	90 e0       	ldi	r25, 0x00	; 0
    4a4a:	aa e7       	ldi	r26, 0x7A	; 122
    4a4c:	b3 e4       	ldi	r27, 0x43	; 67
    4a4e:	89 8f       	std	Y+25, r24	; 0x19
    4a50:	9a 8f       	std	Y+26, r25	; 0x1a
    4a52:	ab 8f       	std	Y+27, r26	; 0x1b
    4a54:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a56:	69 8d       	ldd	r22, Y+25	; 0x19
    4a58:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4a5a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4a5c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4a5e:	20 e0       	ldi	r18, 0x00	; 0
    4a60:	30 e0       	ldi	r19, 0x00	; 0
    4a62:	4a e7       	ldi	r20, 0x7A	; 122
    4a64:	55 e4       	ldi	r21, 0x45	; 69
    4a66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a6a:	dc 01       	movw	r26, r24
    4a6c:	cb 01       	movw	r24, r22
    4a6e:	8d 8b       	std	Y+21, r24	; 0x15
    4a70:	9e 8b       	std	Y+22, r25	; 0x16
    4a72:	af 8b       	std	Y+23, r26	; 0x17
    4a74:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4a76:	6d 89       	ldd	r22, Y+21	; 0x15
    4a78:	7e 89       	ldd	r23, Y+22	; 0x16
    4a7a:	8f 89       	ldd	r24, Y+23	; 0x17
    4a7c:	98 8d       	ldd	r25, Y+24	; 0x18
    4a7e:	20 e0       	ldi	r18, 0x00	; 0
    4a80:	30 e0       	ldi	r19, 0x00	; 0
    4a82:	40 e8       	ldi	r20, 0x80	; 128
    4a84:	5f e3       	ldi	r21, 0x3F	; 63
    4a86:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4a8a:	88 23       	and	r24, r24
    4a8c:	2c f4       	brge	.+10     	; 0x4a98 <APP_v3Leds1MinuteEachSS+0x7e>
		__ticks = 1;
    4a8e:	81 e0       	ldi	r24, 0x01	; 1
    4a90:	90 e0       	ldi	r25, 0x00	; 0
    4a92:	9c 8b       	std	Y+20, r25	; 0x14
    4a94:	8b 8b       	std	Y+19, r24	; 0x13
    4a96:	3f c0       	rjmp	.+126    	; 0x4b16 <APP_v3Leds1MinuteEachSS+0xfc>
	else if (__tmp > 65535)
    4a98:	6d 89       	ldd	r22, Y+21	; 0x15
    4a9a:	7e 89       	ldd	r23, Y+22	; 0x16
    4a9c:	8f 89       	ldd	r24, Y+23	; 0x17
    4a9e:	98 8d       	ldd	r25, Y+24	; 0x18
    4aa0:	20 e0       	ldi	r18, 0x00	; 0
    4aa2:	3f ef       	ldi	r19, 0xFF	; 255
    4aa4:	4f e7       	ldi	r20, 0x7F	; 127
    4aa6:	57 e4       	ldi	r21, 0x47	; 71
    4aa8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4aac:	18 16       	cp	r1, r24
    4aae:	4c f5       	brge	.+82     	; 0x4b02 <APP_v3Leds1MinuteEachSS+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ab0:	69 8d       	ldd	r22, Y+25	; 0x19
    4ab2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4ab4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4ab6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4ab8:	20 e0       	ldi	r18, 0x00	; 0
    4aba:	30 e0       	ldi	r19, 0x00	; 0
    4abc:	40 e2       	ldi	r20, 0x20	; 32
    4abe:	51 e4       	ldi	r21, 0x41	; 65
    4ac0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ac4:	dc 01       	movw	r26, r24
    4ac6:	cb 01       	movw	r24, r22
    4ac8:	bc 01       	movw	r22, r24
    4aca:	cd 01       	movw	r24, r26
    4acc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ad0:	dc 01       	movw	r26, r24
    4ad2:	cb 01       	movw	r24, r22
    4ad4:	9c 8b       	std	Y+20, r25	; 0x14
    4ad6:	8b 8b       	std	Y+19, r24	; 0x13
    4ad8:	0f c0       	rjmp	.+30     	; 0x4af8 <APP_v3Leds1MinuteEachSS+0xde>
    4ada:	80 e9       	ldi	r24, 0x90	; 144
    4adc:	91 e0       	ldi	r25, 0x01	; 1
    4ade:	9a 8b       	std	Y+18, r25	; 0x12
    4ae0:	89 8b       	std	Y+17, r24	; 0x11
    4ae2:	89 89       	ldd	r24, Y+17	; 0x11
    4ae4:	9a 89       	ldd	r25, Y+18	; 0x12
    4ae6:	01 97       	sbiw	r24, 0x01	; 1
    4ae8:	f1 f7       	brne	.-4      	; 0x4ae6 <APP_v3Leds1MinuteEachSS+0xcc>
    4aea:	9a 8b       	std	Y+18, r25	; 0x12
    4aec:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4aee:	8b 89       	ldd	r24, Y+19	; 0x13
    4af0:	9c 89       	ldd	r25, Y+20	; 0x14
    4af2:	01 97       	sbiw	r24, 0x01	; 1
    4af4:	9c 8b       	std	Y+20, r25	; 0x14
    4af6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4af8:	8b 89       	ldd	r24, Y+19	; 0x13
    4afa:	9c 89       	ldd	r25, Y+20	; 0x14
    4afc:	00 97       	sbiw	r24, 0x00	; 0
    4afe:	69 f7       	brne	.-38     	; 0x4ada <APP_v3Leds1MinuteEachSS+0xc0>
    4b00:	14 c0       	rjmp	.+40     	; 0x4b2a <APP_v3Leds1MinuteEachSS+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b02:	6d 89       	ldd	r22, Y+21	; 0x15
    4b04:	7e 89       	ldd	r23, Y+22	; 0x16
    4b06:	8f 89       	ldd	r24, Y+23	; 0x17
    4b08:	98 8d       	ldd	r25, Y+24	; 0x18
    4b0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b0e:	dc 01       	movw	r26, r24
    4b10:	cb 01       	movw	r24, r22
    4b12:	9c 8b       	std	Y+20, r25	; 0x14
    4b14:	8b 8b       	std	Y+19, r24	; 0x13
    4b16:	8b 89       	ldd	r24, Y+19	; 0x13
    4b18:	9c 89       	ldd	r25, Y+20	; 0x14
    4b1a:	98 8b       	std	Y+16, r25	; 0x10
    4b1c:	8f 87       	std	Y+15, r24	; 0x0f
    4b1e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4b20:	98 89       	ldd	r25, Y+16	; 0x10
    4b22:	01 97       	sbiw	r24, 0x01	; 1
    4b24:	f1 f7       	brne	.-4      	; 0x4b22 <APP_v3Leds1MinuteEachSS+0x108>
    4b26:	98 8b       	std	Y+16, r25	; 0x10
    4b28:	8f 87       	std	Y+15, r24	; 0x0f
    4b2a:	80 e0       	ldi	r24, 0x00	; 0
    4b2c:	90 e0       	ldi	r25, 0x00	; 0
    4b2e:	aa e7       	ldi	r26, 0x7A	; 122
    4b30:	b3 e4       	ldi	r27, 0x43	; 67
    4b32:	8b 87       	std	Y+11, r24	; 0x0b
    4b34:	9c 87       	std	Y+12, r25	; 0x0c
    4b36:	ad 87       	std	Y+13, r26	; 0x0d
    4b38:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b3a:	6b 85       	ldd	r22, Y+11	; 0x0b
    4b3c:	7c 85       	ldd	r23, Y+12	; 0x0c
    4b3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b40:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b42:	20 e0       	ldi	r18, 0x00	; 0
    4b44:	30 e0       	ldi	r19, 0x00	; 0
    4b46:	4a e7       	ldi	r20, 0x7A	; 122
    4b48:	55 e4       	ldi	r21, 0x45	; 69
    4b4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b4e:	dc 01       	movw	r26, r24
    4b50:	cb 01       	movw	r24, r22
    4b52:	8f 83       	std	Y+7, r24	; 0x07
    4b54:	98 87       	std	Y+8, r25	; 0x08
    4b56:	a9 87       	std	Y+9, r26	; 0x09
    4b58:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4b5a:	6f 81       	ldd	r22, Y+7	; 0x07
    4b5c:	78 85       	ldd	r23, Y+8	; 0x08
    4b5e:	89 85       	ldd	r24, Y+9	; 0x09
    4b60:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b62:	20 e0       	ldi	r18, 0x00	; 0
    4b64:	30 e0       	ldi	r19, 0x00	; 0
    4b66:	40 e8       	ldi	r20, 0x80	; 128
    4b68:	5f e3       	ldi	r21, 0x3F	; 63
    4b6a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4b6e:	88 23       	and	r24, r24
    4b70:	2c f4       	brge	.+10     	; 0x4b7c <APP_v3Leds1MinuteEachSS+0x162>
		__ticks = 1;
    4b72:	81 e0       	ldi	r24, 0x01	; 1
    4b74:	90 e0       	ldi	r25, 0x00	; 0
    4b76:	9e 83       	std	Y+6, r25	; 0x06
    4b78:	8d 83       	std	Y+5, r24	; 0x05
    4b7a:	3f c0       	rjmp	.+126    	; 0x4bfa <APP_v3Leds1MinuteEachSS+0x1e0>
	else if (__tmp > 65535)
    4b7c:	6f 81       	ldd	r22, Y+7	; 0x07
    4b7e:	78 85       	ldd	r23, Y+8	; 0x08
    4b80:	89 85       	ldd	r24, Y+9	; 0x09
    4b82:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b84:	20 e0       	ldi	r18, 0x00	; 0
    4b86:	3f ef       	ldi	r19, 0xFF	; 255
    4b88:	4f e7       	ldi	r20, 0x7F	; 127
    4b8a:	57 e4       	ldi	r21, 0x47	; 71
    4b8c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4b90:	18 16       	cp	r1, r24
    4b92:	4c f5       	brge	.+82     	; 0x4be6 <APP_v3Leds1MinuteEachSS+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b94:	6b 85       	ldd	r22, Y+11	; 0x0b
    4b96:	7c 85       	ldd	r23, Y+12	; 0x0c
    4b98:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b9c:	20 e0       	ldi	r18, 0x00	; 0
    4b9e:	30 e0       	ldi	r19, 0x00	; 0
    4ba0:	40 e2       	ldi	r20, 0x20	; 32
    4ba2:	51 e4       	ldi	r21, 0x41	; 65
    4ba4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ba8:	dc 01       	movw	r26, r24
    4baa:	cb 01       	movw	r24, r22
    4bac:	bc 01       	movw	r22, r24
    4bae:	cd 01       	movw	r24, r26
    4bb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bb4:	dc 01       	movw	r26, r24
    4bb6:	cb 01       	movw	r24, r22
    4bb8:	9e 83       	std	Y+6, r25	; 0x06
    4bba:	8d 83       	std	Y+5, r24	; 0x05
    4bbc:	0f c0       	rjmp	.+30     	; 0x4bdc <APP_v3Leds1MinuteEachSS+0x1c2>
    4bbe:	80 e9       	ldi	r24, 0x90	; 144
    4bc0:	91 e0       	ldi	r25, 0x01	; 1
    4bc2:	9c 83       	std	Y+4, r25	; 0x04
    4bc4:	8b 83       	std	Y+3, r24	; 0x03
    4bc6:	8b 81       	ldd	r24, Y+3	; 0x03
    4bc8:	9c 81       	ldd	r25, Y+4	; 0x04
    4bca:	01 97       	sbiw	r24, 0x01	; 1
    4bcc:	f1 f7       	brne	.-4      	; 0x4bca <APP_v3Leds1MinuteEachSS+0x1b0>
    4bce:	9c 83       	std	Y+4, r25	; 0x04
    4bd0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4bd2:	8d 81       	ldd	r24, Y+5	; 0x05
    4bd4:	9e 81       	ldd	r25, Y+6	; 0x06
    4bd6:	01 97       	sbiw	r24, 0x01	; 1
    4bd8:	9e 83       	std	Y+6, r25	; 0x06
    4bda:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4bdc:	8d 81       	ldd	r24, Y+5	; 0x05
    4bde:	9e 81       	ldd	r25, Y+6	; 0x06
    4be0:	00 97       	sbiw	r24, 0x00	; 0
    4be2:	69 f7       	brne	.-38     	; 0x4bbe <APP_v3Leds1MinuteEachSS+0x1a4>
    4be4:	14 c0       	rjmp	.+40     	; 0x4c0e <APP_v3Leds1MinuteEachSS+0x1f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4be6:	6f 81       	ldd	r22, Y+7	; 0x07
    4be8:	78 85       	ldd	r23, Y+8	; 0x08
    4bea:	89 85       	ldd	r24, Y+9	; 0x09
    4bec:	9a 85       	ldd	r25, Y+10	; 0x0a
    4bee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bf2:	dc 01       	movw	r26, r24
    4bf4:	cb 01       	movw	r24, r22
    4bf6:	9e 83       	std	Y+6, r25	; 0x06
    4bf8:	8d 83       	std	Y+5, r24	; 0x05
    4bfa:	8d 81       	ldd	r24, Y+5	; 0x05
    4bfc:	9e 81       	ldd	r25, Y+6	; 0x06
    4bfe:	9a 83       	std	Y+2, r25	; 0x02
    4c00:	89 83       	std	Y+1, r24	; 0x01
    4c02:	89 81       	ldd	r24, Y+1	; 0x01
    4c04:	9a 81       	ldd	r25, Y+2	; 0x02
    4c06:	01 97       	sbiw	r24, 0x01	; 1
    4c08:	f1 f7       	brne	.-4      	; 0x4c06 <APP_v3Leds1MinuteEachSS+0x1ec>
    4c0a:	9a 83       	std	Y+2, r25	; 0x02
    4c0c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(250);
	_delay_ms(250);
	LedAndBuzzer_vLed0Close();
    4c0e:	0e 94 6f 14 	call	0x28de	; 0x28de <LedAndBuzzer_vLed0Close>
	LedAndBuzzer_vLed1Close();
    4c12:	0e 94 8c 14 	call	0x2918	; 0x2918 <LedAndBuzzer_vLed1Close>
	LedAndBuzzer_vLed2Close();
    4c16:	0e 94 a9 14 	call	0x2952	; 0x2952 <LedAndBuzzer_vLed2Close>
}
    4c1a:	6c 96       	adiw	r28, 0x1c	; 28
    4c1c:	0f b6       	in	r0, 0x3f	; 63
    4c1e:	f8 94       	cli
    4c20:	de bf       	out	0x3e, r29	; 62
    4c22:	0f be       	out	0x3f, r0	; 63
    4c24:	cd bf       	out	0x3d, r28	; 61
    4c26:	cf 91       	pop	r28
    4c28:	df 91       	pop	r29
    4c2a:	08 95       	ret

00004c2c <APP_vTaskFinsh>:
/*------------ this function is used to turn all LEDs and buzzer 3 times
 * -------------- to show that Task is finished--------*/
void APP_vTaskFinsh(){
    4c2c:	df 93       	push	r29
    4c2e:	cf 93       	push	r28
    4c30:	cd b7       	in	r28, 0x3d	; 61
    4c32:	de b7       	in	r29, 0x3e	; 62
	LedAndBuzzer_vFlash(3);
    4c34:	83 e0       	ldi	r24, 0x03	; 3
    4c36:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <LedAndBuzzer_vFlash>
}
    4c3a:	cf 91       	pop	r28
    4c3c:	df 91       	pop	r29
    4c3e:	08 95       	ret

00004c40 <APP_vWriteStringManyTimesLCD>:
//-----------------
void APP_vWriteStringManyTimesLCD(u8 *Loc_u8Array,u8 Loc_u8size){
    4c40:	df 93       	push	r29
    4c42:	cf 93       	push	r28
    4c44:	cd b7       	in	r28, 0x3d	; 61
    4c46:	de b7       	in	r29, 0x3e	; 62
    4c48:	a0 97       	sbiw	r28, 0x20	; 32
    4c4a:	0f b6       	in	r0, 0x3f	; 63
    4c4c:	f8 94       	cli
    4c4e:	de bf       	out	0x3e, r29	; 62
    4c50:	0f be       	out	0x3f, r0	; 63
    4c52:	cd bf       	out	0x3d, r28	; 61
    4c54:	9f 8f       	std	Y+31, r25	; 0x1f
    4c56:	8e 8f       	std	Y+30, r24	; 0x1e
    4c58:	68 a3       	std	Y+32, r22	; 0x20
	LCD_vInit();
    4c5a:	0e 94 af 1a 	call	0x355e	; 0x355e <LCD_vInit>
	u8 i;
	for(i=0;i<=((16/Loc_u8size));i++){
    4c5e:	1d 8e       	std	Y+29, r1	; 0x1d
    4c60:	91 c0       	rjmp	.+290    	; 0x4d84 <APP_vWriteStringManyTimesLCD+0x144>
		LCD_vGoTo(LineOne,((Loc_u8size-1)*i));
    4c62:	88 a1       	ldd	r24, Y+32	; 0x20
    4c64:	88 2f       	mov	r24, r24
    4c66:	90 e0       	ldi	r25, 0x00	; 0
    4c68:	9c 01       	movw	r18, r24
    4c6a:	21 50       	subi	r18, 0x01	; 1
    4c6c:	30 40       	sbci	r19, 0x00	; 0
    4c6e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4c70:	88 2f       	mov	r24, r24
    4c72:	90 e0       	ldi	r25, 0x00	; 0
    4c74:	ac 01       	movw	r20, r24
    4c76:	24 9f       	mul	r18, r20
    4c78:	c0 01       	movw	r24, r0
    4c7a:	25 9f       	mul	r18, r21
    4c7c:	90 0d       	add	r25, r0
    4c7e:	34 9f       	mul	r19, r20
    4c80:	90 0d       	add	r25, r0
    4c82:	11 24       	eor	r1, r1
    4c84:	98 2f       	mov	r25, r24
    4c86:	80 e8       	ldi	r24, 0x80	; 128
    4c88:	69 2f       	mov	r22, r25
    4c8a:	0e 94 75 20 	call	0x40ea	; 0x40ea <LCD_vGoTo>
		LCD_vWriteString(Loc_u8Array);
    4c8e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4c90:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4c92:	0e 94 0e 21 	call	0x421c	; 0x421c <LCD_vWriteString>
    4c96:	80 e0       	ldi	r24, 0x00	; 0
    4c98:	90 e0       	ldi	r25, 0x00	; 0
    4c9a:	aa e7       	ldi	r26, 0x7A	; 122
    4c9c:	b3 e4       	ldi	r27, 0x43	; 67
    4c9e:	89 8f       	std	Y+25, r24	; 0x19
    4ca0:	9a 8f       	std	Y+26, r25	; 0x1a
    4ca2:	ab 8f       	std	Y+27, r26	; 0x1b
    4ca4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ca6:	69 8d       	ldd	r22, Y+25	; 0x19
    4ca8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4caa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4cac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4cae:	20 e0       	ldi	r18, 0x00	; 0
    4cb0:	30 e0       	ldi	r19, 0x00	; 0
    4cb2:	4a e7       	ldi	r20, 0x7A	; 122
    4cb4:	55 e4       	ldi	r21, 0x45	; 69
    4cb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cba:	dc 01       	movw	r26, r24
    4cbc:	cb 01       	movw	r24, r22
    4cbe:	8d 8b       	std	Y+21, r24	; 0x15
    4cc0:	9e 8b       	std	Y+22, r25	; 0x16
    4cc2:	af 8b       	std	Y+23, r26	; 0x17
    4cc4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4cc6:	6d 89       	ldd	r22, Y+21	; 0x15
    4cc8:	7e 89       	ldd	r23, Y+22	; 0x16
    4cca:	8f 89       	ldd	r24, Y+23	; 0x17
    4ccc:	98 8d       	ldd	r25, Y+24	; 0x18
    4cce:	20 e0       	ldi	r18, 0x00	; 0
    4cd0:	30 e0       	ldi	r19, 0x00	; 0
    4cd2:	40 e8       	ldi	r20, 0x80	; 128
    4cd4:	5f e3       	ldi	r21, 0x3F	; 63
    4cd6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4cda:	88 23       	and	r24, r24
    4cdc:	2c f4       	brge	.+10     	; 0x4ce8 <APP_vWriteStringManyTimesLCD+0xa8>
		__ticks = 1;
    4cde:	81 e0       	ldi	r24, 0x01	; 1
    4ce0:	90 e0       	ldi	r25, 0x00	; 0
    4ce2:	9c 8b       	std	Y+20, r25	; 0x14
    4ce4:	8b 8b       	std	Y+19, r24	; 0x13
    4ce6:	3f c0       	rjmp	.+126    	; 0x4d66 <APP_vWriteStringManyTimesLCD+0x126>
	else if (__tmp > 65535)
    4ce8:	6d 89       	ldd	r22, Y+21	; 0x15
    4cea:	7e 89       	ldd	r23, Y+22	; 0x16
    4cec:	8f 89       	ldd	r24, Y+23	; 0x17
    4cee:	98 8d       	ldd	r25, Y+24	; 0x18
    4cf0:	20 e0       	ldi	r18, 0x00	; 0
    4cf2:	3f ef       	ldi	r19, 0xFF	; 255
    4cf4:	4f e7       	ldi	r20, 0x7F	; 127
    4cf6:	57 e4       	ldi	r21, 0x47	; 71
    4cf8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4cfc:	18 16       	cp	r1, r24
    4cfe:	4c f5       	brge	.+82     	; 0x4d52 <APP_vWriteStringManyTimesLCD+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d00:	69 8d       	ldd	r22, Y+25	; 0x19
    4d02:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4d04:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4d06:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4d08:	20 e0       	ldi	r18, 0x00	; 0
    4d0a:	30 e0       	ldi	r19, 0x00	; 0
    4d0c:	40 e2       	ldi	r20, 0x20	; 32
    4d0e:	51 e4       	ldi	r21, 0x41	; 65
    4d10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d14:	dc 01       	movw	r26, r24
    4d16:	cb 01       	movw	r24, r22
    4d18:	bc 01       	movw	r22, r24
    4d1a:	cd 01       	movw	r24, r26
    4d1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d20:	dc 01       	movw	r26, r24
    4d22:	cb 01       	movw	r24, r22
    4d24:	9c 8b       	std	Y+20, r25	; 0x14
    4d26:	8b 8b       	std	Y+19, r24	; 0x13
    4d28:	0f c0       	rjmp	.+30     	; 0x4d48 <APP_vWriteStringManyTimesLCD+0x108>
    4d2a:	80 e9       	ldi	r24, 0x90	; 144
    4d2c:	91 e0       	ldi	r25, 0x01	; 1
    4d2e:	9a 8b       	std	Y+18, r25	; 0x12
    4d30:	89 8b       	std	Y+17, r24	; 0x11
    4d32:	89 89       	ldd	r24, Y+17	; 0x11
    4d34:	9a 89       	ldd	r25, Y+18	; 0x12
    4d36:	01 97       	sbiw	r24, 0x01	; 1
    4d38:	f1 f7       	brne	.-4      	; 0x4d36 <APP_vWriteStringManyTimesLCD+0xf6>
    4d3a:	9a 8b       	std	Y+18, r25	; 0x12
    4d3c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d3e:	8b 89       	ldd	r24, Y+19	; 0x13
    4d40:	9c 89       	ldd	r25, Y+20	; 0x14
    4d42:	01 97       	sbiw	r24, 0x01	; 1
    4d44:	9c 8b       	std	Y+20, r25	; 0x14
    4d46:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d48:	8b 89       	ldd	r24, Y+19	; 0x13
    4d4a:	9c 89       	ldd	r25, Y+20	; 0x14
    4d4c:	00 97       	sbiw	r24, 0x00	; 0
    4d4e:	69 f7       	brne	.-38     	; 0x4d2a <APP_vWriteStringManyTimesLCD+0xea>
    4d50:	14 c0       	rjmp	.+40     	; 0x4d7a <APP_vWriteStringManyTimesLCD+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d52:	6d 89       	ldd	r22, Y+21	; 0x15
    4d54:	7e 89       	ldd	r23, Y+22	; 0x16
    4d56:	8f 89       	ldd	r24, Y+23	; 0x17
    4d58:	98 8d       	ldd	r25, Y+24	; 0x18
    4d5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d5e:	dc 01       	movw	r26, r24
    4d60:	cb 01       	movw	r24, r22
    4d62:	9c 8b       	std	Y+20, r25	; 0x14
    4d64:	8b 8b       	std	Y+19, r24	; 0x13
    4d66:	8b 89       	ldd	r24, Y+19	; 0x13
    4d68:	9c 89       	ldd	r25, Y+20	; 0x14
    4d6a:	98 8b       	std	Y+16, r25	; 0x10
    4d6c:	8f 87       	std	Y+15, r24	; 0x0f
    4d6e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4d70:	98 89       	ldd	r25, Y+16	; 0x10
    4d72:	01 97       	sbiw	r24, 0x01	; 1
    4d74:	f1 f7       	brne	.-4      	; 0x4d72 <APP_vWriteStringManyTimesLCD+0x132>
    4d76:	98 8b       	std	Y+16, r25	; 0x10
    4d78:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(250);
		LCD_vClear();
    4d7a:	0e 94 86 20 	call	0x410c	; 0x410c <LCD_vClear>
}
//-----------------
void APP_vWriteStringManyTimesLCD(u8 *Loc_u8Array,u8 Loc_u8size){
	LCD_vInit();
	u8 i;
	for(i=0;i<=((16/Loc_u8size));i++){
    4d7e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4d80:	8f 5f       	subi	r24, 0xFF	; 255
    4d82:	8d 8f       	std	Y+29, r24	; 0x1d
    4d84:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4d86:	e8 2f       	mov	r30, r24
    4d88:	f0 e0       	ldi	r31, 0x00	; 0
    4d8a:	88 a1       	ldd	r24, Y+32	; 0x20
    4d8c:	28 2f       	mov	r18, r24
    4d8e:	30 e0       	ldi	r19, 0x00	; 0
    4d90:	80 e1       	ldi	r24, 0x10	; 16
    4d92:	90 e0       	ldi	r25, 0x00	; 0
    4d94:	b9 01       	movw	r22, r18
    4d96:	0e 94 f1 35 	call	0x6be2	; 0x6be2 <__divmodhi4>
    4d9a:	cb 01       	movw	r24, r22
    4d9c:	8e 17       	cp	r24, r30
    4d9e:	9f 07       	cpc	r25, r31
    4da0:	0c f0       	brlt	.+2      	; 0x4da4 <APP_vWriteStringManyTimesLCD+0x164>
    4da2:	5f cf       	rjmp	.-322    	; 0x4c62 <APP_vWriteStringManyTimesLCD+0x22>
		LCD_vGoTo(LineOne,((Loc_u8size-1)*i));
		LCD_vWriteString(Loc_u8Array);
		_delay_ms(250);
		LCD_vClear();
	}
	for(i=0;i<=((16/Loc_u8size));i++){
    4da4:	1d 8e       	std	Y+29, r1	; 0x1d
    4da6:	91 c0       	rjmp	.+290    	; 0x4eca <APP_vWriteStringManyTimesLCD+0x28a>
		LCD_vGoTo(LineTwo,((Loc_u8size-1)*i));
    4da8:	88 a1       	ldd	r24, Y+32	; 0x20
    4daa:	88 2f       	mov	r24, r24
    4dac:	90 e0       	ldi	r25, 0x00	; 0
    4dae:	9c 01       	movw	r18, r24
    4db0:	21 50       	subi	r18, 0x01	; 1
    4db2:	30 40       	sbci	r19, 0x00	; 0
    4db4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4db6:	88 2f       	mov	r24, r24
    4db8:	90 e0       	ldi	r25, 0x00	; 0
    4dba:	ac 01       	movw	r20, r24
    4dbc:	24 9f       	mul	r18, r20
    4dbe:	c0 01       	movw	r24, r0
    4dc0:	25 9f       	mul	r18, r21
    4dc2:	90 0d       	add	r25, r0
    4dc4:	34 9f       	mul	r19, r20
    4dc6:	90 0d       	add	r25, r0
    4dc8:	11 24       	eor	r1, r1
    4dca:	98 2f       	mov	r25, r24
    4dcc:	80 ec       	ldi	r24, 0xC0	; 192
    4dce:	69 2f       	mov	r22, r25
    4dd0:	0e 94 75 20 	call	0x40ea	; 0x40ea <LCD_vGoTo>
		LCD_vWriteString(Loc_u8Array);
    4dd4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4dd6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4dd8:	0e 94 0e 21 	call	0x421c	; 0x421c <LCD_vWriteString>
    4ddc:	80 e0       	ldi	r24, 0x00	; 0
    4dde:	90 e0       	ldi	r25, 0x00	; 0
    4de0:	aa e7       	ldi	r26, 0x7A	; 122
    4de2:	b3 e4       	ldi	r27, 0x43	; 67
    4de4:	8b 87       	std	Y+11, r24	; 0x0b
    4de6:	9c 87       	std	Y+12, r25	; 0x0c
    4de8:	ad 87       	std	Y+13, r26	; 0x0d
    4dea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4dec:	6b 85       	ldd	r22, Y+11	; 0x0b
    4dee:	7c 85       	ldd	r23, Y+12	; 0x0c
    4df0:	8d 85       	ldd	r24, Y+13	; 0x0d
    4df2:	9e 85       	ldd	r25, Y+14	; 0x0e
    4df4:	20 e0       	ldi	r18, 0x00	; 0
    4df6:	30 e0       	ldi	r19, 0x00	; 0
    4df8:	4a e7       	ldi	r20, 0x7A	; 122
    4dfa:	55 e4       	ldi	r21, 0x45	; 69
    4dfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e00:	dc 01       	movw	r26, r24
    4e02:	cb 01       	movw	r24, r22
    4e04:	8f 83       	std	Y+7, r24	; 0x07
    4e06:	98 87       	std	Y+8, r25	; 0x08
    4e08:	a9 87       	std	Y+9, r26	; 0x09
    4e0a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4e0c:	6f 81       	ldd	r22, Y+7	; 0x07
    4e0e:	78 85       	ldd	r23, Y+8	; 0x08
    4e10:	89 85       	ldd	r24, Y+9	; 0x09
    4e12:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e14:	20 e0       	ldi	r18, 0x00	; 0
    4e16:	30 e0       	ldi	r19, 0x00	; 0
    4e18:	40 e8       	ldi	r20, 0x80	; 128
    4e1a:	5f e3       	ldi	r21, 0x3F	; 63
    4e1c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4e20:	88 23       	and	r24, r24
    4e22:	2c f4       	brge	.+10     	; 0x4e2e <APP_vWriteStringManyTimesLCD+0x1ee>
		__ticks = 1;
    4e24:	81 e0       	ldi	r24, 0x01	; 1
    4e26:	90 e0       	ldi	r25, 0x00	; 0
    4e28:	9e 83       	std	Y+6, r25	; 0x06
    4e2a:	8d 83       	std	Y+5, r24	; 0x05
    4e2c:	3f c0       	rjmp	.+126    	; 0x4eac <APP_vWriteStringManyTimesLCD+0x26c>
	else if (__tmp > 65535)
    4e2e:	6f 81       	ldd	r22, Y+7	; 0x07
    4e30:	78 85       	ldd	r23, Y+8	; 0x08
    4e32:	89 85       	ldd	r24, Y+9	; 0x09
    4e34:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e36:	20 e0       	ldi	r18, 0x00	; 0
    4e38:	3f ef       	ldi	r19, 0xFF	; 255
    4e3a:	4f e7       	ldi	r20, 0x7F	; 127
    4e3c:	57 e4       	ldi	r21, 0x47	; 71
    4e3e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4e42:	18 16       	cp	r1, r24
    4e44:	4c f5       	brge	.+82     	; 0x4e98 <APP_vWriteStringManyTimesLCD+0x258>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e46:	6b 85       	ldd	r22, Y+11	; 0x0b
    4e48:	7c 85       	ldd	r23, Y+12	; 0x0c
    4e4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e4e:	20 e0       	ldi	r18, 0x00	; 0
    4e50:	30 e0       	ldi	r19, 0x00	; 0
    4e52:	40 e2       	ldi	r20, 0x20	; 32
    4e54:	51 e4       	ldi	r21, 0x41	; 65
    4e56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e5a:	dc 01       	movw	r26, r24
    4e5c:	cb 01       	movw	r24, r22
    4e5e:	bc 01       	movw	r22, r24
    4e60:	cd 01       	movw	r24, r26
    4e62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e66:	dc 01       	movw	r26, r24
    4e68:	cb 01       	movw	r24, r22
    4e6a:	9e 83       	std	Y+6, r25	; 0x06
    4e6c:	8d 83       	std	Y+5, r24	; 0x05
    4e6e:	0f c0       	rjmp	.+30     	; 0x4e8e <APP_vWriteStringManyTimesLCD+0x24e>
    4e70:	80 e9       	ldi	r24, 0x90	; 144
    4e72:	91 e0       	ldi	r25, 0x01	; 1
    4e74:	9c 83       	std	Y+4, r25	; 0x04
    4e76:	8b 83       	std	Y+3, r24	; 0x03
    4e78:	8b 81       	ldd	r24, Y+3	; 0x03
    4e7a:	9c 81       	ldd	r25, Y+4	; 0x04
    4e7c:	01 97       	sbiw	r24, 0x01	; 1
    4e7e:	f1 f7       	brne	.-4      	; 0x4e7c <APP_vWriteStringManyTimesLCD+0x23c>
    4e80:	9c 83       	std	Y+4, r25	; 0x04
    4e82:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e84:	8d 81       	ldd	r24, Y+5	; 0x05
    4e86:	9e 81       	ldd	r25, Y+6	; 0x06
    4e88:	01 97       	sbiw	r24, 0x01	; 1
    4e8a:	9e 83       	std	Y+6, r25	; 0x06
    4e8c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e8e:	8d 81       	ldd	r24, Y+5	; 0x05
    4e90:	9e 81       	ldd	r25, Y+6	; 0x06
    4e92:	00 97       	sbiw	r24, 0x00	; 0
    4e94:	69 f7       	brne	.-38     	; 0x4e70 <APP_vWriteStringManyTimesLCD+0x230>
    4e96:	14 c0       	rjmp	.+40     	; 0x4ec0 <APP_vWriteStringManyTimesLCD+0x280>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e98:	6f 81       	ldd	r22, Y+7	; 0x07
    4e9a:	78 85       	ldd	r23, Y+8	; 0x08
    4e9c:	89 85       	ldd	r24, Y+9	; 0x09
    4e9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ea0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ea4:	dc 01       	movw	r26, r24
    4ea6:	cb 01       	movw	r24, r22
    4ea8:	9e 83       	std	Y+6, r25	; 0x06
    4eaa:	8d 83       	std	Y+5, r24	; 0x05
    4eac:	8d 81       	ldd	r24, Y+5	; 0x05
    4eae:	9e 81       	ldd	r25, Y+6	; 0x06
    4eb0:	9a 83       	std	Y+2, r25	; 0x02
    4eb2:	89 83       	std	Y+1, r24	; 0x01
    4eb4:	89 81       	ldd	r24, Y+1	; 0x01
    4eb6:	9a 81       	ldd	r25, Y+2	; 0x02
    4eb8:	01 97       	sbiw	r24, 0x01	; 1
    4eba:	f1 f7       	brne	.-4      	; 0x4eb8 <APP_vWriteStringManyTimesLCD+0x278>
    4ebc:	9a 83       	std	Y+2, r25	; 0x02
    4ebe:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(250);
		LCD_vClear();
    4ec0:	0e 94 86 20 	call	0x410c	; 0x410c <LCD_vClear>
		LCD_vGoTo(LineOne,((Loc_u8size-1)*i));
		LCD_vWriteString(Loc_u8Array);
		_delay_ms(250);
		LCD_vClear();
	}
	for(i=0;i<=((16/Loc_u8size));i++){
    4ec4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4ec6:	8f 5f       	subi	r24, 0xFF	; 255
    4ec8:	8d 8f       	std	Y+29, r24	; 0x1d
    4eca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4ecc:	e8 2f       	mov	r30, r24
    4ece:	f0 e0       	ldi	r31, 0x00	; 0
    4ed0:	88 a1       	ldd	r24, Y+32	; 0x20
    4ed2:	28 2f       	mov	r18, r24
    4ed4:	30 e0       	ldi	r19, 0x00	; 0
    4ed6:	80 e1       	ldi	r24, 0x10	; 16
    4ed8:	90 e0       	ldi	r25, 0x00	; 0
    4eda:	b9 01       	movw	r22, r18
    4edc:	0e 94 f1 35 	call	0x6be2	; 0x6be2 <__divmodhi4>
    4ee0:	cb 01       	movw	r24, r22
    4ee2:	8e 17       	cp	r24, r30
    4ee4:	9f 07       	cpc	r25, r31
    4ee6:	0c f0       	brlt	.+2      	; 0x4eea <APP_vWriteStringManyTimesLCD+0x2aa>
    4ee8:	5f cf       	rjmp	.-322    	; 0x4da8 <APP_vWriteStringManyTimesLCD+0x168>
		LCD_vGoTo(LineTwo,((Loc_u8size-1)*i));
		LCD_vWriteString(Loc_u8Array);
		_delay_ms(250);
		LCD_vClear();
	}
}
    4eea:	a0 96       	adiw	r28, 0x20	; 32
    4eec:	0f b6       	in	r0, 0x3f	; 63
    4eee:	f8 94       	cli
    4ef0:	de bf       	out	0x3e, r29	; 62
    4ef2:	0f be       	out	0x3f, r0	; 63
    4ef4:	cd bf       	out	0x3d, r28	; 61
    4ef6:	cf 91       	pop	r28
    4ef8:	df 91       	pop	r29
    4efa:	08 95       	ret

00004efc <APP_vToString>:
//-----------------
void APP_vToString(u8 str[], u16 num){
    4efc:	df 93       	push	r29
    4efe:	cf 93       	push	r28
    4f00:	cd b7       	in	r28, 0x3d	; 61
    4f02:	de b7       	in	r29, 0x3e	; 62
    4f04:	2a 97       	sbiw	r28, 0x0a	; 10
    4f06:	0f b6       	in	r0, 0x3f	; 63
    4f08:	f8 94       	cli
    4f0a:	de bf       	out	0x3e, r29	; 62
    4f0c:	0f be       	out	0x3f, r0	; 63
    4f0e:	cd bf       	out	0x3d, r28	; 61
    4f10:	98 87       	std	Y+8, r25	; 0x08
    4f12:	8f 83       	std	Y+7, r24	; 0x07
    4f14:	7a 87       	std	Y+10, r23	; 0x0a
    4f16:	69 87       	std	Y+9, r22	; 0x09
	u8 i, len = 0 ;
    4f18:	1d 82       	std	Y+5, r1	; 0x05
	u16 n,rem;
	n = num;
    4f1a:	89 85       	ldd	r24, Y+9	; 0x09
    4f1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f1e:	9c 83       	std	Y+4, r25	; 0x04
    4f20:	8b 83       	std	Y+3, r24	; 0x03
    4f22:	0d c0       	rjmp	.+26     	; 0x4f3e <APP_vToString+0x42>
	while (n != 0)
	{
		len++;
    4f24:	8d 81       	ldd	r24, Y+5	; 0x05
    4f26:	8f 5f       	subi	r24, 0xFF	; 255
    4f28:	8d 83       	std	Y+5, r24	; 0x05
		n /= 10;
    4f2a:	8b 81       	ldd	r24, Y+3	; 0x03
    4f2c:	9c 81       	ldd	r25, Y+4	; 0x04
    4f2e:	2a e0       	ldi	r18, 0x0A	; 10
    4f30:	30 e0       	ldi	r19, 0x00	; 0
    4f32:	b9 01       	movw	r22, r18
    4f34:	0e 94 dd 35 	call	0x6bba	; 0x6bba <__udivmodhi4>
    4f38:	cb 01       	movw	r24, r22
    4f3a:	9c 83       	std	Y+4, r25	; 0x04
    4f3c:	8b 83       	std	Y+3, r24	; 0x03
//-----------------
void APP_vToString(u8 str[], u16 num){
	u8 i, len = 0 ;
	u16 n,rem;
	n = num;
	while (n != 0)
    4f3e:	8b 81       	ldd	r24, Y+3	; 0x03
    4f40:	9c 81       	ldd	r25, Y+4	; 0x04
    4f42:	00 97       	sbiw	r24, 0x00	; 0
    4f44:	79 f7       	brne	.-34     	; 0x4f24 <APP_vToString+0x28>
	{
		len++;
		n /= 10;
	}
	for (i = 0; i < len; i++)
    4f46:	1e 82       	std	Y+6, r1	; 0x06
    4f48:	29 c0       	rjmp	.+82     	; 0x4f9c <APP_vToString+0xa0>
	{
		rem = num % 10;
    4f4a:	89 85       	ldd	r24, Y+9	; 0x09
    4f4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f4e:	2a e0       	ldi	r18, 0x0A	; 10
    4f50:	30 e0       	ldi	r19, 0x00	; 0
    4f52:	b9 01       	movw	r22, r18
    4f54:	0e 94 dd 35 	call	0x6bba	; 0x6bba <__udivmodhi4>
    4f58:	9a 83       	std	Y+2, r25	; 0x02
    4f5a:	89 83       	std	Y+1, r24	; 0x01
		num = num / 10;
    4f5c:	89 85       	ldd	r24, Y+9	; 0x09
    4f5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f60:	2a e0       	ldi	r18, 0x0A	; 10
    4f62:	30 e0       	ldi	r19, 0x00	; 0
    4f64:	b9 01       	movw	r22, r18
    4f66:	0e 94 dd 35 	call	0x6bba	; 0x6bba <__udivmodhi4>
    4f6a:	cb 01       	movw	r24, r22
    4f6c:	9a 87       	std	Y+10, r25	; 0x0a
    4f6e:	89 87       	std	Y+9, r24	; 0x09
		str[len - (i + 1)] = rem + '0';
    4f70:	8d 81       	ldd	r24, Y+5	; 0x05
    4f72:	28 2f       	mov	r18, r24
    4f74:	30 e0       	ldi	r19, 0x00	; 0
    4f76:	8e 81       	ldd	r24, Y+6	; 0x06
    4f78:	88 2f       	mov	r24, r24
    4f7a:	90 e0       	ldi	r25, 0x00	; 0
    4f7c:	80 95       	com	r24
    4f7e:	90 95       	com	r25
    4f80:	82 0f       	add	r24, r18
    4f82:	93 1f       	adc	r25, r19
    4f84:	9c 01       	movw	r18, r24
    4f86:	8f 81       	ldd	r24, Y+7	; 0x07
    4f88:	98 85       	ldd	r25, Y+8	; 0x08
    4f8a:	fc 01       	movw	r30, r24
    4f8c:	e2 0f       	add	r30, r18
    4f8e:	f3 1f       	adc	r31, r19
    4f90:	89 81       	ldd	r24, Y+1	; 0x01
    4f92:	80 5d       	subi	r24, 0xD0	; 208
    4f94:	80 83       	st	Z, r24
	while (n != 0)
	{
		len++;
		n /= 10;
	}
	for (i = 0; i < len; i++)
    4f96:	8e 81       	ldd	r24, Y+6	; 0x06
    4f98:	8f 5f       	subi	r24, 0xFF	; 255
    4f9a:	8e 83       	std	Y+6, r24	; 0x06
    4f9c:	9e 81       	ldd	r25, Y+6	; 0x06
    4f9e:	8d 81       	ldd	r24, Y+5	; 0x05
    4fa0:	98 17       	cp	r25, r24
    4fa2:	98 f2       	brcs	.-90     	; 0x4f4a <APP_vToString+0x4e>
	{
		rem = num % 10;
		num = num / 10;
		str[len - (i + 1)] = rem + '0';
	}
	str[len] = '\0';
    4fa4:	8d 81       	ldd	r24, Y+5	; 0x05
    4fa6:	28 2f       	mov	r18, r24
    4fa8:	30 e0       	ldi	r19, 0x00	; 0
    4faa:	8f 81       	ldd	r24, Y+7	; 0x07
    4fac:	98 85       	ldd	r25, Y+8	; 0x08
    4fae:	fc 01       	movw	r30, r24
    4fb0:	e2 0f       	add	r30, r18
    4fb2:	f3 1f       	adc	r31, r19
    4fb4:	10 82       	st	Z, r1
}
    4fb6:	2a 96       	adiw	r28, 0x0a	; 10
    4fb8:	0f b6       	in	r0, 0x3f	; 63
    4fba:	f8 94       	cli
    4fbc:	de bf       	out	0x3e, r29	; 62
    4fbe:	0f be       	out	0x3f, r0	; 63
    4fc0:	cd bf       	out	0x3d, r28	; 61
    4fc2:	cf 91       	pop	r28
    4fc4:	df 91       	pop	r29
    4fc6:	08 95       	ret

00004fc8 <APP_vCalculatorLCD>:
//-----------------
void APP_vCalculatorLCD(){
    4fc8:	0f 93       	push	r16
    4fca:	1f 93       	push	r17
    4fcc:	df 93       	push	r29
    4fce:	cf 93       	push	r28
    4fd0:	cd b7       	in	r28, 0x3d	; 61
    4fd2:	de b7       	in	r29, 0x3e	; 62
    4fd4:	c8 57       	subi	r28, 0x78	; 120
    4fd6:	d0 40       	sbci	r29, 0x00	; 0
    4fd8:	0f b6       	in	r0, 0x3f	; 63
    4fda:	f8 94       	cli
    4fdc:	de bf       	out	0x3e, r29	; 62
    4fde:	0f be       	out	0x3f, r0	; 63
    4fe0:	cd bf       	out	0x3d, r28	; 61
	//-- while(!=)
	u8 Loc_u8Num1=0,Loc_u8Num2,Loc_u8Symbol1,Loc_u8Symbol2,Loc_u8sum;
    4fe2:	fe 01       	movw	r30, r28
    4fe4:	eb 58       	subi	r30, 0x8B	; 139
    4fe6:	ff 4f       	sbci	r31, 0xFF	; 255
    4fe8:	10 82       	st	Z, r1
	KAYPAD_vInit();
    4fea:	0e 94 8f 21 	call	0x431e	; 0x431e <KAYPAD_vInit>
//Busy Wait
	while(1){
		Loc_u8Num1=KAYPAD_u8GetKey();
    4fee:	0e 94 9e 21 	call	0x433c	; 0x433c <KAYPAD_u8GetKey>
    4ff2:	fe 01       	movw	r30, r28
    4ff4:	eb 58       	subi	r30, 0x8B	; 139
    4ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ff8:	80 83       	st	Z, r24
    4ffa:	fe 01       	movw	r30, r28
    4ffc:	e3 59       	subi	r30, 0x93	; 147
    4ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    5000:	80 e0       	ldi	r24, 0x00	; 0
    5002:	90 e0       	ldi	r25, 0x00	; 0
    5004:	a8 e4       	ldi	r26, 0x48	; 72
    5006:	b2 e4       	ldi	r27, 0x42	; 66
    5008:	80 83       	st	Z, r24
    500a:	91 83       	std	Z+1, r25	; 0x01
    500c:	a2 83       	std	Z+2, r26	; 0x02
    500e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5010:	8e 01       	movw	r16, r28
    5012:	07 59       	subi	r16, 0x97	; 151
    5014:	1f 4f       	sbci	r17, 0xFF	; 255
    5016:	fe 01       	movw	r30, r28
    5018:	e3 59       	subi	r30, 0x93	; 147
    501a:	ff 4f       	sbci	r31, 0xFF	; 255
    501c:	60 81       	ld	r22, Z
    501e:	71 81       	ldd	r23, Z+1	; 0x01
    5020:	82 81       	ldd	r24, Z+2	; 0x02
    5022:	93 81       	ldd	r25, Z+3	; 0x03
    5024:	20 e0       	ldi	r18, 0x00	; 0
    5026:	30 e0       	ldi	r19, 0x00	; 0
    5028:	4a e7       	ldi	r20, 0x7A	; 122
    502a:	55 e4       	ldi	r21, 0x45	; 69
    502c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5030:	dc 01       	movw	r26, r24
    5032:	cb 01       	movw	r24, r22
    5034:	f8 01       	movw	r30, r16
    5036:	80 83       	st	Z, r24
    5038:	91 83       	std	Z+1, r25	; 0x01
    503a:	a2 83       	std	Z+2, r26	; 0x02
    503c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    503e:	fe 01       	movw	r30, r28
    5040:	e7 59       	subi	r30, 0x97	; 151
    5042:	ff 4f       	sbci	r31, 0xFF	; 255
    5044:	60 81       	ld	r22, Z
    5046:	71 81       	ldd	r23, Z+1	; 0x01
    5048:	82 81       	ldd	r24, Z+2	; 0x02
    504a:	93 81       	ldd	r25, Z+3	; 0x03
    504c:	20 e0       	ldi	r18, 0x00	; 0
    504e:	30 e0       	ldi	r19, 0x00	; 0
    5050:	40 e8       	ldi	r20, 0x80	; 128
    5052:	5f e3       	ldi	r21, 0x3F	; 63
    5054:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5058:	88 23       	and	r24, r24
    505a:	44 f4       	brge	.+16     	; 0x506c <APP_vCalculatorLCD+0xa4>
		__ticks = 1;
    505c:	fe 01       	movw	r30, r28
    505e:	e9 59       	subi	r30, 0x99	; 153
    5060:	ff 4f       	sbci	r31, 0xFF	; 255
    5062:	81 e0       	ldi	r24, 0x01	; 1
    5064:	90 e0       	ldi	r25, 0x00	; 0
    5066:	91 83       	std	Z+1, r25	; 0x01
    5068:	80 83       	st	Z, r24
    506a:	64 c0       	rjmp	.+200    	; 0x5134 <APP_vCalculatorLCD+0x16c>
	else if (__tmp > 65535)
    506c:	fe 01       	movw	r30, r28
    506e:	e7 59       	subi	r30, 0x97	; 151
    5070:	ff 4f       	sbci	r31, 0xFF	; 255
    5072:	60 81       	ld	r22, Z
    5074:	71 81       	ldd	r23, Z+1	; 0x01
    5076:	82 81       	ldd	r24, Z+2	; 0x02
    5078:	93 81       	ldd	r25, Z+3	; 0x03
    507a:	20 e0       	ldi	r18, 0x00	; 0
    507c:	3f ef       	ldi	r19, 0xFF	; 255
    507e:	4f e7       	ldi	r20, 0x7F	; 127
    5080:	57 e4       	ldi	r21, 0x47	; 71
    5082:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5086:	18 16       	cp	r1, r24
    5088:	0c f0       	brlt	.+2      	; 0x508c <APP_vCalculatorLCD+0xc4>
    508a:	43 c0       	rjmp	.+134    	; 0x5112 <APP_vCalculatorLCD+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    508c:	fe 01       	movw	r30, r28
    508e:	e3 59       	subi	r30, 0x93	; 147
    5090:	ff 4f       	sbci	r31, 0xFF	; 255
    5092:	60 81       	ld	r22, Z
    5094:	71 81       	ldd	r23, Z+1	; 0x01
    5096:	82 81       	ldd	r24, Z+2	; 0x02
    5098:	93 81       	ldd	r25, Z+3	; 0x03
    509a:	20 e0       	ldi	r18, 0x00	; 0
    509c:	30 e0       	ldi	r19, 0x00	; 0
    509e:	40 e2       	ldi	r20, 0x20	; 32
    50a0:	51 e4       	ldi	r21, 0x41	; 65
    50a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50a6:	dc 01       	movw	r26, r24
    50a8:	cb 01       	movw	r24, r22
    50aa:	8e 01       	movw	r16, r28
    50ac:	09 59       	subi	r16, 0x99	; 153
    50ae:	1f 4f       	sbci	r17, 0xFF	; 255
    50b0:	bc 01       	movw	r22, r24
    50b2:	cd 01       	movw	r24, r26
    50b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50b8:	dc 01       	movw	r26, r24
    50ba:	cb 01       	movw	r24, r22
    50bc:	f8 01       	movw	r30, r16
    50be:	91 83       	std	Z+1, r25	; 0x01
    50c0:	80 83       	st	Z, r24
    50c2:	1f c0       	rjmp	.+62     	; 0x5102 <APP_vCalculatorLCD+0x13a>
    50c4:	fe 01       	movw	r30, r28
    50c6:	eb 59       	subi	r30, 0x9B	; 155
    50c8:	ff 4f       	sbci	r31, 0xFF	; 255
    50ca:	80 e9       	ldi	r24, 0x90	; 144
    50cc:	91 e0       	ldi	r25, 0x01	; 1
    50ce:	91 83       	std	Z+1, r25	; 0x01
    50d0:	80 83       	st	Z, r24
    50d2:	fe 01       	movw	r30, r28
    50d4:	eb 59       	subi	r30, 0x9B	; 155
    50d6:	ff 4f       	sbci	r31, 0xFF	; 255
    50d8:	80 81       	ld	r24, Z
    50da:	91 81       	ldd	r25, Z+1	; 0x01
    50dc:	01 97       	sbiw	r24, 0x01	; 1
    50de:	f1 f7       	brne	.-4      	; 0x50dc <APP_vCalculatorLCD+0x114>
    50e0:	fe 01       	movw	r30, r28
    50e2:	eb 59       	subi	r30, 0x9B	; 155
    50e4:	ff 4f       	sbci	r31, 0xFF	; 255
    50e6:	91 83       	std	Z+1, r25	; 0x01
    50e8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    50ea:	de 01       	movw	r26, r28
    50ec:	a9 59       	subi	r26, 0x99	; 153
    50ee:	bf 4f       	sbci	r27, 0xFF	; 255
    50f0:	fe 01       	movw	r30, r28
    50f2:	e9 59       	subi	r30, 0x99	; 153
    50f4:	ff 4f       	sbci	r31, 0xFF	; 255
    50f6:	80 81       	ld	r24, Z
    50f8:	91 81       	ldd	r25, Z+1	; 0x01
    50fa:	01 97       	sbiw	r24, 0x01	; 1
    50fc:	11 96       	adiw	r26, 0x01	; 1
    50fe:	9c 93       	st	X, r25
    5100:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5102:	fe 01       	movw	r30, r28
    5104:	e9 59       	subi	r30, 0x99	; 153
    5106:	ff 4f       	sbci	r31, 0xFF	; 255
    5108:	80 81       	ld	r24, Z
    510a:	91 81       	ldd	r25, Z+1	; 0x01
    510c:	00 97       	sbiw	r24, 0x00	; 0
    510e:	d1 f6       	brne	.-76     	; 0x50c4 <APP_vCalculatorLCD+0xfc>
    5110:	28 c0       	rjmp	.+80     	; 0x5162 <APP_vCalculatorLCD+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5112:	8e 01       	movw	r16, r28
    5114:	09 59       	subi	r16, 0x99	; 153
    5116:	1f 4f       	sbci	r17, 0xFF	; 255
    5118:	fe 01       	movw	r30, r28
    511a:	e7 59       	subi	r30, 0x97	; 151
    511c:	ff 4f       	sbci	r31, 0xFF	; 255
    511e:	60 81       	ld	r22, Z
    5120:	71 81       	ldd	r23, Z+1	; 0x01
    5122:	82 81       	ldd	r24, Z+2	; 0x02
    5124:	93 81       	ldd	r25, Z+3	; 0x03
    5126:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    512a:	dc 01       	movw	r26, r24
    512c:	cb 01       	movw	r24, r22
    512e:	f8 01       	movw	r30, r16
    5130:	91 83       	std	Z+1, r25	; 0x01
    5132:	80 83       	st	Z, r24
    5134:	de 01       	movw	r26, r28
    5136:	ad 59       	subi	r26, 0x9D	; 157
    5138:	bf 4f       	sbci	r27, 0xFF	; 255
    513a:	fe 01       	movw	r30, r28
    513c:	e9 59       	subi	r30, 0x99	; 153
    513e:	ff 4f       	sbci	r31, 0xFF	; 255
    5140:	80 81       	ld	r24, Z
    5142:	91 81       	ldd	r25, Z+1	; 0x01
    5144:	11 96       	adiw	r26, 0x01	; 1
    5146:	9c 93       	st	X, r25
    5148:	8e 93       	st	-X, r24
    514a:	fe 01       	movw	r30, r28
    514c:	ed 59       	subi	r30, 0x9D	; 157
    514e:	ff 4f       	sbci	r31, 0xFF	; 255
    5150:	80 81       	ld	r24, Z
    5152:	91 81       	ldd	r25, Z+1	; 0x01
    5154:	01 97       	sbiw	r24, 0x01	; 1
    5156:	f1 f7       	brne	.-4      	; 0x5154 <APP_vCalculatorLCD+0x18c>
    5158:	fe 01       	movw	r30, r28
    515a:	ed 59       	subi	r30, 0x9D	; 157
    515c:	ff 4f       	sbci	r31, 0xFF	; 255
    515e:	91 83       	std	Z+1, r25	; 0x01
    5160:	80 83       	st	Z, r24
		_delay_ms(50);
		if(Loc_u8Num1!=0xff){
    5162:	fe 01       	movw	r30, r28
    5164:	eb 58       	subi	r30, 0x8B	; 139
    5166:	ff 4f       	sbci	r31, 0xFF	; 255
    5168:	80 81       	ld	r24, Z
    516a:	8f 3f       	cpi	r24, 0xFF	; 255
    516c:	09 f4       	brne	.+2      	; 0x5170 <APP_vCalculatorLCD+0x1a8>
    516e:	3f cf       	rjmp	.-386    	; 0x4fee <APP_vCalculatorLCD+0x26>
			LCD_vInit();
    5170:	0e 94 af 1a 	call	0x355e	; 0x355e <LCD_vInit>
			LCD_vWriteCharacter(Loc_u8Num1+48);
    5174:	fe 01       	movw	r30, r28
    5176:	eb 58       	subi	r30, 0x8B	; 139
    5178:	ff 4f       	sbci	r31, 0xFF	; 255
    517a:	80 81       	ld	r24, Z
    517c:	80 5d       	subi	r24, 0xD0	; 208
    517e:	0e 94 4b 1f 	call	0x3e96	; 0x3e96 <LCD_vWriteCharacter>
    5182:	fe 01       	movw	r30, r28
    5184:	e1 5a       	subi	r30, 0xA1	; 161
    5186:	ff 4f       	sbci	r31, 0xFF	; 255
    5188:	80 e0       	ldi	r24, 0x00	; 0
    518a:	90 e0       	ldi	r25, 0x00	; 0
    518c:	a8 e4       	ldi	r26, 0x48	; 72
    518e:	b2 e4       	ldi	r27, 0x42	; 66
    5190:	80 83       	st	Z, r24
    5192:	91 83       	std	Z+1, r25	; 0x01
    5194:	a2 83       	std	Z+2, r26	; 0x02
    5196:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5198:	8e 01       	movw	r16, r28
    519a:	05 5a       	subi	r16, 0xA5	; 165
    519c:	1f 4f       	sbci	r17, 0xFF	; 255
    519e:	fe 01       	movw	r30, r28
    51a0:	e1 5a       	subi	r30, 0xA1	; 161
    51a2:	ff 4f       	sbci	r31, 0xFF	; 255
    51a4:	60 81       	ld	r22, Z
    51a6:	71 81       	ldd	r23, Z+1	; 0x01
    51a8:	82 81       	ldd	r24, Z+2	; 0x02
    51aa:	93 81       	ldd	r25, Z+3	; 0x03
    51ac:	20 e0       	ldi	r18, 0x00	; 0
    51ae:	30 e0       	ldi	r19, 0x00	; 0
    51b0:	4a e7       	ldi	r20, 0x7A	; 122
    51b2:	55 e4       	ldi	r21, 0x45	; 69
    51b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    51b8:	dc 01       	movw	r26, r24
    51ba:	cb 01       	movw	r24, r22
    51bc:	f8 01       	movw	r30, r16
    51be:	80 83       	st	Z, r24
    51c0:	91 83       	std	Z+1, r25	; 0x01
    51c2:	a2 83       	std	Z+2, r26	; 0x02
    51c4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    51c6:	fe 01       	movw	r30, r28
    51c8:	e5 5a       	subi	r30, 0xA5	; 165
    51ca:	ff 4f       	sbci	r31, 0xFF	; 255
    51cc:	60 81       	ld	r22, Z
    51ce:	71 81       	ldd	r23, Z+1	; 0x01
    51d0:	82 81       	ldd	r24, Z+2	; 0x02
    51d2:	93 81       	ldd	r25, Z+3	; 0x03
    51d4:	20 e0       	ldi	r18, 0x00	; 0
    51d6:	30 e0       	ldi	r19, 0x00	; 0
    51d8:	40 e8       	ldi	r20, 0x80	; 128
    51da:	5f e3       	ldi	r21, 0x3F	; 63
    51dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    51e0:	88 23       	and	r24, r24
    51e2:	44 f4       	brge	.+16     	; 0x51f4 <APP_vCalculatorLCD+0x22c>
		__ticks = 1;
    51e4:	fe 01       	movw	r30, r28
    51e6:	e7 5a       	subi	r30, 0xA7	; 167
    51e8:	ff 4f       	sbci	r31, 0xFF	; 255
    51ea:	81 e0       	ldi	r24, 0x01	; 1
    51ec:	90 e0       	ldi	r25, 0x00	; 0
    51ee:	91 83       	std	Z+1, r25	; 0x01
    51f0:	80 83       	st	Z, r24
    51f2:	64 c0       	rjmp	.+200    	; 0x52bc <APP_vCalculatorLCD+0x2f4>
	else if (__tmp > 65535)
    51f4:	fe 01       	movw	r30, r28
    51f6:	e5 5a       	subi	r30, 0xA5	; 165
    51f8:	ff 4f       	sbci	r31, 0xFF	; 255
    51fa:	60 81       	ld	r22, Z
    51fc:	71 81       	ldd	r23, Z+1	; 0x01
    51fe:	82 81       	ldd	r24, Z+2	; 0x02
    5200:	93 81       	ldd	r25, Z+3	; 0x03
    5202:	20 e0       	ldi	r18, 0x00	; 0
    5204:	3f ef       	ldi	r19, 0xFF	; 255
    5206:	4f e7       	ldi	r20, 0x7F	; 127
    5208:	57 e4       	ldi	r21, 0x47	; 71
    520a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    520e:	18 16       	cp	r1, r24
    5210:	0c f0       	brlt	.+2      	; 0x5214 <APP_vCalculatorLCD+0x24c>
    5212:	43 c0       	rjmp	.+134    	; 0x529a <APP_vCalculatorLCD+0x2d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5214:	fe 01       	movw	r30, r28
    5216:	e1 5a       	subi	r30, 0xA1	; 161
    5218:	ff 4f       	sbci	r31, 0xFF	; 255
    521a:	60 81       	ld	r22, Z
    521c:	71 81       	ldd	r23, Z+1	; 0x01
    521e:	82 81       	ldd	r24, Z+2	; 0x02
    5220:	93 81       	ldd	r25, Z+3	; 0x03
    5222:	20 e0       	ldi	r18, 0x00	; 0
    5224:	30 e0       	ldi	r19, 0x00	; 0
    5226:	40 e2       	ldi	r20, 0x20	; 32
    5228:	51 e4       	ldi	r21, 0x41	; 65
    522a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    522e:	dc 01       	movw	r26, r24
    5230:	cb 01       	movw	r24, r22
    5232:	8e 01       	movw	r16, r28
    5234:	07 5a       	subi	r16, 0xA7	; 167
    5236:	1f 4f       	sbci	r17, 0xFF	; 255
    5238:	bc 01       	movw	r22, r24
    523a:	cd 01       	movw	r24, r26
    523c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5240:	dc 01       	movw	r26, r24
    5242:	cb 01       	movw	r24, r22
    5244:	f8 01       	movw	r30, r16
    5246:	91 83       	std	Z+1, r25	; 0x01
    5248:	80 83       	st	Z, r24
    524a:	1f c0       	rjmp	.+62     	; 0x528a <APP_vCalculatorLCD+0x2c2>
    524c:	fe 01       	movw	r30, r28
    524e:	e9 5a       	subi	r30, 0xA9	; 169
    5250:	ff 4f       	sbci	r31, 0xFF	; 255
    5252:	80 e9       	ldi	r24, 0x90	; 144
    5254:	91 e0       	ldi	r25, 0x01	; 1
    5256:	91 83       	std	Z+1, r25	; 0x01
    5258:	80 83       	st	Z, r24
    525a:	fe 01       	movw	r30, r28
    525c:	e9 5a       	subi	r30, 0xA9	; 169
    525e:	ff 4f       	sbci	r31, 0xFF	; 255
    5260:	80 81       	ld	r24, Z
    5262:	91 81       	ldd	r25, Z+1	; 0x01
    5264:	01 97       	sbiw	r24, 0x01	; 1
    5266:	f1 f7       	brne	.-4      	; 0x5264 <APP_vCalculatorLCD+0x29c>
    5268:	fe 01       	movw	r30, r28
    526a:	e9 5a       	subi	r30, 0xA9	; 169
    526c:	ff 4f       	sbci	r31, 0xFF	; 255
    526e:	91 83       	std	Z+1, r25	; 0x01
    5270:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5272:	de 01       	movw	r26, r28
    5274:	a7 5a       	subi	r26, 0xA7	; 167
    5276:	bf 4f       	sbci	r27, 0xFF	; 255
    5278:	fe 01       	movw	r30, r28
    527a:	e7 5a       	subi	r30, 0xA7	; 167
    527c:	ff 4f       	sbci	r31, 0xFF	; 255
    527e:	80 81       	ld	r24, Z
    5280:	91 81       	ldd	r25, Z+1	; 0x01
    5282:	01 97       	sbiw	r24, 0x01	; 1
    5284:	11 96       	adiw	r26, 0x01	; 1
    5286:	9c 93       	st	X, r25
    5288:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    528a:	fe 01       	movw	r30, r28
    528c:	e7 5a       	subi	r30, 0xA7	; 167
    528e:	ff 4f       	sbci	r31, 0xFF	; 255
    5290:	80 81       	ld	r24, Z
    5292:	91 81       	ldd	r25, Z+1	; 0x01
    5294:	00 97       	sbiw	r24, 0x00	; 0
    5296:	d1 f6       	brne	.-76     	; 0x524c <APP_vCalculatorLCD+0x284>
    5298:	27 c0       	rjmp	.+78     	; 0x52e8 <APP_vCalculatorLCD+0x320>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    529a:	8e 01       	movw	r16, r28
    529c:	07 5a       	subi	r16, 0xA7	; 167
    529e:	1f 4f       	sbci	r17, 0xFF	; 255
    52a0:	fe 01       	movw	r30, r28
    52a2:	e5 5a       	subi	r30, 0xA5	; 165
    52a4:	ff 4f       	sbci	r31, 0xFF	; 255
    52a6:	60 81       	ld	r22, Z
    52a8:	71 81       	ldd	r23, Z+1	; 0x01
    52aa:	82 81       	ldd	r24, Z+2	; 0x02
    52ac:	93 81       	ldd	r25, Z+3	; 0x03
    52ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52b2:	dc 01       	movw	r26, r24
    52b4:	cb 01       	movw	r24, r22
    52b6:	f8 01       	movw	r30, r16
    52b8:	91 83       	std	Z+1, r25	; 0x01
    52ba:	80 83       	st	Z, r24
    52bc:	de 01       	movw	r26, r28
    52be:	ab 5a       	subi	r26, 0xAB	; 171
    52c0:	bf 4f       	sbci	r27, 0xFF	; 255
    52c2:	fe 01       	movw	r30, r28
    52c4:	e7 5a       	subi	r30, 0xA7	; 167
    52c6:	ff 4f       	sbci	r31, 0xFF	; 255
    52c8:	80 81       	ld	r24, Z
    52ca:	91 81       	ldd	r25, Z+1	; 0x01
    52cc:	8d 93       	st	X+, r24
    52ce:	9c 93       	st	X, r25
    52d0:	fe 01       	movw	r30, r28
    52d2:	eb 5a       	subi	r30, 0xAB	; 171
    52d4:	ff 4f       	sbci	r31, 0xFF	; 255
    52d6:	80 81       	ld	r24, Z
    52d8:	91 81       	ldd	r25, Z+1	; 0x01
    52da:	01 97       	sbiw	r24, 0x01	; 1
    52dc:	f1 f7       	brne	.-4      	; 0x52da <APP_vCalculatorLCD+0x312>
    52de:	fe 01       	movw	r30, r28
    52e0:	eb 5a       	subi	r30, 0xAB	; 171
    52e2:	ff 4f       	sbci	r31, 0xFF	; 255
    52e4:	91 83       	std	Z+1, r25	; 0x01
    52e6:	80 83       	st	Z, r24
			break;
		}
	}
	_delay_ms(50);
	KAYPAD_vInit();
    52e8:	0e 94 8f 21 	call	0x431e	; 0x431e <KAYPAD_vInit>
	//--- delete all while 1 and replace it with if that take v and it count
	while(1){
		Loc_u8Symbol1=KAYPAD_u8GetKey();
    52ec:	0e 94 9e 21 	call	0x433c	; 0x433c <KAYPAD_u8GetKey>
    52f0:	fe 01       	movw	r30, r28
    52f2:	ed 58       	subi	r30, 0x8D	; 141
    52f4:	ff 4f       	sbci	r31, 0xFF	; 255
    52f6:	80 83       	st	Z, r24
    52f8:	fe 01       	movw	r30, r28
    52fa:	ef 5a       	subi	r30, 0xAF	; 175
    52fc:	ff 4f       	sbci	r31, 0xFF	; 255
    52fe:	80 e0       	ldi	r24, 0x00	; 0
    5300:	90 e0       	ldi	r25, 0x00	; 0
    5302:	a8 e4       	ldi	r26, 0x48	; 72
    5304:	b2 e4       	ldi	r27, 0x42	; 66
    5306:	80 83       	st	Z, r24
    5308:	91 83       	std	Z+1, r25	; 0x01
    530a:	a2 83       	std	Z+2, r26	; 0x02
    530c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    530e:	8e 01       	movw	r16, r28
    5310:	03 5b       	subi	r16, 0xB3	; 179
    5312:	1f 4f       	sbci	r17, 0xFF	; 255
    5314:	fe 01       	movw	r30, r28
    5316:	ef 5a       	subi	r30, 0xAF	; 175
    5318:	ff 4f       	sbci	r31, 0xFF	; 255
    531a:	60 81       	ld	r22, Z
    531c:	71 81       	ldd	r23, Z+1	; 0x01
    531e:	82 81       	ldd	r24, Z+2	; 0x02
    5320:	93 81       	ldd	r25, Z+3	; 0x03
    5322:	20 e0       	ldi	r18, 0x00	; 0
    5324:	30 e0       	ldi	r19, 0x00	; 0
    5326:	4a e7       	ldi	r20, 0x7A	; 122
    5328:	55 e4       	ldi	r21, 0x45	; 69
    532a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    532e:	dc 01       	movw	r26, r24
    5330:	cb 01       	movw	r24, r22
    5332:	f8 01       	movw	r30, r16
    5334:	80 83       	st	Z, r24
    5336:	91 83       	std	Z+1, r25	; 0x01
    5338:	a2 83       	std	Z+2, r26	; 0x02
    533a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    533c:	fe 01       	movw	r30, r28
    533e:	e3 5b       	subi	r30, 0xB3	; 179
    5340:	ff 4f       	sbci	r31, 0xFF	; 255
    5342:	60 81       	ld	r22, Z
    5344:	71 81       	ldd	r23, Z+1	; 0x01
    5346:	82 81       	ldd	r24, Z+2	; 0x02
    5348:	93 81       	ldd	r25, Z+3	; 0x03
    534a:	20 e0       	ldi	r18, 0x00	; 0
    534c:	30 e0       	ldi	r19, 0x00	; 0
    534e:	40 e8       	ldi	r20, 0x80	; 128
    5350:	5f e3       	ldi	r21, 0x3F	; 63
    5352:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5356:	88 23       	and	r24, r24
    5358:	44 f4       	brge	.+16     	; 0x536a <APP_vCalculatorLCD+0x3a2>
		__ticks = 1;
    535a:	fe 01       	movw	r30, r28
    535c:	e5 5b       	subi	r30, 0xB5	; 181
    535e:	ff 4f       	sbci	r31, 0xFF	; 255
    5360:	81 e0       	ldi	r24, 0x01	; 1
    5362:	90 e0       	ldi	r25, 0x00	; 0
    5364:	91 83       	std	Z+1, r25	; 0x01
    5366:	80 83       	st	Z, r24
    5368:	64 c0       	rjmp	.+200    	; 0x5432 <APP_vCalculatorLCD+0x46a>
	else if (__tmp > 65535)
    536a:	fe 01       	movw	r30, r28
    536c:	e3 5b       	subi	r30, 0xB3	; 179
    536e:	ff 4f       	sbci	r31, 0xFF	; 255
    5370:	60 81       	ld	r22, Z
    5372:	71 81       	ldd	r23, Z+1	; 0x01
    5374:	82 81       	ldd	r24, Z+2	; 0x02
    5376:	93 81       	ldd	r25, Z+3	; 0x03
    5378:	20 e0       	ldi	r18, 0x00	; 0
    537a:	3f ef       	ldi	r19, 0xFF	; 255
    537c:	4f e7       	ldi	r20, 0x7F	; 127
    537e:	57 e4       	ldi	r21, 0x47	; 71
    5380:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5384:	18 16       	cp	r1, r24
    5386:	0c f0       	brlt	.+2      	; 0x538a <APP_vCalculatorLCD+0x3c2>
    5388:	43 c0       	rjmp	.+134    	; 0x5410 <APP_vCalculatorLCD+0x448>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    538a:	fe 01       	movw	r30, r28
    538c:	ef 5a       	subi	r30, 0xAF	; 175
    538e:	ff 4f       	sbci	r31, 0xFF	; 255
    5390:	60 81       	ld	r22, Z
    5392:	71 81       	ldd	r23, Z+1	; 0x01
    5394:	82 81       	ldd	r24, Z+2	; 0x02
    5396:	93 81       	ldd	r25, Z+3	; 0x03
    5398:	20 e0       	ldi	r18, 0x00	; 0
    539a:	30 e0       	ldi	r19, 0x00	; 0
    539c:	40 e2       	ldi	r20, 0x20	; 32
    539e:	51 e4       	ldi	r21, 0x41	; 65
    53a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53a4:	dc 01       	movw	r26, r24
    53a6:	cb 01       	movw	r24, r22
    53a8:	8e 01       	movw	r16, r28
    53aa:	05 5b       	subi	r16, 0xB5	; 181
    53ac:	1f 4f       	sbci	r17, 0xFF	; 255
    53ae:	bc 01       	movw	r22, r24
    53b0:	cd 01       	movw	r24, r26
    53b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    53b6:	dc 01       	movw	r26, r24
    53b8:	cb 01       	movw	r24, r22
    53ba:	f8 01       	movw	r30, r16
    53bc:	91 83       	std	Z+1, r25	; 0x01
    53be:	80 83       	st	Z, r24
    53c0:	1f c0       	rjmp	.+62     	; 0x5400 <APP_vCalculatorLCD+0x438>
    53c2:	fe 01       	movw	r30, r28
    53c4:	e7 5b       	subi	r30, 0xB7	; 183
    53c6:	ff 4f       	sbci	r31, 0xFF	; 255
    53c8:	80 e9       	ldi	r24, 0x90	; 144
    53ca:	91 e0       	ldi	r25, 0x01	; 1
    53cc:	91 83       	std	Z+1, r25	; 0x01
    53ce:	80 83       	st	Z, r24
    53d0:	fe 01       	movw	r30, r28
    53d2:	e7 5b       	subi	r30, 0xB7	; 183
    53d4:	ff 4f       	sbci	r31, 0xFF	; 255
    53d6:	80 81       	ld	r24, Z
    53d8:	91 81       	ldd	r25, Z+1	; 0x01
    53da:	01 97       	sbiw	r24, 0x01	; 1
    53dc:	f1 f7       	brne	.-4      	; 0x53da <APP_vCalculatorLCD+0x412>
    53de:	fe 01       	movw	r30, r28
    53e0:	e7 5b       	subi	r30, 0xB7	; 183
    53e2:	ff 4f       	sbci	r31, 0xFF	; 255
    53e4:	91 83       	std	Z+1, r25	; 0x01
    53e6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    53e8:	de 01       	movw	r26, r28
    53ea:	a5 5b       	subi	r26, 0xB5	; 181
    53ec:	bf 4f       	sbci	r27, 0xFF	; 255
    53ee:	fe 01       	movw	r30, r28
    53f0:	e5 5b       	subi	r30, 0xB5	; 181
    53f2:	ff 4f       	sbci	r31, 0xFF	; 255
    53f4:	80 81       	ld	r24, Z
    53f6:	91 81       	ldd	r25, Z+1	; 0x01
    53f8:	01 97       	sbiw	r24, 0x01	; 1
    53fa:	11 96       	adiw	r26, 0x01	; 1
    53fc:	9c 93       	st	X, r25
    53fe:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5400:	fe 01       	movw	r30, r28
    5402:	e5 5b       	subi	r30, 0xB5	; 181
    5404:	ff 4f       	sbci	r31, 0xFF	; 255
    5406:	80 81       	ld	r24, Z
    5408:	91 81       	ldd	r25, Z+1	; 0x01
    540a:	00 97       	sbiw	r24, 0x00	; 0
    540c:	d1 f6       	brne	.-76     	; 0x53c2 <APP_vCalculatorLCD+0x3fa>
    540e:	28 c0       	rjmp	.+80     	; 0x5460 <APP_vCalculatorLCD+0x498>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5410:	8e 01       	movw	r16, r28
    5412:	05 5b       	subi	r16, 0xB5	; 181
    5414:	1f 4f       	sbci	r17, 0xFF	; 255
    5416:	fe 01       	movw	r30, r28
    5418:	e3 5b       	subi	r30, 0xB3	; 179
    541a:	ff 4f       	sbci	r31, 0xFF	; 255
    541c:	60 81       	ld	r22, Z
    541e:	71 81       	ldd	r23, Z+1	; 0x01
    5420:	82 81       	ldd	r24, Z+2	; 0x02
    5422:	93 81       	ldd	r25, Z+3	; 0x03
    5424:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5428:	dc 01       	movw	r26, r24
    542a:	cb 01       	movw	r24, r22
    542c:	f8 01       	movw	r30, r16
    542e:	91 83       	std	Z+1, r25	; 0x01
    5430:	80 83       	st	Z, r24
    5432:	de 01       	movw	r26, r28
    5434:	a9 5b       	subi	r26, 0xB9	; 185
    5436:	bf 4f       	sbci	r27, 0xFF	; 255
    5438:	fe 01       	movw	r30, r28
    543a:	e5 5b       	subi	r30, 0xB5	; 181
    543c:	ff 4f       	sbci	r31, 0xFF	; 255
    543e:	80 81       	ld	r24, Z
    5440:	91 81       	ldd	r25, Z+1	; 0x01
    5442:	11 96       	adiw	r26, 0x01	; 1
    5444:	9c 93       	st	X, r25
    5446:	8e 93       	st	-X, r24
    5448:	fe 01       	movw	r30, r28
    544a:	e9 5b       	subi	r30, 0xB9	; 185
    544c:	ff 4f       	sbci	r31, 0xFF	; 255
    544e:	80 81       	ld	r24, Z
    5450:	91 81       	ldd	r25, Z+1	; 0x01
    5452:	01 97       	sbiw	r24, 0x01	; 1
    5454:	f1 f7       	brne	.-4      	; 0x5452 <APP_vCalculatorLCD+0x48a>
    5456:	fe 01       	movw	r30, r28
    5458:	e9 5b       	subi	r30, 0xB9	; 185
    545a:	ff 4f       	sbci	r31, 0xFF	; 255
    545c:	91 83       	std	Z+1, r25	; 0x01
    545e:	80 83       	st	Z, r24
		_delay_ms(50);
		if(Loc_u8Symbol1=='/'||Loc_u8Symbol1=='*'||Loc_u8Symbol1=='-'||Loc_u8Symbol1=='+'||Loc_u8Symbol1=='%'){
    5460:	fe 01       	movw	r30, r28
    5462:	ed 58       	subi	r30, 0x8D	; 141
    5464:	ff 4f       	sbci	r31, 0xFF	; 255
    5466:	80 81       	ld	r24, Z
    5468:	8f 32       	cpi	r24, 0x2F	; 47
    546a:	c9 f0       	breq	.+50     	; 0x549e <APP_vCalculatorLCD+0x4d6>
    546c:	fe 01       	movw	r30, r28
    546e:	ed 58       	subi	r30, 0x8D	; 141
    5470:	ff 4f       	sbci	r31, 0xFF	; 255
    5472:	80 81       	ld	r24, Z
    5474:	8a 32       	cpi	r24, 0x2A	; 42
    5476:	99 f0       	breq	.+38     	; 0x549e <APP_vCalculatorLCD+0x4d6>
    5478:	fe 01       	movw	r30, r28
    547a:	ed 58       	subi	r30, 0x8D	; 141
    547c:	ff 4f       	sbci	r31, 0xFF	; 255
    547e:	80 81       	ld	r24, Z
    5480:	8d 32       	cpi	r24, 0x2D	; 45
    5482:	69 f0       	breq	.+26     	; 0x549e <APP_vCalculatorLCD+0x4d6>
    5484:	fe 01       	movw	r30, r28
    5486:	ed 58       	subi	r30, 0x8D	; 141
    5488:	ff 4f       	sbci	r31, 0xFF	; 255
    548a:	80 81       	ld	r24, Z
    548c:	8b 32       	cpi	r24, 0x2B	; 43
    548e:	39 f0       	breq	.+14     	; 0x549e <APP_vCalculatorLCD+0x4d6>
    5490:	fe 01       	movw	r30, r28
    5492:	ed 58       	subi	r30, 0x8D	; 141
    5494:	ff 4f       	sbci	r31, 0xFF	; 255
    5496:	80 81       	ld	r24, Z
    5498:	85 32       	cpi	r24, 0x25	; 37
    549a:	09 f0       	breq	.+2      	; 0x549e <APP_vCalculatorLCD+0x4d6>
    549c:	27 cf       	rjmp	.-434    	; 0x52ec <APP_vCalculatorLCD+0x324>
			LCD_vInitWithOutClear();
    549e:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <LCD_vInitWithOutClear>
			LCD_vGoTo(LineOne,1);
    54a2:	80 e8       	ldi	r24, 0x80	; 128
    54a4:	61 e0       	ldi	r22, 0x01	; 1
    54a6:	0e 94 75 20 	call	0x40ea	; 0x40ea <LCD_vGoTo>
			LCD_vWriteCharacter(Loc_u8Symbol1);
    54aa:	fe 01       	movw	r30, r28
    54ac:	ed 58       	subi	r30, 0x8D	; 141
    54ae:	ff 4f       	sbci	r31, 0xFF	; 255
    54b0:	80 81       	ld	r24, Z
    54b2:	0e 94 4b 1f 	call	0x3e96	; 0x3e96 <LCD_vWriteCharacter>
    54b6:	fe 01       	movw	r30, r28
    54b8:	ed 5b       	subi	r30, 0xBD	; 189
    54ba:	ff 4f       	sbci	r31, 0xFF	; 255
    54bc:	80 e0       	ldi	r24, 0x00	; 0
    54be:	90 e0       	ldi	r25, 0x00	; 0
    54c0:	a8 e4       	ldi	r26, 0x48	; 72
    54c2:	b2 e4       	ldi	r27, 0x42	; 66
    54c4:	80 83       	st	Z, r24
    54c6:	91 83       	std	Z+1, r25	; 0x01
    54c8:	a2 83       	std	Z+2, r26	; 0x02
    54ca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    54cc:	8e 01       	movw	r16, r28
    54ce:	01 5c       	subi	r16, 0xC1	; 193
    54d0:	1f 4f       	sbci	r17, 0xFF	; 255
    54d2:	fe 01       	movw	r30, r28
    54d4:	ed 5b       	subi	r30, 0xBD	; 189
    54d6:	ff 4f       	sbci	r31, 0xFF	; 255
    54d8:	60 81       	ld	r22, Z
    54da:	71 81       	ldd	r23, Z+1	; 0x01
    54dc:	82 81       	ldd	r24, Z+2	; 0x02
    54de:	93 81       	ldd	r25, Z+3	; 0x03
    54e0:	20 e0       	ldi	r18, 0x00	; 0
    54e2:	30 e0       	ldi	r19, 0x00	; 0
    54e4:	4a e7       	ldi	r20, 0x7A	; 122
    54e6:	55 e4       	ldi	r21, 0x45	; 69
    54e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    54ec:	dc 01       	movw	r26, r24
    54ee:	cb 01       	movw	r24, r22
    54f0:	f8 01       	movw	r30, r16
    54f2:	80 83       	st	Z, r24
    54f4:	91 83       	std	Z+1, r25	; 0x01
    54f6:	a2 83       	std	Z+2, r26	; 0x02
    54f8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    54fa:	fe 01       	movw	r30, r28
    54fc:	ff 96       	adiw	r30, 0x3f	; 63
    54fe:	60 81       	ld	r22, Z
    5500:	71 81       	ldd	r23, Z+1	; 0x01
    5502:	82 81       	ldd	r24, Z+2	; 0x02
    5504:	93 81       	ldd	r25, Z+3	; 0x03
    5506:	20 e0       	ldi	r18, 0x00	; 0
    5508:	30 e0       	ldi	r19, 0x00	; 0
    550a:	40 e8       	ldi	r20, 0x80	; 128
    550c:	5f e3       	ldi	r21, 0x3F	; 63
    550e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5512:	88 23       	and	r24, r24
    5514:	2c f4       	brge	.+10     	; 0x5520 <APP_vCalculatorLCD+0x558>
		__ticks = 1;
    5516:	81 e0       	ldi	r24, 0x01	; 1
    5518:	90 e0       	ldi	r25, 0x00	; 0
    551a:	9e af       	std	Y+62, r25	; 0x3e
    551c:	8d af       	std	Y+61, r24	; 0x3d
    551e:	46 c0       	rjmp	.+140    	; 0x55ac <APP_vCalculatorLCD+0x5e4>
	else if (__tmp > 65535)
    5520:	fe 01       	movw	r30, r28
    5522:	ff 96       	adiw	r30, 0x3f	; 63
    5524:	60 81       	ld	r22, Z
    5526:	71 81       	ldd	r23, Z+1	; 0x01
    5528:	82 81       	ldd	r24, Z+2	; 0x02
    552a:	93 81       	ldd	r25, Z+3	; 0x03
    552c:	20 e0       	ldi	r18, 0x00	; 0
    552e:	3f ef       	ldi	r19, 0xFF	; 255
    5530:	4f e7       	ldi	r20, 0x7F	; 127
    5532:	57 e4       	ldi	r21, 0x47	; 71
    5534:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5538:	18 16       	cp	r1, r24
    553a:	64 f5       	brge	.+88     	; 0x5594 <APP_vCalculatorLCD+0x5cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    553c:	fe 01       	movw	r30, r28
    553e:	ed 5b       	subi	r30, 0xBD	; 189
    5540:	ff 4f       	sbci	r31, 0xFF	; 255
    5542:	60 81       	ld	r22, Z
    5544:	71 81       	ldd	r23, Z+1	; 0x01
    5546:	82 81       	ldd	r24, Z+2	; 0x02
    5548:	93 81       	ldd	r25, Z+3	; 0x03
    554a:	20 e0       	ldi	r18, 0x00	; 0
    554c:	30 e0       	ldi	r19, 0x00	; 0
    554e:	40 e2       	ldi	r20, 0x20	; 32
    5550:	51 e4       	ldi	r21, 0x41	; 65
    5552:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5556:	dc 01       	movw	r26, r24
    5558:	cb 01       	movw	r24, r22
    555a:	bc 01       	movw	r22, r24
    555c:	cd 01       	movw	r24, r26
    555e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5562:	dc 01       	movw	r26, r24
    5564:	cb 01       	movw	r24, r22
    5566:	9e af       	std	Y+62, r25	; 0x3e
    5568:	8d af       	std	Y+61, r24	; 0x3d
    556a:	0f c0       	rjmp	.+30     	; 0x558a <APP_vCalculatorLCD+0x5c2>
    556c:	80 e9       	ldi	r24, 0x90	; 144
    556e:	91 e0       	ldi	r25, 0x01	; 1
    5570:	9c af       	std	Y+60, r25	; 0x3c
    5572:	8b af       	std	Y+59, r24	; 0x3b
    5574:	8b ad       	ldd	r24, Y+59	; 0x3b
    5576:	9c ad       	ldd	r25, Y+60	; 0x3c
    5578:	01 97       	sbiw	r24, 0x01	; 1
    557a:	f1 f7       	brne	.-4      	; 0x5578 <APP_vCalculatorLCD+0x5b0>
    557c:	9c af       	std	Y+60, r25	; 0x3c
    557e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5580:	8d ad       	ldd	r24, Y+61	; 0x3d
    5582:	9e ad       	ldd	r25, Y+62	; 0x3e
    5584:	01 97       	sbiw	r24, 0x01	; 1
    5586:	9e af       	std	Y+62, r25	; 0x3e
    5588:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    558a:	8d ad       	ldd	r24, Y+61	; 0x3d
    558c:	9e ad       	ldd	r25, Y+62	; 0x3e
    558e:	00 97       	sbiw	r24, 0x00	; 0
    5590:	69 f7       	brne	.-38     	; 0x556c <APP_vCalculatorLCD+0x5a4>
    5592:	16 c0       	rjmp	.+44     	; 0x55c0 <APP_vCalculatorLCD+0x5f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5594:	fe 01       	movw	r30, r28
    5596:	ff 96       	adiw	r30, 0x3f	; 63
    5598:	60 81       	ld	r22, Z
    559a:	71 81       	ldd	r23, Z+1	; 0x01
    559c:	82 81       	ldd	r24, Z+2	; 0x02
    559e:	93 81       	ldd	r25, Z+3	; 0x03
    55a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    55a4:	dc 01       	movw	r26, r24
    55a6:	cb 01       	movw	r24, r22
    55a8:	9e af       	std	Y+62, r25	; 0x3e
    55aa:	8d af       	std	Y+61, r24	; 0x3d
    55ac:	8d ad       	ldd	r24, Y+61	; 0x3d
    55ae:	9e ad       	ldd	r25, Y+62	; 0x3e
    55b0:	9a af       	std	Y+58, r25	; 0x3a
    55b2:	89 af       	std	Y+57, r24	; 0x39
    55b4:	89 ad       	ldd	r24, Y+57	; 0x39
    55b6:	9a ad       	ldd	r25, Y+58	; 0x3a
    55b8:	01 97       	sbiw	r24, 0x01	; 1
    55ba:	f1 f7       	brne	.-4      	; 0x55b8 <APP_vCalculatorLCD+0x5f0>
    55bc:	9a af       	std	Y+58, r25	; 0x3a
    55be:	89 af       	std	Y+57, r24	; 0x39
			break;
		}
	}
	_delay_ms(50);
	KAYPAD_vInit();
    55c0:	0e 94 8f 21 	call	0x431e	; 0x431e <KAYPAD_vInit>
	while(1){
		Loc_u8Num2=KAYPAD_u8GetKey();
    55c4:	0e 94 9e 21 	call	0x433c	; 0x433c <KAYPAD_u8GetKey>
    55c8:	fe 01       	movw	r30, r28
    55ca:	ec 58       	subi	r30, 0x8C	; 140
    55cc:	ff 4f       	sbci	r31, 0xFF	; 255
    55ce:	80 83       	st	Z, r24
    55d0:	80 e0       	ldi	r24, 0x00	; 0
    55d2:	90 e0       	ldi	r25, 0x00	; 0
    55d4:	a8 e4       	ldi	r26, 0x48	; 72
    55d6:	b2 e4       	ldi	r27, 0x42	; 66
    55d8:	8d ab       	std	Y+53, r24	; 0x35
    55da:	9e ab       	std	Y+54, r25	; 0x36
    55dc:	af ab       	std	Y+55, r26	; 0x37
    55de:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    55e0:	6d a9       	ldd	r22, Y+53	; 0x35
    55e2:	7e a9       	ldd	r23, Y+54	; 0x36
    55e4:	8f a9       	ldd	r24, Y+55	; 0x37
    55e6:	98 ad       	ldd	r25, Y+56	; 0x38
    55e8:	20 e0       	ldi	r18, 0x00	; 0
    55ea:	30 e0       	ldi	r19, 0x00	; 0
    55ec:	4a e7       	ldi	r20, 0x7A	; 122
    55ee:	55 e4       	ldi	r21, 0x45	; 69
    55f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55f4:	dc 01       	movw	r26, r24
    55f6:	cb 01       	movw	r24, r22
    55f8:	89 ab       	std	Y+49, r24	; 0x31
    55fa:	9a ab       	std	Y+50, r25	; 0x32
    55fc:	ab ab       	std	Y+51, r26	; 0x33
    55fe:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5600:	69 a9       	ldd	r22, Y+49	; 0x31
    5602:	7a a9       	ldd	r23, Y+50	; 0x32
    5604:	8b a9       	ldd	r24, Y+51	; 0x33
    5606:	9c a9       	ldd	r25, Y+52	; 0x34
    5608:	20 e0       	ldi	r18, 0x00	; 0
    560a:	30 e0       	ldi	r19, 0x00	; 0
    560c:	40 e8       	ldi	r20, 0x80	; 128
    560e:	5f e3       	ldi	r21, 0x3F	; 63
    5610:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5614:	88 23       	and	r24, r24
    5616:	2c f4       	brge	.+10     	; 0x5622 <APP_vCalculatorLCD+0x65a>
		__ticks = 1;
    5618:	81 e0       	ldi	r24, 0x01	; 1
    561a:	90 e0       	ldi	r25, 0x00	; 0
    561c:	98 ab       	std	Y+48, r25	; 0x30
    561e:	8f a7       	std	Y+47, r24	; 0x2f
    5620:	3f c0       	rjmp	.+126    	; 0x56a0 <APP_vCalculatorLCD+0x6d8>
	else if (__tmp > 65535)
    5622:	69 a9       	ldd	r22, Y+49	; 0x31
    5624:	7a a9       	ldd	r23, Y+50	; 0x32
    5626:	8b a9       	ldd	r24, Y+51	; 0x33
    5628:	9c a9       	ldd	r25, Y+52	; 0x34
    562a:	20 e0       	ldi	r18, 0x00	; 0
    562c:	3f ef       	ldi	r19, 0xFF	; 255
    562e:	4f e7       	ldi	r20, 0x7F	; 127
    5630:	57 e4       	ldi	r21, 0x47	; 71
    5632:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5636:	18 16       	cp	r1, r24
    5638:	4c f5       	brge	.+82     	; 0x568c <APP_vCalculatorLCD+0x6c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    563a:	6d a9       	ldd	r22, Y+53	; 0x35
    563c:	7e a9       	ldd	r23, Y+54	; 0x36
    563e:	8f a9       	ldd	r24, Y+55	; 0x37
    5640:	98 ad       	ldd	r25, Y+56	; 0x38
    5642:	20 e0       	ldi	r18, 0x00	; 0
    5644:	30 e0       	ldi	r19, 0x00	; 0
    5646:	40 e2       	ldi	r20, 0x20	; 32
    5648:	51 e4       	ldi	r21, 0x41	; 65
    564a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    564e:	dc 01       	movw	r26, r24
    5650:	cb 01       	movw	r24, r22
    5652:	bc 01       	movw	r22, r24
    5654:	cd 01       	movw	r24, r26
    5656:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    565a:	dc 01       	movw	r26, r24
    565c:	cb 01       	movw	r24, r22
    565e:	98 ab       	std	Y+48, r25	; 0x30
    5660:	8f a7       	std	Y+47, r24	; 0x2f
    5662:	0f c0       	rjmp	.+30     	; 0x5682 <APP_vCalculatorLCD+0x6ba>
    5664:	80 e9       	ldi	r24, 0x90	; 144
    5666:	91 e0       	ldi	r25, 0x01	; 1
    5668:	9e a7       	std	Y+46, r25	; 0x2e
    566a:	8d a7       	std	Y+45, r24	; 0x2d
    566c:	8d a5       	ldd	r24, Y+45	; 0x2d
    566e:	9e a5       	ldd	r25, Y+46	; 0x2e
    5670:	01 97       	sbiw	r24, 0x01	; 1
    5672:	f1 f7       	brne	.-4      	; 0x5670 <APP_vCalculatorLCD+0x6a8>
    5674:	9e a7       	std	Y+46, r25	; 0x2e
    5676:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5678:	8f a5       	ldd	r24, Y+47	; 0x2f
    567a:	98 a9       	ldd	r25, Y+48	; 0x30
    567c:	01 97       	sbiw	r24, 0x01	; 1
    567e:	98 ab       	std	Y+48, r25	; 0x30
    5680:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5682:	8f a5       	ldd	r24, Y+47	; 0x2f
    5684:	98 a9       	ldd	r25, Y+48	; 0x30
    5686:	00 97       	sbiw	r24, 0x00	; 0
    5688:	69 f7       	brne	.-38     	; 0x5664 <APP_vCalculatorLCD+0x69c>
    568a:	14 c0       	rjmp	.+40     	; 0x56b4 <APP_vCalculatorLCD+0x6ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    568c:	69 a9       	ldd	r22, Y+49	; 0x31
    568e:	7a a9       	ldd	r23, Y+50	; 0x32
    5690:	8b a9       	ldd	r24, Y+51	; 0x33
    5692:	9c a9       	ldd	r25, Y+52	; 0x34
    5694:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5698:	dc 01       	movw	r26, r24
    569a:	cb 01       	movw	r24, r22
    569c:	98 ab       	std	Y+48, r25	; 0x30
    569e:	8f a7       	std	Y+47, r24	; 0x2f
    56a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    56a2:	98 a9       	ldd	r25, Y+48	; 0x30
    56a4:	9c a7       	std	Y+44, r25	; 0x2c
    56a6:	8b a7       	std	Y+43, r24	; 0x2b
    56a8:	8b a5       	ldd	r24, Y+43	; 0x2b
    56aa:	9c a5       	ldd	r25, Y+44	; 0x2c
    56ac:	01 97       	sbiw	r24, 0x01	; 1
    56ae:	f1 f7       	brne	.-4      	; 0x56ac <APP_vCalculatorLCD+0x6e4>
    56b0:	9c a7       	std	Y+44, r25	; 0x2c
    56b2:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(50);
		if(Loc_u8Num2!=0xff){
    56b4:	fe 01       	movw	r30, r28
    56b6:	ec 58       	subi	r30, 0x8C	; 140
    56b8:	ff 4f       	sbci	r31, 0xFF	; 255
    56ba:	80 81       	ld	r24, Z
    56bc:	8f 3f       	cpi	r24, 0xFF	; 255
    56be:	09 f4       	brne	.+2      	; 0x56c2 <APP_vCalculatorLCD+0x6fa>
    56c0:	81 cf       	rjmp	.-254    	; 0x55c4 <APP_vCalculatorLCD+0x5fc>
			LCD_vInitWithOutClear();
    56c2:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <LCD_vInitWithOutClear>
			LCD_vGoTo(LineOne,2);
    56c6:	80 e8       	ldi	r24, 0x80	; 128
    56c8:	62 e0       	ldi	r22, 0x02	; 2
    56ca:	0e 94 75 20 	call	0x40ea	; 0x40ea <LCD_vGoTo>
			LCD_vWriteCharacter(Loc_u8Num2+48);
    56ce:	fe 01       	movw	r30, r28
    56d0:	ec 58       	subi	r30, 0x8C	; 140
    56d2:	ff 4f       	sbci	r31, 0xFF	; 255
    56d4:	80 81       	ld	r24, Z
    56d6:	80 5d       	subi	r24, 0xD0	; 208
    56d8:	0e 94 4b 1f 	call	0x3e96	; 0x3e96 <LCD_vWriteCharacter>
    56dc:	80 e0       	ldi	r24, 0x00	; 0
    56de:	90 e0       	ldi	r25, 0x00	; 0
    56e0:	a8 e4       	ldi	r26, 0x48	; 72
    56e2:	b2 e4       	ldi	r27, 0x42	; 66
    56e4:	8f a3       	std	Y+39, r24	; 0x27
    56e6:	98 a7       	std	Y+40, r25	; 0x28
    56e8:	a9 a7       	std	Y+41, r26	; 0x29
    56ea:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    56ec:	6f a1       	ldd	r22, Y+39	; 0x27
    56ee:	78 a5       	ldd	r23, Y+40	; 0x28
    56f0:	89 a5       	ldd	r24, Y+41	; 0x29
    56f2:	9a a5       	ldd	r25, Y+42	; 0x2a
    56f4:	20 e0       	ldi	r18, 0x00	; 0
    56f6:	30 e0       	ldi	r19, 0x00	; 0
    56f8:	4a e7       	ldi	r20, 0x7A	; 122
    56fa:	55 e4       	ldi	r21, 0x45	; 69
    56fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5700:	dc 01       	movw	r26, r24
    5702:	cb 01       	movw	r24, r22
    5704:	8b a3       	std	Y+35, r24	; 0x23
    5706:	9c a3       	std	Y+36, r25	; 0x24
    5708:	ad a3       	std	Y+37, r26	; 0x25
    570a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    570c:	6b a1       	ldd	r22, Y+35	; 0x23
    570e:	7c a1       	ldd	r23, Y+36	; 0x24
    5710:	8d a1       	ldd	r24, Y+37	; 0x25
    5712:	9e a1       	ldd	r25, Y+38	; 0x26
    5714:	20 e0       	ldi	r18, 0x00	; 0
    5716:	30 e0       	ldi	r19, 0x00	; 0
    5718:	40 e8       	ldi	r20, 0x80	; 128
    571a:	5f e3       	ldi	r21, 0x3F	; 63
    571c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5720:	88 23       	and	r24, r24
    5722:	2c f4       	brge	.+10     	; 0x572e <APP_vCalculatorLCD+0x766>
		__ticks = 1;
    5724:	81 e0       	ldi	r24, 0x01	; 1
    5726:	90 e0       	ldi	r25, 0x00	; 0
    5728:	9a a3       	std	Y+34, r25	; 0x22
    572a:	89 a3       	std	Y+33, r24	; 0x21
    572c:	3f c0       	rjmp	.+126    	; 0x57ac <APP_vCalculatorLCD+0x7e4>
	else if (__tmp > 65535)
    572e:	6b a1       	ldd	r22, Y+35	; 0x23
    5730:	7c a1       	ldd	r23, Y+36	; 0x24
    5732:	8d a1       	ldd	r24, Y+37	; 0x25
    5734:	9e a1       	ldd	r25, Y+38	; 0x26
    5736:	20 e0       	ldi	r18, 0x00	; 0
    5738:	3f ef       	ldi	r19, 0xFF	; 255
    573a:	4f e7       	ldi	r20, 0x7F	; 127
    573c:	57 e4       	ldi	r21, 0x47	; 71
    573e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5742:	18 16       	cp	r1, r24
    5744:	4c f5       	brge	.+82     	; 0x5798 <APP_vCalculatorLCD+0x7d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5746:	6f a1       	ldd	r22, Y+39	; 0x27
    5748:	78 a5       	ldd	r23, Y+40	; 0x28
    574a:	89 a5       	ldd	r24, Y+41	; 0x29
    574c:	9a a5       	ldd	r25, Y+42	; 0x2a
    574e:	20 e0       	ldi	r18, 0x00	; 0
    5750:	30 e0       	ldi	r19, 0x00	; 0
    5752:	40 e2       	ldi	r20, 0x20	; 32
    5754:	51 e4       	ldi	r21, 0x41	; 65
    5756:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    575a:	dc 01       	movw	r26, r24
    575c:	cb 01       	movw	r24, r22
    575e:	bc 01       	movw	r22, r24
    5760:	cd 01       	movw	r24, r26
    5762:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5766:	dc 01       	movw	r26, r24
    5768:	cb 01       	movw	r24, r22
    576a:	9a a3       	std	Y+34, r25	; 0x22
    576c:	89 a3       	std	Y+33, r24	; 0x21
    576e:	0f c0       	rjmp	.+30     	; 0x578e <APP_vCalculatorLCD+0x7c6>
    5770:	80 e9       	ldi	r24, 0x90	; 144
    5772:	91 e0       	ldi	r25, 0x01	; 1
    5774:	98 a3       	std	Y+32, r25	; 0x20
    5776:	8f 8f       	std	Y+31, r24	; 0x1f
    5778:	8f 8d       	ldd	r24, Y+31	; 0x1f
    577a:	98 a1       	ldd	r25, Y+32	; 0x20
    577c:	01 97       	sbiw	r24, 0x01	; 1
    577e:	f1 f7       	brne	.-4      	; 0x577c <APP_vCalculatorLCD+0x7b4>
    5780:	98 a3       	std	Y+32, r25	; 0x20
    5782:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5784:	89 a1       	ldd	r24, Y+33	; 0x21
    5786:	9a a1       	ldd	r25, Y+34	; 0x22
    5788:	01 97       	sbiw	r24, 0x01	; 1
    578a:	9a a3       	std	Y+34, r25	; 0x22
    578c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    578e:	89 a1       	ldd	r24, Y+33	; 0x21
    5790:	9a a1       	ldd	r25, Y+34	; 0x22
    5792:	00 97       	sbiw	r24, 0x00	; 0
    5794:	69 f7       	brne	.-38     	; 0x5770 <APP_vCalculatorLCD+0x7a8>
    5796:	14 c0       	rjmp	.+40     	; 0x57c0 <APP_vCalculatorLCD+0x7f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5798:	6b a1       	ldd	r22, Y+35	; 0x23
    579a:	7c a1       	ldd	r23, Y+36	; 0x24
    579c:	8d a1       	ldd	r24, Y+37	; 0x25
    579e:	9e a1       	ldd	r25, Y+38	; 0x26
    57a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57a4:	dc 01       	movw	r26, r24
    57a6:	cb 01       	movw	r24, r22
    57a8:	9a a3       	std	Y+34, r25	; 0x22
    57aa:	89 a3       	std	Y+33, r24	; 0x21
    57ac:	89 a1       	ldd	r24, Y+33	; 0x21
    57ae:	9a a1       	ldd	r25, Y+34	; 0x22
    57b0:	9e 8f       	std	Y+30, r25	; 0x1e
    57b2:	8d 8f       	std	Y+29, r24	; 0x1d
    57b4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    57b6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    57b8:	01 97       	sbiw	r24, 0x01	; 1
    57ba:	f1 f7       	brne	.-4      	; 0x57b8 <APP_vCalculatorLCD+0x7f0>
    57bc:	9e 8f       	std	Y+30, r25	; 0x1e
    57be:	8d 8f       	std	Y+29, r24	; 0x1d
			break;
		}
	}
	_delay_ms(50);
	KAYPAD_vInit();
    57c0:	0e 94 8f 21 	call	0x431e	; 0x431e <KAYPAD_vInit>
	while(1){
		Loc_u8Symbol2=KAYPAD_u8GetKey();
    57c4:	0e 94 9e 21 	call	0x433c	; 0x433c <KAYPAD_u8GetKey>
    57c8:	fe 01       	movw	r30, r28
    57ca:	ee 58       	subi	r30, 0x8E	; 142
    57cc:	ff 4f       	sbci	r31, 0xFF	; 255
    57ce:	80 83       	st	Z, r24
    57d0:	80 e0       	ldi	r24, 0x00	; 0
    57d2:	90 e0       	ldi	r25, 0x00	; 0
    57d4:	a8 e4       	ldi	r26, 0x48	; 72
    57d6:	b2 e4       	ldi	r27, 0x42	; 66
    57d8:	89 8f       	std	Y+25, r24	; 0x19
    57da:	9a 8f       	std	Y+26, r25	; 0x1a
    57dc:	ab 8f       	std	Y+27, r26	; 0x1b
    57de:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    57e0:	69 8d       	ldd	r22, Y+25	; 0x19
    57e2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    57e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    57e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    57e8:	20 e0       	ldi	r18, 0x00	; 0
    57ea:	30 e0       	ldi	r19, 0x00	; 0
    57ec:	4a e7       	ldi	r20, 0x7A	; 122
    57ee:	55 e4       	ldi	r21, 0x45	; 69
    57f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    57f4:	dc 01       	movw	r26, r24
    57f6:	cb 01       	movw	r24, r22
    57f8:	8d 8b       	std	Y+21, r24	; 0x15
    57fa:	9e 8b       	std	Y+22, r25	; 0x16
    57fc:	af 8b       	std	Y+23, r26	; 0x17
    57fe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5800:	6d 89       	ldd	r22, Y+21	; 0x15
    5802:	7e 89       	ldd	r23, Y+22	; 0x16
    5804:	8f 89       	ldd	r24, Y+23	; 0x17
    5806:	98 8d       	ldd	r25, Y+24	; 0x18
    5808:	20 e0       	ldi	r18, 0x00	; 0
    580a:	30 e0       	ldi	r19, 0x00	; 0
    580c:	40 e8       	ldi	r20, 0x80	; 128
    580e:	5f e3       	ldi	r21, 0x3F	; 63
    5810:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5814:	88 23       	and	r24, r24
    5816:	2c f4       	brge	.+10     	; 0x5822 <APP_vCalculatorLCD+0x85a>
		__ticks = 1;
    5818:	81 e0       	ldi	r24, 0x01	; 1
    581a:	90 e0       	ldi	r25, 0x00	; 0
    581c:	9c 8b       	std	Y+20, r25	; 0x14
    581e:	8b 8b       	std	Y+19, r24	; 0x13
    5820:	3f c0       	rjmp	.+126    	; 0x58a0 <APP_vCalculatorLCD+0x8d8>
	else if (__tmp > 65535)
    5822:	6d 89       	ldd	r22, Y+21	; 0x15
    5824:	7e 89       	ldd	r23, Y+22	; 0x16
    5826:	8f 89       	ldd	r24, Y+23	; 0x17
    5828:	98 8d       	ldd	r25, Y+24	; 0x18
    582a:	20 e0       	ldi	r18, 0x00	; 0
    582c:	3f ef       	ldi	r19, 0xFF	; 255
    582e:	4f e7       	ldi	r20, 0x7F	; 127
    5830:	57 e4       	ldi	r21, 0x47	; 71
    5832:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5836:	18 16       	cp	r1, r24
    5838:	4c f5       	brge	.+82     	; 0x588c <APP_vCalculatorLCD+0x8c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    583a:	69 8d       	ldd	r22, Y+25	; 0x19
    583c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    583e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5840:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5842:	20 e0       	ldi	r18, 0x00	; 0
    5844:	30 e0       	ldi	r19, 0x00	; 0
    5846:	40 e2       	ldi	r20, 0x20	; 32
    5848:	51 e4       	ldi	r21, 0x41	; 65
    584a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    584e:	dc 01       	movw	r26, r24
    5850:	cb 01       	movw	r24, r22
    5852:	bc 01       	movw	r22, r24
    5854:	cd 01       	movw	r24, r26
    5856:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    585a:	dc 01       	movw	r26, r24
    585c:	cb 01       	movw	r24, r22
    585e:	9c 8b       	std	Y+20, r25	; 0x14
    5860:	8b 8b       	std	Y+19, r24	; 0x13
    5862:	0f c0       	rjmp	.+30     	; 0x5882 <APP_vCalculatorLCD+0x8ba>
    5864:	80 e9       	ldi	r24, 0x90	; 144
    5866:	91 e0       	ldi	r25, 0x01	; 1
    5868:	9a 8b       	std	Y+18, r25	; 0x12
    586a:	89 8b       	std	Y+17, r24	; 0x11
    586c:	89 89       	ldd	r24, Y+17	; 0x11
    586e:	9a 89       	ldd	r25, Y+18	; 0x12
    5870:	01 97       	sbiw	r24, 0x01	; 1
    5872:	f1 f7       	brne	.-4      	; 0x5870 <APP_vCalculatorLCD+0x8a8>
    5874:	9a 8b       	std	Y+18, r25	; 0x12
    5876:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5878:	8b 89       	ldd	r24, Y+19	; 0x13
    587a:	9c 89       	ldd	r25, Y+20	; 0x14
    587c:	01 97       	sbiw	r24, 0x01	; 1
    587e:	9c 8b       	std	Y+20, r25	; 0x14
    5880:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5882:	8b 89       	ldd	r24, Y+19	; 0x13
    5884:	9c 89       	ldd	r25, Y+20	; 0x14
    5886:	00 97       	sbiw	r24, 0x00	; 0
    5888:	69 f7       	brne	.-38     	; 0x5864 <APP_vCalculatorLCD+0x89c>
    588a:	14 c0       	rjmp	.+40     	; 0x58b4 <APP_vCalculatorLCD+0x8ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    588c:	6d 89       	ldd	r22, Y+21	; 0x15
    588e:	7e 89       	ldd	r23, Y+22	; 0x16
    5890:	8f 89       	ldd	r24, Y+23	; 0x17
    5892:	98 8d       	ldd	r25, Y+24	; 0x18
    5894:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5898:	dc 01       	movw	r26, r24
    589a:	cb 01       	movw	r24, r22
    589c:	9c 8b       	std	Y+20, r25	; 0x14
    589e:	8b 8b       	std	Y+19, r24	; 0x13
    58a0:	8b 89       	ldd	r24, Y+19	; 0x13
    58a2:	9c 89       	ldd	r25, Y+20	; 0x14
    58a4:	98 8b       	std	Y+16, r25	; 0x10
    58a6:	8f 87       	std	Y+15, r24	; 0x0f
    58a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    58aa:	98 89       	ldd	r25, Y+16	; 0x10
    58ac:	01 97       	sbiw	r24, 0x01	; 1
    58ae:	f1 f7       	brne	.-4      	; 0x58ac <APP_vCalculatorLCD+0x8e4>
    58b0:	98 8b       	std	Y+16, r25	; 0x10
    58b2:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(50);
		if(Loc_u8Symbol2=='='){
    58b4:	fe 01       	movw	r30, r28
    58b6:	ee 58       	subi	r30, 0x8E	; 142
    58b8:	ff 4f       	sbci	r31, 0xFF	; 255
    58ba:	80 81       	ld	r24, Z
    58bc:	8d 33       	cpi	r24, 0x3D	; 61
    58be:	09 f0       	breq	.+2      	; 0x58c2 <APP_vCalculatorLCD+0x8fa>
    58c0:	81 cf       	rjmp	.-254    	; 0x57c4 <APP_vCalculatorLCD+0x7fc>
			LCD_vInitWithOutClear();
    58c2:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <LCD_vInitWithOutClear>
			LCD_vGoTo(LineOne,3);
    58c6:	80 e8       	ldi	r24, 0x80	; 128
    58c8:	63 e0       	ldi	r22, 0x03	; 3
    58ca:	0e 94 75 20 	call	0x40ea	; 0x40ea <LCD_vGoTo>
			LCD_vWriteCharacter(Loc_u8Symbol2);
    58ce:	fe 01       	movw	r30, r28
    58d0:	ee 58       	subi	r30, 0x8E	; 142
    58d2:	ff 4f       	sbci	r31, 0xFF	; 255
    58d4:	80 81       	ld	r24, Z
    58d6:	0e 94 4b 1f 	call	0x3e96	; 0x3e96 <LCD_vWriteCharacter>
			break;
		}
	}
	if(Loc_u8Symbol1=='+'){
    58da:	fe 01       	movw	r30, r28
    58dc:	ed 58       	subi	r30, 0x8D	; 141
    58de:	ff 4f       	sbci	r31, 0xFF	; 255
    58e0:	80 81       	ld	r24, Z
    58e2:	8b 32       	cpi	r24, 0x2B	; 43
    58e4:	79 f4       	brne	.+30     	; 0x5904 <APP_vCalculatorLCD+0x93c>
		Loc_u8sum=Loc_u8Num1+Loc_u8Num2;
    58e6:	9e 01       	movw	r18, r28
    58e8:	2f 58       	subi	r18, 0x8F	; 143
    58ea:	3f 4f       	sbci	r19, 0xFF	; 255
    58ec:	fe 01       	movw	r30, r28
    58ee:	eb 58       	subi	r30, 0x8B	; 139
    58f0:	ff 4f       	sbci	r31, 0xFF	; 255
    58f2:	de 01       	movw	r26, r28
    58f4:	ac 58       	subi	r26, 0x8C	; 140
    58f6:	bf 4f       	sbci	r27, 0xFF	; 255
    58f8:	90 81       	ld	r25, Z
    58fa:	8c 91       	ld	r24, X
    58fc:	89 0f       	add	r24, r25
    58fe:	f9 01       	movw	r30, r18
    5900:	80 83       	st	Z, r24
    5902:	5c c0       	rjmp	.+184    	; 0x59bc <APP_vCalculatorLCD+0x9f4>
	}
	else if(Loc_u8Symbol1=='-'){
    5904:	fe 01       	movw	r30, r28
    5906:	ed 58       	subi	r30, 0x8D	; 141
    5908:	ff 4f       	sbci	r31, 0xFF	; 255
    590a:	80 81       	ld	r24, Z
    590c:	8d 32       	cpi	r24, 0x2D	; 45
    590e:	89 f4       	brne	.+34     	; 0x5932 <APP_vCalculatorLCD+0x96a>
		Loc_u8sum=Loc_u8Num1-Loc_u8Num2;
    5910:	9e 01       	movw	r18, r28
    5912:	2f 58       	subi	r18, 0x8F	; 143
    5914:	3f 4f       	sbci	r19, 0xFF	; 255
    5916:	fe 01       	movw	r30, r28
    5918:	eb 58       	subi	r30, 0x8B	; 139
    591a:	ff 4f       	sbci	r31, 0xFF	; 255
    591c:	de 01       	movw	r26, r28
    591e:	ac 58       	subi	r26, 0x8C	; 140
    5920:	bf 4f       	sbci	r27, 0xFF	; 255
    5922:	90 81       	ld	r25, Z
    5924:	8c 91       	ld	r24, X
    5926:	f9 2f       	mov	r31, r25
    5928:	f8 1b       	sub	r31, r24
    592a:	8f 2f       	mov	r24, r31
    592c:	f9 01       	movw	r30, r18
    592e:	80 83       	st	Z, r24
    5930:	45 c0       	rjmp	.+138    	; 0x59bc <APP_vCalculatorLCD+0x9f4>
	}
	else if(Loc_u8Symbol1=='/'){
    5932:	fe 01       	movw	r30, r28
    5934:	ed 58       	subi	r30, 0x8D	; 141
    5936:	ff 4f       	sbci	r31, 0xFF	; 255
    5938:	80 81       	ld	r24, Z
    593a:	8f 32       	cpi	r24, 0x2F	; 47
    593c:	89 f4       	brne	.+34     	; 0x5960 <APP_vCalculatorLCD+0x998>
		Loc_u8sum=Loc_u8Num1/Loc_u8Num2;
    593e:	9e 01       	movw	r18, r28
    5940:	2f 58       	subi	r18, 0x8F	; 143
    5942:	3f 4f       	sbci	r19, 0xFF	; 255
    5944:	fe 01       	movw	r30, r28
    5946:	eb 58       	subi	r30, 0x8B	; 139
    5948:	ff 4f       	sbci	r31, 0xFF	; 255
    594a:	de 01       	movw	r26, r28
    594c:	ac 58       	subi	r26, 0x8C	; 140
    594e:	bf 4f       	sbci	r27, 0xFF	; 255
    5950:	80 81       	ld	r24, Z
    5952:	9c 91       	ld	r25, X
    5954:	69 2f       	mov	r22, r25
    5956:	0e 94 d1 35 	call	0x6ba2	; 0x6ba2 <__udivmodqi4>
    595a:	f9 01       	movw	r30, r18
    595c:	80 83       	st	Z, r24
    595e:	2e c0       	rjmp	.+92     	; 0x59bc <APP_vCalculatorLCD+0x9f4>
	}
	else if(Loc_u8Symbol1=='*'){
    5960:	fe 01       	movw	r30, r28
    5962:	ed 58       	subi	r30, 0x8D	; 141
    5964:	ff 4f       	sbci	r31, 0xFF	; 255
    5966:	80 81       	ld	r24, Z
    5968:	8a 32       	cpi	r24, 0x2A	; 42
    596a:	89 f4       	brne	.+34     	; 0x598e <APP_vCalculatorLCD+0x9c6>
		Loc_u8sum=Loc_u8Num1*Loc_u8Num2;
    596c:	9e 01       	movw	r18, r28
    596e:	2f 58       	subi	r18, 0x8F	; 143
    5970:	3f 4f       	sbci	r19, 0xFF	; 255
    5972:	fe 01       	movw	r30, r28
    5974:	eb 58       	subi	r30, 0x8B	; 139
    5976:	ff 4f       	sbci	r31, 0xFF	; 255
    5978:	de 01       	movw	r26, r28
    597a:	ac 58       	subi	r26, 0x8C	; 140
    597c:	bf 4f       	sbci	r27, 0xFF	; 255
    597e:	90 81       	ld	r25, Z
    5980:	8c 91       	ld	r24, X
    5982:	98 9f       	mul	r25, r24
    5984:	80 2d       	mov	r24, r0
    5986:	11 24       	eor	r1, r1
    5988:	f9 01       	movw	r30, r18
    598a:	80 83       	st	Z, r24
    598c:	17 c0       	rjmp	.+46     	; 0x59bc <APP_vCalculatorLCD+0x9f4>
	}
	else if(Loc_u8Symbol1=='%'){
    598e:	fe 01       	movw	r30, r28
    5990:	ed 58       	subi	r30, 0x8D	; 141
    5992:	ff 4f       	sbci	r31, 0xFF	; 255
    5994:	80 81       	ld	r24, Z
    5996:	85 32       	cpi	r24, 0x25	; 37
    5998:	89 f4       	brne	.+34     	; 0x59bc <APP_vCalculatorLCD+0x9f4>
		Loc_u8sum=Loc_u8Num1%Loc_u8Num2;
    599a:	9e 01       	movw	r18, r28
    599c:	2f 58       	subi	r18, 0x8F	; 143
    599e:	3f 4f       	sbci	r19, 0xFF	; 255
    59a0:	fe 01       	movw	r30, r28
    59a2:	eb 58       	subi	r30, 0x8B	; 139
    59a4:	ff 4f       	sbci	r31, 0xFF	; 255
    59a6:	de 01       	movw	r26, r28
    59a8:	ac 58       	subi	r26, 0x8C	; 140
    59aa:	bf 4f       	sbci	r27, 0xFF	; 255
    59ac:	80 81       	ld	r24, Z
    59ae:	9c 91       	ld	r25, X
    59b0:	69 2f       	mov	r22, r25
    59b2:	0e 94 d1 35 	call	0x6ba2	; 0x6ba2 <__udivmodqi4>
    59b6:	89 2f       	mov	r24, r25
    59b8:	f9 01       	movw	r30, r18
    59ba:	80 83       	st	Z, r24
	}
	else{
		//do nothing
	}
	LCD_vInitWithOutClear();
    59bc:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <LCD_vInitWithOutClear>
	LCD_vGoTo(LineOne,4);
    59c0:	80 e8       	ldi	r24, 0x80	; 128
    59c2:	64 e0       	ldi	r22, 0x04	; 4
    59c4:	0e 94 75 20 	call	0x40ea	; 0x40ea <LCD_vGoTo>
	u8 arr[3];
	APP_vToString(arr,Loc_u8sum);
    59c8:	fe 01       	movw	r30, r28
    59ca:	ef 58       	subi	r30, 0x8F	; 143
    59cc:	ff 4f       	sbci	r31, 0xFF	; 255
    59ce:	80 81       	ld	r24, Z
    59d0:	28 2f       	mov	r18, r24
    59d2:	30 e0       	ldi	r19, 0x00	; 0
    59d4:	ce 01       	movw	r24, r28
    59d6:	8a 58       	subi	r24, 0x8A	; 138
    59d8:	9f 4f       	sbci	r25, 0xFF	; 255
    59da:	b9 01       	movw	r22, r18
    59dc:	0e 94 7e 27 	call	0x4efc	; 0x4efc <APP_vToString>
	LCD_vWriteString(arr);
    59e0:	ce 01       	movw	r24, r28
    59e2:	8a 58       	subi	r24, 0x8A	; 138
    59e4:	9f 4f       	sbci	r25, 0xFF	; 255
    59e6:	0e 94 0e 21 	call	0x421c	; 0x421c <LCD_vWriteString>
    59ea:	80 e0       	ldi	r24, 0x00	; 0
    59ec:	90 e0       	ldi	r25, 0x00	; 0
    59ee:	a8 ec       	ldi	r26, 0xC8	; 200
    59f0:	b2 e4       	ldi	r27, 0x42	; 66
    59f2:	8b 87       	std	Y+11, r24	; 0x0b
    59f4:	9c 87       	std	Y+12, r25	; 0x0c
    59f6:	ad 87       	std	Y+13, r26	; 0x0d
    59f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    59fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    59fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    59fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    5a00:	9e 85       	ldd	r25, Y+14	; 0x0e
    5a02:	20 e0       	ldi	r18, 0x00	; 0
    5a04:	30 e0       	ldi	r19, 0x00	; 0
    5a06:	4a e7       	ldi	r20, 0x7A	; 122
    5a08:	55 e4       	ldi	r21, 0x45	; 69
    5a0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a0e:	dc 01       	movw	r26, r24
    5a10:	cb 01       	movw	r24, r22
    5a12:	8f 83       	std	Y+7, r24	; 0x07
    5a14:	98 87       	std	Y+8, r25	; 0x08
    5a16:	a9 87       	std	Y+9, r26	; 0x09
    5a18:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5a1a:	6f 81       	ldd	r22, Y+7	; 0x07
    5a1c:	78 85       	ldd	r23, Y+8	; 0x08
    5a1e:	89 85       	ldd	r24, Y+9	; 0x09
    5a20:	9a 85       	ldd	r25, Y+10	; 0x0a
    5a22:	20 e0       	ldi	r18, 0x00	; 0
    5a24:	30 e0       	ldi	r19, 0x00	; 0
    5a26:	40 e8       	ldi	r20, 0x80	; 128
    5a28:	5f e3       	ldi	r21, 0x3F	; 63
    5a2a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5a2e:	88 23       	and	r24, r24
    5a30:	2c f4       	brge	.+10     	; 0x5a3c <APP_vCalculatorLCD+0xa74>
		__ticks = 1;
    5a32:	81 e0       	ldi	r24, 0x01	; 1
    5a34:	90 e0       	ldi	r25, 0x00	; 0
    5a36:	9e 83       	std	Y+6, r25	; 0x06
    5a38:	8d 83       	std	Y+5, r24	; 0x05
    5a3a:	3f c0       	rjmp	.+126    	; 0x5aba <APP_vCalculatorLCD+0xaf2>
	else if (__tmp > 65535)
    5a3c:	6f 81       	ldd	r22, Y+7	; 0x07
    5a3e:	78 85       	ldd	r23, Y+8	; 0x08
    5a40:	89 85       	ldd	r24, Y+9	; 0x09
    5a42:	9a 85       	ldd	r25, Y+10	; 0x0a
    5a44:	20 e0       	ldi	r18, 0x00	; 0
    5a46:	3f ef       	ldi	r19, 0xFF	; 255
    5a48:	4f e7       	ldi	r20, 0x7F	; 127
    5a4a:	57 e4       	ldi	r21, 0x47	; 71
    5a4c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5a50:	18 16       	cp	r1, r24
    5a52:	4c f5       	brge	.+82     	; 0x5aa6 <APP_vCalculatorLCD+0xade>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5a54:	6b 85       	ldd	r22, Y+11	; 0x0b
    5a56:	7c 85       	ldd	r23, Y+12	; 0x0c
    5a58:	8d 85       	ldd	r24, Y+13	; 0x0d
    5a5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    5a5c:	20 e0       	ldi	r18, 0x00	; 0
    5a5e:	30 e0       	ldi	r19, 0x00	; 0
    5a60:	40 e2       	ldi	r20, 0x20	; 32
    5a62:	51 e4       	ldi	r21, 0x41	; 65
    5a64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a68:	dc 01       	movw	r26, r24
    5a6a:	cb 01       	movw	r24, r22
    5a6c:	bc 01       	movw	r22, r24
    5a6e:	cd 01       	movw	r24, r26
    5a70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a74:	dc 01       	movw	r26, r24
    5a76:	cb 01       	movw	r24, r22
    5a78:	9e 83       	std	Y+6, r25	; 0x06
    5a7a:	8d 83       	std	Y+5, r24	; 0x05
    5a7c:	0f c0       	rjmp	.+30     	; 0x5a9c <APP_vCalculatorLCD+0xad4>
    5a7e:	80 e9       	ldi	r24, 0x90	; 144
    5a80:	91 e0       	ldi	r25, 0x01	; 1
    5a82:	9c 83       	std	Y+4, r25	; 0x04
    5a84:	8b 83       	std	Y+3, r24	; 0x03
    5a86:	8b 81       	ldd	r24, Y+3	; 0x03
    5a88:	9c 81       	ldd	r25, Y+4	; 0x04
    5a8a:	01 97       	sbiw	r24, 0x01	; 1
    5a8c:	f1 f7       	brne	.-4      	; 0x5a8a <APP_vCalculatorLCD+0xac2>
    5a8e:	9c 83       	std	Y+4, r25	; 0x04
    5a90:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5a92:	8d 81       	ldd	r24, Y+5	; 0x05
    5a94:	9e 81       	ldd	r25, Y+6	; 0x06
    5a96:	01 97       	sbiw	r24, 0x01	; 1
    5a98:	9e 83       	std	Y+6, r25	; 0x06
    5a9a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5a9c:	8d 81       	ldd	r24, Y+5	; 0x05
    5a9e:	9e 81       	ldd	r25, Y+6	; 0x06
    5aa0:	00 97       	sbiw	r24, 0x00	; 0
    5aa2:	69 f7       	brne	.-38     	; 0x5a7e <APP_vCalculatorLCD+0xab6>
    5aa4:	14 c0       	rjmp	.+40     	; 0x5ace <APP_vCalculatorLCD+0xb06>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5aa6:	6f 81       	ldd	r22, Y+7	; 0x07
    5aa8:	78 85       	ldd	r23, Y+8	; 0x08
    5aaa:	89 85       	ldd	r24, Y+9	; 0x09
    5aac:	9a 85       	ldd	r25, Y+10	; 0x0a
    5aae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ab2:	dc 01       	movw	r26, r24
    5ab4:	cb 01       	movw	r24, r22
    5ab6:	9e 83       	std	Y+6, r25	; 0x06
    5ab8:	8d 83       	std	Y+5, r24	; 0x05
    5aba:	8d 81       	ldd	r24, Y+5	; 0x05
    5abc:	9e 81       	ldd	r25, Y+6	; 0x06
    5abe:	9a 83       	std	Y+2, r25	; 0x02
    5ac0:	89 83       	std	Y+1, r24	; 0x01
    5ac2:	89 81       	ldd	r24, Y+1	; 0x01
    5ac4:	9a 81       	ldd	r25, Y+2	; 0x02
    5ac6:	01 97       	sbiw	r24, 0x01	; 1
    5ac8:	f1 f7       	brne	.-4      	; 0x5ac6 <APP_vCalculatorLCD+0xafe>
    5aca:	9a 83       	std	Y+2, r25	; 0x02
    5acc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
}
    5ace:	c8 58       	subi	r28, 0x88	; 136
    5ad0:	df 4f       	sbci	r29, 0xFF	; 255
    5ad2:	0f b6       	in	r0, 0x3f	; 63
    5ad4:	f8 94       	cli
    5ad6:	de bf       	out	0x3e, r29	; 62
    5ad8:	0f be       	out	0x3f, r0	; 63
    5ada:	cd bf       	out	0x3d, r28	; 61
    5adc:	cf 91       	pop	r28
    5ade:	df 91       	pop	r29
    5ae0:	1f 91       	pop	r17
    5ae2:	0f 91       	pop	r16
    5ae4:	08 95       	ret

00005ae6 <APP_vLocker>:
//-----------------
void APP_vLocker(u8 *Loc_CorrectUserName4,u8 *Loc_CorrectPassword3){
    5ae6:	0f 93       	push	r16
    5ae8:	1f 93       	push	r17
    5aea:	df 93       	push	r29
    5aec:	cf 93       	push	r28
    5aee:	cd b7       	in	r28, 0x3d	; 61
    5af0:	de b7       	in	r29, 0x3e	; 62
    5af2:	c6 5b       	subi	r28, 0xB6	; 182
    5af4:	d0 40       	sbci	r29, 0x00	; 0
    5af6:	0f b6       	in	r0, 0x3f	; 63
    5af8:	f8 94       	cli
    5afa:	de bf       	out	0x3e, r29	; 62
    5afc:	0f be       	out	0x3f, r0	; 63
    5afe:	cd bf       	out	0x3d, r28	; 61
    5b00:	fe 01       	movw	r30, r28
    5b02:	eb 56       	subi	r30, 0x6B	; 107
    5b04:	ff 4f       	sbci	r31, 0xFF	; 255
    5b06:	91 83       	std	Z+1, r25	; 0x01
    5b08:	80 83       	st	Z, r24
    5b0a:	fe 01       	movw	r30, r28
    5b0c:	e9 56       	subi	r30, 0x69	; 105
    5b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    5b10:	71 83       	std	Z+1, r23	; 0x01
    5b12:	60 83       	st	Z, r22
	u8 i;
	u8 user[4],pass[3];
	while(1){
		LCD_vInit();
    5b14:	0e 94 af 1a 	call	0x355e	; 0x355e <LCD_vInit>
		u8 User[]="Enter UserNam";
    5b18:	ce 01       	movw	r24, r28
    5b1a:	80 5b       	subi	r24, 0xB0	; 176
    5b1c:	9f 4f       	sbci	r25, 0xFF	; 255
    5b1e:	c7 56       	subi	r28, 0x67	; 103
    5b20:	df 4f       	sbci	r29, 0xFF	; 255
    5b22:	99 83       	std	Y+1, r25	; 0x01
    5b24:	88 83       	st	Y, r24
    5b26:	c9 59       	subi	r28, 0x99	; 153
    5b28:	d0 40       	sbci	r29, 0x00	; 0
    5b2a:	80 e6       	ldi	r24, 0x60	; 96
    5b2c:	90 e0       	ldi	r25, 0x00	; 0
    5b2e:	c5 56       	subi	r28, 0x65	; 101
    5b30:	df 4f       	sbci	r29, 0xFF	; 255
    5b32:	99 83       	std	Y+1, r25	; 0x01
    5b34:	88 83       	st	Y, r24
    5b36:	cb 59       	subi	r28, 0x9B	; 155
    5b38:	d0 40       	sbci	r29, 0x00	; 0
    5b3a:	9e e0       	ldi	r25, 0x0E	; 14
    5b3c:	c3 56       	subi	r28, 0x63	; 99
    5b3e:	df 4f       	sbci	r29, 0xFF	; 255
    5b40:	98 83       	st	Y, r25
    5b42:	cd 59       	subi	r28, 0x9D	; 157
    5b44:	d0 40       	sbci	r29, 0x00	; 0
    5b46:	c5 56       	subi	r28, 0x65	; 101
    5b48:	df 4f       	sbci	r29, 0xFF	; 255
    5b4a:	e8 81       	ld	r30, Y
    5b4c:	f9 81       	ldd	r31, Y+1	; 0x01
    5b4e:	cb 59       	subi	r28, 0x9B	; 155
    5b50:	d0 40       	sbci	r29, 0x00	; 0
    5b52:	00 80       	ld	r0, Z
    5b54:	c5 56       	subi	r28, 0x65	; 101
    5b56:	df 4f       	sbci	r29, 0xFF	; 255
    5b58:	88 81       	ld	r24, Y
    5b5a:	99 81       	ldd	r25, Y+1	; 0x01
    5b5c:	cb 59       	subi	r28, 0x9B	; 155
    5b5e:	d0 40       	sbci	r29, 0x00	; 0
    5b60:	01 96       	adiw	r24, 0x01	; 1
    5b62:	c5 56       	subi	r28, 0x65	; 101
    5b64:	df 4f       	sbci	r29, 0xFF	; 255
    5b66:	99 83       	std	Y+1, r25	; 0x01
    5b68:	88 83       	st	Y, r24
    5b6a:	cb 59       	subi	r28, 0x9B	; 155
    5b6c:	d0 40       	sbci	r29, 0x00	; 0
    5b6e:	c7 56       	subi	r28, 0x67	; 103
    5b70:	df 4f       	sbci	r29, 0xFF	; 255
    5b72:	e8 81       	ld	r30, Y
    5b74:	f9 81       	ldd	r31, Y+1	; 0x01
    5b76:	c9 59       	subi	r28, 0x99	; 153
    5b78:	d0 40       	sbci	r29, 0x00	; 0
    5b7a:	00 82       	st	Z, r0
    5b7c:	c7 56       	subi	r28, 0x67	; 103
    5b7e:	df 4f       	sbci	r29, 0xFF	; 255
    5b80:	88 81       	ld	r24, Y
    5b82:	99 81       	ldd	r25, Y+1	; 0x01
    5b84:	c9 59       	subi	r28, 0x99	; 153
    5b86:	d0 40       	sbci	r29, 0x00	; 0
    5b88:	01 96       	adiw	r24, 0x01	; 1
    5b8a:	c7 56       	subi	r28, 0x67	; 103
    5b8c:	df 4f       	sbci	r29, 0xFF	; 255
    5b8e:	99 83       	std	Y+1, r25	; 0x01
    5b90:	88 83       	st	Y, r24
    5b92:	c9 59       	subi	r28, 0x99	; 153
    5b94:	d0 40       	sbci	r29, 0x00	; 0
    5b96:	c3 56       	subi	r28, 0x63	; 99
    5b98:	df 4f       	sbci	r29, 0xFF	; 255
    5b9a:	98 81       	ld	r25, Y
    5b9c:	cd 59       	subi	r28, 0x9D	; 157
    5b9e:	d0 40       	sbci	r29, 0x00	; 0
    5ba0:	91 50       	subi	r25, 0x01	; 1
    5ba2:	c3 56       	subi	r28, 0x63	; 99
    5ba4:	df 4f       	sbci	r29, 0xFF	; 255
    5ba6:	98 83       	st	Y, r25
    5ba8:	cd 59       	subi	r28, 0x9D	; 157
    5baa:	d0 40       	sbci	r29, 0x00	; 0
    5bac:	c3 56       	subi	r28, 0x63	; 99
    5bae:	df 4f       	sbci	r29, 0xFF	; 255
    5bb0:	e8 81       	ld	r30, Y
    5bb2:	cd 59       	subi	r28, 0x9D	; 157
    5bb4:	d0 40       	sbci	r29, 0x00	; 0
    5bb6:	ee 23       	and	r30, r30
    5bb8:	31 f6       	brne	.-116    	; 0x5b46 <APP_vLocker+0x60>
		LCD_vWriteString(User);
    5bba:	ce 01       	movw	r24, r28
    5bbc:	80 5b       	subi	r24, 0xB0	; 176
    5bbe:	9f 4f       	sbci	r25, 0xFF	; 255
    5bc0:	0e 94 0e 21 	call	0x421c	; 0x421c <LCD_vWriteString>
		for(i=0;i<4;i++){
    5bc4:	fe 01       	movw	r30, r28
    5bc6:	e8 5b       	subi	r30, 0xB8	; 184
    5bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    5bca:	10 82       	st	Z, r1
    5bcc:	c9 c0       	rjmp	.+402    	; 0x5d60 <APP_vLocker+0x27a>
			KAYPAD_vInit();
    5bce:	0e 94 8f 21 	call	0x431e	; 0x431e <KAYPAD_vInit>
			while(1){
				user[i]=KAYPAD_u8GetKey();
    5bd2:	fe 01       	movw	r30, r28
    5bd4:	e8 5b       	subi	r30, 0xB8	; 184
    5bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    5bd8:	80 81       	ld	r24, Z
    5bda:	08 2f       	mov	r16, r24
    5bdc:	10 e0       	ldi	r17, 0x00	; 0
    5bde:	0e 94 9e 21 	call	0x433c	; 0x433c <KAYPAD_u8GetKey>
    5be2:	28 2f       	mov	r18, r24
    5be4:	ce 01       	movw	r24, r28
    5be6:	87 5b       	subi	r24, 0xB7	; 183
    5be8:	9f 4f       	sbci	r25, 0xFF	; 255
    5bea:	fc 01       	movw	r30, r24
    5bec:	e0 0f       	add	r30, r16
    5bee:	f1 1f       	adc	r31, r17
    5bf0:	20 83       	st	Z, r18
    5bf2:	fe 01       	movw	r30, r28
    5bf4:	ed 5b       	subi	r30, 0xBD	; 189
    5bf6:	ff 4f       	sbci	r31, 0xFF	; 255
    5bf8:	80 e0       	ldi	r24, 0x00	; 0
    5bfa:	90 e0       	ldi	r25, 0x00	; 0
    5bfc:	a8 e4       	ldi	r26, 0x48	; 72
    5bfe:	b2 e4       	ldi	r27, 0x42	; 66
    5c00:	80 83       	st	Z, r24
    5c02:	91 83       	std	Z+1, r25	; 0x01
    5c04:	a2 83       	std	Z+2, r26	; 0x02
    5c06:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5c08:	8e 01       	movw	r16, r28
    5c0a:	01 5c       	subi	r16, 0xC1	; 193
    5c0c:	1f 4f       	sbci	r17, 0xFF	; 255
    5c0e:	fe 01       	movw	r30, r28
    5c10:	ed 5b       	subi	r30, 0xBD	; 189
    5c12:	ff 4f       	sbci	r31, 0xFF	; 255
    5c14:	60 81       	ld	r22, Z
    5c16:	71 81       	ldd	r23, Z+1	; 0x01
    5c18:	82 81       	ldd	r24, Z+2	; 0x02
    5c1a:	93 81       	ldd	r25, Z+3	; 0x03
    5c1c:	20 e0       	ldi	r18, 0x00	; 0
    5c1e:	30 e0       	ldi	r19, 0x00	; 0
    5c20:	4a e7       	ldi	r20, 0x7A	; 122
    5c22:	55 e4       	ldi	r21, 0x45	; 69
    5c24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5c28:	dc 01       	movw	r26, r24
    5c2a:	cb 01       	movw	r24, r22
    5c2c:	f8 01       	movw	r30, r16
    5c2e:	80 83       	st	Z, r24
    5c30:	91 83       	std	Z+1, r25	; 0x01
    5c32:	a2 83       	std	Z+2, r26	; 0x02
    5c34:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5c36:	fe 01       	movw	r30, r28
    5c38:	ff 96       	adiw	r30, 0x3f	; 63
    5c3a:	60 81       	ld	r22, Z
    5c3c:	71 81       	ldd	r23, Z+1	; 0x01
    5c3e:	82 81       	ldd	r24, Z+2	; 0x02
    5c40:	93 81       	ldd	r25, Z+3	; 0x03
    5c42:	20 e0       	ldi	r18, 0x00	; 0
    5c44:	30 e0       	ldi	r19, 0x00	; 0
    5c46:	40 e8       	ldi	r20, 0x80	; 128
    5c48:	5f e3       	ldi	r21, 0x3F	; 63
    5c4a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5c4e:	88 23       	and	r24, r24
    5c50:	2c f4       	brge	.+10     	; 0x5c5c <APP_vLocker+0x176>
		__ticks = 1;
    5c52:	81 e0       	ldi	r24, 0x01	; 1
    5c54:	90 e0       	ldi	r25, 0x00	; 0
    5c56:	9e af       	std	Y+62, r25	; 0x3e
    5c58:	8d af       	std	Y+61, r24	; 0x3d
    5c5a:	46 c0       	rjmp	.+140    	; 0x5ce8 <APP_vLocker+0x202>
	else if (__tmp > 65535)
    5c5c:	fe 01       	movw	r30, r28
    5c5e:	ff 96       	adiw	r30, 0x3f	; 63
    5c60:	60 81       	ld	r22, Z
    5c62:	71 81       	ldd	r23, Z+1	; 0x01
    5c64:	82 81       	ldd	r24, Z+2	; 0x02
    5c66:	93 81       	ldd	r25, Z+3	; 0x03
    5c68:	20 e0       	ldi	r18, 0x00	; 0
    5c6a:	3f ef       	ldi	r19, 0xFF	; 255
    5c6c:	4f e7       	ldi	r20, 0x7F	; 127
    5c6e:	57 e4       	ldi	r21, 0x47	; 71
    5c70:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5c74:	18 16       	cp	r1, r24
    5c76:	64 f5       	brge	.+88     	; 0x5cd0 <APP_vLocker+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5c78:	fe 01       	movw	r30, r28
    5c7a:	ed 5b       	subi	r30, 0xBD	; 189
    5c7c:	ff 4f       	sbci	r31, 0xFF	; 255
    5c7e:	60 81       	ld	r22, Z
    5c80:	71 81       	ldd	r23, Z+1	; 0x01
    5c82:	82 81       	ldd	r24, Z+2	; 0x02
    5c84:	93 81       	ldd	r25, Z+3	; 0x03
    5c86:	20 e0       	ldi	r18, 0x00	; 0
    5c88:	30 e0       	ldi	r19, 0x00	; 0
    5c8a:	40 e2       	ldi	r20, 0x20	; 32
    5c8c:	51 e4       	ldi	r21, 0x41	; 65
    5c8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5c92:	dc 01       	movw	r26, r24
    5c94:	cb 01       	movw	r24, r22
    5c96:	bc 01       	movw	r22, r24
    5c98:	cd 01       	movw	r24, r26
    5c9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5c9e:	dc 01       	movw	r26, r24
    5ca0:	cb 01       	movw	r24, r22
    5ca2:	9e af       	std	Y+62, r25	; 0x3e
    5ca4:	8d af       	std	Y+61, r24	; 0x3d
    5ca6:	0f c0       	rjmp	.+30     	; 0x5cc6 <APP_vLocker+0x1e0>
    5ca8:	80 e9       	ldi	r24, 0x90	; 144
    5caa:	91 e0       	ldi	r25, 0x01	; 1
    5cac:	9c af       	std	Y+60, r25	; 0x3c
    5cae:	8b af       	std	Y+59, r24	; 0x3b
    5cb0:	8b ad       	ldd	r24, Y+59	; 0x3b
    5cb2:	9c ad       	ldd	r25, Y+60	; 0x3c
    5cb4:	01 97       	sbiw	r24, 0x01	; 1
    5cb6:	f1 f7       	brne	.-4      	; 0x5cb4 <APP_vLocker+0x1ce>
    5cb8:	9c af       	std	Y+60, r25	; 0x3c
    5cba:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5cbc:	8d ad       	ldd	r24, Y+61	; 0x3d
    5cbe:	9e ad       	ldd	r25, Y+62	; 0x3e
    5cc0:	01 97       	sbiw	r24, 0x01	; 1
    5cc2:	9e af       	std	Y+62, r25	; 0x3e
    5cc4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5cc6:	8d ad       	ldd	r24, Y+61	; 0x3d
    5cc8:	9e ad       	ldd	r25, Y+62	; 0x3e
    5cca:	00 97       	sbiw	r24, 0x00	; 0
    5ccc:	69 f7       	brne	.-38     	; 0x5ca8 <APP_vLocker+0x1c2>
    5cce:	16 c0       	rjmp	.+44     	; 0x5cfc <APP_vLocker+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5cd0:	fe 01       	movw	r30, r28
    5cd2:	ff 96       	adiw	r30, 0x3f	; 63
    5cd4:	60 81       	ld	r22, Z
    5cd6:	71 81       	ldd	r23, Z+1	; 0x01
    5cd8:	82 81       	ldd	r24, Z+2	; 0x02
    5cda:	93 81       	ldd	r25, Z+3	; 0x03
    5cdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ce0:	dc 01       	movw	r26, r24
    5ce2:	cb 01       	movw	r24, r22
    5ce4:	9e af       	std	Y+62, r25	; 0x3e
    5ce6:	8d af       	std	Y+61, r24	; 0x3d
    5ce8:	8d ad       	ldd	r24, Y+61	; 0x3d
    5cea:	9e ad       	ldd	r25, Y+62	; 0x3e
    5cec:	9a af       	std	Y+58, r25	; 0x3a
    5cee:	89 af       	std	Y+57, r24	; 0x39
    5cf0:	89 ad       	ldd	r24, Y+57	; 0x39
    5cf2:	9a ad       	ldd	r25, Y+58	; 0x3a
    5cf4:	01 97       	sbiw	r24, 0x01	; 1
    5cf6:	f1 f7       	brne	.-4      	; 0x5cf4 <APP_vLocker+0x20e>
    5cf8:	9a af       	std	Y+58, r25	; 0x3a
    5cfa:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(50);
				if(user[i]!=0xff){
    5cfc:	fe 01       	movw	r30, r28
    5cfe:	e8 5b       	subi	r30, 0xB8	; 184
    5d00:	ff 4f       	sbci	r31, 0xFF	; 255
    5d02:	80 81       	ld	r24, Z
    5d04:	28 2f       	mov	r18, r24
    5d06:	30 e0       	ldi	r19, 0x00	; 0
    5d08:	ce 01       	movw	r24, r28
    5d0a:	87 5b       	subi	r24, 0xB7	; 183
    5d0c:	9f 4f       	sbci	r25, 0xFF	; 255
    5d0e:	fc 01       	movw	r30, r24
    5d10:	e2 0f       	add	r30, r18
    5d12:	f3 1f       	adc	r31, r19
    5d14:	80 81       	ld	r24, Z
    5d16:	8f 3f       	cpi	r24, 0xFF	; 255
    5d18:	09 f4       	brne	.+2      	; 0x5d1c <APP_vLocker+0x236>
    5d1a:	5b cf       	rjmp	.-330    	; 0x5bd2 <APP_vLocker+0xec>
					LCD_vInitWithOutClear();
    5d1c:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <LCD_vInitWithOutClear>
					LCD_vGoTo(LineTwo,i);
    5d20:	fe 01       	movw	r30, r28
    5d22:	e8 5b       	subi	r30, 0xB8	; 184
    5d24:	ff 4f       	sbci	r31, 0xFF	; 255
    5d26:	80 ec       	ldi	r24, 0xC0	; 192
    5d28:	60 81       	ld	r22, Z
    5d2a:	0e 94 75 20 	call	0x40ea	; 0x40ea <LCD_vGoTo>
					LCD_vWriteCharacter((user[i])+48);
    5d2e:	fe 01       	movw	r30, r28
    5d30:	e8 5b       	subi	r30, 0xB8	; 184
    5d32:	ff 4f       	sbci	r31, 0xFF	; 255
    5d34:	80 81       	ld	r24, Z
    5d36:	28 2f       	mov	r18, r24
    5d38:	30 e0       	ldi	r19, 0x00	; 0
    5d3a:	ce 01       	movw	r24, r28
    5d3c:	87 5b       	subi	r24, 0xB7	; 183
    5d3e:	9f 4f       	sbci	r25, 0xFF	; 255
    5d40:	fc 01       	movw	r30, r24
    5d42:	e2 0f       	add	r30, r18
    5d44:	f3 1f       	adc	r31, r19
    5d46:	80 81       	ld	r24, Z
    5d48:	80 5d       	subi	r24, 0xD0	; 208
    5d4a:	0e 94 4b 1f 	call	0x3e96	; 0x3e96 <LCD_vWriteCharacter>
	u8 user[4],pass[3];
	while(1){
		LCD_vInit();
		u8 User[]="Enter UserNam";
		LCD_vWriteString(User);
		for(i=0;i<4;i++){
    5d4e:	de 01       	movw	r26, r28
    5d50:	a8 5b       	subi	r26, 0xB8	; 184
    5d52:	bf 4f       	sbci	r27, 0xFF	; 255
    5d54:	fe 01       	movw	r30, r28
    5d56:	e8 5b       	subi	r30, 0xB8	; 184
    5d58:	ff 4f       	sbci	r31, 0xFF	; 255
    5d5a:	80 81       	ld	r24, Z
    5d5c:	8f 5f       	subi	r24, 0xFF	; 255
    5d5e:	8c 93       	st	X, r24
    5d60:	fe 01       	movw	r30, r28
    5d62:	e8 5b       	subi	r30, 0xB8	; 184
    5d64:	ff 4f       	sbci	r31, 0xFF	; 255
    5d66:	80 81       	ld	r24, Z
    5d68:	84 30       	cpi	r24, 0x04	; 4
    5d6a:	08 f4       	brcc	.+2      	; 0x5d6e <APP_vLocker+0x288>
    5d6c:	30 cf       	rjmp	.-416    	; 0x5bce <APP_vLocker+0xe8>
					break;
				}
			}

		}
		if(APP_u8compareArray(Loc_CorrectUserName4,user,4)==0){
    5d6e:	fe 01       	movw	r30, r28
    5d70:	eb 56       	subi	r30, 0x6B	; 107
    5d72:	ff 4f       	sbci	r31, 0xFF	; 255
    5d74:	80 81       	ld	r24, Z
    5d76:	91 81       	ldd	r25, Z+1	; 0x01
    5d78:	9e 01       	movw	r18, r28
    5d7a:	27 5b       	subi	r18, 0xB7	; 183
    5d7c:	3f 4f       	sbci	r19, 0xFF	; 255
    5d7e:	b9 01       	movw	r22, r18
    5d80:	44 e0       	ldi	r20, 0x04	; 4
    5d82:	0e 94 e5 32 	call	0x65ca	; 0x65ca <APP_u8compareArray>
    5d86:	88 23       	and	r24, r24
    5d88:	09 f0       	breq	.+2      	; 0x5d8c <APP_vLocker+0x2a6>
    5d8a:	cb c0       	rjmp	.+406    	; 0x5f22 <APP_vLocker+0x43c>
			u8 Wrong[]="Wrong UserNam";
    5d8c:	ce 01       	movw	r24, r28
    5d8e:	82 5a       	subi	r24, 0xA2	; 162
    5d90:	9f 4f       	sbci	r25, 0xFF	; 255
    5d92:	c2 56       	subi	r28, 0x62	; 98
    5d94:	df 4f       	sbci	r29, 0xFF	; 255
    5d96:	99 83       	std	Y+1, r25	; 0x01
    5d98:	88 83       	st	Y, r24
    5d9a:	ce 59       	subi	r28, 0x9E	; 158
    5d9c:	d0 40       	sbci	r29, 0x00	; 0
    5d9e:	8e e6       	ldi	r24, 0x6E	; 110
    5da0:	90 e0       	ldi	r25, 0x00	; 0
    5da2:	c0 56       	subi	r28, 0x60	; 96
    5da4:	df 4f       	sbci	r29, 0xFF	; 255
    5da6:	99 83       	std	Y+1, r25	; 0x01
    5da8:	88 83       	st	Y, r24
    5daa:	c0 5a       	subi	r28, 0xA0	; 160
    5dac:	d0 40       	sbci	r29, 0x00	; 0
    5dae:	9e e0       	ldi	r25, 0x0E	; 14
    5db0:	ce 55       	subi	r28, 0x5E	; 94
    5db2:	df 4f       	sbci	r29, 0xFF	; 255
    5db4:	98 83       	st	Y, r25
    5db6:	c2 5a       	subi	r28, 0xA2	; 162
    5db8:	d0 40       	sbci	r29, 0x00	; 0
    5dba:	c0 56       	subi	r28, 0x60	; 96
    5dbc:	df 4f       	sbci	r29, 0xFF	; 255
    5dbe:	e8 81       	ld	r30, Y
    5dc0:	f9 81       	ldd	r31, Y+1	; 0x01
    5dc2:	c0 5a       	subi	r28, 0xA0	; 160
    5dc4:	d0 40       	sbci	r29, 0x00	; 0
    5dc6:	00 80       	ld	r0, Z
    5dc8:	c0 56       	subi	r28, 0x60	; 96
    5dca:	df 4f       	sbci	r29, 0xFF	; 255
    5dcc:	88 81       	ld	r24, Y
    5dce:	99 81       	ldd	r25, Y+1	; 0x01
    5dd0:	c0 5a       	subi	r28, 0xA0	; 160
    5dd2:	d0 40       	sbci	r29, 0x00	; 0
    5dd4:	01 96       	adiw	r24, 0x01	; 1
    5dd6:	c0 56       	subi	r28, 0x60	; 96
    5dd8:	df 4f       	sbci	r29, 0xFF	; 255
    5dda:	99 83       	std	Y+1, r25	; 0x01
    5ddc:	88 83       	st	Y, r24
    5dde:	c0 5a       	subi	r28, 0xA0	; 160
    5de0:	d0 40       	sbci	r29, 0x00	; 0
    5de2:	c2 56       	subi	r28, 0x62	; 98
    5de4:	df 4f       	sbci	r29, 0xFF	; 255
    5de6:	e8 81       	ld	r30, Y
    5de8:	f9 81       	ldd	r31, Y+1	; 0x01
    5dea:	ce 59       	subi	r28, 0x9E	; 158
    5dec:	d0 40       	sbci	r29, 0x00	; 0
    5dee:	00 82       	st	Z, r0
    5df0:	c2 56       	subi	r28, 0x62	; 98
    5df2:	df 4f       	sbci	r29, 0xFF	; 255
    5df4:	88 81       	ld	r24, Y
    5df6:	99 81       	ldd	r25, Y+1	; 0x01
    5df8:	ce 59       	subi	r28, 0x9E	; 158
    5dfa:	d0 40       	sbci	r29, 0x00	; 0
    5dfc:	01 96       	adiw	r24, 0x01	; 1
    5dfe:	c2 56       	subi	r28, 0x62	; 98
    5e00:	df 4f       	sbci	r29, 0xFF	; 255
    5e02:	99 83       	std	Y+1, r25	; 0x01
    5e04:	88 83       	st	Y, r24
    5e06:	ce 59       	subi	r28, 0x9E	; 158
    5e08:	d0 40       	sbci	r29, 0x00	; 0
    5e0a:	ce 55       	subi	r28, 0x5E	; 94
    5e0c:	df 4f       	sbci	r29, 0xFF	; 255
    5e0e:	98 81       	ld	r25, Y
    5e10:	c2 5a       	subi	r28, 0xA2	; 162
    5e12:	d0 40       	sbci	r29, 0x00	; 0
    5e14:	91 50       	subi	r25, 0x01	; 1
    5e16:	ce 55       	subi	r28, 0x5E	; 94
    5e18:	df 4f       	sbci	r29, 0xFF	; 255
    5e1a:	98 83       	st	Y, r25
    5e1c:	c2 5a       	subi	r28, 0xA2	; 162
    5e1e:	d0 40       	sbci	r29, 0x00	; 0
    5e20:	ce 55       	subi	r28, 0x5E	; 94
    5e22:	df 4f       	sbci	r29, 0xFF	; 255
    5e24:	e8 81       	ld	r30, Y
    5e26:	c2 5a       	subi	r28, 0xA2	; 162
    5e28:	d0 40       	sbci	r29, 0x00	; 0
    5e2a:	ee 23       	and	r30, r30
    5e2c:	31 f6       	brne	.-116    	; 0x5dba <APP_vLocker+0x2d4>
			LCD_vInit();
    5e2e:	0e 94 af 1a 	call	0x355e	; 0x355e <LCD_vInit>
			LCD_vWriteString(Wrong);
    5e32:	ce 01       	movw	r24, r28
    5e34:	82 5a       	subi	r24, 0xA2	; 162
    5e36:	9f 4f       	sbci	r25, 0xFF	; 255
    5e38:	0e 94 0e 21 	call	0x421c	; 0x421c <LCD_vWriteString>
    5e3c:	80 e0       	ldi	r24, 0x00	; 0
    5e3e:	90 e0       	ldi	r25, 0x00	; 0
    5e40:	aa e7       	ldi	r26, 0x7A	; 122
    5e42:	b3 e4       	ldi	r27, 0x43	; 67
    5e44:	8d ab       	std	Y+53, r24	; 0x35
    5e46:	9e ab       	std	Y+54, r25	; 0x36
    5e48:	af ab       	std	Y+55, r26	; 0x37
    5e4a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5e4c:	6d a9       	ldd	r22, Y+53	; 0x35
    5e4e:	7e a9       	ldd	r23, Y+54	; 0x36
    5e50:	8f a9       	ldd	r24, Y+55	; 0x37
    5e52:	98 ad       	ldd	r25, Y+56	; 0x38
    5e54:	20 e0       	ldi	r18, 0x00	; 0
    5e56:	30 e0       	ldi	r19, 0x00	; 0
    5e58:	4a e7       	ldi	r20, 0x7A	; 122
    5e5a:	55 e4       	ldi	r21, 0x45	; 69
    5e5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5e60:	dc 01       	movw	r26, r24
    5e62:	cb 01       	movw	r24, r22
    5e64:	89 ab       	std	Y+49, r24	; 0x31
    5e66:	9a ab       	std	Y+50, r25	; 0x32
    5e68:	ab ab       	std	Y+51, r26	; 0x33
    5e6a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5e6c:	69 a9       	ldd	r22, Y+49	; 0x31
    5e6e:	7a a9       	ldd	r23, Y+50	; 0x32
    5e70:	8b a9       	ldd	r24, Y+51	; 0x33
    5e72:	9c a9       	ldd	r25, Y+52	; 0x34
    5e74:	20 e0       	ldi	r18, 0x00	; 0
    5e76:	30 e0       	ldi	r19, 0x00	; 0
    5e78:	40 e8       	ldi	r20, 0x80	; 128
    5e7a:	5f e3       	ldi	r21, 0x3F	; 63
    5e7c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5e80:	88 23       	and	r24, r24
    5e82:	2c f4       	brge	.+10     	; 0x5e8e <APP_vLocker+0x3a8>
		__ticks = 1;
    5e84:	81 e0       	ldi	r24, 0x01	; 1
    5e86:	90 e0       	ldi	r25, 0x00	; 0
    5e88:	98 ab       	std	Y+48, r25	; 0x30
    5e8a:	8f a7       	std	Y+47, r24	; 0x2f
    5e8c:	3f c0       	rjmp	.+126    	; 0x5f0c <APP_vLocker+0x426>
	else if (__tmp > 65535)
    5e8e:	69 a9       	ldd	r22, Y+49	; 0x31
    5e90:	7a a9       	ldd	r23, Y+50	; 0x32
    5e92:	8b a9       	ldd	r24, Y+51	; 0x33
    5e94:	9c a9       	ldd	r25, Y+52	; 0x34
    5e96:	20 e0       	ldi	r18, 0x00	; 0
    5e98:	3f ef       	ldi	r19, 0xFF	; 255
    5e9a:	4f e7       	ldi	r20, 0x7F	; 127
    5e9c:	57 e4       	ldi	r21, 0x47	; 71
    5e9e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5ea2:	18 16       	cp	r1, r24
    5ea4:	4c f5       	brge	.+82     	; 0x5ef8 <APP_vLocker+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5ea6:	6d a9       	ldd	r22, Y+53	; 0x35
    5ea8:	7e a9       	ldd	r23, Y+54	; 0x36
    5eaa:	8f a9       	ldd	r24, Y+55	; 0x37
    5eac:	98 ad       	ldd	r25, Y+56	; 0x38
    5eae:	20 e0       	ldi	r18, 0x00	; 0
    5eb0:	30 e0       	ldi	r19, 0x00	; 0
    5eb2:	40 e2       	ldi	r20, 0x20	; 32
    5eb4:	51 e4       	ldi	r21, 0x41	; 65
    5eb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5eba:	dc 01       	movw	r26, r24
    5ebc:	cb 01       	movw	r24, r22
    5ebe:	bc 01       	movw	r22, r24
    5ec0:	cd 01       	movw	r24, r26
    5ec2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ec6:	dc 01       	movw	r26, r24
    5ec8:	cb 01       	movw	r24, r22
    5eca:	98 ab       	std	Y+48, r25	; 0x30
    5ecc:	8f a7       	std	Y+47, r24	; 0x2f
    5ece:	0f c0       	rjmp	.+30     	; 0x5eee <APP_vLocker+0x408>
    5ed0:	80 e9       	ldi	r24, 0x90	; 144
    5ed2:	91 e0       	ldi	r25, 0x01	; 1
    5ed4:	9e a7       	std	Y+46, r25	; 0x2e
    5ed6:	8d a7       	std	Y+45, r24	; 0x2d
    5ed8:	8d a5       	ldd	r24, Y+45	; 0x2d
    5eda:	9e a5       	ldd	r25, Y+46	; 0x2e
    5edc:	01 97       	sbiw	r24, 0x01	; 1
    5ede:	f1 f7       	brne	.-4      	; 0x5edc <APP_vLocker+0x3f6>
    5ee0:	9e a7       	std	Y+46, r25	; 0x2e
    5ee2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5ee4:	8f a5       	ldd	r24, Y+47	; 0x2f
    5ee6:	98 a9       	ldd	r25, Y+48	; 0x30
    5ee8:	01 97       	sbiw	r24, 0x01	; 1
    5eea:	98 ab       	std	Y+48, r25	; 0x30
    5eec:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5eee:	8f a5       	ldd	r24, Y+47	; 0x2f
    5ef0:	98 a9       	ldd	r25, Y+48	; 0x30
    5ef2:	00 97       	sbiw	r24, 0x00	; 0
    5ef4:	69 f7       	brne	.-38     	; 0x5ed0 <APP_vLocker+0x3ea>
    5ef6:	0e ce       	rjmp	.-996    	; 0x5b14 <APP_vLocker+0x2e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5ef8:	69 a9       	ldd	r22, Y+49	; 0x31
    5efa:	7a a9       	ldd	r23, Y+50	; 0x32
    5efc:	8b a9       	ldd	r24, Y+51	; 0x33
    5efe:	9c a9       	ldd	r25, Y+52	; 0x34
    5f00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5f04:	dc 01       	movw	r26, r24
    5f06:	cb 01       	movw	r24, r22
    5f08:	98 ab       	std	Y+48, r25	; 0x30
    5f0a:	8f a7       	std	Y+47, r24	; 0x2f
    5f0c:	8f a5       	ldd	r24, Y+47	; 0x2f
    5f0e:	98 a9       	ldd	r25, Y+48	; 0x30
    5f10:	9c a7       	std	Y+44, r25	; 0x2c
    5f12:	8b a7       	std	Y+43, r24	; 0x2b
    5f14:	8b a5       	ldd	r24, Y+43	; 0x2b
    5f16:	9c a5       	ldd	r25, Y+44	; 0x2c
    5f18:	01 97       	sbiw	r24, 0x01	; 1
    5f1a:	f1 f7       	brne	.-4      	; 0x5f18 <APP_vLocker+0x432>
    5f1c:	9c a7       	std	Y+44, r25	; 0x2c
    5f1e:	8b a7       	std	Y+43, r24	; 0x2b
    5f20:	f9 cd       	rjmp	.-1038   	; 0x5b14 <APP_vLocker+0x2e>
			_delay_ms(250);
		}
		else if(APP_u8compareArray(Loc_CorrectUserName4,user,4)==1){
    5f22:	fe 01       	movw	r30, r28
    5f24:	eb 56       	subi	r30, 0x6B	; 107
    5f26:	ff 4f       	sbci	r31, 0xFF	; 255
    5f28:	80 81       	ld	r24, Z
    5f2a:	91 81       	ldd	r25, Z+1	; 0x01
    5f2c:	9e 01       	movw	r18, r28
    5f2e:	27 5b       	subi	r18, 0xB7	; 183
    5f30:	3f 4f       	sbci	r19, 0xFF	; 255
    5f32:	b9 01       	movw	r22, r18
    5f34:	44 e0       	ldi	r20, 0x04	; 4
    5f36:	0e 94 e5 32 	call	0x65ca	; 0x65ca <APP_u8compareArray>
    5f3a:	81 30       	cpi	r24, 0x01	; 1
    5f3c:	09 f0       	breq	.+2      	; 0x5f40 <APP_vLocker+0x45a>
    5f3e:	ea cd       	rjmp	.-1068   	; 0x5b14 <APP_vLocker+0x2e>
		else{
			//do nothing
		}
	}
	u8 WrongPassCounter ;
	for(WrongPassCounter=0;WrongPassCounter<3;WrongPassCounter++){
    5f40:	fe 01       	movw	r30, r28
    5f42:	e9 5b       	subi	r30, 0xB9	; 185
    5f44:	ff 4f       	sbci	r31, 0xFF	; 255
    5f46:	10 82       	st	Z, r1
    5f48:	ce c2       	rjmp	.+1436   	; 0x64e6 <APP_vLocker+0xa00>
		LCD_vInit();
    5f4a:	0e 94 af 1a 	call	0x355e	; 0x355e <LCD_vInit>
		u8 Pass[]="Enter Pass";
    5f4e:	ce 01       	movw	r24, r28
    5f50:	84 59       	subi	r24, 0x94	; 148
    5f52:	9f 4f       	sbci	r25, 0xFF	; 255
    5f54:	cd 55       	subi	r28, 0x5D	; 93
    5f56:	df 4f       	sbci	r29, 0xFF	; 255
    5f58:	99 83       	std	Y+1, r25	; 0x01
    5f5a:	88 83       	st	Y, r24
    5f5c:	c3 5a       	subi	r28, 0xA3	; 163
    5f5e:	d0 40       	sbci	r29, 0x00	; 0
    5f60:	8c e7       	ldi	r24, 0x7C	; 124
    5f62:	90 e0       	ldi	r25, 0x00	; 0
    5f64:	cb 55       	subi	r28, 0x5B	; 91
    5f66:	df 4f       	sbci	r29, 0xFF	; 255
    5f68:	99 83       	std	Y+1, r25	; 0x01
    5f6a:	88 83       	st	Y, r24
    5f6c:	c5 5a       	subi	r28, 0xA5	; 165
    5f6e:	d0 40       	sbci	r29, 0x00	; 0
    5f70:	9b e0       	ldi	r25, 0x0B	; 11
    5f72:	c9 55       	subi	r28, 0x59	; 89
    5f74:	df 4f       	sbci	r29, 0xFF	; 255
    5f76:	98 83       	st	Y, r25
    5f78:	c7 5a       	subi	r28, 0xA7	; 167
    5f7a:	d0 40       	sbci	r29, 0x00	; 0
    5f7c:	cb 55       	subi	r28, 0x5B	; 91
    5f7e:	df 4f       	sbci	r29, 0xFF	; 255
    5f80:	e8 81       	ld	r30, Y
    5f82:	f9 81       	ldd	r31, Y+1	; 0x01
    5f84:	c5 5a       	subi	r28, 0xA5	; 165
    5f86:	d0 40       	sbci	r29, 0x00	; 0
    5f88:	00 80       	ld	r0, Z
    5f8a:	cb 55       	subi	r28, 0x5B	; 91
    5f8c:	df 4f       	sbci	r29, 0xFF	; 255
    5f8e:	88 81       	ld	r24, Y
    5f90:	99 81       	ldd	r25, Y+1	; 0x01
    5f92:	c5 5a       	subi	r28, 0xA5	; 165
    5f94:	d0 40       	sbci	r29, 0x00	; 0
    5f96:	01 96       	adiw	r24, 0x01	; 1
    5f98:	cb 55       	subi	r28, 0x5B	; 91
    5f9a:	df 4f       	sbci	r29, 0xFF	; 255
    5f9c:	99 83       	std	Y+1, r25	; 0x01
    5f9e:	88 83       	st	Y, r24
    5fa0:	c5 5a       	subi	r28, 0xA5	; 165
    5fa2:	d0 40       	sbci	r29, 0x00	; 0
    5fa4:	cd 55       	subi	r28, 0x5D	; 93
    5fa6:	df 4f       	sbci	r29, 0xFF	; 255
    5fa8:	e8 81       	ld	r30, Y
    5faa:	f9 81       	ldd	r31, Y+1	; 0x01
    5fac:	c3 5a       	subi	r28, 0xA3	; 163
    5fae:	d0 40       	sbci	r29, 0x00	; 0
    5fb0:	00 82       	st	Z, r0
    5fb2:	cd 55       	subi	r28, 0x5D	; 93
    5fb4:	df 4f       	sbci	r29, 0xFF	; 255
    5fb6:	88 81       	ld	r24, Y
    5fb8:	99 81       	ldd	r25, Y+1	; 0x01
    5fba:	c3 5a       	subi	r28, 0xA3	; 163
    5fbc:	d0 40       	sbci	r29, 0x00	; 0
    5fbe:	01 96       	adiw	r24, 0x01	; 1
    5fc0:	cd 55       	subi	r28, 0x5D	; 93
    5fc2:	df 4f       	sbci	r29, 0xFF	; 255
    5fc4:	99 83       	std	Y+1, r25	; 0x01
    5fc6:	88 83       	st	Y, r24
    5fc8:	c3 5a       	subi	r28, 0xA3	; 163
    5fca:	d0 40       	sbci	r29, 0x00	; 0
    5fcc:	c9 55       	subi	r28, 0x59	; 89
    5fce:	df 4f       	sbci	r29, 0xFF	; 255
    5fd0:	98 81       	ld	r25, Y
    5fd2:	c7 5a       	subi	r28, 0xA7	; 167
    5fd4:	d0 40       	sbci	r29, 0x00	; 0
    5fd6:	91 50       	subi	r25, 0x01	; 1
    5fd8:	c9 55       	subi	r28, 0x59	; 89
    5fda:	df 4f       	sbci	r29, 0xFF	; 255
    5fdc:	98 83       	st	Y, r25
    5fde:	c7 5a       	subi	r28, 0xA7	; 167
    5fe0:	d0 40       	sbci	r29, 0x00	; 0
    5fe2:	c9 55       	subi	r28, 0x59	; 89
    5fe4:	df 4f       	sbci	r29, 0xFF	; 255
    5fe6:	e8 81       	ld	r30, Y
    5fe8:	c7 5a       	subi	r28, 0xA7	; 167
    5fea:	d0 40       	sbci	r29, 0x00	; 0
    5fec:	ee 23       	and	r30, r30
    5fee:	31 f6       	brne	.-116    	; 0x5f7c <APP_vLocker+0x496>
		LCD_vWriteString(Pass);
    5ff0:	ce 01       	movw	r24, r28
    5ff2:	84 59       	subi	r24, 0x94	; 148
    5ff4:	9f 4f       	sbci	r25, 0xFF	; 255
    5ff6:	0e 94 0e 21 	call	0x421c	; 0x421c <LCD_vWriteString>
		LCD_vGoTo(LineTwo,0);
    5ffa:	80 ec       	ldi	r24, 0xC0	; 192
    5ffc:	60 e0       	ldi	r22, 0x00	; 0
    5ffe:	0e 94 75 20 	call	0x40ea	; 0x40ea <LCD_vGoTo>
		for(i=0;i<3;i++){
    6002:	fe 01       	movw	r30, r28
    6004:	e8 5b       	subi	r30, 0xB8	; 184
    6006:	ff 4f       	sbci	r31, 0xFF	; 255
    6008:	10 82       	st	Z, r1
    600a:	a9 c0       	rjmp	.+338    	; 0x615e <APP_vLocker+0x678>
			KAYPAD_vInit();
    600c:	0e 94 8f 21 	call	0x431e	; 0x431e <KAYPAD_vInit>
			while(1){
				pass[i]=KAYPAD_u8GetKey();
    6010:	fe 01       	movw	r30, r28
    6012:	e8 5b       	subi	r30, 0xB8	; 184
    6014:	ff 4f       	sbci	r31, 0xFF	; 255
    6016:	80 81       	ld	r24, Z
    6018:	08 2f       	mov	r16, r24
    601a:	10 e0       	ldi	r17, 0x00	; 0
    601c:	0e 94 9e 21 	call	0x433c	; 0x433c <KAYPAD_u8GetKey>
    6020:	28 2f       	mov	r18, r24
    6022:	ce 01       	movw	r24, r28
    6024:	83 5b       	subi	r24, 0xB3	; 179
    6026:	9f 4f       	sbci	r25, 0xFF	; 255
    6028:	fc 01       	movw	r30, r24
    602a:	e0 0f       	add	r30, r16
    602c:	f1 1f       	adc	r31, r17
    602e:	20 83       	st	Z, r18
    6030:	80 e0       	ldi	r24, 0x00	; 0
    6032:	90 e0       	ldi	r25, 0x00	; 0
    6034:	a8 e4       	ldi	r26, 0x48	; 72
    6036:	b2 e4       	ldi	r27, 0x42	; 66
    6038:	8f a3       	std	Y+39, r24	; 0x27
    603a:	98 a7       	std	Y+40, r25	; 0x28
    603c:	a9 a7       	std	Y+41, r26	; 0x29
    603e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6040:	6f a1       	ldd	r22, Y+39	; 0x27
    6042:	78 a5       	ldd	r23, Y+40	; 0x28
    6044:	89 a5       	ldd	r24, Y+41	; 0x29
    6046:	9a a5       	ldd	r25, Y+42	; 0x2a
    6048:	20 e0       	ldi	r18, 0x00	; 0
    604a:	30 e0       	ldi	r19, 0x00	; 0
    604c:	4a e7       	ldi	r20, 0x7A	; 122
    604e:	55 e4       	ldi	r21, 0x45	; 69
    6050:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6054:	dc 01       	movw	r26, r24
    6056:	cb 01       	movw	r24, r22
    6058:	8b a3       	std	Y+35, r24	; 0x23
    605a:	9c a3       	std	Y+36, r25	; 0x24
    605c:	ad a3       	std	Y+37, r26	; 0x25
    605e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    6060:	6b a1       	ldd	r22, Y+35	; 0x23
    6062:	7c a1       	ldd	r23, Y+36	; 0x24
    6064:	8d a1       	ldd	r24, Y+37	; 0x25
    6066:	9e a1       	ldd	r25, Y+38	; 0x26
    6068:	20 e0       	ldi	r18, 0x00	; 0
    606a:	30 e0       	ldi	r19, 0x00	; 0
    606c:	40 e8       	ldi	r20, 0x80	; 128
    606e:	5f e3       	ldi	r21, 0x3F	; 63
    6070:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    6074:	88 23       	and	r24, r24
    6076:	2c f4       	brge	.+10     	; 0x6082 <APP_vLocker+0x59c>
		__ticks = 1;
    6078:	81 e0       	ldi	r24, 0x01	; 1
    607a:	90 e0       	ldi	r25, 0x00	; 0
    607c:	9a a3       	std	Y+34, r25	; 0x22
    607e:	89 a3       	std	Y+33, r24	; 0x21
    6080:	3f c0       	rjmp	.+126    	; 0x6100 <APP_vLocker+0x61a>
	else if (__tmp > 65535)
    6082:	6b a1       	ldd	r22, Y+35	; 0x23
    6084:	7c a1       	ldd	r23, Y+36	; 0x24
    6086:	8d a1       	ldd	r24, Y+37	; 0x25
    6088:	9e a1       	ldd	r25, Y+38	; 0x26
    608a:	20 e0       	ldi	r18, 0x00	; 0
    608c:	3f ef       	ldi	r19, 0xFF	; 255
    608e:	4f e7       	ldi	r20, 0x7F	; 127
    6090:	57 e4       	ldi	r21, 0x47	; 71
    6092:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    6096:	18 16       	cp	r1, r24
    6098:	4c f5       	brge	.+82     	; 0x60ec <APP_vLocker+0x606>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    609a:	6f a1       	ldd	r22, Y+39	; 0x27
    609c:	78 a5       	ldd	r23, Y+40	; 0x28
    609e:	89 a5       	ldd	r24, Y+41	; 0x29
    60a0:	9a a5       	ldd	r25, Y+42	; 0x2a
    60a2:	20 e0       	ldi	r18, 0x00	; 0
    60a4:	30 e0       	ldi	r19, 0x00	; 0
    60a6:	40 e2       	ldi	r20, 0x20	; 32
    60a8:	51 e4       	ldi	r21, 0x41	; 65
    60aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    60ae:	dc 01       	movw	r26, r24
    60b0:	cb 01       	movw	r24, r22
    60b2:	bc 01       	movw	r22, r24
    60b4:	cd 01       	movw	r24, r26
    60b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    60ba:	dc 01       	movw	r26, r24
    60bc:	cb 01       	movw	r24, r22
    60be:	9a a3       	std	Y+34, r25	; 0x22
    60c0:	89 a3       	std	Y+33, r24	; 0x21
    60c2:	0f c0       	rjmp	.+30     	; 0x60e2 <APP_vLocker+0x5fc>
    60c4:	80 e9       	ldi	r24, 0x90	; 144
    60c6:	91 e0       	ldi	r25, 0x01	; 1
    60c8:	98 a3       	std	Y+32, r25	; 0x20
    60ca:	8f 8f       	std	Y+31, r24	; 0x1f
    60cc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    60ce:	98 a1       	ldd	r25, Y+32	; 0x20
    60d0:	01 97       	sbiw	r24, 0x01	; 1
    60d2:	f1 f7       	brne	.-4      	; 0x60d0 <APP_vLocker+0x5ea>
    60d4:	98 a3       	std	Y+32, r25	; 0x20
    60d6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    60d8:	89 a1       	ldd	r24, Y+33	; 0x21
    60da:	9a a1       	ldd	r25, Y+34	; 0x22
    60dc:	01 97       	sbiw	r24, 0x01	; 1
    60de:	9a a3       	std	Y+34, r25	; 0x22
    60e0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    60e2:	89 a1       	ldd	r24, Y+33	; 0x21
    60e4:	9a a1       	ldd	r25, Y+34	; 0x22
    60e6:	00 97       	sbiw	r24, 0x00	; 0
    60e8:	69 f7       	brne	.-38     	; 0x60c4 <APP_vLocker+0x5de>
    60ea:	14 c0       	rjmp	.+40     	; 0x6114 <APP_vLocker+0x62e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    60ec:	6b a1       	ldd	r22, Y+35	; 0x23
    60ee:	7c a1       	ldd	r23, Y+36	; 0x24
    60f0:	8d a1       	ldd	r24, Y+37	; 0x25
    60f2:	9e a1       	ldd	r25, Y+38	; 0x26
    60f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    60f8:	dc 01       	movw	r26, r24
    60fa:	cb 01       	movw	r24, r22
    60fc:	9a a3       	std	Y+34, r25	; 0x22
    60fe:	89 a3       	std	Y+33, r24	; 0x21
    6100:	89 a1       	ldd	r24, Y+33	; 0x21
    6102:	9a a1       	ldd	r25, Y+34	; 0x22
    6104:	9e 8f       	std	Y+30, r25	; 0x1e
    6106:	8d 8f       	std	Y+29, r24	; 0x1d
    6108:	8d 8d       	ldd	r24, Y+29	; 0x1d
    610a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    610c:	01 97       	sbiw	r24, 0x01	; 1
    610e:	f1 f7       	brne	.-4      	; 0x610c <APP_vLocker+0x626>
    6110:	9e 8f       	std	Y+30, r25	; 0x1e
    6112:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(50);
				if(pass[i]!=0xff){
    6114:	fe 01       	movw	r30, r28
    6116:	e8 5b       	subi	r30, 0xB8	; 184
    6118:	ff 4f       	sbci	r31, 0xFF	; 255
    611a:	80 81       	ld	r24, Z
    611c:	28 2f       	mov	r18, r24
    611e:	30 e0       	ldi	r19, 0x00	; 0
    6120:	ce 01       	movw	r24, r28
    6122:	83 5b       	subi	r24, 0xB3	; 179
    6124:	9f 4f       	sbci	r25, 0xFF	; 255
    6126:	fc 01       	movw	r30, r24
    6128:	e2 0f       	add	r30, r18
    612a:	f3 1f       	adc	r31, r19
    612c:	80 81       	ld	r24, Z
    612e:	8f 3f       	cpi	r24, 0xFF	; 255
    6130:	09 f4       	brne	.+2      	; 0x6134 <APP_vLocker+0x64e>
    6132:	6e cf       	rjmp	.-292    	; 0x6010 <APP_vLocker+0x52a>
					LCD_vInitWithOutClear();
    6134:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <LCD_vInitWithOutClear>
					LCD_vGoTo(LineTwo,i);
    6138:	fe 01       	movw	r30, r28
    613a:	e8 5b       	subi	r30, 0xB8	; 184
    613c:	ff 4f       	sbci	r31, 0xFF	; 255
    613e:	80 ec       	ldi	r24, 0xC0	; 192
    6140:	60 81       	ld	r22, Z
    6142:	0e 94 75 20 	call	0x40ea	; 0x40ea <LCD_vGoTo>
					LCD_vWriteCharacter('*');
    6146:	8a e2       	ldi	r24, 0x2A	; 42
    6148:	0e 94 4b 1f 	call	0x3e96	; 0x3e96 <LCD_vWriteCharacter>
	for(WrongPassCounter=0;WrongPassCounter<3;WrongPassCounter++){
		LCD_vInit();
		u8 Pass[]="Enter Pass";
		LCD_vWriteString(Pass);
		LCD_vGoTo(LineTwo,0);
		for(i=0;i<3;i++){
    614c:	de 01       	movw	r26, r28
    614e:	a8 5b       	subi	r26, 0xB8	; 184
    6150:	bf 4f       	sbci	r27, 0xFF	; 255
    6152:	fe 01       	movw	r30, r28
    6154:	e8 5b       	subi	r30, 0xB8	; 184
    6156:	ff 4f       	sbci	r31, 0xFF	; 255
    6158:	80 81       	ld	r24, Z
    615a:	8f 5f       	subi	r24, 0xFF	; 255
    615c:	8c 93       	st	X, r24
    615e:	fe 01       	movw	r30, r28
    6160:	e8 5b       	subi	r30, 0xB8	; 184
    6162:	ff 4f       	sbci	r31, 0xFF	; 255
    6164:	80 81       	ld	r24, Z
    6166:	83 30       	cpi	r24, 0x03	; 3
    6168:	08 f4       	brcc	.+2      	; 0x616c <APP_vLocker+0x686>
    616a:	50 cf       	rjmp	.-352    	; 0x600c <APP_vLocker+0x526>
					LCD_vWriteCharacter('*');
					break;
				}
			}
		}
		if(APP_u8compareArray(Loc_CorrectPassword3,pass,3)==0){
    616c:	fe 01       	movw	r30, r28
    616e:	e9 56       	subi	r30, 0x69	; 105
    6170:	ff 4f       	sbci	r31, 0xFF	; 255
    6172:	80 81       	ld	r24, Z
    6174:	91 81       	ldd	r25, Z+1	; 0x01
    6176:	9e 01       	movw	r18, r28
    6178:	23 5b       	subi	r18, 0xB3	; 179
    617a:	3f 4f       	sbci	r19, 0xFF	; 255
    617c:	b9 01       	movw	r22, r18
    617e:	43 e0       	ldi	r20, 0x03	; 3
    6180:	0e 94 e5 32 	call	0x65ca	; 0x65ca <APP_u8compareArray>
    6184:	88 23       	and	r24, r24
    6186:	09 f0       	breq	.+2      	; 0x618a <APP_vLocker+0x6a4>
    6188:	cb c0       	rjmp	.+406    	; 0x6320 <APP_vLocker+0x83a>
			LCD_vInit();
    618a:	0e 94 af 1a 	call	0x355e	; 0x355e <LCD_vInit>
			u8 Wrong[]="Wrong Pass";
    618e:	ce 01       	movw	r24, r28
    6190:	89 58       	subi	r24, 0x89	; 137
    6192:	9f 4f       	sbci	r25, 0xFF	; 255
    6194:	c8 55       	subi	r28, 0x58	; 88
    6196:	df 4f       	sbci	r29, 0xFF	; 255
    6198:	99 83       	std	Y+1, r25	; 0x01
    619a:	88 83       	st	Y, r24
    619c:	c8 5a       	subi	r28, 0xA8	; 168
    619e:	d0 40       	sbci	r29, 0x00	; 0
    61a0:	87 e8       	ldi	r24, 0x87	; 135
    61a2:	90 e0       	ldi	r25, 0x00	; 0
    61a4:	c6 55       	subi	r28, 0x56	; 86
    61a6:	df 4f       	sbci	r29, 0xFF	; 255
    61a8:	99 83       	std	Y+1, r25	; 0x01
    61aa:	88 83       	st	Y, r24
    61ac:	ca 5a       	subi	r28, 0xAA	; 170
    61ae:	d0 40       	sbci	r29, 0x00	; 0
    61b0:	9b e0       	ldi	r25, 0x0B	; 11
    61b2:	c4 55       	subi	r28, 0x54	; 84
    61b4:	df 4f       	sbci	r29, 0xFF	; 255
    61b6:	98 83       	st	Y, r25
    61b8:	cc 5a       	subi	r28, 0xAC	; 172
    61ba:	d0 40       	sbci	r29, 0x00	; 0
    61bc:	c6 55       	subi	r28, 0x56	; 86
    61be:	df 4f       	sbci	r29, 0xFF	; 255
    61c0:	e8 81       	ld	r30, Y
    61c2:	f9 81       	ldd	r31, Y+1	; 0x01
    61c4:	ca 5a       	subi	r28, 0xAA	; 170
    61c6:	d0 40       	sbci	r29, 0x00	; 0
    61c8:	00 80       	ld	r0, Z
    61ca:	c6 55       	subi	r28, 0x56	; 86
    61cc:	df 4f       	sbci	r29, 0xFF	; 255
    61ce:	88 81       	ld	r24, Y
    61d0:	99 81       	ldd	r25, Y+1	; 0x01
    61d2:	ca 5a       	subi	r28, 0xAA	; 170
    61d4:	d0 40       	sbci	r29, 0x00	; 0
    61d6:	01 96       	adiw	r24, 0x01	; 1
    61d8:	c6 55       	subi	r28, 0x56	; 86
    61da:	df 4f       	sbci	r29, 0xFF	; 255
    61dc:	99 83       	std	Y+1, r25	; 0x01
    61de:	88 83       	st	Y, r24
    61e0:	ca 5a       	subi	r28, 0xAA	; 170
    61e2:	d0 40       	sbci	r29, 0x00	; 0
    61e4:	c8 55       	subi	r28, 0x58	; 88
    61e6:	df 4f       	sbci	r29, 0xFF	; 255
    61e8:	e8 81       	ld	r30, Y
    61ea:	f9 81       	ldd	r31, Y+1	; 0x01
    61ec:	c8 5a       	subi	r28, 0xA8	; 168
    61ee:	d0 40       	sbci	r29, 0x00	; 0
    61f0:	00 82       	st	Z, r0
    61f2:	c8 55       	subi	r28, 0x58	; 88
    61f4:	df 4f       	sbci	r29, 0xFF	; 255
    61f6:	88 81       	ld	r24, Y
    61f8:	99 81       	ldd	r25, Y+1	; 0x01
    61fa:	c8 5a       	subi	r28, 0xA8	; 168
    61fc:	d0 40       	sbci	r29, 0x00	; 0
    61fe:	01 96       	adiw	r24, 0x01	; 1
    6200:	c8 55       	subi	r28, 0x58	; 88
    6202:	df 4f       	sbci	r29, 0xFF	; 255
    6204:	99 83       	std	Y+1, r25	; 0x01
    6206:	88 83       	st	Y, r24
    6208:	c8 5a       	subi	r28, 0xA8	; 168
    620a:	d0 40       	sbci	r29, 0x00	; 0
    620c:	c4 55       	subi	r28, 0x54	; 84
    620e:	df 4f       	sbci	r29, 0xFF	; 255
    6210:	98 81       	ld	r25, Y
    6212:	cc 5a       	subi	r28, 0xAC	; 172
    6214:	d0 40       	sbci	r29, 0x00	; 0
    6216:	91 50       	subi	r25, 0x01	; 1
    6218:	c4 55       	subi	r28, 0x54	; 84
    621a:	df 4f       	sbci	r29, 0xFF	; 255
    621c:	98 83       	st	Y, r25
    621e:	cc 5a       	subi	r28, 0xAC	; 172
    6220:	d0 40       	sbci	r29, 0x00	; 0
    6222:	c4 55       	subi	r28, 0x54	; 84
    6224:	df 4f       	sbci	r29, 0xFF	; 255
    6226:	e8 81       	ld	r30, Y
    6228:	cc 5a       	subi	r28, 0xAC	; 172
    622a:	d0 40       	sbci	r29, 0x00	; 0
    622c:	ee 23       	and	r30, r30
    622e:	31 f6       	brne	.-116    	; 0x61bc <APP_vLocker+0x6d6>
			LCD_vWriteString(Wrong);
    6230:	ce 01       	movw	r24, r28
    6232:	89 58       	subi	r24, 0x89	; 137
    6234:	9f 4f       	sbci	r25, 0xFF	; 255
    6236:	0e 94 0e 21 	call	0x421c	; 0x421c <LCD_vWriteString>
    623a:	80 e0       	ldi	r24, 0x00	; 0
    623c:	90 e0       	ldi	r25, 0x00	; 0
    623e:	aa e7       	ldi	r26, 0x7A	; 122
    6240:	b3 e4       	ldi	r27, 0x43	; 67
    6242:	89 8f       	std	Y+25, r24	; 0x19
    6244:	9a 8f       	std	Y+26, r25	; 0x1a
    6246:	ab 8f       	std	Y+27, r26	; 0x1b
    6248:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    624a:	69 8d       	ldd	r22, Y+25	; 0x19
    624c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    624e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6250:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6252:	20 e0       	ldi	r18, 0x00	; 0
    6254:	30 e0       	ldi	r19, 0x00	; 0
    6256:	4a e7       	ldi	r20, 0x7A	; 122
    6258:	55 e4       	ldi	r21, 0x45	; 69
    625a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    625e:	dc 01       	movw	r26, r24
    6260:	cb 01       	movw	r24, r22
    6262:	8d 8b       	std	Y+21, r24	; 0x15
    6264:	9e 8b       	std	Y+22, r25	; 0x16
    6266:	af 8b       	std	Y+23, r26	; 0x17
    6268:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    626a:	6d 89       	ldd	r22, Y+21	; 0x15
    626c:	7e 89       	ldd	r23, Y+22	; 0x16
    626e:	8f 89       	ldd	r24, Y+23	; 0x17
    6270:	98 8d       	ldd	r25, Y+24	; 0x18
    6272:	20 e0       	ldi	r18, 0x00	; 0
    6274:	30 e0       	ldi	r19, 0x00	; 0
    6276:	40 e8       	ldi	r20, 0x80	; 128
    6278:	5f e3       	ldi	r21, 0x3F	; 63
    627a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    627e:	88 23       	and	r24, r24
    6280:	2c f4       	brge	.+10     	; 0x628c <APP_vLocker+0x7a6>
		__ticks = 1;
    6282:	81 e0       	ldi	r24, 0x01	; 1
    6284:	90 e0       	ldi	r25, 0x00	; 0
    6286:	9c 8b       	std	Y+20, r25	; 0x14
    6288:	8b 8b       	std	Y+19, r24	; 0x13
    628a:	3f c0       	rjmp	.+126    	; 0x630a <APP_vLocker+0x824>
	else if (__tmp > 65535)
    628c:	6d 89       	ldd	r22, Y+21	; 0x15
    628e:	7e 89       	ldd	r23, Y+22	; 0x16
    6290:	8f 89       	ldd	r24, Y+23	; 0x17
    6292:	98 8d       	ldd	r25, Y+24	; 0x18
    6294:	20 e0       	ldi	r18, 0x00	; 0
    6296:	3f ef       	ldi	r19, 0xFF	; 255
    6298:	4f e7       	ldi	r20, 0x7F	; 127
    629a:	57 e4       	ldi	r21, 0x47	; 71
    629c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    62a0:	18 16       	cp	r1, r24
    62a2:	4c f5       	brge	.+82     	; 0x62f6 <APP_vLocker+0x810>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    62a4:	69 8d       	ldd	r22, Y+25	; 0x19
    62a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    62a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    62aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    62ac:	20 e0       	ldi	r18, 0x00	; 0
    62ae:	30 e0       	ldi	r19, 0x00	; 0
    62b0:	40 e2       	ldi	r20, 0x20	; 32
    62b2:	51 e4       	ldi	r21, 0x41	; 65
    62b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    62b8:	dc 01       	movw	r26, r24
    62ba:	cb 01       	movw	r24, r22
    62bc:	bc 01       	movw	r22, r24
    62be:	cd 01       	movw	r24, r26
    62c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    62c4:	dc 01       	movw	r26, r24
    62c6:	cb 01       	movw	r24, r22
    62c8:	9c 8b       	std	Y+20, r25	; 0x14
    62ca:	8b 8b       	std	Y+19, r24	; 0x13
    62cc:	0f c0       	rjmp	.+30     	; 0x62ec <APP_vLocker+0x806>
    62ce:	80 e9       	ldi	r24, 0x90	; 144
    62d0:	91 e0       	ldi	r25, 0x01	; 1
    62d2:	9a 8b       	std	Y+18, r25	; 0x12
    62d4:	89 8b       	std	Y+17, r24	; 0x11
    62d6:	89 89       	ldd	r24, Y+17	; 0x11
    62d8:	9a 89       	ldd	r25, Y+18	; 0x12
    62da:	01 97       	sbiw	r24, 0x01	; 1
    62dc:	f1 f7       	brne	.-4      	; 0x62da <APP_vLocker+0x7f4>
    62de:	9a 8b       	std	Y+18, r25	; 0x12
    62e0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    62e2:	8b 89       	ldd	r24, Y+19	; 0x13
    62e4:	9c 89       	ldd	r25, Y+20	; 0x14
    62e6:	01 97       	sbiw	r24, 0x01	; 1
    62e8:	9c 8b       	std	Y+20, r25	; 0x14
    62ea:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    62ec:	8b 89       	ldd	r24, Y+19	; 0x13
    62ee:	9c 89       	ldd	r25, Y+20	; 0x14
    62f0:	00 97       	sbiw	r24, 0x00	; 0
    62f2:	69 f7       	brne	.-38     	; 0x62ce <APP_vLocker+0x7e8>
    62f4:	ef c0       	rjmp	.+478    	; 0x64d4 <APP_vLocker+0x9ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    62f6:	6d 89       	ldd	r22, Y+21	; 0x15
    62f8:	7e 89       	ldd	r23, Y+22	; 0x16
    62fa:	8f 89       	ldd	r24, Y+23	; 0x17
    62fc:	98 8d       	ldd	r25, Y+24	; 0x18
    62fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6302:	dc 01       	movw	r26, r24
    6304:	cb 01       	movw	r24, r22
    6306:	9c 8b       	std	Y+20, r25	; 0x14
    6308:	8b 8b       	std	Y+19, r24	; 0x13
    630a:	8b 89       	ldd	r24, Y+19	; 0x13
    630c:	9c 89       	ldd	r25, Y+20	; 0x14
    630e:	98 8b       	std	Y+16, r25	; 0x10
    6310:	8f 87       	std	Y+15, r24	; 0x0f
    6312:	8f 85       	ldd	r24, Y+15	; 0x0f
    6314:	98 89       	ldd	r25, Y+16	; 0x10
    6316:	01 97       	sbiw	r24, 0x01	; 1
    6318:	f1 f7       	brne	.-4      	; 0x6316 <APP_vLocker+0x830>
    631a:	98 8b       	std	Y+16, r25	; 0x10
    631c:	8f 87       	std	Y+15, r24	; 0x0f
    631e:	da c0       	rjmp	.+436    	; 0x64d4 <APP_vLocker+0x9ee>
			_delay_ms(250);
		}
		else if(APP_u8compareArray(Loc_CorrectPassword3,pass,3)==1){
    6320:	fe 01       	movw	r30, r28
    6322:	e9 56       	subi	r30, 0x69	; 105
    6324:	ff 4f       	sbci	r31, 0xFF	; 255
    6326:	80 81       	ld	r24, Z
    6328:	91 81       	ldd	r25, Z+1	; 0x01
    632a:	9e 01       	movw	r18, r28
    632c:	23 5b       	subi	r18, 0xB3	; 179
    632e:	3f 4f       	sbci	r19, 0xFF	; 255
    6330:	b9 01       	movw	r22, r18
    6332:	43 e0       	ldi	r20, 0x03	; 3
    6334:	0e 94 e5 32 	call	0x65ca	; 0x65ca <APP_u8compareArray>
    6338:	81 30       	cpi	r24, 0x01	; 1
    633a:	09 f0       	breq	.+2      	; 0x633e <APP_vLocker+0x858>
    633c:	cb c0       	rjmp	.+406    	; 0x64d4 <APP_vLocker+0x9ee>
			LCD_vInit();
    633e:	0e 94 af 1a 	call	0x355e	; 0x355e <LCD_vInit>
			u8 Welcome[]="Welcome";
    6342:	ce 01       	movw	r24, r28
    6344:	8e 57       	subi	r24, 0x7E	; 126
    6346:	9f 4f       	sbci	r25, 0xFF	; 255
    6348:	c3 55       	subi	r28, 0x53	; 83
    634a:	df 4f       	sbci	r29, 0xFF	; 255
    634c:	99 83       	std	Y+1, r25	; 0x01
    634e:	88 83       	st	Y, r24
    6350:	cd 5a       	subi	r28, 0xAD	; 173
    6352:	d0 40       	sbci	r29, 0x00	; 0
    6354:	82 e9       	ldi	r24, 0x92	; 146
    6356:	90 e0       	ldi	r25, 0x00	; 0
    6358:	c1 55       	subi	r28, 0x51	; 81
    635a:	df 4f       	sbci	r29, 0xFF	; 255
    635c:	99 83       	std	Y+1, r25	; 0x01
    635e:	88 83       	st	Y, r24
    6360:	cf 5a       	subi	r28, 0xAF	; 175
    6362:	d0 40       	sbci	r29, 0x00	; 0
    6364:	98 e0       	ldi	r25, 0x08	; 8
    6366:	cf 54       	subi	r28, 0x4F	; 79
    6368:	df 4f       	sbci	r29, 0xFF	; 255
    636a:	98 83       	st	Y, r25
    636c:	c1 5b       	subi	r28, 0xB1	; 177
    636e:	d0 40       	sbci	r29, 0x00	; 0
    6370:	c1 55       	subi	r28, 0x51	; 81
    6372:	df 4f       	sbci	r29, 0xFF	; 255
    6374:	e8 81       	ld	r30, Y
    6376:	f9 81       	ldd	r31, Y+1	; 0x01
    6378:	cf 5a       	subi	r28, 0xAF	; 175
    637a:	d0 40       	sbci	r29, 0x00	; 0
    637c:	00 80       	ld	r0, Z
    637e:	c1 55       	subi	r28, 0x51	; 81
    6380:	df 4f       	sbci	r29, 0xFF	; 255
    6382:	88 81       	ld	r24, Y
    6384:	99 81       	ldd	r25, Y+1	; 0x01
    6386:	cf 5a       	subi	r28, 0xAF	; 175
    6388:	d0 40       	sbci	r29, 0x00	; 0
    638a:	01 96       	adiw	r24, 0x01	; 1
    638c:	c1 55       	subi	r28, 0x51	; 81
    638e:	df 4f       	sbci	r29, 0xFF	; 255
    6390:	99 83       	std	Y+1, r25	; 0x01
    6392:	88 83       	st	Y, r24
    6394:	cf 5a       	subi	r28, 0xAF	; 175
    6396:	d0 40       	sbci	r29, 0x00	; 0
    6398:	c3 55       	subi	r28, 0x53	; 83
    639a:	df 4f       	sbci	r29, 0xFF	; 255
    639c:	e8 81       	ld	r30, Y
    639e:	f9 81       	ldd	r31, Y+1	; 0x01
    63a0:	cd 5a       	subi	r28, 0xAD	; 173
    63a2:	d0 40       	sbci	r29, 0x00	; 0
    63a4:	00 82       	st	Z, r0
    63a6:	c3 55       	subi	r28, 0x53	; 83
    63a8:	df 4f       	sbci	r29, 0xFF	; 255
    63aa:	88 81       	ld	r24, Y
    63ac:	99 81       	ldd	r25, Y+1	; 0x01
    63ae:	cd 5a       	subi	r28, 0xAD	; 173
    63b0:	d0 40       	sbci	r29, 0x00	; 0
    63b2:	01 96       	adiw	r24, 0x01	; 1
    63b4:	c3 55       	subi	r28, 0x53	; 83
    63b6:	df 4f       	sbci	r29, 0xFF	; 255
    63b8:	99 83       	std	Y+1, r25	; 0x01
    63ba:	88 83       	st	Y, r24
    63bc:	cd 5a       	subi	r28, 0xAD	; 173
    63be:	d0 40       	sbci	r29, 0x00	; 0
    63c0:	cf 54       	subi	r28, 0x4F	; 79
    63c2:	df 4f       	sbci	r29, 0xFF	; 255
    63c4:	98 81       	ld	r25, Y
    63c6:	c1 5b       	subi	r28, 0xB1	; 177
    63c8:	d0 40       	sbci	r29, 0x00	; 0
    63ca:	91 50       	subi	r25, 0x01	; 1
    63cc:	cf 54       	subi	r28, 0x4F	; 79
    63ce:	df 4f       	sbci	r29, 0xFF	; 255
    63d0:	98 83       	st	Y, r25
    63d2:	c1 5b       	subi	r28, 0xB1	; 177
    63d4:	d0 40       	sbci	r29, 0x00	; 0
    63d6:	cf 54       	subi	r28, 0x4F	; 79
    63d8:	df 4f       	sbci	r29, 0xFF	; 255
    63da:	e8 81       	ld	r30, Y
    63dc:	c1 5b       	subi	r28, 0xB1	; 177
    63de:	d0 40       	sbci	r29, 0x00	; 0
    63e0:	ee 23       	and	r30, r30
    63e2:	31 f6       	brne	.-116    	; 0x6370 <APP_vLocker+0x88a>
			LCD_vWriteString(Welcome);
    63e4:	ce 01       	movw	r24, r28
    63e6:	8e 57       	subi	r24, 0x7E	; 126
    63e8:	9f 4f       	sbci	r25, 0xFF	; 255
    63ea:	0e 94 0e 21 	call	0x421c	; 0x421c <LCD_vWriteString>
    63ee:	80 e0       	ldi	r24, 0x00	; 0
    63f0:	90 e0       	ldi	r25, 0x00	; 0
    63f2:	aa e7       	ldi	r26, 0x7A	; 122
    63f4:	b3 e4       	ldi	r27, 0x43	; 67
    63f6:	8b 87       	std	Y+11, r24	; 0x0b
    63f8:	9c 87       	std	Y+12, r25	; 0x0c
    63fa:	ad 87       	std	Y+13, r26	; 0x0d
    63fc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    63fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    6400:	7c 85       	ldd	r23, Y+12	; 0x0c
    6402:	8d 85       	ldd	r24, Y+13	; 0x0d
    6404:	9e 85       	ldd	r25, Y+14	; 0x0e
    6406:	20 e0       	ldi	r18, 0x00	; 0
    6408:	30 e0       	ldi	r19, 0x00	; 0
    640a:	4a e7       	ldi	r20, 0x7A	; 122
    640c:	55 e4       	ldi	r21, 0x45	; 69
    640e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6412:	dc 01       	movw	r26, r24
    6414:	cb 01       	movw	r24, r22
    6416:	8f 83       	std	Y+7, r24	; 0x07
    6418:	98 87       	std	Y+8, r25	; 0x08
    641a:	a9 87       	std	Y+9, r26	; 0x09
    641c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    641e:	6f 81       	ldd	r22, Y+7	; 0x07
    6420:	78 85       	ldd	r23, Y+8	; 0x08
    6422:	89 85       	ldd	r24, Y+9	; 0x09
    6424:	9a 85       	ldd	r25, Y+10	; 0x0a
    6426:	20 e0       	ldi	r18, 0x00	; 0
    6428:	30 e0       	ldi	r19, 0x00	; 0
    642a:	40 e8       	ldi	r20, 0x80	; 128
    642c:	5f e3       	ldi	r21, 0x3F	; 63
    642e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    6432:	88 23       	and	r24, r24
    6434:	2c f4       	brge	.+10     	; 0x6440 <APP_vLocker+0x95a>
		__ticks = 1;
    6436:	81 e0       	ldi	r24, 0x01	; 1
    6438:	90 e0       	ldi	r25, 0x00	; 0
    643a:	9e 83       	std	Y+6, r25	; 0x06
    643c:	8d 83       	std	Y+5, r24	; 0x05
    643e:	3f c0       	rjmp	.+126    	; 0x64be <APP_vLocker+0x9d8>
	else if (__tmp > 65535)
    6440:	6f 81       	ldd	r22, Y+7	; 0x07
    6442:	78 85       	ldd	r23, Y+8	; 0x08
    6444:	89 85       	ldd	r24, Y+9	; 0x09
    6446:	9a 85       	ldd	r25, Y+10	; 0x0a
    6448:	20 e0       	ldi	r18, 0x00	; 0
    644a:	3f ef       	ldi	r19, 0xFF	; 255
    644c:	4f e7       	ldi	r20, 0x7F	; 127
    644e:	57 e4       	ldi	r21, 0x47	; 71
    6450:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    6454:	18 16       	cp	r1, r24
    6456:	4c f5       	brge	.+82     	; 0x64aa <APP_vLocker+0x9c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6458:	6b 85       	ldd	r22, Y+11	; 0x0b
    645a:	7c 85       	ldd	r23, Y+12	; 0x0c
    645c:	8d 85       	ldd	r24, Y+13	; 0x0d
    645e:	9e 85       	ldd	r25, Y+14	; 0x0e
    6460:	20 e0       	ldi	r18, 0x00	; 0
    6462:	30 e0       	ldi	r19, 0x00	; 0
    6464:	40 e2       	ldi	r20, 0x20	; 32
    6466:	51 e4       	ldi	r21, 0x41	; 65
    6468:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    646c:	dc 01       	movw	r26, r24
    646e:	cb 01       	movw	r24, r22
    6470:	bc 01       	movw	r22, r24
    6472:	cd 01       	movw	r24, r26
    6474:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6478:	dc 01       	movw	r26, r24
    647a:	cb 01       	movw	r24, r22
    647c:	9e 83       	std	Y+6, r25	; 0x06
    647e:	8d 83       	std	Y+5, r24	; 0x05
    6480:	0f c0       	rjmp	.+30     	; 0x64a0 <APP_vLocker+0x9ba>
    6482:	80 e9       	ldi	r24, 0x90	; 144
    6484:	91 e0       	ldi	r25, 0x01	; 1
    6486:	9c 83       	std	Y+4, r25	; 0x04
    6488:	8b 83       	std	Y+3, r24	; 0x03
    648a:	8b 81       	ldd	r24, Y+3	; 0x03
    648c:	9c 81       	ldd	r25, Y+4	; 0x04
    648e:	01 97       	sbiw	r24, 0x01	; 1
    6490:	f1 f7       	brne	.-4      	; 0x648e <APP_vLocker+0x9a8>
    6492:	9c 83       	std	Y+4, r25	; 0x04
    6494:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6496:	8d 81       	ldd	r24, Y+5	; 0x05
    6498:	9e 81       	ldd	r25, Y+6	; 0x06
    649a:	01 97       	sbiw	r24, 0x01	; 1
    649c:	9e 83       	std	Y+6, r25	; 0x06
    649e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    64a0:	8d 81       	ldd	r24, Y+5	; 0x05
    64a2:	9e 81       	ldd	r25, Y+6	; 0x06
    64a4:	00 97       	sbiw	r24, 0x00	; 0
    64a6:	69 f7       	brne	.-38     	; 0x6482 <APP_vLocker+0x99c>
    64a8:	25 c0       	rjmp	.+74     	; 0x64f4 <APP_vLocker+0xa0e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    64aa:	6f 81       	ldd	r22, Y+7	; 0x07
    64ac:	78 85       	ldd	r23, Y+8	; 0x08
    64ae:	89 85       	ldd	r24, Y+9	; 0x09
    64b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    64b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    64b6:	dc 01       	movw	r26, r24
    64b8:	cb 01       	movw	r24, r22
    64ba:	9e 83       	std	Y+6, r25	; 0x06
    64bc:	8d 83       	std	Y+5, r24	; 0x05
    64be:	8d 81       	ldd	r24, Y+5	; 0x05
    64c0:	9e 81       	ldd	r25, Y+6	; 0x06
    64c2:	9a 83       	std	Y+2, r25	; 0x02
    64c4:	89 83       	std	Y+1, r24	; 0x01
    64c6:	89 81       	ldd	r24, Y+1	; 0x01
    64c8:	9a 81       	ldd	r25, Y+2	; 0x02
    64ca:	01 97       	sbiw	r24, 0x01	; 1
    64cc:	f1 f7       	brne	.-4      	; 0x64ca <APP_vLocker+0x9e4>
    64ce:	9a 83       	std	Y+2, r25	; 0x02
    64d0:	89 83       	std	Y+1, r24	; 0x01
    64d2:	10 c0       	rjmp	.+32     	; 0x64f4 <APP_vLocker+0xa0e>
		else{
			//do nothing
		}
	}
	u8 WrongPassCounter ;
	for(WrongPassCounter=0;WrongPassCounter<3;WrongPassCounter++){
    64d4:	de 01       	movw	r26, r28
    64d6:	a9 5b       	subi	r26, 0xB9	; 185
    64d8:	bf 4f       	sbci	r27, 0xFF	; 255
    64da:	fe 01       	movw	r30, r28
    64dc:	e9 5b       	subi	r30, 0xB9	; 185
    64de:	ff 4f       	sbci	r31, 0xFF	; 255
    64e0:	80 81       	ld	r24, Z
    64e2:	8f 5f       	subi	r24, 0xFF	; 255
    64e4:	8c 93       	st	X, r24
    64e6:	fe 01       	movw	r30, r28
    64e8:	e9 5b       	subi	r30, 0xB9	; 185
    64ea:	ff 4f       	sbci	r31, 0xFF	; 255
    64ec:	80 81       	ld	r24, Z
    64ee:	83 30       	cpi	r24, 0x03	; 3
    64f0:	08 f4       	brcc	.+2      	; 0x64f4 <APP_vLocker+0xa0e>
    64f2:	2b cd       	rjmp	.-1450   	; 0x5f4a <APP_vLocker+0x464>
		}
		else{
			//do nothing
		}
	}
	if(WrongPassCounter==3){
    64f4:	fe 01       	movw	r30, r28
    64f6:	e9 5b       	subi	r30, 0xB9	; 185
    64f8:	ff 4f       	sbci	r31, 0xFF	; 255
    64fa:	80 81       	ld	r24, Z
    64fc:	83 30       	cpi	r24, 0x03	; 3
    64fe:	09 f0       	breq	.+2      	; 0x6502 <APP_vLocker+0xa1c>
    6500:	58 c0       	rjmp	.+176    	; 0x65b2 <APP_vLocker+0xacc>
		LCD_vInit();
    6502:	0e 94 af 1a 	call	0x355e	; 0x355e <LCD_vInit>
		u8 Wrong1[]="Try latter";
    6506:	ce 01       	movw	r24, r28
    6508:	86 57       	subi	r24, 0x76	; 118
    650a:	9f 4f       	sbci	r25, 0xFF	; 255
    650c:	ce 54       	subi	r28, 0x4E	; 78
    650e:	df 4f       	sbci	r29, 0xFF	; 255
    6510:	99 83       	std	Y+1, r25	; 0x01
    6512:	88 83       	st	Y, r24
    6514:	c2 5b       	subi	r28, 0xB2	; 178
    6516:	d0 40       	sbci	r29, 0x00	; 0
    6518:	8a e9       	ldi	r24, 0x9A	; 154
    651a:	90 e0       	ldi	r25, 0x00	; 0
    651c:	cc 54       	subi	r28, 0x4C	; 76
    651e:	df 4f       	sbci	r29, 0xFF	; 255
    6520:	99 83       	std	Y+1, r25	; 0x01
    6522:	88 83       	st	Y, r24
    6524:	c4 5b       	subi	r28, 0xB4	; 180
    6526:	d0 40       	sbci	r29, 0x00	; 0
    6528:	9b e0       	ldi	r25, 0x0B	; 11
    652a:	ca 54       	subi	r28, 0x4A	; 74
    652c:	df 4f       	sbci	r29, 0xFF	; 255
    652e:	98 83       	st	Y, r25
    6530:	c6 5b       	subi	r28, 0xB6	; 182
    6532:	d0 40       	sbci	r29, 0x00	; 0
    6534:	cc 54       	subi	r28, 0x4C	; 76
    6536:	df 4f       	sbci	r29, 0xFF	; 255
    6538:	e8 81       	ld	r30, Y
    653a:	f9 81       	ldd	r31, Y+1	; 0x01
    653c:	c4 5b       	subi	r28, 0xB4	; 180
    653e:	d0 40       	sbci	r29, 0x00	; 0
    6540:	00 80       	ld	r0, Z
    6542:	cc 54       	subi	r28, 0x4C	; 76
    6544:	df 4f       	sbci	r29, 0xFF	; 255
    6546:	88 81       	ld	r24, Y
    6548:	99 81       	ldd	r25, Y+1	; 0x01
    654a:	c4 5b       	subi	r28, 0xB4	; 180
    654c:	d0 40       	sbci	r29, 0x00	; 0
    654e:	01 96       	adiw	r24, 0x01	; 1
    6550:	cc 54       	subi	r28, 0x4C	; 76
    6552:	df 4f       	sbci	r29, 0xFF	; 255
    6554:	99 83       	std	Y+1, r25	; 0x01
    6556:	88 83       	st	Y, r24
    6558:	c4 5b       	subi	r28, 0xB4	; 180
    655a:	d0 40       	sbci	r29, 0x00	; 0
    655c:	ce 54       	subi	r28, 0x4E	; 78
    655e:	df 4f       	sbci	r29, 0xFF	; 255
    6560:	e8 81       	ld	r30, Y
    6562:	f9 81       	ldd	r31, Y+1	; 0x01
    6564:	c2 5b       	subi	r28, 0xB2	; 178
    6566:	d0 40       	sbci	r29, 0x00	; 0
    6568:	00 82       	st	Z, r0
    656a:	ce 54       	subi	r28, 0x4E	; 78
    656c:	df 4f       	sbci	r29, 0xFF	; 255
    656e:	88 81       	ld	r24, Y
    6570:	99 81       	ldd	r25, Y+1	; 0x01
    6572:	c2 5b       	subi	r28, 0xB2	; 178
    6574:	d0 40       	sbci	r29, 0x00	; 0
    6576:	01 96       	adiw	r24, 0x01	; 1
    6578:	ce 54       	subi	r28, 0x4E	; 78
    657a:	df 4f       	sbci	r29, 0xFF	; 255
    657c:	99 83       	std	Y+1, r25	; 0x01
    657e:	88 83       	st	Y, r24
    6580:	c2 5b       	subi	r28, 0xB2	; 178
    6582:	d0 40       	sbci	r29, 0x00	; 0
    6584:	ca 54       	subi	r28, 0x4A	; 74
    6586:	df 4f       	sbci	r29, 0xFF	; 255
    6588:	98 81       	ld	r25, Y
    658a:	c6 5b       	subi	r28, 0xB6	; 182
    658c:	d0 40       	sbci	r29, 0x00	; 0
    658e:	91 50       	subi	r25, 0x01	; 1
    6590:	ca 54       	subi	r28, 0x4A	; 74
    6592:	df 4f       	sbci	r29, 0xFF	; 255
    6594:	98 83       	st	Y, r25
    6596:	c6 5b       	subi	r28, 0xB6	; 182
    6598:	d0 40       	sbci	r29, 0x00	; 0
    659a:	ca 54       	subi	r28, 0x4A	; 74
    659c:	df 4f       	sbci	r29, 0xFF	; 255
    659e:	e8 81       	ld	r30, Y
    65a0:	c6 5b       	subi	r28, 0xB6	; 182
    65a2:	d0 40       	sbci	r29, 0x00	; 0
    65a4:	ee 23       	and	r30, r30
    65a6:	31 f6       	brne	.-116    	; 0x6534 <APP_vLocker+0xa4e>
		LCD_vWriteString(Wrong1);
    65a8:	ce 01       	movw	r24, r28
    65aa:	86 57       	subi	r24, 0x76	; 118
    65ac:	9f 4f       	sbci	r25, 0xFF	; 255
    65ae:	0e 94 0e 21 	call	0x421c	; 0x421c <LCD_vWriteString>
	}
	else{
		//do nothing
	}
}
    65b2:	ca 54       	subi	r28, 0x4A	; 74
    65b4:	df 4f       	sbci	r29, 0xFF	; 255
    65b6:	0f b6       	in	r0, 0x3f	; 63
    65b8:	f8 94       	cli
    65ba:	de bf       	out	0x3e, r29	; 62
    65bc:	0f be       	out	0x3f, r0	; 63
    65be:	cd bf       	out	0x3d, r28	; 61
    65c0:	cf 91       	pop	r28
    65c2:	df 91       	pop	r29
    65c4:	1f 91       	pop	r17
    65c6:	0f 91       	pop	r16
    65c8:	08 95       	ret

000065ca <APP_u8compareArray>:
//----------------
u8 APP_u8compareArray(u8 *ptr1,u8 *ptr2,u8 size){
    65ca:	df 93       	push	r29
    65cc:	cf 93       	push	r28
    65ce:	cd b7       	in	r28, 0x3d	; 61
    65d0:	de b7       	in	r29, 0x3e	; 62
    65d2:	27 97       	sbiw	r28, 0x07	; 7
    65d4:	0f b6       	in	r0, 0x3f	; 63
    65d6:	f8 94       	cli
    65d8:	de bf       	out	0x3e, r29	; 62
    65da:	0f be       	out	0x3f, r0	; 63
    65dc:	cd bf       	out	0x3d, r28	; 61
    65de:	9b 83       	std	Y+3, r25	; 0x03
    65e0:	8a 83       	std	Y+2, r24	; 0x02
    65e2:	7d 83       	std	Y+5, r23	; 0x05
    65e4:	6c 83       	std	Y+4, r22	; 0x04
    65e6:	4e 83       	std	Y+6, r20	; 0x06
	u8 i;
	for(i=0;i<size;i++){
    65e8:	19 82       	std	Y+1, r1	; 0x01
    65ea:	19 c0       	rjmp	.+50     	; 0x661e <APP_u8compareArray+0x54>
		if(ptr1[i]!=ptr2[i])
    65ec:	89 81       	ldd	r24, Y+1	; 0x01
    65ee:	28 2f       	mov	r18, r24
    65f0:	30 e0       	ldi	r19, 0x00	; 0
    65f2:	8a 81       	ldd	r24, Y+2	; 0x02
    65f4:	9b 81       	ldd	r25, Y+3	; 0x03
    65f6:	fc 01       	movw	r30, r24
    65f8:	e2 0f       	add	r30, r18
    65fa:	f3 1f       	adc	r31, r19
    65fc:	40 81       	ld	r20, Z
    65fe:	89 81       	ldd	r24, Y+1	; 0x01
    6600:	28 2f       	mov	r18, r24
    6602:	30 e0       	ldi	r19, 0x00	; 0
    6604:	8c 81       	ldd	r24, Y+4	; 0x04
    6606:	9d 81       	ldd	r25, Y+5	; 0x05
    6608:	fc 01       	movw	r30, r24
    660a:	e2 0f       	add	r30, r18
    660c:	f3 1f       	adc	r31, r19
    660e:	80 81       	ld	r24, Z
    6610:	48 17       	cp	r20, r24
    6612:	11 f0       	breq	.+4      	; 0x6618 <APP_u8compareArray+0x4e>
			return 0;
    6614:	1f 82       	std	Y+7, r1	; 0x07
    6616:	09 c0       	rjmp	.+18     	; 0x662a <APP_u8compareArray+0x60>
	}
}
//----------------
u8 APP_u8compareArray(u8 *ptr1,u8 *ptr2,u8 size){
	u8 i;
	for(i=0;i<size;i++){
    6618:	89 81       	ldd	r24, Y+1	; 0x01
    661a:	8f 5f       	subi	r24, 0xFF	; 255
    661c:	89 83       	std	Y+1, r24	; 0x01
    661e:	99 81       	ldd	r25, Y+1	; 0x01
    6620:	8e 81       	ldd	r24, Y+6	; 0x06
    6622:	98 17       	cp	r25, r24
    6624:	18 f3       	brcs	.-58     	; 0x65ec <APP_u8compareArray+0x22>
		if(ptr1[i]!=ptr2[i])
			return 0;
	}
	return 1;
    6626:	81 e0       	ldi	r24, 0x01	; 1
    6628:	8f 83       	std	Y+7, r24	; 0x07
    662a:	8f 81       	ldd	r24, Y+7	; 0x07
}
    662c:	27 96       	adiw	r28, 0x07	; 7
    662e:	0f b6       	in	r0, 0x3f	; 63
    6630:	f8 94       	cli
    6632:	de bf       	out	0x3e, r29	; 62
    6634:	0f be       	out	0x3f, r0	; 63
    6636:	cd bf       	out	0x3d, r28	; 61
    6638:	cf 91       	pop	r28
    663a:	df 91       	pop	r29
    663c:	08 95       	ret

0000663e <APP_vVolumeLCD>:
//------------------------
void APP_vVolumeLCD(){
    663e:	df 93       	push	r29
    6640:	cf 93       	push	r28
    6642:	cd b7       	in	r28, 0x3d	; 61
    6644:	de b7       	in	r29, 0x3e	; 62
    6646:	a8 97       	sbiw	r28, 0x28	; 40
    6648:	0f b6       	in	r0, 0x3f	; 63
    664a:	f8 94       	cli
    664c:	de bf       	out	0x3e, r29	; 62
    664e:	0f be       	out	0x3f, r0	; 63
    6650:	cd bf       	out	0x3d, r28	; 61
	LCD_vInit();
    6652:	0e 94 af 1a 	call	0x355e	; 0x355e <LCD_vInit>
	u16 z;
	u8 counter=0,i,y;
    6656:	19 8a       	std	Y+17, r1	; 0x11
	u8 chrr[8]={0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,0x1F};
    6658:	ce 01       	movw	r24, r28
    665a:	44 96       	adiw	r24, 0x14	; 20
    665c:	9d a3       	std	Y+37, r25	; 0x25
    665e:	8c a3       	std	Y+36, r24	; 0x24
    6660:	ad eb       	ldi	r26, 0xBD	; 189
    6662:	b0 e0       	ldi	r27, 0x00	; 0
    6664:	bf a3       	std	Y+39, r27	; 0x27
    6666:	ae a3       	std	Y+38, r26	; 0x26
    6668:	b8 e0       	ldi	r27, 0x08	; 8
    666a:	b8 a7       	std	Y+40, r27	; 0x28
    666c:	ee a1       	ldd	r30, Y+38	; 0x26
    666e:	ff a1       	ldd	r31, Y+39	; 0x27
    6670:	00 80       	ld	r0, Z
    6672:	8e a1       	ldd	r24, Y+38	; 0x26
    6674:	9f a1       	ldd	r25, Y+39	; 0x27
    6676:	01 96       	adiw	r24, 0x01	; 1
    6678:	9f a3       	std	Y+39, r25	; 0x27
    667a:	8e a3       	std	Y+38, r24	; 0x26
    667c:	ac a1       	ldd	r26, Y+36	; 0x24
    667e:	bd a1       	ldd	r27, Y+37	; 0x25
    6680:	0c 92       	st	X, r0
    6682:	ec a1       	ldd	r30, Y+36	; 0x24
    6684:	fd a1       	ldd	r31, Y+37	; 0x25
    6686:	31 96       	adiw	r30, 0x01	; 1
    6688:	fd a3       	std	Y+37, r31	; 0x25
    668a:	ec a3       	std	Y+36, r30	; 0x24
    668c:	f8 a5       	ldd	r31, Y+40	; 0x28
    668e:	f1 50       	subi	r31, 0x01	; 1
    6690:	f8 a7       	std	Y+40, r31	; 0x28
    6692:	28 a5       	ldd	r18, Y+40	; 0x28
    6694:	22 23       	and	r18, r18
    6696:	51 f7       	brne	.-44     	; 0x666c <APP_vVolumeLCD+0x2e>
	u8 chr0[8]={0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
    6698:	88 e0       	ldi	r24, 0x08	; 8
    669a:	fe 01       	movw	r30, r28
    669c:	7c 96       	adiw	r30, 0x1c	; 28
    669e:	df 01       	movw	r26, r30
    66a0:	28 2f       	mov	r18, r24
    66a2:	1d 92       	st	X+, r1
    66a4:	2a 95       	dec	r18
    66a6:	e9 f7       	brne	.-6      	; 0x66a2 <APP_vVolumeLCD+0x64>
	LCD_vCustomCharacter(chrr,0);
    66a8:	ce 01       	movw	r24, r28
    66aa:	44 96       	adiw	r24, 0x14	; 20
    66ac:	60 e0       	ldi	r22, 0x00	; 0
    66ae:	0e 94 37 21 	call	0x426e	; 0x426e <LCD_vCustomCharacter>
	LCD_vCustomCharacter(chr0,1);
    66b2:	ce 01       	movw	r24, r28
    66b4:	4c 96       	adiw	r24, 0x1c	; 28
    66b6:	61 e0       	ldi	r22, 0x01	; 1
    66b8:	0e 94 37 21 	call	0x426e	; 0x426e <LCD_vCustomCharacter>
	ADC_vInit(Polling,ADC1,FreeRunningMode);
    66bc:	a7 e2       	ldi	r26, 0x27	; 39
    66be:	b0 e0       	ldi	r27, 0x00	; 0
    66c0:	e7 e2       	ldi	r30, 0x27	; 39
    66c2:	f0 e0       	ldi	r31, 0x00	; 0
    66c4:	80 81       	ld	r24, Z
    66c6:	81 60       	ori	r24, 0x01	; 1
    66c8:	8c 93       	st	X, r24
    66ca:	8c 91       	ld	r24, X
    66cc:	28 2f       	mov	r18, r24
    66ce:	30 e0       	ldi	r19, 0x00	; 0
    66d0:	80 e0       	ldi	r24, 0x00	; 0
    66d2:	90 e0       	ldi	r25, 0x00	; 0
    66d4:	b9 01       	movw	r22, r18
    66d6:	41 e0       	ldi	r20, 0x01	; 1
    66d8:	50 e0       	ldi	r21, 0x00	; 0
    66da:	0e 94 2f 13 	call	0x265e	; 0x265e <ADC_vInit>
	while(1){
		z=ADC_vGetVal(FreeRunningMode);
    66de:	81 e0       	ldi	r24, 0x01	; 1
    66e0:	90 e0       	ldi	r25, 0x00	; 0
    66e2:	0e 94 4e 13 	call	0x269c	; 0x269c <ADC_vGetVal>
    66e6:	9b 8b       	std	Y+19, r25	; 0x13
    66e8:	8a 8b       	std	Y+18, r24	; 0x12
    66ea:	09 c0       	rjmp	.+18     	; 0x66fe <APP_vVolumeLCD+0xc0>
		while(z>311){
			z=z-311;
    66ec:	8a 89       	ldd	r24, Y+18	; 0x12
    66ee:	9b 89       	ldd	r25, Y+19	; 0x13
    66f0:	87 53       	subi	r24, 0x37	; 55
    66f2:	91 40       	sbci	r25, 0x01	; 1
    66f4:	9b 8b       	std	Y+19, r25	; 0x13
    66f6:	8a 8b       	std	Y+18, r24	; 0x12
			counter++;
    66f8:	89 89       	ldd	r24, Y+17	; 0x11
    66fa:	8f 5f       	subi	r24, 0xFF	; 255
    66fc:	89 8b       	std	Y+17, r24	; 0x11
	LCD_vCustomCharacter(chrr,0);
	LCD_vCustomCharacter(chr0,1);
	ADC_vInit(Polling,ADC1,FreeRunningMode);
	while(1){
		z=ADC_vGetVal(FreeRunningMode);
		while(z>311){
    66fe:	8a 89       	ldd	r24, Y+18	; 0x12
    6700:	9b 89       	ldd	r25, Y+19	; 0x13
    6702:	a1 e0       	ldi	r26, 0x01	; 1
    6704:	88 33       	cpi	r24, 0x38	; 56
    6706:	9a 07       	cpc	r25, r26
    6708:	88 f7       	brcc	.-30     	; 0x66ec <APP_vVolumeLCD+0xae>
			z=z-311;
			counter++;
		}
		for(i=0;i<counter;i++){
    670a:	18 8a       	std	Y+16, r1	; 0x10
    670c:	06 c0       	rjmp	.+12     	; 0x671a <APP_vVolumeLCD+0xdc>
			LCD_vWriteCharacter(0);
    670e:	80 e0       	ldi	r24, 0x00	; 0
    6710:	0e 94 4b 1f 	call	0x3e96	; 0x3e96 <LCD_vWriteCharacter>
		z=ADC_vGetVal(FreeRunningMode);
		while(z>311){
			z=z-311;
			counter++;
		}
		for(i=0;i<counter;i++){
    6714:	88 89       	ldd	r24, Y+16	; 0x10
    6716:	8f 5f       	subi	r24, 0xFF	; 255
    6718:	88 8b       	std	Y+16, r24	; 0x10
    671a:	98 89       	ldd	r25, Y+16	; 0x10
    671c:	89 89       	ldd	r24, Y+17	; 0x11
    671e:	98 17       	cp	r25, r24
    6720:	b0 f3       	brcs	.-20     	; 0x670e <APP_vVolumeLCD+0xd0>
			LCD_vWriteCharacter(0);
		}
		for(i=y;i>counter;i--){
    6722:	8f 85       	ldd	r24, Y+15	; 0x0f
    6724:	88 8b       	std	Y+16, r24	; 0x10
    6726:	0a c0       	rjmp	.+20     	; 0x673c <APP_vVolumeLCD+0xfe>
			LCD_vGoTo(LineOne,i);
    6728:	80 e8       	ldi	r24, 0x80	; 128
    672a:	68 89       	ldd	r22, Y+16	; 0x10
    672c:	0e 94 75 20 	call	0x40ea	; 0x40ea <LCD_vGoTo>
			LCD_vWriteCharacter(1);
    6730:	81 e0       	ldi	r24, 0x01	; 1
    6732:	0e 94 4b 1f 	call	0x3e96	; 0x3e96 <LCD_vWriteCharacter>
			counter++;
		}
		for(i=0;i<counter;i++){
			LCD_vWriteCharacter(0);
		}
		for(i=y;i>counter;i--){
    6736:	88 89       	ldd	r24, Y+16	; 0x10
    6738:	81 50       	subi	r24, 0x01	; 1
    673a:	88 8b       	std	Y+16, r24	; 0x10
    673c:	98 89       	ldd	r25, Y+16	; 0x10
    673e:	89 89       	ldd	r24, Y+17	; 0x11
    6740:	89 17       	cp	r24, r25
    6742:	90 f3       	brcs	.-28     	; 0x6728 <APP_vVolumeLCD+0xea>
			LCD_vGoTo(LineOne,i);
			LCD_vWriteCharacter(1);
		}
		y=counter;
    6744:	89 89       	ldd	r24, Y+17	; 0x11
    6746:	8f 87       	std	Y+15, r24	; 0x0f
		if(counter==16){
    6748:	89 89       	ldd	r24, Y+17	; 0x11
    674a:	80 31       	cpi	r24, 0x10	; 16
    674c:	09 f0       	breq	.+2      	; 0x6750 <APP_vVolumeLCD+0x112>
    674e:	76 c0       	rjmp	.+236    	; 0x683c <APP_vVolumeLCD+0x1fe>
			LedAndBuzzer_vBuzzerOpen();
    6750:	0e 94 b5 14 	call	0x296a	; 0x296a <LedAndBuzzer_vBuzzerOpen>
    6754:	80 e0       	ldi	r24, 0x00	; 0
    6756:	90 e0       	ldi	r25, 0x00	; 0
    6758:	aa e7       	ldi	r26, 0x7A	; 122
    675a:	b3 e4       	ldi	r27, 0x43	; 67
    675c:	8b 87       	std	Y+11, r24	; 0x0b
    675e:	9c 87       	std	Y+12, r25	; 0x0c
    6760:	ad 87       	std	Y+13, r26	; 0x0d
    6762:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6764:	6b 85       	ldd	r22, Y+11	; 0x0b
    6766:	7c 85       	ldd	r23, Y+12	; 0x0c
    6768:	8d 85       	ldd	r24, Y+13	; 0x0d
    676a:	9e 85       	ldd	r25, Y+14	; 0x0e
    676c:	20 e0       	ldi	r18, 0x00	; 0
    676e:	30 e0       	ldi	r19, 0x00	; 0
    6770:	4a e7       	ldi	r20, 0x7A	; 122
    6772:	55 e4       	ldi	r21, 0x45	; 69
    6774:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6778:	dc 01       	movw	r26, r24
    677a:	cb 01       	movw	r24, r22
    677c:	8f 83       	std	Y+7, r24	; 0x07
    677e:	98 87       	std	Y+8, r25	; 0x08
    6780:	a9 87       	std	Y+9, r26	; 0x09
    6782:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6784:	6f 81       	ldd	r22, Y+7	; 0x07
    6786:	78 85       	ldd	r23, Y+8	; 0x08
    6788:	89 85       	ldd	r24, Y+9	; 0x09
    678a:	9a 85       	ldd	r25, Y+10	; 0x0a
    678c:	20 e0       	ldi	r18, 0x00	; 0
    678e:	30 e0       	ldi	r19, 0x00	; 0
    6790:	40 e8       	ldi	r20, 0x80	; 128
    6792:	5f e3       	ldi	r21, 0x3F	; 63
    6794:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    6798:	88 23       	and	r24, r24
    679a:	2c f4       	brge	.+10     	; 0x67a6 <APP_vVolumeLCD+0x168>
		__ticks = 1;
    679c:	81 e0       	ldi	r24, 0x01	; 1
    679e:	90 e0       	ldi	r25, 0x00	; 0
    67a0:	9e 83       	std	Y+6, r25	; 0x06
    67a2:	8d 83       	std	Y+5, r24	; 0x05
    67a4:	3f c0       	rjmp	.+126    	; 0x6824 <APP_vVolumeLCD+0x1e6>
	else if (__tmp > 65535)
    67a6:	6f 81       	ldd	r22, Y+7	; 0x07
    67a8:	78 85       	ldd	r23, Y+8	; 0x08
    67aa:	89 85       	ldd	r24, Y+9	; 0x09
    67ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    67ae:	20 e0       	ldi	r18, 0x00	; 0
    67b0:	3f ef       	ldi	r19, 0xFF	; 255
    67b2:	4f e7       	ldi	r20, 0x7F	; 127
    67b4:	57 e4       	ldi	r21, 0x47	; 71
    67b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    67ba:	18 16       	cp	r1, r24
    67bc:	4c f5       	brge	.+82     	; 0x6810 <APP_vVolumeLCD+0x1d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    67be:	6b 85       	ldd	r22, Y+11	; 0x0b
    67c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    67c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    67c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    67c6:	20 e0       	ldi	r18, 0x00	; 0
    67c8:	30 e0       	ldi	r19, 0x00	; 0
    67ca:	40 e2       	ldi	r20, 0x20	; 32
    67cc:	51 e4       	ldi	r21, 0x41	; 65
    67ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    67d2:	dc 01       	movw	r26, r24
    67d4:	cb 01       	movw	r24, r22
    67d6:	bc 01       	movw	r22, r24
    67d8:	cd 01       	movw	r24, r26
    67da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    67de:	dc 01       	movw	r26, r24
    67e0:	cb 01       	movw	r24, r22
    67e2:	9e 83       	std	Y+6, r25	; 0x06
    67e4:	8d 83       	std	Y+5, r24	; 0x05
    67e6:	0f c0       	rjmp	.+30     	; 0x6806 <APP_vVolumeLCD+0x1c8>
    67e8:	80 e9       	ldi	r24, 0x90	; 144
    67ea:	91 e0       	ldi	r25, 0x01	; 1
    67ec:	9c 83       	std	Y+4, r25	; 0x04
    67ee:	8b 83       	std	Y+3, r24	; 0x03
    67f0:	8b 81       	ldd	r24, Y+3	; 0x03
    67f2:	9c 81       	ldd	r25, Y+4	; 0x04
    67f4:	01 97       	sbiw	r24, 0x01	; 1
    67f6:	f1 f7       	brne	.-4      	; 0x67f4 <APP_vVolumeLCD+0x1b6>
    67f8:	9c 83       	std	Y+4, r25	; 0x04
    67fa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    67fc:	8d 81       	ldd	r24, Y+5	; 0x05
    67fe:	9e 81       	ldd	r25, Y+6	; 0x06
    6800:	01 97       	sbiw	r24, 0x01	; 1
    6802:	9e 83       	std	Y+6, r25	; 0x06
    6804:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6806:	8d 81       	ldd	r24, Y+5	; 0x05
    6808:	9e 81       	ldd	r25, Y+6	; 0x06
    680a:	00 97       	sbiw	r24, 0x00	; 0
    680c:	69 f7       	brne	.-38     	; 0x67e8 <APP_vVolumeLCD+0x1aa>
    680e:	14 c0       	rjmp	.+40     	; 0x6838 <APP_vVolumeLCD+0x1fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6810:	6f 81       	ldd	r22, Y+7	; 0x07
    6812:	78 85       	ldd	r23, Y+8	; 0x08
    6814:	89 85       	ldd	r24, Y+9	; 0x09
    6816:	9a 85       	ldd	r25, Y+10	; 0x0a
    6818:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    681c:	dc 01       	movw	r26, r24
    681e:	cb 01       	movw	r24, r22
    6820:	9e 83       	std	Y+6, r25	; 0x06
    6822:	8d 83       	std	Y+5, r24	; 0x05
    6824:	8d 81       	ldd	r24, Y+5	; 0x05
    6826:	9e 81       	ldd	r25, Y+6	; 0x06
    6828:	9a 83       	std	Y+2, r25	; 0x02
    682a:	89 83       	std	Y+1, r24	; 0x01
    682c:	89 81       	ldd	r24, Y+1	; 0x01
    682e:	9a 81       	ldd	r25, Y+2	; 0x02
    6830:	01 97       	sbiw	r24, 0x01	; 1
    6832:	f1 f7       	brne	.-4      	; 0x6830 <APP_vVolumeLCD+0x1f2>
    6834:	9a 83       	std	Y+2, r25	; 0x02
    6836:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(250);
			LedAndBuzzer_vBuzzerClose();
    6838:	0e 94 c6 14 	call	0x298c	; 0x298c <LedAndBuzzer_vBuzzerClose>
		}
		LCD_vGoTo(LineOne,0);
    683c:	80 e8       	ldi	r24, 0x80	; 128
    683e:	60 e0       	ldi	r22, 0x00	; 0
    6840:	0e 94 75 20 	call	0x40ea	; 0x40ea <LCD_vGoTo>
		counter=0;
    6844:	19 8a       	std	Y+17, r1	; 0x11
    6846:	4b cf       	rjmp	.-362    	; 0x66de <APP_vVolumeLCD+0xa0>

00006848 <APP_vVolumeVerticalLCD>:
	}
}
//-
void APP_vVolumeVerticalLCD(){
    6848:	df 93       	push	r29
    684a:	cf 93       	push	r28
    684c:	cd b7       	in	r28, 0x3d	; 61
    684e:	de b7       	in	r29, 0x3e	; 62
    6850:	c4 55       	subi	r28, 0x54	; 84
    6852:	d0 40       	sbci	r29, 0x00	; 0
    6854:	0f b6       	in	r0, 0x3f	; 63
    6856:	f8 94       	cli
    6858:	de bf       	out	0x3e, r29	; 62
    685a:	0f be       	out	0x3f, r0	; 63
    685c:	cd bf       	out	0x3d, r28	; 61
	LCD_vInit();
    685e:	0e 94 af 1a 	call	0x355e	; 0x355e <LCD_vInit>
	ADC_vInit();
    6862:	0e 94 2f 13 	call	0x265e	; 0x265e <ADC_vInit>
	s16 z;
	s8 counter=0,i,j,y=0;
    6866:	1a 8a       	std	Y+18, r1	; 0x12
    6868:	1f 86       	std	Y+15, r1	; 0x0f
	u8 arr1[8][8];
	for(i=0;i<8;i++){
    686a:	19 8a       	std	Y+17, r1	; 0x11
    686c:	5d c0       	rjmp	.+186    	; 0x6928 <APP_vVolumeVerticalLCD+0xe0>
		for(j=i;j<8;j++){
    686e:	89 89       	ldd	r24, Y+17	; 0x11
    6870:	88 8b       	std	Y+16, r24	; 0x10
    6872:	1e c0       	rjmp	.+60     	; 0x68b0 <APP_vVolumeVerticalLCD+0x68>
			arr1[i][7-j]=0x00;
    6874:	89 89       	ldd	r24, Y+17	; 0x11
    6876:	68 2f       	mov	r22, r24
    6878:	70 e0       	ldi	r23, 0x00	; 0
    687a:	88 89       	ldd	r24, Y+16	; 0x10
    687c:	28 2f       	mov	r18, r24
    687e:	30 e0       	ldi	r19, 0x00	; 0
    6880:	87 e0       	ldi	r24, 0x07	; 7
    6882:	90 e0       	ldi	r25, 0x00	; 0
    6884:	ac 01       	movw	r20, r24
    6886:	42 1b       	sub	r20, r18
    6888:	53 0b       	sbc	r21, r19
    688a:	9b 01       	movw	r18, r22
    688c:	22 0f       	add	r18, r18
    688e:	33 1f       	adc	r19, r19
    6890:	22 0f       	add	r18, r18
    6892:	33 1f       	adc	r19, r19
    6894:	22 0f       	add	r18, r18
    6896:	33 1f       	adc	r19, r19
    6898:	ce 01       	movw	r24, r28
    689a:	01 96       	adiw	r24, 0x01	; 1
    689c:	82 0f       	add	r24, r18
    689e:	93 1f       	adc	r25, r19
    68a0:	84 0f       	add	r24, r20
    68a2:	95 1f       	adc	r25, r21
    68a4:	fc 01       	movw	r30, r24
    68a6:	74 96       	adiw	r30, 0x14	; 20
    68a8:	10 82       	st	Z, r1
	ADC_vInit();
	s16 z;
	s8 counter=0,i,j,y=0;
	u8 arr1[8][8];
	for(i=0;i<8;i++){
		for(j=i;j<8;j++){
    68aa:	88 89       	ldd	r24, Y+16	; 0x10
    68ac:	8f 5f       	subi	r24, 0xFF	; 255
    68ae:	88 8b       	std	Y+16, r24	; 0x10
    68b0:	88 89       	ldd	r24, Y+16	; 0x10
    68b2:	88 30       	cpi	r24, 0x08	; 8
    68b4:	f8 f2       	brcs	.-66     	; 0x6874 <APP_vVolumeVerticalLCD+0x2c>
			arr1[i][7-j]=0x00;
		}
		for(j=0;j<=i;j++){
    68b6:	18 8a       	std	Y+16, r1	; 0x10
    68b8:	1f c0       	rjmp	.+62     	; 0x68f8 <APP_vVolumeVerticalLCD+0xb0>
			arr1[i][7-j]=0x1F;
    68ba:	89 89       	ldd	r24, Y+17	; 0x11
    68bc:	68 2f       	mov	r22, r24
    68be:	70 e0       	ldi	r23, 0x00	; 0
    68c0:	88 89       	ldd	r24, Y+16	; 0x10
    68c2:	28 2f       	mov	r18, r24
    68c4:	30 e0       	ldi	r19, 0x00	; 0
    68c6:	87 e0       	ldi	r24, 0x07	; 7
    68c8:	90 e0       	ldi	r25, 0x00	; 0
    68ca:	ac 01       	movw	r20, r24
    68cc:	42 1b       	sub	r20, r18
    68ce:	53 0b       	sbc	r21, r19
    68d0:	9b 01       	movw	r18, r22
    68d2:	22 0f       	add	r18, r18
    68d4:	33 1f       	adc	r19, r19
    68d6:	22 0f       	add	r18, r18
    68d8:	33 1f       	adc	r19, r19
    68da:	22 0f       	add	r18, r18
    68dc:	33 1f       	adc	r19, r19
    68de:	ce 01       	movw	r24, r28
    68e0:	01 96       	adiw	r24, 0x01	; 1
    68e2:	82 0f       	add	r24, r18
    68e4:	93 1f       	adc	r25, r19
    68e6:	84 0f       	add	r24, r20
    68e8:	95 1f       	adc	r25, r21
    68ea:	fc 01       	movw	r30, r24
    68ec:	74 96       	adiw	r30, 0x14	; 20
    68ee:	8f e1       	ldi	r24, 0x1F	; 31
    68f0:	80 83       	st	Z, r24
	u8 arr1[8][8];
	for(i=0;i<8;i++){
		for(j=i;j<8;j++){
			arr1[i][7-j]=0x00;
		}
		for(j=0;j<=i;j++){
    68f2:	88 89       	ldd	r24, Y+16	; 0x10
    68f4:	8f 5f       	subi	r24, 0xFF	; 255
    68f6:	88 8b       	std	Y+16, r24	; 0x10
    68f8:	98 89       	ldd	r25, Y+16	; 0x10
    68fa:	89 89       	ldd	r24, Y+17	; 0x11
    68fc:	89 17       	cp	r24, r25
    68fe:	e8 f6       	brcc	.-70     	; 0x68ba <APP_vVolumeVerticalLCD+0x72>
			arr1[i][7-j]=0x1F;
		}
		LCD_vCustomCharacter(arr1[i],i);
    6900:	9e 01       	movw	r18, r28
    6902:	2b 5e       	subi	r18, 0xEB	; 235
    6904:	3f 4f       	sbci	r19, 0xFF	; 255
    6906:	89 89       	ldd	r24, Y+17	; 0x11
    6908:	88 2f       	mov	r24, r24
    690a:	90 e0       	ldi	r25, 0x00	; 0
    690c:	88 0f       	add	r24, r24
    690e:	99 1f       	adc	r25, r25
    6910:	88 0f       	add	r24, r24
    6912:	99 1f       	adc	r25, r25
    6914:	88 0f       	add	r24, r24
    6916:	99 1f       	adc	r25, r25
    6918:	82 0f       	add	r24, r18
    691a:	93 1f       	adc	r25, r19
    691c:	69 89       	ldd	r22, Y+17	; 0x11
    691e:	0e 94 37 21 	call	0x426e	; 0x426e <LCD_vCustomCharacter>
	LCD_vInit();
	ADC_vInit();
	s16 z;
	s8 counter=0,i,j,y=0;
	u8 arr1[8][8];
	for(i=0;i<8;i++){
    6922:	89 89       	ldd	r24, Y+17	; 0x11
    6924:	8f 5f       	subi	r24, 0xFF	; 255
    6926:	89 8b       	std	Y+17, r24	; 0x11
    6928:	89 89       	ldd	r24, Y+17	; 0x11
    692a:	88 30       	cpi	r24, 0x08	; 8
    692c:	08 f4       	brcc	.+2      	; 0x6930 <APP_vVolumeVerticalLCD+0xe8>
    692e:	9f cf       	rjmp	.-194    	; 0x686e <APP_vVolumeVerticalLCD+0x26>
			arr1[i][7-j]=0x1F;
		}
		LCD_vCustomCharacter(arr1[i],i);
	}
	while(1){
		z=ADC_vGetVal();
    6930:	0e 94 4e 13 	call	0x269c	; 0x269c <ADC_vGetVal>
    6934:	9c 8b       	std	Y+20, r25	; 0x14
    6936:	8b 8b       	std	Y+19, r24	; 0x13
    6938:	09 c0       	rjmp	.+18     	; 0x694c <APP_vVolumeVerticalLCD+0x104>
		while(z>611){
			z=z-611;
    693a:	8b 89       	ldd	r24, Y+19	; 0x13
    693c:	9c 89       	ldd	r25, Y+20	; 0x14
    693e:	83 56       	subi	r24, 0x63	; 99
    6940:	92 40       	sbci	r25, 0x02	; 2
    6942:	9c 8b       	std	Y+20, r25	; 0x14
    6944:	8b 8b       	std	Y+19, r24	; 0x13
			counter++;
    6946:	8a 89       	ldd	r24, Y+18	; 0x12
    6948:	8f 5f       	subi	r24, 0xFF	; 255
    694a:	8a 8b       	std	Y+18, r24	; 0x12
		}
		LCD_vCustomCharacter(arr1[i],i);
	}
	while(1){
		z=ADC_vGetVal();
		while(z>611){
    694c:	8b 89       	ldd	r24, Y+19	; 0x13
    694e:	9c 89       	ldd	r25, Y+20	; 0x14
    6950:	22 e0       	ldi	r18, 0x02	; 2
    6952:	84 36       	cpi	r24, 0x64	; 100
    6954:	92 07       	cpc	r25, r18
    6956:	8c f7       	brge	.-30     	; 0x693a <APP_vVolumeVerticalLCD+0xf2>
			z=z-611;
			counter++;
		}
		for(i=y;i<counter;i++){
    6958:	8f 85       	ldd	r24, Y+15	; 0x0f
    695a:	89 8b       	std	Y+17, r24	; 0x11
    695c:	0a c0       	rjmp	.+20     	; 0x6972 <APP_vVolumeVerticalLCD+0x12a>
			LCD_vGoTo(LineOne,i);
    695e:	80 e8       	ldi	r24, 0x80	; 128
    6960:	69 89       	ldd	r22, Y+17	; 0x11
    6962:	0e 94 75 20 	call	0x40ea	; 0x40ea <LCD_vGoTo>
			LCD_vWriteCharacter(i);
    6966:	89 89       	ldd	r24, Y+17	; 0x11
    6968:	0e 94 4b 1f 	call	0x3e96	; 0x3e96 <LCD_vWriteCharacter>
		z=ADC_vGetVal();
		while(z>611){
			z=z-611;
			counter++;
		}
		for(i=y;i<counter;i++){
    696c:	89 89       	ldd	r24, Y+17	; 0x11
    696e:	8f 5f       	subi	r24, 0xFF	; 255
    6970:	89 8b       	std	Y+17, r24	; 0x11
    6972:	99 89       	ldd	r25, Y+17	; 0x11
    6974:	8a 89       	ldd	r24, Y+18	; 0x12
    6976:	98 17       	cp	r25, r24
    6978:	90 f3       	brcs	.-28     	; 0x695e <APP_vVolumeVerticalLCD+0x116>
			LCD_vGoTo(LineOne,i);
			LCD_vWriteCharacter(i);
		}
		for(i=y;i>counter;i--){
    697a:	8f 85       	ldd	r24, Y+15	; 0x0f
    697c:	89 8b       	std	Y+17, r24	; 0x11
    697e:	0a c0       	rjmp	.+20     	; 0x6994 <APP_vVolumeVerticalLCD+0x14c>
			LCD_vGoTo(LineOne,i);
    6980:	80 e8       	ldi	r24, 0x80	; 128
    6982:	69 89       	ldd	r22, Y+17	; 0x11
    6984:	0e 94 75 20 	call	0x40ea	; 0x40ea <LCD_vGoTo>
			LCD_vWriteCharacter(0);
    6988:	80 e0       	ldi	r24, 0x00	; 0
    698a:	0e 94 4b 1f 	call	0x3e96	; 0x3e96 <LCD_vWriteCharacter>
		}
		for(i=y;i<counter;i++){
			LCD_vGoTo(LineOne,i);
			LCD_vWriteCharacter(i);
		}
		for(i=y;i>counter;i--){
    698e:	89 89       	ldd	r24, Y+17	; 0x11
    6990:	81 50       	subi	r24, 0x01	; 1
    6992:	89 8b       	std	Y+17, r24	; 0x11
    6994:	99 89       	ldd	r25, Y+17	; 0x11
    6996:	8a 89       	ldd	r24, Y+18	; 0x12
    6998:	89 17       	cp	r24, r25
    699a:	90 f3       	brcs	.-28     	; 0x6980 <APP_vVolumeVerticalLCD+0x138>
			LCD_vGoTo(LineOne,i);
			LCD_vWriteCharacter(0);
		}
		y=counter;
    699c:	8a 89       	ldd	r24, Y+18	; 0x12
    699e:	8f 87       	std	Y+15, r24	; 0x0f
		if(counter==8){
    69a0:	8a 89       	ldd	r24, Y+18	; 0x12
    69a2:	88 30       	cpi	r24, 0x08	; 8
    69a4:	09 f0       	breq	.+2      	; 0x69a8 <APP_vVolumeVerticalLCD+0x160>
    69a6:	76 c0       	rjmp	.+236    	; 0x6a94 <APP_vVolumeVerticalLCD+0x24c>
			LedAndBuzzer_vBuzzerOpen();
    69a8:	0e 94 b5 14 	call	0x296a	; 0x296a <LedAndBuzzer_vBuzzerOpen>
    69ac:	80 e0       	ldi	r24, 0x00	; 0
    69ae:	90 e0       	ldi	r25, 0x00	; 0
    69b0:	aa e7       	ldi	r26, 0x7A	; 122
    69b2:	b3 e4       	ldi	r27, 0x43	; 67
    69b4:	8b 87       	std	Y+11, r24	; 0x0b
    69b6:	9c 87       	std	Y+12, r25	; 0x0c
    69b8:	ad 87       	std	Y+13, r26	; 0x0d
    69ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    69bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    69be:	7c 85       	ldd	r23, Y+12	; 0x0c
    69c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    69c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    69c4:	20 e0       	ldi	r18, 0x00	; 0
    69c6:	30 e0       	ldi	r19, 0x00	; 0
    69c8:	4a e7       	ldi	r20, 0x7A	; 122
    69ca:	55 e4       	ldi	r21, 0x45	; 69
    69cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    69d0:	dc 01       	movw	r26, r24
    69d2:	cb 01       	movw	r24, r22
    69d4:	8f 83       	std	Y+7, r24	; 0x07
    69d6:	98 87       	std	Y+8, r25	; 0x08
    69d8:	a9 87       	std	Y+9, r26	; 0x09
    69da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    69dc:	6f 81       	ldd	r22, Y+7	; 0x07
    69de:	78 85       	ldd	r23, Y+8	; 0x08
    69e0:	89 85       	ldd	r24, Y+9	; 0x09
    69e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    69e4:	20 e0       	ldi	r18, 0x00	; 0
    69e6:	30 e0       	ldi	r19, 0x00	; 0
    69e8:	40 e8       	ldi	r20, 0x80	; 128
    69ea:	5f e3       	ldi	r21, 0x3F	; 63
    69ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    69f0:	88 23       	and	r24, r24
    69f2:	2c f4       	brge	.+10     	; 0x69fe <APP_vVolumeVerticalLCD+0x1b6>
		__ticks = 1;
    69f4:	81 e0       	ldi	r24, 0x01	; 1
    69f6:	90 e0       	ldi	r25, 0x00	; 0
    69f8:	9e 83       	std	Y+6, r25	; 0x06
    69fa:	8d 83       	std	Y+5, r24	; 0x05
    69fc:	3f c0       	rjmp	.+126    	; 0x6a7c <APP_vVolumeVerticalLCD+0x234>
	else if (__tmp > 65535)
    69fe:	6f 81       	ldd	r22, Y+7	; 0x07
    6a00:	78 85       	ldd	r23, Y+8	; 0x08
    6a02:	89 85       	ldd	r24, Y+9	; 0x09
    6a04:	9a 85       	ldd	r25, Y+10	; 0x0a
    6a06:	20 e0       	ldi	r18, 0x00	; 0
    6a08:	3f ef       	ldi	r19, 0xFF	; 255
    6a0a:	4f e7       	ldi	r20, 0x7F	; 127
    6a0c:	57 e4       	ldi	r21, 0x47	; 71
    6a0e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    6a12:	18 16       	cp	r1, r24
    6a14:	4c f5       	brge	.+82     	; 0x6a68 <APP_vVolumeVerticalLCD+0x220>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6a16:	6b 85       	ldd	r22, Y+11	; 0x0b
    6a18:	7c 85       	ldd	r23, Y+12	; 0x0c
    6a1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    6a1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    6a1e:	20 e0       	ldi	r18, 0x00	; 0
    6a20:	30 e0       	ldi	r19, 0x00	; 0
    6a22:	40 e2       	ldi	r20, 0x20	; 32
    6a24:	51 e4       	ldi	r21, 0x41	; 65
    6a26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6a2a:	dc 01       	movw	r26, r24
    6a2c:	cb 01       	movw	r24, r22
    6a2e:	bc 01       	movw	r22, r24
    6a30:	cd 01       	movw	r24, r26
    6a32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6a36:	dc 01       	movw	r26, r24
    6a38:	cb 01       	movw	r24, r22
    6a3a:	9e 83       	std	Y+6, r25	; 0x06
    6a3c:	8d 83       	std	Y+5, r24	; 0x05
    6a3e:	0f c0       	rjmp	.+30     	; 0x6a5e <APP_vVolumeVerticalLCD+0x216>
    6a40:	80 e9       	ldi	r24, 0x90	; 144
    6a42:	91 e0       	ldi	r25, 0x01	; 1
    6a44:	9c 83       	std	Y+4, r25	; 0x04
    6a46:	8b 83       	std	Y+3, r24	; 0x03
    6a48:	8b 81       	ldd	r24, Y+3	; 0x03
    6a4a:	9c 81       	ldd	r25, Y+4	; 0x04
    6a4c:	01 97       	sbiw	r24, 0x01	; 1
    6a4e:	f1 f7       	brne	.-4      	; 0x6a4c <APP_vVolumeVerticalLCD+0x204>
    6a50:	9c 83       	std	Y+4, r25	; 0x04
    6a52:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6a54:	8d 81       	ldd	r24, Y+5	; 0x05
    6a56:	9e 81       	ldd	r25, Y+6	; 0x06
    6a58:	01 97       	sbiw	r24, 0x01	; 1
    6a5a:	9e 83       	std	Y+6, r25	; 0x06
    6a5c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6a5e:	8d 81       	ldd	r24, Y+5	; 0x05
    6a60:	9e 81       	ldd	r25, Y+6	; 0x06
    6a62:	00 97       	sbiw	r24, 0x00	; 0
    6a64:	69 f7       	brne	.-38     	; 0x6a40 <APP_vVolumeVerticalLCD+0x1f8>
    6a66:	14 c0       	rjmp	.+40     	; 0x6a90 <APP_vVolumeVerticalLCD+0x248>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6a68:	6f 81       	ldd	r22, Y+7	; 0x07
    6a6a:	78 85       	ldd	r23, Y+8	; 0x08
    6a6c:	89 85       	ldd	r24, Y+9	; 0x09
    6a6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6a70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6a74:	dc 01       	movw	r26, r24
    6a76:	cb 01       	movw	r24, r22
    6a78:	9e 83       	std	Y+6, r25	; 0x06
    6a7a:	8d 83       	std	Y+5, r24	; 0x05
    6a7c:	8d 81       	ldd	r24, Y+5	; 0x05
    6a7e:	9e 81       	ldd	r25, Y+6	; 0x06
    6a80:	9a 83       	std	Y+2, r25	; 0x02
    6a82:	89 83       	std	Y+1, r24	; 0x01
    6a84:	89 81       	ldd	r24, Y+1	; 0x01
    6a86:	9a 81       	ldd	r25, Y+2	; 0x02
    6a88:	01 97       	sbiw	r24, 0x01	; 1
    6a8a:	f1 f7       	brne	.-4      	; 0x6a88 <APP_vVolumeVerticalLCD+0x240>
    6a8c:	9a 83       	std	Y+2, r25	; 0x02
    6a8e:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(250);
			LedAndBuzzer_vBuzzerClose();
    6a90:	0e 94 c6 14 	call	0x298c	; 0x298c <LedAndBuzzer_vBuzzerClose>
		}

		counter=0;
    6a94:	1a 8a       	std	Y+18, r1	; 0x12
    6a96:	4c cf       	rjmp	.-360    	; 0x6930 <APP_vVolumeVerticalLCD+0xe8>

00006a98 <main>:
u32 counter=0;
void Task1(void);
void Task2(void);
void Task3(void);

int main(void){
    6a98:	df 93       	push	r29
    6a9a:	cf 93       	push	r28
    6a9c:	cd b7       	in	r28, 0x3d	; 61
    6a9e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(DDRD,3);
    6aa0:	a1 e3       	ldi	r26, 0x31	; 49
    6aa2:	b0 e0       	ldi	r27, 0x00	; 0
    6aa4:	e1 e3       	ldi	r30, 0x31	; 49
    6aa6:	f0 e0       	ldi	r31, 0x00	; 0
    6aa8:	80 81       	ld	r24, Z
    6aaa:	88 60       	ori	r24, 0x08	; 8
    6aac:	8c 93       	st	X, r24
	SET_BIT(DDRC,2);
    6aae:	a4 e3       	ldi	r26, 0x34	; 52
    6ab0:	b0 e0       	ldi	r27, 0x00	; 0
    6ab2:	e4 e3       	ldi	r30, 0x34	; 52
    6ab4:	f0 e0       	ldi	r31, 0x00	; 0
    6ab6:	80 81       	ld	r24, Z
    6ab8:	84 60       	ori	r24, 0x04	; 4
    6aba:	8c 93       	st	X, r24
	SET_BIT(DDRC,7);
    6abc:	a4 e3       	ldi	r26, 0x34	; 52
    6abe:	b0 e0       	ldi	r27, 0x00	; 0
    6ac0:	e4 e3       	ldi	r30, 0x34	; 52
    6ac2:	f0 e0       	ldi	r31, 0x00	; 0
    6ac4:	80 81       	ld	r24, Z
    6ac6:	80 68       	ori	r24, 0x80	; 128
    6ac8:	8c 93       	st	X, r24
	//SET_BIT(PORTC,7);

	OS_AddTask(0,2,Task1);
    6aca:	25 e8       	ldi	r18, 0x85	; 133
    6acc:	35 e3       	ldi	r19, 0x35	; 53
    6ace:	80 e0       	ldi	r24, 0x00	; 0
    6ad0:	42 e0       	ldi	r20, 0x02	; 2
    6ad2:	50 e0       	ldi	r21, 0x00	; 0
    6ad4:	60 e0       	ldi	r22, 0x00	; 0
    6ad6:	70 e0       	ldi	r23, 0x00	; 0
    6ad8:	0e 94 b0 05 	call	0xb60	; 0xb60 <OS_AddTask>
	OS_AddTask(1,3,Task2);
    6adc:	24 e9       	ldi	r18, 0x94	; 148
    6ade:	35 e3       	ldi	r19, 0x35	; 53
    6ae0:	81 e0       	ldi	r24, 0x01	; 1
    6ae2:	43 e0       	ldi	r20, 0x03	; 3
    6ae4:	50 e0       	ldi	r21, 0x00	; 0
    6ae6:	60 e0       	ldi	r22, 0x00	; 0
    6ae8:	70 e0       	ldi	r23, 0x00	; 0
    6aea:	0e 94 b0 05 	call	0xb60	; 0xb60 <OS_AddTask>
	OS_AddTask(2,4,Task3);
    6aee:	23 ea       	ldi	r18, 0xA3	; 163
    6af0:	35 e3       	ldi	r19, 0x35	; 53
    6af2:	82 e0       	ldi	r24, 0x02	; 2
    6af4:	44 e0       	ldi	r20, 0x04	; 4
    6af6:	50 e0       	ldi	r21, 0x00	; 0
    6af8:	60 e0       	ldi	r22, 0x00	; 0
    6afa:	70 e0       	ldi	r23, 0x00	; 0
    6afc:	0e 94 b0 05 	call	0xb60	; 0xb60 <OS_AddTask>
	OS_StartScheduler();
    6b00:	0e 94 53 06 	call	0xca6	; 0xca6 <OS_StartScheduler>
	OS_vInit();
    6b04:	0e 94 a3 05 	call	0xb46	; 0xb46 <OS_vInit>
    6b08:	ff cf       	rjmp	.-2      	; 0x6b08 <main+0x70>

00006b0a <Task1>:
		SET_BIT(PORTD,7);
		counter=0;
	}
}
 */
void Task1(){
    6b0a:	df 93       	push	r29
    6b0c:	cf 93       	push	r28
    6b0e:	cd b7       	in	r28, 0x3d	; 61
    6b10:	de b7       	in	r29, 0x3e	; 62
	TOG_BIT(PORTD,3);
    6b12:	a2 e3       	ldi	r26, 0x32	; 50
    6b14:	b0 e0       	ldi	r27, 0x00	; 0
    6b16:	e2 e3       	ldi	r30, 0x32	; 50
    6b18:	f0 e0       	ldi	r31, 0x00	; 0
    6b1a:	90 81       	ld	r25, Z
    6b1c:	88 e0       	ldi	r24, 0x08	; 8
    6b1e:	89 27       	eor	r24, r25
    6b20:	8c 93       	st	X, r24
}
    6b22:	cf 91       	pop	r28
    6b24:	df 91       	pop	r29
    6b26:	08 95       	ret

00006b28 <Task2>:
void Task2(){
    6b28:	df 93       	push	r29
    6b2a:	cf 93       	push	r28
    6b2c:	cd b7       	in	r28, 0x3d	; 61
    6b2e:	de b7       	in	r29, 0x3e	; 62
	TOG_BIT(PORTC,2);
    6b30:	a5 e3       	ldi	r26, 0x35	; 53
    6b32:	b0 e0       	ldi	r27, 0x00	; 0
    6b34:	e5 e3       	ldi	r30, 0x35	; 53
    6b36:	f0 e0       	ldi	r31, 0x00	; 0
    6b38:	90 81       	ld	r25, Z
    6b3a:	84 e0       	ldi	r24, 0x04	; 4
    6b3c:	89 27       	eor	r24, r25
    6b3e:	8c 93       	st	X, r24
}
    6b40:	cf 91       	pop	r28
    6b42:	df 91       	pop	r29
    6b44:	08 95       	ret

00006b46 <Task3>:
void Task3(){
    6b46:	df 93       	push	r29
    6b48:	cf 93       	push	r28
    6b4a:	cd b7       	in	r28, 0x3d	; 61
    6b4c:	de b7       	in	r29, 0x3e	; 62
	TOG_BIT(PORTC,7);
    6b4e:	a5 e3       	ldi	r26, 0x35	; 53
    6b50:	b0 e0       	ldi	r27, 0x00	; 0
    6b52:	e5 e3       	ldi	r30, 0x35	; 53
    6b54:	f0 e0       	ldi	r31, 0x00	; 0
    6b56:	90 81       	ld	r25, Z
    6b58:	80 e8       	ldi	r24, 0x80	; 128
    6b5a:	89 27       	eor	r24, r25
    6b5c:	8c 93       	st	X, r24

}
    6b5e:	cf 91       	pop	r28
    6b60:	df 91       	pop	r29
    6b62:	08 95       	ret

00006b64 <__mulsi3>:
    6b64:	62 9f       	mul	r22, r18
    6b66:	d0 01       	movw	r26, r0
    6b68:	73 9f       	mul	r23, r19
    6b6a:	f0 01       	movw	r30, r0
    6b6c:	82 9f       	mul	r24, r18
    6b6e:	e0 0d       	add	r30, r0
    6b70:	f1 1d       	adc	r31, r1
    6b72:	64 9f       	mul	r22, r20
    6b74:	e0 0d       	add	r30, r0
    6b76:	f1 1d       	adc	r31, r1
    6b78:	92 9f       	mul	r25, r18
    6b7a:	f0 0d       	add	r31, r0
    6b7c:	83 9f       	mul	r24, r19
    6b7e:	f0 0d       	add	r31, r0
    6b80:	74 9f       	mul	r23, r20
    6b82:	f0 0d       	add	r31, r0
    6b84:	65 9f       	mul	r22, r21
    6b86:	f0 0d       	add	r31, r0
    6b88:	99 27       	eor	r25, r25
    6b8a:	72 9f       	mul	r23, r18
    6b8c:	b0 0d       	add	r27, r0
    6b8e:	e1 1d       	adc	r30, r1
    6b90:	f9 1f       	adc	r31, r25
    6b92:	63 9f       	mul	r22, r19
    6b94:	b0 0d       	add	r27, r0
    6b96:	e1 1d       	adc	r30, r1
    6b98:	f9 1f       	adc	r31, r25
    6b9a:	bd 01       	movw	r22, r26
    6b9c:	cf 01       	movw	r24, r30
    6b9e:	11 24       	eor	r1, r1
    6ba0:	08 95       	ret

00006ba2 <__udivmodqi4>:
    6ba2:	99 1b       	sub	r25, r25
    6ba4:	79 e0       	ldi	r23, 0x09	; 9
    6ba6:	04 c0       	rjmp	.+8      	; 0x6bb0 <__udivmodqi4_ep>

00006ba8 <__udivmodqi4_loop>:
    6ba8:	99 1f       	adc	r25, r25
    6baa:	96 17       	cp	r25, r22
    6bac:	08 f0       	brcs	.+2      	; 0x6bb0 <__udivmodqi4_ep>
    6bae:	96 1b       	sub	r25, r22

00006bb0 <__udivmodqi4_ep>:
    6bb0:	88 1f       	adc	r24, r24
    6bb2:	7a 95       	dec	r23
    6bb4:	c9 f7       	brne	.-14     	; 0x6ba8 <__udivmodqi4_loop>
    6bb6:	80 95       	com	r24
    6bb8:	08 95       	ret

00006bba <__udivmodhi4>:
    6bba:	aa 1b       	sub	r26, r26
    6bbc:	bb 1b       	sub	r27, r27
    6bbe:	51 e1       	ldi	r21, 0x11	; 17
    6bc0:	07 c0       	rjmp	.+14     	; 0x6bd0 <__udivmodhi4_ep>

00006bc2 <__udivmodhi4_loop>:
    6bc2:	aa 1f       	adc	r26, r26
    6bc4:	bb 1f       	adc	r27, r27
    6bc6:	a6 17       	cp	r26, r22
    6bc8:	b7 07       	cpc	r27, r23
    6bca:	10 f0       	brcs	.+4      	; 0x6bd0 <__udivmodhi4_ep>
    6bcc:	a6 1b       	sub	r26, r22
    6bce:	b7 0b       	sbc	r27, r23

00006bd0 <__udivmodhi4_ep>:
    6bd0:	88 1f       	adc	r24, r24
    6bd2:	99 1f       	adc	r25, r25
    6bd4:	5a 95       	dec	r21
    6bd6:	a9 f7       	brne	.-22     	; 0x6bc2 <__udivmodhi4_loop>
    6bd8:	80 95       	com	r24
    6bda:	90 95       	com	r25
    6bdc:	bc 01       	movw	r22, r24
    6bde:	cd 01       	movw	r24, r26
    6be0:	08 95       	ret

00006be2 <__divmodhi4>:
    6be2:	97 fb       	bst	r25, 7
    6be4:	09 2e       	mov	r0, r25
    6be6:	07 26       	eor	r0, r23
    6be8:	0a d0       	rcall	.+20     	; 0x6bfe <__divmodhi4_neg1>
    6bea:	77 fd       	sbrc	r23, 7
    6bec:	04 d0       	rcall	.+8      	; 0x6bf6 <__divmodhi4_neg2>
    6bee:	e5 df       	rcall	.-54     	; 0x6bba <__udivmodhi4>
    6bf0:	06 d0       	rcall	.+12     	; 0x6bfe <__divmodhi4_neg1>
    6bf2:	00 20       	and	r0, r0
    6bf4:	1a f4       	brpl	.+6      	; 0x6bfc <__divmodhi4_exit>

00006bf6 <__divmodhi4_neg2>:
    6bf6:	70 95       	com	r23
    6bf8:	61 95       	neg	r22
    6bfa:	7f 4f       	sbci	r23, 0xFF	; 255

00006bfc <__divmodhi4_exit>:
    6bfc:	08 95       	ret

00006bfe <__divmodhi4_neg1>:
    6bfe:	f6 f7       	brtc	.-4      	; 0x6bfc <__divmodhi4_exit>
    6c00:	90 95       	com	r25
    6c02:	81 95       	neg	r24
    6c04:	9f 4f       	sbci	r25, 0xFF	; 255
    6c06:	08 95       	ret

00006c08 <__udivmodsi4>:
    6c08:	a1 e2       	ldi	r26, 0x21	; 33
    6c0a:	1a 2e       	mov	r1, r26
    6c0c:	aa 1b       	sub	r26, r26
    6c0e:	bb 1b       	sub	r27, r27
    6c10:	fd 01       	movw	r30, r26
    6c12:	0d c0       	rjmp	.+26     	; 0x6c2e <__udivmodsi4_ep>

00006c14 <__udivmodsi4_loop>:
    6c14:	aa 1f       	adc	r26, r26
    6c16:	bb 1f       	adc	r27, r27
    6c18:	ee 1f       	adc	r30, r30
    6c1a:	ff 1f       	adc	r31, r31
    6c1c:	a2 17       	cp	r26, r18
    6c1e:	b3 07       	cpc	r27, r19
    6c20:	e4 07       	cpc	r30, r20
    6c22:	f5 07       	cpc	r31, r21
    6c24:	20 f0       	brcs	.+8      	; 0x6c2e <__udivmodsi4_ep>
    6c26:	a2 1b       	sub	r26, r18
    6c28:	b3 0b       	sbc	r27, r19
    6c2a:	e4 0b       	sbc	r30, r20
    6c2c:	f5 0b       	sbc	r31, r21

00006c2e <__udivmodsi4_ep>:
    6c2e:	66 1f       	adc	r22, r22
    6c30:	77 1f       	adc	r23, r23
    6c32:	88 1f       	adc	r24, r24
    6c34:	99 1f       	adc	r25, r25
    6c36:	1a 94       	dec	r1
    6c38:	69 f7       	brne	.-38     	; 0x6c14 <__udivmodsi4_loop>
    6c3a:	60 95       	com	r22
    6c3c:	70 95       	com	r23
    6c3e:	80 95       	com	r24
    6c40:	90 95       	com	r25
    6c42:	9b 01       	movw	r18, r22
    6c44:	ac 01       	movw	r20, r24
    6c46:	bd 01       	movw	r22, r26
    6c48:	cf 01       	movw	r24, r30
    6c4a:	08 95       	ret

00006c4c <__divmodsi4>:
    6c4c:	97 fb       	bst	r25, 7
    6c4e:	09 2e       	mov	r0, r25
    6c50:	05 26       	eor	r0, r21
    6c52:	0e d0       	rcall	.+28     	; 0x6c70 <__divmodsi4_neg1>
    6c54:	57 fd       	sbrc	r21, 7
    6c56:	04 d0       	rcall	.+8      	; 0x6c60 <__divmodsi4_neg2>
    6c58:	d7 df       	rcall	.-82     	; 0x6c08 <__udivmodsi4>
    6c5a:	0a d0       	rcall	.+20     	; 0x6c70 <__divmodsi4_neg1>
    6c5c:	00 1c       	adc	r0, r0
    6c5e:	38 f4       	brcc	.+14     	; 0x6c6e <__divmodsi4_exit>

00006c60 <__divmodsi4_neg2>:
    6c60:	50 95       	com	r21
    6c62:	40 95       	com	r20
    6c64:	30 95       	com	r19
    6c66:	21 95       	neg	r18
    6c68:	3f 4f       	sbci	r19, 0xFF	; 255
    6c6a:	4f 4f       	sbci	r20, 0xFF	; 255
    6c6c:	5f 4f       	sbci	r21, 0xFF	; 255

00006c6e <__divmodsi4_exit>:
    6c6e:	08 95       	ret

00006c70 <__divmodsi4_neg1>:
    6c70:	f6 f7       	brtc	.-4      	; 0x6c6e <__divmodsi4_exit>
    6c72:	90 95       	com	r25
    6c74:	80 95       	com	r24
    6c76:	70 95       	com	r23
    6c78:	61 95       	neg	r22
    6c7a:	7f 4f       	sbci	r23, 0xFF	; 255
    6c7c:	8f 4f       	sbci	r24, 0xFF	; 255
    6c7e:	9f 4f       	sbci	r25, 0xFF	; 255
    6c80:	08 95       	ret

00006c82 <__prologue_saves__>:
    6c82:	2f 92       	push	r2
    6c84:	3f 92       	push	r3
    6c86:	4f 92       	push	r4
    6c88:	5f 92       	push	r5
    6c8a:	6f 92       	push	r6
    6c8c:	7f 92       	push	r7
    6c8e:	8f 92       	push	r8
    6c90:	9f 92       	push	r9
    6c92:	af 92       	push	r10
    6c94:	bf 92       	push	r11
    6c96:	cf 92       	push	r12
    6c98:	df 92       	push	r13
    6c9a:	ef 92       	push	r14
    6c9c:	ff 92       	push	r15
    6c9e:	0f 93       	push	r16
    6ca0:	1f 93       	push	r17
    6ca2:	cf 93       	push	r28
    6ca4:	df 93       	push	r29
    6ca6:	cd b7       	in	r28, 0x3d	; 61
    6ca8:	de b7       	in	r29, 0x3e	; 62
    6caa:	ca 1b       	sub	r28, r26
    6cac:	db 0b       	sbc	r29, r27
    6cae:	0f b6       	in	r0, 0x3f	; 63
    6cb0:	f8 94       	cli
    6cb2:	de bf       	out	0x3e, r29	; 62
    6cb4:	0f be       	out	0x3f, r0	; 63
    6cb6:	cd bf       	out	0x3d, r28	; 61
    6cb8:	09 94       	ijmp

00006cba <__epilogue_restores__>:
    6cba:	2a 88       	ldd	r2, Y+18	; 0x12
    6cbc:	39 88       	ldd	r3, Y+17	; 0x11
    6cbe:	48 88       	ldd	r4, Y+16	; 0x10
    6cc0:	5f 84       	ldd	r5, Y+15	; 0x0f
    6cc2:	6e 84       	ldd	r6, Y+14	; 0x0e
    6cc4:	7d 84       	ldd	r7, Y+13	; 0x0d
    6cc6:	8c 84       	ldd	r8, Y+12	; 0x0c
    6cc8:	9b 84       	ldd	r9, Y+11	; 0x0b
    6cca:	aa 84       	ldd	r10, Y+10	; 0x0a
    6ccc:	b9 84       	ldd	r11, Y+9	; 0x09
    6cce:	c8 84       	ldd	r12, Y+8	; 0x08
    6cd0:	df 80       	ldd	r13, Y+7	; 0x07
    6cd2:	ee 80       	ldd	r14, Y+6	; 0x06
    6cd4:	fd 80       	ldd	r15, Y+5	; 0x05
    6cd6:	0c 81       	ldd	r16, Y+4	; 0x04
    6cd8:	1b 81       	ldd	r17, Y+3	; 0x03
    6cda:	aa 81       	ldd	r26, Y+2	; 0x02
    6cdc:	b9 81       	ldd	r27, Y+1	; 0x01
    6cde:	ce 0f       	add	r28, r30
    6ce0:	d1 1d       	adc	r29, r1
    6ce2:	0f b6       	in	r0, 0x3f	; 63
    6ce4:	f8 94       	cli
    6ce6:	de bf       	out	0x3e, r29	; 62
    6ce8:	0f be       	out	0x3f, r0	; 63
    6cea:	cd bf       	out	0x3d, r28	; 61
    6cec:	ed 01       	movw	r28, r26
    6cee:	08 95       	ret

00006cf0 <_exit>:
    6cf0:	f8 94       	cli

00006cf2 <__stop_program>:
    6cf2:	ff cf       	rjmp	.-2      	; 0x6cf2 <__stop_program>
